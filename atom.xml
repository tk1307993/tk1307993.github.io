<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-06-15T12:53:03.156Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java代写：CSCE315-5-by-5-Tic-Tac-Toe</title>
    <link href="https://tk1307993.coding.me/CSCE315-5-by-5-Tic-Tac-Toe.html"/>
    <id>https://tk1307993.coding.me/CSCE315-5-by-5-Tic-Tac-Toe.html</id>
    <published>2019-06-15T12:48:47.000Z</published>
    <updated>2019-06-15T12:53:03.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Your team has been assigned to write an Android video game for “5-Toe,” a 5 by 5 tic-tac-toe game. (Note: You do not have to have an Android phone, since this will be done on an emulator.) The human user plays against the computer, which uses an AI search to choose its moves, either minimax with alpha-beta pruning or A*.</p><p>The usual rules of tic-tac-toe apply: X (which is the computer) goes first, players take turns, and the game ends when one player wins by filling 5 squares in a row, column, or diagonal, or when all squares are filled (a tie, commonly referred to as “the cat got the game”).</p><p>When the game starts, the user selects the level of difficulty: easy, medium, or hard, and which AI to play against, minimax or A*. Then the computer places an X in the center (hard), in a corner (medium), or on an edge but not a corner (easy level). The square selected should be different each time the same level is selected; either cycle through the choices or pick a square at random. Each time the user clicks a square, place an O there and check for end of game. If the game is not over, run the chosen AI algorithm, display an X, and check for end of game.</p><ul><li>No more than one statement per line.</li><li>No function longer than 24 lines (one terminal window).</li><li>No line longer than 80 characters.</li><li>For the minimax search with alpha-beta pruning you may need some way of limiting the depth to avoid running out of memory or time. (The computer should move in 5 seconds or less.) The utility function X wants to maximize could be something like<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">5</span> X<span class="symbol">'s</span> - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">5</span> O<span class="symbol">'s</span>) * <span class="number">16</span> ^ <span class="number">4</span> +</span><br><span class="line">    (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">4</span> X<span class="symbol">'s</span> <span class="keyword">and</span> a blank - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">4</span> O<span class="symbol">'s</span> <span class="keyword">and</span> a blank) * <span class="number">16</span> ^ <span class="number">3</span> +</span><br><span class="line">    (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">3</span> X<span class="symbol">'s</span> <span class="keyword">and</span> <span class="number">2</span> blanks - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">3</span> O<span class="symbol">'s</span> <span class="keyword">and</span> <span class="number">2</span> blanks) * <span class="number">16</span> ^ <span class="number">2</span> +</span><br><span class="line">    (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">2</span> X<span class="symbol">'s</span> <span class="keyword">and</span> <span class="number">3</span> blanks - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">2</span> O<span class="symbol">'s</span> <span class="keyword">and</span> <span class="number">3</span> blanks) * <span class="number">16</span> +</span><br><span class="line">    (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">1</span> X <span class="keyword">and</span> <span class="number">4</span> blanks - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">1</span> O <span class="keyword">and</span> <span class="number">4</span> blanks) </span><br><span class="line">since there are <span class="number">12</span> winning lines (rows, columns, <span class="keyword">and</span> diagonals) <span class="keyword">and</span> <span class="number">16</span> &gt; <span class="number">12</span>. O’s utility <span class="keyword">function</span> <span class="title">would</span> then be -f, so f + (-f) = 0, a zero-sum game.</span><br></pre></td></tr></table></figure></li></ul><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><p>For A* you need to devise a heuristic function h(n) which comes as close as possible to the number of additional moves required to win without exceeding the actual number required. If a win cannot be guaranteed no matter how O moves, then h(n) is the estimated number of additional moves to tie, without exceeding the actual number of moves required. If neither a win nor a tie can be guaranteed for X, then h(n) is the estimated number of additional moves till the game ends with O winning.</p><p>Here are some ideas to get you started on A*:</p><ol><li>For each move, start A<em> over by using the current board state as the initial A</em> state. Generate the successor states (legal X moves) as possible values of n and calculate f(n) = g(n) + h(n). This makes g(n) always 1, since it takes 1 move to get from the initial state to n.</li><li>If there are 4 X’s and a blank in 2 rows, columns, or diagonals, and there are no lines with 4 O’s and a blank, then you can win in 2 more moves guaranteed, namely, O moves and then X wins, so h is 2.</li><li>If there are 3 X’s and 2 blanks in a row, column, or diagonal, then it will take at least 4 more moves. However, you must also consider how close O is to winning and whether blocking O is more urgent. For example<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="code"> X | X |   |   | X</span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   | X |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code"> O | O |   | O | O</span></span><br></pre></td></tr></table></figure></li></ol><p>will end in a tie (assuming both players make the best move), so h would be 17 (the number of blanks). Thus you need to consider not only the squares which need X’s to make 5 in a row, but also the squares which need X’s to block O’s moves; some squares may do both.</p><p>If a node (board state) n would allow O to win in 1 move, then assign a “too big” value to h(n), e.g., 25, to insure that A* will not move to state n unless X cannot win or tie.</p><p>There are numerous 3 by 3 tic-tac-toe Android apps on the Internet, which you can use for ideas if you cite them. However, if you are going to make your million with this game :-), you should not use any code or code ideas from others or you could be liable for copyright infringement and spend all your profits on lawyers and fines :-(. Note that some of these claim to use AI but really don’t!</p><p>This is a team project, with three or four students per team. (Teams of four will have an additional task.) Your assigned team should immediately meet and exchange all contact information and schedule at least one meeting per day. Choose a clever team name (but keep it clean :-)), discuss your strengths in Android, Java, C++, threads, GUI’s, XML, learning new IDE’s quickly, debugging, report writing, etc., and elect a team leader to coordinate the project.</p><p>Choose one person to have the primary responsibility for each of these tasks (although you will need to help the other two on their tasks as well):</p><ol><li>Choose a free Android emulator (Android Studio recommended, but you might want to look at MIT’s “invention machine”) and install it where all team members can use it. Write an XML GUI and the main part of the game in the Android subset of Java and find out how to call a C++ function from it.</li><li>Write a minimax search with alpha-beta pruning in C++ and interface it to the main Java program.</li><li>Write an A* search in C++ and interface it to the main Java program.</li><li>(Team of four only) A clever way to get more time for the AI search is to use the human’s “think time” (which doesn’t count against the 5-second limit for the computer to move) in a separate thread. In other words, as soon as the computer places an X, the second thread immediately starts searching ahead. Then when the human “finally” enters a move, the 5-second clock starts, the main thread tells the second thread to take O’s move and only continue searching that subtree. If the search has not completed in 4.5 seconds, tell the second thread to stop when the current ply is finished, then make the best move and start the second thread over searching ahead.</li></ol><p>Follow the Agile methodolgy as described in the slides, including:</p><ul><li>a master burn-down list of remaining tasks and estimated time for each task</li><li>at least 2 “weekly” meetings to assign tasks from the burn-down list</li><li>at least 10 “daily” scrums (15-minute meetings) to report progress and problems and update the burn-down list items and time still needed</li><li>a graph of projected and actual burn-down rate<br>If the game is complete then consider adding sound (like a meow for a tie), color, motion, blinking screen for “You beat the computer!!!”, etc.</li></ul><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Create a team project 3 repository on github and grant access to the instructor and the TA in addition to your team members.</p><p>Identify all the tasks in the project that you can and post that to your repository as the initial project task burn-down list, with the estimated number of days for each task. Add new items you discover are needed and delete items when they are finished.</p><p>Each team must maintain a development log (wiki page in github titled “Development Log”) updated by the team members. This log will be graded. There is no designated format, except that you need to time stamp, write down the name, and write a brief description of the activity, as in Project 2. We will check your daily progress.</p><p>Major routines should include unit testing. Demo in the lab may be required.</p><h3 id="Test-session-log"><a href="#Test-session-log" class="headerlink" title="Test session log"></a>Test session log</h3><p>This is a human-readable transcript of at least two complete games, one using minimax and one using A*, showing the board in graphical form, the number of nodes expanded, and the time required (user plus system) to calculate the AI move. For example,<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="code"> Game begins</span></span><br><span class="line"><span class="code"> Difficulty: Easy</span></span><br><span class="line"><span class="code"> AI algorithm: A*</span></span><br><span class="line"></span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code"> X |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line"></span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code"> X |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   | O |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line"></span><br><span class="line">345678 nodes expanded in 4.321 seconds</span><br><span class="line"><span class="code"> X |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code"> X |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   | O |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   |</span></span><br></pre></td></tr></table></figure></p><p>and so on.</p><h3 id="Post-production-notes"><a href="#Post-production-notes" class="headerlink" title="Post production notes"></a>Post production notes</h3><p>This is a wiki page with changes you had to make to your design and why, difficulties, solutions, lessons learned, etc.</p><p>Final printed report should include the three preceding items and a printout of all source code. Use the “Download ZIP” feature in github and upload the resulting zip file of all source code (team leader only). For the wiki documents we will check the github repository.</p><p>The report must include the consensus individual work load distribution (percentage, must add up to 100%). Include this in the “Post production notes”. Formula for individual score calculation is as follows: individual score = min(sqrt(your percentage <em> number of team members / 100) </em> team_score,110). For example, if you are on a team of 4 and your team agrees your contribution was 20% and your team score was 85, your individual score is min(sqrt(20 / 25) <em> 85, 110) = 76. Note that 25% is the baseline (equal contribution by all four members). If your contribution was 30% and your team score was 85, your individual score is min(sqrt(30 / 25) </em> 85 ,110) = 93.</p>]]></content>
    
    <summary type="html">
    
      代写一个包含AI的5x5的Tic-Tac-Toe游戏，相比基础的3x3的Tic-Tac-Toe，这次这个作业不仅增加了棋盘尺寸，还需要用A*算法来实现AI，UI需要在Android模拟器上显示。总体来说属于偏难的作业类型。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：FIT9131-My-Library</title>
    <link href="https://tk1307993.coding.me/FIT9131-My-Library.html"/>
    <id>https://tk1307993.coding.me/FIT9131-My-Library.html</id>
    <published>2019-06-06T01:50:50.000Z</published>
    <updated>2019-06-06T01:53:27.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>For this assignment you are required to write a program, My Library, that simulates a very small library of electronic books. This section specifies the required functionality of this program.</p><p>Even though this program is functionally very different from the program you wrote in Assignment 1, you should be able to re-use much of your previous code here - if you have designed the classes/logic in your previous program properly. This is one of the major benefits of an object-oriented program - the ability to re-use classes.</p><p>My Library should provide the following features:</p><ul><li>maintains a list (using a Java Collection class) of Borrower objects<br>each Borrower object represents a person who is allowed to borrow some books from the library</li><li>maintains a fixed list of exactly 10 books</li><li>each book is implemented using a String, which consists of the book’s title and the author</li><li>each book can be borrowed by different borrowers at the same time</li><li>(HD level) maintains a fixed list of unlimited Book objects</li><li>each Book object represents a single (electronic) book which can be borrowed by different borrowers at the same time</li><li>a book has a rating (children/adult), which limits its availability to a borrower based on his age</li><li>allows each borrower to borrow up to 2 books at any one time</li><li>lists the details of an existing borrower and the books he has currently borrowed</li><li>produces a report of all borrowers</li><li>allows a borrower to borrow/return a book</li><li>loads a list of borrowers from a text file</li><li>a sample data file will be provided to you – your program must be able to read the data from this file</li><li>(HD level) loads a list of books from a text file</li><li>a sample data file will be provided to you – your program must be able to read the data from this file</li><li>saves the list of current borrowers (with the borrowed books) to a text file</li></ul><p>You are to demonstrate the following programming techniques in your program:</p><ul><li>reading/writing data from/to text files</li><li>using appropriate Java Collection class or classes to store data</li><li>using code to manipulate the data in the collection(s)</li><li>performing simple searches, filtered by some given criteria</li><li>using program constructs such as repetitions &amp; selections</li><li>using appropriate classes to represent the various objects in the program</li></ul><p>There will be a description of the “HD level” features later in this document.</p><p>You are also required to produce a partial Test Strategy for your program.</p><h3 id="Program-Logic"><a href="#Program-Logic" class="headerlink" title="Program Logic"></a>Program Logic</h3><p>When the program starts, it should automatically load a text file called “borrowers.txt” which contains details of all borrowers currently stored in the system. The actual format of this text file is described later in this document. The data loaded should be stored in some appropriate data structures. No other reading from (or writing to) file is required while the program is in operation, until the user chooses to exit, at which point the program saves all the in-memory data back to the same text file (borrowers.txt).</p><p>In other words, all the file I/O operations are performed automatically by the program, once at the start and once at the end, and require no interactions with the user.</p><p>When the program is running, it should repeatedly display a menu with at these options (non-HD level), such as:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the My Library</span><br><span class="line">====================</span><br><span class="line">(1) Register New Borrower</span><br><span class="line">(2) Manage Borrower</span><br><span class="line">(3) List All Borrowers</span><br><span class="line">(4) Display Help</span><br><span class="line">(5) Exit Library</span><br><span class="line">Choose an option:</span><br></pre></td></tr></table></figure></p><h3 id="Program-Design"><a href="#Program-Design" class="headerlink" title="Program Design"></a>Program Design</h3><p>Your program must demonstrate your understanding of the object-oriented concepts and general programming constructs presented in FIT9131. You must use appropriate data structures to store the various objects (list of borrowers, list of books (HD-level), etc) in the program.</p><p>You must be able to justify the choice of the data structures during your interview. You must document any additional assumptions you made.</p><p>Appropriate validations of values for fields and local variables should also be implemented. You should not allow an object of a class to be initialized/set to an invalid state.</p><p>Discuss with your tutor what classes are appropriate, and how they interact with each other. The main requirements are: (1) the borrowers (and for the HD level, the books) must be implemented as objects, and they must be stored in some appropriate Java collections, and (2) the list of books within each borrower object must also be stored in some appropriate Java collections.</p><p>Your program must deal with invalid values entered by the user in a sensible manner. For instance, if a user enters “abc” when a number is expected, your program should not crash.</p><p>All on-screen input/output should be formatted in a user-friendly manner. Sensible error messages should be displayed whenever appropriate (eg. entering a duplicate borrower ID, entering a number outside the allowable valid range, etc).</p><h3 id="Test-Strategy"><a href="#Test-Strategy" class="headerlink" title="Test Strategy"></a>Test Strategy</h3><p>For this assignment, you are required to produce and submit a partial Test Strategy for the program.</p><p>Your Test Strategy will be only for one class - the Borrower class.</p><p>There is no need to produce Test Strategy for any other classes you have used in your program.</p><p>You must provide a Test Plan, plus detailed sets of Test Data, Expected Results and Actual Results for the Borrower class.</p>]]></content>
    
    <summary type="html">
    
      用Java基础类实现一个图书馆的小应用，可以借书、还书、管理书等等，属于很基础但是有一定工程量的程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CUDA代写：CME213-Heat-Diffusion-Equation</title>
    <link href="https://tk1307993.coding.me/CME213-Heat-Diffusion-Equation.html"/>
    <id>https://tk1307993.coding.me/CME213-Heat-Diffusion-Equation.html</id>
    <published>2019-06-06T01:50:50.000Z</published>
    <updated>2019-06-09T02:57:13.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This assignment builds on the previous assignment’s theme of examining memory access patterns. You will implement a finite difference solver for the 2D heat diffusion equation in different ways to examine the performance characteristics of the different implementations.</p><h3 id="Background-on-the-heat-diffusion-PDE"><a href="#Background-on-the-heat-diffusion-PDE" class="headerlink" title="Background on the heat diffusion PDE"></a>Background on the heat diffusion PDE</h3><p>To solve this PDE, we are going to discretize both the temporal and the spatial derivatives. To do this, we define a two-dimensional grid G(i, j), 1 ≤ i ≤ n(x), 1 ≤ j ≤ n(y), where we denote by n(x) (resp. n(y) ) the number of points on the x-axis (resp. y-axis). At each time-step, we will evaluate the temperature and its derivatives at these gridpoints.</p><p>While we will consistently use a first order discretization scheme for the temporal derivative, we will use 2nd, 4th or 8th order discretization of the spatial derivative.</p><p>If we denote by T(i, j) the temperature at time t at point (i, j) of the grid, the 2nd order spatial discretization scheme can be written.</p><p>The C(x) (xfcl in the code) and C(y) (yfcl in the code) constants are called Courant numbers. They depend on the temporal discretization step, as well as the spatial discretization step. To ensure the stability of the discretization scheme, they have to be less than a maximum value given by the Courant-Friedrichs-Lewy condition. You do not have to worry about this, because the starter code already takes care of picking the temporal discretization step as to maximize the Courant numbers while ensuring stability.</p><p>The starter code also contains host and device functions named stencil which contain the coefficients that go into the update equation. Therefore, you do not need to figure out how to implement the different order updates. You only need to understand how this function works and pass in the arguments correctly.</p><h3 id="Boundary-conditions"><a href="#Boundary-conditions" class="headerlink" title="Boundary conditions"></a>Boundary conditions</h3><p>The starter code contains the functions that will update the boundary conditions for you (see file BC.h, in particular the function gpuUpdateBCsOnly) and the points that are in the border (which has a size of order / 2). This way, you do not have to worry about the size of the stencil as you approach the wall.</p><h3 id="Various-implementations"><a href="#Various-implementations" class="headerlink" title="Various implementations"></a>Various implementations</h3><p>In this programming assignment, we are going to implement 2 different kernels (and you can do a third one for extra credit):</p><ul><li><p>Global (function gpuStencil): this kernel will use global memory and each thread will update exactly one point of the mesh. You should use a 2D grid with n(x) × n(y) threads total.</p></li><li><p>Block (function gpuStencilLoop): this kernel will also use global memory. Each thread will update numYPerStep points of the mesh (these points form a vertical line). You should also use a 2D grid with n(x) × n(y) / numYPerStep threads total.</p></li><li><p>(Extra Credit) Shared (function gpuShared): this kernel will use shared memory. A group of threads must load a piece of the mesh in shared memory and then compute the new values of the temperatures on the mesh. Each thread will load and update several elements.<br>Parameter file</p></li></ul><p>The parameters used in the computation are read from the file params.in. You will need to modify some parameters (see description of the starter code) in this file to answer some of the questions. But this file will be not be submitted through the submission script.</p><p>Here is a list of parameters that are used in the order they appear in the file:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> nx_, ny_;    // <span class="keyword">number</span> of grid points <span class="keyword">in</span> each <span class="keyword">dimension</span></span><br><span class="line"><span class="keyword">double</span> lx_, ly_; // extent of physical domain <span class="keyword">in</span> each <span class="keyword">dimension</span></span><br><span class="line"><span class="built_in">int</span> iters_;      // <span class="keyword">number</span> of iterations to <span class="keyword">do</span></span><br><span class="line"><span class="built_in">int</span> order_;      // order of discretization</span><br></pre></td></tr></table></figure></p><h3 id="Start-code"><a href="#Start-code" class="headerlink" title="Start code"></a>Start code</h3><p>The starter code is composed of the following files:</p><ul><li>main.cu — This is the CUDA driver file. Do not modify this file.</li><li>gpuStencil.cu — This is the file containing the kernels. You will need to modify this file.</li><li>Makefile — make will build the binary. make clean will remove build files as well as debug output. Do not modify this file.</li><li>params.in — This file contains a basic set of parameters. For debugging, performance testing, and to answer the questions, you will need to modify this file. The only parameters you should modify are nx, ny (line 1) and order (line 4). This file however will not get submitted through the script.</li><li>simParams.h and simParams.cpp — These files contain the data structure necessary to handle the parameters of the problem. Do not modify these files.</li><li>Grid.h and Grid.cu — These files contain the data structure that models the grid used to solve the PDE. Do not modify this file.</li><li>BC.h — This file contains the class boundary_conditions that will allow us to update the boundary conditions during the simulation. Do not modify this file.</li><li>hw3.sh — This script is used to submit jobs to the queue</li></ul><blockquote><p>Note The files in the starter code contain some additional information about the implementation in the form of comments. Additionally, the CPU implementation should provide a clearer picture of the method and should aid your GPU work.</p></blockquote><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h5><p>(30 points) Implement the function gpuStencil that runs the solver using global memory. You must also fill in the function gpuComputation. The difference (in terms of the norms) between your implementation and the reference to should be in the expected range.</p><h5 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h5><p>(35 points) Implement the function gpuStencilLoop that runs the solver using global memory but where each thread computes several points on the grid. You must also fill in the function gpuComputationLoop.<br>The difference (in terms of the norms) between your implementation and the reference to should be in the expected range.</p><h5 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h5><p>(15 points) Plot the bandwidth (GB/s) as a function of the grid size (in units of MegaPoints) for the following grid sizes: 256×256; 512×512; 1024×1024; 2048×2048; 4096×4096.<br>You must have 2 plots (or 3 plots if you choose to do the extra credit) as follows:</p><ol><li>For order = 4, plot the bandwidth for the 2 (or 3) different algorithms.</li><li>For the block implementation, plot the bandwidth for the 3 different orders.</li><li>If you implemented the shared algorithm, plot the bandwidth for the 3 different orders.</li></ol><h5 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h5><p>(20 points) Which kernel (global, block or shared) and which order gives the best performance (your answer may depend on the grid size)? Explain the performance results you got in Question 3.</p><h5 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h5><p>(20 points Extra Credit) Implement the function gpuShared that runs the solver using shared memory. You should also fill in the function gpuComputationShared. Note that you have to answer the questions related to.<br>Total number of points: 100 (+20 Extra credit)</p>]]></content>
    
    <summary type="html">
    
      用CUDA编写程序来计算热扩散方程，背景挺吓人的，不过工作量只是实现几个GPU的函数。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>JavaFX代写：CSE2100-Cosmic-Wimpout</title>
    <link href="https://tk1307993.coding.me/CSE2100-Cosmic-Wimpout.html"/>
    <id>https://tk1307993.coding.me/CSE2100-Cosmic-Wimpout.html</id>
    <published>2019-06-01T01:19:30.000Z</published>
    <updated>2019-06-01T01:21:38.208Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>For this project, you will implement a JavaFX-based two-player (human vs. computer) version of the dice game called Cosmic Wimpout. You will need to use many or all of the techniques covered in class this semester, like arrays, classes, inheritance and polymorphism, and GUI programming.</p><p>Cosmic Wimpout is played with five six-sided dice. Four of these dice have the following values printed on their faces: 10, 2, 3, 4, 5, 6. The fifth die is called the “Sun” die, and has the image of a star (the “Flaming Sun”) in place of the 3. Thus, its faces have the values 10, 2, *(sun), 4, 5, and 6. The sun is treated as a wild value; that is, it may be substituted for any other face value. During a player’s turn, he rolls all five of these dice.</p><p>Play follows the official rules:</p><ol><li>The players agree on a game goal, usually 300 or 500 points (this is known as the Winning Total). The first player to exceed this score wins the game.</li><li>Each player rolls one of the regular dice (not the “Sun” die). The player who rolls the highest face value goes first (10 beats 6). If a tie occurs, the tied players roll again.<br>When it becomes a player’s turn, he begins by rolling all five dice, and counts up the score for that roll:</li><li>Five matching faces are called a Freight Train. A Freight Train is worth a number of points equal to 100 times the face showing on any one die. For example, a Freight Train consisting of five 4’s is worth 400 points.</li><li>If a player rolls five sixes, he automatically wins the game.</li><li>Too Many Points: Rolling five 10’s (a Supernova) automatically knocks a player out of the game.<br>Three matching faces on the same throw are called a flash, and are worth 10 points times the face value. For example, three 5’s are worth 50 points.</li><li>If the “Flaming Sun” comes up, it can be used to form the third value in a flash, or it can be treated as a 5 or a 10 for the purposes of scoring. If a Flaming Sun is rolled along with a pair of any other values, the Flaming Sun MUST be used to form a flash.<br>5’s and 10’s that do not form part of a flash are worth 5 or 10 points, respectively.</li><li>If a player rolls something other than numbers (5 or 10), flashes, or a Freight Train, he is said to have wimped out, and loses his turn. He does not gain any points for that turn.</li><li>If a player rolls anything that will earn him points during a turn (a 5 or 10 on one or more dice, or a flash, or a freight train), he may set aside those dice and re-roll the remaining dice to accumulate more points. He may continue to re-roll and accumulate points until he either wimps out (losing all points for the turn) or chooses to stop voluntarily.</li><li>A player officially enters the game when he gets 35 or more points on his first roll. Until a player enters the game, he does not accumulate any points from rolling the dice. Your program should announce when each player enters the game.<br>You May Not Want To But You Must: If a player scores with all five dice, he must continue his turn and roll all five dice again. He continues to accumulate points until he either wimps out or scores with four or fewer dice.</li><li>The Futtless Rule: All flashes must be cleared. To clear a flash (three of a kind), a player must re-roll all non-scoring dice. If one or more of the re-rolled dice match the dice that make up the flash, the player must repeat the re-roll until none of them match the flash value.</li><li>The current player may voluntarily end his turn whenever he rolls and does not wimp out, except when he has fewer than 35 points or is subject to the “You May Not Want To But You Must” rule or the Futtless Rule. When a player ends his turn without wimping out, he adds his accumulated points to his total.<br>12。 Last Licks: When a player reaches the Winning Total, each of the other players receives one last roll, which they must use to attempt to catch up in terms of points.</li></ol><p>Your program should use JavaFX to present an appealing user interface for the game (focus on implementing a text-based version of the game first, then add the GUI at the end).</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>A player rolls<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">10</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>The 5 and 10 are scoring dice, so they are set aside (for a total of 15 points so far). The player chooses to re-roll the remaining three dice, obtaining:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">10</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>(Note that this does not create a flash, since three 10s were not rolled at the same time)<br>Now the player chooses to stop (he has not wimped out, since he rolled at least one scoring die), and take his 35 points for the turn.<br>Suppose the current player rolls<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">3</span> <span class="number">5</span> * <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>This creates a flash worth 50 points (the Flaming Sun counts as the third 5 for the purposes of the flash). This flash must be cleared, so the player re-rolls the 3 and 4, getting:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>Since the 5 duplicates the flash that was just rolled, both dice must be re-rolled:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>This clears the flash (since the player didn’t roll a 5 this time), but 3 is a non-scoring value (remember that only 5 and 10 count as scoring values outside of a flash or freight train). As a result, the player has wimped out, and will not earn any points for this turn.</p><h3 id="Grading-Rubric"><a href="#Grading-Rubric" class="headerlink" title="Grading Rubric"></a>Grading Rubric</h3><p>This program is worth a total of 40 points, broken down as follows:</p><ul><li>Game correctly plays one turn by the human player - 10 points</li><li>Game correctly plays one turn by the computer - 10 points</li><li>Game correctly plays to completion - 10 points</li><li>Graphical User Interface - 10 points</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个和电脑玩的骰子游戏，用JavaFX做界面。游戏叫Cosmic Wimpout，玩法倒是挺新颖的。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Java" scheme="https://tk1307993.coding.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#代写：COMP5348-Video-Store</title>
    <link href="https://tk1307993.coding.me/COMP5348-Video-Store.html"/>
    <id>https://tk1307993.coding.me/COMP5348-Video-Store.html</id>
    <published>2019-05-28T12:33:41.000Z</published>
    <updated>2019-05-28T12:36:15.935Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Enterprise applications usually need to integrate with a number of legacy or third party systems to fulfill business requirements. In this assignment, your task is to provide a suitable integration solution to integrate the VideoStore application with the 3 other applications shown in Figure 1. Integration with these 3 applications is required in order to support the following workflow for submitting orders:</p><p>When an order is placed, the video store application should:</p><ul><li>Request a transfer of funds from the customer’s account to VideoStore’s account using the services provided by the Bank Application.</li><li>If the transfer is successful, the video store requests delivery for the purchased items from DeliverCo. DeliveryCo notifies the video store when delivery is complete. Further:</li><li>The customer is notified via email (using the EmailService) when a delivery is submitted to DeliveryCo, AND when DeliveryCo claims that the delivery is complete.</li><li>The stock levels for an ordered media item should also be updated if an order is successfully submitted.</li></ul><p>If the transfer fails, the customer is notified via email (using the EmailService) that there is a problem with their credit, and that the purchase order cannot proceed.</p><p>The four applications are currently integrated through synchronous point to point calls, and most of the workflow described above can be seen in VideoStore.Business.Components/OrderProvider::SubmitOrder().The solution is setup with a customer account username: “Customer” and password: “Customer”. We suggest you use this account for your testing. The current integration solution is functional, but isn’t ideal in addressing quality attributes like availability and reliability. In lectures and tutorials you looked at technologies including asynchronous messaging, message oriented middleware and web services. You will need to modify the integration solution provided and improve its availability and fault-tolerance. You need to take the following into account:</p><ol><li>How are the availability and reliability quality attributes improved? You need to show message diagrams for various cases of subsystem failure (eg What happens if the VideoStore is up and the Bank component is down?).</li><li>Apart from availability and reliability, how are the other quality attributes mentioned in the first lecture affected by your design? System architects need to make trade-offs between different quality attributes (eg: tolerating more failures vs improved performance when there are no failures), and this is acceptable as long as the architect can correctly justify their choices.</li></ol><p>You will need to consider how your solution handles failure conditions (not just the one above but also any other failure conditions you can identify). You can assume that the delivery company will eventually be successful in delivering any orders they receive but that their system may go down. In your submission you will need to include a report which describes your integration solution and answers questions 1, and 2, giving specific scenarios that illustrate how your integration solution improves availability and fault tolerance, and how your solution affects other quality attributes.</p><h3 id="Group-Formation"><a href="#Group-Formation" class="headerlink" title="Group Formation"></a>Group Formation</h3><p>Each group should contain 3 students. In exceptional cases (with lecturer’s permission in advance) a group may have 4 students, but such a group may be required to take on additional work.</p><p>A group is formed when the students involved each join it through the sign-up sheet on the eLearning site for comp5348. Once someone joins a group, they can see the Assignment itself.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>A zipped file containing source code for your application and a readme file explaining how to run your application.</p><p>A description of how your code works focusing on message exchanges between your components and showing how you will handle the unavailability of various systems. You should justify trade-offs that you made. That is, your report must include answers to questions 1 and 2 from the assignment description.</p><p>A copy of the Academic Honesty cover sheet (group work version) signed by all members of the group Submit deliverables 1 and 2 through eLearning, and hand in deliverable 3 in person at the lab.</p><h3 id="Some-Q-amp-A"><a href="#Some-Q-amp-A" class="headerlink" title="Some Q &amp; A"></a>Some Q &amp; A</h3><blockquote><p>Q1) How do I run the 4 applications and the VideoStore web-client?</p></blockquote><p>A1) a) Create the Videos, Bank, and Deliveries databases along with their associated tables.<br>b) Start each of the applications by right clicking on the following projects, and then clicking on Debug &gt; Start New Instance : Bank.Process; DeliveryCo.Process; EmailService.Process; VideoStore.Process. You can then also start the VideoStore web client by right clicking on VideoStore.WebClient and then clicking on Debug &gt; Start New Instance. Remember to login with the username “Customer” and the password “Customer” (both without the quotes).</p><blockquote><p> Q2) Do I need to modify the EmailService so that it actually sends emails?</p></blockquote><p>A2) No, the EmailProvider simply needs to print out that a message was sent to a certain address for this assignment (which is the current implementation).</p><blockquote><p>Q3) The debugger stops when I try to place an order when the Customer has insufficient funds; or when I place an order for a media item with insufficient stock. How can I observe the application functionality without the debugger stopping in these situations?</p></blockquote><p>A3) Before placing your order you can “Detach” the debugger (Debugger &gt; Detach All) to observe the overall functionality in the question’s scenarios without being interrupted by the debugger.</p>]]></content>
    
    <summary type="html">
    
      需求是一堆User Story加上几张软件UML图，业务逻辑得靠现有的代码去推敲。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>C#代写：CIS501-Instant-Messaging-App</title>
    <link href="https://tk1307993.coding.me/CIS501-Instant-Messaging-App.html"/>
    <id>https://tk1307993.coding.me/CIS501-Instant-Messaging-App.html</id>
    <published>2019-05-25T10:43:34.000Z</published>
    <updated>2019-05-25T10:46:26.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this project, you are to design and implement an Instant Messaging App (IM App) using the Model View Controller architecture design with delegates. The IM App consists of a front-end (Client) and a back-end (Server) component.</p><p>The IM App builds on the WebSocket Chat Client/Server Apps exercises that we did in class on with some additional functionality as listed bellow:</p><ul><li>Users can log in/out from the Server; logging in requires a name and password, which are managed in the Server and must be persisted across running sessions by serializing the account objects as a JSON string stored in a file.</li><li>Once logged in, users can manage their contact list by adding and removing contact entries.</li><li>At the client side, the contact list shows each contact’s status (online/offline). This status is dynamically updated as the users in the list log in/out from the server.</li><li>A user X, while online, can establish a 2-way chat session with another user (with online status) in X’s contact list. Conversations are not recorded/saved in the Server.</li><li>While user X is chatting with user Y, any of them can add a third user Z (also online) to have a group chat.</li><li>Similar to the class exercise, the Client and Server Apps communicate via a WebSocket connection. Moreover, each chat message should be time-stamped and the client GUI should indicate who sends the message in the chat window.</li></ul><h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><p>As you might have experienced when using some IM app, there are many IM features that can be provided. Bellow are the minimal use cases that your solution must provide.</p><p>Log in/Sign in. A user A launches the Client app (C) and enters a name (n) and password (p) to log into the Server (S). Server S can respond to C in two ways:</p><p>Login is successful – if p matches what is in n’s account record, or if n is a new name, in this case, S creates a new account with name n and password p.</p><p>Login is unsuccessful – if p does not match the information in n’s account records.</p><p>Server-Client Synch. After a successful login, Server S communicates A’s contact list to client C (empty if n is a new name), and let other online users, that have A in their contact lost, know that A is now online, (the other user’s contact list displays A as online). A can use client C to do any of the following:</p><p>Add a new contact. A enters contact name (e.g. b). If an account exists in server S with name b, server S adds b to A’s contact list (persisted), and let client A know so it can update/display A’s contact list appropriately. Otherwise, (if b does not exists), server S notifies client C (and thus A) that b does not exists.</p><p>Remove an existing contact (e.g. C). A selects the contact c from A’s contact list, confirms/cancels the removal of the contact. If confirmed, server S removes c from A’s contact list (persisted, and let client A know). If cancelled, nothing should happen.</p><p>Chat with a contact (or more) (e.g. D) that is online. Client A opens a chat window where A can send messages to D (and vice versa). Server S sends both clients (e.g. A and D) the contact list that both have in common.</p><p>Either A or D add a third client E to the chat (E is common to A and D). Server S sends E the chat history for that particular session.</p><p>Log out. Server S notifies other online users that have A in their contact list that A is now offline (the other user’s client displays A status accordingly).</p><p>Note that the above description left out some details; for example, when A is chatting with D And somehow D goes offline, should A’s client close the chat window? In such unspecified cases, you are given the degree of freedom to creatively decide how your solution should behave.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><p>In this phase, you are to write use case realizations, create class and state diagrams for your server and client apps. The goal of your architecture design is to increase/benefit coupling and cohesion, and non functional requirements like. Here is the list of artifact expected in your design:</p><p>Elaborate a detailed Use Case Realization for the Use Cases “Add a new contact” and “Log out”.</p><p>Class Diagrams for your solution that follows the MVC architecture with interfaces, delegates, and patterns as appropriate. Note that your class diagram should include classes (whose objects will be de/serialized) for client/server communication. You can submit your diagrams as PDF files generated form a computer program (e.g. Visio), or scanned if you create nice and CLEAR drawings.<br>State Diagrams for the controllers in your MVC.</p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>In this phase, you are to implement the client and the server apps that fulfill all the functional requirements described in the Use Cases. If you have made some revisions on your diagrams, submit the revised class and state diagrams along with your implementation.</p><h4 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h4><p>Design<br>Your submissions should consist of PDF documents named TeamN-FP-DesignName.PDF, where N is your team number, and DesignName can be “UCR” for use case realization, “CD” for class diagram, or “SD” for state diagram.</p><h4 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h4><p>VS projects, C# code, and other files should be submitted using your GitHub account. Each team member must upload to GitHub his or her team solution.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业是用C#来写一个Server/Client架构的IM通信工具，本质上就是一个网络编程加业务逻辑堆叠的产物。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="MVC" scheme="https://tk1307993.coding.me/tags/MVC/"/>
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>AI代写：CS3049-Likelihood-Weighted-Sampling</title>
    <link href="https://tk1307993.coding.me/CS3049-Likelihood-Weighted-Sampling.html"/>
    <id>https://tk1307993.coding.me/CS3049-Likelihood-Weighted-Sampling.html</id>
    <published>2019-05-23T15:23:36.000Z</published>
    <updated>2019-05-23T15:25:56.248Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Probabilistic-graphical-models"><a href="#Probabilistic-graphical-models" class="headerlink" title="Probabilistic graphical models"></a>Probabilistic graphical models</h3><p>Your task is to write a program to implement likelihood weighted sampling, as described in lecture 18, to perform inference on an arbitrary probabilistic graphical model (PGM) of boolean random variables. You will need to parse an input text file that encodes the graph and the conditional probability distributions for each variable (conditioned on its parents). The format of the file is given in the section below. Two networks have been defined in this format and can be downloaded, along with two queries each from the forum, in file ass3.zip.</p><p>Your program must be able to parse any file of this format to create and populate an internal data structure of the PGM.<br>Your program must then prompt the user via the console (or read from redirected standard input) for a single variable query, parse the query correctly and evaluate the conditional probability distribution of the query variable, given the evidence. The result must be written as two decimal values (corresponding to the values of P(QueryVar=true|…) and P(QueryVar=false|…)) onto the standard output stream, separated by white space. For example:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0<span class="selector-class">.872</span> 0<span class="selector-class">.128</span></span><br></pre></td></tr></table></figure></p><p>Note that if you write anything else before these two numbers, automark will interpret that output as the answer, almost certainly resulting in a test failure.</p><h3 id="File-format"><a href="#File-format" class="headerlink" title="File format"></a>File format</h3><p>The graphical model will be specified by a text file with format:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">N</span><br><span class="line"></span><br><span class="line">rv0 rv1 ... rvN<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> ... <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> ... <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> ... <span class="number">0</span></span><br><span class="line">mat0</span><br><span class="line"></span><br><span class="line">mat1</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">matN<span class="number">-1</span></span><br></pre></td></tr></table></figure></p><p>Here:</p><ul><li>N is the number of random variables in the network;</li><li>rv are the random variable names (arbitrary alphanumeric strings);</li><li>mat are two dimensional arrays of real numbers (in ASCII) that specify the conditional probability table of each random variable conditioned on its parents;</li><li>The matrix of zeros and ones specifes the directed arcs in the graph; a one (1) in the i,j entry indicates there is an edge from i to j (so the ith variable is a parent of the jth variable.</li></ul><p>The format of the Conditional Probability Table (CPT) matrices is a bit subtle. If a node has m parents, then the matrix needs to specify the probability of each outcome (true, false) conditioned on 2^m different combinations of parent values, so the matrix will be 2^m × 2 (rows × columns). Treating true as 1, and false as 0, concatenate the values of the parents in their numerical order from most significant bit to least significant bit (left to right) to create a row index r. The entry in the first column, rth row is then the probability that the variable is true given the values of the other variables (the entry in the corresponding 2nd column is the probability that the variable is false). Thus, the first row of the matrix corresponds to all conditioning variables taken the value false (r = 000 … 0), and the last row has all conditioning variables true (r = 111 … 1).</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Write your program in Java or C/C++. In the case of Java, name your program inference.java. Your program must be able to be compiled and run as follows:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> javac inference.java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> java inference graphfile.txt</span></span><br></pre></td></tr></table></figure></p><p>In the case of C/C++, you must supply a makefile Makefile with a rule called inference to compile your program into a Linux executable binary named inference.bin. Your program must be able to be compiled and run as follows:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make inference</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./inference.bin graphfile.txt</span></span><br></pre></td></tr></table></figure></p><p>NOTE1: If a makefile exists, the marking script will assume that the program is written in C/C++, otherwise Java will be assumed.<br>NOTE2: graphfile.txt is of course a placeholder for the name of the file containing the PGM structure.</p><h3 id="Submission-and-assessment"><a href="#Submission-and-assessment" class="headerlink" title="Submission and assessment"></a>Submission and assessment</h3><p>You must submit your program on the Computer Science Web Submission System. This means you must create the assignment under your own SVN repository to store the submission files.</p><p>Your code will be compiled and run, testing its outputs for the two networks with two queries each that have been provided to you, and an additional three networks with two queries each. None of the networks will contain more than 16 variables. Since the results are stochastic, the query answers will not be exact and will vary from run to run. The asnwers will therefore be tested against a tolerance of ±0.01 (i.e. your answers must be within 1% of the true values), so you must ensure convergence to this level of precision. If it passes all tests you will get 15% of the overall course mark. The objective of the tests is to check for the correct operation of your implementation. Hence, the basis of the assessment is to compare your results against the expected results. You must also ensure that you have an efficient implementation.</p><h3 id="Using-other-source-code"><a href="#Using-other-source-code" class="headerlink" title="Using other source code"></a>Using other source code</h3><p>You may not use other source code for this assignment. You should personally and carefully implement the likelihood weighted sampling to fully understand the concept.</p>]]></content>
    
    <summary type="html">
    
      这次要代写的是一个AI作业，完成一个lecture里面的probabilistic graphical model (PGM).
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSSE7023-Train-Management-System-GUI</title>
    <link href="https://tk1307993.coding.me/CSSE7023-Train-Management-System-GUI.html"/>
    <id>https://tk1307993.coding.me/CSSE7023-Train-Management-System-GUI.html</id>
    <published>2019-05-19T03:04:26.000Z</published>
    <updated>2019-05-19T03:07:27.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>The goal of this assignment is to gain practical experience with implementing GUIs using the Model-View-Controller design pattern.</p><h3 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description"></a>Problem description</h3><p>In this assignment you will develop a GUI for simulating the behaviour of a train management system using the Model-View-Controller design pattern. This extends the work you have done in Assignments 1 and 2.</p><p>The train management system in question is quite simplistic. It manages the allocation of trains to sub-routes 1 for a particular track in a way that is guaranteed to prevent train collisions. The idea is that a train is only allowed to move along the sub-route it has been allocated to, but it can move freely along that sub-route without fear of colliding with another train.</p><p>There may be zero or more trains on the track. Each train on the track has a unique identifier (an integer), a route that it is following, and a sub-route of that route that it has currently been allocated to. The route a train is following must be on the track, and the sub-route that the train is allocated to must be a sub-route of the route that the train is following. The sub-routes that trains have been allocated to may not intersect.</p><p>Exactly what the GUI looks like is up to you, but in order to meet testing requirements, it must be capable of performing the following tasks:</p><ul><li>When the train management program is executed (by running the main method in RailwayManager.java), the program should</li><li>load the track defined in the file track.txt using the read method from TrackReader.</li><li>initialise itself so that it has no trains to begin with, and so that its track is set to be the track that was read in from the file.</li></ul><p>An appropriate error message should be clearly displayed (in the graphical user interface) if there is an error reading from the input file or there is an error with the input format (i.e. if TrackReader.read throws an IOException or a FormatException).</p><p>The error message displayed to the user should clearly identify the reason for the error. That is, it should identify that the file track.txt could not be loaded, and why. The reason should include whether or not the load error was due to an input/output error reading from the file, or because of an error with the input format of the file, and it should include the detail message of the exception thrown to help the user track down the exact reason for the problem.</p><p>If the track could not be loaded then the program, after informing the user of the problem, is not obliged to perform the remainder of the tasks specified here. It should either exit gracefully or allow the user to close the program without being able to perform any other functions. If the track could be loaded, then the track of the program should be set to be the track that was read, and it should be evident to the user that there are currently no trains on the track.</p><p>Note that a sample file called track.txt has been included in the assignment zip file, but that your code should not be hard-coded to only handle the current content of that input file - the content of the file should be able to be updated to represent any track.<br>Assuming that the track for the train management program can be loaded, the user should be able to use the program to perform the following tasks.</p><p>At any point, the user should be able to request that a new train is added to the track. In particular the user should be able to input:</p><ul><li>the name of a file (e.g. route.txt) from which the route of that train can be read</li><li>a start and end-offset (startOffset and endOffset) on that route that specifies the sub-route of the train’s route that the train initially wants to be allocated to.</li><li>In response to such a request the program should:</li><li>load the route defined in the file specified using the read method from RouteReader.</li><li>check that the route read from the file is on the train management system’s track (i.e. use the onTrack method of the Route class),</li><li>check that the offsets define a valid sub-route of the route, route, that was read, i.e. 0 &lt;= startOffset &lt; endOffset &lt;= route.getLength().</li><li>check that the sub-route route.getSubroute(startOffset, endOffset) does not intersect with any of the sub-routes currently allocated to other trains. (Note: you can check whether or not a route intersects with another one using the intersects method of the Route class.)</li></ul><p>If either (i) the route could not be loaded, or (ii) the route could be loaded, but it is not on the train management system’s track, or (iii) the route could be loaded and is on the track, but the offsets do not define a valid sub-route of the route that was read, or (iv) the route could be loaded, it is on the track, and the sub-route is valid w.r.t. the train’s route, but the sub-route route.getSubroute(startOffset, endOffset) intersects with at least one of the sub-routes currently allocated to another train, then an appropriate error message should be clearly displayed (in the graphical user interface) to the user, and the train should not be loaded, and the existing trains and their allocations should not be modified in any way. The error message displayed to the user should clearly identify the reason for the error.</p><p>Otherwise the train, with its route, is added to the system and allocated to the sub-route that it requested. It should be given a unique integer identifier that corresponds to the order in which the train was loaded (i.e. the first train loaded has identifier 0, the second train loaded has identifier 1, the third train loaded has identifier 2, etc.)</p><p>If either (i) the offsets do not define a valid sub-route of the route that was read, or (ii) the sub-route route.getSubroute(startOffset, endOffset) intersects with any of the sub-routes currently allocated to other trains, then an appropriate error message be clearly displayed (in the graphical user interface) to the user, and the existing trains and allocations should not be modified in any way. The error message displayed to the user should clearly identify the reason for the error. Otherwise, the allocation of the train should be updated to the requested allocation.</p><p>Your program should be robust in the sense that incorrect user inputs should not cause the system to fail. Appropriate error messages should be displayed to the user if they enter incorrect inputs.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Using the MVC architecture, you must implement RailwayManager.java in the railway.gui package by completing the skeletons of the three classes: RailwayModel.java, RailwayView.java and RailwayController.java that are available in the zip files that accompanies this assignment. (Don’t change any classes other than RailwayModel.java, RailwayView.java and RailwayController.java since we will test your code with the original versions of those other files.)</p><p>You should design your interface so that it is legible and intuitive to use. The purpose of the task that the interface is designed to perform should be clear and appropriate. It must be able to be used to perform the tasks as described above.</p><p>As in Assignment 1 and 2, you must implement RailwayModel.java, RailwayView.java and RailwayController.java as if other programmers were, at the same time, implementing the classes that instantiate them and call their methods. Hence:</p><ul><li>Don’t change the class names, specifications, or alter the method names, parameter types, return types, exceptions thrown or the packages to which the files belong.</li><li>You are encouraged to use Java 8 SE classes, but no third party libraries should be used. (It is not necessary, and makes marking hard.)</li><li>Don’t write any code that is operating-system specific (e.g. by hard-coding in newline characters etc.), since we will batch test your code on a Unix machine.</li><li>Your source file should be written using ASCII characters only.</li><li>You may define your own private or public variables or methods in the classes RailwayModel.java, RailwayView.java and RailwayController.java (these should be documented, of course).</li></ul><p>Implement the classes as if other programmers are going to be using and maintaining them. Hence:</p><ul><li>Your code should follow accepted Java naming conventions, be consistently indented, readable, and use embedded whitespace consistently. Line length should not be over 80 characters. (Hint: if you are using Eclipse you might want to consider getting it to automatically format your code.)</li><li>Your code should use private methods and private instance variables and other means to hide implementation details and protect invariants where appropriate.</li><li>Methods, fields and local variables (except for-loop variables) should have appropriate comments. Comments should also be used to describe any particularly tricky sections of code. However, you should also strive to make your code understandable without reference to comments; e.g. by choosing sensible method and variable names, and by coding in a straightforward way.</li><li>Allowable values of instance variables must be specified using a class invariant when appropriate.</li><li>You should break the program up into logical components using MVC architecture.</li><li>The methods that you have to write must be decomposed into a clear and not overly complicated solution, using private methods to prevent any individual method from doing too much.</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hints: You should watch the piazza forum <span class="keyword">and</span> the announcements<span class="built_in"> page </span>on the Blackboard closely - these sites have lots of useful clarifications, updates <span class="keyword">to</span> materials, <span class="keyword">and</span> often hints, <span class="keyword">from</span> the course coordinator, the tutors, <span class="keyword">and</span> other students.</span><br></pre></td></tr></table></figure><p>The assignment requires the use of a number of components from the Swing library. You should consult the documentation for these classes in order to find out how they work, as well as asking questions on piazza and asking tutors and the course coordinator.</p>]]></content>
    
    <summary type="html">
    
      这次代写的程序，需要采用提供的gui package给前次的铁路管理系统写一个界面，并用上MVC框架。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSSE7023-Train-Management-System</title>
    <link href="https://tk1307993.coding.me/CSSE7023-Train-Management-System.html"/>
    <id>https://tk1307993.coding.me/CSSE7023-Train-Management-System.html</id>
    <published>2019-05-18T11:40:02.000Z</published>
    <updated>2019-05-18T11:43:35.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you will continue to implement the component classes of a program for simulating the behaviour of a train management system.</p><h3 id="Task-Overview"><a href="#Task-Overview" class="headerlink" title="Task Overview"></a>Task Overview</h3><p>In brief, you will write a method for reading in the sections of a track from a file, and you will write a method for allocating routes to trains (so that they don’t collide). If you are a CSSE7023 student you will also be required to write a JUnit4 test suite for testing the track-reading method.</p><p>More specifically, you must code method read from the TrackReader class and method allocate from the Allocator class that are available in the zip file that accompanies this handout, according to their specifications in those files.</p><p>If you are a CSSE7023 student, you will also need to complete a systematic and understandable JUnit4 test suite for the read method in the skeleton of the TrackReaderTest class from the railway.test package. You may write your unit tests assuming that the classes that TrackReader depends on (e.g. the Junction, Section, Track classes and any of the Java 8 SE API classes) are implemented and functioning correctly. That is, you don’t need to create test stubs for these classes.</p><p>As in Assignment 1, you must complete these methods and classes as if other programmers were, at the same time, implementing classes that use it. Hence:</p><ul><li>Don’t change the class names, specifications, or alter the method names, parameter types, return types, exceptions thrown or the packages to which the files belong.</li><li>You are encouraged to use Java 8 SE API classes, but no third party libraries should be used. (It is not necessary, and makes marking hard.)</li><li>Don’t write any code that is operating-system specific (e.g. by hard-coding in newline characters etc.), since we will batch test your code on a Unix machine.</li><li>Any new methods or fields that you add to TrackReader or Allocator must be private (i.e. don’t change the specification of these classes.)</li><li>Your source file should be written using ASCII characters only.</li></ul><p>Implement the classes as if other programmers are going to be using and maintaining them. Hence:</p><ul><li>Your code should follow accepted Java naming conventions, be consistently indented, readable, and use embedded whitespace consistently. Line length should not be over 80 characters. (Hint: if you are using Eclipse you might want to consider getting it to automatically format your code.)</li><li>Any additional methods that you write, and fields that you introduce should be private to hide implementation details and protect invariants.</li><li>Private methods that you write must be commented using preconditions and postconditions (require and ensures clauses). Informal description is OK.</li><li>Fields and local variables (except for-loop variables) should have appropriate comments. Comments should also be used to describe any particularly tricky sections of code. However, you should also strive to make your code understandable without reference to comments; e.g. by choosing sensible method and variable names, and by coding in a straightforward way.</li><li>Any exceptions that are created and thrown should have appropriate messages to help the user understand why the exception was thrown. This is particularly important for the read method in TrackReader, since if there is an error with the file format, then the user will want to know what is wrong with it when a FormatException is thrown. Each FormatException thrown should have a meaningful message that accurately describes the problem with the input file format, including the line of the file where the problem was detected. (You can create a new FormatException with a message using the constructor that takes a string parameter.)</li><li>The methods that you have to write must be decomposed into a clear and not overly complicated solution, using private methods to prevent any individual method from doing too much.</li></ul><p>I recommend that you attempt to write loop invariants for all non-trivial while-loops in your code, but this is not compulsory.</p><p>The Zip file for the assignment also includes some other code that you will need to compile your classes as well as some junit4 test classes to help you get started with testing your code.</p><p>Do not modify any of the files in package railway other than TrackReader and Allocator, since we will test your code using our original versions of these other files. Do not add any new files that your code for these classes depends upon, since you won’t submit them and we won’t be testing your code using them.</p><p>The JUnit4 test classes as provided in the package railway.test are not intended to be an exhaustive test for your code. Part of your task will be to expand on these tests to ensure that your code behaves as required by the javadoc comments. (Only if you are a CSSE7023 student will you be required to submit your test file TrackReaderTest.java.) We will test your code using our own extensive suite of JUnit test cases. (Once again, this is intended to mirror what happens in real life. You write your code according to the “spec”, and test it, and then hand it over to other people … who test and / or use it in ways that you may not have thought of.)<br>If you think there are things that are unclear about the problem, ask on the piazza forum, ask a tutor, or email the course coordinator to clarify the requirements. Real software projects have requirements that aren’t entirely clear!</p><p>If necessary, there may be some small changes to the files that are provided, up to 1 week before the deadline, in order to make the requirements clearer, or to tweak test cases. These updates will be clearly announced on the Announcements page of Blackboard, and during the lectures.</p><h3 id="More-about-the-allocate-method-from-the-Allocator-class"><a href="#More-about-the-allocate-method-from-the-Allocator-class" class="headerlink" title="More about the allocate method from the Allocator class"></a>More about the allocate method from the Allocator class</h3><p>In this section we explain some of the terminology used in the specification of the allocate method.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit your files TrackReader.java, Allocator.java (and TrackReaderTest.java and any of your track files that are used for testing in TrackReaderTest.java if you are a CSSE7023 student)<br>You can submit your assignment multiple times before the assignment deadline but only the last submission will be saved by the system and marked. Only submit the files listed above.<br>You are responsible for ensuring that you have submitted the files that you intended to submit in the way that we have requested them. You will be marked on the files that you submitted and not on those that you intended to submit. Only files that are submitted according to the instructions on Blackboard will be marked.</p><h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><p>If you are a CSSE2002 student, your assignment will be given a mark out of 15, and if you are a CSSE7023 student, your assignment will be given a mark out of 17, according to the following marking criteria. (Overall the assignment is worth 15% for students from both courses.)</p><h3 id="Code-quality"><a href="#Code-quality" class="headerlink" title="Code quality"></a>Code quality</h3><p>Note: you will lose marks for code quality for:</p><ul><li>breaking java naming conventions or not choosing sensible names for variables;</li><li>inconsistent indentation and / or embedded white-space or laying your code out in a way that makes it hard to read;<br>having lines which are excessively long (lines over 80 characters long are not supported by some printers, and are problematic on small screens);</li><li>exposing implementation details by introducing methods or fields that are not private<br>not commenting any private methods that you introduce using contracts (pre and postconditions specified using @require and @ensure clauses).</li><li>not having appropriate comments for fields and local variables (except for-loop variables), or tricky sections of code;</li><li>not setting an appropriate message for exceptions that are created and thrown<br>monolithic methods: if methods get long, you must find a way to break them into smaller, more understandable methods using procedural abstraction. (HINT: very important!)</li><li>incomplete, incorrect or overly complex code, or code that is hard to understand.</li><li>To make sure that your lines are not over 80 characters, you should indent using spaces and not tabs, since tabs may be interpreted as different numbers of characters depending on your code browser. You can set the Eclipse formatter to do this for you.<br>#Fundamentals</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个铁路管理系统，跑过一堆测试即可。纯粹是一个工程作业，但是由于是高年级的，extra都要写。程序工作量大，要求各种代码洁癖，一半的分都是Code quality，不过整体来说，作业难度不高。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C代写：ICS53-Web-Proxy</title>
    <link href="https://tk1307993.coding.me/ICS53-Web-Proxy.html"/>
    <id>https://tk1307993.coding.me/ICS53-Web-Proxy.html</id>
    <published>2019-05-14T13:29:51.000Z</published>
    <updated>2019-05-14T13:31:51.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>A Web proxy is a program that acts as a middleman between a Web browser and an end server. Instead of contacting the end server directly to get a Web page, the browser contacts the proxy, which forwards the request on to the end server. When the end server replies to the proxy, the proxy sends the reply on to the browser.</p><p>Proxies are used for many purposes. Sometimes proxies are used in firewalls, such that the proxy is the only way for a browser inside the firewall to contact an end server outside. The proxy may do translation on the page, for instance, to make it viewable on a Web-enabled cell phone. Proxies are also used as anonymizers.</p><p>By stripping a request of all identifying information, a proxy can make the browser anonymous to the end server. Proxies can even be used to cache Web objects, by storing a copy of, say, an image when a request for it is first made, and then serving that image in response to future requests rather than going to the end server.</p><p>In this lab, you will write a Web proxy that logs requests. You will write a simple sequential proxy that repeatedly waits for a request, forwards the request to the end server, and returns the result back to the browser, keeping a log of such requests in a disk file. This will help you understand basics about network programming and the HTTP protocol.</p><h3 id="Logistics"><a href="#Logistics" class="headerlink" title="Logistics"></a>Logistics</h3><p>As always, you must work in a group of two or more people. You will need to upload the source code and have a TA checkoff your code.</p><h3 id="Hand-Out-Instructions"><a href="#Hand-Out-Instructions" class="headerlink" title="Hand Out Instructions"></a>Hand Out Instructions</h3><p>If you want to, you may use the code provided by the book in the csapp.c, and csapp.h files. These can be downloaded from the course webpage.</p><h3 id="Implementing-a-Sequential-Web-Proxy"><a href="#Implementing-a-Sequential-Web-Proxy" class="headerlink" title="Implementing a Sequential Web Proxy"></a>Implementing a Sequential Web Proxy</h3><p>In this part you will implement a sequential logging proxy. Your proxy should open a socket and listen for a connection request. When it receives a connection request, it should accept the connection, read the HTTP request, and parse it to determine the name of the end server. It should then open a connection to the end server, send it the request, receive the reply, and forward the reply to the browser if the request is not blocked.<br>Since your proxy is a middleman between client and end server, it will have elements of both. It will act as a server to the web browser, and as a client to the end server. Thus you will get experience with both client and server programming.</p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p>Your proxy should keep track of all requests in a log file named proxy.log. Each log file entry should be a file of the form:<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Date</span>: browserIP <span class="keyword">URL</span> size</span><br></pre></td></tr></table></figure></p><p>where browserIP is the IP address of the browser, URL is the URL asked for, size is the size in bytes of the object that was returned. For instance:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Sun</span> 8 <span class="selector-tag">May</span> 2016 02<span class="selector-pseudo">:51</span><span class="selector-pseudo">:02</span> <span class="selector-tag">EST</span>: 128<span class="selector-class">.2</span><span class="selector-class">.111</span><span class="selector-class">.38</span></span><br></pre></td></tr></table></figure></p><p>Note that size is essentially the number of bytes received from the end server, from the time the connection is opened to the time it is closed. Only requests that are met by a response from an end server should be logged. We have provided the function format log entry in csapp.c to create a log entry in the required format.</p><h3 id="Port-Numbers"><a href="#Port-Numbers" class="headerlink" title="Port Numbers"></a>Port Numbers</h3><p>You proxy should listen for its connection requests on the port number passed in on the command line:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix&gt; .<span class="built_in">/proxy </span>15213</span><br></pre></td></tr></table></figure></p><p>You may use any port number p, where 1024 ≤ p ≤ 65536, and where p is not currently being used by any other system or user services (including other students’ proxies). See /etc/services for a list of the port numbers reserved by other system services.</p><p>Your sequential proxy should correctly accept connections, forward the requests to the end server, and pass the response back to the browser, making a log entry for each request. Your program should be able to proxy browser requests to the following Web sites and correctly log the requests.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>Initially, you should debug your proxy using telnet as the client.</p><p>Later, test your proxy with a real browser. Explore the browser settings until you find “proxies”, then enter the host and port where you’re running yours. With Netscape, choose Edit, then Preferences, then Advanced, then Proxies, then Manual Proxy</p><p>Configuration. In Internet Explorer, choose Tools, then Options, then Connections, then LAN Settings. Check ‘Use proxy server’ and click Advanced. Just set your HTTP proxy, because that’s all your code is going to be able to handle.</p>]]></content>
    
    <summary type="html">
    
      用C语言编写一个Http代理服务器，本质上还是一个Linux网络的Socket编程，实现网络数据的双工转发和日志记录即可。需要注意的地方是信号和异常的处理。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="Linux Network" scheme="https://tk1307993.coding.me/tags/Linux-Network/"/>
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS373-Hash-Tables</title>
    <link href="https://tk1307993.coding.me/CS373-Hash-Tables.html"/>
    <id>https://tk1307993.coding.me/CS373-Hash-Tables.html</id>
    <published>2019-05-12T12:20:28.000Z</published>
    <updated>2019-05-12T12:26:49.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Telling the difference between two different authors has many applications. This assignment will compare the relative frequency of words in works by William Shakespeare and Francis Bacon. Before the two works can be analyzed, they will need to be stored in memory. To do this, we will use two different hashing techniques, one that utilizes chaining and the other quadratic probing.</p><h3 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h3><p>You are to implement two separate hash tables, one per author, and use them to store the number of times a word appears in a text file. You will also write code that iterates through the hash tables and computes the relative frequency of words stored in each of the hash tables.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>The neccessary files are available in the archive, included in this archive are:</p><ul><li>Two text files: hamlet.txt and bacon-essays.txt. Code will be provided to read these works into arrays and add them to your hash tables. Note: they are very long. Do not print them.</li><li>FileInput.java: This class provides two functions which read text files into String arrays. readShakespeare() and readBacon() will return their corresponding text files as an array of strings, where each element of the array represents a word (in order) from the original text.</li><li>Test.java: This is where you will be expected to insert the data into your hash tables and then compare similarities between the two provided documents.There are four goals to accomplish in this file.</li></ul><ol><li>Initialize the two hash tables and insert the elements from the readShakespeare() String array into one hash table and the readBacon() String array into the other. Keep an associated count for the number of times a word is added in the hash table.</li><li>Iterate through the elements of one hash table and calculate how frequently that word occurs in both texts by using findCount() of a certain word divided by the lengths of the arrays from the readShakespeare() and readBacon() functions in FileInput. Use a squared-error approach.If a word appears in one text and not in the other, then add the square of the frequency of that word to the error. If the word appears in both texts, then find the difference between the two frequencies and add the square to the total error. For example, if Shakespeare uses a word 0.001 of the time and Bacon uses the same word 0.0001 of the time, subtract these two frequencies from each other (which would be 0.00099), square that result and add it to a “total comparative error” variable which keeps track of the sum of all such events.</li><li>Repeat this process for the second hash table, making sure not to duplicate any of the squared-errors you have already added to the “total comparative error” variable from above. This means you only have to consider words that are not in the first hash table when calculating for the second. As a note: the sum from both hash tables should go into the same variable.</li><li>Print the results. In addition to printing the final “Total comparative error”, print the word with the highest difference in frequency. For example, if Shakespeare uses the word “dog” much more frequently than Bacon, your final printed result should look like:<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Total</span> <span class="keyword">Square</span> Error: <span class="number">1.126343843E-4</span></span><br><span class="line"><span class="keyword">Most</span> different word: dog</span><br></pre></td></tr></table></figure></li></ol><p>The number provided here is just an example, but you should expect numbers to be much smaller than one.</p><ul><li>The final files will be your two hash tables: QPHash.java and ChainingHash.java. Both will be required to support the same functionality, their only difference will be how they deal with collisions in the hash. Keep in mind that the differences in hash strategies will cause differences in all of the functions listed below. These are the functions we expect your hash tables to support:</li><li>Two constructors: the first instantiates the hash table to a default size and the other instantiates the hash table to an input size.</li><li>insert(String keyToAdd): This function will add the input string into your hash table. If the string is already in the hash table, it should increase the count of that corresponding string. If not, instantialize the count to one.</li><li>findCount(String keyToFind): This function will return the count for a particular String key. To be clear, this count variable will be the same as returning the number of times a particular key has been added to the hash table.</li><li>getNextKey(): Every call of getNextKey() will return the next key in the hash table. This function should utilize an interior cursor to iterate through the hash table. This function will be essential when computing the squared error.<br>Computing the hash codes for a string can be done by using the [insert String variable name].hashCode() system call that is part of the Java library. However, for extra credit, write a separate hash code that returns a unique integer for any input String. Also make sure that the resulting hash distributes Strings evenly over a large range of numbers or your hash table performance will suffer.</li></ul><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><p>Submission for this assignment requires three files to be submitted: QPHash.java, ChainingHash.java and Test.java should be submitted to the dropbox to complete the homework.</p><ul><li>insert, findCount and getNextKey will be worth 5 points each for both hash tables, for a total of 30 points.</li><li>Correctly calculating the squared-error and most different word frequency will be worth 5 points each for a total of 10 points.</li><li>As usual, 5 points will be awarded for clean, well-commented code.</li><li>The extra credit of creating your own hash function will be worth up to 5 points subject to how well it performs in evenly distributing input Strings.</li></ul>]]></content>
    
    <summary type="html">
    
      这次需要代写的Java编程作业，是按要求实现两个不同的Hash Table, QPHash和ChainingHash，然后分别进行比较。由于没有测试集，数据量又很大，写的时候需要额外注意。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL代写：INFO2120-Database-Application-Programming</title>
    <link href="https://tk1307993.coding.me/INFO2120-Database-Application-Programming.html"/>
    <id>https://tk1307993.coding.me/INFO2120-Database-Application-Programming.html</id>
    <published>2019-05-10T09:10:56.000Z</published>
    <updated>2019-05-10T12:10:55.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This assignment is about the programming of database interaction code within an application, building on the car-sharing database scenario introduced in Assignments 1 and 2. The objectives are to gain practical experience interacting with a relational database using an Application Programming Interface (API) and transaction programming, and to understand the importance and application of basic security measures. There are also opportunities to use more advanced database</p><p>pplication programming techniques, such as stored procedures, triggers, indexes and access control privileges. We also included an optional extension regarding a suitable interface design.</p><p>This is a group assignment for teams of about 3 members, and it is assumed that you will continue in your Assignment 2 group. You should inform your tutor as soon as possible if you wish to change groups.</p><p>Please also keep an eye on the discussion forum and further announcements in Piazza.</p><h4 id="Design-Brief-Programming-a-Car-Sharing-Client-Application"><a href="#Design-Brief-Programming-a-Car-Sharing-Client-Application" class="headerlink" title="Design Brief: Programming a Car-Sharing Client Application"></a>Design Brief: Programming a Car-Sharing Client Application</h4><p>In this assignment your task is to implement the functions required to support the database interactions of an online car-sharing system, hosted on the School’s PostgreSQL server. You will be provided with a reference schema for PostgreSQL, as well as some example data. We will also provide a complete user interface written in Python, for which you need to write the appropriate database interaction functions using the Python DB-API introduced in Week 8. In writing these functions you should consider the following issues, which will be taken into account during marking:</p><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p>Your code should make best use of the database to correctly retrieve and update data. In particular, you should avoid writing client-side code for operations, such as joins, that could be better done within the database.</p><h4 id="Transaction-Handling"><a href="#Transaction-Handling" class="headerlink" title="Transaction Handling"></a>Transaction Handling</h4><p>You should assume that multiple clients will be running concurrently on the same database, so your functions should make suitable use of transactions. You should consider where to commit or roll back these transactions, and what to do if a transaction fails. D/HD students should also select appropriate isolation levels for their transactions.</p><h4 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h4><p>Multi-tier architectures increase the scope for nefarious users to gain unintended access to query or modify your database. You should take steps to limit this by preventing SQL Injection attacks, and limiting the privileges available to the client to specific operations on tables, views and stored procedures.</p><h4 id="Stored-Procedures"><a href="#Stored-Procedures" class="headerlink" title="Stored Procedures"></a>Stored Procedures</h4><p>Network traffic can be reduced (and cross-client portability increased) by wrapping complex database operations into stored procedures that are run within the database rather than in the client. You should make use of these where appropriate.</p><h3 id="Core-Functionality"><a href="#Core-Functionality" class="headerlink" title="Core Functionality"></a>Core Functionality</h3><h4 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h4><p>At the login screen, members can log in with their email address (or optionally their nickname) and password. Your interface should verify those values against the data stored in your database. When a valid user/password combination is entered, members shall be directed to the member home screen.</p><h4 id="Home-Screen"><a href="#Home-Screen" class="headerlink" title="Home Screen"></a>Home Screen</h4><p>On the home screen, the user should be greeted with their full name, and see the following details:</p><p>The member’s membership plan and since when he is a member.<br>If selected, the name of his home bay.<br>Number of bookings made by user (from the statistical information stored for each member).</p><h4 id="New-Booking"><a href="#New-Booking" class="headerlink" title="New Booking"></a>New Booking</h4><p>A user should be able to use this page to make a booking of a car for a specific period. In making<br>the booking the application must:</p><p>Check availability (basic availability plus no clashes with other bookings).<br>Create a new booking entry.<br>Keep the member’s ‘number of booking’ statistics up-to-date.<br>Estimate the cost of the booking according to the member’s plan.<br>If successful, details are shown in the Booking Details screen.</p><h3 id="Submission-Details"><a href="#Submission-Details" class="headerlink" title="Submission Details"></a>Submission Details</h3><p>Please submit your solution in the ‘Assignment’ section of the unit e-learning site by the deadline, including the following items:<br>Client Source Code: For most groups this will be a modified version of the database.py, but if more substantial changes have been made you should provide a zip file containing each of the files you have changed, along with a short Changelog.txt file clearly summarising your group’s contributions to each file;</p><p>Database Schema DDL: If you have done any extensions that modify the database you should include all such additions (ALTER TABLE statements, views, server-side stored procedures, functions, triggers, indexes or grant statements for PostgreSQL which your created as plain text file with .sql file suffix). You should ensure that this file runs on a clean version of the original schema on the PostgreSQL 9.5 database without errors.</p>]]></content>
    
    <summary type="html">
    
      这个PostgreSQL的Web应用程序算是Database System这门课里面比较坑的一个作业了。Start code提供的Web框架是基于Python编写的，Database要求用PostgreSQL。由于Python没有比较好用的PostgreSQL的lib，很多底层的DB操作都得自己实现。相比PHP+MySQL的传统架构复杂了不少。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
      <category term="PostgreSQL" scheme="https://tk1307993.coding.me/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS1926-Simple-Application</title>
    <link href="https://tk1307993.coding.me/CS1926-Simple-Application.html"/>
    <id>https://tk1307993.coding.me/CS1926-Simple-Application.html</id>
    <published>2019-05-07T00:44:34.000Z</published>
    <updated>2019-05-07T00:46:52.547Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>This assessment is consist of 5 tasks. You need to prepare the following for each question</p><ul><li>Programming object list</li><li>Algorithm</li><li>C++ Coding</li><li><h3 id="Scenario-1-Mathematics-operation"><a href="#Scenario-1-Mathematics-operation" class="headerlink" title="Scenario 1: Mathematics operation"></a>Scenario 1: Mathematics operation</h3>Write a C++ program that will display the calculator menu. The program will prompt the user to choose the operation choice (from 1 to 5). Then it asks the user to input two integer vales for the calculation.<br>Example<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MENU</span><br><span class="line"><span class="number">1.</span> Add</span><br><span class="line"><span class="number">2.</span> <span class="keyword">Subtract</span></span><br><span class="line"><span class="number">3.</span> Multiply</span><br><span class="line"><span class="number">4.</span> <span class="keyword">Divide</span></span><br><span class="line"><span class="number">5.</span> <span class="keyword">Modulus</span> <span class="keyword">Enter</span> your choice: <span class="number">1</span></span><br><span class="line"><span class="keyword">Enter</span> your two numbers: <span class="number">12</span> <span class="number">15</span> Result: <span class="number">27</span></span><br><span class="line"><span class="keyword">Continue</span>? y</span><br></pre></td></tr></table></figure></li></ul><h3 id="Scenario-2-Sorting-Number"><a href="#Scenario-2-Sorting-Number" class="headerlink" title="Scenario 2: Sorting Number"></a>Scenario 2: Sorting Number</h3><p>Write a C++ program (using function overloaded) to sort 10 integer values, or 10 long values, or 10 double values. Number lists provide below:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">valListInt = <span class="number">23</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">23</span>, <span class="number">43</span>, <span class="number">22</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">34</span></span><br><span class="line">valListLong = <span class="number">7000</span>, <span class="number">15</span>, <span class="number">34</span>, <span class="number">2373645</span>, <span class="number">43</span>, <span class="number">22</span>, <span class="number">9392929294</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">111143</span> valListDbl = <span class="number">23.3847239</span>, <span class="number">2.3974</span>, <span class="number">34.183734</span>, <span class="number">23.0</span>, <span class="number">43.36381</span>, <span class="number">22.3</span>, <span class="number">32.0</span>, <span class="number">32.1919</span>, <span class="number">43.938363</span>, <span class="number">34.38364</span></span><br></pre></td></tr></table></figure></p><h3 id="Scenario-3-Order-number"><a href="#Scenario-3-Order-number" class="headerlink" title="Scenario 3: Order number"></a>Scenario 3: Order number</h3><p>Create the C++ Function named multiples so that it has two parameters x, and n. The first parameter x will be overloaded with int, double and float. n will always be int. The return type is void. A Function created from multiples will compute.<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">1</span> + <span class="keyword">x</span> + <span class="number">2</span><span class="keyword">x</span> + <span class="number">3</span><span class="keyword">x</span> + … + nx e.g n = <span class="number">4</span></span><br><span class="line">sum = <span class="number">1</span> + <span class="keyword">x</span> + <span class="number">2</span><span class="keyword">x</span> + <span class="number">3</span><span class="keyword">x</span> + <span class="number">4</span><span class="keyword">x</span></span><br><span class="line"><span class="keyword">and</span> display the result on screen.</span><br></pre></td></tr></table></figure></p><h3 id="Scenario-4-Temperature-record"><a href="#Scenario-4-Temperature-record" class="headerlink" title="Scenario 4: Temperature record"></a>Scenario 4: Temperature record</h3><p>Write a program that takes a maximum and minimum temperature of the city from Monday to Sunday, and three functions that calculate on average temperature, maximum temperature and minimum temperature of that week.<br>Example<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">enter</span> <span class="selector-tag">this</span> <span class="selector-tag">week</span> <span class="selector-tag">temperature</span>,</span><br><span class="line">       <span class="selector-tag">Monday</span>: 19<span class="selector-class">.0</span> 14<span class="selector-class">.0</span></span><br><span class="line">       <span class="selector-tag">Tuesday</span>: 24<span class="selector-class">.5</span> 12<span class="selector-class">.5</span></span><br><span class="line">       <span class="selector-tag">Wednesday</span>: 22<span class="selector-class">.0</span> 9<span class="selector-class">.5</span></span><br><span class="line">       <span class="selector-tag">Thursday</span>: 17<span class="selector-class">.0</span> 9<span class="selector-class">.0</span></span><br><span class="line">       <span class="selector-tag">Friday</span>: 17<span class="selector-class">.0</span> 10<span class="selector-class">.0</span></span><br><span class="line">       <span class="selector-tag">Saturday</span>: 23<span class="selector-class">.0</span> 12<span class="selector-class">.0</span></span><br><span class="line">       <span class="selector-tag">Sunday</span>: 22<span class="selector-class">.0</span> 15<span class="selector-class">.5</span></span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">week</span>,</span><br><span class="line">       <span class="selector-tag">minimum</span> <span class="selector-tag">temperature</span> <span class="selector-tag">is</span>: 9<span class="selector-class">.0</span></span><br><span class="line">       <span class="selector-tag">maximum</span> <span class="selector-tag">temperature</span> <span class="selector-tag">is</span>: 24<span class="selector-class">.5</span></span><br><span class="line">       <span class="selector-tag">average</span> <span class="selector-tag">temperature</span> <span class="selector-tag">is</span>: 16<span class="selector-class">.21</span></span><br></pre></td></tr></table></figure></p><h3 id="Scenario-5-String-and-Character-Function"><a href="#Scenario-5-String-and-Character-Function" class="headerlink" title="Scenario 5: String and Character Function"></a>Scenario 5: String and Character Function</h3><p>Write a program that reads in a string provided the user. Return the following statistics about the string:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Length</span><br><span class="line"><span class="built_in">Number</span> <span class="keyword">of</span> vowels</span><br><span class="line"><span class="built_in">Number</span> <span class="keyword">of</span> lower <span class="keyword">case</span> characters</span><br><span class="line"><span class="built_in">Number</span> <span class="keyword">of</span> upper <span class="keyword">case</span> characters</span><br><span class="line"><span class="built_in">Number</span> <span class="keyword">of</span> numerals</span><br><span class="line"><span class="built_in">Number</span> <span class="keyword">of</span> other symbols</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      这个需要代写的C++程序，属于偏基础的内容。根据五个不同的场景，编写对应的代码。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：FIT2071-TextQuest2</title>
    <link href="https://tk1307993.coding.me/FIT2071-TextQuest2.html"/>
    <id>https://tk1307993.coding.me/FIT2071-TextQuest2.html</id>
    <published>2019-05-04T12:49:37.000Z</published>
    <updated>2019-05-04T12:52:29.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task-Details"><a href="#Task-Details" class="headerlink" title="Task Details"></a>Task Details</h3><p>The Weeks 4 to 7 laboratory exercises contain a designated “Main Portfolio Exercise”. These are a series of exercises that add to each other to form a main portfolio program: ClassyTextQuest. Note that these build upon the Weeks 2-3 portfolio exercises for Assignment 1. If you did not satisfactorily complete Assignment 1, you may optionally use the sample code for assignment 1 available on Moodle. You are to submit a final, completed version of the game, along with a document detailing your program design (diagrammatically explaining the class structure and textually explaining the operation) and detailing any changes to the specification, including all extra functionality and advanced concepts.</p><p>Successful completion of the exercises as described in the laboratory exercises may obtain you up to a maximum of 80% of the total assignment marks. In order to obtain a higher mark you should seek to include some advanced functionality (as described in the Bonus sections of the portfolio description). The additional functionality should demonstrate advanced or more complex application of principles covered to date. It need not be large amounts of work but should demonstrate a willingness to explore new and advanced concepts. You must detail what you have done in the accompanying document.</p><p>Explicit assessment criteria are provided over the page, however please note you will be assessed on the following broad criteria:</p><ul><li>Meeting functional requirements as described in the exercise description</li><li>Demonstrating a solid understanding of the C++ concepts taught up to and including week 7, including good practice</li><li>Following the unit Programming Style Guide</li><li>Creating solutions that are as efficient and extensible as possible</li></ul><p>NOTE! Your submitted program MUST compile and run. Any submission that do not compile will be awarded zero marks. This means you<br>should continually compile and test your code as you do it, ensuring it compiles at every step of the way.</p><p>If you have any questions or concerns, please contact Tim as soon as possible.</p><h3 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h3><h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><p>This week we are going to reconsider the design for Assignment 1.</p><p>Start thinking about how you can use object oriented design to achieve a more structured program.</p><p>What could be the different classes in the TextQuest game? What data members and member functions (methods) do these classes need to provide?</p><p>Create a diagram (any drawing software or just pen and paper is fine). You will eventually need to submit your design together with your working code as part of your documentation.</p><p>Remember we have a character, vocations, events and maybe more depending on what extra functionality you have considered: e.g. enemies, items, etc.</p><h4 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h4><p>Now we are going to consider how some of the new C++ features we have learned can help us better structure our code and add extra features.</p><p>Functions:</p><p>How can you reorganise your code from assignment 1 into clearly defined functions that keep the different “concerns” of the program well separated? For now, create some functions in the global scope of your main C++ file from assignment 1. In coming weeks we will learn how to separate these across different files and achieve better “encapsulation”.</p><p>Arrays:<br>You may have found the gameplay from Assignment 1 became tedious after a while since the events always occurred in precisely the same order. Let’s start to make it more interesting. Change your program to load the events into two arrays (an array of descriptions and another for the health modifiers).</p><p>Last week we had a lab exercise to generate random numbers from 0 to 100. Now you can do the same thing, to generate a random number between 0 and the number of events, in order to randomly select which event comes next.</p><h4 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h4><p>This week we will continue our rewrite of TextQuest with classes. Now that you can write your own custom classes, it is time for you to write three of the classes you will need for your game. These should be based upon your Class Diagrams from last week.</p><h4 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h4><p>This week we are going to create two new classes: Player and Enemy that both inherit from Character.</p><p>Character will have a virtual function called attack. The attack function’s parameter is a list (such as a vector) of potential target characters.</p><p>The Player class’ implementation of the attack function should prompt the user to choose one of the targets. It will then apply damage (a health deduction) to the target based on the relative magic and strength of that target (up to you precisely what formula to use – choose something that seems fair and fun).</p><p>The Enemy’s attack function will also choose a target but do so automatically (i.e. without prompting the user. There are different strategies enemies might use: e.g. always choose the player, do it randomly or based on any logic you like: it could even damage multiple targets!).</p><p>Now, in the main game loop, in addition to the events that are currently being applied, you should add a random chance of a fight occurring (make fight a separate function).</p><p>When a fight occurs, you should populate a vector of Character containing the Player and also one or more randomly generated Enemy. Now a sub-loop should start iterating over the vector giving each Character a chance to attack. That is, you will call the Character’s implementation of the attack member function, passing in the contents of the Character vector. After the attack is complete, remove any dead characters (whose health is &lt;= 0) from the vector. If the Player is dead, the fight and the game ends. If the Player is the only one left, then they win the fight and you can return to the main game loop.</p><p>Bonus: how you generate the enemies is up to you. A simple way would be just to have random stats and a random name (from a list of possibilities). Alternately, you could design sub-classes of Enemy, each with their own interesting variation on the attack function - and randomly choose which ones to construct in each fight.</p><h4 id="Week-7"><a href="#Week-7" class="headerlink" title="Week 7"></a>Week 7</h4><p>This week we will finalise our Classy TextQuest RPG. To this point you have the basic skeleton of the game as well as classes for the major components (e.g. Character, Player, Enemy, Event, Vocation, etc). Now that you know all about pointers and class inheritance you can finish off the classes and the final game play. Also, we talked this week about overloading the operator. Have a think about where you might use this in your code. You also know how to plug memory leaks now, so make sure any objects you create with new are also deleted at the appropriate time.</p>]]></content>
    
    <summary type="html">
    
      Text Quest游戏的第二次作业，按照要求完成对应的类即可。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C代写：COMP20005-Path-Planning</title>
    <link href="https://tk1307993.coding.me/COMP20005-Path-Planning.html"/>
    <id>https://tk1307993.coding.me/COMP20005-Path-Planning.html</id>
    <published>2019-05-02T09:10:56.000Z</published>
    <updated>2019-05-02T09:13:47.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>In this project you will demonstrate your understanding of structures and arrays of structures, and will develop a computational solution for a non-trivial problem. You are also expected to make extensive use of functions; and to demonstrate that you have adopted a clear and elegant programming style. You will find it difficult to create a working solution unless you plan your program carefully in advance, and develop it incrementally.</p><h3 id="Path-Planning"><a href="#Path-Planning" class="headerlink" title="Path Planning"></a>Path Planning</h3><p>Path planning is required in many situations, including satnav software and autonomous robot control. For example, the item-pickers employed in Amazon’s warehouses follow instructions that specify their routing through the warehouse as they assemble each order, with the route determined in advance so as to minimize their walking time (or riding time, the warehouses are big). Your task in this project is to develop a program that computes a shortest routing through a set of obstacles structured as a maze.</p><h3 id="Stage-1-–-Reading-and-Printing"><a href="#Stage-1-–-Reading-and-Printing" class="headerlink" title="Stage 1 – Reading and Printing"></a>Stage 1 – Reading and Printing</h3><p>The input to your program will consist of a character-based description of a maze, to be read from stdin using input redirection, in the same way as was used in Assignment 1. (Please do not make use of fopen() and fread() from Chapter 11.) Mazes are composed of a rectangular array of two characters, ‘#’ to indicate no-go cells that may not be used by the robot (the maze walls), and ‘.’ to indicate passable cells that the robot may move into. For example, the description in test0.txt (available on the LMS) is<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#.#######</span><br><span class="line">#.......#</span><br><span class="line">####.####</span><br><span class="line">#....#..#</span><br><span class="line">#.####.##</span><br></pre></td></tr></table></figure></p><p>and describes a maze that has one gap in the top row (for entry to the maze), two gaps in the bottom row (for exiting the maze), and is configured as a grid of five rows and nine columns, with each row of the input corresponding to a one row maze cells. The robot is assumed to always enter the maze at one of the available gaps in the top row, and must always exit via one of the available gaps in the bottom row. If there is no path from any entry gap to any of the exit gaps then the maze has no solution.</p><p>You should assume throughout that input files will be “correct”, and will contain nothing but ‘#’, ‘.’, and ‘\n’ characters laid out correctly in a rectangular grid that will never be bigger than 100 × 100 cells; will always have at least one entry gap in the top row, and will always have at least one exit gap in the final row. You may not assume that there will be a legal path from any particular entry gap to any particular exit gap, and must correctly handle cases in which the maze has no valid solution.</p><p>In this first stage you should develop a program that has these elements:</p><ul><li>a type definition for a suitable struct for recording a maze as a two dimensional array, plus some auxiliary variables, and in which each cell in the maze is represented as a lower-level struct that contains the state variables associated with each cell;</li><li>a function that reads the input maze, via a suitable pointer-to-struct argument; and</li><li>a function for printing a maze out via a suitable pointer-to-struct argument, with each cell’s character doubled to make the maze easier to view on the screen.</li></ul><p>The required output for this stage for test0.txt is:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stage <span class="number">1</span></span><br><span class="line">=======</span><br><span class="line">maze has <span class="number">5</span> rows and <span class="number">9</span> columns</span><br><span class="line">##..##############</span><br><span class="line">##..............##</span><br><span class="line">########..########</span><br><span class="line">##........##....##</span><br><span class="line">##..########..####</span><br></pre></td></tr></table></figure></p><p>In this stage your elemental struct for each cell might only contain one variable, the type of that cell.</p><h3 id="Stage-2-–-Determining-Reachable-Regions"><a href="#Stage-2-–-Determining-Reachable-Regions" class="headerlink" title="Stage 2 – Determining Reachable Regions"></a>Stage 2 – Determining Reachable Regions</h3><p>Each legal move of the robot takes it either one step vertically or one step horizontally, from one viable cell to an immediately adjacent viable cell. A viable cell is reachable if the robot can reach it starting at any of the gaps in the top row of the maze, and then following (any number of) legal moves.</p><p>Develop an algorithm for determining (and storing with your structure) a flag that records the reachability of every viable cell in the maze, including any exit gaps in the last row. The output of this stage is again a map of the maze, but with reachable cells shown as doubled ‘+’ characters, and non-reachable cells as doubled ‘-‘ characters. If any of the exit gaps is reachable, then the maze as a whole can be reported as having a solution. The required output from this stage for test0.txt is<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stage <span class="number">2</span></span><br><span class="line">=======</span><br><span class="line">maze has a solution</span><br><span class="line">##++##############</span><br><span class="line">##++++++++++++++##</span><br><span class="line">########++########</span><br><span class="line">##++++++++##----##</span><br><span class="line">##++########--####</span><br></pre></td></tr></table></figure></p><p>Note the region in this maze that is non-reachable, including one of the exit gaps. (The alternative message to be used, if all of the exit gaps are non-reachable, is “maze does not have a solution”.) Further examples showing the full output that is required are provided on the LMS, and you should study them carefully so that you understand the details of what is required in this stage.</p><p>Note that the output from this stage is in addition to the output of Stage 1.</p><h3 id="Stage-3-–-Calculating-Costs"><a href="#Stage-3-–-Calculating-Costs" class="headerlink" title="Stage 3 – Calculating Costs"></a>Stage 3 – Calculating Costs</h3><p>Now add a further variable to the struct that represents each cell of the maze, and for each reachable cell, compute into that variable the minimum cost of any path from any entry gap in the top row through until that cell, counting one unit of cost for each cell that is traveled through, and with a cost of zero assigned at each top-row gap. The cost of every second reachable cell should be printed using two digits; other cells should be printed as before. If the cost of a reachable cell is greater than 99, then only the last two digits of the number should be printed. The required output from this stage for test0.txt is<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stage <span class="number">3</span></span><br><span class="line">=======</span><br><span class="line">maze has a solution <span class="keyword">with</span> cost <span class="number">10</span></span><br><span class="line">##<span class="number">00</span>##############</span><br><span class="line">##++<span class="number">02</span>++<span class="number">04</span>++<span class="number">06</span>++##</span><br><span class="line">########++########</span><br><span class="line">##++<span class="number">08</span>++<span class="number">06</span>##----##</span><br><span class="line">##<span class="number">10</span>########--####</span><br></pre></td></tr></table></figure></p><p>Further examples showing the full output that is required are provided on the LMS, and you should study them carefully so that you understand the details of what is required in this stage. Note that the output from this stage is in addition to the output of Stages 1 and 2.</p><h3 id="Stage-4-–-Plotting-a-Path"><a href="#Stage-4-–-Plotting-a-Path" class="headerlink" title="Stage 4 – Plotting a Path"></a>Stage 4 – Plotting a Path</h3><p>Now add further state information to the struct for each cell so that the exact path implied by one solution is drawn, and none of the other cell costs are shown. In this stage, reachable cells not on the final path should be shown as doubled blanks. The required output from this stage for test0.txt is<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stage <span class="number">4</span></span><br><span class="line">=======</span><br><span class="line">maze solution</span><br><span class="line">##<span class="number">00</span>##############</span><br><span class="line">##..<span class="number">02.</span><span class="number">.04</span>      ##</span><br><span class="line">########..########</span><br><span class="line">##..<span class="number">08.</span><span class="number">.06</span>##----##</span><br><span class="line">##<span class="number">10</span>########--####</span><br></pre></td></tr></table></figure></p><p>In cases where there are two or more exit gaps that have the same minimum distance from a start gap, a path to the leftmost of them should be plotted. Note that the output from this stage is in addition to the output of Stages 1, 2 and 3, assuming that a solution exists. In cases where there is no solution nothing should be printed except for the Stage 1, 2 and 3 output. Further examples showing the full output that is required are provided on the LMS, and you should study them carefully so that you understand the details of what is required in this stage.</p><h3 id="A-Note-on-Algorithms"><a href="#A-Note-on-Algorithms" class="headerlink" title="A Note on Algorithms"></a>A Note on Algorithms</h3><p>You are free to adopt any approach that you wish to labeling cells and computing path costs, but you do need to be systematic, and develop a mechanism that computes the correct answers. Be sure to provide comments in your programs to help the markers understand the particular mechanism you have used.</p><p>One possible approach is to cycle through the maze, examining every cell in order. Then, if that cell has been labeled with a path cost, use that cell to try and also label its neighbors with a path cost that is one greater. Path costs of labeled cells should only ever decrease, once a cell is first labeled. If a complete run through of every cell results in no changes to the path cost of reaching any cell in the maze, then a final set of path costs must have emerged. On the other hand, if any cell got its cost reduced in the last run through, start another pass through and allow that change to propagate further if it needs to. Begin by assigning a path cost of zero to the gaps in the top row of the maze.</p><p>This isn’t a very efficient algorithm, but it will be fast enough for the scale of maze being considered here. There are – of course! – more efficient algorithms than this that can be applied when there are millions or even billions of cells involved (for example, when the maze is three-dimensional). Come back and enrol in comp20003 in second semester if you want to know more.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业由一堆小程序组成，主要的目的是为了熟悉基本的数据结构用法。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CUDA代写：CME213-Neural-Networks-on-CUDA-Part2</title>
    <link href="https://tk1307993.coding.me/CME213-Neural-Networks-on-CUDA-Part2.html"/>
    <id>https://tk1307993.coding.me/CME213-Neural-Networks-on-CUDA-Part2.html</id>
    <published>2019-04-29T12:21:24.000Z</published>
    <updated>2019-04-29T12:24:39.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this second part of the final project, we provide further details about the grading policy and introduce you to the starter code. You can also find instructions for running and profiling the code on the cluster and submitting your work.</p><h3 id="Grading-details"><a href="#Grading-details" class="headerlink" title="Grading details"></a>Grading details</h3><p>Please refer to Part I for an overall grading information. Here we explain in detail how we determine the correctness of the code and test the performance. We have setup four testcases (with corresponding grading modes in the code) for testing correctness and performance. These testcases or grading modes can be run by passing command line arguments to the program. More details about them are given in later sections.</p><h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><p>You can find the grading outline below. More details about them are in the subsections that follow.</p><ul><li>Preliminary Report</li><li>Final Report</li></ul><h3 id="GEMM-correctness"><a href="#GEMM-correctness" class="headerlink" title="GEMM correctness"></a>GEMM correctness</h3><p>Since the GEMM function is a building block of any neural network implementation and will be an important tool in your arsenal, we test the GEMM implementation separately from the overall code testing. We have provided a function prototype called myGEMM for you in gpu_func.cu, which takes inputs as two scalars a, b, three matrices A, B, C, and returns the result of D = a <em> A </em> B + b * C in C (in place).</p><p>Your job is to fill in this function, and we will test your implementation on two sets of inputs that are relevant to this project. You are welcome to, but you don’t have to use this myGEMM function in your parallel training; this is only for the purpose of grading.</p><p>We test this correctness by running grading mode 4, which runs the myGEMM function alone. This myGEMM function is called only by rank 0 in the grading mode, i.e., for this part you just need to write kernels to do GEMM on a single GPU.</p><h3 id="Overall-correctness"><a href="#Overall-correctness" class="headerlink" title="Overall correctness"></a>Overall correctness</h3><p>In large neural network problems, a common issue encountered is the aggregation of rounding errors or inconsistencies.</p><p>Unfortunately, the implementations of several operations are not exactly same on CPU and GPU. Some of the sources for differences include exp() operations used in Softmax and Sigmoid functions, FMA (fused multiply add), the order of operations etc. There are some differences at the hardware level of implementation too. These discrepancies are usually of the order of 1e-16 for double precision calculations. However, such discrepancies can build up over time. In general, as the learning rate gets larger, the instability of the algorithm due to roundoff errors is high. These discrepancies might not lead to any parameter blow-up, but might create significant differences between the CPU and GPU solutions. This makes determining correctness challenging.</p><p>In order to tackle this, we have setup three testcases for determining correctness in the form of grading modes. In all those modes, a max. norm of the difference between final CPU and GPU results (parameters W(1) , W(2) , b(1) , b(2) ) is considered. If this max. norm is greater than a set threshold (1e-7) for any case, your code will fail correctness for that case. The actual max. norm values we get are much lower than this, but we want to provide some leeway in this regard and have relaxed the threshold. Apart from passing the three correctness tests, the precision on the validation set of the CPU and GPU implementations must be very close.</p><p>The hyper-parameters for the three testcases are as follows,</p><ol><li>Low learning rate: 0.001, large # iterations: 40 epochs;</li><li>Medium learning rate: 0.01, medium # iterations: 10 epochs;</li><li>High learning rate: 0.025, small # iterations: 1 epoch.</li></ol><p>The grading modes 1,2 and 3 run the above three testcases respectively.</p><p>Note: In order to get full credit on overall code correctness, these above thresholds must be met by a fully parallel code running on 4 GPUs through four different processes (or CPU threads) using MPI and CUDA. If the code is running on a single GPU or is not using GPUs (just MPI), you will lose a significant portion of the grade. Similarly, if you are running four processes but only one of them is using GPUs, you will again lose points. Here, when we say running on GPUs, we expect that all the GEMM, Softmax and Sigmoid calculations be done on GPUs.</p><h3 id="GEMM-Performance"><a href="#GEMM-Performance" class="headerlink" title="GEMM Performance"></a>GEMM Performance</h3><p>This refers to the performance of your myGEMM function. To test this we run the code in grading mode 4. The grade for this will be based on the performance of your GEMM function (in terms of the time taken) relative to other students in the class. The exact method for calculating this relative grade will be determined by us later depending on the range of performances we get.</p><p>In the code, we run this myGEMM function repeatedly for a number of iterations. This has been currently set to 10, but we might change this based on the performance we see in the submissions. We believe that this should not affect your implementation.<br>Caveat: If your GEMM implementation does not pass the GEMM correctness test, you will not receive any points for performance.</p><h3 id="Overall-Performance"><a href="#Overall-Performance" class="headerlink" title="Overall Performance"></a>Overall Performance</h3><p>This refers to the performance of your full NN code. Here we use the default settings of the program for benchmarking the performance (time taken). Here again, the grade is based on your performance relative to other students in the class. The exact method for calculating this relative grade will be determined by us later depending on the range of performances we get.</p><p>Caveat: If you do not pass the overall correctness tests, you will be penalized and we will determine the penalty on a case by case basis.</p><h3 id="Running-instructions"><a href="#Running-instructions" class="headerlink" title="Running instructions"></a>Running instructions</h3><p>We have provided a sample .bashrc file in sample_bashrc. You can replace your current ̃/.bashrc (or bash profile) file on the cluster with this. You can also copy the relevant portions to your current bashrc file. The modules that have been loaded are as follows:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module <span class="keyword">add</span><span class="bash"> shared</span></span><br><span class="line"><span class="bash">module add slurm</span></span><br><span class="line"><span class="bash">module add gcc/4.8.5</span></span><br><span class="line"><span class="bash">module add cuda75</span></span><br><span class="line"><span class="bash">module add mvapich2/gcc/64/2.1</span></span><br><span class="line"><span class="bash">module add intel-cluster-runtime/intel64/3.7</span></span><br></pre></td></tr></table></figure></p><p>(Please load gcc/4.8.5 instead of gcc, because the nvcc does not support gcc version 4.9 and up.)<br>Make sure all the above modules are loaded. If you changed your .bashrc file, you may have to source it for the changes to take effect. Alternatively you can exit your ssh session and log back in. You can see the modules that have been loaded by using<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure></p><p>With the correct modules loaded, run<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./init.sh</span></span><br></pre></td></tr></table></figure></p><p>This downloads the MNIST dataset and installs the Armadillo library. You only need to do this the first time after you download the code.<br>Edit the job script run.sh to add command line arguments or change number of processes you want to run with. By default, we request for 4 processes on a single node in the cluster and request for 4 GPUs. The single node is to reduce MPI overhead. Communication across nodes is slower than within a single node. Note that the program prints out the number of MPI processes and CUDA devices used in the very beginning to help you make sure you are running it correctly.<br>Submit the job script run.sh using sbatch as follows<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbatch <span class="keyword">run</span>.<span class="bash">sh</span></span><br></pre></td></tr></table></figure></p><p>You can check whether your job is still running via the command squeue.</p>]]></content>
    
    <summary type="html">
    
      用GPU编写Neural Network算法的第二部分作业，这部分要求做性能的优化。
    
    </summary>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/categories/CUDA/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/tags/CUDA/"/>
    
      <category term="Machine Learning" scheme="https://tk1307993.coding.me/tags/Machine-Learning/"/>
    
      <category term="MPI" scheme="https://tk1307993.coding.me/tags/MPI/"/>
    
  </entry>
  
  <entry>
    <title>CUDA代写：CME213-Neural-Networks-on-CUDA-Part1</title>
    <link href="https://tk1307993.coding.me/CME213-Neural-Networks-on-CUDA-Part1.html"/>
    <id>https://tk1307993.coding.me/CME213-Neural-Networks-on-CUDA-Part1.html</id>
    <published>2019-04-27T03:29:05.000Z</published>
    <updated>2019-04-27T03:32:16.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this project, you will implement a neural network using CUDA to identify digits from handwritten images (a specific case of image classification problem). Neural networks are widely used in machine learning problems, specifically in the domains of image processing, computer vision and natural language processing. Recently, there has been a lot of excitement regarding deep learning, which basically uses more advanced variants of the simpler neural network (NN) we cover here. Therefore, being able to train large neural networks efficiently is important and is the goal of this project.</p><p>The main purpose of this Part I is to introduce you to the project and give you a picture of what needs to be done. Details of the starter code, submission instructions and full details of the grading steps will be handed out in Part II.</p><h3 id="Data-and-Notation"><a href="#Data-and-Notation" class="headerlink" title="Data and Notation"></a>Data and Notation</h3><p>We will be using the MNIST dataset, which consists of greyscale 28 × 28 pixel images of handwritten digits from 0 to 9.</p><p>The dataset is divided into two parts — 60,000 training data and 10,000 test data. We will use the training data to learn the parameters of our neural network (described later), and the test data to measure the performance of the learned network.</p><p>In the training process, one issue will be overfitting on the training data. To avoid this, a standard practice is to perform a cross-validation — a technique to measure how the model will generalize on an independent dataset. Cross-validation is carried out by further dividing the training data into two sets - a training set and a validation set. The validation set is a small portion (usually 10%) of the training dataset. We then perform the training on the training set (excluding the validation set) and evaluate our model on the validation set. There are different types of cross-validation, and we will only do a single holdout for validation because of computational issues. We use insights from this validation to improve our model.</p><p>The goal of the test set is to perform a final evaluation of our model on the unseen data. It is not meant to be used to in the training process.</p><h3 id="Neural-Networks"><a href="#Neural-Networks" class="headerlink" title="Neural Networks"></a>Neural Networks</h3><h4 id="Neurons"><a href="#Neurons" class="headerlink" title="Neurons"></a>Neurons</h4><p>To describe neural networks, we will begin by describing the simplest possible neural network, one which comprises a single “neuron.”</p><p>This is a good time for us to discuss the calculation of the derivative of the sigmoid function with respect to its input, since we are going to use it significantly in the following sections.</p><p>The neuron performs a linear transform on the input and then applies a non-linear transformation (sigmoid, in this case).<br>When a single neuron is used, we are limited to a binary classification. Take the example of a cancer tumor. We may build a neural network that takes as input the size of the tumor, its location, and the length of time it has been there. Based on these three pieces of information, the network needs to determine whether the tumor is benign or malignant. This is a true/false type of determination. In our previous model using the sigmoid function, we can interpret the output of the network.</p><p>Our task is therefore to learn the parameters of the network W and b so that it achieves the best accuracy or precision on the test set.</p><p>In the project we need to extend this concept to multiple classes. Instead of a simple true/false output, we need to decide which digits from 0 to 9 is shown on the input image. This requires a full neural network.</p><h4 id="Fully-connected-neural-network"><a href="#Fully-connected-neural-network" class="headerlink" title="Fully-connected neural network"></a>Fully-connected neural network</h4><p>Figure 4 shows a fully-connected neural network with 1 input layer, 1 hidden layer, and 1 output layer. We call such a network to be a two-layered neural network (ignoring the input layer as it is trivially present)</p><p>In our problem, we are trying to determine the digit associated with each image. We will call this digit the “label” associated with the image (using the neural network terminology). The total number of labels is denoted C. In our case C = 10, since we are trying to determine digits 0 to 9.</p><p>The last layer is special. This is the output of our network. In the project, we have C = 10 output nodes. Each node represent a possible digit. We will see later on how the output vector y can be interpreted to determine the digit that is guessed by the network for a given image.</p><h4 id="Feed-forward"><a href="#Feed-forward" class="headerlink" title="Feed-forward"></a>Feed-forward</h4><p>The nice thing about neural networks is that they are highly modular. Layer L[i] does not need to know whether its input is the input layer itself or the output of L[i−1]. L[i] computes its activations</p><h4 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h4><p>Recall that our objective is to learn the parameters of the neural network such that it gets the best accuracy on a set of data points, which we call the dev set. Let y be the one-hot vector denoting the class of the input, i.e., y[c] = 1 if c is the correct label, 0, otherwise. We want P (label = c|x) to be the highest.</p><p>Without going into the mathematical details, we will use the following general expression to determine the error of our neural network.</p><p>The above cost measures the error or our “dissatisfaction” with the output of the network. The more certain the network is about the correct label (high P (y = c|x)), the lower our cost will be.</p><p>Clearly, we should choose the parameters that minimize this cost. This is an optimization problem, and is usually solved using the method of Gradient Descent (described below).</p><p>Our neural network applies a non-linear function to the input because of the sigmoid and softmax functions. However, if we make W very small, the network becomes nearly linear because T is itself very small. To optimize the neural network, we often add a penalization term for the magnitude of W in order to control the non-linearity of the network. There is no rigorous justification for this penalization. It is found to work well in practice and is easy to use. With the penalization term.</p><h4 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><p>Gradient Descent is an iterative algorithm for finding local minima of a function.</p><p>In practice, we often do not compute J using all the input images. Instead, we subdivide the input into mini-batches containing M images. We process one mini-batch at a time. For each mini-batch, we calculate J, and update the network coefficients. Then, process the next batch, until all images are processed. See Listing 5 for the pseudo-code. In the code, an epoch (in the machine learning lingo) is an iteration over the entire data set of N images.</p><p>This approach usually leads to faster convergence because we update the network coefficients more often and are able to learn faster.</p><h4 id="Backpropagation"><a href="#Backpropagation" class="headerlink" title="Backpropagation"></a>Backpropagation</h4><p>Backpropagation is the process of updating the neural network coefficients. This involves computing the gradient of multi-variable functions using the chain rule.</p><h3 id="Outline-of-parallelization-strategies-for-CUDA-and-MPI"><a href="#Outline-of-parallelization-strategies-for-CUDA-and-MPI" class="headerlink" title="Outline of parallelization strategies for CUDA and MPI"></a>Outline of parallelization strategies for CUDA and MPI</h3><ul><li>GEMM CUDA implementation: A GEMM operation can be expressed as D = a <em> A </em> B + b * C. Some BLAS libraries perform in-place computation that saves the result D in the memory space of C, as cuBLAS does. This is possible if C is no longer used after the computation.</li><li>We first outline the basic implementation (“Algorithm 1”). The simplest implementation is to have one thread for each element in the result D. Each thread reads the required row of A, column of B, and an element of C to compute the output element in D.<br>For Algorithm 2, try to think of a better implementation. For example, use a blocking algorithm and take advantage of the shared memory. One approach is to have each thread block (e.g., a block of 32<em>32 threads) compute a sub-matrix (of size 32</em>32) in the output matrix. Blocks from matrices A and B can be loaded into shared memory, with each thread reading one element of each sub-matrix.</li><li>Each thread then updates its entry in the sub-matrix of D. A loop is used to multiply all the required entries in A and B. For an even more optimized and a possible “A+ grade” implementation, please refer to section 5.</li><li>We intentionally do not explain the details of these algorithms. It’s for you to fill the blanks and perhaps come up with better ideas!</li><li>MPI implementation: For each batch of images, you should subdivide the input images into smaller image batches and use MPI communication methods to distribute the input data and Neural Network parameters among MPI nodes, and perform GEMM and other computations in parallel. The resulting network coefficient updates should be reduced and sent to all nodes.</li></ul>]]></content>
    
    <summary type="html">
    
      结合了神经网络的高级的CUDA，用GPU进行NeuralNetwork的算法编写进行数字识别。核心算法部分框架都已提供，需要实现的主要是相关数据结构在GPU中的申请和释放。
    
    </summary>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/categories/CUDA/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/tags/CUDA/"/>
    
      <category term="Machine Learning" scheme="https://tk1307993.coding.me/tags/Machine-Learning/"/>
    
      <category term="MPI" scheme="https://tk1307993.coding.me/tags/MPI/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS125-Course-Scheduler</title>
    <link href="https://tk1307993.coding.me/CS125-Course-Scheduler.html"/>
    <id>https://tk1307993.coding.me/CS125-Course-Scheduler.html</id>
    <published>2019-04-25T13:44:18.000Z</published>
    <updated>2019-04-25T13:46:45.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You will create a text-based university student course scheduler. Each course object will contain information for the course department (a String) (e.g., “CS”; “MATH”; etc), course number (integer) (125; 315), course description (String) (e.g., “Introduction to Computer Science”; “Linear Transformations and Matrices”), starting hour (integer: use 24-hour clock: 0-23), a boolean variable requiredForMajor, an integer indicating the number of credit hours for the course, and days the course meets (an array of chars - ‘M’,’T’,’W’,’R’,’F’).</p><p>While the course scheduler program is running, the text-interface should look like this:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="built_in">to</span> <span class="keyword">the</span> Course Scheduler! Select <span class="keyword">an</span> option below:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="built_in">add</span> <span class="keyword">an</span> course</span><br><span class="line"><span class="number">2</span>) remove <span class="keyword">a</span> course</span><br><span class="line"><span class="number">3</span>) display courses alphabetically</span><br><span class="line"><span class="number">4</span>) display courses <span class="keyword">in</span> major</span><br><span class="line"><span class="number">5</span>) display schedule <span class="keyword">for</span> day</span><br><span class="line"><span class="number">6</span>) display total <span class="built_in">number</span> <span class="keyword">of</span> credit hours</span><br><span class="line"><span class="number">7</span>) quit</span><br><span class="line">Select <span class="keyword">an</span> option above:</span><br></pre></td></tr></table></figure></p><p>You will maintain a sorted linked list data structure to hold the schedule information.</p><p>For extra credit points, your app will be demonstrated and the code reviewed by two peers and one course assistant at the last lab/sections of the semester. Partial credit will be given for non-working code. Important: For maximum credit, in addition to a fully-functioning app, reviewers will be looking for good coding style such as: proper indentation, liberal use of constructors, data encapsulation, a short ‘main’ method and extensive use of subprograms. Use recursive methods whenever possible! Your code must also be checked into your subversion archive.</p><p>The following app behaviors will be expected for each option:</p><ol><li>add - The user will be prompted for information for a course to add (dept, number, description, whether it is in the students major, number of credit hours, and the time and days the course meets). The store will add the course in the appropriate location in the linked list, alphabetically sorted (by department and number) course list. For full credit, only add the course to the list provided the course day/time does not conflict with an already existing course. Partial credit will be awarded if you choose to not include this check. If conflict exists, the user will be prompted to enter a different course (call the add method again).</li><li>remove - The user will be shown a list of current courses in the schedule (use method 3 below) and will be prompted to choose a course to remove. The course selected will be removed from the inventory and the linked list correctly updated.</li><li>display courses alphabetically - the student’s courses will be displayed in alphabetical order by course (e.g., CS125 then Math 315 then PSYCH100) - all information for the course will be displayed: courseID, description, days it meets, number of credit hours, time/days it meets and a ‘*’ indicating the course is required for the student’s major.</li><li>display courses in major - only the student’s courses that are required for the major will be displayed in alphabetical order by course (e.g., CS125 then Math 315) - all information for the course will be displayed courseID, description, days it meets, credit hours, date/time it meets.</li><li>display schedule for day - the user will be prompted for a day of the week (MTWRF) and the schedule for the day will be displayed with courses ordered by starting hour.</li><li>display total number of credit hours - the total number of credit hours will be displayed for the current course list.</li><li>quit - the user will receive a prompt (“Are you sure you want to quit? - all your data will be lost.”) If the user replies yes, the app quits.</li></ol>]]></content>
    
    <summary type="html">
    
      这次需要代写的Java作业是一个简单的单链表应用，实现单链表的增、删、条件查询和排序即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：ADDS10-Polish-Notation</title>
    <link href="https://tk1307993.coding.me/ADDS10-Polish-Notation.html"/>
    <id>https://tk1307993.coding.me/ADDS10-Polish-Notation.html</id>
    <published>2019-04-22T13:23:36.000Z</published>
    <updated>2019-04-22T13:26:04.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prefix-to-infix-based-on-tree-data-structure"><a href="#Prefix-to-infix-based-on-tree-data-structure" class="headerlink" title="Prefix to infix based on tree data structure"></a>Prefix to infix based on tree data structure</h2><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>Create a directory for this assignment inside your SVN file system. Remember to commit your work early and often.</p><h3 id="Important-Notice"><a href="#Important-Notice" class="headerlink" title="Important Notice"></a>Important Notice</h3><p>This assignment will only be marked by the testing script on websubmission (because our tutors’ contracts end before the deadline). There will be six test cases (1 mark each). The total mark is six as usual. You don’t have to write a design, because the testing script won’t be able to understand it anyway. (But feel free to write one for your own benefit.) The testing script doesn’t care about your code style either, so feel free to use variable names like aa, bb, cc, dd (I know some of you love these kinds of names – well, jk, please don’t).</p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>Polish notation, also known as Polish prefix notation or simply prefix notation, is a form of notation for logic, arithmetic, and algebra. Its distinguishing feature is that it places operators to the left of their operands. (Many Lisp family programming languages require prefix notation, including the popular language Clojure.)</p><p>The expression for adding the numbers 1 and 2 is, in prefix notation, written “+ 1 2” rather than “1 + 2”. In more complex expressions, the operators still precede their operands, but the operands may themselves be nontrivial expressions including operators of their own. For instance, the expression that would be written in conventional infix notation as<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">5</span> + <span class="number">6</span>) * <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>can be written in prefix as<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* (+ <span class="number">5</span> <span class="number">6</span>) <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>You only need to care about binary operators: + - * and /</p><p>Also, you only need to care about operands that are from 0 to 9 (single digit).</p><p>For binary operators, prefix representation is unambiguous, and bracketing the prefix expression is un-necessary. As such, the previous expression can be further simplified to<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* + <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>The processing of the product is deferred until its two operands are available (i.e., 5 plus 6, then multiplies the result with 7). As with any notation, the innermost expressions are evaluated first, but in prefix notation this “innermost-ness” is conveyed by order rather than bracketing.</p><p>You are asked to create a class that converts prefix expressions to infix expressions. You are asked to use a tree data structure to achieve this task. (Hint: use a binary tree, use the leaf nodes to store the operands and use the non-leaf nodes to store the operators.)</p><p>Create a main function that takes in one line. The line contains a list of operators and operands separated by spaces. The input doesn’t contain parenthesis. An operator is a character from +, -, *, and /. An operand is an integer from 0 to 9. You are asked to determine whether this line describes a valid prefix expression.</p><p>If so, output its infix form. Otherwise, output “Error”. (Division by zero is considered error.)</p><p>When you output the infix form, the output format should follow two rules</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: * - 5 6 7</span><br><span class="line"><span class="keyword">Sample</span> output: (5 - 6) * 7</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: * 5</span><br><span class="line"><span class="keyword">Sample</span> output: <span class="keyword">Error</span></span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: * 5 6 7</span><br><span class="line"><span class="keyword">Sample</span> output: <span class="keyword">Error</span></span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: + * - 5 6 7 3</span><br><span class="line"><span class="keyword">Sample</span> output: ((5 - 6) * 7) + 3</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: / + * - 5 6 7 3 9</span><br><span class="line"><span class="keyword">Sample</span> output: (((5 - 6) * 7) + 3) / 9</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: / + * - 5 6 7 3 0</span><br><span class="line"><span class="keyword">Sample</span> output: <span class="keyword">Error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业是用树来实现Polish Notation，没什么难度。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：FIT2071-TextQuest</title>
    <link href="https://tk1307993.coding.me/FIT2071-TextQuest.html"/>
    <id>https://tk1307993.coding.me/FIT2071-TextQuest.html</id>
    <published>2019-04-20T00:43:54.000Z</published>
    <updated>2019-04-20T00:47:15.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task-Details"><a href="#Task-Details" class="headerlink" title="Task Details"></a>Task Details</h3><p>The Weeks 2 and 3 laboratory exercises contain a designated “Main Portfolio Exercise”. These are a series of exercises that add to each other to form a main portfolio program: TextQuest. You are to submit a final, completed version of that game.</p><p>uccessful completion of the exercises as described in the laboratory exercises may obtain you up to a maximum of 80% of the total assignment marks. In order to obtain a higher mark you should seek to include some advanced functionality (as described in the Week 3 portfolio description). The additional functionality should demonstrate advanced or more complex application of principles covered to date. It need not be large amounts of work but should demonstrate a willingness to explore new and advanced concepts. You must detail what you have done in an accompanying “readme” file.</p><p>The assignment must be created and submitted as a Visual Studio 2013 project. You may complete the exercises in your preferred IDE, however you should create a Visual Studio project in order to submit. This project must then be zipped up into one zip file for submission. The zip file MUST be named “FIT2071-AA1-YourAuthcateID.zip”. This zip file must be submitted via the Moodle assignment submission page. Note to reduce the file size of your zip, you can delete the “ipch” folder from your project before zipping without affecting your program.</p><p>Explicit assessment criteria are provided over the page, however please note you will be assessed on the following broad criteria:</p><ul><li>Meeting functional requirements as described in the exercise description</li><li>Demonstrating a solid understanding of the week’s C++ concepts, including good practice</li><li>Following the unit Programming Style Guide</li><li>Creating solutions that are as efficient and extensible as possible</li></ul><p>NOTE! Your submitted program MUST compile and run. Any submission that do not compile will be awarded zero marks. This means you should continually compile and test your code as you do it, ensuring it compiles at every step of the way.</p><p>If you have any questions or concerns please contact Tim as soon as possible.</p><h3 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h3><p>Main Portfolio Exercise: TextQuest</p><p>This week’s portfolio exercise is to begin building a (very simple) text-based Role Playing game. We will be building upon this exercise in the next week to culminate in the submission of a game built up with the 2 portfolio exercises from weeks 2 and 3. This week we will start by writing the basic structure of the code to create a character and save the character data to a file.</p><p>Step 1. Prompt the player to enter a name for their character and save that name to a file.</p><p>Step 2. You will also need to read a file containing the default statistics associated with the different character vocations that the player can choose. Add code to your program to read in the vocation file which is a comma-separated list, with four fields corresponding to: vocation, health, strength and magic. The vocation field is a text string, the remaining fields are smallish integers. Here’s an example vocation file:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Warrior,<span class="number">100</span>,<span class="number">120</span>,<span class="number">0</span> </span><br><span class="line">Mage,<span class="number">80</span>,<span class="number">60</span>,<span class="number">100</span> </span><br><span class="line">Rogue,<span class="number">60</span>,<span class="number">80</span>,<span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>Your program should read this file, print the list of vocations to the console and ask the player to select one by entering its number in the list (starting from 0).</p><p>Now write out the character information to a file which should again be a comma separated file containing five fields: name, vocation, health, strength and magic. The health score should (initially) come from the value specified in the vocation file (the second field). Here’s an example output:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TimTheMagical,Mage,<span class="number">80</span>,<span class="number">60</span>,<span class="number">100</span></span><br></pre></td></tr></table></figure></p><p>Bonus: What happens if we try to save another character? Why does this happen? How might we overcome this issue to allow us to save multiple characters?</p><p>Next week we will complete the basic game with code to resurrect the character from such a save file, make a turn loop where stuff happens pseudo-randomly affecting health until the character dies! Don’t worry, we will also start to do stuff with the strength and magic fields.</p><h3 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h3><p>Main Portfolio Exercise: TextQuest continued</p><p>This week’s portfolio exercise is to complete last week’s TextQuest game.</p><p>By now you should have a program that allows the user to create a character, choose the character’s name and choose a vocation for the character from a list of possible vocations and their health, strength and magic stats. Finally it should be saving the created character in a separate file (check last week’s lab portfolio exercise for details).</p><p>This week, we are going to again extend the program in several steps, we’re up to Step 3:</p><p>Step 3. Add to your code the ability to either read an existing character from the file created on a previous run, or create a new character from scratch.</p><p>Step 4. Now we are going to create the actual game loop. The game loop will apply a sequence of events that output a message to the screen and modify the character’s health score. Here’s a sample events file (also available on Moodle).<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">An enemy Warrior hits you with his weapon!,-50 </span><br><span class="line">An enemy Mage casts an evil spell on you!,-20 </span><br><span class="line">You found a<span class="built_in"> health </span>potion!,25 </span><br><span class="line">An enemy Rogue backstabs you <span class="keyword">from</span> the shadows!,-40 </span><br><span class="line">You got eaten by a Dragon!,-1000</span><br></pre></td></tr></table></figure></p><p>After each event, if the player’s health score is not yet 0, they should be prompted whether to continue (y/n). Answering ‘y’ will apply another event. Answering ‘n’ should end the loop. Before the program finishes it should write out the player’s current stats (in the same file as in Step 1/2).</p><p>HD Bonus: Implementing the basic functionality described in Steps 1-4 will enable you to achieve a maximum of 80% of the available marks. In order to achieve the final 20% (or “HD” component) you should seek to include some advanced functionality. The additional functionality should demonstrate advanced or more complex application of principles covered to date. It need not be large amounts of work but should demonstrate a willingness to explore new and advanced concepts. Note however that your program must still satisfy all functionality as detailed in Steps 1-4. You must describe your additions in the readme file included with your submission (see below).</p><p>Here are some ideas for things you could add:</p><ul><li>basic validation (check if the file is empty before trying to read from it, check that the name was not left blank, check that the vocation entered was within range etc.)</li><li>the ability to save/load multiple characters</li><li>events that allow the player to fight back at the cost of strength (if warrior/rogue) or magic (if mage)</li><li>a simple xp/level system</li></ul><p>Readme.txt Document: as described in the (separate) assignment hand-out you will also need to submit a brief text document explaining how your program works. To get marks for any extra functionality you may have implemented, it must be highlighted and explained clearly in this document.</p><p>Full details of submission are detailed in the assignment brief on Moodle. However, important things to note include:</p><ul><li>Your submitted program MUST compile and run in VISUAL STUDIO 2013. If a program will not compile it will be awarded ZERO marks. NO exceptions. This means you must continually compile and test your code!</li><li>You can discuss ideas with others, but your code and your readme.txt document must be your own work. We will be checking! Monash applies heavy penalties to students who plagiarise.</li></ul><p>Please note! It is not expected that you need to implement this game as an object-oriented solution. We will be writing fully object-oriented programs in the remaining assessment items.</p>]]></content>
    
    <summary type="html">
    
      本次代写的作业内容，是完成一个简单的文本的RPG游戏。作业属于Lab作业，难度不大。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
</feed>
