<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生计算机编程数学统计作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804 微信：349583866</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="cplusplusdaixie.com/"/>
  <updated>2023-08-10T22:00:24.711Z</updated>
  <id>cplusplusdaixie.com/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A5_Anagram_Solver</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A5-Anagram-Solver.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A5-Anagram-Solver.html</id>
    <published>2023-08-10T21:59:35.000Z</published>
    <updated>2023-08-10T22:00:24.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Implement a recursive backtracking approach to exhaustive search.</li><li>Implement simple optimizations to improve efficiency and avoid unnecessary computation.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>An <em>anagram</em> is a word or phrase made by rearranging the letters of another word or phrase. For example,<br>the words “midterm” and “trimmed” are anagrams. If you ignore spaces and capitalization and allow<br>multiple words, a multi-word phrase can be an anagram of some other word or phrase. For example, the<br>phrases “Clint Eastwood” and “old west action” are anagrams.<br>In this assessment, you will create a class calledAnagramSolverthat uses a dictionary to print all anagram<br>phrases of a given word or phrase. You will use <em>recursive backtracking</em> to implement your algorithm.</p><p>We have provided you with a client program,AnagramMain, that prompts the user for a phrase and then<br>passes that phrase to yourAnagramSolver, which will then print all its anagrams.</p><h1 id="AnagramSolver"><a href="#AnagramSolver" class="headerlink" title="AnagramSolver"></a>AnagramSolver</h1><h2 id="YourAnagramSolverclass-should-have-the-following-constructor"><a href="#YourAnagramSolverclass-should-have-the-following-constructor" class="headerlink" title="YourAnagramSolverclass should have the following constructor:"></a>YourAnagramSolverclass should have the following constructor:</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public AnagramSolver (List&lt;String&gt; dictionary)</span><br><span class="line">This constructor should initialize a newAnagramSolverobject <span class="keyword">that</span> will use <span class="keyword">the</span> <span class="keyword">given</span> <span class="built_in">list</span> <span class="keyword">as</span> <span class="keyword">its</span></span><br><span class="line">dictionary. You should <span class="keyword">not</span> change <span class="keyword">the</span> <span class="built_in">list</span> <span class="keyword">in</span> any way. You may assume <span class="keyword">that</span> <span class="keyword">the</span> dictionary <span class="keyword">is</span> a</span><br><span class="line">nonempty collection <span class="keyword">of</span> nonempty sequences <span class="keyword">of</span> letters <span class="keyword">and</span> <span class="keyword">that</span> <span class="keyword">it</span> <span class="keyword">contains</span> no duplicates.</span><br><span class="line">You should “preprocess” <span class="keyword">the</span> dictionary <span class="keyword">in</span> your constructor <span class="keyword">to</span> compute all <span class="keyword">of</span> <span class="keyword">the</span> inventories <span class="keyword">in</span></span><br><span class="line">advance (once per <span class="built_in">word</span>).</span><br></pre></td></tr></table></figure><h2 id="YourAnagramSolvershould-also-implement-the-following-public-method"><a href="#YourAnagramSolvershould-also-implement-the-following-public-method" class="headerlink" title="YourAnagramSolvershould also implement the following public method:"></a>YourAnagramSolvershould also implement the following public method:</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void print (String <span class="keyword">text</span>, int <span class="built_in">max</span>)</span><br><span class="line">This method should use recursive backtracking <span class="built_in">to</span> find combinations <span class="keyword">of</span> <span class="keyword">words</span> that have <span class="keyword">the</span> same</span><br><span class="line">letters <span class="keyword">as</span> <span class="keyword">the</span> given <span class="keyword">string</span>. It should print all combinations <span class="keyword">of</span> <span class="keyword">words</span> <span class="built_in">from</span> <span class="keyword">the</span> dictionary that are</span><br><span class="line">anagrams oftextand that <span class="built_in">include</span> <span class="keyword">at</span> mostmaxwords (<span class="keyword">or</span> <span class="keyword">an</span> unlimited <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">words</span> ifmaxis</span><br><span class="line"><span class="number">0</span>) toSystem.out.</span><br><span class="line">You should throw anIllegalArgumentExceptionifmaxis less than <span class="number">0.</span></span><br></pre></td></tr></table></figure><h1 id="UsingLetterInventory"><a href="#UsingLetterInventory" class="headerlink" title="UsingLetterInventory"></a>UsingLetterInventory</h1><p>An important aspect of the recursive backtracking solutions is separation of the recursive code from the<br>code that manages low-level details of the problem. Many of the problems we’ve done so far (n-queens,<br>for example) achieve this separation by using a separate class to manage the state of the current possible<br>solution. (In n-queens, this was theBoardclass that tracked where queens were located and whether or<br>not a placement was safe.)</p><h1 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h1><h1 id="Take-home-Assessment-6-Anagram-Solver-due-August-5-2021-11-59-pm"><a href="#Take-home-Assessment-6-Anagram-Solver-due-August-5-2021-11-59-pm" class="headerlink" title="Take-home Assessment 6: Anagram Solver due August 5, 2021 11: 59 pm"></a>Take-home Assessment 6: Anagram Solver due August 5, 2021 11: 59 pm</h1><p>In this assessment, you will follow a similar strategy. In the anagrams problem, the low-level details<br>involve keeping track of various letters and figuring out when one group of letters can be formed from<br>another group of letters. Luckily, theLetterInventoryclass we implemented in Assessment 1 turns<br>out to be exactly what we need! You should review the Assesment 1 specification to remind yourself of<br>the available methods, but you should use our provided implementation ofLetterInventory.classor<br>LetterInventory.jar.</p><p>Thesubtractmethod of theLetterInventoryclass is the key to solving this problem. For exam-<br>ple, if you have a LetterInventoryfor the phrase “george bush” and ask if you can subtract the<br>LetterInventoryfor “bee”, the answer is yes, sosubtractwould return a non-null result (because<br>every letter in the “bee” inventory is also in the “george bush” inventory). Sincenullis not returned,<br>you need to explore this possibility. The word “bee” alone is not enough to account for all of the letters<br>of “george bush”, which is why you’d want to work with the new inventory formed by subtracting the<br>letters from “bee” as you continue the exploration.</p><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><h2 id="AnagramSolverConstructor"><a href="#AnagramSolverConstructor" class="headerlink" title="AnagramSolverConstructor"></a>AnagramSolverConstructor</h2><p>You should “pre-process” the dictionary in your constructor to compute the inventories for each word<br>in advance (one per word). You’ll want fast access to these inventories as you explore the possible<br>combinations. As usual, a map will give you fast access. In this problem, we don’t care about the order<br>of the words in our map, but we _do_ care about speed; so, you should be sure to useHashMap.</p><h2 id="printAlgorithm"><a href="#printAlgorithm" class="headerlink" title="printAlgorithm"></a>printAlgorithm</h2><p>Yourprintmethod must produce the anagrams in the same format as in the example execution below.<br>The easiest way to do this is to build up your answer in aListorStack. Once you build up a complete<br>answer in your data structure, you can simply print the structure and it will have the appropriate format.</p><p>You are required to solve this problem by using recursive backtracking. In particular, you should write a<br>recursive method that builds up an answer one word at a time. On each recursive call, you should search<br>the dictionary from beginning to end and to explore each word that is a match for the current set of<br>letters. The possible solutions should be explored in dictionary order. That is, you should examine the<br>words in the same order in which they appear in the dictionary. (Do not make any assumptions about<br>what that order is.)</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>The given dic-<br>tionary might<br>not be sorted<br>Recursive backtracking is inherently inefficient since it has to explore every possible option. To improve on alphabetically!<br>this, you will implement one optimization known as “pruning”. For any given phrase, you should reduce<br>the dictionary to a smaller dictionary of relevant words <em>before</em> you begin your exhaustive search. A word<br>is relevant if it can be subtracted from the given phrase. In most cases, only a fraction of the dictionary<br>will be relevant to any given phrase. So, reducing the dictionary before you begin the recursion will allow<br>you to speed up the searches that happen on each recursive invocation.</p><p>To implement this, you should construct a short dictionary for each phrase you are asked to explore that<br>includes just the words relevant to that phrase. You should do this once before the recursion begins–not<br>on each recursive call. You <em>may</em> continue to prune this smaller dictionary on each recursive call, but keep<br>in mind that it is not required and it will make the code more difficult to write. If you decide to prune on<br>each recursive call, clearly document it.</p><h2 id="Development-Strategy"><a href="#Development-Strategy" class="headerlink" title="Development Strategy"></a>Development Strategy</h2><p>We recommend that you start by writing printwithout the pruning optimization and ignoringmax<br>entirely. Once that works, you should then implement a non-zero max, followed by the zero case once<br>the non-zero case is working. Finally, you should add pruning after the rest of the behavior works.</p><h1 id="Full-Example-Walk-Through"><a href="#Full-Example-Walk-Through" class="headerlink" title="Full Example Walk-Through"></a>Full Example Walk-Through</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Suppose we have <span class="keyword">the</span> following dictionary (eleven.txt):</span><br><span class="line">zebra</span><br><span class="line"><span class="literal">one</span></span><br><span class="line">plus</span><br><span class="line">won</span><br><span class="line">potato</span><br><span class="line">twelve</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We ask the <span class="function"><span class="keyword">program</span></span> to <span class="built_in">print</span> <span class="built_in">all</span> anagrams of the phrase “eleven plus two”:</span><br></pre></td></tr></table></figure><h2 id="Step-1-Prune-The-Dictionary"><a href="#Step-1-Prune-The-Dictionary" class="headerlink" title="Step 1: Prune The Dictionary"></a>Step 1: Prune The Dictionary</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Not all <span class="keyword">the</span> <span class="keyword">words</span> <span class="keyword">in</span> <span class="keyword">the</span> dictionary are relevant <span class="built_in">to</span> <span class="keyword">the</span> phrase “eleven plus <span class="literal">two</span>.” In particular, “potato”</span><br><span class="line"><span class="keyword">and</span> “zebra” contain letters (“<span class="keyword">a</span>” <span class="keyword">and</span> “z”, respectively) that are <span class="keyword">not</span> ineleven plus <span class="literal">two</span>. So, we prune</span><br><span class="line"><span class="keyword">the</span> dictionary <span class="built_in">to</span> <span class="keyword">the</span> following:</span><br><span class="line"><span class="literal">one</span></span><br><span class="line">plus</span><br><span class="line">won</span><br><span class="line">twelve</span><br></pre></td></tr></table></figure><h2 id="Step-2-Find-The-Words"><a href="#Step-2-Find-The-Words" class="headerlink" title="Step 2: Find The Words"></a>Step 2: Find The Words</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Now <span class="keyword">that</span> we’ve pruned our dictionary, we know what our <span class="built_in">word</span> choices are (<span class="keyword">the</span> remaining <span class="built_in">words</span> <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line">dictionary.) So, we go <span class="keyword">through</span> our <span class="built_in">words</span> recursively, keeping track <span class="keyword">of</span> <span class="keyword">the</span> unused letters <span class="keyword">at</span> each step:</span><br><span class="line">[eeellnopstuvw]</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[elnopsu]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eeellpstuv]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eeelnotvw]</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eno]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eeeltv]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">eeltvw</span>] bad</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus won twelve</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eellpstuvw]</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[lpsu]</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">bad</span> <span class="keyword">bad</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one twelve plus</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bad</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus wontwelve</span></span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">eeltvw</span>] bad</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus twelve</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bad</span> <span class="keyword">bad</span> <span class="keyword">bad</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">onepluswon twelve</span></span><br></pre></td></tr></table></figure><p>bad</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus won twelve</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus won twelve</span></span><br></pre></td></tr></table></figure><h2 id="Example-Execution"><a href="#Example-Execution" class="headerlink" title="Example Execution"></a>Example Execution</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the cse143 anagram solver.</span><br><span class="line">What <span class="keyword">is</span> the name of the dictionary <span class="keyword">file</span>? eleven.txt</span><br><span class="line">phrase <span class="keyword">to</span> scramble (<span class="keyword">return</span> <span class="keyword">to</span> <span class="keyword">quit</span>)? eleven plus two</span><br><span class="line">Max words <span class="keyword">to</span> include (<span class="number">0</span> <span class="keyword">for</span> <span class="keyword">no</span> <span class="built_in">max</span>)? <span class="number">0</span></span><br><span class="line">[one, plus, twelve]</span><br><span class="line">[one, twelve, plus]</span><br><span class="line">[plus, one, twelve]</span><br><span class="line">[plus, twelve, one]</span><br><span class="line">[twelve, one, plus]</span><br><span class="line">[twelve, plus, one]</span><br><span class="line">phrase <span class="keyword">to</span> scramble (<span class="keyword">return</span> <span class="keyword">to</span> <span class="keyword">quit</span>)?</span><br></pre></td></tr></table></figure><h1 id="Hints-and-Tips"><a href="#Hints-and-Tips" class="headerlink" title="Hints and Tips"></a>Hints and Tips</h1><h2 id="Use-The-Provided-Dictionary"><a href="#Use-The-Provided-Dictionary" class="headerlink" title="Use The Provided Dictionary"></a>Use The Provided Dictionary</h2><p>The constructor for your class is passed a reference to a dictionary stored as aListofStringobjects.<br>You can use this dictionary for your own object as long as you don’t change it. In other words, you don’t<br>need to make your own independent copy of the dictionary as long as you don’t modify the one that is<br>passed to you in the constructor.</p><h2 id="Handling-Whenmaxis-Zero"><a href="#Handling-Whenmaxis-Zero" class="headerlink" title="Handling Whenmaxis Zero"></a>Handling Whenmaxis Zero</h2><p>You may not make any assumptions about the length of the input or output when handling the case when<br>maxis 0 in theprintmethod. In particular, do NOT try and simply search for all anagrams where the<br>number of words is smaller then some arbitrary number since then there is no guarantee your output will<br>always be correct (no matter how large an artificial limit you choose). Instead, try to handle whenmaxis<br>0 in a way that has meaning.</p><h2 id="Let-Exhaustive-Search-Do-Its-Job"><a href="#Let-Exhaustive-Search-Do-Its-Job" class="headerlink" title="Let Exhaustive Search Do Its Job"></a>Let Exhaustive Search Do Its Job</h2><p>Don’t make this problem harder than it needs to be. You are doing an exhaustive search of all the<br>possibilities. You have to avoid dead ends, and you have to implement the optimization listed above,<br>but otherwise you are exploring every possibility. For example, in the example execution you will see that<br>one solution for “eleven plus two” is [one, plus, twelve]. Because this is found as a solution, you know<br>that every other permutation of these words will also be included ([one, twelve, plus], [plus, twelve, one],<br>etc.). But you don’t have to (and should not) write any special code to make that work. This is a natural<br>result of the exhaustive nature of the search. It will locate each of these possibilities and print them out<br>when they are found. Similarly, you don’t need any special cases for words that have already been used.<br>If someone asks you for the anagrams of “bar bar bar”, you should include [bar, bar, bar] as an answer.</p><h2 id="Testing-Pruning"><a href="#Testing-Pruning" class="headerlink" title="Testing Pruning"></a>Testing Pruning</h2><p>While developing your program, you can verify that pruning is working by printing the size of the original<br>dictionary and the pruned dictionary. This should be doable by hand for theeleven.txtdictionary. And,<br>for example, when processing “george bush” ondict1.txt, you go from a dictionary size of 56 to a<br>pruned size of 31.</p><h2 id="Output-Limits"><a href="#Output-Limits" class="headerlink" title="Output Limits"></a>Output Limits</h2><p>Sometimes this program produces a lot of output. When you run it in jGRASP, it will display just 500<br>lines of output. If you want to see more, go to the Build menu and select the “Run in MSDOS Window”<br>option. Then when the window pops up, right-click on the title bar of the window, select Properties, and<br>under the “Layout” tab you should be able to adjust the “Screen Buffer Size” Height to something higher<br>(like 9999 lines).</p><p>Ed also limits the amount of output, but this limit cannot be changed. Therefore, we strongly recommend<br>you test your code in jGRASP before submitting.</p><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h2 id="Recursive-Approach"><a href="#Recursive-Approach" class="headerlink" title="Recursive Approach"></a>Recursive Approach</h2><p>Be sure to implement your recursive backtracking following the guidelines discussed in class. Avoid<br>repeating computations that you don’t need to and exploring branches that you know will never be<br>printed. Don’t create special cases in your recursive code if they are not necessary. Avoid repeated logic<br>as much as possible.</p><h2 id="Avoid-Redundancy"><a href="#Avoid-Redundancy" class="headerlink" title="Avoid Redundancy"></a>Avoid Redundancy</h2><p>Create “helper” method(s) to capture repeated code. As long as all extra methods you create areprivate<br>(so outside code cannot call them), you can have additional methods in your class beyond those specified<br>here. If you find that multiple methods in your class do similar things, you should create helper method(s)<br>to capture the common code.</p><h2 id="Generic-Structures"><a href="#Generic-Structures" class="headerlink" title="Generic Structures"></a>Generic Structures</h2><p>You should always use generic structures. If you make a mistake in specifying type parameters, the<br>Java compiler may warn you that you have “unchecked or unsafe operations” in your program. If you<br>use jGRASP, you may want to change your settings to see which line the warning refers to. Go to<br>Settings/Compiler Settings/Workspace/Flags/Argsand then uncheck the box next to “Compile”<br>and type in:-Xlint:unchecked</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please</p><p>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileAnagramSolverReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A4_Grammer_Solver</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A4-Grammer-Solver.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A4-Grammer-Solver.html</id>
    <published>2023-08-08T00:50:11.000Z</published>
    <updated>2023-08-08T00:50:54.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Implement recursive methods to solve a naturally-recursive problem.</li><li>Implement a public-private recursive pair.</li><li>Choose an appropriate data structure to represent specified data.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Overview-Languages-Grammars-and-BNF"><a href="#Overview-Languages-Grammars-and-BNF" class="headerlink" title="Overview: Languages, Grammars, and BNF"></a>Overview: Languages, Grammars, and BNF</h1><p>In this assessment, you will write a classGrammarSolverthat will be able to generate random sentences<br>(or other output) from a set of specially-formatted rules. These rules are called a <em>grammar</em> and are used<br>to define a <em>language</em>. Our grammars will be written in <em>Backus-Naur Form (BNF)</em>.</p><h2 id="Formal-Languages"><a href="#Formal-Languages" class="headerlink" title="Formal Languages"></a>Formal Languages</h2><p>A <em>formal language</em> is a set of words and symbols along with a set of rules defining how those symbols may<br>be used together. These rules dictate what are considered valid constructions in the defined language.<br>For example, in English, “A boy threw the ball.” is a valid sentence, but “A threw boy ball the” is not,<br>despite consisting of the same words, because the words are put together in an invalid way.</p><h2 id="Grammars"><a href="#Grammars" class="headerlink" title="Grammars"></a>Grammars</h2><p>A <em>grammar</em> is a way of describing the syntax and symbols of a formal language. Grammars have two types<br>of “symbols” (e.g., words, phrases, sentences): <em>terminals</em> and <em>non-terminals</em>. A <em>terminal</em> is a fundamental<br>word or symbol in the language. For example, in English, any single word would be considered a terminal.<br>A <em>non-terminal</em> is a symbol that is used to define specific groups of symbols that may be used in the<br>language. In a grammar for English, we might have non-terminals such as “adjective,” “noun phrase,”<br>and “sentence” to name a few.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sentence</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">verb</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">runs</span></span><br></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dog</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">article</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">the</span></span><br></pre></td></tr></table></figure><p>For example, consider the following simple language:</p><ul><li><em>Terminals:</em> the, a, cat, dog, runs, walks</li><li><em>Non-terminals:</em><br>  <strong>- sentence</strong> : “article <strong>and</strong> object <strong>and</strong> verb”<br>  <strong>- article</strong> : “the <strong>or</strong> a”.<br>  <strong>- object</strong> : “cat <strong>or</strong> dog”.<br>  <strong>- verb</strong> : “runs <strong>or</strong> walks”.</li></ul><p>This language allows the following sentences:</p><p>“the cat runs” “the cat walks” “a cat runs” “a cat walks”<br>“the dog runs” “the dog walks” “a dog runs” “a dog walks”</p><h1 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h1><h1 id="Take-home-Assessment-5-Grammar-Solver-due-J-uly-2-9-2021-11-5-9-pm"><a href="#Take-home-Assessment-5-Grammar-Solver-due-J-uly-2-9-2021-11-5-9-pm" class="headerlink" title="Take-home Assessment 5: Grammar Solver due J uly 2 9 , 2021 11:5 9 pm"></a>Take-home Assessment 5: Grammar Solver due J uly 2 9 , 2021 11:5 9 pm</h1><h2 id="Backus-Naur-Form-BNF"><a href="#Backus-Naur-Form-BNF" class="headerlink" title="Backus-Naur Form (BNF)"></a>Backus-Naur Form (BNF)</h2><p><em>Backus-Naur Form (BNF)</em> is a specific format for specifying grammars. Each line of BNF looks like the<br>following:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nonterminal::=<span class="keyword">rule</span>|<span class="keyword">rule</span>|...|<span class="keyword">rule</span></span><br></pre></td></tr></table></figure><p>Each “rule” is some sequence of terminals or non-terminals separated by whitespace. The‘|’character<br>separates different possible rules for the same non-terminal. For example, the grammar specified above<br>written in BNF would look like:</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentence::=article object verb</span><br><span class="line">article::=the|a</span><br><span class="line">object::=cat|dog</span><br><span class="line">verb::=runs|walks</span><br></pre></td></tr></table></figure><p>Notice that the non-terminalsentencehas a single option consisting of multiple non-terminals, whereas<br>the others non-terminals each consist of multiple options.</p><p>Rules may be duplicated for the same non-terminal to make a particular expansion more likely than others.<br>For example, suppose the above grammar were modified as follows:</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentence::=article object verb</span><br><span class="line">article::=the|a</span><br><span class="line">object::=cat|cat|dog</span><br><span class="line">verb::=runs|walks</span><br></pre></td></tr></table></figure><p>This grammar would produce the same sentences as the original grammar, but sentences containing “cat”<br>would be twice as likely to occur as sentences containing “dog.”</p><p>In addition, for this assessment, you may assume the following about all BNF rules:</p><ul><li>Each line will contain <em>exactly one occurrence</em> of::=which will be the separator between the name<br>  of a non-terminal and its options.</li><li>A pipe (|) will separate each option for a non-terminal. If there is only one option for a particular<br>  non-terminal (like withsentenceabove), there will be no pipe on that line.</li><li>Whitespace separates tokens but doesn’t haven any special meaning. There will be at least one<br>  whitespace character between each part of a single rule. Extra whitespace should be ignored.</li><li>Symbols are case-sensistive. (For example,<s>would not be considered the same symbol as<s>.)</s></s></li><li>A <em>terminal</em> is any symbol that does not appear on the left-hand side of a rule.</li><li>The text before the “::=” is not empty, does not contain a pipe (|) character, and does not contain<br>  any whitespace.</li><li>The text after the “::=” will be nonempty.</li></ul><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>In this assessment you will write a class that accepts a list of rules for a grammar in Backus-Naur Form<br>and allows the client to randomly generate elements of the grammar. You will use <strong>recursion</strong> to implement<br>the core of your algorithm.</p><p>We have provided you with a client program,GrammarMain.java, that handles the file processing and<br>user interaction. This program reads a BNF grammar input text file and passes its entire contents to you<br>as aListofStrings. You will write a classGrammarSolverthat generates random results based on<br>the rules provided.</p><h1 id="GrammarSolver"><a href="#GrammarSolver" class="headerlink" title="GrammarSolver"></a>GrammarSolver</h1><h2 id="YourGrammarSolverclass-should-have-the-following-constructor"><a href="#YourGrammarSolverclass-should-have-the-following-constructor" class="headerlink" title="YourGrammarSolverclass should have the following constructor:"></a>YourGrammarSolverclass should have the following constructor:</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public GrammarSolver (List&lt;String&gt; rules)</span><br><span class="line">This constructor should initialize <span class="keyword">a</span> <span class="built_in">new</span> grammar over <span class="keyword">the</span> given BNF grammar rules where <span class="keyword">each</span> rule</span><br><span class="line">corresponds <span class="built_in">to</span> <span class="literal">one</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">text</span>. You should use regular expressions (see below) <span class="built_in">to</span> break apart <span class="keyword">the</span></span><br><span class="line">rules <span class="keyword">and</span> store them <span class="keyword">into</span> aMapso that you can look up parts <span class="keyword">of</span> <span class="keyword">the</span> grammar efficiently later.</span><br><span class="line">You should <span class="keyword">not</span> modify <span class="keyword">the</span> list passed <span class="keyword">in</span>. You should throw anIllegalArgumentExceptionif <span class="keyword">the</span></span><br><span class="line">list is <span class="literal">empty</span> <span class="keyword">or</span> <span class="keyword">if</span> there are <span class="literal">two</span> <span class="keyword">or</span> more entries <span class="keyword">in</span> <span class="keyword">the</span> grammar <span class="keyword">for</span> <span class="keyword">the</span> same non-terminal.</span><br></pre></td></tr></table></figure><h2 id="YourGrammarSolvershould-also-implement-the-following-public-methods"><a href="#YourGrammarSolvershould-also-implement-the-following-public-methods" class="headerlink" title="YourGrammarSolvershould also implement the following public methods:"></a>YourGrammarSolvershould also implement the following public methods:</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean grammarContains (String symbol)</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returntrueif</span> <span class="title">the</span> <span class="title">given</span> <span class="title">symbol</span> <span class="title">is</span> <span class="title">a</span> <span class="title">non</span>-<span class="title">terminal</span> <span class="title">in</span> <span class="title">the</span> <span class="title">grammar</span> <span class="title">andfalse</span></span></span><br><span class="line"><span class="function"><span class="title">otherwise</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For example, <span class="keyword">for</span> the grammar above, grammarContains(<span class="string">"sentence"</span>)would returntrueand</span><br><span class="line"><span class="function"><span class="title">grammarContains</span><span class="params">(<span class="string">"foo"</span>)</span><span class="title">orgrammarContains</span><span class="params">(<span class="string">"boy"</span>)</span><span class="params">(“boy” is a terminal in the language)</span></span></span><br><span class="line">would returnfalse.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String getSymbols ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">return</span> <span class="title">a</span> <span class="title">string</span> <span class="title">representation</span> <span class="title">of</span> <span class="title">the</span> <span class="title">various</span> <span class="title">nonterminal</span> <span class="title">symbols</span> <span class="title">from</span> <span class="title">the</span></span></span><br><span class="line"><span class="function"><span class="title">grammar</span> <span class="title">as</span> <span class="title">a</span> <span class="title">sorted</span>, <span class="title">comma</span>-<span class="title">separated</span> <span class="title">list</span> <span class="title">enclosed</span> <span class="title">in</span> <span class="title">square</span> <span class="title">brackets</span></span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">For</span> <span class="selector-tag">example</span>, <span class="selector-tag">callinggetSymbols</span>()<span class="selector-tag">for</span> <span class="selector-tag">the</span> <span class="selector-tag">previous</span> <span class="selector-tag">grammar</span> <span class="selector-tag">would</span> <span class="selector-tag">give</span>: “<span class="selector-attr">[article, object,</span></span><br><span class="line"><span class="selector-attr">sentence, verb]</span>”.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public String[] generate (String symbol, int times)</span><br><span class="line">This method should generate times <span class="built_in">random</span> occurrences <span class="keyword">of</span> <span class="keyword">the</span> given symbol <span class="keyword">and</span> <span class="literal">return</span> them <span class="keyword">as</span></span><br><span class="line">aString[]. Each <span class="keyword">string</span> generated should be compact <span class="keyword">in</span> <span class="keyword">the</span> sense that there should be</span><br><span class="line">exactly <span class="literal">one</span> <span class="literal">space</span> between <span class="keyword">each</span> terminal <span class="keyword">and</span> there should be no leading <span class="keyword">or</span> trailing spaces.</span><br><span class="line">If times is negative, you should throw anIllegalArgumentException. If theStringargument</span><br><span class="line">passed is <span class="keyword">not</span> <span class="keyword">a</span> non-terminal <span class="keyword">in</span> your grammar you should throw anIllegalArgumentException.</span><br><span class="line">When generating <span class="keyword">a</span> non-terminal symbol <span class="keyword">in</span> your grammar, <span class="keyword">each</span> <span class="keyword">of</span> <span class="keyword">the</span> rules <span class="keyword">on</span> <span class="title">the</span> <span class="title">right-hand</span> <span class="title">side</span></span><br><span class="line"><span class="keyword">of</span> <span class="keyword">the</span> grammar should be applied <span class="keyword">with</span> equal probability.</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Each written</span><br><span class="line">rule should</span><br><span class="line">equally likely,</span><br><span class="line">but <span class="keyword">a</span> rule may</span><br><span class="line">occur more <span class="keyword">of</span>-</span><br><span class="line"><span class="literal">ten</span> <span class="keyword">if</span> <span class="keyword">it</span> appears</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">an</span> option</span><br><span class="line">more than once.</span><br></pre></td></tr></table></figure><h1 id="Sample-Grammar-and-Executions"><a href="#Sample-Grammar-and-Executions" class="headerlink" title="Sample Grammar and Executions"></a>Sample Grammar and Executions</h1><h2 id="Complex-BNF-sentence-txt"><a href="#Complex-BNF-sentence-txt" class="headerlink" title="Complex BNF (sentence.txt)"></a>Complex BNF (sentence.txt)</h2><p><sentence>::=<nounp> <verbp></verbp></nounp></sentence></p><p><nounp>::=<det> <adjs> <noun>|<propnoun></propnoun></noun></adjs></det></nounp></p><p><propnoun>::=Hadi|Jazmin|Ali|Spot|Fred|Elmo</propnoun></p><p><adjs>::=<adj>|<adj> <adjs></adjs></adj></adj></adjs></p><p><adj>::=big|green|wonderful|faulty|subliminal|pretentious</adj></p><p><det>::=the|a</det></p><p><noun>::=dog|cat|man|university|father|mother|child|television</noun></p><p><verbp>::=<transverb> <nounp>|<intransverb></intransverb></nounp></transverb></verbp></p><p><transverb>::=taught|honored|waved to|helped</transverb></p><p><intransverb>::=died|collapsed|laughed|wept</intransverb></p><h2 id="Example-Random-Sentence-Diagram"><a href="#Example-Random-Sentence-Diagram" class="headerlink" title="Example Random Sentence Diagram"></a>Example Random Sentence Diagram</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;sentence&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;verbp&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;nounp&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;noun&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">child</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;adjs&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;adjs&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;adj&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wonderful</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;adj&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">green</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;det&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">the</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;transverb&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">honored</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;nounp&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;propnoun&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Fred</span></span><br></pre></td></tr></table></figure><h2 id="Partial-Example-Execution-user-input-underlined"><a href="#Partial-Example-Execution-user-input-underlined" class="headerlink" title="Partial Example Execution (user input underlined)"></a>Partial Example Execution (user input underlined)</h2><p>Welcome to the cse143 random sentence generator.</p><p>What is the name of the grammar file? sentence.txt</p><p>Available symbols are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)? <sentence><br>How many do you want me to generate? 5<br>Hadi found Jazmin<br>Spot helped the big cat<br>Elmo died<br>the green mother wept<br>the subliminal green man laughed</sentence></verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>Available symbols are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)?</verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>More example program executions are found at the end of the spec.</p><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><h2 id="GrammarSolver-Constructor"><a href="#GrammarSolver-Constructor" class="headerlink" title="GrammarSolver Constructor"></a>GrammarSolver Constructor</h2><p>For this assessment, you <strong>MUST</strong> represent your grammar using aMap, where the <em>keys</em> of the map are<br>the <em>non-terminals</em> of the grammar, and the <em>values</em> are the options for expansion the corresponding non-<br>terminal. You should choose an appropriate data structure for the values in your Mapto effectively<br>represent the grammar rules and make the operations required by the class convenient and efficient.</p><h2 id="generateAlgorithm"><a href="#generateAlgorithm" class="headerlink" title="generateAlgorithm"></a>generateAlgorithm</h2><p>Thegeneratemethod will generate a random occurrence of a given non-terminalNT. You <strong>MUST</strong> use<br>the following recursive algorithm in your implementation of this method:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Choose <span class="keyword">a</span> <span class="built_in">random</span> expansion ruleRfor <span class="keyword">the</span> non-terminalNT. For <span class="keyword">each</span> <span class="keyword">of</span> <span class="keyword">the</span> symbols <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line">ruleR, generate <span class="keyword">a</span> <span class="built_in">random</span> occurrence <span class="keyword">of</span> that symbol. If <span class="keyword">the</span> symbol is <span class="keyword">a</span> terminal, <span class="keyword">the</span> expansion</span><br><span class="line">is simply <span class="keyword">the</span> symbol itself. If <span class="keyword">the</span> symbol is <span class="keyword">a</span> non-terminal, you should generate <span class="keyword">an</span> expansion</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">a</span> recursive call.</span><br></pre></td></tr></table></figure><p>Remember that it is acceptable to have a loop inside your recursion. (In fact, you will likely want one as<br>part of this algorithm!) The directory crawler program from class will serve as a good guide for how to<br>write this program. In that example, we iterated over the different files in a directory and used recursion<br>to list the files in each subdirectory. For yourGrammarSolver, you will iterate over the different symbols<br>in the chosen role and use recursion to generate an expansion for each symbol. You may also find that<br>you will want to use a public/private pair for this recursive task.</p><h2 id="Testing-Your-Solution"><a href="#Testing-Your-Solution" class="headerlink" title="Testing Your Solution"></a>Testing Your Solution</h2><p>We are providing another tool that is linked on the section for this assignment to check the output of<br>yourgeneratemethod to make sure it is producing valid output.</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Remember <span class="keyword">to</span></span><br><span class="line"><span class="builtin-name">remove</span> any</span><br><span class="line">debugging</span><br><span class="line">code when you</span><br><span class="line">submit.</span><br></pre></td></tr></table></figure><p>You can test that the correct whitespace is produced fromgenerateby using some non-whitespace<br>character (e.g. ~) instead of spaces and inspecting the output visually.</p><h2 id="Splitting-Strings"><a href="#Splitting-Strings" class="headerlink" title="Splitting Strings"></a>Splitting Strings</h2><p>In this assignment, it will be useful to know how to <em>split</em> strings apart in Java. In particular, you will need<br>to split the various options for rules on the|character, and then, you will need to split the pieces of a<br>rule apart by spaces.</p><p>To do this, you should use the <strong>splitmethod of the Stringclass</strong> , which takes aStringdelimiter<br>(e.g. “what to split by”) as a parameter and returns your original largeStringas an array of smaller<br>Strings.</p><p>The delimiterStringpassed tosplitis called a <em>regular expression</em> , which are strings that use a particular<br>syntax to indicate patterns of text. A regular expression is aStringthat “matches” certain sequences.<br>For instance, “abc” is a regular expression that matches “a followed by b followed by c”.</p><p>You do not need to have a deep understanding of regular expressions to complete this assessment. Here<br>are some specific regular expressions that will help you with particular splitting steps for your class:</p><ul><li><strong>Splitting Non-Terminals from Rules.</strong> Given aString, line, to splitlinebased on where<br>  ::=occurs, you could use the regular expression “::=” (since you are looking for these <em>literal</em><br>  characters). For example:</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">line</span> = <span class="string">"example::=foo bar |baz"</span>;</span><br><span class="line"><span class="keyword">String</span>[] pieces = <span class="built_in">line</span>.<span class="built_in">split</span>(<span class="string">"::="</span>); <span class="comment">// ["example", "foo bar |baz"]</span></span><br></pre></td></tr></table></figure><ul><li><strong>Splitting Different Rules.</strong> Given aString,rules, to splitrulesbased on where the|character<br>  is, it looks similar to the above, <em>except</em> , in regular expressions,|is a special character. So, we must<br>  escape it (just like\nor\t). So, the regular expression is “\|”. (Note that we need two slashes<br>  because slashes themselves must be escaped inStrings.) For example:</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> rules = <span class="string">"foo bar|baz |quux mumble"</span>;</span><br><span class="line"><span class="keyword">String</span>[] pieces = rules.split(<span class="string">"\\|"</span>); // [<span class="string">"foo bar"</span>, <span class="string">"baz "</span>, <span class="string">"quux mumble"</span>]</span><br></pre></td></tr></table></figure><ul><li><strong>Splitting Apart a Single Rule.</strong> Given aString,rule, to splitrulebased on whitespace, we<br>  must look for “at least one whitespace”. We can use\sto indicate “a single whitespace of any<br>  kind:\t, space, etc. And by adding+afterwards, the regular expression is interpreted as “one or<br>  more of whitespace”. For example:</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">rule</span> = <span class="string">"the quick brown fox"</span>;</span><br><span class="line"><span class="keyword">String</span>[] pieces = <span class="keyword">rule</span>.split(<span class="string">"\\s+"</span>); // [<span class="string">"the"</span>, <span class="string">"quick"</span>, <span class="string">"brown"</span>, <span class="string">"fox"</span>]</span><br></pre></td></tr></table></figure><h2 id="Removing-Whitespace-from-the-Beginning-and-the-End-of-a-String"><a href="#Removing-Whitespace-from-the-Beginning-and-the-End-of-a-String" class="headerlink" title="Removing Whitespace from the Beginning and the End of a String"></a>Removing Whitespace from the Beginning and the End of a String</h2><p>One minor issue that comes up with splitting on whitespace as above is that if theStringyou are splitting<br>begins with a whitespace character, you will get an emptyStringat the front of the resulting array.<br>Given aString,str, we can create a newStringthat omits all leading and trailing whitespace removed:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">" lots of spaces \t"</span>;</span><br><span class="line"><span class="keyword">String</span> trimmedString = <span class="built_in">str</span>.<span class="built_in">trim</span>(); <span class="comment">// "lots of spaces"</span></span><br></pre></td></tr></table></figure><h1 id="Development-Strategy-and-Hints"><a href="#Development-Strategy-and-Hints" class="headerlink" title="Development Strategy and Hints"></a>Development Strategy and Hints</h1><p>Thegeneratemethod is the most difficult, so we strongly suggest you write it last. Remember that it<br>is helpful to tackle difficult methods using “iterative development” where you solve simple versions of the<br>problem first.</p><p>Random programs can be difficult to validate correctness, and thegeneratemethod you will implement<br>uses randomness to decide which rule for a given non-terminal to use. To help you debug and validate<br>your output, we have provided a grammar verifier tool on the course website that verifies your output<br>follows the grammar rules (but ignores whitespace).</p><p>If your recursive method has a bug, try putting <strong>a debugprintln</strong> that prints your parameter values to<br>see the calls being made.</p><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h2 id="SortedMap"><a href="#SortedMap" class="headerlink" title="SortedMap"></a>SortedMap</h2><p>Because we want you to guarantee the keys of your map are sorted, we will ask you to use the<br>SortedMap&lt;K, V&gt;interface for this assignment instead of theMap&lt;K, V&gt;interface. TheSortedMap<br>interface is essentially the same as theMapinterface, except it requires the keys be sorted. This means<br>TreeMapis a validSortedMapimplementation, butHashMapis not. You can use all the same methods<br>on aSortedMapas you could on aMap.</p><h2 id="Generic-Structures"><a href="#Generic-Structures" class="headerlink" title="Generic Structures"></a>Generic Structures</h2><p>You should always use generic structures. If you make a mistake in specifying type parameters, the<br>Java compiler may warn you that you have “unchecked or unsafe operations” in your program. If you<br>use jGRASP, you may want to change your settings to see which line the warning refers to. Go to<br>Settings/Compiler Settings/Workspace/Flags/Argsand then uncheck the box next to “Compile”<br>and type in:-Xlint:unchecked</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileGrammarSolverReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p><h1 id="Sample-Execution-1-user-input-underlined"><a href="#Sample-Execution-1-user-input-underlined" class="headerlink" title="Sample Execution #1 (user input underlined)"></a>Sample Execution #1 (user input underlined)</h1><p>Welcome to the cse143 random sentence generator.</p><p>What is the name of the grammar file? sentence.txt</p><p>Available symbols to generate are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)? <det><br>How many do you want me to generate? 5<br>a<br>the<br>the<br>a<br>the</det></verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>Available symbols to generate are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)? <nounp><br>How many do you want me to generate? 5<br>Elmo<br>a green big pretentious green pretentious subliminal university<br>the pretentious cat<br>Jazmin<br>the pretentious subliminal mother</nounp></verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>Available symbols to generate are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)? <sentence><br>How many do you want me to generate? 20<br>a faulty dog laughed<br>Ali helped a wonderful dog<br>Spot collapsed<br>the green father wept<br>Spot laughed<br>Elmo taught Ali<br>the subliminal green man honored Fred<br>a wonderful faulty big father laughed<br>the faulty faulty university taught the faulty dog<br>Elmo helped the green university<br>Hadi helped the pretentious man<br>the pretentious man died<br>Ali laughed<br>the pretentious subliminal child found Hadi<br>Elmo wept<br>a wonderful wonderful faulty child collapsed<br>Spot found the subliminal subliminal pretentious university<br>the green father helped the wonderful cat<br>a faulty television wept<br>the faulty mother laughed</sentence></verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>Available symbols to generate are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)?</verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><h1 id="Sample-Execution-2-user-input-underlined"><a href="#Sample-Execution-2-user-input-underlined" class="headerlink" title="Sample Execution #2 (user input underlined)"></a>Sample Execution #2 (user input underlined)</h1><p>Welcome to the cse143 random sentence generator.</p><p>What is the name of the grammar file? sentence2.txt</p><p>Available symbols to generate are:<br>[E, F1, F2, OP, T]<br>What do you want generated (return to quit)? T<br>How many do you want me to generate? 5<br>42</p><ul><li>y<br>x<br>x<br>( ( 1 ) )</li></ul><p>Available symbols to generate are:<br>[E, F1, F2, OP, T]<br>What do you want generated (return to quit)? E<br>How many do you want me to generate? 10<br>x - 1<br>0<br>sin ( 1 + 92 + - 1 / 42 )<br>max ( y , 92 )<br>42 % 1</p><ul><li>42<br>92<br>1<br>92<br>42 - sin ( 1 )</li></ul><p>Available symbols to generate are:<br>[E, F1, F2, OP, T]<br>What do you want generated (return to quit)?</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A3_Assassin_Manager</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A3-Assassin-Manager.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A3-Assassin-Manager.html</id>
    <published>2023-08-06T01:00:22.000Z</published>
    <updated>2023-08-06T01:01:18.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Create and manipulate a linked list.</li><li>Manipulate linked list nodes in an efficient manner.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Overview-The-Assassin-Game"><a href="#Overview-The-Assassin-Game" class="headerlink" title="Overview: The Assassin Game"></a>Overview: The Assassin Game</h1><p>“Assassin” is a game often played on college campuses. Each person playing has a particular target that<br>he/she is trying to “assassinate.” Generally “assassinating” a person means finding them on campus in<br>public and acting on them in some way (e.g. saying “You’re dead,” squirting them with a water gun, or<br>tagging them). One of the things that makes the game more interesting to play in real life is that initially<br>each person knows only who they are assassinating; they don’t know who is trying to assassinate them,<br>nor do they know whom the other people are trying to assassinate.</p><h2 id="Assassin-Rules"><a href="#Assassin-Rules" class="headerlink" title="Assassin Rules"></a>Assassin Rules</h2><ul><li>You start out with a group of people who want to play the game</li><li>A circular chain of assassination targets (called the “kill ring” in this program) is established.</li><li>When someone is assassinated, the links need to be changed to “skip” that person. That is, the<br>  person who was assassinated passes their target on to the person who assassinated them.</li></ul><h2 id="Example-Game-of-Assassin"><a href="#Example-Game-of-Assassin" class="headerlink" title="Example Game of Assassin"></a>Example Game of Assassin</h2><p>Let’s walk through an example with five people playing: Carol, Chris, Jim, Joe, Sally. We might start<br>with Joe stalking Sally, Sally stalking Jim, Jim stalking Carol, Carol stalking Chris, and Chris stalking<br>Joe. In the actual linked list that implements this kill ring, Chris’s next reference would benull. But,<br>conceptually we can think of it as though the next person after Chris is Joe, the front person in the list.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Note <span class="keyword">the</span> <span class="keyword">last</span></span><br><span class="line">person <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line">list will <span class="keyword">not</span></span><br><span class="line">have <span class="keyword">an</span> ex-</span><br><span class="line">plicit target.</span><br><span class="line">See below <span class="keyword">for</span></span><br><span class="line">information <span class="keyword">and</span></span><br><span class="line">warnings about</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">a</span> circular</span><br><span class="line">list.</span><br></pre></td></tr></table></figure><p>Here is a picture of this “kill ring”:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Joe </span>Sally <span class="keyword">Jim </span>Carol Chris</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">front</span></span><br></pre></td></tr></table></figure><p>Then, suppose Sally assassinates Jim. Sally needs a new target, so we give her Jim’s target: Carol. The<br>kill ring becomes:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Joe Sally Carol Chris</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">front</span></span><br></pre></td></tr></table></figure><p>If the first person in the kill ring is assassinated, the front of the list must adjust. If Chris kills Joe, the<br>list becomes:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Sally Carol Chris</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">front</span></span><br></pre></td></tr></table></figure><h1 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h1><h1 id="Take-home-Assessment-3-AssassinManager-due-J-uly-1-5-2021-11-59-pm"><a href="#Take-home-Assessment-3-AssassinManager-due-J-uly-1-5-2021-11-59-pm" class="headerlink" title="Take-home Assessment 3: AssassinManager due J uly 1 5, 2021 11: 59 pm"></a>Take-home Assessment 3: AssassinManager due J uly 1 5, 2021 11: 59 pm</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sample execution <span class="built_in">log</span></span><br><span class="line">Welcome <span class="built_in">to</span> <span class="keyword">the</span> CSE143 Assassin Manager</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What name file <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">use</span> this <span class="built_in">time</span>? names3.txt</span><br><span class="line"><span class="keyword">Do</span> you want the <span class="keyword">names</span> shuffled? (y/n)? n</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Current <span class="keyword">kill</span> ring:</span><br><span class="line">Athos <span class="keyword">is</span> stalking Porthos</span><br><span class="line">Porthos <span class="keyword">is</span> stalking Aramis</span><br><span class="line">Aramis <span class="keyword">is</span> stalking Athos</span><br><span class="line"><span class="keyword">Current</span> graveyard:</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span> victim? Aramis</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Current <span class="keyword">kill</span> ring:</span><br><span class="line">Athos <span class="keyword">is</span> stalking Porthos</span><br><span class="line">Porthos <span class="keyword">is</span> stalking Athos</span><br><span class="line"><span class="keyword">Current</span> graveyard:</span><br><span class="line">Aramis was killed <span class="keyword">by</span> Porthos</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span> victim? Athos</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Game was won <span class="keyword">by</span> Porthos</span><br><span class="line"><span class="keyword">Final</span> graveyard <span class="keyword">is</span> <span class="keyword">as</span> follows:</span><br><span class="line">Athos was killed <span class="keyword">by</span> Porthos</span><br><span class="line">Aramis was killed <span class="keyword">by</span> Porthos</span><br></pre></td></tr></table></figure><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>In this assessment, you will write a<br>class AssassinManagerthat keeps<br>track of who is stalking whom and<br>the history of who killed whom in<br>games of Assassin. You will main-<br>tain two linked lists:</p><ul><li>a list of people currently alive<br>  (the “kill ring”) and</li><li>a list of those who have<br>  been assassinated (the “grave-<br>  yard”).</li></ul><p>As people are assassinated, you will<br>move them from the kill ring to the<br>graveyard by rearranging links be-<br>tween nodes. The game ends when<br>only one node remains in the kill ring,<br>representing the winner.</p><p>A client program calledAssassinMain<br>has been written for you. It reads a<br>file of names, shuffles the names, and<br>constructs an object of your classAssassinManager. This main program then asks the user for the names<br>of each victim to assassinate until there is just one player left alive (at which point the game is over and<br>the last remaining player wins). AssassinMaincalls methods of theAssassinManagerclass to carry<br>out the tasks involved in administering the game.</p><h1 id="AssassinManager"><a href="#AssassinManager" class="headerlink" title="AssassinManager"></a>AssassinManager</h1><p>To implement your lists, you must use ourAssassinNodeclass provided in Ed without modification. The<br>class is summarized here:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AssassinNode <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssassinNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String name; <span class="comment">// this person's name</span></span><br><span class="line"><span class="keyword">public</span> String killer; <span class="comment">// name of who killed this person (null if alive)</span></span><br><span class="line"><span class="keyword">public</span> AssassinNode next; <span class="comment">// next node in the list</span></span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AssassinNode</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AssassinNode</span><span class="params">(<span class="keyword">String</span> name, AssassinNode next)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You cannot</span><br><span class="line"><span class="keyword">change</span> <span class="keyword">final</span></span><br><span class="line"><span class="keyword">variables</span> <span class="keyword">and</span></span><br><span class="line"><span class="keyword">fields</span>!</span><br></pre></td></tr></table></figure><p>In class section we have been looking at nodes of typeListNode(orIntListNode) that have just two<br>fields: a field calleddataof typeintand a field callednextthat points to the next value in the list. The<br>AssassinNodeclass has three fields. The first two are fields for storing data callednameandkiller<br>(they are used to store the name of a player and the name of the person who assassinated that player).<br>The third field is callednextand it serves the same purpose as the next field in theListNodeclass.</p><h2 id="YourAssassinManagerclass-must-have-exactly-the-following-fields"><a href="#YourAssassinManagerclass-must-have-exactly-the-following-fields" class="headerlink" title="YourAssassinManagerclass must have exactly the following fields:"></a>YourAssassinManagerclass must have exactly the following fields:</h2><ul><li>a reference to the front node of the kill ring</li><li>a reference to the front node of the graveyard (nullif empty)</li></ul><p>Note that a requirement of this assessment is that you have <em>exactly</em> these two fields and <em>no others</em>.</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> <span class="keyword">NOT</span> <span class="keyword">add</span> a</span><br><span class="line"><span class="keyword">size</span> <span class="keyword">field</span>!</span><br></pre></td></tr></table></figure><h2 id="YourAssassinManagerclass-should-have-the-following-constructor"><a href="#YourAssassinManagerclass-should-have-the-following-constructor" class="headerlink" title="YourAssassinManagerclass should have the following constructor:"></a>YourAssassinManagerclass should have the following constructor:</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public AssassinManager (List&lt;String&gt; names)</span><br><span class="line">This constructor should initialize a new assassin manager <span class="keyword">over</span> <span class="keyword">the</span> <span class="keyword">given</span> <span class="built_in">list</span> <span class="keyword">of</span> people. Note <span class="keyword">that</span></span><br><span class="line">you should <span class="keyword">not</span> save <span class="keyword">the</span> <span class="built_in">list</span> parameter itself <span class="keyword">as</span> a field, nor modify <span class="keyword">the</span> <span class="built_in">list</span>. Instead, you should build</span><br><span class="line">your own kill ring <span class="keyword">of</span> <span class="built_in">list</span> nodes <span class="keyword">that</span> <span class="keyword">contains</span> these names <span class="keyword">in</span> <span class="keyword">the</span> same order.</span><br><span class="line">If <span class="keyword">the</span> <span class="built_in">list</span> <span class="keyword">is</span> empty, you should throw anIllegalArgumentException.</span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> <span class="keyword">change</span></span><br><span class="line">the <span class="keyword">list</span> that <span class="keyword">is</span></span><br><span class="line">passed in.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For example, <span class="keyword">if</span> <span class="keyword">the</span> <span class="keyword">given</span> <span class="built_in">list</span> <span class="keyword">contains</span>[<span class="string">"John"</span>, <span class="string">"Sally"</span>, <span class="string">"Fred"</span>], your initial kill ring should</span><br><span class="line">represent <span class="keyword">that</span> John <span class="keyword">is</span> stalking Sally who <span class="keyword">is</span> stalking Fred who <span class="keyword">is</span> stalking John (<span class="keyword">in</span> <span class="keyword">that</span> order). You</span><br><span class="line">may assume <span class="keyword">that</span> <span class="keyword">the</span> names are non-empty, non-null strings <span class="keyword">and</span> <span class="keyword">that</span> there are no duplicates.</span><br></pre></td></tr></table></figure><h2 id="YourAssassinManagerclass-should-also-implement-the-following-methods"><a href="#YourAssassinManagerclass-should-also-implement-the-following-methods" class="headerlink" title="YourAssassinManagerclass should also implement the following methods:"></a>YourAssassinManagerclass should also implement the following methods:</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void printKillRing ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">print</span> <span class="title">the</span> <span class="title">names</span> <span class="title">of</span> <span class="title">the</span> <span class="title">people</span> <span class="title">in</span> <span class="title">the</span> <span class="title">kill</span> <span class="title">ring</span>, <span class="title">one</span> <span class="title">per</span> <span class="title">line</span>, <span class="title">indented</span> <span class="title">by</span> <span class="title">four</span></span></span><br><span class="line"><span class="function"><span class="title">spaces</span>, <span class="title">as</span> “<span class="title">Xis</span> <span class="title">stalkingY</span>”. <span class="title">If</span> <span class="title">the</span> <span class="title">game</span> <span class="title">is</span> <span class="title">over</span>, <span class="title">then</span> <span class="title">instead</span> <span class="title">print</span> “<span class="title">Xis</span> <span class="title">stalkingX</span>”.</span></span><br></pre></td></tr></table></figure><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XandYare</span></span><br><span class="line"><span class="attribute">names of the</span></span><br><span class="line"><span class="attribute">players</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">For example, using the <span class="keyword">kill</span> ring <span class="keyword">from</span> the example game <span class="keyword">on</span> the <span class="keyword">first</span> page <span class="keyword">of</span> this spec, the <span class="keyword">output</span> <span class="keyword">is</span>:</span><br><span class="line">Joe <span class="keyword">is</span> stalking Sally</span><br><span class="line">Sally <span class="keyword">is</span> stalking Jim</span><br><span class="line">Jim <span class="keyword">is</span> stalking Carol</span><br><span class="line">Carol <span class="keyword">is</span> stalking Chris</span><br><span class="line">Chris <span class="keyword">is</span> stalking Joe</span><br><span class="line"><span class="keyword">If</span> the game <span class="keyword">is</span> <span class="keyword">over</span> <span class="keyword">and</span> Chris <span class="keyword">is</span> the winner, so Chris <span class="keyword">is</span> the <span class="keyword">only</span> <span class="keyword">name</span> <span class="keyword">in</span> the <span class="keyword">kill</span> ring, the <span class="keyword">output</span> <span class="keyword">is</span>:</span><br><span class="line">Chris <span class="keyword">is</span> stalking Chris</span><br></pre></td></tr></table></figure><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Indent <span class="keyword">the</span></span><br><span class="line">output <span class="keyword">using</span></span><br><span class="line"><span class="literal">four</span> spaces, <span class="keyword">not</span></span><br><span class="line">tabs!</span><br><span class="line">public void printGraveyard ()</span><br><span class="line">This method should print <span class="keyword">the</span> names <span class="keyword">of</span> <span class="keyword">the</span> people <span class="keyword">in</span> <span class="keyword">the</span> graveyard, <span class="literal">one</span> per <span class="built_in">line</span>, <span class="keyword">with</span> <span class="keyword">each</span> <span class="built_in">line</span></span><br><span class="line">indented <span class="keyword">by</span> <span class="literal">four</span> spaces, <span class="keyword">with</span> output <span class="keyword">of</span> <span class="keyword">the</span> form “Xwas killed byY”. It should print <span class="keyword">the</span> names</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> opposite <span class="keyword">of</span> <span class="keyword">the</span> order <span class="keyword">in</span> which they were assassinated (most recently assassinated <span class="keyword">first</span>, <span class="keyword">then</span></span><br><span class="line">next most recently assassinated, <span class="keyword">and</span> so <span class="keyword">on</span>). <span class="title">It</span> <span class="title">should</span> <span class="title">produce</span> <span class="title">no</span> <span class="title">output</span> <span class="title">if</span> <span class="title">the</span> <span class="title">graveyard</span> <span class="title">is</span> <span class="title">empty</span>.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For example, <span class="keyword">using</span> <span class="keyword">the</span> <span class="built_in">kill</span> ring <span class="built_in">from</span> above, <span class="keyword">if</span> Jim is killed, <span class="keyword">then</span> Chris, <span class="keyword">then</span> Carol, <span class="keyword">the</span> output is:</span><br><span class="line">Carol was killed <span class="keyword">by</span> Sally</span><br><span class="line">Chris was killed <span class="keyword">by</span> Carol</span><br><span class="line">Jim was killed <span class="keyword">by</span> Sally</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean killRingContains (String name)</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returntrueif</span> <span class="title">the</span> <span class="title">given</span> <span class="title">name</span> <span class="title">is</span> <span class="title">in</span> <span class="title">the</span> <span class="title">current</span> <span class="title">kill</span> <span class="title">ring</span> <span class="title">andfalseotherwise</span>.</span></span><br><span class="line"><span class="function"><span class="title">It</span> <span class="title">should</span> <span class="title">ignore</span> <span class="title">case</span> <span class="title">in</span> <span class="title">comparing</span> <span class="title">names</span>;</span> so, “salLY” should match a node <span class="keyword">with</span> a name <span class="keyword">of</span> “Sally”.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean graveyardContains (String name)</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returntrueif</span> <span class="title">the</span> <span class="title">given</span> <span class="title">name</span> <span class="title">is</span> <span class="title">in</span> <span class="title">the</span> <span class="title">current</span> <span class="title">graveyard</span> <span class="title">andfalseotherwise</span>.</span></span><br><span class="line"><span class="function"><span class="title">It</span> <span class="title">should</span> <span class="title">ignore</span> <span class="title">case</span> <span class="title">in</span> <span class="title">comparing</span> <span class="title">names</span>;</span> so, “CaRoL” should match a node <span class="keyword">with</span> a name <span class="keyword">of</span> “Carol”.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean gameOver ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returntrueif</span> <span class="title">the</span> <span class="title">game</span> <span class="title">is</span> <span class="title">over</span> <span class="params">(i.e. the kill ring contains exactly one person)</span></span></span><br><span class="line"><span class="function"><span class="title">andfalseotherwise</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String winner ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">return</span> <span class="title">the</span> <span class="title">name</span> <span class="title">of</span> <span class="title">the</span> <span class="title">winner</span> <span class="title">of</span> <span class="title">the</span> <span class="title">game</span>, <span class="title">ornullif</span> <span class="title">the</span> <span class="title">game</span> <span class="title">is</span> <span class="title">not</span> <span class="title">over</span> <span class="title">yet</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kill</span> <span class="params">(<span class="keyword">String</span> name)</span></span></span><br></pre></td></tr></table></figure><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exceptions</span><br><span class="line">should be</span><br><span class="line">thrown <span class="keyword">as</span> soon</span><br><span class="line">This method should record <span class="keyword">the</span> assassination <span class="keyword">of</span> <span class="keyword">the</span> person <span class="keyword">with</span> <span class="keyword">the</span> given name, transferring <span class="keyword">the</span> <span class="keyword">as</span> possible!</span><br><span class="line">person <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">kill</span> ring <span class="built_in">to</span> <span class="keyword">the</span> front <span class="keyword">of</span> <span class="keyword">the</span> graveyard. This operation should <span class="keyword">not</span> change <span class="keyword">the</span> <span class="built_in">relative</span></span><br><span class="line">order <span class="keyword">of</span> <span class="keyword">the</span> <span class="built_in">kill</span> ring (i.e. <span class="keyword">the</span> links <span class="keyword">of</span> who is stalking whom should stay <span class="keyword">the</span> same other than <span class="keyword">the</span></span><br><span class="line">person who is being killed). This method should ignore <span class="keyword">case</span> <span class="keyword">in</span> comparing names.</span><br><span class="line">A node remembers who killed <span class="keyword">the</span> person <span class="keyword">in</span> its killer field, <span class="keyword">and</span> you must <span class="built_in">set</span> <span class="keyword">the</span> <span class="built_in">value</span> <span class="keyword">of</span> this field.</span><br></pre></td></tr></table></figure><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Try <span class="keyword">to</span> write</span><br><span class="line">simple code,</span><br><span class="line"><span class="keyword">and</span> use inline</span><br><span class="line">comments <span class="keyword">to</span></span><br><span class="line">clarify anything</span><br><span class="line">complex.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Your <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">an</span> <span class="title">IllegalStateException</span> <span class="title">if</span> <span class="title">the</span> <span class="title">game</span> <span class="title">is</span> <span class="title">over</span>, <span class="title">or</span> <span class="title">throw</span> <span class="title">an</span></span></span><br><span class="line"><span class="function"><span class="title">IllegalArgumentExceptionif</span> <span class="title">the</span> <span class="title">given</span> <span class="title">name</span> <span class="title">is</span> <span class="title">not</span> <span class="title">part</span> <span class="title">of</span> <span class="title">the</span> <span class="title">kill</span> <span class="title">ring</span>. <span class="title">If</span> <span class="title">both</span> <span class="title">of</span> <span class="title">these</span> <span class="title">conditions</span></span></span><br><span class="line"><span class="function"><span class="title">are</span> <span class="title">true</span>, <span class="title">theIllegalStateExceptiontakes</span> <span class="title">precedence</span>.</span></span><br></pre></td></tr></table></figure><p>Thekillmethod is the hardest to complete, so we strongly suggest you write it last. Use the jGRASP<br>debugger andprintlnstatements liberally to debug problems in your code. You will likely have a lot of<br>NullPointerExceptionerrors, infinite loops, etc. and will have a very hard time tracking them down<br>unless you are comfortable with debugging techniques.</p><h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Be sure to</span><br><span class="line">remove or com-</span><br><span class="line">ment out any</span><br><span class="line">debugging</span><br><span class="line">printl<span class="keyword">ncalls</span></span><br><span class="line">before you sub-</span><br><span class="line">mit.</span><br></pre></td></tr></table></figure><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><p>The learning objectives for this assessment are explicitly related to manipulating linked lists. To that end,<br>you are limited in how you may implement the operations required forAssassinManager. Specifically,<br>you must adhere to the following rules:</p><ul><li>You may not construct any arrays,ArrayLists,LinkedLists,Stacks,Queues, or other data<br>  structures; you must use instances ofAssassinNodeand manipulate them yourself.</li><li>If there arennames in the list ofStrings passed to your constructor, you must create exactlyn<br>  newAssassinNodeobjects in your constructor. You may not create any additional node objects,<br>  and you may not create node objects in any other methods. In addition, you may not modify the<br>  namefield of nodes after they have been created. As people are assassinated, you will move the<br>  existing node from the kill ring to the graveyard by changing references. You must not create any<br>  new node objects or change thenamefield of the nodes.</li><li>You may declare as many <em>references</em> toAssassinNodeobjects (i.e. local variables of typeAssassinNode<br>  as you like.AssassinNoderefernces are not node objects and therefore do not count against the<br>  limit ofnnodes described above.</li><li>Your constructor should be “efficient” in the sense that it should not use any nested loops to<br>  construct the initial kill ring. (We will learn in class that this is calledO(n)time, wherenis the<br>  number of names in the list.)</li></ul><h1 id="Circular-Lists"><a href="#Circular-Lists" class="headerlink" title="Circular Lists"></a>Circular Lists</h1><p>Some students try to store the kill ring using a “circular” linked list (where the list’s final element stores a<br>next reference back to the front ). It is significantly more difficult to write bug-free code using a circular<br>list. There is no need to use a circular list for this assessment, because you can always get back to the front<br>via the fields of yourAssassinManager. If you feel strongly that you want to use a circular list, you may,<br>but we believe it will make the program significantly more difficult to write, and we strongly discourage<br>it. <em>We will not provide assistance in office hours to help you implement the circular list solution.</em></p><h1 id="jGRASP-Debugger"><a href="#jGRASP-Debugger" class="headerlink" title="jGRASP Debugger"></a>jGRASP Debugger</h1><p>We recommend that you use the jGRASP debugger for this assessment, even if you are primarily working<br>in another IDE or in Ed. The jGRASP debugger has a structure viewer to see what your list looks like by<br>dragging one of your fields from the debug window outside the window. By default the viewer won’t show<br>you the name in each node (it will show a “?” instead). Fix this by clicking the wrench icon, then in<br>the “Value Expressions” box, type:<em>node</em>.name, Click OK, and you should see the names in the nodes.<br>You can also drag the width scrollbar to see the names better.</p><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h2 id="Avoid-Redundancy"><a href="#Avoid-Redundancy" class="headerlink" title="Avoid Redundancy"></a>Avoid Redundancy</h2><h3 id="-8"><a href="#-8" class="headerlink" title=""></a></h3><p>Factor out any<br>redundancy in<br>If you find that multiple methods in your class do similar things, you should create helper method(s) to your methods.<br>capture the common code. All helper methods should be declared asprivate.</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from</p><p>this spec) and should not include implementation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileAssassinManagerReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A2_Guitar_Hero</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A2-Guitar-Hero.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A2-Guitar-Hero.html</id>
    <published>2023-08-05T01:23:22.000Z</published>
    <updated>2023-08-05T01:24:09.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><h2 id="Take-home-Assessment-2-Guitar-Hero"><a href="#Take-home-Assessment-2-Guitar-Hero" class="headerlink" title="Take-home Assessment 2: Guitar Hero"></a>Take-home Assessment 2: Guitar Hero</h2><p><em>many thanks to Kevin Wayne for this nifty assignment</em><br>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Use a queue (via theQueue<e>interface to implement a provided algorithm.</e></li><li>Write a class that implements an existing interface.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><p>There are many support files for this assignment that can be found on the course website. We will be<br>using two utility classes known as StdAudio and StdDraw that are used in the Princeton intro CS course.<br>You don’t have to understand the details of these utility classes, but you can read about themhereif<br>you’re interested.</p><h2 id="Background-Guitars-and-Sound"><a href="#Background-Guitars-and-Sound" class="headerlink" title="Background: Guitars and Sound"></a>Background: Guitars and Sound</h2><p><em>This section describes how guitar strings make sound and how we will represent that in our code to<br>simulate sound. This section will be confusing and you do not need to fully understand the technical<br>details of why this works in order to do the assignment. Later sections have details of how to implement<br>this.</em></p><p>When a guitar string is plucked, the string vibrates and creates sound. The length of the string determines<br>its fundamental frequency of vibration. We model a guitar string by sampling its displacement (a real<br>number between -1/2 and +1/2) at N equally spaced points in time, where N equals the sampling rate<br>(44,100) divided by the fundamental frequency of the string (rounded to the nearest integer). We store<br>these displacement values in a structure that we will refer to as a <strong>ring buffer</strong>.</p><p>Plucking a string moves it and gives it energy. The excitation of the string can contain energy at any<br>frequency. We simulate the excitation by filling the ring buffer with white noise. In other words, we set<br>each of the N sample displacements to a random real number between -1/2 and +1/2.</p><h3 id="Simulating-Sound"><a href="#Simulating-Sound" class="headerlink" title="Simulating Sound"></a>Simulating Sound</h3><p>After the string is plucked, the string vibrates. The pluck causes a displacement which spreads wave-like<br>over time. The <em>Karplus-Strong algorithm</em> simulates this vibration by maintaining a ring buffer of the N<br>samples: for each step the algorithm deletes the first sample from the ring buffer and adds to the end<br>of the ring buffer the average of the first two samples, scaled by an energy decay factor of 0.996. More<br>details on why this simulates sound are at the end of the spec.</p><h2 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h2><h1 id="due-Ju-l-y-8-2021-11-59-pm"><a href="#due-Ju-l-y-8-2021-11-59-pm" class="headerlink" title="due Ju l y 8 , 2021 11: 59 pm"></a>due Ju l y 8 , 2021 11: 59 pm</h1><h2 id="Part-1-GuitarStringclass"><a href="#Part-1-GuitarStringclass" class="headerlink" title="Part 1: GuitarStringclass"></a>Part 1: GuitarStringclass</h2><p>In the first part of the assignment, you will implement a class calledGuitarStringthat models a vibrating<br>guitar string of a given frequency. TheGuitarStringobject will need to keep track of a ring buffer.<br>You are to implement the ring buffer as a queue using theQueue<e>interface and theLinkedList<e><br>implementation. For this assignment, you are limited to theQueue<e>methods in thesection materials<br>and slide 16 of the stack/queueslides(add, remove,isEmpty,size, andpeek). You are not allowed<br>to use other data structures or otherQueue<e>methods to solve this problem.</e></e></e></e></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">You must</span><br><span class="line">not <span class="keyword">use</span> <span class="built_in">any</span></span><br><span class="line">Queue&lt;E&gt;meth-</span><br><span class="line">ods not listed</span><br><span class="line">here.</span><br></pre></td></tr></table></figure><h3 id="YourGuitarStringclass-should-include-the-following-constructors"><a href="#YourGuitarStringclass-should-include-the-following-constructors" class="headerlink" title="YourGuitarStringclass should include the following constructors:"></a>YourGuitarStringclass should include the following constructors:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public GuitarString (double frequency)</span><br><span class="line">Constructs aGuitarStringof <span class="keyword">the</span> given frequency. It creates <span class="keyword">a</span> ring buffer <span class="keyword">of</span> <span class="keyword">the</span> desired capacity</span><br><span class="line">N (sampling rate divided <span class="keyword">by</span> frequency, rounded <span class="built_in">to</span> <span class="keyword">the</span> nearest <span class="keyword">integer</span>), <span class="keyword">and</span> initializes <span class="keyword">it</span> <span class="built_in">to</span> represent</span><br><span class="line"><span class="keyword">a</span> guitar <span class="keyword">string</span> <span class="keyword">at</span> rest <span class="keyword">by</span> enqueueing N zeros. The sampling rate is specified <span class="keyword">by</span> <span class="keyword">the</span> <span class="built_in">constant</span></span><br><span class="line">StdAudio.SAMPLE_RATE. If <span class="keyword">the</span> frequency is less than <span class="keyword">or</span> equal <span class="built_in">to</span> <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">if</span> <span class="keyword">the</span> resulting size <span class="keyword">of</span> <span class="keyword">the</span></span><br><span class="line">ring buffer would be less than <span class="number">2</span>, your method should throw anIllegalArgumentException</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GuitarString (double[] init)</span><br><span class="line">Constructs a GuitarString <span class="keyword">and</span> initializes the contents <span class="keyword">of</span> the ring buffer <span class="keyword">to</span> the values <span class="keyword">in</span></span><br><span class="line">the <span class="keyword">array</span>. <span class="keyword">If</span> the <span class="keyword">array</span> <span class="keyword">has</span> fewer than two elements, your <span class="function"><span class="keyword">constructor</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">an</span></span></span><br><span class="line"><span class="function"><span class="title">IllegalArgumentException</span>. <span class="title">This</span> <span class="title">constructor</span> <span class="title">is</span> <span class="title">used</span> <span class="title">only</span> <span class="title">for</span> <span class="title">testing</span> <span class="title">purposes</span>.</span></span><br></pre></td></tr></table></figure><h3 id="YourGuitarStringclass-should-also-implement-the-following-public-methods"><a href="#YourGuitarStringclass-should-also-implement-the-following-public-methods" class="headerlink" title="YourGuitarStringclass should also implement the following public methods:"></a>YourGuitarStringclass should also implement the following public methods:</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void pluck ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">replace</span> <span class="title">the</span> <span class="title">N</span> <span class="title">elements</span> <span class="title">in</span> <span class="title">the</span> <span class="title">ring</span> <span class="title">buffer</span> <span class="title">with</span> <span class="title">N</span> <span class="title">random</span> <span class="title">values</span> <span class="title">between</span> -0.</span></span><br><span class="line"><span class="function"><span class="title">inclusive</span> <span class="title">and</span> +0.5 <span class="title">exclusive</span> <span class="params">(i.e.− 0. 5 ≤value&lt; 0. 5 )</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void tic ()</span><br><span class="line">This method should apply <span class="keyword">the</span> Karplus-Strong update once (performing <span class="literal">one</span> step). It should <span class="built_in">delete</span></span><br><span class="line"><span class="keyword">the</span> sample <span class="keyword">at</span> <span class="keyword">the</span> front <span class="keyword">of</span> <span class="keyword">the</span> ring buffer <span class="keyword">and</span> <span class="built_in">add</span> <span class="built_in">to</span> <span class="keyword">the</span> <span class="function"><span class="keyword">end</span> <span class="title">of</span> <span class="title">the</span> <span class="title">ring</span> <span class="title">buffer</span> <span class="title">the</span> <span class="title">average</span> <span class="title">of</span> <span class="title">the</span></span></span><br><span class="line"><span class="keyword">first</span> <span class="literal">two</span> samples, multiplied <span class="keyword">by</span> <span class="keyword">the</span> energy decay factor (<span class="number">0.996</span>).</span><br><span class="line">Your class should <span class="built_in">include</span> <span class="keyword">a</span> public <span class="built_in">constant</span> <span class="keyword">for</span> <span class="keyword">the</span> energy decay factor.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> double sample ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">return</span> <span class="title">the</span> <span class="title">current</span> <span class="title">sample</span> <span class="params">(the value at the front <span class="keyword">of</span> the ring buffer)</span>.</span></span><br></pre></td></tr></table></figure><h3 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h3><ul><li>You will need to use theMath.roundmethod and cast the result to anintto find the size of<br>  the buffer in the constructor that takes a singledoubleparameter. You can use the following<br>  expression:</li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">int</span></span>)(<span class="name">Math.round</span>(<span class="name">StdAudio.SAMPLE_RATE</span> / frequency))</span><br></pre></td></tr></table></figure><ul><li>It is difficult in commenting theGuitarStringclass to know what constitutes an implementation<br>  detail and what is okay to discuss in client comments. Assume that a client of theGuitarString<br>  class is familiar with the concept of a ring buffer. The fact that we are implementing it as a queue<br>  is an implementation detail. So don’t mention how you implement the ring buffer. But you can</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">discuss <span class="keyword">the</span> ring buffer itself <span class="keyword">and</span> <span class="keyword">the</span> changes that your methods make <span class="built_in">to</span> <span class="keyword">the</span> state <span class="keyword">of</span> <span class="keyword">the</span> ring buffer</span><br><span class="line">(e.g., moving values <span class="built_in">from</span> <span class="keyword">the</span> front <span class="built_in">to</span> <span class="keyword">the</span> back <span class="keyword">of</span> <span class="keyword">the</span> ring buffer). You may also assume that <span class="keyword">the</span></span><br><span class="line">client is familiar <span class="keyword">with</span> <span class="keyword">the</span> Karplus-Strong algorithm.</span><br></pre></td></tr></table></figure><ul><li>At this point, you can also runGuitarHerousingGuitarLiteand you should hear sound on your<br>  computer! (You will not be able to play sound in Ed, but you can download the files and run them<br>  in jGRASP.) The guitars are explained in the next section.</li></ul><h2 id="Interlude-Guitar-andGuitarHero"><a href="#Interlude-Guitar-andGuitarHero" class="headerlink" title="Interlude: Guitar andGuitarHero"></a>Interlude: Guitar andGuitarHero</h2><p><em>This part of the assignment does not involve writing any code! This part describes the important<br>supporting files and how to run the program.</em></p><p>In the next part of the assignment, you are going to build on theGuitarStringclass to write a class that<br>keeps track of a musical instrument with multiple strings. There could be many possible guitar objects<br>with different kinds of strings. As a result, we introduce an interface known asGuitarthat each guitar<br>object implements.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Guitar <span class="class"><span class="keyword">interface</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">Guitar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playNote</span><span class="params">(<span class="keyword">int</span> pitch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasString</span><span class="params">(<span class="keyword">char</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pluck</span><span class="params">(<span class="keyword">char</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sample</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">time</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The<span class="built_in"> interface </span>allows a<span class="built_in"> client </span><span class="keyword">to</span> specify what <span class="keyword">to</span> play <span class="keyword">in</span></span><br><span class="line">one of two ways. A<span class="built_in"> client </span>can specify exactly which</span><br><span class="line">note <span class="keyword">to</span> play by calling theplayNotemethod passing it</span><br><span class="line">a pitch. Pitch is specified as an integer where the value</span><br><span class="line">0 represents concert-A <span class="keyword">and</span> all other notes are specified</span><br><span class="line">relative <span class="keyword">to</span> concert-A using what is known as a chromatic</span><br><span class="line">scale. <span class="keyword">Not</span> every value of pitch can be played by any</span><br><span class="line">given guitar. <span class="keyword">If</span> it can’t be played, it is ignored.</span><br></pre></td></tr></table></figure><p>Additionally, a client can also specify a character that indicates which note to play by calling thepluck<br>method. Different guitar objects will have different mappings from characters to notes. The interface<br>includes a method calledhasStringthat is paired with pluck that lets a client verify that a particular<br>character has a corresponding string for this guitar. Thepluckmethod has a precondition that the key<br>is legal for this guitar.</p><p>TheGuitarinterface also has methods for getting the current sound sample (the sum of all samples<br>from the strings of the guitar), to advance the time forward one “tic”, and determining the current time<br>(the number of timestichas been called).</p><p>We provide a sample class calledGuitarLitethat implements theGuitarinterface. Once you have veri-<br>fied that yourGuitarStringclass passes the testing program, you can play theGuitarLiteinstrument.<br>It has only two strings: “a” and “c”.</p><p>To test your guitar, we provide a separate client class calledGuitarHerothat has amainmethod (the<br>initial version constructs aGuitarLiteobject).GuitarLitedoes not have a main method.</p><h2 id="Part-2-The-Guitar37-class"><a href="#Part-2-The-Guitar37-class" class="headerlink" title="Part 2: The Guitar37 class"></a>Part 2: The Guitar37 class</h2><p>In this second part of the assignment, your task is to write a different implementation of theGuitar<br>interface known asGuitar37. It will model a guitar with 37 different strings. UnlikeGuitarLitewhich<br>has a separate field for each of its strings, you will want to use a data structure, specifically an array, to<br>keep track of the strings inGuitar37.</p><h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h3><p>TheGuitar37class has a total of 37 notes on the chromatic scale from 110Hz to 880Hz. We will use<br>the following string to map keys typed by the user to positions in your array of strings. The i-th character<br>of this string should correspond to the i-th character of your array:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"q2we4r5ty7u8i9op-[=zxdcfvgbnjmk,.;/'"</span></span><br></pre></td></tr></table></figure><p>This use of keyboard characters imitates a piano keyboard, making playing songs a little easier for people<br>used to a piano keyboard. The white keys are on the qwerty and zxcv rows and the black keys on the<br>12345 and asdf rows of the keyboard, as in the drawing below.</p><p>You are being provided a skeleton version of theGuitar37class that includes this string defined as a<br>constant calledKEYBOARD. The i-th character of the string corresponds to a frequency of 440 × 2 (i−24)/^12 ,<br>so that the character “q” is 110Hz, “i” is 220Hz, “v” is 440Hz, and “ ” (space) is 880Hz.</p><p>As noted above, a pitch of 0 is supposed to correspond to concert-A, which will be at index 24 for the<br>Guitar37object (corresponding to the character “v”). Thus, you can convert from a pitch value to<br>an index in your string by adding 24 to the pitch value. The table below shows some examples of this<br>conversion.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Key Pitch</span><br><span class="line">“q” -</span><br><span class="line">“<span class="number">2</span>” -</span><br><span class="line">“w” -</span><br><span class="line">“e” -</span><br><span class="line">... ...</span><br><span class="line">“v” <span class="number">0</span></span><br><span class="line">... ...</span><br><span class="line">“/” <span class="number">10</span></span><br><span class="line">“’” <span class="number">11</span></span><br><span class="line">“ ” <span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="Implementation-Guidelines-1"><a href="#Implementation-Guidelines-1" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h3><ul><li>In working on this second part of the assignment, you are generalizing the code that you will find<br>  inGuitarLite. Because that instrument has just two strings, it uses two separate fields. Your<br>  instrument has 37 strings, so it uses an array of strings. Each of the operations defined in the<br>  interface needs to be generalized from using two specific strings to using an array of strings. For<br>  example, the sample method returns the sum of the current samples. GuitarLitedoes this by<br>  adding together two numbers. Your version will have to use a loop to find the sum of all 37 samples.</li><li>TheGuitarLiteclass is not well documented, it does not handle illegal keys, and it does not<br>  correctly implement thetimemethod. YourGuitar37class should include complete comments.</li><li>Thepluckmethod should throw anIllegalArgumentExceptionif the key is not one of the 37<br>  keys it is designed to play (as noted above, this differs from theplayNotemethod that simply<br>  ignores notes it cant play).</li></ul><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Recall that</span><br><span class="line">Strings have</span><br><span class="line">anindexOf</span><br><span class="line"><span class="function"><span class="keyword">method</span> <span class="title">that</span></span></span><br><span class="line"><span class="function"><span class="title">you</span> <span class="title">might</span> <span class="title">find</span></span></span><br><span class="line"><span class="function"><span class="title">helpful</span>!</span></span><br></pre></td></tr></table></figure><ul><li>You will be given a testing program forGuitar37as well calledTest37. <strong>This testing code should</strong><br>  <strong>be stored in a separate directory from your solution because it includes a custom version</strong><br>  <strong>of theGuitarStringclass and you don’t want to accidentally overwrite your version of the</strong><br>  <strong>class.</strong> You should copy yourGuitar37class to this folder, run it, and then compare against the<br>  sample output produced using the output comparison tool.</li><li>Once you are done, you can changeGuitarHeroto useGuitar37instead ofGuitarLiteso you<br>  can play the full instrument on your computer! (Ed cannot produce sound, so you’ll need to run<br>  your code in jGRASP to try this.)</li></ul><h2 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h2><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h3 id="Generic-Structures-and-Interfaces"><a href="#Generic-Structures-and-Interfaces" class="headerlink" title="Generic Structures and Interfaces"></a>Generic Structures and Interfaces</h3><p>You should always use generic structures. If you make a mistake in specifying type parameters, the Java<br>compiler may warn you that you have “unchecked or unsafe operations” in your program. You should<br>also declare fields and variables using the appropriate interfaces when possible. When usingQueue’s in<br>143, you should only use the methods described in class.</p><h3 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h3><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h3 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h3><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h2 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h2><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h2 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h2><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h2 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h2><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>In addition to your code, you must submit answers to short reflection questions. These questions will help<br>you think about what you learned, what you struggled with, and how you can improve next time. The<br>questions are given in the fileGuitarHeroReflection.txtin the Ed assessment; type your responses<br>directly into that file.</p><h2 id="Optional-Why-This-Assignment-Works"><a href="#Optional-Why-This-Assignment-Works" class="headerlink" title="(Optional) Why This Assignment Works"></a>(Optional) Why This Assignment Works</h2><p>The two primary components that make the Karplus-Strong algorithm work are the ring buffer feedback<br>mechanism and the averaging operation.</p><ul><li>The ring buffer feedback mechanism: The ring buffer models the medium (a string tied down at<br>  both ends) in which the energy travels back and forth. The length of the ring buffer determines the<br>  fundamental frequency of the resulting sound. Sonically, the feedback mechanism reinforces only<br>  the fundamental frequency and its harmonics (frequencies at integer multiples of the fundamental).<br>  The energy decay factor (.996 in this case) models the slight dissipation in energy as the wave<br>  makes a round trip through the string.</li><li>The averaging operation: The averaging operation serves as a gentle low pass filter (which removes<br>  higher frequencies while allowing lower frequencies to pass, hence the name). Because it is in the<br>  path of the feedback, this has the effect of gradually attenuating the higher harmonics while keeping<br>  the lower ones, which corresponds closely with how actually plucked strings sound.</li></ul>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A1_Lettter_Inventory</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A1-Lettter-Inventory.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A1-Lettter-Inventory.html</id>
    <published>2023-08-04T01:25:25.000Z</published>
    <updated>2023-08-04T01:26:56.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Maintain proper abstraction between the client and implementation of a class.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>In this assessment, you will implement a class calledLetterInventorythat can be used to keep track<br>of an inventory of letters of the English alphabet. The constructor for the class will take aStringas<br>a parameter and compute how many of each letter are in thatString(i.e. how many a’s, how many<br>b’s, etc.). LetterInventoryignores any character that is not an English letter (such as punctuation or<br>digits) and treats upper- and lowercase letters as the same.</p><h2 id="YourLetterInventoryclass-should-include-the-following-constructor"><a href="#YourLetterInventoryclass-should-include-the-following-constructor" class="headerlink" title="YourLetterInventoryclass should include the following constructor:"></a>YourLetterInventoryclass should include the following constructor:</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public LetterInventory (String data)</span><br><span class="line">Constructs <span class="keyword">an</span> inventory (<span class="keyword">a</span> count) <span class="keyword">of</span> <span class="keyword">the</span> alphabetic letters <span class="keyword">in</span> <span class="keyword">the</span> given <span class="keyword">string</span>, ignoring <span class="keyword">the</span> <span class="keyword">case</span> <span class="keyword">of</span></span><br><span class="line">letters <span class="keyword">and</span> ignoring <span class="keyword">any</span> non-alphabetic <span class="keyword">characters</span>.</span><br></pre></td></tr></table></figure><h2 id="Your-class-should-also-include-the-following-public-methods-"><a href="#Your-class-should-also-include-the-following-public-methods-" class="headerlink" title="Your class should also include the following public methods: "></a>Your class should also include the following public methods: </h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">You must <span class="keyword">in</span>-</span><br><span class="line">clude exactly</span><br><span class="line">these <span class="function"><span class="keyword">method</span></span></span><br><span class="line"><span class="function"><span class="title">headers</span>—<span class="title">do</span></span></span><br><span class="line"><span class="function"><span class="title">not</span> <span class="title">add</span> <span class="title">or</span></span></span><br><span class="line"><span class="function"><span class="title">remove</span> <span class="title">parame</span>-</span></span><br><span class="line"><span class="function"><span class="title">ters</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int get (char letter)</span><br><span class="line">Returns a count <span class="keyword">of</span> how many <span class="keyword">of</span> this letter (<span class="keyword">case</span>-insensitive) are <span class="keyword">in</span> the inventory. <span class="keyword">If</span> a nonalphabetic</span><br><span class="line">character <span class="keyword">is</span> passed, your <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">anIllegalArgumentException</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span> (char letter, int value)</span><br><span class="line">Sets the count <span class="keyword">for</span> the given letter (<span class="keyword">case</span>-insensitive) <span class="keyword">to</span> the given value. <span class="keyword">If</span> a nonalphabetic character</span><br><span class="line"><span class="keyword">is</span> passed <span class="keyword">or</span> ifvalueis negative, your <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">anIllegalArgumentException</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int size ()</span><br><span class="line">Returns <span class="keyword">the</span> <span class="built_in">sum</span> <span class="keyword">of</span> all <span class="keyword">of</span> <span class="keyword">the</span> counts <span class="keyword">in</span> this inventory. This operation should be <span class="string">"fast"</span> <span class="keyword">in</span> that <span class="keyword">it</span></span><br><span class="line">should store <span class="keyword">the</span> size rather than having <span class="built_in">to</span> compute <span class="keyword">it</span> <span class="keyword">each</span> <span class="built_in">time</span> this method is called.</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isEmpty ()</span><br><span class="line">Returnstrueif <span class="keyword">this</span> inventory <span class="keyword">is</span> empty (i.e. all counts are <span class="number">0</span>). This operation should be <span class="string">"fast"</span> <span class="keyword">in</span></span><br><span class="line"><span class="literal">that</span> <span class="literal">it</span> should <span class="keyword">not</span> need <span class="keyword">to</span> examine each <span class="keyword">of</span> the <span class="number">26</span> counts <span class="keyword">when</span> <span class="literal">it</span> <span class="keyword">is</span> called.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public String toString ()</span><br><span class="line">Returns <span class="keyword">a</span> <span class="keyword">string</span> representation <span class="keyword">of</span> <span class="keyword">the</span> inventory <span class="keyword">with</span> <span class="keyword">the</span> letters all <span class="keyword">in</span> lowercase <span class="keyword">and</span> <span class="keyword">in</span> sorted order</span><br><span class="line"><span class="keyword">and</span> surrounded <span class="keyword">by</span> square brackets. The <span class="built_in">number</span> <span class="keyword">of</span> occurrences <span class="keyword">of</span> <span class="keyword">each</span> letter should match its</span><br><span class="line">count <span class="keyword">in</span> <span class="keyword">the</span> inventory. For example, <span class="keyword">an</span> inventory <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">as</span>, <span class="number">1</span> b, <span class="number">1</span> l <span class="keyword">and</span> <span class="number">1</span> m would be represented <span class="keyword">as</span></span><br><span class="line"><span class="string">"[aaaablm]"</span>.</span><br></pre></td></tr></table></figure><h1 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h1><h1 id="Take-home-Assessment-1-Letter-Inventory-due-J-uly-1-2021-11-59-pm"><a href="#Take-home-Assessment-1-Letter-Inventory-due-J-uly-1-2021-11-59-pm" class="headerlink" title="Take-home Assessment 1: Letter Inventory due J uly 1 , 2021 11: 59 pm"></a>Take-home Assessment 1: Letter Inventory due J uly 1 , 2021 11: 59 pm</h1><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LetterInventory <span class="keyword">add</span> (LetterInventory other)</span><br><span class="line">Constructs <span class="keyword">and</span> returns a <span class="keyword">new</span> LetterInventory object that represents the sum <span class="keyword">of</span> this</span><br><span class="line">LetterInventoryand the other givenLetterInventory. The counts <span class="keyword">for</span> <span class="keyword">each</span> letter should be</span><br><span class="line">added together. The twoLetterInventoryobjects being added together (thisandother) should</span><br><span class="line"><span class="keyword">not</span> be changed <span class="keyword">by</span> this <span class="function"><span class="keyword">method</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LetterInventory subtract (LetterInventory other)</span><br><span class="line">Constructs <span class="keyword">and</span> returns a newLetterInventoryobject that represents the <span class="keyword">result</span> <span class="keyword">of</span> subtracting</span><br><span class="line">the other inventory <span class="keyword">from</span> this inventory (i.e. subtracting the counts <span class="keyword">in</span> the other inventory <span class="keyword">from</span> this</span><br><span class="line">objects counts). <span class="keyword">If</span> any resulting count would be negative, this <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returnnull</span>. <span class="title">The</span></span></span><br><span class="line"><span class="function"><span class="title">twoLetterInventoryobjects</span> <span class="title">being</span> <span class="title">subtracted</span> <span class="params">(thisandother)</span> <span class="title">should</span> <span class="title">not</span> <span class="title">be</span> <span class="title">changed</span> <span class="title">by</span> <span class="title">this</span></span></span><br><span class="line"><span class="function"><span class="title">method</span>.</span></span><br></pre></td></tr></table></figure><p>You may also include any additional private helper methods you think will be helpful.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Make sure any</span><br><span class="line"><span class="keyword">helper</span> methods</span><br><span class="line">are declared</span><br><span class="line"><span class="keyword">private</span>.</span><br></pre></td></tr></table></figure><p>As an example, the add method could be called as follows:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LetterInventory inventory1 = <span class="keyword">new</span> <span class="type">LetterInventory</span>(<span class="string">"Sherlock Holmes"</span>);</span><br><span class="line">LetterInventory inventory2 = <span class="keyword">new</span> <span class="type">LetterInventory</span>(<span class="string">"Dr. John Watson"</span>);</span><br><span class="line">LetterInventory sum = inventory1.add(inventory2);</span><br></pre></td></tr></table></figure><p>Here, inventory1would contain[ceehhkllmoorss],inventory2would contain[adhjnnoorstw],<br>andsumwould contain[acdeehhhjkllmnnoooorrssstw].</p><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><p>You should implement this class with an array of 26 counters (one for each letter) along with any other<br>data fields you find that you need. Remember, though, that we want to minimize the number of data<br>fields when possible.</p><p>Your class should avoid unnecessary inefficiencies. For example, you might be tempted to implement the<br>addmethod by calling thetoStringmethod or otherwise building aStringto pass to theLetterInventory<br>constructor. But this approach would be inefficient for inventories with large character counts.</p><p>You should introduce a class constant for the value 26 to improve readability.</p><h2 id="Character-operations"><a href="#Character-operations" class="headerlink" title="Character operations"></a>Character operations</h2><p>It will be helpful to understand certain deatils of thechardatatype for this assessment. Many of these<br>details are explained in section 4.3 of the textbook.</p><p>Values of typecharhave corresponding integer values. There is a character with value 0, a character<br>with value 1, a character with value 2 and so on. You can compare different values of typecharusing<br>less-than and greater-than tests, as in:</p><p>if (ch &gt;= ‘a’) …</p><p>All of the lowercase letters appear grouped together in typechar(i.e.’a’is followed by’b’followed by<br>’c’, and so on). All of the uppercase letters appear grouped together similarly. Because of this, you can<br>compute a letter’s “displacement” (or distance) from the letter’a’with an expression like the following<br>(this expression assumes the variableletteris of typecharand stores a lowercase letter):</p><p>letter -‘a’</p><p>Going in the other direction, if you know a characters integer equivalent, you can cast the result tochar<br>to get the character. For example, suppose that you want to get the letter that is 8 away from’a’. You<br>could do this as follows:</p><p>char result = (char) (‘a’+ 8);</p><p>This would assign the variableresultthe value’i’. As in these examples, you should write your code<br>in terms of displacement from a fixed letter like’a’rather than finding and including the specific integer<br>value (e.g. 97) of a character like’a’.</p><h1 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h1><p>Thought it may not seem like it, theArrayIntListexample from lecture provides a good model to use for<br>implementingLetterInventory. Pay particular attention to the use of fields, avoiding reimplementation<br>of common functionality, throwing exceptions in error conditions, and documentation/comments.</p><h2 id="String-and-Character"><a href="#String-and-Character" class="headerlink" title="String and Character"></a>String and Character</h2><p>You will likely want to look at the JavaStringandCharacterclasses for useful methods. (For example,<br>there is atoLowerCasemethod in each.) You will have to pay attention to whether each method is static<br>or not. TheStringmethods are mostly instance methods because strings are objects. TheCharacter<br>methods are all static becausecharis a primitive type. For example, if you have a variable calledsthat<br>is aString, you can turn it to all lowercase as follows:</p><p>s = s.toLowerCase();</p><p>This is a call to an instance method on an object, so you put the name of the object variable before the<br>dot. Butcharvalues are <em>not</em> objects and thetoLowerCasemethod in theCharacterclass is a static<br>method. So if you have a variable calledchthat is of typechar, you would turn it to all lowercase as<br>follows:</p><p>ch = Character.toLowerCase(ch);</p><h1 id="Development-Strategy"><a href="#Development-Strategy" class="headerlink" title="Development Strategy"></a>Development Strategy</h1><p>One of the most important techniques for programmers is to develop code in stages rather than trying to<br>write it all at once. (The technical term for this is “iterative enhancement” or “stepwise refinement.”) It<br>is also important to be able to test the correctness of your solution at each different stage.</p><p>We suggest that you work on your assessment in three stages:<br>(a) First, work on constructing aLetterInventoryand examining its contents. We will implement the<br>constructor, thesizemethod, theisEmptymethod, thegetmethod, and thetoStringmethod.<br>Even within this stage, you should develop the methods slowly. First work on the constructor and<br>sizemethods. Then add theisEmptymethod, then thegetmethod, then thetoStringmethod.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(b) Next, <span class="builtin-name">add</span> thesetmethod <span class="keyword">to</span> the class that allows the<span class="built_in"> client </span><span class="keyword">to</span> change the number of occurrences</span><br><span class="line">of an individual letter.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(c) Finally, include theaddandsubtractmethods. We recommend writing theaddmethod <span class="keyword">first</span> <span class="keyword">and</span></span><br><span class="line">making sure <span class="keyword">it</span> works, <span class="keyword">then</span> moving <span class="keyword">on</span> <span class="keyword">to</span> thesubtractmethod.</span><br></pre></td></tr></table></figure><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the desired behavior, your code should be well-written and meet all expectations<br>described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this assessment,<br>pay particular attention to the following elements:</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileLetterInventoryReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1301_Project4_Interactive_Fiction</title>
    <link href="cplusplusdaixie.com/CSCI1301-Project4-Interactive-Fiction.html"/>
    <id>cplusplusdaixie.com/CSCI1301-Project4-Interactive-Fiction.html</id>
    <published>2023-08-02T02:11:30.000Z</published>
    <updated>2023-08-02T02:12:39.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI-1301-Introduction-to-Computing-and-Programming"><a href="#CSCI-1301-Introduction-to-Computing-and-Programming" class="headerlink" title="CSCI 1301: Introduction to Computing and Programming"></a><strong>CSCI 1301: Introduction to Computing and Programming</strong></h3><p><strong>Project 4: Interactive Fiction</strong></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Once upon a time, before the dawn of the Internet as we know it, there lived a forgotten type of<br>computer game called interactive fiction. First written in the late ‘70s, these games were sort of a<br>choose-your-own adventure book, but for geeks. These games contain no graphics, just a 2nd<br>person (everybody remembers English class, right?) description of your character, and a box for<br>entering commands. With the birth of the kindle and other Internet enabled e-readers, these<br>games are experiencing something of a rebirth, as their screens are a perfect match for these<br>games.</p><p>Photo from: <a href="http://www.indieretronews.com/2018/01/the-pawn-classic-text-adventure-by.html" target="_blank" rel="noopener">http://www.indieretronews.com/2018/01/the-pawn-classic-text-adventure-by.html</a></p><p>To play one for yourself, go to <a href="https://eblong.com/zarf/zweb/dreamhold/" target="_blank" rel="noopener">https://eblong.com/zarf/zweb/dreamhold/</a></p><p>Your project is to create an interactive fiction. In this game, you will navigate a map (moving<br>east, west, north, south when possible). In each “room” of the map, the game will print a<br>description of the room to the screen. As you navigate through the map, you will be looking for<br>a light to light up the dark rooms, a key to open a treasure chest, and a chest (that contains the</p><p>treasure!). Once you have found the key, you can open the chest. While going through the map,<br>you must watch out for the deadly grue! To help you get started on the game, a couple of classes<br>have been written for you. You only need to make the guts of the game, called the engine. You<br>will find Map.java, Room.java, Lamp.java, Key.java, and Chest.java on the course website.<br>Some of these classes are completely finished and others are just skeletons (containing<br>comments and method signatures).</p><p>Begin by taking a quick a look at the Map class, which is completely implemented for you ( <strong>do<br>not modify the Map class, just know how to use it</strong> ). In this game, a map is a square of size<br>NxN where each cell contains a room. Each room contains a description of the room and<br>possibly a few other items. You call the getRoom(X,Y) to retrieve the Room object for a given<br>square. The first number (X) gives the row and the second (Y) gives the column. The starting<br>room is at (0,0).</p><p>To the right is a picture of a general map.<br>Note that the map can be of any size. To<br>clarify the X and Y positions, we have<br>marked the map at position (2,1) with an<br>O. In this cell, we would say that the X<br>value is 2 and the Y value is 1.</p><p>While debugging your code, you can run the program in “simple map” mode where the map<br>contains only a single room (see below). This is useful in debugging because no one wants to<br>walk through a huge map only to find that the final command doesn’t work. When you have<br>tested your code and want to play the entire game, set the simpleMap variable to false for a<br>larger map. The larger map we have provided is of size 4x4.</p><p>Illustration of Map when simpleMap = true</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span>X</span><br></pre></td></tr></table></figure><p>Now take a look at the Room class. This class is implemented for you as well. It contains a large<br>number of methods for you to use during the game. As you can see, there are no setters, only<br>getters. This means that for the most part you cannot modify any Room objects you receive. The<br>exceptions are the clearKey() and clearLamp() methods that modify two of the room’s sub<br>objects. Note: these methods allow you to modify a Room object. <strong>You should never modify the<br>Room.java code</strong>. You’ll see down below when you need to call these methods. If a room does<br>not have a specific sub-object (key, lamp), its variable will be set to null. You will need to test<br>for this condition to see if a room has a sub-object or not. <em>The description of the interface for this<br>class is given at the end of this pdf.</em></p><p>Now, take a look at the Key class, it is written for you. <strong>You do NOT need to update anything<br>in the Key.java file.</strong> The Key class only has one method: public void use(Chest onChest).<br>Calling this method simply calls the unlock method on the given chest. <em>The description of the</em></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> ... n</span><br><span class="line"><span class="number">0</span> X</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> O</span><br><span class="line">...</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p><em>interface for this class is given at the end of this pdf.</em></p><h1 id="Program-Requirements-–-General-Algorithm"><a href="#Program-Requirements-–-General-Algorithm" class="headerlink" title="Program Requirements – General Algorithm"></a>Program Requirements – General Algorithm</h1><p>You should <strong>NOT modify</strong> <strong><em>Room.java</em></strong> <strong>or</strong> <strong><em>Map.java or Key.java</em></strong> to get your game working. Your<br>project will be tested with our own versions of these two files, so any modifications you make<br>could result in your project not compiling or not working correctly.<br>Also – <strong>you should never create new Key or new Chest objects. This is done already in the<br>preexisting code. So, if you add the words “new Key()” or “new Chest()”, you will have<br>logical errors in your code.</strong></p><ol><li>You should start your work by implementing the Chest class (a skeleton is provided for<br> you). It needs to store whether it is locked or not, a String describing the contents, and<br> which key it was locked with. The method stubs for this class are provided with<br> comments, be sure to implement them the way they are described. You should not add<br> any more methods to this class.</li><li>Next, implement the Lamp class (the class definition is provided for you), it only needs to<br> store whether it is lit or not. Follow the rules of encapsulation/information hiding, and<br> prevent any other class from accessing or modifying your instance variables directly.</li><li>Then, create a player class in a file called <strong>Player.java</strong>. No skeleton is provided for you,<br> you must create it from scratch. You’re responsible for adding instance methods and<br> variables. A player object will represent the user playing the game, and thus needs to<br> store which map square they are currently on (integer x and y coordinates), the lamp and<br> key. You should create instance class type variables for the lamp and key, and if they<br> happen to be null, the player does NOT currently have them (same is true for the Room<br> objects as well). Be sure to follow encapsulation rules here too. You do not need to<br> initialize the lamp and key instance variables, as they will default to null. When the<br> player collects the lamp and the key, you will call setLamp and setKey to set these<br> variables.</li><li>Once these are done, create a class called <strong>Adventure</strong> and write the <strong>main method</strong> of your<br> program in it (remember that the class that contains the main method is the one that you<br> run). The first thing to do in main is to create a Player object and set its starting<br> coordinates to (0,0). Also, you will need to create a new Map object. The idea in the<br> Adventure class is that you loop repeatedly until the player dies (attacked by grue – see<br> below) or finds the treasure (opens chest – see below). Every time the player moves,<br> update the player’s position and get the appropriate Room object from the map. Using this<br> object, display the appropriate text to the user based on what command they type in. A<br> list of commands is given below. Ignore case on the user input.<pre><code>- GET LAMP – If the lamp is present in the current room ( there is a method in the   Room cl ass (i.e. getLamp()) that allows you to check this. Note the method’s   return type and assign the return value accordingly), this transfers the lamp from</code></pre></li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">the</span> room <span class="built_in">to</span> <span class="keyword">the</span> player. Be sure <span class="built_in">to</span> <span class="built_in">clear</span> <span class="keyword">the</span> lamp <span class="built_in">from</span> <span class="keyword">the</span> room afterwards. Print</span><br><span class="line">“OK” <span class="keyword">if</span> successful, <span class="keyword">or</span> “No lamp present” <span class="keyword">if</span> <span class="keyword">not</span>. Note: that you can find <span class="keyword">the</span> lamp</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">a</span> dark room.</span><br></pre></td></tr></table></figure><ul><li>LIGHT LAMP – If the player has the lamp, this sets it to lit. Print “OK” if<br>  successful, or “You don’t have the lamp to light” if the player doesn’t have the<br>  lamp.</li><li>NORTH, SOUTH, EAST, WEST – If the current room (prior to the move)<br>  isDark(), AND the player doesn’t have the lamp OR they have the lamp but the<br>  lamp is not lit, the player is eaten by a grue and the game is over. (see below for<br>  an example). Otherwise, move the user North one square (-1 x), South one square<br>  (+1 x), East one square (+1 y), or West one square (-1 y). See table below to<br>  understand x and y in the context of the map. Once you move into a new room,<br>  you should print out its description, so the user doesn’t have to type LOOK every<br>  time. Be sure to check the current room object to see if the given direction is<br>  valid. If not, print (“Can’t go that way”). If the room (after the move) isDark()<br>  AND the player does not have the lamp OR the lamp is not lit, then instead of<br>  printing the description, tell them: “It is pitch black, you can’t see anything. You<br>  may be eaten by a grue!”. (see below for an example)</li><li>LOOK –If the room isDark() and the player does not have the lamp or the lamp is<br>  not lit, then instead of printing the description, tell them: “It is pitch black, you<br>  can’t see anything. You may be eaten by a grue!”. (see below for an example).<br>  Otherwise, this prints the description of the current room object, as well as any<br>  objects that are in the room. You should also print which exits from the room are<br>  valid.</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i. If <span class="keyword">the</span> lamp <span class="keyword">is</span> present <span class="keyword">in</span> <span class="keyword">the</span> room, print “There <span class="keyword">is</span> an old oil lamp <span class="keyword">that</span> was</span><br><span class="line">made long ago here.” <span class="keyword">after</span> you have printed out <span class="keyword">the</span> room description.</span><br><span class="line">ii. If <span class="keyword">the</span> key <span class="keyword">is</span> present <span class="keyword">in</span> <span class="keyword">the</span> room, print “You see <span class="keyword">the</span> outline <span class="keyword">of</span> a key <span class="keyword">on</span> a</span><br><span class="line">dusty shelf <span class="keyword">that</span>'s covered <span class="keyword">in</span> dust.” <span class="keyword">after</span> you have printed out <span class="keyword">the</span> room</span><br><span class="line">description.</span><br><span class="line">iii. If <span class="keyword">the</span> chest <span class="keyword">is</span> present <span class="keyword">in</span> <span class="keyword">the</span> room, print “There <span class="keyword">is</span> a large, wooden,</span><br><span class="line">massive, oaken chest here <span class="keyword">with</span> <span class="keyword">the</span> <span class="built_in">word</span> “CHEST” carved <span class="keyword">into</span> <span class="keyword">it</span>” <span class="keyword">after</span></span><br><span class="line">you have printed out <span class="keyword">the</span> room description.</span><br></pre></td></tr></table></figure><ul><li>GET KEY – If the key is present in the room, this transfers the key to the user’s<br>  inventory. Be sure to clear the key from the room afterwards. Print “OK” if<br>  successful, “No key present” if not.</li><li>OPEN CHEST – If the chest is present in the room and is unlocked, then this<br>  should print out the chest’s contents and end the game. If the chest is locked, print<br>  “The chest is locked”. If the chest is not present in the room, print “No chest<br>  present”.</li></ul><ul><li>UNLOCK CHEST – If the user has the key, call the use() method with the chest<br>  object to unlock it, then print “OK”. If the user doesn’t have the key, print “Need a<br>  key to do any unlocking!”. If the chest is not present, print “No chest to unlock”.</li><li>(anything else) – Just print “I’m sorry I don’t know how to do that.”, and re-<br>  prompt the user to allow the user to enter another command. The user should be<br>  able to continue playing after an invalid command is inputted, and the game<br>  should continue normally after an invalid command. The program should not<br>  crash or end abruptly if the user inputs an invalid command.</li></ul><ol start="5"><li>When your program starts, print out the following text:<br>Welcome to UGA Adventures: Episode I<br>The Adventure of the Cave of Redundancy Adventure<br>By: (Your name)</li></ol><h2 id="Additional-Requirements"><a href="#Additional-Requirements" class="headerlink" title="Additional Requirements"></a>Additional Requirements</h2><p>These are things that make the graders lives easier, and ultimately, you will see in the real world<br>as well. Remember the teaching staff does not want to touch your code after they gave you<br>requirements; they want to see the perfect results they asked for! Here is a checklist of things you<br>can <strong>lose points</strong> for:</p><ul><li>(-10 points) If the source file(s)/class(es) are named incorrectly (case matters!)</li><li>(-10 points) If your source file(s) have a package declaration at the top</li><li>(-10 points) If any source file you submit is missing your Statement of Academic<br>  Honesty at the top of the source file. All submitted source code files must contain your<br>  Statement of Academic Honesty at the top of each file.</li><li>(-10 points) If you have more than one instance of Scanner in your program. Your<br>  program should only have one instance of Scanner.</li><li>(-15 points) Inconsistent I/O (input/output) that does not match our instructions or<br>  examples exactly (unless otherwise stated in an assignment’s instructions). Your<br>  program’s I/O (order, wording, formatting, etc.) must match our examples and<br>  instructions.</li><li>(-100 points) If the source file(s) are not submitted before the specified deadline or if they<br>  do not compile. Late submissions will not be accepted for this project since it is the last<br>  project of the semester, per the course syllabus.</li><li>If your (-10 points) comments or (-10 points) variables are “lacking”<br>  o Here, “lacking” means that you or a TA can find <strong>any</strong> lines of code or variables<pre><code>that take more than 10 seconds to understand, and there is no comment, or thevariable name does not make sense (variable names like **b** , **bb** , **bbb** , etc. **will****almost never be acceptable)**</code></pre></li><li>(-10 points) Indentation is not consistent throughout your source code<br>  o Refresh your memory of indentation patterns in chapter 2 in the course textbook<br>  o Be careful of a combination of tabs and spaces in your files (use one or the other)!</li></ul><p>If any of the above do not make sense to you, talk to a TA or ask your lab instructor.</p><h2 id="Project-Submission"><a href="#Project-Submission" class="headerlink" title="Project Submission"></a>Project Submission</h2><p>Submit the files <strong>Adventure.java</strong> , <strong>Chest.java</strong> , <strong>Lamp.java</strong> and <strong>Player.java</strong> in eLC. [Note that<br>you are not uploading Map.java, Room.java or Key.java because you should <strong>not</strong> have updated<br>these]</p><h2 id="Example-Executions"><a href="#Example-Executions" class="headerlink" title="Example Executions"></a>Example Executions</h2><p>Your program should work correctly and follow the examples below. Each example is a separate<br>run of a correctly working program.</p><h3 id="This-example-is-from-simpleMap-simpleMap-variable-set-to-true-in-the-Map-class"><a href="#This-example-is-from-simpleMap-simpleMap-variable-set-to-true-in-the-Map-class" class="headerlink" title="This example is from simpleMap (simpleMap variable set to true in the Map class)"></a>This example is from simpleMap (simpleMap variable set to true in the Map class)</h3><p>Welcome to UGA Adventures: Episode 1<br>The adventure of the Cave of Redundancy Adventure<br>By: Brad and Karen</p><p>This is the one room map. Everything you need is here!!<br>get key<br>OK<br>open chest<br>The chest is locked<br>unlock chest<br>OK<br>open chest<br>all the gold <strong>(Here, we are printing the contents of the chest)</strong></p><h3 id="Note-The-next-2-examples-follow-the-full-map-simpleMap-variable-set-to-false"><a href="#Note-The-next-2-examples-follow-the-full-map-simpleMap-variable-set-to-false" class="headerlink" title="Note: The next 2 examples follow the full map (simpleMap variable set to false)"></a>Note: The next 2 examples follow the full map (simpleMap variable set to false)</h3><p>Welcome to UGA Adventures: Episode 1<br>The adventure of the Cave of Redundancy Adventure<br>By: Brad and Karen</p><p>FOREST TRAIL:<br>You are standing on a dirt trail that leads to the east. Surrounding you is the famously thick underbrush<br>of Oconee Forest Park, the fall leaves falling off the trees have just started to poke holes in the canopy.<br>Off in the distance you hear the cool sounds of Lake Herrick drifting through the trees.<br>look<br>FOREST TRAIL:<br>You are standing on a dirt trail that leads to the east. Surrounding you is the famously thick underbrush<br>of Oconee Forest Park, the fall leaves falling off the trees have just started to poke holes in the canopy.<br>Off in the distance you hear the cool sounds of Lake Herrick drifting through the trees.<br>Exits are: east<br>east<br>WOODEN WALKWAY:<br>The wooden walkway makes a :clump: as you stride along it.</p><p>Frogs give a terrified SKRIP! and jump to safety as your adventurous frame comes into view.<br>A mountain biker, ignoring the many “Fragile Habitat” signs, speeds along a narrow dirt path to your<br>right.<br>As you reach the end of the walkway, you notice a hole in the ground in a newly fallen tree’s footprint,<br>just<br>large enough for you to fit through.<br>look<br>WOODEN WALKWAY:<br>The wooden walkway makes a :clump: as you stride along it.<br>Frogs give a terrified SKRIP! and jump to safety as your adventurous frame comes into view.<br>A mountain biker, ignoring the many “Fragile Habitat” signs, speeds along a narrow dirt path to your<br>right.<br>As you reach the end of the walkway, you notice a hole in the ground in a newly fallen tree’s footprint,<br>just<br>large enough for you to fit through.<br>There is an old oil lamp that was made long ago here.<br>Exits are: east<br>west<br>get lamp<br>OK<br>east<br>It is pitch black, you can’t see anything. You may be eaten by a grue!<br>light lamp<br>OK<br>look<br>CAVE ENTRANCE:<br>The damp earthen crawlspace gives you claustrophobic thoughts as you crawl through its damp earth.<br>Fortunately, the passageway soon grows large enough for you to stand, though slightly bent over.<br>The air smells of rotting wood, and a rotting wood smell hangs thick in the air.<br>Exits are: east<br>West</p><h3 id="…The-rest-of-the-example-removed-in-the-sake-of-space…"><a href="#…The-rest-of-the-example-removed-in-the-sake-of-space…" class="headerlink" title="[[…The rest of the example removed in the sake of space…]]"></a>[[…The rest of the example removed in the sake of space…]]</h3><h3 id="In-this-example-the-user-is-eaten-by-the-grue"><a href="#In-this-example-the-user-is-eaten-by-the-grue" class="headerlink" title="In this example, the user is eaten by the grue:"></a>In this example, the user is eaten by the grue:</h3><p>Welcome to UGA Adventures: Episode 1<br>The adventure of the Cave of Redundancy Adventure<br>By: Brad and Karen</p><p>FOREST TRAIL:<br>You are standing on a dirt trail that leads to the east. Surrounding you is the famously thick underbrush<br>of Oconee Forest Park, the fall leaves falling off the trees have just started to poke holes in the canopy.<br>Off in the distance you hear the cool sounds of Lake Herrick drifting through the trees.<br>east<br>WOODEN WALKWAY:<br>The wooden walkway makes a :clump: as you stride along it.<br>Frogs give a terrified SKRIP! and jump to safety as your adventurous frame comes into view.</p><p>A mountain biker, ignoring the many “Fragile Habitat” signs, speeds along a narrow dirt path to your<br>right.<br>As you reach the end of the walkway, you notice a hole in the ground in a newly fallen tree’s footprint,<br>just<br>large enough for you to fit through.<br>east<br>It is pitch black, you can’t see anything. You may be eaten by a grue!<br>west<br>You have stumbled into a passing grue, and have been eaten</p><h2 id="Map-Class-Interface"><a href="#Map-Class-Interface" class="headerlink" title="Map Class Interface"></a>Map Class Interface</h2><p>class Map:<br>private boolean simpleMap : This is set to true by default and allows you to test your code with a<br>1-dimension room<br>public Room getRoom(int x, int y) : Call this method with two int’s to get the appropriate room.<br>The valid range for both x and y is 0 to 3.</p><h2 id="Room-Class-Interface"><a href="#Room-Class-Interface" class="headerlink" title="Room Class Interface"></a>Room Class Interface</h2><p>class Room:<br>public String getDescription() : Returns the text description of this room.<br>public boolean canGoNorth() : Returns true if the player can go north from this room.<br>public boolean canGoSouth() : Returns true if the player can go south from this room.<br>public boolean canGoEast() : Returns true if the player can go east from this room.<br>public boolean canGoWest() : Returns true if the player can go west from this room.<br>public Lamp getLamp() : Returns the lamp object in this room. If no lamp is present, returns null.<br>public void clearLamp() : Sets the lamp variable in this room to null.<br>public Key getKey() : Returns the key object in this room. If no key is present, returns null.<br>public void clearKey() : Sets the key variable in this room to null.<br>public Chest getChest() : Returns the chest object in this room. If no chest is present, returns null.<br>public boolean isDark() : Returns true if there is no light in this room, veeeeeeery dangerous!</p><h2 id="Key-Class-Interface"><a href="#Key-Class-Interface" class="headerlink" title="Key Class Interface"></a>Key Class Interface</h2><p>class Key:<br>public void use(Chest onChest): Calls the unlock method on the given chest.</p><p>Copyright © Bradley J. Barnes and the University of Georgia. This work is licensed<br>under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International<br>License to students and the public. The content and opinions expressed on this Web<br>page do not necessarily reflect the views of nor are they endorsed by the University of<br>Georgia or the University System of Georgia.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1110_A4</title>
    <link href="cplusplusdaixie.com/CSCI1110-A4.html"/>
    <id>cplusplusdaixie.com/CSCI1110-A4.html</id>
    <published>2023-07-31T01:32:56.000Z</published>
    <updated>2023-07-31T01:33:42.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI-1110"><a href="#CSCI-1110" class="headerlink" title="# CSCI 1110"></a># CSCI 1110</h3><h1 id="Assignment-04"><a href="#Assignment-04" class="headerlink" title="Assignment 04"></a>Assignment 04</h1><p><strong>Please start this assignment early</strong> ; programming and logic take time - if you leave it to the last<br>minute, you might not have enough time to finish or might make silly mistakes that you otherwise<br>could avoid. Note that TAs and Instructors will not be able to answer last-minute questions!</p><p><strong>All work is to be handed in Mimir, our online code learning environment.</strong> You should, however,<br>write your code on an IDE such as IntelliJ.</p><p>To complete this assignment, you will need to know about:</p><ul><li>Basic Java</li><li>Conditionals</li><li>Boolean Variables</li><li>Loops</li><li>Objects and Classes</li><li>Java Collections Framework (Lists, Sets, Maps, Queues, Stacks)</li></ul><p>Your code <strong>must compile</strong>. If it does not compile, you will receive a 0 (zero) on that portion of the<br>assignment, and no partial marks will be given.</p><p>Remember that students who <strong><em>hardcode</em></strong> their outputs to match the test cases in Mimir will<br>receive a <strong>zero</strong> on the entire assignment.</p><p><strong>Grading Scheme:</strong> Please see the grading scheme at the end of this document.</p><p><strong>Coding Style:</strong> You must proper variable names and comments. Please follow the guidelines on<br><a href="https://web.cs.dal.ca/~franz/CodingStyle.html" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html</a></p><h2 id="Problem-Overview"><a href="#Problem-Overview" class="headerlink" title="Problem Overview"></a>Problem Overview</h2><p>In this assignment, you will finish implementing a set of classes used to represent Students,<br>Courses and a University.</p><p>This assignment is meant for you to write code using the JFC collections (lists, sets, maps,<br>queues, etc.) and their built-in algorithms (e.g., contains method). Your goal is to read through<br>the already written javaDocs and fix the variable declarations and methods flagged with a ToDo<br>comment (//TODO).</p><p>You can create other private methods and variables if you want, but you don’t have to. <strong>You also<br>don’t have to add any more JavaDocs; however, inline comments are still required on the<br>methods you write code on.</strong></p><p>The two classes you have to work in are <strong>University.java</strong> and <strong>Student.java</strong>.</p><h2 id="Iterators-on-Maps"><a href="#Iterators-on-Maps" class="headerlink" title="Iterators on Maps"></a>Iterators on Maps</h2><p>We discussed iterators in lectures 14 and 15. Iterators are what a <em>foreach</em> loop uses<br>“underneath the surface.” We also explored how to retrieve an iterator from a List and use it to<br>iterate over (and even remove) the collection using while loops.</p><p>You cannot get an iterator from a map directly since the stored information is associated with a<br>tuple of keys and values. To iterate on a map, you have to get the keys from the map and<br>iterate over them. Example:</p><ul><li>Assume that you have a map that associates Farms and Cows (&lt;Farm,Cow&gt;). The keys to<br>  the map are Farm objects.</li><li>You can retrieve the keys already on the map by calling the keySet() method on the map<br>  variable. It will return a set of keys (Set<farm>). You can then get the iterator of a set<br>  the same way you do for lists.<pre><code>o Another way to go over every element on the map is to use the values() method   on the map variable. This method will return a Collection&lt; _value_ &gt;.o It is up to you to chose which path you want to follow</code></pre></farm></li></ul><h2 id="For-the-curious-among-you"><a href="#For-the-curious-among-you" class="headerlink" title="For the curious among you"></a>For the curious among you</h2><p>I added some extra code in the Student and Course classes:</p><ul><li>StringBuilder: we should use a SB to concatenate strings on loops instead of +=<br>  because everytime we are using += we are instantiating a new String (they are<br>  imutable)</li><li>Saving and loading objects to a binary file (Student class): you can write another</li></ul><h2 id="class-on-your-computer-to-toy-with-those-two-methods"><a href="#class-on-your-computer-to-toy-with-those-two-methods" class="headerlink" title="class on your computer to toy with those two methods."></a>class on your computer to toy with those two methods.</h2><h2 id="Grading-Scheme"><a href="#Grading-Scheme" class="headerlink" title="Grading Scheme"></a>Grading Scheme</h2><p>Each problem on the assignment will be graded based on three criteria:</p><h3 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h3><p>“Does it work according to specifications?” This is determined in an automated fashion by<br>running your program on a number of inputs and ensuring that the outputs match the expected<br>outputs. The score is determined based on the number of tests that your program passes.</p><h3 id="Quality-of-Solution"><a href="#Quality-of-Solution" class="headerlink" title="Quality of Solution"></a>Quality of Solution</h3><p>“Is it a good solution?” This considers whether the solution is correct, efficient, covers boundary<br>conditions, does not have any obvious bugs, etc. This is determined by visual inspection of the<br>code. Initially full marks are given to each solution and marks are deducted based on faults<br>found in the solution.</p><h3 id="Code-Clarity"><a href="#Code-Clarity" class="headerlink" title="Code Clarity"></a>Code Clarity</h3><p>“Is it well written?” This considers whether the solution is properly formatted, well-<br>documented, and follows coding style guidelines<br>(<a href="https://web.cs.dal.ca/~franz/CodingStyle.html)" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html)</a>.</p><p>If your program does not compile, it is considered non-functional and of extremely poor quality,<br>meaning you will receive 0 for the solution.</p><h4 id="PROBLEM-POINTS"><a href="#PROBLEM-POINTS" class="headerlink" title="PROBLEM POINTS"></a>PROBLEM POINTS</h4><p><strong>MIMIR TEST CASES</strong> (^80)</p><h4 id="QUALITY-OF-SOLUTION-amp"><a href="#QUALITY-OF-SOLUTION-amp" class="headerlink" title="QUALITY OF SOLUTION &amp;"></a>QUALITY OF SOLUTION &amp;</h4><h4 id="CODE-CLARITY"><a href="#CODE-CLARITY" class="headerlink" title="CODE CLARITY"></a>CODE CLARITY</h4><h4 id="20"><a href="#20" class="headerlink" title="20"></a>20</h4><h4 id="TOTAL"><a href="#TOTAL" class="headerlink" title="TOTAL"></a>TOTAL</h4><h4 id="100"><a href="#100" class="headerlink" title="100"></a>100</h4>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1110_A3</title>
    <link href="cplusplusdaixie.com/CSCI1110-A3.html"/>
    <id>cplusplusdaixie.com/CSCI1110-A3.html</id>
    <published>2023-07-26T03:06:11.000Z</published>
    <updated>2023-07-26T03:07:09.649Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI1110"><a href="#CSCI1110" class="headerlink" title="CSCI1110"></a>CSCI1110</h3><h1 id="Assignment-03"><a href="#Assignment-03" class="headerlink" title="Assignment 03"></a>Assignment 03</h1><p><strong>Please start this assignment early</strong> ; programming and logic take time - if you leave it to the last<br>minute, you might not have enough time to finish or might make silly mistakes that you otherwise<br>could avoid. Note that TAs and Instructors will not be able to answer last-minute questions!</p><p><strong>All work is to be handed in Mimir, our online code learning environment.</strong> You should, however,<br>write your code on an IDE such as IntelliJ.</p><p>To complete this assignment, you will need to know about:</p><ul><li>Basic Java</li><li>Conditionals</li><li>Boolean Variables</li><li>Loops</li><li>Objects and Classes</li><li>Inheritance</li></ul><p>This is your first assignment with objects. The test cases from now on <strong>are slightly different</strong>. Some<br>test cases will be regular input/input as before; however, <strong>most tests cases</strong> will be unit tests. In<br>unit test cases there is no input from the user. The test can evaluate your code directly without<br>any user input when needed. The tests can also test methods individually <strong>as long as your code is<br>compiling</strong>. Before you can even try to test your code <strong>it must be compiling</strong>.</p><p>Your code <strong>must compile</strong>. If it does not compile, you will receive a 0 (zero) on that portion of the<br>assignment, and no partial marks will be given.</p><p>Remember that students who <strong><em>hardcode</em></strong> their outputs to match the test cases in Mimir will<br>receive a <strong>zero</strong> on the entire assignment.</p><p><strong>Grading Scheme:</strong> Please see the grading scheme at the end of this document.</p><p><strong>Coding Style:</strong> You must proper variable names and comments. Please follow the guidelines on<br><a href="https://web.cs.dal.ca/~franz/CodingStyle.html" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html</a></p><h2 id="Problem-Overview"><a href="#Problem-Overview" class="headerlink" title="Problem Overview"></a>Problem Overview</h2><p>In OOP we model our problems using objects that we can manipulate. To create and use<br>objects, we need to write classes. Classes are a sort of a blueprint that describes the properties<br>and behaviour of the objects we want to create.</p><p>In this assignment we are going write classes representing <strong>Characters</strong> for RPG games similar to<br>World of Warcraft and others. Our game will have different kinds of Characters and Attacks. We<br>will use Inheritance to reduce duplicated code, allow for easy expansion of the game’s base<br>carachters (and attakcs), and explore polymorphic behaviour.</p><p>In a real-world scenario we would also be leveraging the concepts of Interfaces to write the<br>code. We will see interfaces in the near future; however, because we are a little behind in the<br>schedule we will not have interfaces on this assignment.</p><p>After you finish this assignment, try to answer the following questions:</p><ul><li>How diffictulry it would be to add a new type of character to the game?</li><li>What code do you need to change to add the new character?</li><li>How difficult would it be to implement our game without using inheritance?</li></ul><p>The starter code in Mimir comes with three packages: Attacks, Characters, and Game.</p><ul><li><strong>Attacks:</strong> Contain the classes related to attacks in the game. These classes<br>  implementation is provided. <strong>Study them before starting the assignment.</strong> You don’t<br>  have to edit the code inside this package.</li><li><strong>Characters:</strong> Contain the classes related to our game characters. We will have initially<br>  three concrete Characters: Mage, Priest, and Warrior</li><li><strong>Game:</strong> This package has an example code on how to use the Charcaters and Attacks to<br>  write a small turn-based duel of two game characters. You don’t have to edit this code.<br>  You can run it once you have done the assignment. You can also study it to understand a<br>  bit more of the idea of using abstract types and polymorphism.</li></ul><p><strong>How to upload your solution to mimir:</strong> You must preserve the package structure when<br>submitting your solution to mimir. The <strong>only way</strong> (that I know of) to preserve is to zip your files<br>an upload the zip file.</p><p><strong>On Windows:</strong> Select the three folders inside the src folder, right click on them, and<br>“Send to compresed (zipped) folder”.</p><p><strong>On Mac</strong> : Select the three folders inside the src folder, right click (option click?),<br>“Compress 3 items”</p><p><strong>DO NOT WAIT UNTIL THE LAST WEEKEND TO START THIS ASSIGNMENT</strong>. Even if you don’t have<br>a lot of time now, at least download the starter code on Mimir, and try to create the zipped file.</p><p><strong>“Help! Where do I begin?”</strong> :</p><p>Review the classes inside the Attack package. Read the Point (see below)<br>documentation.</p><p>You always start with the most generic classes in the inheritance trees. Start with the<br><strong>RPGCharacter</strong> , then create the the more specialized classes.</p><p>This assignment is less complicated thant it seems codingwise. Review the concepts of<br>inheritance before starting it.</p><p><strong>The Point class:</strong> We will be using Java’s Point class. You have to import java.awt.Point. More<br>information on this class can be found here:<br><a href="https://docs.oracle.com/javase/8/docs/api/java/awt/Point.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/java/awt/Point.html</a></p><h2 id="The-Assignments-Classes-and-Inheritance-Diagram"><a href="#The-Assignments-Classes-and-Inheritance-Diagram" class="headerlink" title="The Assignments Classes and Inheritance Diagram"></a>The Assignments Classes and Inheritance Diagram</h2><p><strong>You don’t have to write JavaDocs for</strong> : getCurrentHP, getPosition, getMaxHP, getName,<br>toString, getCurrentEnergy, getCurrentMana</p><h2 id="Implementation-details-for-Attack"><a href="#Implementation-details-for-Attack" class="headerlink" title="Implementation details for Attack"></a>Implementation details for Attack</h2><p>I’ve opted to reduce your workload a little. All the implementation for the attacks is provided.</p><h2 id="Implementation-details-for-RPGCharacter"><a href="#Implementation-details-for-RPGCharacter" class="headerlink" title="Implementation details for RPGCharacter"></a>Implementation details for RPGCharacter</h2><p>RPGCharacter, Melee, and Caster should be abstract</p><p><strong>RPGCharacter</strong></p><ul><li>The constructor’s parameters are in the following order: name, intellect, strength,<br>  maxHP, and position.</li><li>The move method will move the character by calling the translate method form the<br>  Point class. The parameter order is x,y</li><li>TakeDamage: deals damage to the character by deducting parameter to the character’s<br>  current hp. If the HP falls bellow zero (included) the method should set the currentHP to<br>  zero and return false indicating that the character is dead.</li><li>Heal: heals the character by adding the parameter to the character’s current hp. A<br>  character <strong>cannot</strong> have more HP than the maxHP value. Returns true if the character is<br>  fully healed.</li><li>Attack should be abstract</li><li>GetAttacks will return a string with each of the character’s attacks on a new line. Each<br>  line should contain the attack’s index on the ArrayList and the attack’s string<br>  representation. Example:</li><li>ToString returns a String representing the Characters. The string should contain (in this<br>  order): the name, the type^1 , currentHP and maxHP:</li></ul><p><strong>Caster</strong></p><ul><li>This class will represent all Casters in our game. Casters are characters who deal damage<br>  by casting spells primarly.</li></ul><p>(^1) You can retrieve the class of the implicit parameter using getClass(); You can retrieve the class’ name using<br>getSimplifiedName(). How can you use these two methods to reduce the numbers of toStrings in the subclasses?</p><ul><li>The caster’s constructor will receive the parameters in this order: name, intellect,<br>  maxHP, position, and maxMana. Casters should be initialzed with a strength of 1 (one)<br>  and currentMana as maxMana.</li><li>The attack method should work as follows:<br>  o This method will select the attack from the ArrayList and call the<pre><code>interactWithTarget method to inflict damage or heal the target.</code></pre>  o The mehod will return a negative number in case the attack fails:<pre><code>▪ - 1 attackIndex not in range of the ArrayList▪ - 2 target out of range (check the Point&apos;s calss docs to see how you can   calculate the distance between two points▪ - 3 not enough mana</code></pre>  o The method will return the target’s currentHP if the attack is sucessifull<br>  o Casters can cast two types of spells and can also deal very basic melee attacks.<pre><code>You can see the Mage and Priest classes for example. The attack method willbehave differently depending on the instance of the attack selected.   ▪ HealingSpells should heal the character itself (implicit parameter) and      pass the character&apos;s intellect as the modifier value   ▪ For any other spell, the method will attack the target character and pass      the intellect as the modifier   ▪ For non-spell attacks, it should attack the target and pass zero (0) as the      modifier</code></pre>  o You should use the interactWithTarget method from the attack that was<pre><code>selected via the index parameter</code></pre></li><li>The toString method should append the caster’s mana underneath the character’s</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">toString:</span></span><br></pre></td></tr></table></figure><p><strong>Melee</strong></p><ul><li>This class represents all Melee characters. Instead of casting spells, these types of<br>  characters deal damage using physical attacks. Most of these attacks will consume<br>  energy.</li><li>The constructor’s parameters are, in this order, name, strength, maxHP, position, and<br>  maxEnergy. The currentEnergy should be initialized to the maxEnergy value and an<br>  intellect of 1</li><li>The attack method is simpler than the caster’s.<br>  o It will return a negative number if the attack fails:<pre><code>▪ - 1 attackIndex not in the range of the ArrayList▪ - 2 target out of range▪ - 3 not enough energy</code></pre>  o If the attack succeds, it will:</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▪ Deduct the energy cost</span><br><span class="line">▪ Call the interactWithTarget <span class="function"><span class="keyword">method</span> <span class="title">from</span> <span class="title">the</span> <span class="title">chosen</span> <span class="title">attack</span> <span class="title">to</span> <span class="title">inflict</span></span></span><br><span class="line"><span class="function"><span class="title">damage</span> <span class="title">on</span> <span class="title">the</span> <span class="title">target</span></span></span><br><span class="line"><span class="function">▪ <span class="title">Return</span> <span class="title">the</span> <span class="title">target</span>'<span class="title">s</span> <span class="title">currentHP</span> <span class="title">after</span> <span class="title">the</span> <span class="title">attack</span></span></span><br></pre></td></tr></table></figure><ul><li>The toString method will add the Characters current energy and max energy to the<br>  character’s default toString implementation:</li></ul><p><strong>Mage, Priest, Warriors</strong></p><ul><li>These are concrect classes (not abstract) in our game. Each class will create a character<br>  with a initial list of attacks (melee or spells).</li><li><strong>Priest:</strong><br>  o Wand, cost 0, damage 3, range 3<br>  o Smite, cost 10, damage 10, range 7<br>  o Flash Heal, cost 20, heal 15, range 15<br>  o Ressurrection</li><li><strong>Mage</strong><br>  o Staff, cost 0, damage 3, range 3<br>  o Fire Ball, cost 20, damage 10, range 20<br>  o Frost Ball, cost 15, damage 7, range 15<br>  o Lightning, cost 30, damage 15, range 20</li><li><strong>Warrior</strong><br>  o Punch, cost 0, damage 5, range 3<br>  o Slam, cost 3, damage 5, range 3<br>  o Charge, cost 20, damage 30, range 15</li></ul><h2 id="How-do-I-test-an-abstract-class"><a href="#How-do-I-test-an-abstract-class" class="headerlink" title="How do I test an abstract class?"></a>How do I test an abstract class?</h2><p>If you cannot create an object of a class how do you test it?</p><p>There are a couple of different ways but you should do as follows until you learn more about<br>OOP:</p><ul><li>Let’s assume you want to test your RPGCharacter class.</li></ul><ol><li>Create an empty class (e.g. ConcreteRPGCharacter)</li><li>Extend RPGCharacter</li><li>For each abstract method in RPGCharacter, write a “dumb” implementation.<br> a. If the method return type is void, write “return;” as the implementation<br> b. If the method is returning a primitive type, write “return 0;” as the<pre><code>implementation</code></pre></li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c. If <span class="keyword">the</span> method is returing <span class="keyword">a</span> reference type, <span class="built_in">write</span> <span class="string">"return null;"</span> <span class="keyword">as</span> <span class="keyword">the</span></span><br><span class="line">implementation</span><br></pre></td></tr></table></figure><ol start="4"><li>Create a tester/runner class.</li><li>In the main method, create instances of ConcreteRPGCharacter.</li><li>You can now test the non-abstract methods of RPGCharaceter by calling them on the<br> ConcreteRPGCharacter object.</li></ol><h2 id="Grading-Scheme"><a href="#Grading-Scheme" class="headerlink" title="Grading Scheme"></a>Grading Scheme</h2><p>Each problem on the assignment will be graded based on three criteria:</p><h3 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h3><p>“Does it work according to specifications?” This is determined in an automated fashion by<br>running your program on a number of inputs and ensuring that the outputs match the expected<br>outputs. The score is determined based on the number of tests that your program passes.</p><h3 id="Quality-of-Solution"><a href="#Quality-of-Solution" class="headerlink" title="Quality of Solution"></a>Quality of Solution</h3><p>“Is it a good solution?” This considers whether the solution is correct, efficient, covers boundary<br>conditions, does not have any obvious bugs, etc. This is determined by visual inspection of the<br>code. Initially full marks are given to each solution and marks are deducted based on faults<br>found in the solution.</p><h3 id="Code-Clarity"><a href="#Code-Clarity" class="headerlink" title="Code Clarity"></a>Code Clarity</h3><p>“Is it well written?” This considers whether the solution is properly formatted, well-<br>documented, and follows coding style guidelines<br>(<a href="https://web.cs.dal.ca/~franz/CodingStyle.html)" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html)</a>.</p><p>If your program does not compile, it is considered non-functional and of extremely poor quality,<br>meaning you will receive 0 for the solution.</p><h4 id="PROBLEM-POINTS"><a href="#PROBLEM-POINTS" class="headerlink" title="PROBLEM POINTS"></a>PROBLEM POINTS</h4><p><strong>RPGCHARACTER CLASSES</strong> (^70)</p><h4 id="QUALITY-OF-SOLUTION-amp"><a href="#QUALITY-OF-SOLUTION-amp" class="headerlink" title="QUALITY OF SOLUTION &amp;"></a>QUALITY OF SOLUTION &amp;</h4><h4 id="CODE-CLARITY"><a href="#CODE-CLARITY" class="headerlink" title="CODE CLARITY"></a>CODE CLARITY</h4><h4 id="30"><a href="#30" class="headerlink" title="30"></a>30</h4><h4 id="TOTAL"><a href="#TOTAL" class="headerlink" title="TOTAL"></a>TOTAL</h4><h4 id="100"><a href="#100" class="headerlink" title="100"></a>100</h4>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1110_A2</title>
    <link href="cplusplusdaixie.com/CSCI1110-A2.html"/>
    <id>cplusplusdaixie.com/CSCI1110-A2.html</id>
    <published>2023-07-23T00:32:09.000Z</published>
    <updated>2023-07-23T00:32:48.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI-1110"><a href="#CSCI-1110" class="headerlink" title="# CSCI 1110"></a># CSCI 1110</h3><h1 id="Assignment-02"><a href="#Assignment-02" class="headerlink" title="Assignment 02"></a>Assignment 02</h1><p><strong>Please start this assignment early</strong> ; programming and logic take time - if you leave it to the last<br>minute, you might not have enough time to finish or might make silly mistakes that you otherwise<br>could avoid. Note that TAs and Instructors will not be able to answer last-minute questions!</p><p><strong>All work is to be handed in Mimir, our online code learning environment.</strong> You should, however,<br>write your code on an IDE such as IntelliJ.</p><p>To complete this assignment, you will need to know about:</p><ul><li>Basic Java</li><li>Conditionals</li><li>Boolean Variables</li><li>Simple Input Validation</li><li>Loops</li><li>Methods</li><li>Basic Objects and Classes</li><li>Instance Methods</li><li>Overloading</li></ul><p>This is your first assignment with objects. The test cases from now on <strong>are slightly different</strong>. Some<br>test cases will be regular input/input as before; however, <strong>most tests cases</strong> will be unit tests. In<br>unit test cases there is no input from the user. The test can evaluate your code directly without<br>any user input when needed. The tests can also test methods individually <strong>as long as your code is<br>compiling</strong>. Before you can even try to test your code <strong>it must be compiling</strong>.</p><p>Your code <strong>must compile</strong>. If it does not compile, you will receive a 0 (zero) on that portion of the<br>assignment, and no partial marks will be given.</p><p>Remember that students who <strong><em>hardcode</em></strong> their outputs to match the test cases in Mimir will<br>receive a <strong>zero</strong> on the entire assignment.</p><p><strong>Grading Scheme:</strong> Please see the grading scheme at the end of this document.</p><p><strong>Coding Style:</strong> You must proper variable names and comments. Please follow the guidelines on<br><a href="https://web.cs.dal.ca/~franz/CodingStyle.html" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html</a></p><h2 id="Problem-1-–-Coffee-Beans"><a href="#Problem-1-–-Coffee-Beans" class="headerlink" title="Problem 1 – Coffee Beans"></a>Problem 1 – Coffee Beans</h2><p>The goal for assignment 02 is to reinforce the concepts of classes and objects and how to<br>combine and work with multiple objects together. To do so, we will implement a Coffee Maker</p><p>so we can make some coffee</p><p>We will solve this problem in parts, separating each concept into its class. In the end, we will<br>combine everything (Coffee Grinder, Coffee Maker and Coffee Beans) to get some brew!</p><p>In problem 01, you will create a class to represent the concept of Coffee Beans. Beans can<br>either be ground or whole. They have a roast type, blend name and brand name. The UML<br>diagram below depicts the CoffeeBeans class.</p><p>The CoffeeBeans class also defines an Enumeration type inside of it: <strong>Roast</strong> .There are four<br>types of Roast for a CoffeeBean: LIGHT, MEDIUM, MEDIUM_DARK and DARK. You can define<br>the Roast enum inside the CoffeeBeans class (make sure the enum type is public)</p><p>On this page, you can find more info on enums in Java<br><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</a></p><p>Here is a description of the constructors and methods of CoffeeBeans</p><ul><li>CoffeeBeans(String, String, Roast, boolean): Creates a new<br>  CoffeeBeans object with a brand name, blend names and roast type. It also sets the<br>  bean to ground or not. Set the boolean true to ground, false for whole bean</li><li>CoffeeBeans(String, String, Roast): Creates a new CoffeeBeans object<br>  with brand name, blend name and roast type. The CofeeBean is initialized as whole<br>  bean i.e., not ground</li><li>CoffeeBeans(String, String): Creates a new CoffeeBeans object with brand<br>  and blend names. Roast type is set to Medium. CofeeBean is initialized as whole bean<br>  i.e. not ground.</li><li>isGround(): returns a boolean informing if the bean is ground or not.</li><li>Getters: returns their respective proprieties</li><li>grind(): grinds the CoffeeBeans object from whole bean to ground. Returns true if<br>  the coffee switched from whole bean to ground. Returns false if the coffee was already<br>  ground.</li><li>toString(): returns a String representing the coffeeBean object according to the<br>  example below</li></ul><p>There is no input or output for this question. All tests are unit test cases.</p><p><strong>Please note that the class diagrams are defining some methods that you must implement.<br>You can, however, create more PRIVATE methods if you need them.</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Brand:</span> <span class="string">Kicking</span> <span class="string">Horse</span></span><br><span class="line"><span class="attr">Blend:</span> <span class="string">Horse</span> <span class="number">427</span></span><br><span class="line"><span class="attr">Roast type:</span> <span class="string">Dark</span></span><br><span class="line"><span class="string">whole</span> <span class="string">bean</span></span><br></pre></td></tr></table></figure><h2 id="Problem-2-–-The-Coffee-Machine-and-Coffee-Grinder"><a href="#Problem-2-–-The-Coffee-Machine-and-Coffee-Grinder" class="headerlink" title="Problem 2 – The Coffee Machine and Coffee Grinder"></a>Problem 2 – The Coffee Machine and Coffee Grinder</h2><p>To make coffee, we will also need a CoffeeMaker and a CoffeeGrinder. In this problem,<br>you will create both classe according to the diagrams depicted below. Please note that you<br>don’t need to write P2 after P1; you can write both in parallel or even P2 before P1. However,<br>you need to have all P1’s tests passing before you can thoroughly test the classes on this<br>problem.</p><p>See how the CoffeeMaker class depends on both CoffeeGrinder and CoffeeBeans<br>classes to function fully?</p><p>Here is a description of the constructors and methods of CoffeeGrinder</p><ul><li>Default constructor only</li><li>grindCoffe(CoffeeBeans): grinds the coffee bean received as a parameter. If<br>  the beans are already ground return false.</li></ul><p>Here is a description of the constructors and methods of CoffeeMaker. The machine is<br>always initialized with no water in the tank and off.</p><ul><li>CoffeeMaker(CoffeeBeans, double): Create a new coffee maker with the<br>  beans already loaded into it and define the size of the water tank in millilitres.</li><li>CoffeeMaker(double): Create a new coffee maker object with a tank size defined<br>  by the double parameter in millilitres.</li><li>getWaterLevel(): returns the amount of water in the tank</li><li>switchPower(): toggles the power of the coffee maker on and off</li><li>hasCoffee(): returns true if the coffee maker has coffee loaded onto it; false<br>  otherwise</li><li>laodCoffee(CoffeBeans): loads coffee into the coffee maker. Returns false if<br>  the parameter is null.</li><li>brewCoffee(int): brews int cups of coffee. If the coffee beans in the machine are<br>  not ground, it will first grind the coffee using the internal coffee grinder. The machine<br>  cannot brew coffee if there isn’t enough water for the requested amount of coffee. The<br>  machine must be on to brew. Returns true if the maker successfully brewed the coffee.</li><li>clean(): removes coffee from the machine and empties the water container.</li><li>cupsToML(int): helper method (hence private) to convert cups to millilitres. One<br>  cup is ~ 236.59 ml</li><li>toString(): returns a String representing the CoffeeMaker object according to<br>  the example below</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">With</span> <span class="string">coffee</span> <span class="string">Without</span> <span class="string">coffee</span></span><br><span class="line"><span class="attr">isOn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">water left:</span> <span class="number">0</span><span class="string">.</span></span><br><span class="line"><span class="attr">loaded coffee:</span></span><br><span class="line"><span class="attr">Brand:</span> <span class="string">Kicking</span> <span class="string">Horse</span></span><br><span class="line"><span class="attr">Blend:</span> <span class="string">Horse</span> <span class="number">427</span></span><br><span class="line"><span class="attr">Roast type:</span> <span class="string">DARK</span></span><br><span class="line"><span class="string">whole</span> <span class="string">bean.</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">isOn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">water left:</span> <span class="number">0</span><span class="string">.</span></span><br><span class="line"><span class="literal">no</span> <span class="string">coffee</span> <span class="string">loaded.</span></span><br></pre></td></tr></table></figure><p>There is no input or output for this question. All tests are unit test cases.</p><h2 id="Problem-3-–-Let’s-make-some-brew"><a href="#Problem-3-–-Let’s-make-some-brew" class="headerlink" title="Problem 3 – Let’s make some brew!"></a>Problem 3 – Let’s make some brew!</h2><p>Now that we have both classes implemented and tested, we can make them work together so<br>we can brew some coffee! You will create a third class, HumanMakeCoffee, but this time<br>with the main method and user input/output.</p><p>Your program will have an Array of CoffeBeans to store four coffee types, which the user will<br>input. <strong>The program will also create a CoffeeMaker with a tank capacity of 2500ml</strong></p><p>The program will work as follows:</p><ul><li>First, it will read from the user 4 sets of coffee beans.</li><li>Then it will prompt the user for an option<br>  o 1 – To print the list of available coffees and load it into the machine<br>  o 2 – To print the machine string representation<br>  o 3 – To add water to the machine<br>  o 4 – To brew coffee. It will prompt the user for how many cups.<br>  o 0 – To exit the program</li></ul><p>The next page contains examples for each option.</p><p>Input considerations</p><ul><li>When reading the coffees from the user, each data (name, blend, roast) will be inputted<br>  in a different line<pre><code>o Example:o Kicking Horseo Horse 427o DARK</code></pre></li><li>You will be reading the coffee’s roast as a String. You can convert into a Roast type using<br>  Roast.valueOf(theStringVariable). This method will work as long as the<br>  user’s input matches a roast type.</li><li><strong>Assume that the user will always input correct/valid information (including the roast)</strong></li></ul><h3 id="Options-prompts-outputs-examples"><a href="#Options-prompts-outputs-examples" class="headerlink" title="Options prompts/outputs examples"></a>Options prompts/outputs examples</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Option selected Output Text/Prompt</span><br><span class="line">1 Here are your coffee options^</span><br><span class="line">(1)</span><br><span class="line">Brand: Kicking Horse</span><br><span class="line">Blend: Horse 427</span><br><span class="line">Roast type: DARK</span><br><span class="line">whole bean</span><br><span class="line">---------</span><br><span class="line">(2)</span><br><span class="line">Brand: The Big Lift</span><br><span class="line">Blend: Halifax Tour</span><br><span class="line">Roast type: MEDIUM</span><br><span class="line">whole bean</span><br><span class="line">---------</span><br><span class="line">(3)</span><br><span class="line">Brand: Second Cup</span><br><span class="line">Blend: Xmas Time</span><br><span class="line">Roast type: LIGHT</span><br><span class="line">whole bean</span><br><span class="line">---------</span><br><span class="line">(4)</span><br><span class="line">Brand: Nespresso</span><br><span class="line">Blend: Indonesia</span><br><span class="line">Roast type: MEDIUM<span class="emphasis">_DARK</span></span><br><span class="line"><span class="emphasis">whole bean</span></span><br><span class="line"><span class="emphasis">---------</span></span><br><span class="line"><span class="emphasis">Make a selection:</span></span><br><span class="line"><span class="emphasis">2 isOn: true^</span></span><br><span class="line"><span class="emphasis">water left: 0.</span></span><br><span class="line"><span class="emphasis">loaded coffee:</span></span><br><span class="line"><span class="emphasis">Brand: Kicking Horse</span></span><br><span class="line"><span class="emphasis">Blend: Horse 427</span></span><br><span class="line"><span class="emphasis">Roast type: DARK</span></span><br><span class="line"><span class="emphasis">whole bean.</span></span><br><span class="line"><span class="emphasis">3 How much water?^</span></span><br><span class="line"><span class="emphasis">4 (not enough water or</span></span><br><span class="line"><span class="emphasis">no coffee loaded)</span></span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">How many cups?</span><br><span class="line"><span class="function"><span class="title">Hmm</span></span>... something went wrong</span><br><span class="line"><span class="number">4</span> (enough water) How many cups?^</span><br><span class="line"><span class="function"><span class="title">Brewing</span></span> coffee...</span><br></pre></td></tr></table></figure><h3 id="Example-Input-Ouput"><a href="#Example-Input-Ouput" class="headerlink" title="Example Input/Ouput"></a>Example Input/Ouput</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input <span class="keyword">Output</span></span><br><span class="line">Kicking Horse</span><br><span class="line">Horse <span class="number">427</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome! Please <span class="keyword">select</span> an <span class="keyword">option</span>:</span><br><span class="line">Here <span class="keyword">are</span> your coffee options</span><br></pre></td></tr></table></figure><h4 id="DARK"><a href="#DARK" class="headerlink" title="DARK"></a>DARK</h4><p>The Big Lift<br>Halifax Tour<br>MEDIUM<br>Second Cup<br>Xmas Time<br>LIGHT<br>Nespresso<br>Indonesia<br>MEDIUM_DARK<br>1<br>2<br>2<br>0</p><h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Brand: Kicking Horse</span><br><span class="line">Blend: Horse 427</span><br><span class="line">Roast type: DARK</span><br><span class="line">whole bean)</span><br><span class="line">---------</span><br><span class="line">(2)</span><br><span class="line">Brand: The Big Lift</span><br><span class="line">Blend: Halifax Tour</span><br><span class="line">Roast type: MEDIUM</span><br><span class="line">whole bean)</span><br><span class="line">---------</span><br><span class="line">(3)</span><br><span class="line">Brand: Second Cup</span><br><span class="line">Blend: Xmas Time</span><br><span class="line">Roast type: LIGHT</span><br><span class="line">whole bean)</span><br><span class="line">---------</span><br><span class="line">(4)</span><br><span class="line">Brand: Nespresso</span><br><span class="line">Blend: Indonesia</span><br><span class="line">Roast type: MEDIUM<span class="emphasis">_DARK</span></span><br><span class="line"><span class="emphasis">whole bean)</span></span><br><span class="line"><span class="emphasis">---------</span></span><br><span class="line"><span class="emphasis">Make a selection:</span></span><br><span class="line"><span class="emphasis">isOn: true</span></span><br><span class="line"><span class="emphasis">water left: 0.</span></span><br><span class="line"><span class="emphasis">loaded coffee:</span></span><br><span class="line"><span class="emphasis">Brand: The Big Lift</span></span><br><span class="line"><span class="emphasis">Blend: Halifax Tour</span></span><br><span class="line"><span class="emphasis">Roast type: MEDIUM</span></span><br><span class="line"><span class="emphasis">whole bean.</span></span><br></pre></td></tr></table></figure><h2 id="Grading-Scheme"><a href="#Grading-Scheme" class="headerlink" title="Grading Scheme"></a>Grading Scheme</h2><p>Each problem on the assignment will be graded based on three criteria:</p><h3 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h3><p>“Does it work according to specifications?” This is determined in an automated fashion by<br>running your program on a number of inputs and ensuring that the outputs match the expected<br>outputs. The score is determined based on the number of tests that your program passes.</p><h3 id="Quality-of-Solution"><a href="#Quality-of-Solution" class="headerlink" title="Quality of Solution"></a>Quality of Solution</h3><p>“Is it a good solution?” This considers whether the solution is correct, efficient, covers boundary<br>conditions, does not have any obvious bugs, etc. This is determined by visual inspection of the<br>code. Initially full marks are given to each solution and marks are deducted based on faults<br>found in the solution.</p><h3 id="Code-Clarity"><a href="#Code-Clarity" class="headerlink" title="Code Clarity"></a>Code Clarity</h3><p>“Is it well written?” This considers whether the solution is properly formatted, well-<br>documented, and follows coding style guidelines<br>(<a href="https://web.cs.dal.ca/~franz/CodingStyle.html)" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html)</a>.</p><p>If your program does not compile, it is considered non-functional and of extremely poor quality,<br>meaning you will receive 0 for the solution.</p><h4 id="PROBLEM-PARTIAL"><a href="#PROBLEM-PARTIAL" class="headerlink" title="PROBLEM PARTIAL"></a>PROBLEM PARTIAL</h4><h4 id="POINTS"><a href="#POINTS" class="headerlink" title="POINTS"></a>POINTS</h4><h4 id="POINTS-1"><a href="#POINTS-1" class="headerlink" title="POINTS"></a>POINTS</h4><h4 id="PROBLEM-1"><a href="#PROBLEM-1" class="headerlink" title="PROBLEM 1"></a>PROBLEM 1</h4><h4 id="40"><a href="#40" class="headerlink" title="40"></a>40</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Functionality <span class="number">30</span></span><br><span class="line">Quality of Solution <span class="meta">&amp;</span></span><br><span class="line">Code Clarity</span><br></pre></td></tr></table></figure><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><h4 id="PROBLEM-2"><a href="#PROBLEM-2" class="headerlink" title="PROBLEM 2"></a>PROBLEM 2</h4><h4 id="45"><a href="#45" class="headerlink" title="45"></a>45</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Functionality <span class="number">30</span></span><br><span class="line">Quality of Solution <span class="meta">&amp;</span></span><br><span class="line">Code Clarity</span><br></pre></td></tr></table></figure><h4 id="15"><a href="#15" class="headerlink" title="15"></a>15</h4><h4 id="PROBLEM-3-15"><a href="#PROBLEM-3-15" class="headerlink" title="PROBLEM 3 15"></a>PROBLEM 3 15</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Functionality <span class="number">10</span></span><br><span class="line">Quality of Solution <span class="meta">&amp;</span></span><br><span class="line">Code Clarity</span><br></pre></td></tr></table></figure><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><h4 id="TOTAL"><a href="#TOTAL" class="headerlink" title="TOTAL"></a>TOTAL</h4><h4 id="100-100"><a href="#100-100" class="headerlink" title="100 100"></a>100 100</h4>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1110_A1</title>
    <link href="cplusplusdaixie.com/CSCI1110-A1.html"/>
    <id>cplusplusdaixie.com/CSCI1110-A1.html</id>
    <published>2023-07-19T01:23:34.000Z</published>
    <updated>2023-07-19T00:47:22.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI-1110"><a href="#CSCI-1110" class="headerlink" title="CSCI 1110"></a>CSCI 1110</h3><h1 id="Assignment-01"><a href="#Assignment-01" class="headerlink" title="Assignment 01"></a>Assignment 01</h1><p><strong>Please start this assignment early</strong> ; programming and logic take time - if you leave it to the last<br>minute, you might not have enough time to finish or might make silly mistakes that you otherwise<br>could avoid. Note that TAs and Instructors will not be able to answer last-minute questions!</p><p><strong>All work is to be handed in Mimir, our online code learning environment.</strong> You should, however,<br>write your code on an IDE such as IntelliJ.</p><p>To complete this assignment, you will need to know about:</p><ul><li>Basic Java</li><li>Conditionals</li><li>Boolean Variables</li><li>Simple Input Validation</li><li>Loops</li><li>1D, 2D Arrays</li><li>Methods</li></ul><p>Your code <strong>must compile</strong>. If it does not compile, you will receive a 0 (zero) on that portion of the<br>assignment, and no partial marks will be given.</p><p>Remember that students who <strong><em>hardcode</em></strong> their outputs to match the test cases in Mimir will<br>receive a <strong>zero</strong> on the entire assignment.</p><p><strong>Grading Scheme:</strong> Please see the grading scheme at the end of this document.</p><p><strong>Coding Style:</strong> You must proper variable names and comments. Please follow the guidelines on<br><a href="https://web.cs.dal.ca/~franz/CodingStyle.html" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html</a></p><p><strong>You can create more methods than the ones described in the assignment if you want.</strong></p><h2 id="Problem-1-–-Calculating-final-marks"><a href="#Problem-1-–-Calculating-final-marks" class="headerlink" title="Problem 1 – Calculating final marks"></a>Problem 1 – Calculating final marks</h2><p>In this assignment, we will write a program that will calculate the final marks for a student in a<br>course similar to CSCI 1110. In this first problem, we will calculate the final score for an<br>individual student. In the next problems, we will compute class data.</p><p>For now, your program will read the student’s banner number (String), test, assignments,<br>practicums and PoDs scores (int), always in this order.</p><p><strong>This class has a fixed number of grading assessments and weights:</strong></p><p><strong>1.</strong> Tests: 3 (25% of the final score)<br><strong>2.</strong> Assignments: 5 (30% of the final score)<br><strong>3.</strong> Practicums: 4 (35% of the final score)<br><strong>4.</strong> PoDs: 1 (10% of the final score)</p><p>You will write two static methods:</p><ul><li>String scoreToLetterGrade(double): This method will receive a grade as a<br>  numeric mark and convert to a letter grade. You must use the grade conversion found in<br>  <a href="https://www.dal.ca/campus_life/academic-support/grades-and-student-records/grade-" target="_blank" rel="noopener">https://www.dal.ca/campus_life/academic-support/grades-and-student-records/grade-</a><br>  scale-and-definitions.html</li><li>double readAssessmentScores(int, boolean, Scanner): This<br>  method is optional (but highly recommended). It can be used to simplify reading input<br>  from the user. The method has three parameters: the number of grades it should read<br>  from the user (e.g.: 3 for tests), a boolean variable if the method should drop the lowest<br>  mark, a reference to the Scanner created in the main method.</li></ul><p>You will calculate the final score as follows:</p><ul><li>Multiply the average of each grade item by its weight.<br>  o For the Assignments great item, you should drop the lowest score</li><li>Sum each grade item together after multiplying them by their weights</li><li>Convert the score into the final mark using the scoreToLetterGrade method</li></ul><p>After reading each assessment scores and calculating the final mark, your program will print the<br>student’s banner number and the final mark.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Input</span> <span class="string">B00123456</span> <span class="number">90</span> <span class="number">95</span> <span class="number">100</span> <span class="number">85</span> <span class="number">90</span> <span class="number">90</span> <span class="number">99</span> <span class="number">10</span> <span class="number">100</span> <span class="number">95</span> <span class="number">100</span> <span class="number">100</span> <span class="number">98</span></span><br><span class="line"><span class="attr">Output Student:</span> <span class="string">B00123456</span> <span class="bullet">-</span> <span class="string">A+</span></span><br></pre></td></tr></table></figure><h2 id="Problem-2-–-Multiple-Students-Class-Statistics"><a href="#Problem-2-–-Multiple-Students-Class-Statistics" class="headerlink" title="Problem 2 – Multiple Students, Class Statistics"></a>Problem 2 – Multiple Students, Class Statistics</h2><p>Now, you will modify your program so it reads grades for multiple students in a class. You can<br>copy your solution from P1 into P2 and use it as a starter code. The program will calculate the<br>final mark for each student in the same way as Problem 1.</p><p>Your program will first read the number of students in the class; then, it will read each student’s<br>information and print the student’s banner and final mark. After, your program will print the<br>class’ averages of tests, assignments, practicums, and pods. You must limit the output to two<br>decimal points.</p><p><strong>For this problem, you might have to use 1D or 2D Arrays. You CANNOT use ArrayLists or any<br>other List collections. Failure to use arrays will result in a score of zero in the problem.</strong></p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Input</span> <span class="number">3</span></span><br><span class="line"><span class="string">B00123456</span> <span class="number">90</span> <span class="number">95</span> <span class="number">100</span> <span class="number">85</span> <span class="number">90</span> <span class="number">90</span> <span class="number">99</span> <span class="number">10</span> <span class="number">100</span> <span class="number">95</span> <span class="number">100</span> <span class="number">100</span> <span class="number">98</span></span><br><span class="line"><span class="string">B00408996</span> <span class="number">30</span> <span class="number">12</span> <span class="number">45</span> <span class="number">40</span> <span class="number">90</span> <span class="number">30</span> <span class="number">45</span> <span class="number">60</span> <span class="number">55</span> <span class="number">65</span> <span class="number">32</span> <span class="number">80</span> <span class="number">50</span></span><br><span class="line"><span class="string">B00989439</span> <span class="number">85</span> <span class="number">80</span> <span class="number">79</span> <span class="number">90</span> <span class="number">80</span> <span class="number">77</span> <span class="number">88</span> <span class="number">90</span> <span class="number">87</span> <span class="number">96</span> <span class="number">81</span> <span class="number">83</span> <span class="number">80</span></span><br><span class="line"><span class="string">Output</span> <span class="string">B00123456</span> <span class="string">A+</span></span><br><span class="line"><span class="string">B00408996</span> <span class="string">D</span></span><br><span class="line"><span class="string">B00989439</span> <span class="string">A-</span></span><br><span class="line"><span class="attr">Class Averages:</span></span><br><span class="line"><span class="attr">Tests: 68.44 - Assignments: 78.92 - Practicums:</span></span><br><span class="line"><span class="attr">81.17 - PoDs:</span> <span class="number">76</span><span class="string">.</span></span><br></pre></td></tr></table></figure><h2 id="Problem-3-–-Class’-Median"><a href="#Problem-3-–-Class’-Median" class="headerlink" title="Problem 3 – Class’ Median"></a>Problem 3 – Class’ Median</h2><p>In this last problem, you will calculate the median for each grade item. The median is defined as<br>“a value in an ordered set of values below and above which there is an equal number of values<br>or which is the arithmetic mean of the two middle values if there is no one middle number.”<br>The wiki has more info on it: <a href="https://en.wikipedia.org/wiki/Median" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Median</a></p><p>To calculate a median, you will need a sequence of numbers (in our case marks) ordered from<br>the smallest to the largest (you can use Arrays.sort to array sorted).</p><p>You must create a new static method:</p><ul><li>double getMedian(double[]): This method will receive a 1D array of<br>  numbers, make a copy of it, and sort the numbers from the smallest to the largest. Then<br>  the method will compute the median and return its value. <strong>Do not sort the original array</strong><br>  <strong>received as a parameter, or you will lose marks.</strong></li></ul><p>Your program will work the same way as problem 2. After it prints the average, it will then print<br>the median for each grade item according to the example below.</p><p><strong>For this problem, you must use 1D or 2D Arrays. You CANNOT use ArrayLists or any other List<br>collections. Failure to use arrays will result in a score of zero in the problem.</strong></p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Input</span> <span class="number">3</span></span><br><span class="line"><span class="string">B00123456</span> <span class="number">90</span> <span class="number">95</span> <span class="number">100</span> <span class="number">85</span> <span class="number">90</span> <span class="number">90</span> <span class="number">99</span> <span class="number">10</span> <span class="number">100</span> <span class="number">95</span> <span class="number">100</span> <span class="number">100</span> <span class="number">98</span></span><br><span class="line"><span class="string">B00408996</span> <span class="number">30</span> <span class="number">12</span> <span class="number">45</span> <span class="number">40</span> <span class="number">90</span> <span class="number">30</span> <span class="number">45</span> <span class="number">60</span> <span class="number">55</span> <span class="number">65</span> <span class="number">32</span> <span class="number">80</span> <span class="number">50</span></span><br><span class="line"><span class="string">B00989439</span> <span class="number">85</span> <span class="number">80</span> <span class="number">79</span> <span class="number">90</span> <span class="number">80</span> <span class="number">77</span> <span class="number">88</span> <span class="number">90</span> <span class="number">87</span> <span class="number">96</span> <span class="number">81</span> <span class="number">83</span> <span class="number">80</span></span><br><span class="line"><span class="string">Output</span> <span class="string">B00123456</span> <span class="string">A+</span></span><br><span class="line"><span class="string">B00408996</span> <span class="string">D</span></span><br><span class="line"><span class="string">B00989439</span> <span class="string">A-</span></span><br><span class="line"><span class="attr">Class Averages:</span></span><br><span class="line"><span class="attr">Tests: 68.44 - Assignments: 78.92 - Practicums:</span></span><br><span class="line"><span class="attr">81.17 - PoDs:</span> <span class="number">76</span><span class="string">.</span></span><br><span class="line"><span class="attr">Class Medians:</span></span><br><span class="line"><span class="attr">Tests: 81.33 - Assignments: 87.00 - Practicums:</span></span><br><span class="line"><span class="attr">86.75 - PoDs:</span> <span class="number">80</span><span class="string">.</span></span><br></pre></td></tr></table></figure><h2 id="Grading-Scheme"><a href="#Grading-Scheme" class="headerlink" title="Grading Scheme"></a>Grading Scheme</h2><p>Each problem on the assignment will be graded based on three criteria:</p><h3 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h3><p>“Does it work according to specifications?” This is determined in an automated fashion by<br>running your program on a number of inputs and ensuring that the outputs match the expected<br>outputs. The score is determined based on the number of tests that your program passes.</p><h3 id="Quality-of-Solution"><a href="#Quality-of-Solution" class="headerlink" title="Quality of Solution"></a>Quality of Solution</h3><p>“Is it a good solution?” This considers whether the solution is correct, efficient, covers boundary<br>conditions, does not have any obvious bugs, etc. This is determined by visual inspection of the<br>code. Initially full marks are given to each solution and marks are deducted based on faults<br>found in the solution.</p><h3 id="Code-Clarity"><a href="#Code-Clarity" class="headerlink" title="Code Clarity"></a>Code Clarity</h3><p>“Is it well written?” This considers whether the solution is properly formatted, well-<br>documented, and follows coding style guidelines<br>(<a href="https://web.cs.dal.ca/~franz/CodingStyle.html)" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html)</a>. A single code clarity score is assigned for all<br>solutions. If your program does not compile, it is considered non-functional and of extremely<br>poor quality, meaning you will receive 0 for the solution.</p><h4 id="PROBLEM-PARTIAL"><a href="#PROBLEM-PARTIAL" class="headerlink" title="PROBLEM PARTIAL"></a>PROBLEM PARTIAL</h4><h4 id="POINTS"><a href="#POINTS" class="headerlink" title="POINTS"></a>POINTS</h4><h4 id="POINTS-1"><a href="#POINTS-1" class="headerlink" title="POINTS"></a>POINTS</h4><h4 id="PROBLEM-1"><a href="#PROBLEM-1" class="headerlink" title="PROBLEM 1"></a>PROBLEM 1</h4><h4 id="40"><a href="#40" class="headerlink" title="40"></a>40</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Functionality <span class="number">30</span></span><br><span class="line">Quality of Solution <span class="meta">&amp;</span></span><br><span class="line">Code Clarity</span><br></pre></td></tr></table></figure><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><h4 id="PROBLEM-2"><a href="#PROBLEM-2" class="headerlink" title="PROBLEM 2"></a>PROBLEM 2</h4><h4 id="40-1"><a href="#40-1" class="headerlink" title="40"></a>40</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Functionality <span class="number">30</span></span><br><span class="line">Quality of Solution <span class="meta">&amp;</span></span><br><span class="line">Code Clarity</span><br></pre></td></tr></table></figure><h4 id="10-1"><a href="#10-1" class="headerlink" title="10"></a>10</h4><h4 id="PROBLEM-3-20"><a href="#PROBLEM-3-20" class="headerlink" title="PROBLEM 3 20"></a>PROBLEM 3 20</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Functionality <span class="number">10</span></span><br><span class="line">Quality of Solution <span class="meta">&amp;</span></span><br><span class="line">Code Clarity</span><br></pre></td></tr></table></figure><h4 id="10-2"><a href="#10-2" class="headerlink" title="10"></a>10</h4><h4 id="TOTAL"><a href="#TOTAL" class="headerlink" title="TOTAL"></a>TOTAL</h4><h4 id="100-100"><a href="#100-100" class="headerlink" title="100 100"></a>100 100</h4>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI561-Homework3</title>
    <link href="cplusplusdaixie.com/CSCI561-Homework3.html"/>
    <id>cplusplusdaixie.com/CSCI561-Homework3.html</id>
    <published>2023-07-17T01:23:34.000Z</published>
    <updated>2023-07-17T01:24:57.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI-561-Foundations-of-Artificial-Intelligence"><a href="#CSCI-561-Foundations-of-Artificial-Intelligence" class="headerlink" title="CSCI- 561  - Foundations of Artificial Intelligence"></a>CSCI- 561  - Foundations of Artificial Intelligence</h3><p>Homework 3</p><p>Image from imdb.com<br><strong>Guidelines</strong></p><p>This is a programming assignment. You will be provided with sample inputs and outputs (see<br>below). Please understand that the goal of the samples is to check that you can correctly parse<br>the problem definition and generate a correctly formatted output. The samples are very simple<br>and you should not assume that if your program works on the samples it will work on all test<br>cases. There will be more complex test cases and it is your task to make sure that your program<br>will work correctly on any valid input. You are encouraged to try your own test cases to check<br>how your program would behave in some complex special case that you might think of. Since<br><strong>each homework is checked via an automated A.I. script</strong> , your output should match the example<br>format <strong><em>exactly</em></strong>. Failure to do so will most certainly cost some points. The output format is simple<br>and examples are provided. You should upload and test your code on vocareum.com, and you<br>will submit it there. You may use any of the programming languages and versions thereof<br>provided by vocareum.com.</p><p><strong>Grading</strong></p><p>Your code will be tested as follows: Your program should take no command-line arguments. It<br>should read a text file called “input.txt” in the current directory that contains a problem<br>definition. It should write a file “output.txt” with your solution. Format for files input.txt and<br>output.txt is specified below. End-of-line convention is Unix (since vocareum is a Unix system).</p><p>The grading A.I. script will, 50 times:</p><ul><li>Create an input.txt file, delete any old output.txt file.</li><li>Run your code.</li><li>Compare output.txt created by your program with the correct one.</li><li>If your outputs for all 50 test cases are correct, you get 100 points.</li><li>If one or more test case fails, you <strong>lose 2 points for each failed test case</strong>. (note that one<br>  test case involves several answers in this HW; if any answer on a given test case is wrong,<br>  then the whole case is counted as wrong).</li></ul><p>Note that if your code does not compile, or somehow fails to load and parse input.txt, or writes<br>an incorrectly formatted output.txt, or no output.txt at all, or OuTpUt.TxT, <strong>you will get zero<br>points</strong>. Please test your program with the provided sample files to avoid this. You can submit<br>code as many times as you wish on vocareum, and the last submitted version will be used for<br>grading.</p><p><strong>Academic Honesty and Integrity</strong></p><p>All homework material is checked vigorously for dishonesty using several methods. All detected<br>violations of academic honesty are forwarded to the Office of Student Judicial Affairs. To be safe<br>you are urged to err on the side of caution. Do not copy work from another student or off the<br>web. Sanctions for dishonesty are reflected in <em>your permanent record</em> and can negatively impact<br>your future success. As a general guide:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> copy code <span class="keyword">or</span> written material <span class="keyword">from</span> another student. Even single <span class="keyword">lines</span> <span class="keyword">of</span> code</span><br><span class="line">should <span class="keyword">not</span> be copied.</span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> collaborate <span class="keyword">on</span> this assignment. The assignment <span class="keyword">is</span> <span class="keyword">to</span> be solved individually.</span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> copy code <span class="keyword">off</span> the web. This <span class="keyword">is</span> easier <span class="keyword">to</span> detect <span class="keyword">than</span> you may think.</span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> <span class="keyword">share</span> <span class="keyword">any</span> custom <span class="keyword">test</span> cases you may <span class="keyword">create</span> <span class="keyword">to</span> <span class="keyword">check</span> your program’s behavior <span class="keyword">in</span></span><br><span class="line">more complex scenarios <span class="keyword">than</span> the simplistic ones considered below.</span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> copy code <span class="keyword">from</span> past students. We <span class="keyword">keep</span> copies <span class="keyword">of</span> past <span class="keyword">work</span> <span class="keyword">to</span> <span class="keyword">check</span> <span class="keyword">for</span> this. Even</span><br><span class="line">though this problem differs <span class="keyword">from</span> those <span class="keyword">of</span> previous <span class="keyword">years</span>, <span class="keyword">do</span> <span class="keyword">not</span> try <span class="keyword">to</span> copy <span class="keyword">from</span></span><br><span class="line">homework submissions <span class="keyword">of</span> previous years.</span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> ask <span class="keyword">on</span> piazza how <span class="keyword">to</span> implement <span class="keyword">some</span> <span class="keyword">function</span> <span class="keyword">for</span> this homework, <span class="keyword">or</span> how <span class="keyword">to</span></span><br><span class="line">calculate something needed <span class="keyword">for</span> this homework.</span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> post code <span class="keyword">on</span> piazza asking whether <span class="keyword">or</span> <span class="keyword">not</span> it <span class="keyword">is</span> correct. This <span class="keyword">is</span> a violation <span class="keyword">of</span></span><br><span class="line">academic integrity because it biases other students who may <span class="keyword">read</span> your post.</span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> post <span class="keyword">test</span> cases <span class="keyword">on</span> piazza asking <span class="keyword">for</span> what the correct solution should be.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> ask the professor <span class="keyword">or</span> TAs <span class="keyword">if</span> you <span class="keyword">are</span> unsure about whether certain actions constitute</span><br><span class="line">dishonesty. It <span class="keyword">is</span> better <span class="keyword">to</span> be <span class="keyword">safe</span> <span class="keyword">than</span> sorry.</span><br></pre></td></tr></table></figure><p><strong>Project Description</strong></p><p>You have finally found your dream job running an academy for puppies. You are so passionate<br>about it, you worked long hours and your business is <em>booming</em>. There is only one problem: You<br>have enlisted so many pups into your academy that you are starting to lose track of everything.<br>Letting a puppy start the academy depends on their vaccination and health status. Even once<br>they’re in, what they can train for and which other puppies they interact with depends on their<br>history in the academy. Thankfully, you have a background in AI, so you decide to develop an<br>automated system that can evaluate all of the information you have and alert you and your<br>employees whether an action is possible. The system can also provide an instant guideline to<br>keep owners informed and minimize the risks to these adorable puppies.</p><p>You sit down to develop a beta version of the system using <strong><em>first-order logic resolution</em></strong>. Puppy<br>status and history data will be encoded as first order logic clauses in the knowledge base. The<br>knowledge bases contain sentences with the following defined operators:</p><p>NOT X ~X<br>X OR Y X | Y<br>X AND Y X &amp; Y<br>X IMPLIES Y X =&gt; Y</p><p>The program takes a query of n actions and provides a logical conclusion to whether each can be<br>performed or not.</p><p><strong>Format for input.txt:</strong></p><p><n = number of queries></n></p><p><query 1><br>…</query></p><p><query n></query></p><p><k = number of given sentences in the knowledge base></k></p><p><sentence 1><br>…</sentence></p><sentence k><p>The first line contains an integer _N_ specifying the number of queries. The following _N_ lines contain<br>one query per line. The line after the last query contains an integer _K_ specifying the number of<br>sentences in the knowledge base. The remaining _K_ lines contain the sentences in the knowledge<br>base, one sentence per line.</p><p><strong><em>Query format:</em></strong> Each query will be a single literal of the form Predicate(Constant_Arguments) or<br>~Predicate(Constant_Arguments) and will not contain any variables. Each predicate will have<br>between 1 and 25 constant arguments. Two or more arguments will be separated by commas.</p><p><strong><em>KB format:</em></strong> Each sentence in the knowledge base is written in one of the following forms:</p><h1 id="1-An-implication-of-the-form-p-1-∧-p-2-∧-…-∧-pm-⇒-q-where-its-premise-is-a-conjunction-of"><a href="#1-An-implication-of-the-form-p-1-∧-p-2-∧-…-∧-pm-⇒-q-where-its-premise-is-a-conjunction-of" class="headerlink" title="1) An implication of the form p 1 ∧ p 2 ∧ … ∧ pm ⇒ q, where its premise is a conjunction of"></a>1) An implication of the form p 1 ∧ p 2 ∧ … ∧ pm ⇒ q, where its premise is a conjunction of</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">literals <span class="keyword">and</span> its conclusion is <span class="keyword">a</span> single literal. Remember that <span class="keyword">a</span> literal is <span class="keyword">an</span> atomic <span class="keyword">sentence</span></span><br><span class="line"><span class="keyword">or</span> <span class="keyword">a</span> negated atomic <span class="keyword">sentence</span>.</span><br><span class="line"><span class="number">2</span>) A single literal: q <span class="keyword">or</span> ~ q</span><br></pre></td></tr></table></figure><p>Notes:</p><ol><li>&amp; denotes the <em>conjunction</em> operator.</li><li>| denotes the <em>disjunction</em> operator. It will not appear in the queries nor in the KB given as<br> input. But you will likely need it to create your proofs.</li><li>=&gt; denotes the <em>implication</em> operator.</li><li>~ denotes the <em>negation</em> operator.</li><li>No other operators besides &amp;, =&gt;, and ~ are used in the knowledge base.</li><li>There will be no parentheses in the KB except as used to denote arguments of predicates.</li><li>Variables are denoted by a single lowercase letter.</li><li>All predicates (such as Vaccinated) and constants (such as Hayley) are case sensitive<br> alphabetical strings that begin with uppercase letters.</li><li>Each predicate takes at least one argument. Predicates will take at most 25 arguments. A<br> given predicate name will not appear with different number of arguments.</li><li>There will be at most 10 queries and 100 sentences in the knowledge base.</li><li>See the sample input below for spacing patterns.</li><li>You can assume that the input format is exactly as it is described.</li><li>There will be no syntax errors in the given input.</li><li>The KB will be true (i.e., will not contain contradictions).</li></ol><p><strong>Format for output.txt:</strong></p><p>For each query, determine if that query can be inferred from the knowledge base or not, one<br>query per line:</p><p><answer 1><br>…</answer></p><answer n><p>Each answer should be either TRUE if you can prove that the corresponding query sentence is<br>true given the knowledge base, or FALSE if you cannot.</p><p><strong>Notes and hints:</strong></p><ul><li>Please name your program “ <strong>homework.xxx</strong> ” where ‘xxx’ is the extension for the<br>  programming language you choose. (“ <strong>py</strong> ” for python 3 , “ <strong>cpp</strong> ” for C++, and “ <strong>java</strong> ” for Java).<br>  If you are using C++11, then the name of your file should be “homework11.cpp” and if<br>  you are still using python2 even though it’s not supported anymore, then the name of<br>  your file should be “homework 2 .py”.</li><li>If you decide that the given statement can be inferred from the knowledge base, every<br>  variable in each sentence used in the proving process should be unified with a Constant<br>  (i.e., unify variables to constants before you trigger a step of resolution).</li><li>All variables are assumed to be universally quantified. There is no existential quantifier<br>  in this homework. There is no need for Skolem functions or Skolem constants.</li><li>Operator priorities apply (negation has higher priority than conjunction). There will be<br>  no parentheses in the sentences, other than around arguments of predicates.</li><li>The knowledge base is consistent.</li><li>If you run into a loop and there is no alternative path you can try, report FALSE. An<br>  example for this would be having two rules <strong><em>(1)</em></strong> A(x) =&gt; B(x) and <strong><em>(2)</em></strong> B(x) =&gt; A(x) and<br>  wanting to prove A(Teddy). In this case your program should report FALSE.</li><li>Note that the KB is not in Horn form because we allow more than one positive literal. So<br>  you indeed must use resolution and cannot use generalized Modus Ponens.</li></ul><p><strong>Example 1:</strong></p><p>For this input.txt:</p><p>1<br>Play(Hayley,Teddy)<br>6<br>Vaccinated(x) =&gt; Start(x)<br>Start(x) &amp; Healthy(x) =&gt; Ready(x)<br>Ready(x) &amp; Ready(y) =&gt; Play(x,y)<br>Vaccinated(Hayley)<br>Healthy(Hayley)<br>Healthy(Teddy)</p><p>your output.txt should be:</p><p>FALSE</p><p><strong>Example 2:</strong></p><p>For this input.txt:</p><p>2<br>Learn(Sit,Ares)<br>Graduate(Hayley)<br>8<br>Ready(x) =&gt; Train(Come,x)<br>Healthy(x) &amp; Train(y,x) =&gt; Learn(y,x)<br>Learn(Come,x) =&gt; Train(Sit,x)<br>Learn(Come,x) &amp; Learn(Sit,x) =&gt; Train(Down,x)<br>Learn(Down,x) =&gt; Graduate(x)<br>Ready(Hayley)<br>Ready(Ares)<br>Healthy(Ares)</p><p>your output.txt should be:</p><p>TRUE<br>FALSE</p><p><strong>Example 3:</strong></p><p>For this input.txt:</p><p>3<br>Play(Ares,Teddy)<br>Train(Down,Hayley)<br>Play(Ares,Hayley)<br>10<br>Healthy(x) =&gt; Ready(x)<br>Ready(x) =&gt; Train(Come,x)<br>Healthy(x) &amp; Train(y,x) =&gt; Learn(y,x)<br>Learn(Come,x) =&gt; Train(Sit,x)<br>Learn(Come,x) &amp; Learn(Sit,x) =&gt; Train(Down,x)<br>Learn(Down,x) =&gt; Graduate(x)<br>Ready(x) &amp; Ready(y) =&gt; Play(x,y)<br>Healthy(Ares)<br>Healthy(Hayley)<br>Learn(Come,Hayley)</p><p>your output.txt should be:</p><p>FALSE<br>TRUE<br>TRUE</p><p><strong>Example 4: (note: a previous typo has been corrected)</strong></p><p>For this input.txt:</p><p>5<br>Greet(Hayley,TrainerJosh)<br>PlayFetch(Luna,TrainerBibek)<br>ShowOff(Ares,TrainerChristina)<br>Graduate(Hayley)<br>Play(Leia,Teddy)<br>50<br>Vaccinated(x) =&gt; Start(x)<br>Start(x) &amp; Healthy(x) =&gt; Ready(x)<br>RespondToName(x) =&gt; Train(Come,x)<br>Ready(x) &amp; Train(y,x) =&gt; Learn(y,x)<br>Learn(Come,x) =&gt; Train(Sit,x)<br>Learn(Come,x) &amp; Learn(Sit,x) =&gt; Train(Down,x)<br>Learn(Sit,x) =&gt; Train(Paw,x)<br>Learn(Paw,x) &amp; Working(y) =&gt; Greet(x,y)<br>Scared(x,y) =&gt; ~Socialize(x,y)<br>Ready(x) &amp; Ready(y) &amp; Socialize(x,y) &amp; Socialize(y,x) =&gt; Play(x,y)<br>Learn(Get,x) =&gt; Train(Drop,x)<br>Learn(Come,x) &amp; HoldToy(x) =&gt; Train(Get,x)<br>RespondToName(x) &amp; HoldToy(x) =&gt; Train(Drop,x)<br>Learn(Come,x) &amp; Learn(Get,x) &amp; Learn(Drop,x) =&gt; Train(Fetch,x)<br>Learn(Fetch,x) &amp; Working(y) =&gt; PlayFetch(x,y)<br>Learn(Down,x) =&gt; Train(Roll,x)<br>Learn(Roll,x) &amp; Working(y) =&gt; ShowOff(x,y)<br>RespondToName(x) &amp; Desensitized(Leash,x) =&gt; Train(WalkIndoors,x)<br>Learn(WalkIndoors,x) &amp; Desensitized(Cars,x) =&gt; Train(WalkOutdoors,x)<br>Learn(WalkOutdoors,x) &amp; Learn(Down,x) =&gt; Graduate(x)<br>~Sensitive(y,x) =&gt; Desensitized(y,x)<br>Sensitive(y,x) =&gt; TrainDesensitized (y,x)<br>Sensitive(y,x) &amp; TrainDesensitized(y,x) =&gt; Desensitized(y,x)<br>Vaccinated(Hayley)<br>Vaccinated(Ares)<br>~Vaccinated(Leia)<br>Vaccinated(Luna)<br>Vaccinated(Teddy)<br>~Healthy(Ares)<br>Healthy(Hayley)<br>Healthy(Luna)<br>Healthy(Leia)<br>Healthy(Teddy)<br>~Scared(Leia,Teddy)<br>Scared(Teddy,Leia)<br>~Sensitive(Leash,Hayley)<br>~Sensitive(Cars,Teddy)<br>Sensitive(Cars,Luna)<br>~Sensitive(Cars,Hayley)<br>Working(TrainerChristina)<br>~Working(TrainerJosh)<br>Working(TrainerBibek)<br>RespondToName(Hayley)<br>RespondToName(Luna)<br>RespondToName(Ares)<br>HoldToy(Luna)<br>~HoldToy(Leia)<br>~RespondToName(Leia)<br>Sensitive(Cars,Leia)</p><p>your output.txt should be:</p><p>FALSE<br>TRUE<br>FALSE<br>TRUE<br>FALSE</p></answer></sentence>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSC335-Project1-Mastermind</title>
    <link href="cplusplusdaixie.com/CSC335-Project1-Mastermind.html"/>
    <id>cplusplusdaixie.com/CSC335-Project1-Mastermind.html</id>
    <published>2023-07-14T00:52:00.000Z</published>
    <updated>2023-07-14T00:52:54.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mastermind"><a href="#Mastermind" class="headerlink" title="# Mastermind"></a># Mastermind</h3><p>Your first project is to implement the game of Mastermind. In this game, the computer chooses 4 pegs each with one of 6 colors.  The player’s job is then to guess the colors that the computer has chosen in the proper order. After each guess by the player, if the player’s guess is not correct, the computer will give two numbers as feedback.  The first number is how many pegs are the proper color and in the proper position. The second number is how many pegs are the proper color, but not in the correct position.</p><p>The game ends when the color string is correct – and the player wins – or they give 10 incorrect guesses – and they lose.<br>What you need to do:</p><ul><li>Generate a random computer guess of four colors out of:<ul><li><strong>R</strong>ed, <strong>O</strong>range, <strong>Y</strong>ellow, <strong>G</strong>reen, <strong>B</strong>lue, <strong>P</strong>urple</li></ul></li><li>Read a guess from the user as a string of colors</li><li>Score the guess, and report the two values back to the user</li><li>Allow the user to continue to guess until they get it correct, or reach 10 turns and they lose.</li><li>Allow the user to play the game multiple times</li></ul><p><strong>Example:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Welcome</span> <span class="string">to</span> <span class="string">Mastermind!</span></span><br><span class="line"><span class="string">Would</span> <span class="string">you</span> <span class="string">like</span> <span class="string">to</span> <span class="string">play?</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Enter guess number 1:</span> <span class="string">rrrr</span></span><br><span class="line"><span class="attr">Colors in the correct place:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">Colors correct but in wrong position:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Enter guess number 2:</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id="Model-View-Controller"><a href="#Model-View-Controller" class="headerlink" title="Model/View/Controller"></a>Model/View/Controller</h2><p>A common pattern for writing programs is known as MVC (Model/View/Controller). This pattern applies whenever we have some problem we can model (like a game board) and a user interface that displays and interacts with that model (the view). The controller is the code that manipulates the model in response to actions from the view.</p><p>The idea of MVC is that each part of the program is sufficiently abstracted from each other that they can change without needing to modify the other parts. For instance, our view is currently a textual interface, but later in the course, we could alter this to be a graphical user interface. If we did that, ideally we would not need to change the model or the controller, only the view code.</p><p>For us, the implementation of the model is very simple: either an array or String of colors (ints, chars, etc.) that represents the randomly-chosen colors we are trying to guess.</p><p>The view is a simple text-based program as we’ve written many times before. It will prompt the user for their guesses and display if the guess is correct, or show the two statistics that we must calculate.</p><p>The controller links these two things together. We will then make three classes:</p><ol><li>A main class (named Mastermind) that serves as our view, creates the Model and Controller, and deals with user input and output.</li><li>A model class (named MastermindModel) that stores the representation of the computer’s guess and uses a constructor and accessors to create and query the solution the player is trying to guess, defined as follows:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MastermindModel</span> </span>&#123;</span><br><span class="line"><span class="comment">//private variable(s) to store the answer</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MastermindModel</span><span class="params">()</span> </span>&#123; <span class="comment">/* Make the answer */</span> &#125;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getColorAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="comment">/* Return color at position index as a char</span></span><br><span class="line"><span class="comment">(first converted if stored as a number) */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>A controller class named (MastermindController) that is defined as follows:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MastermindController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MastermindController</span><span class="params">(MastermindModel model)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCorrect</span><span class="params">(String guess)</span> </span>&#123; ... &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRightColorRightPlace</span><span class="params">(String guess)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRightColorWrongPlace</span><span class="params">(String guess)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You are to provide the implementation of all three classes, but you must define your controller and model using at least the methods above. Any additional methods or fields you want to add must be private to your classes.</p><h2 id="Hints-and-Notes"><a href="#Hints-and-Notes" class="headerlink" title="Hints and Notes"></a>Hints and Notes</h2><ul><li>For right color, wrong place, you will need to not count colors from the guess that are the right color in the right place.</li><li>You also need to avoid double counting a color as being in the wrong position</li><li>To help you solve these issues, you may find it necessary to make some auxiliary arrays that keep track of what you have used already</li><li><p>You may want to play the game on paper where you consider various guesses and solutions and score them to see the issue. </p></li><li><p>The perfect player can always win this game in 7 guesses or less.</p></li></ul><h2 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h2><p>Make sure to periodically commit and push your changes to github. </p><p>We will grade the last commit that was pushed prior to the deadline.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSC115-A7</title>
    <link href="cplusplusdaixie.com/CSC115-A7.html"/>
    <id>cplusplusdaixie.com/CSC115-A7.html</id>
    <published>2023-07-12T01:05:56.000Z</published>
    <updated>2023-07-12T01:07:00.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-7"><a href="#Assignment-7" class="headerlink" title="Assignment 7"></a>Assignment 7</h3><p><strong>Reminder:</strong> Your code is to be designed and written by only you and not to be shared with<br>anyone else. See the Course Outline for details explaining the policies on Academic Integrity.<br>Submissions that violate the Academic Integrity policy will be forwarded directly to the<br>Computer Science Academic Integrity Committee.<br>All materials provided to you for this work are copyrighted, these and all solutions you create<br>for this work cannot be shared in any form (digital, printed or otherwise). Any violations of<br>this will be investigated and reported to Academic Integrity.</p><h2 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h2><ul><li>More practice implementing linked list data structure</li><li>Creating/using a stack abstract data type.</li><li>Use exceptions for error handling</li><li>Creating/using generic data types</li></ul><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this assignment we continue to explore different data structures in this course – and in particular<br>concept of abstract data types by implementing a generic Stack.</p><p>Additionally, you will do some problem solving to complete an application that will make use of<br>your generic stack as well as Java’s built-in generic List and LinkedList abstract data types.</p><p>More specifically:</p><ol><li>You will create the class named StackRefBased which will implement the interface<br> named Stack (ie., push, pop, isEmpty, etc.) using the same kind of nodes we have<br> seen in linked lists. As part of this step you will test your implementation by working with a<br> stack containing Integer objects.</li><li>Using your StackRefBased and several other classes provided to you, you will<br> complete the reorderTrains method in the Solver class.</li></ol><h2 id="Submission-and-Grading"><a href="#Submission-and-Grading" class="headerlink" title="Submission and Grading"></a>Submission and Grading</h2><p>Submit your StackRefBased.java with the completed methods through the assignment link<br>in BrightSpace.</p><ul><li>You <strong>must</strong> name the methods in StackRefBased.java as specified in the given<br>  interface and as used in A 7 Tester.java or you will receive a <strong>zero grade</strong> as the<br>  tester will not compile.</li><li>If you chose not to complete some of the methods required, you <strong>must at least provide a</strong><br>  <strong>stub for the incomplete method</strong> in order for our tester to compile.</li><li>If you submit files that do not compile with our tester (ie. an incorrect filename, missing<br>  method, etc) you will receive a <strong>zero grade</strong> for the assignment.</li><li>Your code must <strong>not</strong> be written to specifically pass the test cases in the testers, instead,<br>  it must work on other inputs. We may change the input values when we run the tests<br>  and we will inspect your code for hard-coded solutions.</li><li><strong>ALL late</strong> and <strong>incorrect</strong> submissions will be given a <strong>ZERO</strong> grade.</li></ul><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>1) Download all java files provided in the Assignment folder on BrightSpace.</p><p>2) Add stubs for the missing methods in StackRefBased class.</p><p>3) Compile and run the test program with the -Xlint:unchecked flag as follows:<br>javac -Xlint:unchecked A7Tester.java<br>You will see there is a warning for an unchecked cast:<br>./StackRefBased.java: 94 : warning: [unchecked] unchecked cast<br>StackRefBased<t> otherStack = (StackRefBased<t>)other;<br>You can ignore this warning and continue with your assignment, the issue is mentioned in the<br>method’s precondition as well.<br>You should NOT ignore any of the other warnings. To get a report of the line numbers of the<br>warnings, delete all .class files in your folder and recompile with:<br>javac -Xlint:unchecked A7Tester.java</t></t></p><p>4) Implement each method in StackRefBased.java until all of the tests in the<br>testBasicStack method pass in A 7 Tester.java</p><p>5) Implement the reorderTrains method in the Solver class. Uncomment the call to<br>testTrains in the main of A7Tester.java to test your implementation.</p><p>The following UML diagram gives you an overview of the classes involved in this assignment.<br>The diagram does not include the Java classes from java.util package that you will use in this<br>assignment.</p><p>You can find the Java documentation for the List interface here:<br><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html</a></p><p>Within the List documentation are links to <strong><em>All Known Implementing Classes</em></strong> including the<br>LinkedList class.</p><p>This means you can use these classes already written for you in the java.util package!</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stack<span class="attribute">&lt;T&gt;</span></span><br><span class="line"><span class="attribute">&lt;&lt;interface&gt;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">size</span>() : <span class="keyword">int</span></span><br><span class="line">+ isEmpty() : <span class="keyword">boolean</span></span><br><span class="line">+ <span class="keyword">push</span>(T): <span class="keyword">void</span></span><br><span class="line">+ <span class="keyword">pop</span>() <span class="keyword">throws</span> StackEmptyException: T</span><br><span class="line">+ peek() <span class="keyword">throws</span> StackEmptyException: T</span><br><span class="line">+ makeEmpty() : <span class="keyword">void</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">StackEmptyException</span></span><br></pre></td></tr></table></figure><ul><li>msg</li></ul><ul><li>StackEmptyException(String)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RefBasedStack<span class="tag">&lt;<span class="name">T</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>top: StackNode<t></t></li></ul><ul><li>RefBasedStack()</li><li>RefBasedStack(List<t>)</t></li><li>equals(Object): boolean</li><li>toString(): String</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StackNode<span class="tag">&lt;<span class="name">T</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>data: T</li></ul><ul><li>next: StackNode<t></t></li><li>StackNode(T)</li><li>StackNode(T, StackNode<t>)</t></li><li>getValue(): T</li><li>getNext(): StackNode<t></t></li><li>setNext(StackNode<t>): void</t></li><li>toString(): String</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Solver</span></span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ reorderTrains(<span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; carOrder,</span><br><span class="line"><span class="built_in">List</span>&lt;CarMove&gt; moves) :<span class="built_in">boolean</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CarMove</span></span><br></pre></td></tr></table></figure><ul><li>location: String</li><li>destination: String</li></ul><ul><li>CarMove(String, String)</li><li>getLocation(): String</li><li>getDestination(): String</li><li>equals(Object): boolean</li><li>toString(): String</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NOTE:</span><br><span class="line">the underlining indicates the feature is static</span><br></pre></td></tr></table></figure><h2 id="Problem-Solving-–-Train-switching-yard"><a href="#Problem-Solving-–-Train-switching-yard" class="headerlink" title="Problem Solving – Train switching yard"></a>Problem Solving – Train switching yard</h2><p>In a train-switching yard, sometimes the order of cars must be changed to coincide with the order of<br>the train destinations enroute. The switching is done using a small side-track called a spur where the<br>operations are automated as long as the order of the operations is provided.<br>You are to write a method that will determine if the reordering is possible and if it is, provide a list<br>of the operations to be performed to achieve the proper ordering of train cars.</p><p>Your method will also be passed an empty List of CarMove objects that you will store the<br>operations to be performed for the reordering.<br>The CarMove class has been written for you to use.<br>Java’s List and LinkedList have been imported to the Solver class for you to use.<br>Examples of their use can be found in the A7Tester class.<br>See the Java API for the documentation of the methods available in the List interface:<br><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html</a></p><p>In your method you will create separate stacks to represent the input, spur and output tracks and a<br>list to hold CarMove objects that represent the operations to be performed for the reordering.</p><ul><li>You must initially push all of the Integer objects in the initial ordering of train cars onto<br>  an input track.</li><li>Train cars can then be moved from the input track to:<br>  o the output track (if it is the next car to be outputted)<br>  o the spur (if it is not the next car to be outputted)</li><li>A car can also be moved from the top of the spur to the output track.</li><li>A car <strong>cannot</strong> be moved to the input track from the spur OR from the output track.</li><li>The reordering is only possible if the values in the given list are unique and range from 1 to<br>  the length of the given input list.<br>  For example:<br>  {5, 4, 3, 2, 1} can be reordered<br>  {5, 4, 3, 2} cannot be reordered<br>  {4, 3, 2, 1} can be reordered<br>  { 1 , 3 , 5, 4, 2} can be reordered<br>  { 1 , 3 , 6, 4, 2} cannot be reordered<br>  { 18 , 3 , 56, 24, 2} cannot be reordered</li></ul><p>There are many ways to solve this problem, feel free to design your own algorithm as long as the<br>tracks (input, spur and output) are represented as stacks.</p><p>If you are having difficulty designing your own algorithm, the following pages describe an<br>approach with example runs and explanations of a potential algorithm. The algorithm on the<br>following pages provide a description that leverages a fourth stack that keeps track of operations as<br>they are considered. Note, it is not a hard requirement that your solution use this fourth stack but<br>your input, spur and output must be represented with a stack to receive marks for this part of the<br>assignment.</p><h3 id="Sample-runs-explained"><a href="#Sample-runs-explained" class="headerlink" title="Sample runs explained"></a>Sample runs explained</h3><p>The images for each example given show the three tracks: input, spur and output tracks at the<br>switching station. In your program, these tracks should be represented by three Stack objects.<br>The numbers on the input track are in random order based on the given input list, and we want the<br>numbers on the output track to be in ascending order, from left to right.<br>That is, if the output track is represented as a stack, the top should be the smallest number and the<br>bottom should be the biggest number.<br>Your method is given the initial order the train cars as a List of Integers</p><p><strong>In Example 1</strong> on the next page, the given input list is {5, 4, 3, 2, 1}<br>After the given list is pushed onto the input stack, it will look like this:</p><p>1  top of the stack<br>2<br>3<br>4<br>5  bottom of the stack</p><p>Therefore, in the image in Example 1, what you see on the input track (input stack) is:</p><p>5 4 3 2 1</p><p>where the value at the top of the stack is <strong>1</strong></p><p>Your algorithm should attempt to reorder these numbers using only the spur and the output.</p><p>In this example</p><ul><li>the input stack contains the values shown above</li><li>the spur and output tracks are empty.</li><li>since we know there are 5 values in the input stack we know the 5 needs to be pushed to the<br>  output stack first.</li><li>1 is at the top of the input, it cannot go to the output so we push this 1 to the spur: in -&gt; spur</li><li>2 is at the top of the input, it cannot go to the output so we push this 2 to the spur: in -&gt; spur</li><li>3 is at the top of the input, it cannot go to the output so we push this 3 to the spur: in -&gt; spur</li><li>4 is at the top of the input, it cannot go to the output so we push this 4 to the spur: in -&gt; spur</li><li>5 is at the top of the input, it can go to the output so we push this 5 to the output: in -&gt; out</li><li>4 is at the top of the spur, it can go to the output so we push this 4 to the output: spur - &gt; out</li><li>3 is at the top of the spur, it can go to the output so we push this 3 to the output: spur - &gt; out</li><li>2 is at the top of the spur, it can go to the output so we push this 2 to the output: spur - &gt; out</li><li>1 is at the top of the spur, it can go to the output so we push this 1 to the output: spur - &gt; out</li><li>The input and spur are both empty and since all the values have been pushed to the output track<br>  the method should return true and the result list moves should contain the ordered list of<br>  CarMove instances that make the reordering of the train cars possible:<br>  { in -&gt; spur, in -&gt; spur, in -&gt; spur, in -&gt; spur, in -&gt; out, spur -&gt; out, spur -&gt; out, spur -&gt; out, spur -&gt; out}</li></ul><p>Example 1<br>incoming carOrder List is {5,4,3,2,1}<br>In the image given below, the attempted CarMove operations are<br>stored in an additional temporary stack, where the bottom of the stack<br>holds the first attempted move and the top of the stack holds the last<br>attempted move.<br>Since the reordering is possible, the attempted CarMove operations<br>should be taken from the stack and added to the moves result List and the<br>method should return true.</p><h3 id="top-of-the"><a href="#top-of-the" class="headerlink" title="top of the"></a>top of the</h3><h3 id="input-stack"><a href="#input-stack" class="headerlink" title="input stack"></a>input stack</h3><p><strong>In Example 2</strong> on the next page, the given input list is { 1 , 3 , 5 , 4 , 2 }<br>After the given list is pushed onto the input stack, it will look like this:</p><p>2  top of the stack<br>4<br>5<br>3<br>1  bottom of the stack</p><p>Therefore, in the image in Example 2 , what you see on the input track (input stack) is:</p><p>1 3 5 4 2</p><p>where the value at the top of the stack is <strong>2</strong></p><p>Your algorithm should attempt to reorder these numbers using only the spur and the output.</p><p>In this example</p><ul><li>the input stack contains the values shown above</li><li>the spur and output tracks are empty</li><li>since we know there are 5 values in the input stack we know the 5 needs to be pushed to the<br>  output stack first.</li><li>2 is at the top of the input, it cannot go to the output so we push this 2 to the spur: in -&gt; spur</li><li>4 is at the top of the input, it cannot go to the output so we push this 4 to the spur: in -&gt; spur</li><li>5 is at the top of the input, it can go to the output so we push this 5 to the output: in -&gt; out</li><li>4 is at the top of the spur, it can go to the output so we push this 4 to the output: spur - &gt; out</li><li>3 is at the top of the input, it can go to the output so we push this 3 to the output: in - &gt; out</li><li>2 is at the top of the spur, it can go to the output so we push this 2 to the output: spur - &gt; out</li><li>1 is at the top of the input, it can go to the output so we push this 1 to the output: in - &gt; out</li><li>The input and spur are both empty and since all the values have been pushed to the output track<br>  the method should return true and the result list moves should contain the ordered list of<br>  CarMove instances that make the reordering of the train cars possible:<br>  { in -&gt; spur, in -&gt; spur, in -&gt; out, spur -&gt; out, in -&gt; out, spur -&gt; out, in -&gt; out}</li></ul><p>Example 2<br>incoming carOrder List is {1,3,5,4,2}<br>In the image given below, the attempted CarMove operations are<br>stored in an additional temporary stack, where the bottom of the stack<br>holds the first attempted move and the top of the stack holds the last<br>attempted move.<br>Since the reordering is possible, the attempted CarMove operations<br>should be taken from the stack and added to the moves result List and the<br>method should return true.</p><p><strong>In the Example 3</strong> on the next page, the given input list is {4,3,5,1,2}<br>After the given list is pushed onto the input stack, it will look like this:</p><p>2  top of the stack<br>1<br>5<br>3<br>4  bottom of the stack</p><p>Therefore, in the image in Example 3, what you see on the input track (input stack) is:</p><p>4 3 5 1 2</p><p>where the value at the top of the stack is <strong>2</strong></p><p>Your algorithm should attempt to reorder these numbers using only the spur and the output.</p><p>In this example</p><ul><li>the input stack contains the values shown above</li><li>the spur and output tracks are empty</li><li>since we know there are 5 values in the input stack we know the 5 needs to be pushed to the<br>  output stack first.</li><li>2 is at the top of the input, it cannot go to the output so we push this 2 to the spur: in -&gt; spur</li><li>1 is at the top of the input, it cannot go to the output so we push this 1 to the spur: in -&gt; spur</li><li>5 is at the top of the input, it can go to the output so we push this 5 to the output: in -&gt; out</li><li>3 is at the top of the input, it cannot go to the output so we push this 3 to the spur: in -&gt; spur</li><li>4 is at the top of the input, it can go to the output so we push this 4 to the output: in -&gt; out</li><li>3 is at the top of the spur, it can go to the output so we push this 3 to the output: spur - &gt; out</li><li>1 is at the top of the spur, it cannot go to the output and it is not allowed to go back to the input</li><li>since the input is empty there are no other possible moves</li><li>since all the values have not been pushed to the output track the method should return false<br>  and the moves result list remains unchanged.</li></ul><p>Example 3<br>incoming carOrder List is {4,3,5,1,2}<br>In the image given below, the attempted CarMove operations are<br>stored in an additional temporary stack, where the bottom of the stack<br>holds the first attempted move and the top of the stack holds the last<br>attempted move.<br>Since the reordering is not possible, the moves result List remains<br>unchanged and the method should return false.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
      <category term="算法" scheme="cplusplusdaixie.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMPSCI320-Assignment4-DynamicProgramming</title>
    <link href="cplusplusdaixie.com/COMPSCI320-Assignment4-DynamicProgramming.html"/>
    <id>cplusplusdaixie.com/COMPSCI320-Assignment4-DynamicProgramming.html</id>
    <published>2023-07-10T01:48:04.000Z</published>
    <updated>2023-07-10T01:49:29.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Computer-Science-732"><a href="#Computer-Science-732" class="headerlink" title="Computer Science 732"></a>Computer Science 732</h3><h2 id="Programming-Assignment-4"><a href="#Programming-Assignment-4" class="headerlink" title="Programming Assignment 4"></a>Programming Assignment 4</h2><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>This programming assignment will test your ability to design a dynamic programming solution to a simple problem. It is worth 5% of your total course marks. Please try and test with your own generated input cases before submitting to the automated marker.</p><h2 id="Problem-Split-Necklace-Jewels"><a href="#Problem-Split-Necklace-Jewels" class="headerlink" title="Problem: Split Necklace Jewels"></a>Problem: Split Necklace Jewels</h2><p>We have a Queen with several Necklaces that she wants to split-up and divide the jewel stones to his two daughters as fairly as possible. Each jewel on an necklace has a fixed value and she has decided to let one daughter pick a subset of the jewels then the other daughter take the remaining. The “fairness idea’ that the Queen decides to use is to restrict the first daughter to pick only a subset of jewels<br>that are not adjacent to any others in that set. The jewels are in a circular pattern in index positions 0 , 1 , 2 ,… , n−1. Where if the first daughter selects jewel at positionithen she can not take jewel at<br>positioni−1 ori+ 1 (modulon). The maximum number of jewels per necklace is one million.</p><p>An input (taken from keyboard) for you to process is a sequence of necklaces, one per line. Each necklaces is a sequence of positive integers separated by white spaces denoting the values of each jewel.</p><p>The printed output of your program, one line per each scenario, is the maximum value daughter one can obtain and the remaining value the other daughter receives for each necklace.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sample</span> <span class="keyword">Input</span>:</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">10</span> <span class="number">8</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">4</span> <span class="number">8</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">10</span> <span class="number">2</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Sample Output</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">18 </span><span class="number">9</span></span><br><span class="line"><span class="symbol">17 </span><span class="number">10</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h2><p>There will be three cases on the automarker of increasing difficulty. These will be worth 2, 2 and 1 marks, respectively. You need to submit your program as a group submission for up to 10 submission tries.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
      <category term="算法" scheme="cplusplusdaixie.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMPSCI320-Assignment1-StableMatchingProblem</title>
    <link href="cplusplusdaixie.com/COMPSCI320-Assignment1-StableMatchingProblem.html"/>
    <id>cplusplusdaixie.com/COMPSCI320-Assignment1-StableMatchingProblem.html</id>
    <published>2023-07-09T01:18:31.000Z</published>
    <updated>2023-07-09T01:20:42.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Computer-Science-320"><a href="#Computer-Science-320" class="headerlink" title="Computer Science 320"></a>Computer Science 320</h3><h2 id="Programming-Assignment-1"><a href="#Programming-Assignment-1" class="headerlink" title="Programming Assignment 1"></a>Programming Assignment 1</h2><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>This first assignment lets you get familiar with stable maching problem. We would like you to implement the Gale-Shapley algorithm for finding the man-optimal stable maching. An O(n^2 ) solution is preferred since we have set the running time limit on the automated marker. Some tricks to speed up the process of proposing are highly recommended.</p><p>There are 3 test cases whose sizes are different. The first one contains 50 pairs, while the last largest one comprises of 1000 pairs. It is worth 5% of your total course marks. The first and second test cases have 2 marks each and the last has 1 mark.</p><p>In order to boost your performance, we have created an additional small test case, namedR5, which does not contribute to the mark. It would help you to be familiar with reading input and printing output on the automated marker.</p><p>There will be a penalty if you exceed the submission limit of 8. Therefore, pleasetest your implementation with your own generated inputs before submitting to the automated marker.</p><h2 id="Test-case-description"><a href="#Test-case-description" class="headerlink" title="Test case description"></a>Test case description</h2><p>We use # for the comment and we have e.g. n= 5 to indicate the valuenof our stable matching problem. We use all odd integers ranging from 1 to 2n−1 as the man ID, and all even integers ranging from 2 to 2nas the woman ID. There is a whitespace after #,n, =, : to make the parsing process easily.</p><p>The preference for each person ID comes after the colon : (no whitespace between person ID and the colon). There is a whitespace between each integer on the preference list. For example,1: 2 6 8 4 10 means that the man ID 1 has the preference list{ 2 , 6 , 8 , 4 , 10 }where his best choice is 2 and worst<br>choice is 10.</p><p>You should output the matching pair, starting from the man ID 1 to the man ID 2n−1. The matching format ism wwheremis the man ID andwis the woman ID. Note that there is one whitespace betweenmandwin the output format.</p><p>Sample Input:</p><h1 id="Random-instance-for-Gale-Shapley-n-5"><a href="#Random-instance-for-Gale-Shapley-n-5" class="headerlink" title="Random instance for Gale-Shapley, n = 5"></a>Random instance for Gale-Shapley, n = 5</h1><p>#<br>n = 5<br>#<br>1: 2 6 8 4 10<br>2: 5 9 3 1 7<br>3: 6 8 10 4 2<br>4: 3 9 7 5 1<br>5: 2 6 8 10 4<br>6: 7 3 9 5 1<br>7: 10 8 4 6 2</p><h3 id="8-5-7-1-3-9"><a href="#8-5-7-1-3-9" class="headerlink" title="8: 5 7 1 3 9"></a>8: 5 7 1 3 9</h3><h3 id="9-2-4-6-10-8"><a href="#9-2-4-6-10-8" class="headerlink" title="9: 2 4 6 10 8"></a>9: 2 4 6 10 8</h3><h3 id="10-5-9-7-3-1"><a href="#10-5-9-7-3-1" class="headerlink" title="10: 5 9 7 3 1"></a>10: 5 9 7 3 1</h3><p>Sample Output:</p><p>1 8<br>3 6<br>5 2<br>7 10<br>9 4</p><h2 id="Submission-Procedure"><a href="#Submission-Procedure" class="headerlink" title="Submission Procedure"></a>Submission Procedure</h2><p>Submit your program solutions to<a href="https://www.automarker.cs.auckland.ac.nz" target="_blank" rel="noopener">https://www.automarker.cs.auckland.ac.nz</a>. There will be a penalty of 20% (per test case) if you exceed the submission limit of 8 for each test case (applied if you<br>eventually solve them).</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：ITEC2610-Assignment1</title>
    <link href="cplusplusdaixie.com/ITEC2610-Assignment1.html"/>
    <id>cplusplusdaixie.com/ITEC2610-Assignment1.html</id>
    <published>2023-07-07T01:20:48.000Z</published>
    <updated>2023-07-07T01:21:58.870Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-1"><a href="#Assignment-1" class="headerlink" title="Assignment 1"></a>Assignment 1</h3><p><strong>Question 1</strong> : Write a <strong>student</strong> class to represent students. Each student has a name, a unique ID, and a<br>phone number. Students can choose to add courses or drop courses. No student has access to the research<br>lab, but a student has access to the library if he/she is taking at least one course.</p><p>The <strong>Student</strong> class should have the following public interface:</p><ol><li><strong>public Student(String name, String phoneNumber)</strong> : A constructor to set up student’s name and<br> the phone number. Hint: Consider using a static variable to help assign a unique ID to each student<br> object.</li><li><strong>public String getStudentName()</strong> : An accessor to return the student’s name.</li><li><strong>public String getStudentPhone()</strong> : An accessor to return the student’s phone number.</li><li><strong>public int getStudentId()</strong> : An accessor to return the student’s ID.</li><li><strong>public boolean addCourse(String courseName)</strong> : A method to add courses. The max course load<br> of each student is five courses. Any attempt to add more than five courses will fail and this method<br> will return false. Return true when the course is added successfully.</li><li><strong>public boolean dropCourse(String courseName)</strong> : A method to drop a course. This method will<br> remove the course from the student’s course load. If there is no such course in the student’s course<br> load or the student has not enrolled in any course, the method will return false.</li><li><strong>public int getCourseCount()</strong> : A method to return the number of courses that student has enrolled.</li><li><strong>public boolean hasAccessToLibrary()</strong> : A method that indicates whether the student has access to<br> the library. If the number of courses enrolled is greater than zero, the student will have the access<br> to library.</li><li><strong>public boolean hasAccessToResearchLab()</strong> : A method that indicates whether the student has<br> access to the research lab. Return false.</li></ol><p>Write a tester program <strong>Task1Tester</strong> to test the class you have written. Follow the examples given in<br>class (e.g., BankAccountTester), and create objects from the class <strong>Student</strong> above. Test the public<br>interface of your class thoroughly (each public method must be tested at least once). For accessor<br>methods, print out the expected return value and the return value of your method (see the<br>BankAccountTester example) to compare. This tester class is <strong>not</strong> to be submitted for marking, but it is<br>beneficial for you to make sure your Student class works as intended.</p><p><strong>Question 2</strong> : Now we would like to have an additional class <strong>Instructor</strong> to represent instructors. All<br>instructors have access to the library. Assume that each instructor is assigned to teach one course and<br>this assignment will not change. Each instructor may also have a research project, and only instructors<br>having a research project can access the research lab.</p><p>Since now we have two types of people (and imagine down the road we might have more), you should<br>implement a hierarchy of classes to represent the different types of people. So the first step of this<br>question is to write, at the top of the class hierarchy, an abstract class called <strong>Person</strong> with methods<br>common to different types of people. <strong>Person</strong> has the following public interface:</p><ol><li><strong>public Person(String name, String phoneNumber, String type)</strong> : A constructor to initialize the<br> person’s name and phone number. Consider using a static variable to assign a unique Id to each<br> person object.</li><li><strong>public String getName()</strong> : An accessor to return the person’s name.</li><li><strong>public String getPhoneNumber()</strong> : An accessor to return the person’s phone number.</li><li><strong>public int getId()</strong> : An accessor to return the person’s id.</li><li><strong>public String getType()</strong> : An accessor to return a string that represents the type of person.</li><li><strong>public abstract boolean hasAccessToLibrary()</strong> : A method that indicates whether the person has<br> access to the library. This should be override by the subclass.</li><li><strong>public abstract boolean hasAccessToResearchLab()</strong> : A method that indicates whether the person<br> has access to the research lab. This should be overridden by the subclass.</li></ol><p>Once <strong>Person</strong> is defined, you must then rewrite the <strong>Student</strong> class (with a new class name <strong>Student 2</strong> )<br>and define a new class <strong>Instructor</strong> , both of which inherit from <strong>Person</strong> :</p><ul><li><strong>Student 2</strong> should be implemented to keep the properties and behaviors specified in <strong>Question 1</strong> (of<br>  course, the constructor for this class should be named <strong>Student2</strong> instead of <strong>Student</strong> ).</li><li>The class <strong>Instructor</strong> should have the following public interface:<ol><li><strong>public Instructor(String name, String phoneNumber, String courseId)</strong> : A constructor to<br>set up the instructor name, phone number and course.</li><li><strong>public boolean setReserachTopic(String topic)</strong> : A method to set the research topic for the<br>instructor. If the instructor has already had a topic, the old topic will be replaced by the given<br>topic.</li><li><strong>public String getTopic()</strong> : return the research topic of the instructor.</li><li><strong>public boolean hasAccessToLibrary()</strong> : A method that indicates whether the instructor has<br>access to the library. Always return true.</li><li><strong>public boolean hasAccessToResearchLab()</strong> : A method that indicates whether the instructor<br>has access to the research lab. Return true if the research topic is set.</li></ol></li></ul><p>Write a tester program <strong>Task2Tester</strong> to test the classes you have written in Question 2. Create objects<br>from the classes <strong>Student 2</strong> and <strong>Instructor</strong> above. This tester class is <strong>no</strong> t to be submitted.</p><p><strong>What to submit:</strong><br>Please complete the Questions 1 and 2 according to the requirements, documenting them properly using<br>JavaDoc. Please define the classes and methods using the exact names and signatures given here.</p><p>Compile and test your code under the command line environment (e.g., by executing Terminal under<br>macos or cmd under Windows).</p><ul><li>Submit all 4 source files: <strong>Student.java</strong> , <strong>Person</strong>. <strong>java, Student 2 .java, and Instructor.java</strong>.<br>  Nothing else (including the tester programs) should be submitted.</li><li><strong>DO NOT submit .class files! Submit .java files ONLY</strong>.</li></ul><p><strong>Important to Remember:</strong></p><p><strong>1.</strong> Your assignment will be given a zero mark if only the compiled files (.class files) are submitted,<br>    as we have no way to look at your code. Please make sure to submit the source files (.java files).<br>    <strong>No regrading requests will be entertained if this rule is not followed. No exceptions.<br>2.</strong> Please make sure your code compiles under the command line (i.e., without any IDE, such as<br>    Eclipse, IntelliJ IDEA, and BlueJ). Do not put any package statement at the beginning of your<br>    source file. If you are using an IDE, this is especially important because some IDEs put your code<br>    under a particular package for your project. Any code that does not compile under the command<br>    line can only receive 20/100<strong>. Regrading requests like “…but the code works on my</strong><br>    <strong>computer/in my IDE” will not be entertained. No exceptions.</strong></p><p><strong>Marking Scheme:</strong><br>Style (variable naming, indentation, &amp; layout) <strong>_</strong>/<br>JavaDoc Comments <strong>_</strong>/<br>Code Compiles? <strong>_</strong>(yes/no)<br>Successful Execution of Test Cases <strong>_</strong>/<br>Total <strong>_</strong>/<br>According to this marking scheme the maximum mark you can get for code that does not compile is<br>20/100.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143-Assessment1-Letter-Inventory</title>
    <link href="cplusplusdaixie.com/CSE143-Assessment1-Letter-Inventory.html"/>
    <id>cplusplusdaixie.com/CSE143-Assessment1-Letter-Inventory.html</id>
    <published>2023-07-04T01:01:12.000Z</published>
    <updated>2023-07-04T05:07:49.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II-Winter-2021"><a href="#CSE-143-Computer-Programming-II-Winter-2021" class="headerlink" title="CSE 143: Computer Programming II Winter 2021"></a>CSE 143: Computer Programming II Winter 2021</h3><h1 id="Take-home-Assessment-1-Letter-Inventory-due-January-14-2021-11-59pm"><a href="#Take-home-Assessment-1-Letter-Inventory-due-January-14-2021-11-59pm" class="headerlink" title="Take-home Assessment 1: Letter Inventory due January 14, 2021 11:59pm"></a>Take-home Assessment 1: Letter Inventory due January 14, 2021 11:59pm</h1><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Maintain proper abstraction between the client and implementation of a class.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>In this assessment, you will implement a class calledLetterInventorythat can be used to keep track<br>of an inventory of letters of the English alphabet. The constructor for the class will take aStringas<br>a parameter and compute how many of each letter are in thatString(i.e. how many a’s, how many<br>b’s, etc.). LetterInventoryignores any character that is not an English letter (such as punctuation or<br>digits) and treats upper- and lowercase letters as the same.</p><h2 id="YourLetterInventoryclass-should-include-the-following-constructor"><a href="#YourLetterInventoryclass-should-include-the-following-constructor" class="headerlink" title="YourLetterInventoryclass should include the following constructor:"></a>YourLetterInventoryclass should include the following constructor:</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public LetterInventory (String data)</span><br><span class="line">Constructs <span class="keyword">an</span> inventory (<span class="keyword">a</span> count) <span class="keyword">of</span> <span class="keyword">the</span> alphabetic letters <span class="keyword">in</span> <span class="keyword">the</span> given <span class="keyword">string</span>, ignoring <span class="keyword">the</span> <span class="keyword">case</span> <span class="keyword">of</span></span><br><span class="line">letters <span class="keyword">and</span> ignoring <span class="keyword">any</span> non-alphabetic <span class="keyword">characters</span>.</span><br></pre></td></tr></table></figure><h2 id="Your-class-should-also-include-the-following-public-methods-"><a href="#Your-class-should-also-include-the-following-public-methods-" class="headerlink" title="Your class should also include the following public methods: "></a>Your class should also include the following public methods: </h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">You must <span class="keyword">in</span>-</span><br><span class="line">clude exactly</span><br><span class="line">these <span class="function"><span class="keyword">method</span></span></span><br><span class="line"><span class="function"><span class="title">headers</span>—<span class="title">do</span></span></span><br><span class="line"><span class="function"><span class="title">not</span> <span class="title">add</span> <span class="title">or</span></span></span><br><span class="line"><span class="function"><span class="title">remove</span> <span class="title">parame</span>-</span></span><br><span class="line"><span class="function"><span class="title">ters</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int get (char letter)</span><br><span class="line">Returns a count <span class="keyword">of</span> how many <span class="keyword">of</span> this letter (<span class="keyword">case</span>-insensitive) are <span class="keyword">in</span> the inventory. <span class="keyword">If</span> a nonalphabetic</span><br><span class="line">character <span class="keyword">is</span> passed, your <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">anIllegalArgumentException</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span> (char letter, int value)</span><br><span class="line">Sets the count <span class="keyword">for</span> the given letter (<span class="keyword">case</span>-insensitive) <span class="keyword">to</span> the given value. <span class="keyword">If</span> a nonalphabetic character</span><br><span class="line"><span class="keyword">is</span> passed <span class="keyword">or</span> ifvalueis negative, your <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">anIllegalArgumentException</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int size ()</span><br><span class="line">Returns <span class="keyword">the</span> <span class="built_in">sum</span> <span class="keyword">of</span> all <span class="keyword">of</span> <span class="keyword">the</span> counts <span class="keyword">in</span> this inventory. This operation should be <span class="string">"fast"</span> <span class="keyword">in</span> that <span class="keyword">it</span></span><br><span class="line">should store <span class="keyword">the</span> size rather than having <span class="built_in">to</span> compute <span class="keyword">it</span> <span class="keyword">each</span> <span class="built_in">time</span> this method is called.</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isEmpty ()</span><br><span class="line">Returnstrueif <span class="keyword">this</span> inventory <span class="keyword">is</span> empty (i.e. all counts are <span class="number">0</span>). This operation should be <span class="string">"fast"</span> <span class="keyword">in</span></span><br><span class="line"><span class="literal">that</span> <span class="literal">it</span> should <span class="keyword">not</span> need <span class="keyword">to</span> examine each <span class="keyword">of</span> the <span class="number">26</span> counts <span class="keyword">when</span> <span class="literal">it</span> <span class="keyword">is</span> called.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public String toString ()</span><br><span class="line">Returns <span class="keyword">a</span> <span class="keyword">string</span> representation <span class="keyword">of</span> <span class="keyword">the</span> inventory <span class="keyword">with</span> <span class="keyword">the</span> letters all <span class="keyword">in</span> lowercase <span class="keyword">and</span> <span class="keyword">in</span> sorted order</span><br><span class="line"><span class="keyword">and</span> surrounded <span class="keyword">by</span> square brackets. The <span class="built_in">number</span> <span class="keyword">of</span> occurrences <span class="keyword">of</span> <span class="keyword">each</span> letter should match its</span><br><span class="line">count <span class="keyword">in</span> <span class="keyword">the</span> inventory. For example, <span class="keyword">an</span> inventory <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">as</span>, <span class="number">1</span> b, <span class="number">1</span> l <span class="keyword">and</span> <span class="number">1</span> m would be represented <span class="keyword">as</span></span><br><span class="line"><span class="string">"[aaaablm]"</span>.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LetterInventory <span class="keyword">add</span> (LetterInventory other)</span><br><span class="line">Constructs <span class="keyword">and</span> returns a <span class="keyword">new</span> LetterInventory object that represents the sum <span class="keyword">of</span> this</span><br><span class="line">LetterInventoryand the other givenLetterInventory. The counts <span class="keyword">for</span> <span class="keyword">each</span> letter should be</span><br><span class="line">added together. The twoLetterInventoryobjects being added together (thisandother) should</span><br><span class="line"><span class="keyword">not</span> be changed <span class="keyword">by</span> this <span class="function"><span class="keyword">method</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LetterInventory subtract (LetterInventory other)</span><br><span class="line">Constructs <span class="keyword">and</span> returns a newLetterInventoryobject that represents the <span class="keyword">result</span> <span class="keyword">of</span> subtracting</span><br><span class="line">the other inventory <span class="keyword">from</span> this inventory (i.e. subtracting the counts <span class="keyword">in</span> the other inventory <span class="keyword">from</span> this</span><br><span class="line">objects counts). <span class="keyword">If</span> any resulting count would be negative, this <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returnnull</span>. <span class="title">The</span></span></span><br><span class="line"><span class="function"><span class="title">twoLetterInventoryobjects</span> <span class="title">being</span> <span class="title">subtracted</span> <span class="params">(thisandother)</span> <span class="title">should</span> <span class="title">not</span> <span class="title">be</span> <span class="title">changed</span> <span class="title">by</span> <span class="title">this</span></span></span><br><span class="line"><span class="function"><span class="title">method</span>.</span></span><br></pre></td></tr></table></figure><p>You may also include any additional private helper methods you think will be helpful.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Make sure any</span><br><span class="line"><span class="keyword">helper</span> methods</span><br><span class="line">are declared</span><br><span class="line"><span class="keyword">private</span>.</span><br></pre></td></tr></table></figure><p>As an example, the add method could be called as follows:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LetterInventory inventory1 = <span class="keyword">new</span> <span class="type">LetterInventory</span>(<span class="string">"Sherlock Holmes"</span>);</span><br><span class="line">LetterInventory inventory2 = <span class="keyword">new</span> <span class="type">LetterInventory</span>(<span class="string">"Dr. John Watson"</span>);</span><br><span class="line">LetterInventory sum = inventory1.add(inventory2);</span><br></pre></td></tr></table></figure><p>Here, inventory1would contain[ceehhkllmoorss],inventory2would contain[adhjnnoorstw],<br>andsumwould contain[acdeehhhjkllmnnoooorrssstw].</p><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><p>You should implement this class with an array of 26 counters (one for each letter) along with any other<br>data fields you find that you need. Remember, though, that we want to minimize the number of data<br>fields when possible.</p><p>Your class should avoid unnecessary inefficiencies. For example, you might be tempted to implement the<br>addmethod by calling thetoStringmethod or otherwise building aStringto pass to theLetterInventory<br>constructor. But this approach would be inefficient for inventories with large character counts.</p><p>You should introduce a class constant for the value 26 to improve readability.</p><h2 id="Character-operations"><a href="#Character-operations" class="headerlink" title="Character operations"></a>Character operations</h2><p>It will be helpful to understand certain deatils of thechardatatype for this assessment. Many of these<br>details are explained in section 4.3 of the textbook.</p><p>Values of typecharhave corresponding integer values. There is a character with value 0, a character<br>with value 1, a character with value 2 and so on. You can compare different values of typecharusing<br>less-than and greater-than tests, as in:</p><p>if (ch &gt;= ‘a’) …</p><p>All of the lowercase letters appear grouped together in typechar(i.e.’a’is followed by’b’followed by<br>’c’, and so on). All of the uppercase letters appear grouped together similarly. Because of this, you can<br>compute a letter’s “displacement” (or distance) from the letter’a’with an expression like the following<br>(this expression assumes the variableletteris of typecharand stores a lowercase letter):</p><p>letter -‘a’</p><p>Going in the other direction, if you know a characters integer equivalent, you can cast the result tochar<br>to get the character. For example, suppose that you want to get the letter that is 8 away from’a’. You<br>could do this as follows:</p><p>char result = (char) (‘a’+ 8);</p><p>This would assign the variableresultthe value’i’. As in these examples, you should write your code<br>in terms of displacement from a fixed letter like’a’rather than finding and including the specific integer<br>value (e.g. 97) of a character like’a’.</p><h1 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h1><p>Thought it may not seem like it, theArrayIntListexample from lecture provides a good model to use for<br>implementingLetterInventory. Pay particular attention to the use of fields, avoiding reimplementation<br>of common functionality, throwing exceptions in error conditions, and documentation/comments.</p><h2 id="String-and-Character"><a href="#String-and-Character" class="headerlink" title="String and Character"></a>String and Character</h2><p>You will likely want to look at the JavaStringandCharacterclasses for useful methods. (For example,<br>there is atoLowerCasemethod in each.) You will have to pay attention to whether each method is static<br>or not. TheStringmethods are mostly instance methods because strings are objects. TheCharacter<br>methods are all static becausecharis a primitive type. For example, if you have a variable calledsthat<br>is aString, you can turn it to all lowercase as follows:</p><p>s = s.toLowerCase();</p><p>This is a call to an instance method on an object, so you put the name of the object variable before the<br>dot. Butcharvalues are <em>not</em> objects and thetoLowerCasemethod in theCharacterclass is a static<br>method. So if you have a variable calledchthat is of typechar, you would turn it to all lowercase as<br>follows:</p><p>ch = Character.toLowerCase(ch);</p><h1 id="Development-Strategy"><a href="#Development-Strategy" class="headerlink" title="Development Strategy"></a>Development Strategy</h1><p>One of the most important techniques for programmers is to develop code in stages rather than trying to<br>write it all at once. (The technical term for this is “iterative enhancement” or “stepwise refinement.”) It<br>is also important to be able to test the correctness of your solution at each different stage.</p><p>We suggest that you work on your assessment in three stages:<br>(a) First, work on constructing aLetterInventoryand examining its contents. We will implement the<br>constructor, thesizemethod, theisEmptymethod, thegetmethod, and thetoStringmethod.<br>Even within this stage, you should develop the methods slowly. First work on the constructor and<br>sizemethods. Then add theisEmptymethod, then thegetmethod, then thetoStringmethod.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(b) Next, <span class="builtin-name">add</span> thesetmethod <span class="keyword">to</span> the class that allows the<span class="built_in"> client </span><span class="keyword">to</span> change the number of occurrences</span><br><span class="line">of an individual letter.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(c) Finally, include theaddandsubtractmethods. We recommend writing theaddmethod <span class="keyword">first</span> <span class="keyword">and</span></span><br><span class="line">making sure <span class="keyword">it</span> works, <span class="keyword">then</span> moving <span class="keyword">on</span> <span class="keyword">to</span> thesubtractmethod.</span><br></pre></td></tr></table></figure><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the desired behavior, your code should be well-written and meet all expectations<br>described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this assessment,<br>pay particular attention to the following elements:</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileLetterInventoryReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS112-ProgrammingAssignment11</title>
    <link href="cplusplusdaixie.com/CS112-ProgrammingAssignment11.html"/>
    <id>cplusplusdaixie.com/CS112-ProgrammingAssignment11.html</id>
    <published>2023-07-03T01:01:12.000Z</published>
    <updated>2023-07-03T01:02:23.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CS-112-–-Programming-Assignment-11"><a href="#CS-112-–-Programming-Assignment-11" class="headerlink" title="CS 112 – Programming Assignment 11"></a>CS 112 – Programming Assignment 11</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Recursion</span></span><br></pre></td></tr></table></figure><p><strong>Assignment basics file:</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>piazza.com<span class="regexp">/class_profile/g</span>et_resource<span class="regexp">/k4wblafqtoj2cx/</span>k5x3ennufm34cg</span><br></pre></td></tr></table></figure><p><strong>Tester file:</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">will be <span class="built_in">available</span> in a few days</span><br></pre></td></tr></table></figure><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>The purpose of this assignment is to practice recursive functions in Python.</p><h2 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> Loops are banned. You may not <span class="keyword">use</span> a <span class="keyword">for</span> <span class="keyword">loop</span> <span class="keyword">or</span> a <span class="keyword">while</span> <span class="keyword">loop</span> anywhere <span class="keyword">in</span> your solution.</span><br><span class="line"> You must <span class="keyword">use</span> recursion <span class="keyword">in</span> <span class="keyword">each</span> <span class="keyword">function</span> <span class="keyword">in</span> <span class="keyword">order</span> <span class="keyword">to</span> receive <span class="keyword">full</span> credit.</span><br><span class="line"> You <span class="keyword">are</span> <span class="keyword">not</span> allowed <span class="keyword">to</span> <span class="keyword">import</span> anything.</span><br><span class="line"> You <span class="keyword">are</span> <span class="keyword">not</span> allowed <span class="keyword">to</span> <span class="keyword">use</span> anything that hasn’t been covered <span class="keyword">in</span> <span class="keyword">class</span>, <span class="keyword">including</span> but <span class="keyword">not</span></span><br><span class="line">limited <span class="keyword">to</span>: <span class="keyword">list</span> comprehension, lambda functions, generators, builtins <span class="keyword">like</span> zip(), etc.</span><br><span class="line"> <span class="keyword">From</span> the built-<span class="keyword">in</span> functionswe have covered <span class="keyword">in</span> <span class="keyword">class</span>, you <span class="keyword">are</span> <span class="keyword">not</span> allowed <span class="keyword">to</span> <span class="keyword">call</span> <span class="keyword">max</span>().</span><br><span class="line">Everything <span class="keyword">else</span> <span class="keyword">is</span> fair game.</span><br><span class="line"> You <span class="keyword">are</span> allowed <span class="keyword">to</span> <span class="keyword">use</span> <span class="keyword">sets</span>, dictionaries, <span class="keyword">and</span> <span class="keyword">any</span> <span class="keyword">of</span> their respective operations.</span><br><span class="line"> You <span class="keyword">are</span> allowed <span class="keyword">to</span> <span class="keyword">use</span> <span class="keyword">any</span> <span class="keyword">string</span> method <span class="keyword">except</span> <span class="keyword">for</span> string.join()</span><br><span class="line"> You can <span class="keyword">do</span> <span class="keyword">string</span> slicing, but you cannot <span class="keyword">use</span> the <span class="keyword">string</span>[::<span class="number">-1</span>] shortcut.</span><br><span class="line"> You can <span class="keyword">use</span> <span class="keyword">any</span> <span class="keyword">list</span> operation, <span class="keyword">except</span> <span class="keyword">for</span> list.sort() <span class="keyword">and</span> list.reverse()</span><br><span class="line"> <span class="keyword">Do</span> <span class="keyword">not</span> hard code <span class="keyword">to</span> the examples <span class="keyword">or</span> <span class="keyword">to</span> the tester.</span><br><span class="line"> You should be skimming Piazza regularly <span class="keyword">in</span> the <span class="keyword">event</span> that clarifications <span class="keyword">to</span> this assignment</span><br><span class="line"><span class="keyword">get</span> made. Turn <span class="keyword">on</span> your email digests!</span><br></pre></td></tr></table></figure><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>In this assignment testing will be done as before. You will start working on the assignment</p><p>without a tester, and you will do your own testing based on the examples we provide in this</p><p>document as well as other examples you can come up with based on the provided files. A few</p><p>days later we will provide an actual tester but <strong>don’t wait</strong> for it in order to start working on the</p><p>assignment as there won’t be enough time to complete it before the deadline. The purpose of</p><p>the delayed release of the tester is for you to put more emphasis/effort on writing logically</p><p>correct programs instead of trying to pass certain tests only. When we post the tester, we’re</p><p>going to omit some of the test cases that will be used for grading. This means that there might</p><p>be errors in your code even if the tester is giving you no errors. You must do your own checks to</p><p>make sure that you haven’t missed anything and your code is correct. Youdo <strong><em>not</em></strong> need to modify</p><p>the tester, just test on your own any way you like. Again, the goal is to help you put more focus</p><p>on writing logically correct programs instead of trying to pass certain tests only.</p><h2 id="Grading-Rubric"><a href="#Grading-Rubric" class="headerlink" title="Grading Rubric"></a>Grading Rubric</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Submitted <span class="string">correctly:</span></span><br><span class="line">Code is well <span class="string">commented:</span></span><br><span class="line">Tester calculations <span class="string">correct:</span></span><br><span class="line">Unknown test cases</span><br><span class="line"><span class="string">TOTAL:</span></span><br><span class="line">+EC</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><h3 id="60"><a href="#60" class="headerlink" title="60"></a>60</h3><h3 id="30"><a href="#30" class="headerlink" title="30"></a>30</h3><h3 id="100"><a href="#100" class="headerlink" title="100"></a>100</h3><h3 id><a href="#" class="headerlink" title="+"></a>+</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># see assignment basics file for file requirements!</span></span><br><span class="line"><span class="meta"># see assignment basics file for how to comment!</span></span><br><span class="line"><span class="meta"># see assignment basics file for how to test!</span></span><br><span class="line"><span class="meta"># test cases that are omitted from the tester</span></span><br></pre></td></tr></table></figure><p><strong>Note</strong> : If your code does not run and crashes due to errors, it will receive <strong>zero</strong> points. Turning in<br>running code is essential.</p><h2 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h2><p>You may assume that:</p><ul><li>The <strong>types</strong> of the values that are sent to the functions are the proper ones, you don’t have<br>  to validate them (e.g. <strong>filename</strong> will be a string, not an integer, etc.).</li><li>The lists passed to <strong>merge()</strong> will be in ascending order.</li></ul><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>No fancy narrative this time, just a few problems to solve using recursion. <strong>You must use<br>recursion in each function to get full credit.</strong> The use of a loop in one of these functions will<br>result in a zero for that function. <em>You may not alter the function signatures.</em></p><p><strong>def my_join(strings, char):</strong><br>Description: Recreate the built in <strong>.join()</strong> function using recursion.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameters: strings , <span class="keyword">a</span> list <span class="keyword">of</span> strings; <span class="keyword">char</span> , <span class="keyword">a</span> single <span class="keyword">character</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: <span class="keyword">a</span> <span class="keyword">string</span>, <span class="keyword">the</span> <span class="built_in">result</span> <span class="keyword">of</span> joining <span class="keyword">each</span> <span class="keyword">string</span> <span class="keyword">in</span> <span class="keyword">the</span> list <span class="keyword">with</span> given <span class="keyword">character</span> inbetween</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Examples:</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">my_join</span><span class="params">([<span class="string">'a'</span>], <span class="string">'*'</span>)</span></span> → <span class="string">'a'</span></span><br><span class="line"><span class="function"><span class="title">my_join</span><span class="params">([<span class="string">'a'</span>,<span class="string">'b'</span>], <span class="string">'*'</span>)</span></span> → <span class="string">'a*b'</span></span><br><span class="line"><span class="function"><span class="title">my_join</span><span class="params">([<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>], <span class="string">'$'</span>)</span></span> → <span class="string">'x$y$z'</span></span><br></pre></td></tr></table></figure><p><strong>def skip_sum(nums, n):</strong><br>Description: find the sum of every nth number in the given list</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Parameters</span>: nums <span class="comment">, a list of integers</span>; n , a nonzero <span class="keyword">positive</span> <span class="keyword">integer</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: <span class="keyword">an</span> <span class="keyword">integer</span>, <span class="keyword">the</span> <span class="built_in">sum</span> <span class="keyword">of</span> every nth <span class="built_in">number</span></span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Examples:</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">2</span>) → <span class="number">9</span> # <span class="number">1</span> + <span class="number">3</span> + <span class="number">5</span></span><br><span class="line">skip_sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">3</span>) → <span class="number">5</span> # <span class="number">1</span> + <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>def is_palindrome(word):</strong><br>Description: A palindrome is a word that can be written forwards the same as it can be written<br>backwards. Determine if the given string is a palindrome or not.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameters: <span class="built_in">word</span>, <span class="keyword">the</span> <span class="built_in">string</span> <span class="keyword">that</span> we are checking</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: <span class="keyword">a</span> boolean, True <span class="keyword">if</span> <span class="keyword">the</span> <span class="built_in">word</span> is <span class="keyword">a</span> palindrome, <span class="keyword">and</span> False otherwise.</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Examples:</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">is_palindrome</span><span class="params">(<span class="string">'tacocat'</span>)</span></span> → True</span><br><span class="line"><span class="function"><span class="title">is_palindrome</span><span class="params">(<span class="string">'watermelon'</span>)</span></span> → False</span><br></pre></td></tr></table></figure><p><strong>def merge(listA, listB):</strong><br>Description: Combine two lists into one list, maintaining the order of the elements. You should<br>assume that both lists given to this function contain elements in ascending order (smallest first).</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Parameters</span>: listA, listB, two lists of elements (could <span class="keyword">be </span>anything – assume homogenous <span class="meta">data</span>)</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: <span class="keyword">a</span> list, <span class="keyword">the</span> combination <span class="keyword">of</span> elements <span class="built_in">from</span> listA <span class="keyword">and</span> listB <span class="keyword">in</span> <span class="keyword">ascending</span> order.</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Examples:</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">merge([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) → [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">merge([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) → [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">merge([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>], [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]) → [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h2 id="Extra-Credit-10-points"><a href="#Extra-Credit-10-points" class="headerlink" title="Extra Credit (10 points)"></a>Extra Credit (10 points)</h2><p><strong>def largest_sum(xs, x, y):</strong><br>Description: Zig-zag through a two dimensional list of integers from some starting point until you<br>reach one of the list’s boundaries, computing the largest sum that you find along the way. X and Y<br>represent the row and column position in xs of the first number to use in the sum. The zig-zag<br>patten is made by limiting yourself to only looking at the number immediately on the right of (x,y)<br>and the number immediately below (x,y) when figuring out which of those numbers yields the<br>largest sum.</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameters: xs, a 2D list of integers, x,y are the <span class="built_in">row</span> <span class="keyword">and</span> <span class="built_in">col</span> <span class="built_in">position</span> <span class="keyword">in</span> xs</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: <span class="keyword">an</span> <span class="keyword">integer</span>, <span class="keyword">the</span> largest <span class="built_in">sum</span> you can find <span class="built_in">from</span> position (x,y)</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Examples:</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">largest_sum([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">0</span>]],<span class="number">0</span>,<span class="number">0</span>) → <span class="number">4</span></span><br><span class="line">largest_sum([[<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]],<span class="number">0</span>,<span class="number">0</span>) → <span class="number">17</span></span><br><span class="line">largest_sum([[<span class="number">0</span>,<span class="number">7</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>],[<span class="number">-5</span>,<span class="number">5</span>,<span class="number">2</span>]],<span class="number">0</span>,<span class="number">0</span>) → <span class="number">18</span></span><br><span class="line">largest_sum([[<span class="number">0</span>,<span class="number">7</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>],[<span class="number">-5</span>,<span class="number">5</span>,<span class="number">2</span>]],<span class="number">1</span>,<span class="number">1</span>) → <span class="number">6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Python完成
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS112-ProgrammingAssignment7</title>
    <link href="cplusplusdaixie.com/CS112-ProgrammingAssignment7.html"/>
    <id>cplusplusdaixie.com/CS112-ProgrammingAssignment7.html</id>
    <published>2023-07-01T03:31:31.000Z</published>
    <updated>2023-07-01T03:32:35.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CS-112-–-Spring-2020-–-Programming-Assignment-7"><a href="#CS-112-–-Spring-2020-–-Programming-Assignment-7" class="headerlink" title="CS 112 – Spring 2020 – Programming Assignment 7"></a>CS 112 – Spring 2020 – Programming Assignment 7</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Multi-dimensional </span>lists</span><br></pre></td></tr></table></figure><h3 id="Assignment-basics-file"><a href="#Assignment-basics-file" class="headerlink" title="Assignment basics file:"></a>Assignment basics file:</h3><h3 id="https-piazza-com-class-profile-get-resource-k4wblafqtoj2cx-k5x3ennufm34cg"><a href="#https-piazza-com-class-profile-get-resource-k4wblafqtoj2cx-k5x3ennufm34cg" class="headerlink" title="https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k5x3ennufm34cg"></a><a href="https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k5x3ennufm34cg" target="_blank" rel="noopener">https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k5x3ennufm34cg</a></h3><h3 id="Tester-file"><a href="#Tester-file" class="headerlink" title="Tester file:"></a>Tester file:</h3><h3 id="will-be-available-in-a-few-days"><a href="#will-be-available-in-a-few-days" class="headerlink" title="will be available in a few days"></a>will be available in a few days</h3><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="The-purpose-of-this-assignment-is-to-practice-building-inspecting-and-modifying-multi-dimensional"><a href="#The-purpose-of-this-assignment-is-to-practice-building-inspecting-and-modifying-multi-dimensional" class="headerlink" title="The purpose of this assignment is to practice building, inspecting, and modifying multi-dimensional"></a>The purpose of this assignment is to practice building, inspecting, and modifying multi-dimensional</h3><h3 id="lists-effectively-This-often-requires-nested-for-loops-but-not-always-It-involves-thinking-of-the"><a href="#lists-effectively-This-often-requires-nested-for-loops-but-not-always-It-involves-thinking-of-the" class="headerlink" title="lists effectively. This often requires nested for-loops, but not always. It involves thinking of the"></a>lists effectively. This often requires nested for-loops, but not always. It involves thinking of the</h3><h3 id="structure-like-an-M-x-N-matrix-of-labeled-spots-each-with-a-row-and-column-index-or-a-higher"><a href="#structure-like-an-M-x-N-matrix-of-labeled-spots-each-with-a-row-and-column-index-or-a-higher" class="headerlink" title="structure like an M x N matrix of labeled spots, each with a row and column index, or a higher"></a>structure like an M x N matrix of labeled spots, each with a row and column index, or a higher</h3><h3 id="dimensional-structure-like-a-3D-matrix-e-g-M-x-N-x-K-that-has-indexes-for-height-width-and-depth"><a href="#dimensional-structure-like-a-3D-matrix-e-g-M-x-N-x-K-that-has-indexes-for-height-width-and-depth" class="headerlink" title="dimensional structure like a 3D matrix (e.g. M x N x K ) that has indexes for height, width and depth."></a>dimensional structure like a 3D matrix (e.g. M x N x K ) that has indexes for height, width and depth.</h3><h3 id="Multi-dimensional-lists-aren’t-conceptually-more-difficult-than-single-dimension-lists-but-in-practice"><a href="#Multi-dimensional-lists-aren’t-conceptually-more-difficult-than-single-dimension-lists-but-in-practice" class="headerlink" title="Multi-dimensional lists aren’t conceptually more difficult than single-dimension lists, but in practice"></a>Multi-dimensional lists aren’t conceptually more difficult than single-dimension lists, but in practice</h3><h3 id="the-nested-loops-aliasing-and-more-complex-traversals-and-interactions-merit-some-extra-practice"><a href="#the-nested-loops-aliasing-and-more-complex-traversals-and-interactions-merit-some-extra-practice" class="headerlink" title="the nested loops, aliasing, and more complex traversals and interactions merit some extra practice"></a>the nested loops, aliasing, and more complex traversals and interactions merit some extra practice</h3><h3 id="and-thought"><a href="#and-thought" class="headerlink" title="and thought."></a>and thought.</h3><h2 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h2><h3 id="-You-are-not-allowed-to-import-anything"><a href="#-You-are-not-allowed-to-import-anything" class="headerlink" title=" You are not allowed to import anything."></a> You are not allowed to import anything.</h3><h3 id="-You-are-not-allowed-to-use-sets-and-dictionaries"><a href="#-You-are-not-allowed-to-use-sets-and-dictionaries" class="headerlink" title=" You are not allowed to use sets and dictionaries"></a> You are not allowed to use sets and dictionaries</h3><h3 id="-You-are-not-allowed-to-use-anything-that-hasn’t-been-covered-in-class-including-the-list"><a href="#-You-are-not-allowed-to-use-anything-that-hasn’t-been-covered-in-class-including-the-list" class="headerlink" title=" You are not allowed to use anything that hasn’t been covered in class, including the list"></a> You are not allowed to use anything that hasn’t been covered in class, including the list</h3><h3 id="comprehension-construct-if-you-don’t-know-what-this-is-don’t-worry-it’s-impossible-to-use-it-by"><a href="#comprehension-construct-if-you-don’t-know-what-this-is-don’t-worry-it’s-impossible-to-use-it-by" class="headerlink" title="comprehension construct (if you don’t know what this is, don’t worry, it’s impossible to use it by"></a>comprehension construct (if you don’t know what this is, don’t worry, it’s impossible to use it by</h3><h3 id="accident"><a href="#accident" class="headerlink" title="accident!)"></a>accident!)</h3><h3 id="-From-built-in-functions-you-are-allowed-to-call-only-range-len-int-str"><a href="#-From-built-in-functions-you-are-allowed-to-call-only-range-len-int-str" class="headerlink" title=" From built-in functions, you are allowed to call only range() , len() , int(), str()"></a> From built-in functions, you are allowed to call only range() , len() , int(), str()</h3><h3 id="-From-list-methods-you-are-allowed-to-use-only-append-and-insert-Please-do-not"><a href="#-From-list-methods-you-are-allowed-to-use-only-append-and-insert-Please-do-not" class="headerlink" title=" From list methods, you are allowed to use only .append() and .insert(). Please do not"></a> From list methods, you are allowed to use only .append() and .insert(). Please do not</h3><h3 id="ask-on-piazza-whether-you-can-use-sort-remove-pop-count-etc"><a href="#ask-on-piazza-whether-you-can-use-sort-remove-pop-count-etc" class="headerlink" title="ask on piazza whether you can use .sort(), .remove(), .pop() .count() etc."></a>ask on piazza whether you can use .sort(), .remove(), .pop() .count() etc.</h3><h3 id="-You-are-not-allowed-to-use-slicing-in-any-form"><a href="#-You-are-not-allowed-to-use-slicing-in-any-form" class="headerlink" title=" You are not allowed to use slicing in any form."></a> You are not allowed to use slicing in any form.</h3><h3 id="-The-only-allowed-method-to-remove-an-item-from-a-list-is-the-del-operator"><a href="#-The-only-allowed-method-to-remove-an-item-from-a-list-is-the-del-operator" class="headerlink" title=" The only allowed method to remove an item from a list is the del operator."></a> The only allowed method to remove an item from a list is the del operator.</h3><h3 id="-You-are-not-allowed-to-hard-code-exhaustive-if-elif-elif-statements-to-handle-all-possible"><a href="#-You-are-not-allowed-to-hard-code-exhaustive-if-elif-elif-statements-to-handle-all-possible" class="headerlink" title=" You are not allowed to hard-code exhaustive if-elif-elif statements to handle all possible"></a> You are not allowed to hard-code exhaustive if-elif-elif statements to handle all possible</h3><h3 id="list-lengths-Your-code-should-work-with-any-list-length"><a href="#list-lengths-Your-code-should-work-with-any-list-length" class="headerlink" title="list lengths. Your code should work with any list length."></a>list lengths. Your code should work with any list length.</h3><h2 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h2><h3 id="You-may-assume-that"><a href="#You-may-assume-that" class="headerlink" title="You may assume that:"></a>You may assume that:</h3><ul><li>The <strong>types</strong> of the values that are sent to the functions are the proper ones, you don’t have to</li></ul><h3 id="validate-them-e-g-word-is-a-string-not-an-integer-etc"><a href="#validate-them-e-g-word-is-a-string-not-an-integer-etc" class="headerlink" title="validate them (e.g. word is a string, not an integer, etc.)."></a>validate them (e.g. word is a string, not an integer, etc.).</h3><ul><li>The functions are going to be called with usable <strong>values</strong> , you don’t have to validate them (e.g.</li></ul><h3 id="table-contains-single-character-strings-only"><a href="#table-contains-single-character-strings-only" class="headerlink" title="table contains single-character strings only)."></a>table contains single-character strings only).</h3><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><h3 id="In-this-assignment-testing-will-be-done-as-before-You-will-start-working-on-the-assignment-without-a"><a href="#In-this-assignment-testing-will-be-done-as-before-You-will-start-working-on-the-assignment-without-a" class="headerlink" title="In this assignment testing will be done as before. You will start working on the assignment without a"></a>In this assignment testing will be done as before. You will start working on the assignment without a</h3><h3 id="tester-and-you-will-do-your-own-testing-based-on-the-examples-we-provide-in-this-document-as-well"><a href="#tester-and-you-will-do-your-own-testing-based-on-the-examples-we-provide-in-this-document-as-well" class="headerlink" title="tester, and you will do your own testing based on the examples we provide in this document as well"></a>tester, and you will do your own testing based on the examples we provide in this document as well</h3><h3 id="as-other-examples-you-can-come-up-with-A-few-days-later-we-will-provide-an-actual-tester-but-don’t"><a href="#as-other-examples-you-can-come-up-with-A-few-days-later-we-will-provide-an-actual-tester-but-don’t" class="headerlink" title="as other examples you can come up with. A few days later we will provide an actual tester but don’t"></a>as other examples you can come up with. A few days later we will provide an actual tester but don’t</h3><h3 id="wait-for-it-in-order-to-start-working-on-the-assignment-as-there-won’t-be-enough-time-to-complete-it"><a href="#wait-for-it-in-order-to-start-working-on-the-assignment-as-there-won’t-be-enough-time-to-complete-it" class="headerlink" title="wait for it in order to start working on the assignment as there won’t be enough time to complete it"></a>wait for it in order to start working on the assignment as there won’t be enough time to complete it</h3><h3 id="before-the-deadline-The-purpose-of-the-delayed-release-of-the-tester-is-for-you-to-put-more-emphasis"><a href="#before-the-deadline-The-purpose-of-the-delayed-release-of-the-tester-is-for-you-to-put-more-emphasis" class="headerlink" title="before the deadline. The purpose of the delayed release of the tester is for you to put more emphasis/"></a>before the deadline. The purpose of the delayed release of the tester is for you to put more emphasis/</h3><h3 id="effort-on-writing-logically-correct-programs-instead-of-trying-to-pass-certain-tests-only-When-we-post"><a href="#effort-on-writing-logically-correct-programs-instead-of-trying-to-pass-certain-tests-only-When-we-post" class="headerlink" title="effort on writing logically correct programs instead of trying to pass certain tests only. When we post"></a>effort on writing logically correct programs instead of trying to pass certain tests only. When we post</h3><h3 id="the-tester-we’re-going-to-omit-some-of-the-test-cases-that-will-be-used-for-grading-This-means-that"><a href="#the-tester-we’re-going-to-omit-some-of-the-test-cases-that-will-be-used-for-grading-This-means-that" class="headerlink" title="the tester, we’re going to omit some of the test cases that will be used for grading. This means that"></a>the tester, we’re going to omit some of the test cases that will be used for grading. This means that</h3><h3 id="there-might-be-errors-in-your-code-even-if-the-tester-is-giving-you-no-errors-You-must-do-your-own"><a href="#there-might-be-errors-in-your-code-even-if-the-tester-is-giving-you-no-errors-You-must-do-your-own" class="headerlink" title="there might be errors in your code even if the tester is giving you no errors. You must do your own"></a>there might be errors in your code even if the tester is giving you no errors. You must do your own</h3><h3 id="checks-to-make-sure-that-you-haven’t-missed-anything-and-your-code-is-correct-You-do-not-need-to"><a href="#checks-to-make-sure-that-you-haven’t-missed-anything-and-your-code-is-correct-You-do-not-need-to" class="headerlink" title="checks to make sure that you haven’t missed anything and your code is correct. You do not need to"></a>checks to make sure that you haven’t missed anything and your code is correct. You do not need to</h3><h3 id="modify-the-tester-just-test-on-your-own-any-way-you-like-Again-the-goal-is-to-help-you-put-more-focus"><a href="#modify-the-tester-just-test-on-your-own-any-way-you-like-Again-the-goal-is-to-help-you-put-more-focus" class="headerlink" title="modify the tester, just test on your own any way you like. Again, the goal is to help you put more focus"></a>modify the tester, just test on your own any way you like. Again, the goal is to help you put more focus</h3><h3 id="on-writing-logically-correct-programs-instead-of-trying-to-pass-certain-tests-only"><a href="#on-writing-logically-correct-programs-instead-of-trying-to-pass-certain-tests-only" class="headerlink" title="on writing logically correct programs instead of trying to pass certain tests only."></a>on writing logically correct programs instead of trying to pass certain tests only.</h3><h2 id="Grading-Rubric"><a href="#Grading-Rubric" class="headerlink" title="Grading Rubric"></a>Grading Rubric</h2><h3 id="Submitted-correctly"><a href="#Submitted-correctly" class="headerlink" title="Submitted correctly:"></a>Submitted correctly:</h3><h3 id="Code-is-well-commented"><a href="#Code-is-well-commented" class="headerlink" title="Code is well commented:"></a>Code is well commented:</h3><h3 id="Tester-calculations-correct"><a href="#Tester-calculations-correct" class="headerlink" title="Tester calculations correct:"></a>Tester calculations correct:</h3><h3 id="Unknown-test-cases"><a href="#Unknown-test-cases" class="headerlink" title="Unknown test cases"></a>Unknown test cases</h3><h3 id="TOTAL"><a href="#TOTAL" class="headerlink" title="TOTAL:"></a>TOTAL:</h3><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><h3 id="60"><a href="#60" class="headerlink" title="60"></a>60</h3><h3 id="30"><a href="#30" class="headerlink" title="30"></a>30</h3><h3 id="100"><a href="#100" class="headerlink" title="100"></a>100</h3><h3 id="see-assignment-basics-file-for-file-requirements"><a href="#see-assignment-basics-file-for-file-requirements" class="headerlink" title="# see assignment basics file for file requirements!"></a># see assignment basics file for file requirements!</h3><h3 id="see-assignment-basics-file-for-how-to-comment"><a href="#see-assignment-basics-file-for-how-to-comment" class="headerlink" title="# see assignment basics file for how to comment!"></a># see assignment basics file for how to comment!</h3><h3 id="see-assignment-basics-file-for-how-to-test"><a href="#see-assignment-basics-file-for-how-to-test" class="headerlink" title="# see assignment basics file for how to test!"></a># see assignment basics file for how to test!</h3><h3 id="test-cases-that-are-omitted-from-the-tester"><a href="#test-cases-that-are-omitted-from-the-tester" class="headerlink" title="# test cases that are omitted from the tester"></a># test cases that are omitted from the tester</h3><h3 id="Note-If-your-code-does-not-run-and-crashes-due-to-errors-it-will-receive-zero-points-Turning-in"><a href="#Note-If-your-code-does-not-run-and-crashes-due-to-errors-it-will-receive-zero-points-Turning-in" class="headerlink" title="Note : If your code does not run and crashes due to errors, it will receive zero points. Turning in"></a>Note : If your code does not run and crashes due to errors, it will receive zero points. Turning in</h3><h3 id="running-code-is-essential"><a href="#running-code-is-essential" class="headerlink" title="running code is essential."></a>running code is essential.</h3><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="The-signature-of-each-function-is-provided-below-do-not-make-any-changes-to-them-otherwise-the"><a href="#The-signature-of-each-function-is-provided-below-do-not-make-any-changes-to-them-otherwise-the" class="headerlink" title="The signature of each function is provided below, do not make any changes to them otherwise the"></a>The signature of each function is provided below, do not make any changes to them otherwise the</h3><h3 id="tester-will-not-work-properly-The-following-are-the-functions-you-must-implement"><a href="#tester-will-not-work-properly-The-following-are-the-functions-you-must-implement" class="headerlink" title="tester will not work properly. The following are the functions you must implement."></a>tester will not work properly. The following are the functions you must implement.</h3><p><strong>create_3D(H,W,D)</strong><br>Description: It creates a list of list of list of ints (i.e. a 3D matrix) with dimensions <strong>H</strong> x <strong>W</strong> x <strong>D</strong>. The value of<br>each item is the sum of its three indexes.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter<span class="variable">s:</span> H (<span class="keyword">int</span>) <span class="keyword">is</span> the height, W (<span class="keyword">int</span>) <span class="keyword">is</span> the width, D (<span class="keyword">int</span>) <span class="keyword">is</span> the depth</span><br></pre></td></tr></table></figure><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Return</span> <span class="keyword">value</span>: <span class="built_in">list</span> <span class="keyword">of</span> <span class="built_in">list</span> <span class="keyword">of</span> <span class="built_in">list</span> <span class="keyword">of</span> <span class="built_in">int</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">create_3D(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) → <span class="string">[[[0,1,2],[1,2,3]]</span>,</span><br><span class="line"><span class="string">[[1,2,3],[2,3,4]]</span>,</span><br><span class="line"><span class="string">[[2,3,4],[3,4,5]]</span>,</span><br><span class="line"><span class="string">[[3,4,5],[4,5,6]]</span>]</span><br></pre></td></tr></table></figure><p><strong>copy_3D(xs)</strong><br>Description: It creates a <strong>deep copy</strong> of a 3D matrix <strong>xs</strong>. Make sure the copy you make is not an <strong>alias</strong> or a<br><strong>shallow copy</strong>.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parameter<span class="variable">s:</span> xs (<span class="keyword">list</span> of <span class="keyword">list</span> of <span class="keyword">list</span> of <span class="keyword">int</span>). Sublists can have different sizes, i.<span class="keyword">e</span>. <span class="keyword">do</span> not assume</span><br><span class="line">that xs <span class="keyword">is</span> <span class="keyword">a</span> cube <span class="built_in">or</span> <span class="keyword">a</span> rectangular prism. You’re not allowed <span class="keyword">to</span> modify xs.</span><br></pre></td></tr></table></figure><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Return</span> <span class="keyword">value</span>: <span class="built_in">list</span> <span class="keyword">of</span> <span class="built_in">list</span> <span class="keyword">of</span> <span class="built_in">list</span> <span class="keyword">of</span> <span class="built_in">int</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">An example won’t <span class="keyword">help</span> because the copy looks exactly <span class="keyword">like</span> the original list. <span class="keyword">Use</span> the visualizer <span class="keyword">to</span> visually</span><br><span class="line">inspect the copy <span class="keyword">and</span> make sure it doesn’t <span class="keyword">share</span> <span class="keyword">any</span> <span class="keyword">memory</span> <span class="keyword">with</span> the original <span class="keyword">list</span> (i.e. <span class="keyword">no</span> item <span class="keyword">at</span> <span class="keyword">any</span></span><br><span class="line"><span class="keyword">level</span> <span class="keyword">is</span> pointed <span class="keyword">to</span> <span class="keyword">by</span> two different lists).</span><br></pre></td></tr></table></figure><p><strong>sublist(xs, total)</strong><br>Description: It finds the <strong>smallest square-size</strong> sublist of a 2D list <strong>xs</strong> that the sum of its values is greater<br>than or equal to <strong>total</strong>. Minimum size of a sublist is 2x2. If there are more than one <strong>equally sized</strong><br>sublists that satisfy the requirements, it returns the one with the <strong>largest sum</strong>. If no sublist satisfies the<br>requirements it returns <strong>False.</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter<span class="variable">s:</span> xs (<span class="keyword">list</span> of <span class="keyword">list</span> of <span class="keyword">int</span>), total (<span class="keyword">int</span>). You’re not allowed <span class="keyword">to</span> modify xs.</span><br></pre></td></tr></table></figure><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Return</span> value: a square size <span class="keyword">list</span> of <span class="keyword">list</span> of <span class="keyword">int</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">sublist(<span class="string">[[0,1,2],[-4,5,6],[7,8,3]]</span>,<span class="number">5</span>) → <span class="string">[[5,6],[8,3]]</span></span><br><span class="line">sublist(<span class="string">[[0,1,2],[-4,5,6],[7,8,3]]</span>,<span class="number">23</span>) → <span class="string">[[0,1,2],[-4,5,6],[7,8,3]]</span></span><br></pre></td></tr></table></figure><p><strong>crossword(table, word)</strong><br>Description: Given <strong>table</strong> , a 2D list of <strong>unordered</strong> characters, and a single <strong>word</strong> , it searches each row of<br>the <strong>table</strong> individually to see if some or all of its characters can put together to form the <strong>word</strong>. It<br>returns the number of the first row that holds the required characters, or <strong>False</strong> if no row has the<br>necessary characters.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameters: table (<span class="built_in">list</span> <span class="keyword">of</span> <span class="built_in">list</span> <span class="keyword">of</span> <span class="built_in">string</span>), <span class="built_in">word</span> (<span class="built_in">string</span>). Modification <span class="keyword">of</span> table <span class="keyword">is</span> allowed.</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Return</span> value: <span class="built_in">int</span> <span class="literal">or</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Example</span>:</span><br><span class="line">crossword([[<span class="string">'t'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>],</span><br><span class="line">[<span class="string">'d'</span>,<span class="string">'a'</span>,<span class="string">'r'</span>,<span class="string">'r'</span>],</span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'f'</span>,<span class="string">'r'</span>,<span class="string">'c'</span>]],<span class="string">'car'</span>)→ <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crossword([[<span class="string">'t'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>],</span><br><span class="line">[<span class="string">'d'</span>,<span class="string">'a'</span>,<span class="string">'r'</span>,<span class="string">'r'</span>],</span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'f'</span>,<span class="string">'r'</span>,<span class="string">'c'</span>]],<span class="string">'bar'</span>)→ <span class="symbol">False</span></span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crossword([[<span class="string">'t'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>],</span><br><span class="line">[<span class="string">'d'</span>,<span class="string">'a'</span>,<span class="string">'r'</span>,<span class="string">'r'</span>],</span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'f'</span>,<span class="string">'r'</span>,<span class="string">'c'</span>]],<span class="string">'dad'</span>)→ <span class="symbol">False</span> # now row has two d’s</span><br></pre></td></tr></table></figure><p><strong>sparse(compact)</strong><br>Description: A sparse matrix is a 2D matrix that has many zeros. Assume that for storage efficiency<br>someone has converted a sparse matrix into a <strong>compact</strong> 2D matrix with dimensions Nx3 where <strong>_N_</strong> is the<br>number of non-zero items in the original sparse matrix. In each row of <strong>compact</strong> , the first column holds<br>the value of a non-zero item of the sparse matrix, the second column holds the row that this item<br>resides in the sparse matrix, and the third column holds the column that this item resides in the sparse<br>matrix. Write a function that given a <strong>compact</strong> matrix it returns the original sparse matrix. <strong>Assume the<br>last row and the last column of the sparse matrix contain at least one non-zero item.</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter<span class="variable">s:</span> compact (<span class="keyword">list</span> of <span class="keyword">list</span> of <span class="keyword">int</span>).</span><br></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Return value: a<span class="built_in"> sparse </span>list of list of int</span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">sparse(<span class="comment">[<span class="comment">[3,1,2]</span>,<span class="comment">[4,5,3]</span>]</span>) → <span class="comment">[ <span class="comment">[0,0,0,0]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[0,0,3,0]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[0,0,0,0]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[0,0,0,0]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[0,0,0,0]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[0,0,0,4]</span> ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Python完成
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS112-ProgrammingAssignment5</title>
    <link href="cplusplusdaixie.com/CS112-ProgrammingAssignment5.html"/>
    <id>cplusplusdaixie.com/CS112-ProgrammingAssignment5.html</id>
    <published>2023-06-29T03:02:56.000Z</published>
    <updated>2023-06-29T03:05:01.867Z</updated>
    
    <content type="html"><![CDATA[<p>###CS 112 – Spring 2020 – Programming Assignment 5</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Loops <span class="meta">&amp; Lists</span></span><br></pre></td></tr></table></figure><h3 id="The-purpose-of-this-assignment-is-to-practice-using-loops-and-basic-lists-effectively"><a href="#The-purpose-of-this-assignment-is-to-practice-using-loops-and-basic-lists-effectively" class="headerlink" title="The purpose of this assignment is to practice using loops and basic lists effectively."></a>The purpose of this assignment is to practice using loops and basic lists effectively.</h3><h3 id="See-the-“assignment-basics”-file-for-more-detailed-information-about-getting-assistance-running-the"><a href="#See-the-“assignment-basics”-file-for-more-detailed-information-about-getting-assistance-running-the" class="headerlink" title="See the “assignment basics” file for more detailed information about getting assistance, running the"></a>See the “assignment basics” file for more detailed information about getting assistance, running the</h3><h3 id="test-file-grading-commenting-and-many-other-extremely-important-things-Each-assignment-is"><a href="#test-file-grading-commenting-and-many-other-extremely-important-things-Each-assignment-is" class="headerlink" title="test file, grading, commenting, and many other extremely important things. Each assignment is"></a>test file, grading, commenting, and many other extremely important things. Each assignment is</h3><h3 id="governed-by-the-rules-in-that-document"><a href="#governed-by-the-rules-in-that-document" class="headerlink" title="governed by the rules in that document:"></a>governed by the rules in that document:</h3><h3 id="https-piazza-com-class-profile-get-resource-k4wblafqtoj2cx-k5x3ennufm34cg"><a href="#https-piazza-com-class-profile-get-resource-k4wblafqtoj2cx-k5x3ennufm34cg" class="headerlink" title="https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k5x3ennufm34cg"></a><a href="https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k5x3ennufm34cg" target="_blank" rel="noopener">https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k5x3ennufm34cg</a></h3><h3 id="Needed-file-the-tester-for-this-assignment"><a href="#Needed-file-the-tester-for-this-assignment" class="headerlink" title="Needed file, the tester for this assignment:"></a>Needed file, the tester for this assignment:</h3><h3 id="https-piazza-com-class-profile-get-resource-k4wblafqtoj2cx-k75awsh1vap1yh"><a href="#https-piazza-com-class-profile-get-resource-k4wblafqtoj2cx-k75awsh1vap1yh" class="headerlink" title="https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k75awsh1vap1yh"></a><a href="https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k75awsh1vap1yh" target="_blank" rel="noopener">https://piazza.com/class_profile/get_resource/k4wblafqtoj2cx/k75awsh1vap1yh</a></h3><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="Loop-statements-allow-us-to-run-the-same-block-of-code-repeatedly-with-the-chance-to-use-different"><a href="#Loop-statements-allow-us-to-run-the-same-block-of-code-repeatedly-with-the-chance-to-use-different" class="headerlink" title="Loop statements allow us to run the same block of code repeatedly, with the chance to use different"></a>Loop statements allow us to run the same block of code repeatedly, with the chance to use different</h3><h3 id="values-for-variables-each-time-as-the-accumulated-effects-pile-up-Lists-are-sequences-that-can-be"><a href="#values-for-variables-each-time-as-the-accumulated-effects-pile-up-Lists-are-sequences-that-can-be" class="headerlink" title="values for variables each time as the accumulated effects pile up. Lists are sequences that can be"></a>values for variables each time as the accumulated effects pile up. Lists are sequences that can be</h3><h3 id="inspected-value-by-value-and-modified-at-will-In-this-assignment-we-will-use-loops-to-perform"><a href="#inspected-value-by-value-and-modified-at-will-In-this-assignment-we-will-use-loops-to-perform" class="headerlink" title="inspected value-by-value and modified at will. In this assignment we will use loops to perform"></a>inspected value-by-value and modified at will. In this assignment we will use loops to perform</h3><h3 id="calculations-over-one-dimensional-lists-in-future-assignments-we-will-work-with-multi-dimensional"><a href="#calculations-over-one-dimensional-lists-in-future-assignments-we-will-work-with-multi-dimensional" class="headerlink" title="calculations over one-dimensional lists (in future assignments we will work with multi-dimensional"></a>calculations over one-dimensional lists (in future assignments we will work with multi-dimensional</h3><h3 id="lists-too-However-working-with-one-dimensional-lists-doesn’t-necessarily-mean-that-a-single"><a href="#lists-too-However-working-with-one-dimensional-lists-doesn’t-necessarily-mean-that-a-single" class="headerlink" title="lists too). However, working with one-dimensional lists doesn’t necessarily mean that a single"></a>lists too). However, working with one-dimensional lists doesn’t necessarily mean that a single</h3><h3 id="while-for-loop-is-always-enough-sometimes-a-repeated-iteration-over-a-list-might-require-a-double"><a href="#while-for-loop-is-always-enough-sometimes-a-repeated-iteration-over-a-list-might-require-a-double" class="headerlink" title="while/for loop is always enough, sometimes a repeated iteration over a list might require a (double"></a>while/for loop is always enough, sometimes a repeated iteration over a list might require a (double</h3><h3 id="or-even-triple-nested-loop"><a href="#or-even-triple-nested-loop" class="headerlink" title="or even triple) nested loop."></a>or even triple) nested loop.</h3><h2 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h2><h3 id="-You-are-not-allowed-to-import-anything"><a href="#-You-are-not-allowed-to-import-anything" class="headerlink" title=" You are not allowed to import anything."></a> You are not allowed to import anything.</h3><h3 id="-You-are-not-allowed-to-use-sets-dictionaries"><a href="#-You-are-not-allowed-to-use-sets-dictionaries" class="headerlink" title=" You are not allowed to use sets, dictionaries"></a> You are not allowed to use sets, dictionaries</h3><h3 id="-You-are-not-allowed-to-use-anything-that-hasn’t-been-covered-in-class-including-the-list"><a href="#-You-are-not-allowed-to-use-anything-that-hasn’t-been-covered-in-class-including-the-list" class="headerlink" title=" You are not allowed to use anything that hasn’t been covered in class, including the list"></a> You are not allowed to use anything that hasn’t been covered in class, including the list</h3><h3 id="comprehension-construct-if-you-don’t-know-it-don’t-worry-it’s-impossible-to-use-it-by-accident"><a href="#comprehension-construct-if-you-don’t-know-it-don’t-worry-it’s-impossible-to-use-it-by-accident" class="headerlink" title="comprehension construct (if you don’t know it, don’t worry, it’s impossible to use it by accident!)"></a>comprehension construct (if you don’t know it, don’t worry, it’s impossible to use it by accident!)</h3><h3 id="-From-built-in-functions-you-are-allowed-to-call-only-range-len-abs-int-str"><a href="#-From-built-in-functions-you-are-allowed-to-call-only-range-len-abs-int-str" class="headerlink" title=" From built-in functions, you are allowed to call only range() , len() , abs() , int() , str()"></a> From built-in functions, you are allowed to call only range() , len() , abs() , int() , str()</h3><h3 id="-From-list-methods-you-are-allowed-to-use-only-append-Please-do-not-ask-on-piazza"><a href="#-From-list-methods-you-are-allowed-to-use-only-append-Please-do-not-ask-on-piazza" class="headerlink" title=" From list methods, you are allowed to use only .append(). Please do not ask on piazza"></a> From list methods, you are allowed to use only .append(). Please do not ask on piazza</h3><h3 id="whether-you-can-use-sort-index-count-etc"><a href="#whether-you-can-use-sort-index-count-etc" class="headerlink" title="whether you can use .sort(), .index(), .count() etc."></a>whether you can use .sort(), .index(), .count() etc.</h3><h3 id="-You-are-not-allowed-to-hard-code-exhaustive-if-elif-elif-statements-to-handle-all-possible"><a href="#-You-are-not-allowed-to-hard-code-exhaustive-if-elif-elif-statements-to-handle-all-possible" class="headerlink" title=" You are not allowed to hard-code exhaustive if-elif-elif statements to handle all possible"></a> You are not allowed to hard-code exhaustive if-elif-elif statements to handle all possible</h3><h3 id="list-lengths-Your-code-should-work-with-any-length-of-list-even-if-it-were-larger-than-13"><a href="#list-lengths-Your-code-should-work-with-any-length-of-list-even-if-it-were-larger-than-13" class="headerlink" title="list lengths. Your code should work with any length of list even if it were larger than 13."></a>list lengths. Your code should work with any length of list even if it were larger than 13.</h3><h3 id="-You-can-only-use-slicing-if-it-doesn’t-bypass-a-restriction-For-example-you-can’t-use-slicing-to"><a href="#-You-can-only-use-slicing-if-it-doesn’t-bypass-a-restriction-For-example-you-can’t-use-slicing-to" class="headerlink" title=" You can only use slicing if it doesn’t bypass a restriction. For example, you can’t use slicing to"></a> You can only use slicing if it doesn’t bypass a restriction. For example, you can’t use slicing to</h3><h3 id="reverse-a-list-since-reverse-is-not-allowed-either"><a href="#reverse-a-list-since-reverse-is-not-allowed-either" class="headerlink" title="reverse a list since .reverse() is not allowed either."></a>reverse a list since .reverse() is not allowed either.</h3><h3 id="-When-a-specific-test-case-isn’t-working-plug-your-code-into-the-visualizer-to-watch-what"><a href="#-When-a-specific-test-case-isn’t-working-plug-your-code-into-the-visualizer-to-watch-what" class="headerlink" title=" When a specific test case isn’t working, plug your code into the visualizer to watch what"></a> When a specific test case isn’t working, plug your code into the visualizer to watch what</h3><h3 id="the-code-does-which-lines-run-which-branches-are-taken"><a href="#the-code-does-which-lines-run-which-branches-are-taken" class="headerlink" title="the code does, which lines run, which branches are taken."></a>the code does, which lines run, which branches are taken.</h3><h3 id="-Insert-comments-in-the-lines-you-deem-necessary"><a href="#-Insert-comments-in-the-lines-you-deem-necessary" class="headerlink" title=" Insert comments in the lines you deem necessary"></a> Insert comments in the lines you deem necessary</h3><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><h3 id="In-this-assignment-testing-will-be-done-a-bit-different-than-before"><a href="#In-this-assignment-testing-will-be-done-a-bit-different-than-before" class="headerlink" title="In this assignment testing will be done a bit different than before:"></a>In this assignment testing will be done a bit different than before:</h3><ul><li>You will start working on the assignment without a tester, and you will do your own testing based on</li></ul><h3 id="the-examples-we-provide-in-this-document-as-well-as-other-examples-you-can-come-up-with-Later-in"><a href="#the-examples-we-provide-in-this-document-as-well-as-other-examples-you-can-come-up-with-Later-in" class="headerlink" title="the examples we provide in this document as well as other examples you can come up with. Later in"></a>the examples we provide in this document as well as other examples you can come up with. Later in</h3><h3 id="the-week-we-will-provide-an-actual-tester-but-don’t-wait-for-it-in-order-to-start-working-on-the"><a href="#the-week-we-will-provide-an-actual-tester-but-don’t-wait-for-it-in-order-to-start-working-on-the" class="headerlink" title="the week we will provide an actual tester but don’t wait for it in order to start working on the"></a>the week we will provide an actual tester but don’t wait for it in order to start working on the</h3><h3 id="assignment-as-there-won’t-be-enough-time-to-complete-it-before-the-deadline-The-purpose-of-the"><a href="#assignment-as-there-won’t-be-enough-time-to-complete-it-before-the-deadline-The-purpose-of-the" class="headerlink" title="assignment as there won’t be enough time to complete it before the deadline. The purpose of the"></a>assignment as there won’t be enough time to complete it before the deadline. The purpose of the</h3><h3 id="delayed-release-of-the-tester-is-for-you-to-put-more-emphasis-effort-on-writing-logically-correct"><a href="#delayed-release-of-the-tester-is-for-you-to-put-more-emphasis-effort-on-writing-logically-correct" class="headerlink" title="delayed release of the tester is for you to put more emphasis/effort on writing logically correct"></a>delayed release of the tester is for you to put more emphasis/effort on writing logically correct</h3><h3 id="programs-instead-of-trying-to-pass-certain-tests-only"><a href="#programs-instead-of-trying-to-pass-certain-tests-only" class="headerlink" title="programs instead of trying to pass certain tests only."></a>programs instead of trying to pass certain tests only.</h3><ul><li>When we post the tester, we’re going to omit some of the test cases that will be used for grading.</li></ul><h3 id="This-means-that-there-might-be-errors-in-your-code-even-if-the-tester-is-giving-you-no-errors-You-must"><a href="#This-means-that-there-might-be-errors-in-your-code-even-if-the-tester-is-giving-you-no-errors-You-must" class="headerlink" title="This means that there might be errors in your code even if the tester is giving you no errors. You must"></a>This means that there might be errors in your code even if the tester is giving you no errors. You must</h3><h3 id="do-your-own-checks-to-make-sure-that-you-haven’t-missed-anything-and-your-code-is-correct-You-do"><a href="#do-your-own-checks-to-make-sure-that-you-haven’t-missed-anything-and-your-code-is-correct-You-do" class="headerlink" title="do your own checks to make sure that you haven’t missed anything and your code is correct. You do"></a>do your own checks to make sure that you haven’t missed anything and your code is correct. You do</h3><h3 id="not-need-to-modify-the-tester-just-test-on-your-own-any-way-you-like-Again-the-goal-is-to-help-you-put"><a href="#not-need-to-modify-the-tester-just-test-on-your-own-any-way-you-like-Again-the-goal-is-to-help-you-put" class="headerlink" title="not need to modify the tester, just test on your own any way you like. Again, the goal is to help you put"></a>not need to modify the tester, just test on your own any way you like. Again, the goal is to help you put</h3><h3 id="more-focus-on-writing-logically-correct-programs-instead-of-trying-to-pass-certain-tests-only"><a href="#more-focus-on-writing-logically-correct-programs-instead-of-trying-to-pass-certain-tests-only" class="headerlink" title="more focus on writing logically correct programs instead of trying to pass certain tests only."></a>more focus on writing logically correct programs instead of trying to pass certain tests only.</h3><h2 id="Grading-Rubric"><a href="#Grading-Rubric" class="headerlink" title="Grading Rubric"></a>Grading Rubric</h2><h3 id="Submitted-correctly"><a href="#Submitted-correctly" class="headerlink" title="Submitted correctly:"></a>Submitted correctly:</h3><h3 id="Code-is-well-commented"><a href="#Code-is-well-commented" class="headerlink" title="Code is well commented:"></a>Code is well commented:</h3><h3 id="Tester-calculations-correct"><a href="#Tester-calculations-correct" class="headerlink" title="Tester calculations correct:"></a>Tester calculations correct:</h3><h3 id="Unknown-test-cases"><a href="#Unknown-test-cases" class="headerlink" title="Unknown test cases"></a>Unknown test cases</h3><h3 id="TOTAL"><a href="#TOTAL" class="headerlink" title="TOTAL:"></a>TOTAL:</h3><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><h3 id="70"><a href="#70" class="headerlink" title="70"></a>70</h3><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><h3 id="100"><a href="#100" class="headerlink" title="100"></a>100</h3><h3 id="see-assignment-basics-file-for-file-requirements"><a href="#see-assignment-basics-file-for-file-requirements" class="headerlink" title="# see assignment basics file for file requirements!"></a># see assignment basics file for file requirements!</h3><h3 id="see-assignment-basics-file-for-how-to-comment"><a href="#see-assignment-basics-file-for-how-to-comment" class="headerlink" title="# see assignment basics file for how to comment!"></a># see assignment basics file for how to comment!</h3><h3 id="see-assignment-basics-file-for-how-to-test"><a href="#see-assignment-basics-file-for-how-to-test" class="headerlink" title="# see assignment basics file for how to test!"></a># see assignment basics file for how to test!</h3><h3 id="test-cases-that-are-omitted-from-the-tester"><a href="#test-cases-that-are-omitted-from-the-tester" class="headerlink" title="# test cases that are omitted from the tester"></a># test cases that are omitted from the tester</h3><h3 id="Note-If-your-code-does-not-run-and-crashes-due-to-errors-it-will-receive-zero-points-Turning-in"><a href="#Note-If-your-code-does-not-run-and-crashes-due-to-errors-it-will-receive-zero-points-Turning-in" class="headerlink" title="Note : If your code does not run and crashes due to errors, it will receive zero points. Turning in"></a>Note : If your code does not run and crashes due to errors, it will receive zero points. Turning in</h3><h3 id="running-code-is-essential"><a href="#running-code-is-essential" class="headerlink" title="running code is essential."></a>running code is essential.</h3><h2 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h2><h3 id="You’re-working-for-the-same-software-company-that-you-did-in-PA3-and-your-manager-asks-you-to"><a href="#You’re-working-for-the-same-software-company-that-you-did-in-PA3-and-your-manager-asks-you-to" class="headerlink" title="You’re working for the same software company that you did in PA3 and your manager asks you to"></a>You’re working for the same software company that you did in PA3 and your manager asks you to</h3><h3 id="write-a-new-version-of-the-poker-application-only-this-time-it’s-going-to-be-more-powerful-and"><a href="#write-a-new-version-of-the-poker-application-only-this-time-it’s-going-to-be-more-powerful-and" class="headerlink" title="write a new version of the poker application, only this time it’s going to be more powerful and"></a>write a new version of the poker application, only this time it’s going to be more powerful and</h3><h3 id="customizable-for-more-variants-of-the-poker-game-More-specifically-it-should-work-with-any-number"><a href="#customizable-for-more-variants-of-the-poker-game-More-specifically-it-should-work-with-any-number" class="headerlink" title="customizable for more variants of the poker game. More specifically, it should work with any number"></a>customizable for more variants of the poker game. More specifically, it should work with any number</h3><h3 id="of-cards-not-just-3-as-before-but-with-larger-numbers-too-e-g-4-5-7-etc-For-the-purposes-of-this"><a href="#of-cards-not-just-3-as-before-but-with-larger-numbers-too-e-g-4-5-7-etc-For-the-purposes-of-this" class="headerlink" title="of cards, not just 3 as before but with larger numbers too (e.g. 4 , 5 , 7 , etc.). For the purposes of this"></a>of cards, not just 3 as before but with larger numbers too (e.g. 4 , 5 , 7 , etc.). For the purposes of this</h3><h3 id="assignment-we-will-assume-that-the-hand-can-have-any-length-from-3-up-to-13-included-We-will-also"><a href="#assignment-we-will-assume-that-the-hand-can-have-any-length-from-3-up-to-13-included-We-will-also" class="headerlink" title="assignment we will assume that the hand can have any length from 3 up to 13 included. We will also"></a>assignment we will assume that the hand can have any length from 3 up to 13 included. We will also</h3><h3 id="assume-that-the-following-hands-and-ranks-apply-to-all-variants"><a href="#assume-that-the-following-hands-and-ranks-apply-to-all-variants" class="headerlink" title="assume that the following hands and ranks apply to all variants."></a>assume that the following hands and ranks apply to all variants.</h3><h3 id="Rank-Description"><a href="#Rank-Description" class="headerlink" title="Rank Description"></a>Rank Description</h3><h3 id="Straight-flush-ALL-suited-cards-in-sequence"><a href="#Straight-flush-ALL-suited-cards-in-sequence" class="headerlink" title="Straight flush ALL suited cards in sequence"></a>Straight flush ALL suited cards in sequence</h3><h3 id="N-of-a-kind-N-cards-of-same-rank-N-will-be-either-3-or-4"><a href="#N-of-a-kind-N-cards-of-same-rank-N-will-be-either-3-or-4" class="headerlink" title="N of a kind N cards of same rank ( N will be either 3 or 4)"></a>N of a kind N cards of same rank ( N will be either 3 or 4)</h3><h3 id="Straight-ALL-cards-in-sequence"><a href="#Straight-ALL-cards-in-sequence" class="headerlink" title="Straight ALL cards in sequence"></a>Straight ALL cards in sequence</h3><h3 id="Flush-ALL-suited-cards"><a href="#Flush-ALL-suited-cards" class="headerlink" title="Flush ALL suited cards"></a>Flush ALL suited cards</h3><h3 id="N-pairs-N-different-pairs-of-two-cards-of-same-rank-N-will-be-either-1-or-2"><a href="#N-pairs-N-different-pairs-of-two-cards-of-same-rank-N-will-be-either-1-or-2" class="headerlink" title="N pairs N different pairs of two cards of same rank ( N will be either 1 or 2)"></a>N pairs N different pairs of two cards of same rank ( N will be either 1 or 2)</h3><h3 id="Table-1"><a href="#Table-1" class="headerlink" title="Table 1"></a>Table 1</h3><h3 id="For-each-of-these-hands-you-will-implement-a-function-that-takes-a-list-of-numbers-that-represent-the"><a href="#For-each-of-these-hands-you-will-implement-a-function-that-takes-a-list-of-numbers-that-represent-the" class="headerlink" title="For each of these hands you will implement a function that takes a list of numbers that represent the"></a>For each of these hands you will implement a function that takes a list of numbers that represent the</h3><h3 id="cards-and-for-some-functions-a-second-parameter-too-and-returns-some-value-according-to-the"><a href="#cards-and-for-some-functions-a-second-parameter-too-and-returns-some-value-according-to-the" class="headerlink" title="cards (and for some functions a second parameter too) and returns some value according to the"></a>cards (and for some functions a second parameter too) and returns some value according to the</h3><h3 id="specification-We-will-use-the-Table-2-mapping-to-represent-the-standard-52-card-deck-with-integers"><a href="#specification-We-will-use-the-Table-2-mapping-to-represent-the-standard-52-card-deck-with-integers" class="headerlink" title="specification. We will use the Table 2 mapping to represent the standard 52-card deck with integers."></a>specification. We will use the Table 2 mapping to represent the standard 52-card deck with integers.</h3><h3 id="Ace-will-always-rank-low-i-e-be-the-lowest-card-when-considering-a-sequence-for-straight"><a href="#Ace-will-always-rank-low-i-e-be-the-lowest-card-when-considering-a-sequence-for-straight" class="headerlink" title="Ace will always rank low (i.e. be the lowest card when considering a sequence for straight)."></a>Ace will always rank low (i.e. be the lowest card when considering a sequence for straight).</h3><h3 id="1-2-3-4-5-6-7-8-9-10-11-12-13"><a href="#1-2-3-4-5-6-7-8-9-10-11-12-13" class="headerlink" title="1 2 3 4 5 6 7 8 9 10 11 12 13"></a>1 2 3 4 5 6 7 8 9 10 11 12 13</h3><h3 id="Clubs"><a href="#Clubs" class="headerlink" title="Clubs"></a>Clubs</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><h3 id="Diamonds"><a href="#Diamonds" class="headerlink" title="Diamonds"></a>Diamonds</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span></span><br></pre></td></tr></table></figure><h3 id="Hearts"><a href="#Hearts" class="headerlink" title="Hearts"></a>Hearts</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span></span><br></pre></td></tr></table></figure><h3 id="Spades"><a href="#Spades" class="headerlink" title="Spades"></a>Spades</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span> <span class="number">48</span> <span class="number">49</span> <span class="number">50</span> <span class="number">51</span> <span class="number">52</span></span><br></pre></td></tr></table></figure><h3 id="Table-2"><a href="#Table-2" class="headerlink" title="Table 2"></a>Table 2</h3><h2 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h2><h3 id="You-may-assume-that"><a href="#You-may-assume-that" class="headerlink" title="You may assume that:"></a>You may assume that:</h3><ul><li>The types of the values that are sent to the functions are the proper ones (card_list is a list</li></ul><h3 id="of-integers-not-floats-etc-you-don’t-have-to-validate-them"><a href="#of-integers-not-floats-etc-you-don’t-have-to-validate-them" class="headerlink" title="of integers not floats, etc.), you don’t have to validate them."></a>of integers not floats, etc.), you don’t have to validate them.</h3><ul><li>The functions are going to be called with usable values (e.g. card_list doesn’t contain</li></ul><h3 id="negative-numbers-etc-you-don’t-have-to-validate-them"><a href="#negative-numbers-etc-you-don’t-have-to-validate-them" class="headerlink" title="negative numbers, etc.), you don’t have to validate them."></a>negative numbers, etc.), you don’t have to validate them.</h3><ul><li>All card numbers that are passed into a function are guaranteed to be unique, you don’t have to</li></ul><h3 id="validate-that-either"><a href="#validate-that-either" class="headerlink" title="validate that either."></a>validate that either.</h3><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="The-signature-of-each-function-is-provided-below-do-not-make-any-changes-to-them-otherwise-the"><a href="#The-signature-of-each-function-is-provided-below-do-not-make-any-changes-to-them-otherwise-the" class="headerlink" title="The signature of each function is provided below, do not make any changes to them otherwise the"></a>The signature of each function is provided below, do not make any changes to them otherwise the</h3><h3 id="tester-will-not-work-properly-The-following-are-the-functions-you-must-implement"><a href="#tester-will-not-work-properly-The-following-are-the-functions-you-must-implement" class="headerlink" title="tester will not work properly. The following are the functions you must implement:"></a>tester will not work properly. The following are the functions you must implement:</h3><p><strong>straight_flush(card_list)</strong><br>Description: The function checks whether a complete list of cards makes up a straight flush hand, and<br>only that. ( <strong>Hint</strong> : check the helper functions)</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parameters: card_list (list <span class="keyword">of</span> int) <span class="keyword">contains</span> <span class="keyword">a</span> list <span class="keyword">of</span> cards represented <span class="keyword">with</span> <span class="keyword">the</span> mapping provided</span><br><span class="line"><span class="keyword">in</span> Table <span class="number">2.</span> Cards are <span class="keyword">not</span> ordered <span class="keyword">and</span> <span class="keyword">the</span> size <span class="keyword">of</span> <span class="keyword">the</span> list can vary.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: If <span class="keyword">the</span> hand is <span class="keyword">not</span> <span class="keyword">a</span> straight flush <span class="literal">return</span> False , otherwise <span class="literal">return</span> <span class="keyword">the</span> face <span class="built_in">value</span> <span class="keyword">of</span> <span class="keyword">the</span></span><br><span class="line">highest card <span class="keyword">as</span> int</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Examples:</span></span><br><span class="line"><span class="string">straight_flush([2,</span> <span class="number">1</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">4</span><span class="string">])</span> <span class="string">→</span> <span class="number">5</span></span><br><span class="line"><span class="string">straight_flush([15,</span> <span class="number">1</span><span class="string">,</span> <span class="number">3</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">4</span><span class="string">])</span> <span class="string">→</span> <span class="literal">False</span> <span class="comment"># straight</span></span><br></pre></td></tr></table></figure><p><strong>n_of_a_kind(card_list, cardinality)</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Description: Based <span class="keyword">on</span> <span class="title">its</span> <span class="title">second</span> <span class="title">parameter</span>, <span class="title">cardinality</span> , <span class="title">the</span> <span class="title">function</span> <span class="title">checks</span> <span class="title">whether</span> <span class="title">the</span> <span class="title">cards</span></span><br><span class="line">make up <span class="keyword">a</span> hand <span class="keyword">of</span> <span class="literal">three</span> <span class="keyword">of</span> <span class="keyword">a</span> kind <span class="keyword">or</span> <span class="keyword">a</span> hand <span class="keyword">of</span> <span class="literal">four</span> <span class="keyword">of</span> <span class="keyword">a</span> kind.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Parameters: card_list (list <span class="keyword">of</span> int) <span class="keyword">contains</span> <span class="keyword">a</span> list <span class="keyword">of</span> cards represented <span class="keyword">with</span> <span class="keyword">the</span> mapping provided</span><br><span class="line"><span class="keyword">in</span> Table <span class="number">2.</span> Cards are <span class="keyword">not</span> ordered <span class="keyword">and</span> <span class="keyword">the</span> size <span class="keyword">of</span> <span class="keyword">the</span> list can vary. cardinality (int) can be either <span class="number">3</span></span><br><span class="line"><span class="keyword">or</span> <span class="number">4</span> depending <span class="keyword">on</span> <span class="title">whether</span> <span class="title">we</span>’<span class="title">re</span> <span class="title">looking</span> <span class="title">for</span> <span class="title">a</span> <span class="title">hand</span> <span class="title">of</span> <span class="title">three</span> <span class="title">of</span> <span class="title">a</span> <span class="title">kind</span> <span class="title">or</span> <span class="title">four</span> <span class="title">of</span> <span class="title">a</span> <span class="title">kind</span>.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: If <span class="keyword">the</span> hand is <span class="keyword">not</span> <span class="keyword">an</span> n <span class="keyword">of</span> <span class="keyword">a</span> kind <span class="literal">return</span> False , otherwise <span class="literal">return</span> <span class="keyword">the</span> face <span class="built_in">value</span> <span class="keyword">of</span> <span class="keyword">the</span> card</span><br><span class="line">that forms <span class="keyword">the</span> n <span class="keyword">of</span> <span class="keyword">a</span> kind <span class="keyword">as</span> int (<span class="built_in">do</span> <span class="keyword">not</span> consider <span class="keyword">the</span> <span class="keyword">case</span> <span class="keyword">of</span> multiple n <span class="keyword">of</span> <span class="keyword">a</span> kind <span class="keyword">in</span> <span class="keyword">the</span> same hand)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Examples:</span></span><br><span class="line"><span class="string">n_of_a_kind([14,</span> <span class="number">27</span><span class="string">,</span> <span class="number">1</span><span class="string">,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">],</span> <span class="number">3</span><span class="string">)</span> <span class="string">→</span> <span class="number">1</span></span><br><span class="line"><span class="string">n_of_a_kind([14,</span> <span class="number">27</span><span class="string">,</span> <span class="number">1</span><span class="string">,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">],</span> <span class="number">4</span><span class="string">)</span> <span class="string">→</span> <span class="literal">False</span> <span class="comment"># 3 of a kind</span></span><br></pre></td></tr></table></figure><p><strong>straight(card_list)</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Description</span>: The <span class="meta">function</span> checks whether the cards make up a <span class="keyword">straight </span>hand, <span class="keyword">and </span>only that.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parameters: card_list (list <span class="keyword">of</span> int) <span class="keyword">contains</span> <span class="keyword">a</span> list <span class="keyword">of</span> cards represented <span class="keyword">with</span> <span class="keyword">the</span> mapping provided</span><br><span class="line"><span class="keyword">in</span> Table <span class="number">2.</span> Cards are <span class="keyword">not</span> ordered <span class="keyword">and</span> <span class="keyword">the</span> size <span class="keyword">of</span> <span class="keyword">the</span> list can vary.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: If <span class="keyword">the</span> hand is <span class="keyword">not</span> <span class="keyword">a</span> straight <span class="literal">return</span> False , otherwise <span class="literal">return</span> <span class="keyword">the</span> face <span class="built_in">value</span> <span class="keyword">of</span> <span class="keyword">the</span> highest</span><br><span class="line">card <span class="keyword">as</span> int</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Examples:</span></span><br><span class="line"><span class="string">straight([34,</span> <span class="number">33</span><span class="string">,</span> <span class="number">35</span><span class="string">,</span> <span class="number">32</span><span class="string">,</span> <span class="number">31</span><span class="string">])</span> <span class="string">→</span> <span class="literal">False</span> <span class="comment"># straight flush</span></span><br><span class="line"><span class="string">straight([21,</span> <span class="number">7</span><span class="string">,</span> <span class="number">35</span><span class="string">,</span> <span class="number">32</span><span class="string">,</span> <span class="number">31</span><span class="string">])</span> <span class="string">→</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>flush(card_list)</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Description: The <span class="function"><span class="keyword">function</span></span> checks whether the cards make up a <span class="keyword">flush</span> hand, and <span class="keyword">only</span> that.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parameters: card_list (list <span class="keyword">of</span> int) <span class="keyword">contains</span> <span class="keyword">a</span> list <span class="keyword">of</span> cards represented <span class="keyword">with</span> <span class="keyword">the</span> mapping provided</span><br><span class="line"><span class="keyword">in</span> Table <span class="number">2.</span> Cards are <span class="keyword">not</span> ordered <span class="keyword">and</span> <span class="keyword">the</span> size <span class="keyword">of</span> <span class="keyword">the</span> list can vary.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: If <span class="keyword">the</span> hand is <span class="keyword">not</span> <span class="keyword">a</span> flush <span class="literal">return</span> False , otherwise <span class="literal">return</span> <span class="keyword">the</span> face <span class="built_in">value</span> <span class="keyword">of</span> <span class="keyword">the</span> highest card</span><br><span class="line"><span class="keyword">as</span> int</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Examples:</span></span><br><span class="line"><span class="string">flush([41,</span> <span class="number">40</span><span class="string">,</span> <span class="number">42</span><span class="string">])</span> <span class="string">→</span> <span class="literal">False</span> <span class="comment"># straight flush</span></span><br><span class="line"><span class="string">flush([44,</span> <span class="number">40</span><span class="string">,</span> <span class="number">42</span><span class="string">])</span> <span class="string">→</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>pair(card_list, num_of_pairs)</strong><br>Description: Based on its second parameter, <strong>num_of_pairs</strong> , the function checks whether the cards<br>make up a hand of <em>one pair</em> or a hand of <em>two pairs</em>.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Parameters: card_list (list <span class="keyword">of</span> int) <span class="keyword">contains</span> <span class="keyword">a</span> list <span class="keyword">of</span> cards represented <span class="keyword">with</span> <span class="keyword">the</span> mapping provided</span><br><span class="line"><span class="keyword">in</span> Table <span class="number">2.</span> Cards are <span class="keyword">not</span> ordered <span class="keyword">and</span> <span class="keyword">the</span> size <span class="keyword">of</span> <span class="keyword">the</span> list can vary. num_of_pairs (int) can be either <span class="number">1</span></span><br><span class="line"><span class="keyword">or</span> <span class="number">2</span> depending <span class="keyword">on</span> <span class="title">whether</span> <span class="title">we</span>’<span class="title">re</span> <span class="title">looking</span> <span class="title">for</span> <span class="title">a</span> <span class="title">hand</span> <span class="title">of</span> <span class="title">one</span> <span class="title">pair</span> <span class="title">or</span> <span class="title">two</span> <span class="title">pairs</span>.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Return <span class="built_in">value</span>: If <span class="keyword">the</span> hand is <span class="keyword">not</span> <span class="keyword">a</span> <span class="literal">one</span>/<span class="literal">two</span> pair <span class="literal">return</span> False , otherwise <span class="literal">return</span> <span class="keyword">the</span> face <span class="built_in">value</span> <span class="keyword">of</span> <span class="keyword">the</span> card</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> pair; <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">case</span> <span class="keyword">of</span> <span class="literal">one</span> pair <span class="keyword">an</span> int, <span class="keyword">and</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">case</span> <span class="keyword">of</span> <span class="literal">two</span> pairs <span class="keyword">a</span> tuple <span class="keyword">of</span> int (order doesn’t</span><br><span class="line">matter <span class="keyword">in</span> tuple)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Examples:</span></span><br><span class="line"><span class="string">pair([33,</span> <span class="number">46</span><span class="string">,</span> <span class="number">20</span><span class="string">],</span> <span class="number">1</span><span class="string">)</span> <span class="string">→</span> <span class="literal">False</span> <span class="comment"># three of a kind</span></span><br><span class="line"><span class="string">pair([2,4,7,15,16],</span> <span class="number">1</span><span class="string">)</span> <span class="string">→</span> <span class="number">2</span></span><br><span class="line"><span class="string">pair([2,4,7,15,17],</span> <span class="number">2</span><span class="string">)</span> <span class="string">→</span> <span class="string">(2,4)</span></span><br></pre></td></tr></table></figure><h2 id="Helper-functions-–-OPTIONAL-BUT-HIGHLY-ENCOURAGED"><a href="#Helper-functions-–-OPTIONAL-BUT-HIGHLY-ENCOURAGED" class="headerlink" title="Helper functions – OPTIONAL BUT HIGHLY ENCOURAGED"></a>Helper functions – OPTIONAL BUT HIGHLY ENCOURAGED</h2><h3 id="If-you-want-to-avoid-repeating-some-computations-again-and-again-you-should-create-your-own"><a href="#If-you-want-to-avoid-repeating-some-computations-again-and-again-you-should-create-your-own" class="headerlink" title="If you want to avoid repeating some computations again and again, you should create your own"></a>If you want to avoid repeating some computations again and again, you should create your own</h3><h3 id="helper-functions-It’s-optional-but-is-highly-encouraged-to-make-your-life-easier-and-your-code-much"><a href="#helper-functions-It’s-optional-but-is-highly-encouraged-to-make-your-life-easier-and-your-code-much" class="headerlink" title="helper functions. It’s optional but is highly encouraged to make your life easier and your code much"></a>helper functions. It’s optional but is highly encouraged to make your life easier and your code much</h3><h3 id="simpler-Some-functions-that-you-might-find-extremely-useful-to-implement-are-the-following"><a href="#simpler-Some-functions-that-you-might-find-extremely-useful-to-implement-are-the-following" class="headerlink" title="simpler. Some functions that you might find extremely useful to implement are the following:"></a>simpler. Some functions that you might find extremely useful to implement are the following:</h3><p><strong>suit(card)</strong><br>Description: Given a card number it returns the suit of the card as a string</p><p><strong>value(card)</strong><br>Description: Given a card number it returns the face value of the card as an int</p><p><strong>sequence(card_list)</strong><br>Description: Given a list of card numbers it checks whether the cards form a sequence or not. <strong>Hint</strong> : One<br>approach is to sort the whole list but it’s not easy to implement and it’s not optimal either. An<br>easier/better way is to exploit the fact that, for any given list, you can easily come up with the sequence<br>you’re looking for, and then just search for it.</p><p><strong>same_suit(card_list)</strong><br>Description: Given a list of card numbers it checks whether the cards have the same suit or not.</p>]]></content>
    
    <summary type="html">
    
      使用Python完成
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
</feed>
