<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生计算机编程数学统计作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804 微信：349583866</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="cplusplusdaixie.com/"/>
  <updated>2023-05-31T14:46:31.992Z</updated>
  <id>cplusplusdaixie.com/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>COMP285-Computer-Aided-Software-Development-Assignment2</title>
    <link href="cplusplusdaixie.com/COMP285-Computer-Aided-Software-Development-Assignment2.html"/>
    <id>cplusplusdaixie.com/COMP285-Computer-Aided-Software-Development-Assignment2.html</id>
    <published>2023-05-31T14:19:29.000Z</published>
    <updated>2023-05-31T14:46:31.992Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java.jpg" alt="Java"></p><h3 id="OBJECTIVE"><a href="#OBJECTIVE" class="headerlink" title="OBJECTIVE"></a>OBJECTIVE</h3><p>This coursework involves the development and testing of some graphics routines in Java™ using the software tools, Eclipse and JUnit.</p><h4 id="Assessment-Information"><a href="#Assessment-Information" class="headerlink" title="Assessment Information"></a>Assessment Information</h4><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">Assignment number</td><td style="text-align:center">2 of 2</td></tr><tr><td style="text-align:center">Weighting</td><td style="text-align:center">50%</td></tr><tr><td style="text-align:center">Learning outcome assessed</td><td style="text-align:center">1.    Perform software development tasks using the techniques of Automated Testing, Continuous Integration and Test Driven Programming  2.    Use Ant, JUnit and Eclipse both individually and jointly as tools for Automated Testing, Continuous Integration and Test Driven Programming</td></tr><tr><td style="text-align:center">Purpose of assessment</td><td style="text-align:center">To assess the students ability to effectively use software development and testing tools</td></tr></tbody></table><p>This is the second of two assessments for COMP285 where each contributes 50% of the final module mark. </p><p>The general purpose is assessment of the following learning outcomes: </p><ol><li>Perform software development tasks using the techniques of Automated Testing, Continuous Integration and Test Driven Programming </li><li>Use Ant, JUnit and Eclipse both individually and jointly as tools for Automated Testing, Continuous Integration and Test Driven Programming with the main stress on JUnit testing and test driven programming with Eclipse.</li></ol><p>The goal of this assignment is to complete the testing of a partial implementation of a set of shape classes in the style of Test Driven Programming in Java by using Unit Testing with JUnit4 in the framework of Eclipse. You are also expected to use test driven development to add a new class which will represent a regular polygon.</p><p>You will need to finish/correct this implementation and testing framework. All tests should succeed and all classes should be functioning well.</p><p>Each shape class must implement the interface defined IShape.java, familiarise yourself with this source file. This contain comments explaining the required functionality for each shape.</p><p>The following classes have already been implemented but some only partially (there is code to add) and some contain bugs. You should have a Junit test class for each of the tested classes.</p><p>Point            Represents a point in 2-D</p><p>Shape            (abstract base class for all other shape classes)</p><p>Rectangle        Represents a rectangle</p><p>Circle            Represents a circle</p><p>RegularPolygon    Represents a regular polygon</p><p>Main    Entry point for the code, also has a rendering function which enables the shapes to be drawn using Java 2D.</p><h3 id="Presentation-of-work"><a href="#Presentation-of-work" class="headerlink" title="Presentation of work"></a>Presentation of work</h3><p>The project should be implemented in Eclipse and needs to use Junit to test the functionality of ALL the public methods of the classes contained in the package uk.ac.liv.comp285.cw1.shapes. </p><p>Please follow the package names given in the source file, do not remove any packages and do not define any new packages.</p><p>All the actions (such as creating the project, Java source file, JUnit test case, etc.) should be done by Eclipse wizards. </p><p>Please name all the test classes by adding in the word Test postfix to all test class names, so to test the Circle class use a class called CircleTest.</p><p>The general advice is to work first on something simple. Then there will be fewer problems since you can then depend on what you have already resolved and well-tested. </p><p>You should comment appropriately all the code you write. This way you can demonstrate your understanding of what they do. This will also be taken into account when marking the work.</p><p>All Java files presented by students should be compilable and appropriately formatted.  Your whole project directory should be zipped up and submitted.</p><p>This zip file should be submitted electronically by the deadline mentioned above via the Departmental Coursework Submission System.</p><p>Late submissions policy and Plagiarism/collusion aredescribed in Student’s Handbook, <a href="http://www.csc.liv.ac.uk/student/ugpdfhandbook.pdf" target="_blank" rel="noopener">http://www.csc.liv.ac.uk/student/ugpdfhandbook.pdf</a>, Sections, 5.8-5.10. </p><h4 id="Marking-Schema"><a href="#Marking-Schema" class="headerlink" title="Marking Schema"></a>Marking Schema</h4><p>This assignment contributes 50% of the final mark for this module, and will be marked according to the following marking scheme.</p><p>You must thoroughly test all the classes given and then fix/debug the code provided. To get full marks all methods need to work properly with a full range of appropriate tests to cover all required test partitions.</p><p>Please start with testing and debugging the Point class.</p><h4 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h4><p>10% All tests covered<br>10% All code working and complete</p><h4 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h4><p>10% All tests covered<br>10% All code working and complete</p><h4 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h4><p>10% All tests covered<br>10% All code working and complete</p><h4 id="RegularPolygon"><a href="#RegularPolygon" class="headerlink" title="RegularPolygon"></a>RegularPolygon</h4><p>15% All tests covered<br>15% All code working and complete</p><h4 id="Code-quality-and-commenting"><a href="#Code-quality-and-commenting" class="headerlink" title="Code quality and commenting"></a>Code quality and commenting</h4><p>10%</p>]]></content>
    
    <summary type="html">
    
      代写[Java](https://www.w3schools.com/java/)基础练习题，练习CClass [Junit测试](https://junit.org/junit5/)的使用方法，属于比较基础的Java作业。
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>留学生计算机编程数学统计作业代写</title>
    <link href="cplusplusdaixie.com/hello-world.html"/>
    <id>cplusplusdaixie.com/hello-world.html</id>
    <published>2023-05-27T14:18:06.921Z</published>
    <updated>2023-05-31T14:01:04.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网这么大-茫茫人海中搜到小砖家即是一种缘分-真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间-语音给您讲清这个行业一切利弊-对您找代写非常有帮助！"><a href="#互联网这么大-茫茫人海中搜到小砖家即是一种缘分-真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间-语音给您讲清这个行业一切利弊-对您找代写非常有帮助！" class="headerlink" title=" 互联网这么大 茫茫人海中搜到小砖家即是一种缘分 真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间 语音给您讲清这个行业一切利弊 对您找代写非常有帮助！"></a><font color="red"><b> 互联网这么大 茫茫人海中搜到小砖家即是一种缘分 真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间 语音给您讲清这个行业一切利弊 对您找代写非常有帮助！</b></font></h1><p>希望您（尤其是第一次找代写，而且有长期需求的朋友）抽些时间，仔细看看下面这段文字，真的很有帮助。</p><ol><li><p>咱们这是核武库 都是我弟兄们 CS+数统+部分经济学各方向精准匹配优先 一站式解决基本所有CS+数统科目，一般来说如果不是时间或者费用问题的话接不了的话，<br>其他地方更困难，尤其是难写的科目比如OS，算法分析，这么说吧，很多情况都是我这边紧急帮忙抢救被坑的弟兄，要看真实例子可以加我微信发你</p></li><li><p>切记不要直接转账 骗子很多的 (国内白天8点30以后会看手机） </p></li><li><p>淘宝确实很多是刷好评的，我这你只要有心仔细看应该能看出来是不是真实的（实际上我的客户主要都是老客户推荐的，淘宝从来不强制好评，一般写完直接发你，是否满意你随意评价）</p></li><li><p>可以翻翻我QQ空间（各类示例介绍，您会发现这儿是您温暖的家，长期合作，为您保驾护航）</p></li><li><p>我自己写了将近10年了，要相信我见过多少题（各个科目，我自己专门搞算法，机考这类），都是仔细评估过后看题报价的，费用正常来说有高有低，但是只要接了肯定保证质量尽心尽力做好</p></li><li><p>之所以列这么大一段文字，非常适合有长期需求CS+数学代写代考服务的，我见过太多其他地方被坑的起飞的经历了</p></li></ol><p>整理这段文字，也是看看能不能让部分客户少走些弯路，当然这种也只有亲历过才知道具体是怎么一回事。<br>就说这些吧~希望对你有所帮助</p><p><img src="/images/title.jpg" alt="QQ"></p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>为了节省时间，方便报价，询问时还请<font color="red"><b>附上您的年级和课程名，如：</b></font></p><font color="red"><b>大二，Algorithm and Data Structure</b></font><p>需求直接<font color="red"><b>发送至 <a href="mailto:1926742804@qq.com" target="_blank" rel="noopener">1926742804@qq.com</a></b></font>，同时<font color="red"><b>VX我：349583866 或者 QQ我：1926742804（24小时在线）</b></font></p><table><thead><tr><th style="text-align:center"><b>微信二维码</b></th><th style="text-align:center"><b>QQ二维码</b></th></tr></thead><tbody><tr><td style="text-align:center"><img src="/images/wechat_code.jpg" alt="QQ"></td><td style="text-align:center"><img src="/images/qq_code.jpg" alt="微信"></td></tr></tbody></table><h2 id="部分淘宝评价展示"><a href="#部分淘宝评价展示" class="headerlink" title="部分淘宝评价展示"></a>部分淘宝评价展示</h2><p><img src="/images/feedback_1.png" alt="反馈1"></p><p><img src="/images/feedback_2.png" alt="反馈2"></p><p><img src="/images/feedback_3.png" alt="反馈3"></p><h2 id="部分客户微信QQ反馈展示"><a href="#部分客户微信QQ反馈展示" class="headerlink" title="部分客户微信QQ反馈展示"></a>部分客户微信QQ反馈展示</h2><p><img src="/images/user_feedback_1.jpg" alt="用户反馈1"><br><img src="/images/user_feedback_2.png" alt="用户反馈2"><br><img src="/images/user_feedback_3.png" alt="用户反馈3"><br><img src="/images/user_feedback_4.png" alt="用户反馈4"><br><img src="/images/user_feedback_5.png" alt="用户反馈5"><br><img src="/images/user_feedback_6.png" alt="用户反馈6"><br><img src="/images/user_feedback_7.png" alt="用户反馈7"><br><img src="/images/user_feedback_8.png" alt="用户反馈8"><br><img src="/images/user_feedback_9.png" alt="用户反馈9"><br><img src="/images/user_feedback_10.png" alt="用户反馈10"></p><h2 id="部分作品展示"><a href="#部分作品展示" class="headerlink" title="部分作品展示"></a>部分作品展示</h2><p><img src="/images/show_1.png" alt="作品1"></p><p><img src="/images/show_2.png" alt="作品2"></p><p><img src="/images/show_3.png" alt="作品3"></p><p><img src="/images/show_4.png" alt="作品4"></p><p>我们提供的是<font color="red"><b>精品专业定制服务(C语言代写|C++代写|Java代写|Matlab代写|Python代写|Haskell代写|Prolog代写|C#代写|JS代写|R代写|算法代写机考|机器学习代写|随机过程代写|时间序列代写|作业代写)。</b></font></p><h2 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a><a href="../about/">个人介绍</a></h2><p>国内<font color="red"><b>TOP5</b></font>高校计算机专业本科+硕士，一线工程师，专注于帮助留学生辅导代写程序，解决各类<font color="red"><b>编程难题</b></font>。</p><font color="red"><b>多年经验，完成过各个国家、各个学院的各种程序，经验丰富，认真负责。</b></font><p>相比公司中介背后质量参差不齐的写手，我拥有<font color="red"><b>10年+辅导代写经验，确保需求顺利完成。熟知各年级课程的得分点以及Coding Style，轻松帮您提分。 只要接了，质量一定有保证。</b></font></p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><font color="red"><b>24-48小时完成</b></font><p>高端辅导，<font color="red"><b>保证honor code，绝不违反Academic Integrity。</b></font></p><p>保证非中介，技术员直连，全程保持联络，<font color="red"><b>定点核弹爆破您的难题！</b></font></p><p>学生可以优惠，毕竟很多工具也是有学生版的嘛，如果您的理由充足到说服博主，甚至还可以<font color="red"><b>免费</b></font>喔！</p><font color="red"><b>带test的必全过，得分点的必全做</b></font>，能顺手做掉的bonus也帮您做。代码肯定是手写原创，过Moss查重。<br><br><font color="red"><b>免费提供售后服务</b></font>，包括代码运行，讲解答疑。<br><br>## 服务内容<br>Handle北美（美国、加拿大）、澳洲、英国以及其他国家的Computer Science编程需求<br><br><br>## 服务优势<br><br>微信 or QQ联系，直通技术人员，随时沟通，无中间客服。<font color="red"><b>博主直接看题，给您报价</b></font>，快速方便。<br><br>国内TOP高校本科研究生背景，技术过关，外企工作，英语流利，无语言压力，快速读懂题目。<br><br><font color="red"><b>个人辅导，运转高效。紧急情况下可发动BAT Oracle Google Facebook(同学、同事）协同作战！</b></font><p>我们不是大机构。很多机构为了自己的利益不会让大家和写手直接沟通，这样可能造成题目理解有差异，有问题不能直接问等问题，<font color="red"><b>我们是挣点零花钱，不贪多，就想提供最好的服务，以求长期合作。</b></font></p><p>我很理解每一位在异乡求学的同学，很多时候工作之多，难度之大，简直天天泡在图书馆都赶不来一个个的due。</p><p>我利用这个平台帮助大家<font color="red"><b>解人燃眉之急，代码会写好注释，提供语音/电话讲解，也可以远程电脑调试。</b></font>尽最大努力让您真正理解程序，日后闲暇(Final)，也可拿出用之复习。</p><p>真正的<font color="red"><b>无中介费用</b></font>，欢迎您货比三家，支持淘宝/微店/PayPal/支付宝/微信支付。</p><p>我给您的不止是一个答案，还有我作为全栈工程师的经验，编程方法和技巧。</p><h2 id="服务范围"><a href="#服务范围" class="headerlink" title="服务范围"></a>服务范围</h2><font color="red"><b>Computer Science Everything</b></font><ul><li>C/C++程序代写</li><li>Matlab仿真及C++混编代写</li><li>IT代写</li><li>编程代写</li><li>Java代写</li><li>Python代写</li><li>数据结构 Data Structure 代写</li><li>算法Algorithm 代写</li><li>多线程Multi-threading pthread CUDA OPENCL MPI OPENMP代写</li><li>Network Socket程序 代写</li><li>Database SQL MongoDB NoSQL 代写</li><li>Operating System 操作系统 代写</li><li>Computer Architecture 计算机架构 代写</li><li>Web开发 网站设计 代写</li><li>数字图像处理、医学图像处理 代写</li><li>计算机视觉、游戏项目 代写 </li><li>各种项目原型、论文实验 代写</li><li>OpenGL 代写</li><li>OpenCV 代写</li><li>Boost库</li><li>Bullet物理引擎</li><li>Unity3D</li><li>大部分数学和统计科目</li></ul><h2 id="部分服务过的科目"><a href="#部分服务过的科目" class="headerlink" title="部分服务过的科目"></a>部分服务过的科目</h2><p>下面列举的都是在疫情期间考过试的（不同年份会有相同的需求所以备份了）<br><img src="/images/exam_1.jpg" alt="考试_1"><br><img src="/images/exam_2.jpg" alt="考试_2"><br><img src="/images/exam_3.jpg" alt="考试_3"><br><img src="/images/exam_4.jpg" alt="考试_4"><br><img src="/images/exam_5.jpg" alt="考试_5"><br><img src="/images/exam_6.jpg" alt="考试_6"><br><img src="/images/exam_7.jpg" alt="考试_7"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;互联网这么大-茫茫人海中搜到小砖家即是一种缘分-真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间-语音给您讲清这个行业一切利弊-对您找代写非常有帮助！&quot;&gt;&lt;a href=&quot;#互联网这么大-茫茫人海中搜到小砖家即是一种
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ISE543-Predictive-Model</title>
    <link href="cplusplusdaixie.com/ISE543-Predictive-Model.html"/>
    <id>cplusplusdaixie.com/ISE543-Predictive-Model.html</id>
    <published>2023-05-25T02:07:49.000Z</published>
    <updated>2023-05-27T13:30:08.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>For this request, you are to create a predictive model in Azure ML Studio for the attached dataset and turn in a report as specified in the following pages. You should use whichever data preparation, modeling, and model assessment techniques that were covered in this portion of the class that you believe result in the best model.</p><p>You will be performing an Exploratory Data Analysis, Model Development and Training, and Model Deployment activities and preparing a report in PowerPoint form.</p><p>See the sample report that is part of this request for a template and example.</p><p>When you are complete, save this file as a PDF and upload it to Gradescope.</p><p>As a reminder, the work that you submit must be done individually. Unlike the request requests, working together is not permitted and the graders will be looking for identical solutions.</p><p>For this request, you will use Azure ML Studio Designer to build a classification model to predict the likelihood of a patient developing Chronic Heart Disease (CHD) in the coming ten years. The dataset you will be using has been distributed with this exam and consists of the variables on the following page.</p><h3 id="Note-On-Model-Deployment"><a href="#Note-On-Model-Deployment" class="headerlink" title="Note On Model Deployment"></a>Note On Model Deployment</h3><p>When complete, create a real-time endpoint for your model and copy the REST Endpoint URL and the authentication key into a Google drive spreadsheet that will be published.</p><p>The TAs will run scripts to independently evaluate your model performance sometime.</p><p>Once complete, a message will be posted on Piazza and you should then delete your endpoint.</p><h3 id="Final-Report-Structure"><a href="#Final-Report-Structure" class="headerlink" title="Final Report Structure"></a>Final Report Structure</h3><p>Please follow the provided template/example and structure your final report into the following three sections:</p><p>Exploratory Data Analysis</p><p>Model Development</p><p>Model Deployment</p><h3 id="Final-Report-Outline-Grading-Rubric"><a href="#Final-Report-Outline-Grading-Rubric" class="headerlink" title="Final Report Outline/Grading Rubric"></a>Final Report Outline/Grading Rubric</h3><p>Report contents</p><p>Attribute summary<br>Data cleansing - summary of decisions made<br>Data cleansing pipeline (portion of your overall pipeline)<br>Univariate analysis<br>Bivariate analysis (each variable vs the response variable)<br>Feature section/engineering decisions<br>Model pipeline screenshot<br>Model evaluation results screenshot<br>Inference pipeline screenshot<br>REST Endpoint URL and authentication key (in PPT and in Google drive spreadsheet)<br>Screenshot of scored test dataset<br>Model performance</p><p>Based on TAs calling your endpoint with test dat</p>]]></content>
    
    <summary type="html">
    
      使用Azure ML Studio对提供的数据集创建预测模型。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Machine Learning" scheme="cplusplusdaixie.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>COMP3620-Constraint-Satisfaction-Problems</title>
    <link href="cplusplusdaixie.com/COMP3620-Constraint-Satisfaction-Problems.html"/>
    <id>cplusplusdaixie.com/COMP3620-Constraint-Satisfaction-Problems.html</id>
    <published>2023-05-18T00:07:58.000Z</published>
    <updated>2023-05-27T13:29:18.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>Constraint Satisfaction Problems (CSPs) are a class of problems where, unlike the previous search problems we considered states have a simple representation.</p><p>CSPs determine whether a solution exists for a given constraint network. We will assume that you are familiar with the definitions and concepts presented in KRR lectures. We recommend that you get familiar with these before attempting the request.</p><h3 id="The-Solver"><a href="#The-Solver" class="headerlink" title="The Solver"></a>The Solver</h3><p>The given solver provides an implementation of Naive Backtracking. You can check out the code in backtracking_search.py. As an example, the command</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> solver.<span class="keyword">py</span> -v <span class="keyword">lex</span> -<span class="keyword">k</span> test_problems/sudoku_01.csp</span><br></pre></td></tr></table></figure><p>will solve the first of the 10 Sudoku puzzles. You should get the following output:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="string">$</span> <span class="string">python3</span> <span class="string">solver.py</span> <span class="string">-v</span> <span class="string">lex</span> <span class="string">-k</span> <span class="string">test_problems/sudoku_01.csp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Random Number Generator Seed:</span> <span class="number">8193</span></span><br><span class="line"><span class="attr">Parsing CSP file:</span> <span class="string">test_problems/sudoku_01.csp</span></span><br><span class="line"><span class="string">Success.</span></span><br><span class="line"><span class="string">Preprocessing...</span></span><br><span class="line"><span class="string">Preprocessing</span> <span class="string">made</span> <span class="number">0</span> <span class="string">requests.</span></span><br><span class="line"><span class="attr">Search algorithm:</span> <span class="string">Backtracking</span></span><br><span class="line"><span class="string">Solved</span> <span class="string">problem!</span></span><br><span class="line"><span class="attr">Nodes expanded:</span> <span class="number">409</span></span><br><span class="line"><span class="attr">Time:</span> <span class="number">0.002850055694580078</span></span><br><span class="line"><span class="string">Solution</span> <span class="string">found.</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="string">|</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="string">|</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">9</span> <span class="string">|</span> <span class="number">1</span> <span class="number">7</span> <span class="number">8</span> <span class="string">|</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">8</span> <span class="string">|</span> <span class="number">5</span> <span class="number">6</span> <span class="number">9</span> <span class="string">|</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="string">---------------------</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">1</span> <span class="string">|</span> <span class="number">2</span> <span class="number">8</span> <span class="number">3</span> <span class="string">|</span> <span class="number">4</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">3</span> <span class="string">|</span> <span class="number">7</span> <span class="number">5</span> <span class="number">1</span> <span class="string">|</span> <span class="number">6</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">2</span> <span class="number">7</span> <span class="string">|</span> <span class="number">4</span> <span class="number">9</span> <span class="number">6</span> <span class="string">|</span> <span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="string">---------------------</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="string">|</span> <span class="number">9</span> <span class="number">3</span> <span class="number">2</span> <span class="string">|</span> <span class="number">8</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">9</span> <span class="number">3</span> <span class="number">4</span> <span class="string">|</span> <span class="number">8</span> <span class="number">1</span> <span class="number">7</span> <span class="string">|</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">2</span> <span class="string">|</span> <span class="number">6</span> <span class="number">4</span> <span class="number">5</span> <span class="string">|</span> <span class="number">9</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>The argument -k displays the solution as a nicely formatted Sudoku board. The argument -v allows us to select which variable selection heuristic we will use to steer backtracking. Here we select lex, which is the trivial heuristic of returning variables in the order that they were declared in the input file test_problems/sudoku_01.csp.</p><p>You can get the full list of all the options by specifying the -h flag.<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line">$ python3 solver.py -h</span><br><span class="line">usage: solver.py [-h] [-o OUTPUT] [-s SOLUTION] [-S SEARCH] [-R RNG] [-v VAR] [-l VAL] [-p PRE] [-i INF] [-t MAX_STEPS] [-k] INPUT</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  INPUT                 The <span class="built_in">path to</span> <span class="keyword">the</span> input CSP <span class="built_in">file</span>.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, <span class="comment">--help            show this help message and exit</span></span><br><span class="line">  -o OUTPUT, <span class="comment">--output OUTPUT</span></span><br><span class="line">                        If <span class="keyword">given</span>, <span class="built_in">write</span> <span class="keyword">the</span> grounded CSP <span class="keyword">to</span> this <span class="built_in">file</span> (<span class="keyword">and</span> don't solve <span class="keyword">it</span>).</span><br><span class="line">  -s SOLUTION, <span class="comment">--solution SOLUTION</span></span><br><span class="line">                        If <span class="keyword">given</span>, <span class="built_in">write</span> <span class="keyword">the</span> satisfying request <span class="keyword">to</span> this <span class="built_in">file</span>.</span><br><span class="line">  -S SEARCH, <span class="comment">--search SEARCH</span></span><br><span class="line">                        Choose a search algorithm <span class="keyword">from</span> [backtracking, <span class="keyword">local</span>] (default: backtracking)</span><br><span class="line">  -R RNG, <span class="comment">--seed RNG    Select a seed for the random number generator (default: 8193)</span></span><br><span class="line">  -v VAR, <span class="comment">--var_heuristic VAR</span></span><br><span class="line">                        Choose a variable selection heuristic <span class="keyword">from</span> [lex, md, mrv, md-mrv, mrv-md] (default: lex)</span><br><span class="line">  -l VAL, <span class="comment">--val_heuristic VAL</span></span><br><span class="line">                        Choose a value selection heuristic <span class="keyword">from</span> [lex, lcvf] (default: lex)</span><br><span class="line">  -p PRE, <span class="comment">--preprocessing PRE</span></span><br><span class="line">                        Choose an inference function <span class="keyword">to</span> use <span class="keyword">as</span> a preprocessing step <span class="keyword">before</span> search: [arc]. If <span class="keyword">not</span> <span class="keyword">given</span>, no preprocessing <span class="keyword">is</span> used.</span><br><span class="line">  -i INF, <span class="comment">--inference INF</span></span><br><span class="line">                        Choose an inference function <span class="keyword">that</span> runs during search:[forward, arc]. If <span class="keyword">not</span> <span class="keyword">given</span>, no inference <span class="keyword">is</span> used.</span><br><span class="line">  -t MAX_STEPS, <span class="comment">--max_steps MAX_STEPS</span></span><br><span class="line">                        The maximum <span class="built_in">number</span> <span class="keyword">of</span> steps used <span class="keyword">for</span> Local Search (default: <span class="number">10000</span>)</span><br><span class="line">  -k, <span class="comment">--sudoku          Interpret the solution as Sudoku output and display it in the terminal.</span></span><br></pre></td></tr></table></figure></p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>The INPUT argument (the path to the csp file to be solved) always needs to go last,<br>In this request, we always use the backtracking algorithm. Thus you can ignore the SEARCH,RNG andMAX_STEPS options as they’re only used in local search.<br>The -p, –preprocessing option will have the solver to invoke the inference procedure PRE at the root node of the backtracking search.</p><h3 id="CSP-File-Format"><a href="#CSP-File-Format" class="headerlink" title="CSP File Format"></a>CSP File Format</h3><p>The solver can handle Constraint Networks where the variables have associated finite domains. It allows both binary and unary constraints as well as alldiff and allsame constraints. A special type of binary constraint, neq, allows the modeler to specify inequality constraints with little hassle.</p><h3 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h3><p>Comments<br>Lines starting with the character % are ignored by the parser.</p><p>Variables<br>Lines starting with var define the variables and their domains. For example:<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var QLD NSW VIC ACT SA : <span class="built_in">red</span> <span class="built_in">green</span> <span class="built_in">blue</span></span><br></pre></td></tr></table></figure></p><p>will create the variables QLD, NSW, VIC, ACT and SA, and give them all the same domain, the set {red, green, blue}. Note that an empty space before and after : is required.</p><h4 id="Binary-Constraints"><a href="#Binary-Constraints" class="headerlink" title="Binary Constraints"></a>Binary Constraints</h4><p>Arbitrary binary constraints are encoded in one single line as follows:</p><p>Higher-order Constraints<br>The solver supports two kinds of higher-order constraints featuring more than two variables in their scopes. These are internally compiled into binary constraints, where is the number of variables in the scope of the higher-order constraint.</p><p>The alldiff constraint indicates that all of the variables in the scope must have different values. For example, if we want ACT, NSW and SA to all have different colours, we can use the constraint:</p><p>1<br>alldiff ACT NSW SA<br>The allsame constraint indicates that all of the variables in the scope must have the same value. For example, if we want ACT, NSW and SA to all share the same colour, we can use the constraint:</p><p>1<br>allsame ACT NSW WA<br>As with unary and binary constraints, only one constraint can be specified per line.</p>]]></content>
    
    <summary type="html">
    
      使用AI算法，解决Constraint Satisfaction Problems.
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="cplusplusdaixie.com/tags/Algorithm/"/>
    
      <category term="AI" scheme="cplusplusdaixie.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>CSE536-User-Level-Thread-Management</title>
    <link href="cplusplusdaixie.com/CSE536-User-Level-Thread-Management.html"/>
    <id>cplusplusdaixie.com/CSE536-User-Level-Thread-Management.html</id>
    <published>2023-05-12T22:07:58.000Z</published>
    <updated>2023-05-27T13:28:56.380Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Brief-Description"><a href="#Brief-Description" class="headerlink" title="Brief Description"></a>Brief Description</h3><p>In this request, you will implement user-level threads (also called self-threads) for xv6 processes and make scheduling decisions inside the process based on different policies.</p><p>An xv6 process starts with only one kernel-supported thread. Within the process, we will divide this thread into several user-level threads. We will maintain one of these user-level threads as a user-level scheduler thread. This thread will make decisions regarding which user-level thread should execute at a certain time, based on different scheduling algorithms that we will choose.</p><p>Important note<br>If your request does not compile or your upload is corrupted, you will get a zero. Always double-check your submission.<br>Submit a zip file titled by your ASU username. For instance, if your username is adil, your file should be adil.zip.</p><h3 id="User-Level-Threading-Library-ULTLib"><a href="#User-Level-Threading-Library-ULTLib" class="headerlink" title="User-Level Threading Library (ULTLib)"></a>User-Level Threading Library (ULTLib)</h3><p>This library will create user-level threads for a process, schedule the threads to be executed, yield the CPU from a certain thread after a period of time, and destroy user-level threads when their task is completed. You must write the code for this library in the files: ulthread.c, ulthread_swtch.S, and ulthread.h.</p><p>Please follow the steps below to complete this task:<br>Library initialization<br>Important housekeeping must be done whenever a library is initialized. For this task, you must create a data structure (similar to proc kept by the kernel) to keep track of each user-level thread. You must decide on the contents of this data structure based on the information provided in this document. During initialization, also assign the first kernel-provided thread to be the user-level scheduler thread. Write the code for this part in the ulthread_init() function.</p><p>Thread creation<br>To create a thread, we need the following: (a) the starting function address where the thread begins execution, (b) initial arguments for the starting function, (c) the location of a stack that the thread will use during its execution, (d) the thread’s priority, and (e) a context save location (context) where the registers of the thread will be saved and restored on context switches. (a)-(d) will be provided by the user process when it calls the function ulthread_create(). However, the context save location must be created and maintained by the ULTLib. Hint: check how the xv6 kernel maintains context save locations for kernel self-threads. Once the thread is created, ULTLib should also track that the thread is now RUNNABLE for scheduling decisions.</p><p>Thread switch<br>The user-level scheduler thread must be called to schedule threads after creation and each time a user-level thread yields its CPU to a different thread. At these times, the user-level scheduler thread must (a) save its registers in it’s context and (b) restore registers from the next scheduled thread’s context. The thread whose registers are restored is chosen based on the scheduling policy.</p><p>Write an assembly function (ulthread_context_switch() in ulthread.S) that takes two pointersprevious context and next contextas arguments. The function must save the current thread’s registers at the location of previous context, then load the registers from the next context’s location. It must also set-up registers in such a way that function arguments are provided correctly when a thread starts.</p><p>Suggested reading(s)<br>RISC-V Function Argument Calling Conventions.</p><p>Thread yield and destroy<br>A user-level thread can give up its execution (using ulthread_yield()) and ask the user-level scheduler thread to schedule a different thread. Additionally, at the end of it’s execution, a thread will explicitly call ulthread_destroy() to signal that it has completed its task. At these points, ULTLib should track that the thread’s state has changed either to YIELD or FREE. Then, it should perform housekeeping tasks to maintain data structures, and finally switch back to the execution of the scheduler.</p><p>A user-level thread will decide when to yield based on clock timing information that it receives from the xv6 OS. To achieve this, you must write a new xv6 system call (ctime) that traps to the xv6 OS and returns the time from the RISC-V register r_time.</p><p>Thread scheduling decisions<br>The user-level scheduler thread decides which thread to schedule based on three algorithms: (a) round-robin, (b) first-come-first-serve, and (c) priority scheduling. The specific algorithm to use is provided during library initialization. Your goal is to write a scheduler that is aware of all these algorithms and decides the correct thread to execute whenever it is called based on the policy.</p><p>Testcases<br>You are only provided a single testcase for this request (namely test1). Please rigorously test your code using your own testcases for corner situations.</p><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><p>GIT Diff of Changes Required<br>Provided below is a sample of how many changes would be required to complete this request. Note that this would vary based on code styles</p><ul><li>kernel/syscall.c</li><li>kernel/syscall.h</li><li>kernel/sysproc.c</li><li>user/ulthread.c</li><li>user/ulthread.h</li><li>user/ulthread_swtch.S</li><li>user/usys.pl</li></ul><h3 id="Submitting-your-request"><a href="#Submitting-your-request" class="headerlink" title="Submitting your request"></a>Submitting your request</h3><p>Please zip the entire provided code directory and submit it to the Canvas under “request 3: CODE”.</p>]]></content>
    
    <summary type="html">
    
      为xv6进程实现用户级线程(User Level Thread)，并根据不同的策略，在进程内做出调度策略。
    
    </summary>
    
      <category term="C" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="OS" scheme="cplusplusdaixie.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>CSCI561-First-Order-Logic-Resolution</title>
    <link href="cplusplusdaixie.com/CSCI561-First-Order-Logic-Resolution.html"/>
    <id>cplusplusdaixie.com/CSCI561-First-Order-Logic-Resolution.html</id>
    <published>2023-05-05T09:37:23.000Z</published>
    <updated>2023-05-27T13:30:02.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h3><p>This is a programming request. You will be provided with sample inputs and outputs (see below). Please understand that the goal of the samples is to check that you can correctly parse the problem definition and generate a correctly formatted output. The samples are very simple and you should not assume that if your program works on the samples it will work on all test cases. There will be more complex test cases and it is your task to make sure that your program will work correctly on any valid input. You are encouraged to try your own test cases to check how your program would behave in some complex special case that you might think of. Since each request is checked via an automated A.I. script, your output should match the example format exactly. Failure to do so will most certainly cost some points. The output format is simple and examples are provided. You should upload and test your code on vocareum.com, and you will submit it there. You may use any of the programming languages and versions thereof provided by vocareum.com.</p><p>Grading<br>Your code will be tested as follows: Your program should take no command-line arguments. It should read a text file called “input.txt” in the current directory that contains a problem definition. It should write a file “output.txt” with your solution. Format for files input.txt and output.txt is specified below. End-of-line convention is Unix (since vocareum is a Unix system).</p><p>The grading A.I. script will, 50 times:</p><p>Create an input.txt file, delete any old output.txt file.<br>Run your code.<br>Compare output.txt created by your program with the correct one.<br>If your outputs for all 50 test cases are correct, you get 100 points.<br>If one or more test case fails, you lose 2 points for each failed test case. (Note that one test case involves only one query in this HW).<br>Note that if your code does not compile, or somehow fails to load and parse input.txt, or writes an incorrectly formatted output.txt, or no output.txt at all, or OuTpUt.TxT, you will get zero points. Please test your program with the provided sample files to avoid this. You can submit code as many times as you wish on vocareum, and the last submitted version will be used for grading.</p><h3 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h3><p>Today, your dad is opening his dream restaurant after working at a desk job for the last few decades. He has always been passionate about food, but there is one other thing he loves more: Money. Trying to cut some expenses, he came up with an amazing idea and convinced you to design an automated system to manage the restaurant for him. This automated system will take over most of the dining room duties: It will decide whether there is a table to seat the incoming customers, take their orders according to restaurant policies and current stock, and bring them their check once they are done eating. Using this system, your dad can instead spend most of his budget on an amazing chef and fresh ingredients. You are hoping the customers would love this concept and make the restaurant very popular!</p><p>You sit down with your dad to develop a beta version of the system. Having just taken CSCI561 last semester, you decide to implement it using first-order logic resolution. Current restaurant status, policies, ingredient stock and customer status will all be encoded as first order logic sentences in the knowledge base. The knowledge given to you contains sentences with the following defined operators:<br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NOT <span class="keyword">X</span>           ~<span class="keyword">X</span></span><br><span class="line"><span class="keyword">X</span> <span class="keyword">OR</span> <span class="keyword">Y</span>          <span class="keyword">X</span> | <span class="keyword">Y</span></span><br><span class="line"><span class="keyword">X</span> <span class="keyword">AND</span> <span class="keyword">Y</span>         <span class="keyword">X</span> &amp; <span class="keyword">Y</span></span><br><span class="line"><span class="keyword">X</span> IMPLIES <span class="keyword">Y</span>     <span class="keyword">X</span> =&gt; <span class="keyword">Y</span></span><br></pre></td></tr></table></figure></p><p>The program takes a query and provides a logical conclusion to whether it is true or not.</p><h4 id="Format-for-input-txt"><a href="#Format-for-input-txt" class="headerlink" title="Format for input.txt"></a>Format for input.txt</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QUERY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">K</span> = <span class="string">NUMBER</span> <span class="attr">OF</span> <span class="attr">GIVEN</span> <span class="attr">SENTENCES</span> <span class="attr">IN</span> <span class="attr">THE</span> <span class="attr">KNOWLEDGE</span> <span class="attr">BASE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SENTENCE</span> <span class="attr">1</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">SENTENCE</span> <span class="attr">K</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The first line contains a query as one logic sentence (further detailed below). The line after contains an integer K specifying the number of sentences given for the knowledge base. The remaining K lines contain the sentences for the knowledge base, one sentence per line.</p><h4 id="Query-format"><a href="#Query-format" class="headerlink" title="Query format"></a>Query format</h4><p>The query will be a single literal of the form Predicate(Constant_Arguments) or<br>~Predicate(Constant_Arguments) and will not contain any variables. Each predicate will have between 1 and 25 constant arguments. Two or more arguments will be separated by commas.</p><h4 id="KB-input-format"><a href="#KB-input-format" class="headerlink" title="KB input format"></a>KB input format</h4><p>Each sentence to be inserted into the knowledge base is written in FOL using operators &amp;, |, =&gt;, and ~, with the following conventions:<br>&amp; denotes the conjunction operator.<br>| denotes the disjunction operator.<br>=&gt; denotes the implication operator.<br>~ denotes the negation operator.<br>No other operators besides &amp;, |, =&gt;, and ~ are used in the input to the knowledge base.<br>There will be NO parentheses in the input to the KB except to mark predicate arguments. For example: Pred(x,y) is allowed, but A &amp; (B | C) is not.<br>Variables are denoted by a single lowercase letter.<br>All predicates (such as Order(x,y) which means person x orders food item y) and constants (such as Broccoli) are case sensitive alphanumeric strings that begin with an uppercase letter.<br>Thus, when parsing words in the input to the KB, use the following conventions:<br>9.1. Single lowercase letter: variable. E.g.: x, y, z<br>9.2. First letter is uppercase and opening parenthesis follows the current word: predicate. E.g.: Order(x,y), Pred52(z)<br>9.3. Otherwise: constant. E.g.: Harry, Pizza123<br>Each predicate takes at least one argument (so, all predicate names are always followed by an opening parenthesis). Predicates will take at most 25 arguments. A given predicate name will not appear with different number of arguments.<br>Predicate arguments will only be variables or constants (no nested predicates).<br>There will be at most 100 sentences in the knowledge base.<br>See the sample input below for spacing patterns.<br>You can assume that the input format is exactly as it is described.<br>There will be no syntax errors in the given input.<br>The KB will be true (i.e., will not contain contradictions).<br>Note that the format we just specified is broader than both Horn form and CNF. Thus, you should first convert the given input sentences into CNF and then insert the converted sentences into your CNF KB for resolution.</p><h4 id="Format-for-output-txt"><a href="#Format-for-output-txt" class="headerlink" title="Format for output.txt"></a>Format for output.txt</h4><p>Your program should determine whether the query can be inferred from the knowledge base or not, and write a single line to output.txt:</p><p><answer><br>Each answer should be either TRUE if you can prove that the corresponding query sentence is true given the knowledge base, or FALSE if you cannot. This is a so-called “closed-world assumption” (things that cannot be proven from the KB are considered false).</answer></p><h4 id="Notes-and-hints"><a href="#Notes-and-hints" class="headerlink" title="Notes and hints"></a>Notes and hints</h4><p>Please name your program “request.xxx” where ‘xxx’ is the extension for the programming language you choose. (“py” for python3, “cpp” for C++11, and “java” for<br>Java).<br>If you decide that the given statement can be inferred from the knowledge base, every variable in each sentence used in the proving process should be unified with a Constant (i.e., unify variables to constants before you trigger a step of resolution).<br>All variables are assumed to be universally quantified. There is no existential quantifier in this request. There is no need for Skolem functions or Skolem constants.<br>Operator priorities apply (e.g., negation has higher priority than conjunction).<br>The knowledge base is consistent.<br>If you run into a loop and there is no alternative path you can try, report FALSE. For example, if you have two rules (1) ~A(x) | B(x) and (2) ~B(x) | A(x) and wanting to prove A(Teddy). In this case your program should report FALSE.<br>Note that the input to the KB is not in Horn form. So you indeed must use resolution and cannot use generalized Modus Ponens.</p><p>Example 1<br>For this input.txt:</p><p>Order(Jenny,Pizza)<br>7<br>Order(x,y) =&gt; Seated(x) &amp; Stocked(y)<br>Ate(x) =&gt; GetCheck(x)<br>GetCheck(x) &amp; Paid(x) =&gt; Leave(x)<br>Seated(x) =&gt; Open(Restaurant) &amp; Open(Kitchen)<br>Stocked(Hamburger)<br>Open(Restaurant)<br>Open(Kitchen)<br>your output.txt should be:</p><p>FALSE<br>Note that, equivalently, the following input.txt could be given, where the =&gt; symbols have been replaced using the definition of implication (P=&gt;Q is the same as ~P|Q):</p><p>Order(Jenny,Pizza)<br>9<br>~Order(x,y) | Seated(x)<br>~Order(x,y) | Stocked(y)<br>~Ate(x) | GetCheck(x)<br>~GetCheck(x) | ~Paid(x) | Leave(x)<br>~Seated(x) | Open(Restaurant)<br>~Seated(x) | Open(Kitchen)<br>Stocked(Hamburger)<br>Open(Restaurant)<br>Open(Kitchen)<br>and your output.txt should again be:</p><p>FALSE<br>Hint: you will need some pre-processing, like we have done here to convert from the first version of this example to the second version (we eliminated the implications), to ensure that your resulting KB is in CNF and can be used for resolution.</p><p>Example 2<br>For this input.txt:</p><p>Leave(Helena)<br>11<br>Seated(x) &amp; Stocked(y) =&gt; Order(x,y)<br>Order(x,y) =&gt; Ate(x)<br>GetCheck(x) &amp; HaveMoney(x) =&gt; Paid(x)<br>Ate(x) =&gt; GetCheck(x)<br>GetCheck(x) &amp; Paid(x) =&gt; Leave(x)<br>Open(Restaurant) &amp; Open(Kitchen) =&gt; Seated(x)<br>Stocked(Portabello) | Stocked(Tofu) =&gt; Stocked(VeganHamburger)<br>Stocked(Portabello)<br>Open(Restaurant)<br>Open(Kitchen)<br>HaveMoney(Helena)<br>your output.txt should be:</p><p>TRUE<br>Example 3<br>For this input.txt:</p><p>Order(Tim,Italian)<br>15<br>Seated(x) &amp; Stocked(y) =&gt; Order(x,y)<br>Order(x,y) =&gt; Ate(x)<br>GetCheck(x) &amp; HaveMoney(x) =&gt; Paid(x)<br>Ate(x) =&gt; GetCheck(x)<br>GetCheck(x) &amp; Paid(x) =&gt; Leave(x)<br>Open(Restaurant) &amp; Open(Kitchen) =&gt; Seated(x)<br>Stocked(Pasta) | Stocked(Pizza) =&gt; Stocked(Italian)<br>Stocked(Flour) &amp; Stocked(Cheese) =&gt; Stocked(Pizza)<br>Stocked(Penne) &amp; Stocked(Pesto) =&gt; Stocked(Pasta)<br>Open(Restaurant)<br>HaveMoney(Tim)<br>HaveMoney(Lauren)<br>Stocked(Penne)<br>Stocked(Flour)<br>Stocked(Cheese)<br>your output.txt should be:</p><p>FALSE<br>Example 4<br>For this input.txt:</p><p>Hangout(Leia,Teddy)<br>45<br>Likes(x,y) &amp; Likes(y,x) | Meet(x,y,z) =&gt; Hangout(x,y)<br>Leave(x,z) &amp; Leave(y,z) =&gt; Meet(x,y,z)<br>GetCheck(x,z) &amp; Paid(x,z) =&gt; Leave(x,z)<br>GetCheck(x,z) &amp; HaveMoney(x) =&gt; Paid(x,z)<br>Ate(x,y) =&gt; GetCheck(x,z)<br>Order(x,y) &amp; Good(y) =&gt; Ate(x,y)<br>Seated(x,z) &amp; Stocked(y,z) =&gt; Order(x,y)<br>OpenRestaurant(z) &amp; Open(Kitchen,z) &amp; HasTable(z) =&gt; Seated(x,z)<br>TableOpen(x,z) | TableOpen(y,z) =&gt; HasTable(z)<br>HasIngredients(y,z) &amp; Open(Kitchen,z) =&gt; Stocked(y,z)<br>~Bad(x) =&gt; Good(x)<br>Has(Dough,z) &amp; Has(Cheese,z) =&gt; HasIngredients(CheesePizza,z)<br>Has(Pasta,z) &amp; Has(Pesto,z) =&gt; HasIngredients(PestoPasta,z)<br>Has(Falafel,z) &amp; Has(Hummus,z) =&gt; HasIngredients(FalafelPlate,z)<br>Has(Rice,z) &amp; Has(Lamb,z) =&gt; HasIngredients(LambPlate,z)<br>Has(LadyFingers,z) &amp; Has(Mascarpone,z) =&gt; HasIngredients(Tiramisu,z)<br>Old(Cheese) | Burnt(CheesePizza) =&gt; Bad(CheesePizza)<br>Moldy(Pesto) =&gt; Bad(PestoPasta)<br>Bad(Lamb) | Soggy(Rice) =&gt; Bad(LambPlate)<br>Has(Dough,Bestia)<br>Has(Cheese,Bestia)<br>Has(Cheese,Dune)<br>Has(Pasta,Bestia)<br>Has(Pesto,Bestia)<br>Has(Falafel,Dune)<br>Has(Hummus,Dune)<br>Has(Rice,Dune)<br>Has(Lamb,Dune)<br>Has(LadyFingers,Bestia)<br>Has(Mascarpone,Bestia)<br>Burnt(CheesePizza)<br>Soggy(Rice)<br>~Bad(Tiramisu)<br>Bad(Lamb)<br>OpenRestaurant(Bestia)<br>Open(Kitchen,Bestia)<br>OpenRestaurant(Dune)<br>Open(Kitchen,Dune)<br>HaveMoney(Leia)<br>HaveMoney(Teddy)<br>Likes(Leia,Teddy)<br>Likes(Leia,Mary)<br>Likes(Teddy,Harry)<br>Likes(Harry,Teddy)<br>TableOpen(Patio,Bestia)<br>your output.txt should be:</p><p>TRUE</p>]]></content>
    
    <summary type="html">
    
      使用First Order Logic的方法，来解决逻辑学的AI问题。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="MPI" scheme="cplusplusdaixie.com/tags/MPI/"/>
    
      <category term="OpenMP" scheme="cplusplusdaixie.com/tags/OpenMP/"/>
    
  </entry>
  
  <entry>
    <title>CS714-Parallel-Design-Patterns</title>
    <link href="cplusplusdaixie.com/CS714-Parallel-Design-Patterns.html"/>
    <id>cplusplusdaixie.com/CS714-Parallel-Design-Patterns.html</id>
    <published>2023-04-29T01:58:01.000Z</published>
    <updated>2023-04-29T02:00:47.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="About-the-coursework"><a href="#About-the-coursework" class="headerlink" title="About the coursework"></a>About the coursework</h3><p>Part two of the coursework follows on from your initial work on part one. However, these two pieces are marked independently and your grade for part two will not depend on the answers given in part one.</p><p>In this part of the coursework you will:</p><p>Write parallel code which parallelises the nuclear engineer’s reactor core model using either geometric decomposition or the task-based parallelism pattern<br>Write a report that explains your implementation and performance<br>Your code should be written in Fortran, C or C++ and parallelised with MPI. You must base your parallel implementation upon the serial code which has been provided (either the C or Fortran version), with the results remaining unchanged.</p><p>The serial code implements a version of the reactor core simulation model.</p><p>Standard solution: Provide a parallel, distributed memory solution leveraging MPI, that follows either geometric decomposition or the task-based parallelism pattern correctly for the provided serial code, this is sufficient for a mark of up to around 65% o You will obtain higher marks in this range if you are able to demonstrate that your parallel solution running at scale is capable of significantly increasing the artificial number of neutrons limit in the simulation.<br>Excellent solution: To obtain marks beyond 65% and into the distinction (70%+) level then you should do at least one, or both, of:<br>A framework providing geometric or task-based parallelism for a generic simulation but containing no problem specific code for this model and that could be reused. Problem specific code provided separately that uses your framework to solve the problem for the nuclear engineer’s reactor model.<br>Provide a mixed OpenMP and MPI hybrid parallelisation, with OpenMP across cores within a NUMA region or node, and MPI distributed memory between processes.<br>Your code should compile and run on either Cirrus and/or ARCHER2, and at-least across multiple nodes (distributed memory parallelism). You can target ARCHER2 and/or Cirrus, and use any of the compilers available on those machines. Ensure you state which compiler you are using and target machine(s) in a README file submitted with your source code.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>Your code should:</p><p>Compile and run on either Cirrus and/or ARCHER2<br>Parallelise the nuclear engineer’s reactor core model based on the provided serial code leveraging at-least distributed memory parallelism via MPI and potentially mixed OpenMP with MPI for an excellent solution. Note that providing a shared memory only (OpenMP-only) parallelisation without MPI is not sufficient to be considered a standard solution.<br>Be clear and adopt a clean design.<br>Be packaged neatly with a README file describing how the code should be built and run. Should also include a makefile for building the code and submission script to run your executable on either Cirrus and/or ARCHER2 compute node(s). You should make it clear which machine your code will run on if it does not run on both.<br>Be adequately commented to a level that would allow others to work on your parallel code in the future.<br>Performance and scalability are important considerations in this assessment. Whilst the focus here is on the parallelisation, there are some aspects of the existing serial code which are less than optimal, and credit will be provided if you address these as part of your solution too. You are free to change any part of the serial code that you wish as long as the result is correct.</p><p>Output<br>As per the serial code, periodically a general summary of the status of the simulation should be displayed along with a final summary once the simulation terminates. This information is displayed by the serial code and must also be provided by your parallelised version. Furthermore, as per the serial code, a file should be generated which contains the state of the reactor core as the simulation progresses at specified points in time.</p><p>Suggested Configurations<br>There is a simulation configuration provided, config_simple.txt, which implements a small 1m by 1m reactor. You will see that even this takes a long time to simulate at the given accuracy. You are free to create your own configuration files and change any settings, for instance for performance scaling runs you might increase the size of the reactor core, the number of timesteps to increase the length of run or reduce the nanoseconds between timesteps to increase accuracy.</p><p>You will see an option MAX_NEUTRONS , this is an artificial limit on the number of neutrons set by the configuration in order to limit the complexity and hence the runtime. Ideally your parallelisation, on large core counts, will mean that this option can be significantly increased or removed.</p><p>The COLLISION_PROB_MULTIPLIER is another artificial setting which multiplies the probability of neutron fuel collision. This is required to produce fissions, firstly because we limit the number of neutrons artificially and secondly due to the simplification of some of the physics. Once you increase the number of neutrons then this multiplier can likely be reduced, but maybe not eliminated.</p><p>Report<br>Your report should mainly focus on the design of your implementation and the resulting performance you have obtained. You should explain how you have applied either the geometric decomposition or task-based parallelism pattern to the problem.</p><p>If you have developed a framework as part of an excellent solution, then you should document how it is designed to be used by the user and where the split between mechanism and policy lies. If you have undertaken hybrid OpenMP-MPI parallelisation, then you should explain your design and provide some performance comparison of this against MPI only to explore whether it is beneficial in this case.</p><p>Credit will be given in the report for exploring the performance and scaling properties of the parallelised code, for instance via weak or strong scaling experiments on either Cirrus or ARCHER2. A discussion about aspects of the code’s design that help or hinder performance will also be rewarded, along with highlighting any fundamental limitations.</p><p>A discussion around how you guarantee correctness of your model, will gain you some extra credit, but lengthy descriptions or explanations about the output are not required to gain a very good mark.</p><p>Serial code provided to you<br>The serial code is provided to you in both C and Fortran versions. You should start from this, and the code itself comprises a number of distinct features:</p><p>The main simulation code which contains the program entry point and much of the logic as described in the details of the model. It is probably easiest to focus on this part first, and I suspect you can mainly focus on this when applying your choice of geometric decomposition or task-based parallelism pattern.<br>Configuration parsing which reads the input configuration file and parses the options into a structure/user derived type. I don’t imagine you will need to change this much, but feel free to edit if it’s helpful in any way.<br>Simulation support functions which provide utility functionality to implement specific facets of the details of the model. You may or may not need to change this depending on the parallelisation/optimisations adopted.<br>The physics of the model are fairly simplistic, and this is fine for our purposes, I strongly suggest against making them more advanced as you will not obtain marks for doing so. Whilst I will give credit for optimising existing serial code that has not been written optimally, I do not expect you to undertake advanced algorithmic changes.</p><p>Furthermore, if you find bugs in the serial code then let me know and I will fix and push out an update for everyone on Learn.</p><p>Details of the nuclear engineer’s reactor core model<br>The model that the nuclear engineers have written exhibits the following behaviour:</p><p>The reactor core is represented as a cube in three dimensions and consists of numerous two-dimensional channels which are cuboid.<br>These channels run all the way down the reactor in the vertical (z) dimension and in the x and y dimensions are 20 cm. Channels are placed next to each other, so for instance in a reactor core of 1m3 there will be five rows of five channels, each 1 metre deep in vertical length.<br>Channels can contain nothing (they are empty), nuclear fuel assembly, control rod, a moderator, or a neutron generator. It is only possible for each individual channel to contain one of these.<br>A fuel assembly is made up of fuel pellets. Each pellet is x=40mm by y=40mm by z=2mm and weighs 1 gram. Fuel pellets are stacked on top of each other all the way down the fuel assembly channel.<br>The simulation progresses in timesteps, where a timestep is measured in nano seconds (which is 1e-9 seconds).<br>The size of each timestep (in ns) is configurable as an input parameter.<br>The simulation also contains lots of neutrons which are free to pass through the reactor core and are tracked. At every timestep, the code calculates the movement of each neutron and updates its position.<br>Once a neutron travels outside the reactor core it is deactivated and disappears from the simulation.<br>At every timestep, for each neutron, the code will check whether it has interacted with the contents of the reactor core.<br>If a neutron enters a fuel assembly channel, then the neutron’s absorption cross section is calculated which is determined by the neutron’s energy and the type of fuel in the reactor.<br>This cross section is then used to calculate the probability that the neutron has been absorbed by the fuel which also depends on the current number of atoms of that fuel in the pellet. If the neutron is absorbed, then the atom of fuel that it has been absorbed by gains an extra neutron (e.g., goes from U235 to U236) and the neutron disappears from the simulation.<br>If the neutron enters the moderator, then the neutron’s scattering cross section is calculated and absorption probability.<br>Based on these, if the neutron collides with the moderator’s atoms, then it is slowed down (slower neutrons are more likely to cause fission). If the neutron is absorbed by the moderator, then it disappears from the simulation.<br>If the neutron enters the control rod channel, then the code calculates whether the neutron has collided with the control rod.<br>Control rods can be lowered a certain amount into the reactor, so whether the neutron hits the control rod is based upon how far the rod has been lowered and the location of the neutron.<br>Any neutron-control rod collision results in absorption and the neutron disappears from the simulation.<br>At each timestep the state of the reactor core is updated<br>All atoms of U236 and Pu240 fission, each fission releases 200MeV of energy<br>There is an 85% chance that U236 splits into Barium and Krypton which releases 3 neutrons. Otherwise, it will split into Xenon and Strontium, releasing 2 neutrons.<br>There is a 73% chance Pu240 splits into Xenon and Zirconium releasing 3 neutrons. Otherwise, it will release a neutron and mutate into Pu239.<br>The ejected neutrons’ energy (between 0 and 20 MeV) and resulting velocity components in the x, y and z dimensions is random.<br>Neutron generators contain Californium-252 and this will release 23e12 neutrons per gram per second.<br>Every cm in height of the neutron generator is half a gram in weight.<br>Again, the resulting neutrons’ energy (between 0 and 20 MeV) and velocity components in the x, y and z dimensions is random.<br>The size and configuration of the reactor core (e.g., the type of each channel) is provided by the user via a configuration script.<br>Reactor fuel can be a mixture of U235, U238, Pu239 and the configuration script provides the percentage of these in fuel assemblies.<br>Only U235 and Pu239 will fission, U238 does not.<br>From these percentages the code calculates the number of atoms in each fuel pellet for each chemical, with other elements that are fission byproducts (Barium, Krypton, Xenon, Strontium and Zirconium) set to zero initially.<br>The moderator can be one of water, heavy water (deuterium) or graphite. Each has different neutron slowing and absorption properties. The weight of the moderator in each channel is provided in grams. o<br>For instance, water is more likely to slow neutrons but also much more likely to absorb them.<br>We want the moderator to slow down the neutrons to increase the probability of fission, but we do not want it to absorb neutrons.<br>The heavier the moderator then the more of it is present, this will raise the probability of neutron slowing and moderator absorption.<br>The percentage of how far each control rod has been inserted into the reactor core can be provided, and if this is omitted then it is assumed a zero value (i.e. the control rod is fully out of the reactor).<br>Due to limitations of the simulation (runtime and memory), the engineers have set a maximum number of neutrons that can be active at any one time.<br>This artificial limit impacts the ability for the simulation to undertake fusion, and-so they have also introduced an artificial absorption probability multiplier, which increases the probability that an individual neutron is absorbed by the fuel by a specific multiplication factor.<br>Ideally, the parallelisation of their code will mean that they can remove or significantly increase the maximum neutrons configuration limitation.<br>Periodically the state of the reactor should be appended to a file.<br>This should contain, the simulation time, amount of energy released via fission and for each fuel assembly the number of atoms of Uranium (235, 236 and 238), Plutonium (239 and 240), Barium, Krypton, Xenon (134 and 140), Strontium and Zirconium present.<br>The frequency of this reactor state storage is configurable by the user.<br>There should be frequent summaries of simulation progress printed to stdio<br>Which includes the current simulation time, the number of active neutrons, the number of fissions so far and total amount of energy released through fission.<br>The simulation will terminate when a predetermined number of timesteps is reached.<br>A short report is printed to stdio which reports the total number of fissions that have completed and associated energy release, along with the simulation code’s runtime.<br>An excellent solution<br>To obtain marks beyond around 65% and into the distinction (70%+) level then you will need to do at least one of the following activities:</p><p>A framework that splits mechanism from policy, where the mechanism of your geometric or task-based decomposition is provided in a generic, reusable manner so that other people could leverage it. Your problem specific code should call into the framework and utilise the framework to undertake all the parallelism. Problem specific code should be entirely abstracted from the mechanism of parallelisation, and you should make clear in your report the design of your framework, where the split between mechanism and policy lies, and how users would use your framework.<br>Provide a mixed OpenMP and MPI implementation which uses OpenMP across cores in a NUMA region and/or node, and MPI between these processes. You will need to ensure that MPI is initialised in thread mode (init_thread) and ensure that the threading mode you are using is supported by your MPI library (using query_thread). More information about OpenMP and MPI interoperability can be found at <a href="https://github.com/EPCCed/archer2-AMPP-2022-06-29/blob/master/slides/L06MPIandOpenMP.pdf" target="_blank" rel="noopener">https://github.com/EPCCed/archer2-AMPP-2022-06-29/blob/master/slides/L06MPIandOpenMP.pdf</a> with the Cirrus and ARCHER2 websites explaining how to submit jobs with a mixture of processes and threads. Your report should explain how you have mixed OpenMP and MPI and provide some performance comparison against an MPI only approach to highlight whether this benefits the simulation code of not.<br>Doing only one of these well is sufficient for distinction level marks, and you will receive higher marks if you do both. I am more forgiving of a limited implementation if you do both however, so if you provide a framework and hybrid parallelisation which on their own are fairly limited and would score lower than a distinction, because you have done both then together this could take you above the distinction (70%) mark level.</p><p>Having Difficulty?<br>If you are struggling to get all the aspects running in parallel, then you may wish to limit your parallelisation to a simpler subset of the functionality. For example, you could modify the serial code so that neutrons are static throughout the simulation and not dynamically created or destroyed. If this is the case, then you should state clearly in your report which simplifications you have made. A working code for a simplified model could gain as good a mark or better than a broken code attempting the full model.</p><p>A code that does not quite work might be good enough to pass as long as the ideas are correct, and the code is accompanied by a good quality report. If a non-working code is submitted, the report should explain the parts that do work, should describe the symptoms of why the program is not working and the steps taken to try and fix the problems.</p><p>If all else fails, use the report to describe how you would have parallelised the code given more time. Describe the code that you have submitted.</p>]]></content>
    
    <summary type="html">
    
      使用Open MPI, 编写并行代码，使用几何分解或基于任务的并行模式并行化核工程师的反应堆堆芯模型。
    
    </summary>
    
      <category term="C++" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="MPI" scheme="cplusplusdaixie.com/tags/MPI/"/>
    
      <category term="OpenMP" scheme="cplusplusdaixie.com/tags/OpenMP/"/>
    
  </entry>
  
  <entry>
    <title>CSCI561-Pente</title>
    <link href="cplusplusdaixie.com/CSCI561-Pente.html"/>
    <id>cplusplusdaixie.com/CSCI561-Pente.html</id>
    <published>2023-04-21T01:46:00.000Z</published>
    <updated>2023-05-27T13:30:02.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h3><p>This is a programming request. You will be provided sample inputs and outputs (see below). Please understand that the goal of the samples is only to check that you can correctly parse the problem definitions and generate a correctly formatted output that contains a valid, but not necessarily good (or the only possible) move. In most situations, several moves will be possible, so your move may differ from our example and still be perfectly valid. You should not assume that if your program works on the samples, it is a correctly implemented game-playing agent. It is your task to make sure that your program will work correctly on any valid input. You are encouraged to try your own test cases or have your program play against itself to check how your program would behave in some complex situations. Since each request submission is checked by a set of programs, your output should match the specified format exactly. Failure to do so will most certainly cost some points. The output format is simple and examples are provided. You should upload and test your code on vocareum.com, and you will submit it there. You may use any of the programming languages and versions thereof provided by vocareum.com.</p><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><p>Your code will be tested as follows: Your program should not require any command-line argument. It should read a text file called “input.txt” in the current directory that contains the current state of the game. It should write a file “output.txt” with your chosen move to the same current directory. Format for input.txt and output.txt is specified below. End-of-line character is LF (since vocareum is a Unix system and follows the Unix convention).</p><p>Note that if your code does not compile, or somehow fails to load and parse input.txt, or writes an incorrectly formatted output.txt, or no output.txt at all, or OuTpUt.TxT, you will get zero points. Anything you write to stdout or stderr will be ignored and is ok to leave in the code you submit (but it will likely slow you down). Please test your program with the provided sample files to avoid any problem.</p><h3 id="Project-description"><a href="#Project-description" class="headerlink" title="Project description"></a>Project description</h3><p>In this project, we will implement agent that plays the game of Pente, the two-player version of the abstract strategy board game. It is in the m,n,k-game family from which tic-tac-toe (3,3,3) and Connect Four also come from, where the players are trying to connect k pieces on the board before the other player does. Pente stands out from these games because it includes a piece capture mechanic, where the player can sandwich a pair of their opponent’s pieces and capture them. It is played on a 19x19 board, where pieces are placed on the intersection of the lines (like the game Go). White always opens the game (like in Chess). The players take turns putting pieces on the board until:<br>1) A player connects 5 of their pieces in a horizontal, vertical or a diagonal line, OR<br>2) A player makes 5 total captures (equals to 10 pieces of their opponent’s since pieces can only be captured in pairs).</p><p>The custodial capture mechanic, where a player flanks the opponent’s pieces with their own to capture them, only applies to pairs of the opponent’s pieces. Therefore, if the current board formation is XOO_ and player X plays their piece as XOOX, the O pieces are captured and the board becomes X_ <em>X. Note again that this only works for pairs of pieces, therefore X cannot capture their opponent’s pieces from a board like XOOO</em> or XO_.</p><p>Captures only happen when a capturing piece is placed. Therefore, if the board is XO_X and O places a piece in the free intersection, the board formation becomes XOOX and no capture happens by X.</p><p>More details on the game can be found at <a href="https://en.wikipedia.org/wiki/Pente" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Pente</a> and we will also go over the gameplay for you below (be careful, Wikipedia images show a 13x13 board). If you would like to try the game of Pente to understand the general gameplay, you can utilize the “Play the AI” option without having to log in at <a href="https://pente.org/join.jsp" target="_blank" rel="noopener">https://pente.org/join.jsp</a>. Note that these resources are just for you to familiarize yourself with the game, you should strictly follow the rules we outline below while coding your game-playing agent (there are several variants of the game).</p><p>The original Pente game is known to favor the first player. This is called the First Player<br>Advantage (FPA) and there has been many suggestions to level the playing field for the second player. A discussion about this can be found in: <a href="https://en.wikipedia.org/wiki/Pente#First_Player_Advantage" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Pente#First_Player_Advantage</a></p><p>We will be employing certain rules that have been used in the past in Pente tournaments to make this game fairer for the second player. More details of these can be found below. These will also help us determine how winners are determined in student competitions.</p><h4 id="Setup-of-the-game"><a href="#Setup-of-the-game" class="headerlink" title="Setup of the game"></a>Setup of the game</h4><p>The setup of the game is as follows:</p><p>Each player plays as white or black.<br>The board consists of an 19x19 grid of squares.<br>Before the game starts, the board is empty.<br>White always opens the game.<br>First piece (White) must be placed in the middle of the board.<br>The second move of White (first player) cannot be more than 3 intersections away from their first piece (center). This is one of the rules that alleviates the first player advantage (FPA).<br>Pieces can be placed in any empty intersection (apart from the first player restrictions explained above).<br>Placed pieces cannot be removed from the board unless they are captured.<br>Here’s the visualization of an empty board and an example start, just after White has placed their second piece following the anti-FPA restriction.</p><p>As can be seen in the right image above, White has placed their 2nd piece 3 intersections away which is the maximum possible amount for their second move. In following turns, pieces can be placed in any empty intersection, but your agent should be able to figure out which is best.</p><h4 id="Play-sequence"><a href="#Play-sequence" class="headerlink" title="Play sequence"></a>Play sequence</h4><p>We first describe the typical play for humans. We will then describe some minor modifications for how we will play this game with artificial agents.</p><p>Create the initial board setup according to the above description.<br>Players randomly determine who will play White/Black. White will play first.<br>During their turn, each player places a single piece of one’s own color on the board:<br>Once placed, the pieces cannot be removed from their intersection unless they are captured by the opponent.<br>A simple move:<br>Can be played on any empty intersection (including border intersections).<br>If playing White, player must place their 1st piece in the center of the board and their 2nd piece no more than 3 intersections away from the 1st piece.<br>A capture move:<br>Is played next to a pair of the opponent’s pieces such that they are flanked (sandwiched) by one of the player’s pieces. The opponent’s pieces are captured by the player when this happens. A sample capture can be seen below:<br>The capture can be made for pieces that are horizontally, vertically, or diagonally oriented.<br>When capture happens, the pair of pieces belonging to the opponent are removed from the board and added to the player’s capture pile.<br>One capture move can be used to capture one or more pairs of pieces from the opponent. Sample of this can be seen below:<br>Note that captures only happen when both of the opponent’s pieces are on the board when a capturing move is made. Therefore, if the board state is XO_X and O moves to make it XOOX, the pair of O pieces are not captured by X. An example for this is below.<br>If the current play results in a board where the active player has 5+ connected pieces on the board OR has 5 pairs (or 10 pieces) total captured from their opponent, the game ends. Otherwise, play proceeds to the other player.<br>If above conditions are not met, and there is no more room left on the board to play a piece, the game ends in a draw.</p><h3 id="Playing-with-agents"><a href="#Playing-with-agents" class="headerlink" title="Playing with agents"></a>Playing with agents</h3><p>In this request, your agent will play against another agent, either implemented by the TAs, or by another student in the class.</p><p>For grading, your agent will play against two different agents implemented by the TAs. 10 full games will be against a random agent (this should be easy for your agent to beat), and another 10 full games will be against a simple minimax agent with no alpha-beta pruning. There will be a limited total amount of play time available to your agent for the whole game (e.g., 100 seconds), so you should think about how to best use it throughout the game. This total amount of time will vary from game to game. Your agent must play correctly (no illegal moves, etc.) and beat the reference agents to receive 5 points per game. Your agent will be given the first move on 12 of the 20 games. In case of a draw, the agent with more remaining play time wins. Note that, while playing games, you should think about how to divide your remaining play time across possibly many moves throughout the game.</p><p>In addition to grading, we will run a competition where your agent plays against agents created by the other students in the class. This will not affect your grade, but it would look very good on your Resume if you finish in the top 10, or are the grand winner!</p><h3 id="Agent-vs-agent-games"><a href="#Agent-vs-agent-games" class="headerlink" title="Agent vs agent games"></a>Agent vs agent games</h3><p>Playing against another agent will be organized as follows (both when your agent plays against the reference minimax agent, or against another student’s agent):</p><p>A master game playing engine will be implemented by the grading team. This engine will:</p><p>Create the initial board setup according to the above description.<br>Assign a player color (Black or White) to your agent. The player who gets assigned White will have the first move.<br>Then, in sequence, until the game is over:<br>The master game playing engine will create an input.txt file which contains the current board configuration, which color your agent should play, and how much total play time your agent has left. This file will also contain number of pieces captured by each agent until that point in the game. More details on the exact format of input.txt are given below.<br>We will then run your agent. Your agent should read input.txt in the current directory, decide on a move, and create an output.txt file that describes the move (details below). Your time will be measured (total CPU time). If your agent does not return before your time is over, it will be killed and it loses the game.<br>Your remaining playing time will be updated by subtracting the time taken by your agent on this move. If time left reaches zero or negative, your agent loses the game.<br>The validity of your move will be checked. If the format of output.txt is incorrect or your move is invalid according to the rules of the game, your agent loses the game. (Reminder: Any empty spot on the board is a valid move, except for the rules for the first two moves of the white player.)<br>Your move will be executed by the master game playing engine. This will update the game board to a new configuration.<br>The master game playing engine will check for a game-over condition. If one occurs, the winning agent or a draw will be declared accordingly.<br>The master game playing engine will then present the updated board to the opposing agent and let that agent make one move (with the same rules as just described for your agent; the only difference is that the opponent plays the other color and has its own time counter).<br>Game continues until an end condition is reached.<br>Input and output file formats<br>Input: The file input.txt in the current directory of your program will be formatted as follows:<br>First line: A string BLACK or WHITE indicating which color you play. White will always start the game.<br>Second line: A strictly positive floating point number indicating the amount of play time remaining for your agent (in seconds).<br>Third line: Two non-negative 32-bit integers separated by a comma indicating the number of pieces captured by White and Black players consecutively. Caution, it will always be ordered as first captured by White, then by Black, irrespective of what color is given in the first line.<br>Next 19 lines: Description of the game board, with 19 lines of 19 symbols each:</p><p>w for a cell occupied by a white piece<br>b for a cell occupied by a black piece<br>. (a dot) for an empty intersection<br>For example:</p><p>BLACK<br>100.0<br>0,0<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>………w………<br>……….b……..<br>………w.bw……<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>In this input.txt example, your agent should play a move as the Black agent and has 100.0 seconds. The board configuration is 5 turns into the game. There’s a capture condition for White, so your agent could likely choose to block that by putting their piece in the red highlighted position on the board.</p><p>Output: The format we will use for describing the square positions is borrowed from the notations from Pente.org, where every column is described by a letter and every row is described by a number. The position for a given square is given as the concatenation of these. Here’s a useful visualization on how we identify each intersection for the 19x19 Pente board:</p><p>Using the above image as reference, in the input.txt sample given above, White has pieces on 10K, 10N and 12K, while Black has pieces on 11L and 10M. Using this type of notation for the cells on our gameboard, the file output.txt which your program creates in the current directory should be formatted as follows:</p><p>1 line: PIECE_POS which describes your move with an integer (1-19) and an uppercase letter (A-T) concatenated.</p><p>For example, for the red highlighted move in the input sample, output.txt may contain:<br>9N</p><p>The resulting board would look like this, given the above input.txt (the master game playing engine will compute this and it is not part of output.txt):</p><p>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>………w………<br>……….b……..<br>………w.bw……<br>…………b……<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>Notes and hints<br>Please name your program “request.xxx” where ‘xxx’ is the extension for the programming language you choose (“py” for python, “cpp” for C++11, and “java” for Java).<br>The board you will be given as input will always be valid and will have w and b letters, as well as . (standing for empty cells).<br>Likely (but not guaranteed), total play time will be 5 minutes (300.0 seconds) when playing against another agent.<br>Play time used on each move is the total combined CPU time as measured by the Unix time command. This command measures pure computation time used by your agent, and discards time taken by the operating system, disk I/O, program loading, etc. Beware that it cumulates time spent in any threads spawned by your agent (so if you run 4 threads and use 400% CPU for 10 seconds, this will count as using 40 seconds of allocated time).<br>If your agent runs for more than its given play time (in input.txt), it will be killed and will lose the game.<br>You need to think and strategize how to best use your allocated time. In particular, you need to decide on how deep to carry your search, on each move. In some cases, your agent might be given only a very short amount of time (e.g., 5.2 seconds, or even 0.01 seconds), for example towards the end of a game. Your agent should be prepared for that and return a quick decision to avoid losing by running over time. The amount of play time that will be given in input.txt will always be ]0, but it could be very small if you are close to running out of time.<br>To help you with figuring out the speed of the computer that your agent runs on, you are allowed to also provide a second program called calibrate.xxx (same extension conventions as for request.xxx). This is optional. If one is present, we will run your calibrate program once (and only once) before we run your agent for grading or against another agent. You can use calibrate to, e.g., measure how long it takes to expand some fixed number of search nodes, or to benchmark the CPU speed in any other way you like.<br>You can then save this into a single file called calibration.txt in the current directory. When your agent runs during grading or during a game, it could then read calibration.txt in addition to reading input.txt, and use the data from calibration.txt to strategize about search depth or other factors. Please aim for no more than 5 minutes to run your calibrate program. A few seconds (e.g., expand 10,000 nodes) is usually enough to get a good estimate of the CPU speed.<br>You need to think hard about how to design your eval function (which gives a value to a board when it is not game over yet).<br>You are allowed to maintain persistent data across moves during a game, by writing such data to a single file called playdata.txt in the current directory. Before a new game starts, the master game playing engine will delete any playdata.txt file. So, on your first move, this file will not exist, and you should be prepared for that. Then, you can write some data to that file at the end of a move and read that file back at the beginning of the next move.<br>As mentioned, there is some first player advantage in this game for two agents with perfect play (even with our rules for the first two White moves). Therefore, when playing against a reference agent, we will give your agent the first move for 6 of the 10 games. In the competition, we will play two agents against each other for an even number of games giving each the first player for half of the games, and advance both agents to the next round of the competition if they both win or draw on half of the games. If an agent loses more than half of the games, it will be eliminated and only the other agent will move to the next round of the competition. We may end up with several equivalent winners of the competition.<br>The random agent created by the TAs will likely not be uniformly random over the whole board, but may choose randomly between several candidate locations, for example all locations adjacent to pieces already on the board. The minimax TA agent will not use alpha-beta and will likely be capped at a low lookahead depth; but it will do adaptive depth choice on every move to avoid running out of time (e.g., use depth 3 when ]50s remains, depth 1 when [ 3s, otherwise depth 2).</p>]]></content>
    
    <summary type="html">
    
      给游戏Pente写AI，编程语言C++/Java/Python任选，使用至少Alpha-beta算法。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="cplusplusdaixie.com/tags/Algorithm/"/>
    
      <category term="Game" scheme="cplusplusdaixie.com/tags/Game/"/>
    
      <category term="Artificial Intelligence" scheme="cplusplusdaixie.com/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CSC108H-Bobs-Compatibility-Calculator</title>
    <link href="cplusplusdaixie.com/CSC108H-Bobs-Compatibility-Calculator.html"/>
    <id>cplusplusdaixie.com/CSC108H-Bobs-Compatibility-Calculator.html</id>
    <published>2023-04-01T05:31:47.000Z</published>
    <updated>2023-05-27T13:29:02.020Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Bob has a crush on one of his classmates in his programming class, so he wants to figure out if they are a good match. Because he took a few programming lessons, he thought he could solve this question by developing a compatibility calculator. A compatibility calculator calculates how compatible two people are based on different features, but Bob only knows his crush’s name and birthday, so that’s what he’s using.</p><p>Help Bob complete a program to calculate the love compatibility between two people based on their names and birthdays. Here is an example of how the calculator should work:<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">* Give me your first and last name:</span></span><br><span class="line">&gt; Bob Boba</span><br><span class="line"><span class="comment">* Give me your birthdate in the format YYYY/MM/DD:</span></span><br><span class="line">&gt; <span class="number">2004</span>/<span class="number">12</span>/<span class="number">21</span></span><br><span class="line"><span class="comment">* Give me your crush's first and last name:</span></span><br><span class="line">&gt; Bobbette Bibi</span><br><span class="line"><span class="comment">* Give me your crush's birthdate in the format YYYY/MM/DD:</span></span><br><span class="line">&gt; <span class="number">2004</span>/<span class="number">02</span>/<span class="number">04</span></span><br><span class="line"><span class="comment">* You are 74.0% compatible in love!</span></span><br></pre></td></tr></table></figure></p><h3 id="Goals-of-this-request"><a href="#Goals-of-this-request" class="headerlink" title="Goals of this request"></a>Goals of this request</h3><p>While developing your A2 program, you will:</p><p>continue to apply the Function Design Recipe<br>use the debugger to find out why your code isn’t working<br>read and understand function docstrings<br>practice writing helper functions<br>work with for and while loops<br>implement conditional statements<br>manipulate strings using slicing and string methods<br>build nested lists from raw data practice list mutation<br>Bob says, “Zounds, that’s a lot! What the heck are you teaching them?”</p><h3 id="Starter-Code"><a href="#Starter-Code" class="headerlink" title="Starter Code"></a>Starter Code</h3><p>For this request, we are giving you some files to help you get started. Please download the request 2 Files and extract the zip archive, as you did with A1.</p><p>Here are the files for A2:</p><p>compatibility_calculator.py is the file in which you will write your solution. It is the only file you will submit. Your job is to design and implement all the required functions. is the file containing the compatibility data for you to run the program. You won’t submit this file.<br>compatibility_data.py<br>We will test whether your code still works if we change the values defined in this file.<br>Bob says that you should do that too: after you get your program working, he suggests commenting out the current values in this file (so you can recover them later) and then try different values to see if the code still works.<br>a2_checker.py, checker_generic.py, and a2_pythonta.json<br>Together, these are the checker program that you should use to check your code. You will not modify these files.</p><h3 id="Running-the-checker"><a href="#Running-the-checker" class="headerlink" title="Running the checker"></a>Running the checker</h3><p>Bob recommends that you run a2_checker.py every time you complete a function so you don’t have to fix it all at the end.</p><p>If you run it on the starter code, you’ll see a bunch of notices like this:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FAILED a2_checker.<span class="string">py:</span>:<span class="string">TestChecker:</span>:test_count_common_occurrences - <span class="string">AssertionError:</span> count_comm on_occurrences should <span class="keyword">return</span> a <span class="keyword">int</span>, but returned None.</span><br></pre></td></tr></table></figure></p><p>As you update each function, that error message will disappear.</p><h3 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description"></a>Problem description</h3><p>The compatibility calculator consists of three sub-calculators:</p><p>Name compatibility calculator<br>Birthday compatibility calculator<br>Astrological compatibility calculator<br>Each of these sub-calculators generate a compatibility score, and the total compatibility score of the calculator is their average value.</p><p>We have provided all function headers and the docstrings in compatibility_calculator.py. Read them carefully and make sure you understand each function’s purpose before implementing it.</p><h3 id="Functions-you-need-to-implement"><a href="#Functions-you-need-to-implement" class="headerlink" title="Functions you need to implement"></a>Functions you need to implement</h3><p>Task 1: Name compatibility calculator<br>In this task, you will implement the name compatibility calculator. You need to complete the following functions:</p><p>count_common_occurrences(str, str) -&gt; int - The parameters represent names, like ‘Washburn and ‘the fabulous Q’, and when you call this function it will return the number of letters from the first one that appear in the second one, ignoring case. Spaces, punctuation, Marchmutt’ and digits are of course not alphabetic.<br>See the docstring for more details, including examples.<br>Hint: use a string method that tell you whether a character is alphabetic and another string method that gives you a lowercase or uppercase version of a string.<br>get_name_compatibility(str, str) -&gt; int - This function returns the name compatibility between two names in the input. According to Bob’s rules, this should be calculated by checking how many letters in the first person’s name occur in the second person’s name, and adding this to how many letters in the second one occur in the first one (all ignoring case), then dividing this sum by the total number of alphabetic characters in the two names combined, and multiplying this by 100.<br>See the docstring for more details.<br>Hint: use the count_common_occurrences function as a helper.<br>Task 2: Birthday compatibility calculator<br>In this task, you will implement the birthday compatibility calculator.</p><p>To calculate the compatibility between two birthdays, you need to get their numerological numbers and decide whether they are compatible or not.</p><p>Task 2.1: Dealing with the birthdates<br>For your first task, you will complete three helper functions for dealing with the date input:</p><p>extract_year(str) -&gt; int<br>extract_month(str) -&gt; int<br>extract_day(str) -&gt; int<br>The description and examples have been provided for function extract_year. Follow the TODO instructions in these functions to complete them.<br>Task 2.2: Calculate the numerological number of a birthday<br>For this task, Bob completed function get_bday_numerology_num, but it relies on a helper function, get_numerological_root, which he never got around to figuring out. So you’re going to have to do it:</p><p>get_numerological_root(int) -&gt; int - This function should return the numerological root number of the input. The root number is found by adding the digits in the parameter value together until you are left with either a single digit or one of the two Special Numbers: 11 or 22.<br>For example, the numerological root number of 1998 is 9. This is because 1 + 9 + 9 + 8 = 27. Since 27 has two digits and is not a Special Number, we repeat the summing process: 2 + 7 = 9. 9 has one digit, so it is the numerological root number of 1998.<br>See the docstring for more details.<br>Hint: You can turn the parameter value into a string to deal with it, or you can use operators % and //. The expression n % 10 gives you the last digit in a number n , and n // 10 removes the last digit in n.<br>Task 2.3: Calculate the compatibility between two numerological numbers<br>Go look at the NUM_COMPATIBILITY_DATA list in compatibility_data.py. Do this now, before reading the rest of the handout. The list shows whether two numbers are “compatible”, according to Bob. Make sure you read and understand the comment and the data.</p><p>For this task, you will complete the following functions:</p><p>build_numerology_list(list[str]) -&gt; list[list[int]] - Given a list of strings where each item is a string formatted as in NUM_COMPATIBILITY_DATA , this function builds and returns a numerology list that contains the same data but in a different format.<br>Read the docstring for details and make sure you understand the examples.<br>Hint: you can use method list.sort() or the built-in sorted function.<br>Hint: you’ll need to sort the main list. list.sort() and sorted will both do this by comparing the first items:</p><blockquote><blockquote><blockquote><p>list_of_lists = [[2, 3, 4], [1, 5, 6], [3, 0, 0]]<br>list_of_lists.sort()<br>list_of_lists [[1, 5, 6], [2, 3, 4], [3, 0, 0]]<br>get_numerology_compatibility(int, int, list) -&gt; int - Given the numerological numbers of two birthdays and a numerology list that you build from NUM_COMPATIBILITY_DATA, this function returns the compatibility of two birthdays based on their numerological numbers.<br>Read the docstring for details and make sure you understand the examples.<br>Note: The first numerological number is not guaranteed to appear in NUM_COMPATIBILITY_DATA. You should return MID_COMPATIBILITY in this situation.<br>Task 3: Astrological compatibility calculator<br>In this task, you will implement the astrological (zodiac) sign compatibility calculator.</p></blockquote></blockquote></blockquote><p>Task 3.1: Astrological sign of a birthday<br>Go read about SIGN_DATA in the starter code. Make sure you understand the comment and the data.</p><p>For this task, you will complete the following functions:</p><p>build_sign_data_list(list[str]) -&gt; list[list] - Convert a list formatted like SIGN_DATA to a list of lists.<br>Read the docstring for details and make sure you understand the examples.<br>Later, you will call this function to convert SIGN_DATA to a nested list.<br>find_astrological_sign(list[list], int, int) -&gt; str - Given sign data, a birth month, and a birth day, this function returns the sign of a person born on the given day in the given month.<br>Read the docstring for details and make sure you understand the examples.<br>Note: All start and end dates are inclusive.<br>get_sign_group(list[list], str) -&gt; int - This function returns the group number of the given sign using the sign data.<br>Read the docstring for details and make sure you understand the examples.<br>Task 3.2: Astrological compatibility of two birthdays<br>For this task, you will complete a helper function used to find the astrological compatibility of two birthdays. The compatibility between signs of two birthdays is calculated based on the sign groups they belong to.</p><p>Complete the following helper function:</p><p>find_astrological_compatibility(int, int) -&gt; int - This function returns an integer representing how compatible two sign groups are.<br>Read the docstring for details and make sure you understand the examples.<br>Task 4: Putting it all together<br>Finally, you can finish the main compatibility calculator function, calculate_love_score.</p><p>The compatibility score between two people is their name compatibility plus the numerology compatibility of their birthdays plus the sign compatibility of the birthdays, all divided by three.</p><p>As always, read the docstring for details and make sure you understand the examples.</p><h3 id="Submission-instructions"><a href="#Submission-instructions" class="headerlink" title="Submission instructions"></a>Submission instructions</h3><p>Log in to MarkUs.<br>Submit the file compatibility_calculator.py . No other files need to be submitted. We strongly recommend that you submit early and often. We will grade the latest version you submit within the permitted submission period.<br>Be sure to run the tests we’ve provided within MarkUs frequently, and always one last time before the due date. This will make sure that you didn’t accidentally submit the wrong version of your code, or worse yet, the starter code!</p>]]></content>
    
    <summary type="html">
    
      实现一个恋爱匹配器love compatibility calculator，练习Python基础的list语法。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>EE450-Student-Performance-Analysis-System</title>
    <link href="cplusplusdaixie.com/EE450-Student-Performance-Analysis-System.html"/>
    <id>cplusplusdaixie.com/EE450-Student-Performance-Analysis-System.html</id>
    <published>2023-03-23T02:55:50.000Z</published>
    <updated>2023-05-27T13:28:54.179Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>The objective of project is to familiarize you with UNIX socket programming. It is an individual request and no collaborations are allowed. If you have any doubts/questions email the TA your questions, come by TA’s office hours, or ask during the weekly discussion session. You can ask TAs any question about the content of the project, but TAs have the right to reject your request for debugging.</p><p>Problem Statement<br>In this part of the project, you will implement client-server socket programming using TCP. In a Student Performance Analysis system of a university, a client (student) would like to ask the Main server which Backend server that a department is associated with. A client sends a department name to the Main server and the Main server will search in its database and reply to the client with a Backend server ID.</p><p>The detailed operations to be performed by all the parties are described with the help of Figure 1. There are in total 3 communication endpoints, which are run in 3 individual terminal windows:</p><p>Client 1 and Client 2: represent two different users, send queries to main server<br>Main server: store information, search, send responses to clients<br>You are highly encouraged to use Beej’s Guide to Network Programming to complete this request. You can use code from Beej’s Guide as a starting point (remember to mention any code you take directly from other sources like Beej’s Guide in the README and your comments).</p><p>The full process can be roughly divided into three phases, and their communication and computation steps are as follows:</p><p>Bootup<br>[Computation]: Main server read the file list.txt and store the information.<br>[Communication]: Main server process wait for client processes to connect.<br>[Computation]: Two clients run and ask the user to input a department name.<br>Query<br>[Communication]: Each client then establishes a TCP connection to the Main server and sends their queries (the department name) to the Main server.<br>A client can terminate itself only after it receives a reply from the server (in the Reply phase).<br>Main server may be connected to both clients at the same time.<br>[Computation]: Once the Main server receives the queries, it decodes the queries and searches in the list with the received department name, obtaining the corresponding Backend server ID.<br>Reply<br>[Communication]: Main server prepares a reply message and sends the result to the appropriate client.<br>[Communication]: Clients receive the reply message from Main server and display it. Clients should keep active for further inputted queries, until the program is manually killed (Ctrl-C).<br>The format of list.txt is as follows.</p><p><backend server id></backend></p><p><department name>,<department name>,<department name></department></department></department></p><p><backend server id></backend></p><p><department name>,<department name><br>…<br>Example list.txt:</department></department></p><p>1<br>ECE,CS,Physics<br>2<br>Art,Cinema<br>3<br>Accounting,Business<br>…<br>Assumptions on the list.txt file:</p><p>Department names are letters. The length of a department name can vary from 1 letter to at most 20 letters. It may contain both capital and lowercase letters but does not contain any white spaces.<br>Backend server IDs are non-negative integer numbers.<br>There are at most 10 Backend server IDs in total.<br>There is no additional empty line(s) at the beginning or the end of the file. That is, the whole list.txt do not contain any empty lines.<br>For simplicity, there is no overlap of department names among different Backend servers.<br>For a given Backend server, there may be repeated department names.<br>list.txt will not be empty.<br>A Backend server will store at least one department names, and at most 100 department names.<br>An example list.txt is provided for you as a reference. Other list.txt will be used for grading, so you are advised to prepare your own files for testing purposes.</p><p>Source Code Files<br>Your implementation should include the source code files described below:</p><p>servermain: You must name your code file: servermain.c or servermain.cc or servermain.cpp (all small letters). Also, you must name the corresponding header file (if you have one; it is not mandatory) servermain.h (all small letters).<br>client: The name for this piece of code must be client.c or client.cc or client.cpp (all small letters) and the header file (if you have one; it is not mandatory) must be called client.h (all small letters). There should be only one client file!!!<br>Note: Your compilation should generate separate executable files for each of the components listed above.</p><p>Detailed Explanation<br>Phase 1 – Bootup<br>Main server program first boots up in this phase.</p><p>./servermain<br>While booting up, the servers must display a boot up message on the terminal. The format of the boot up message for Main server is given in the on-screen message table at the end of the document. As the boot up message indicates, Main server must listen on the appropriate port for incoming packets/connections.</p><p>As described in the previous section, the main server needs to read the text file and store the information. There are many ways to store the information, such as dictionary, array, vector, etc. You need to decide which format to use based on the requirement of the problem. You can use any format if it can give you correct results.</p><p>Once the main server programs have booted up, two client programs run. Each client displays a boot up message as indicated in the onscreen messages table. Note that the client code takes no input argument from the command line. The format for running the client code is:</p><p>./client<br>After running it, it should display messages to ask the user to enter a query department name (e.g., implement using std::cin):</p><p>./client<br>Client is up and running.<br>Enter Department Name:<br>For example, if the client 1 is booted up and asks for Backend server ID for department ECE, then the terminal displays like this:</p><p>./client<br>Client is up and running.<br>Enter Department Name: ECE<br>Main server has its unique port number specified in “PORT NUMBER ALLOCATION” section with the source and destination IP address as localhost/127.0.0.1. Clients use dynamic ports.</p><p>Clients and Main server are required to print out on-screen messages after executing each action as described in the “ON SCREEN MESSAGES” section. These messages will help with grading if the process did not execute successfully. Missing some of the on-screen messages might result in misinterpretation that your process failed to complete. Please follow the exact format when printing the on-screen messages.</p><p>Phase 2 – Query<br>After booting up, Clients establish TCP connections with Main server. After successfully establishing the connection, Clients send the input department name to Main server. Once this is sent, Clients should print a message in a specific format. Repeat the same steps for Client 2.</p><p>Main server then receives requests from two Clients. If the department name is not found, the Main server will print out a message (see the “On Screen Messages” section) and return to standby.</p><p>For a server to receive requests from several clients at the same time, the function fork() should be used for the creation of a new process. fork() function is used for creating a new process, which is called child process, which runs concurrently with the process that makes the fork() call (parent process).</p><p>For a TCP server, when an application is listening for stream-oriented connections from other hosts, it is notified of such events and must initialize the connection using accept(). After the connection with the client is successfully established, the accept() function returns a non-zero descriptor for a socket called the child socket. The server can then fork off a process using fork() function to handle connection on the new socket and go back to wait on the original socket. Note that the socket that was originally created, that is the parent socket, is going to be used only to listen to the client requests, and it is not going to be used for computation or communication between client and Main server. Child sockets that are created for a parent socket have the identical well-known port number and IP address at the server side, but each child socket is created for a specific client. Through using the child socket with the help of fork(), the server can handle the two clients without closing any one of the connections.</p><p>Once the Main server receives the queries, it decodes the queries and searches in the list with the received department name, finding the corresponding backend server ID.</p><p>Phase 3 – Reply<br>At the end of Phase 2, the Main server should have the result ready. The result is the Backend server ID that the department is associated with. The result should be sent back to the corresponding client using TCP. The client will print out the backend server ID and then print out the messages for a new request as follows:</p><p>…<br>Department ECE is associated with backend server 1.<br>—–Start a new query—-Enter Department Name:<br>See the ON SCREEN MESSAGES table for an example output table.</p><p>Port Number Allocation<br>The ports to be used by the client and the servers are specified in the following table:</p><p>Process    Dynamic Ports    Static Ports<br>Main Server        TCP(with client): 33xxx<br>Client 1    TCP<br>Client 2    TCP<br>NOTE: xxx is the last 3 digits of your USC ID. For example, if the last 3 digits of your USC ID are “319”, you should use the port: 33319 for the Main Server, etc. Port number of all processes print port number of their own.</p><p>Assumptions<br>You must start the processes in this order: Main-server, Client 1, and Client 2.<br>list.txt is created before your program starts.<br>If you need to have more code files than the ones that are mentioned here, please use meaningful names and all small letters and mention them all in your README file.<br>You can use code snippets from Beej’s guide to network programming in your project. However, you need to mark the copied part in your code and mention in README.<br>When you run your code, if you get the message “port already in use” or “address already in use”, please first check to see if you have a zombie process (see following). If you do not have such zombie processes or if you still get this message after terminating all zombie processes, try changing the static TCP port number corresponding to this error message (all port numbers below 1024 are reserved and must not be used). If you must change the port number, please do mention it in your README file and provide reasons for it.<br>You may create zombie processes while testing your codes, please make sure you kill them every time you want to run your code. To see a list of all zombie processes, try this command:<br>ps -aux | grep developer<br>Identify the zombie processes and their process number and kill them by typing at the command-line:</p><p>kill -9 <process number><br>Requirements<br>Do not hardcode the TCP port numbers that are to be obtained dynamically. Refer to Table 1 to see which ports are statically defined and which ones are dynamically assigned. Use getsockname() function to retrieve the locally bound port number wherever ports are assigned dynamically as shown below.<br>The host name must be hard coded as localhost (127.0.0.1) in all codes.<br>Your client should keep running and ask to enter a new request after displaying the previous result, until the TAs manually terminate it by Ctrl+C. The backend servers and the Main server should keep running and be waiting for another request until the TAs terminate them by Ctrl+C. If they terminate before that, you will lose some points for it.<br>All the naming conventions and the on-screen messages must conform to the previously mentioned rules.<br>You are not allowed to pass any parameter or value or string or character as a commandline argument.<br>All the on-screen messages must conform exactly to the project description. You should not add anymore on-screen messages. If you need to do so for the debugging purposes, you must comment out all the extra messages before you submit your project.<br>Using fork() to create a child process when a new TCP connection is accepted is mandatory and everyone should support it. This is useful when different clients are trying to connect to the same server simultaneously.<br>Please do remember to close the socket and tear down the connection once you are done using that socket.<br>Programming Platform and Environment<br>All your submitted code MUST work well on the provided virtual machine Ubuntu.<br>All submissions will only be graded on the provided Ubuntu. TA won’t make any updates or changes to the virtual machine. It’s your responsibility to make sure your code works well on the provided Ubuntu. “It works well on my machine” is not an excuse and we don’t care.<br>Your submission MUST have a Makefile. Please follow the requirements in the following “Submission Rules” section.<br>Programming Languages and Compilers<br>You must use only C/C++ on UNIX as well as UNIX Socket programming commands and functions. Here are the pointers for Beej’s Guide to C Programming and Network Programming (socket programming): <a href="http://www.beej.us/guide/bgnet/" target="_blank" rel="noopener">http://www.beej.us/guide/bgnet/</a> (If you are new to socket programming please do study this tutorial carefully as soon as possible and before starting the project) <a href="http://www.beej.us/guide/bgc/" target="_blank" rel="noopener">http://www.beej.us/guide/bgc/</a></process></p><p>You can use a Unix text editor like emacs or gedit to type your code and then use compilers such as g++ (for C++) and gcc (for C) that are already installed on Ubuntu to compile your code. You must use the following commands and switches to compile yourfile.c or yourfile.cpp. It will make an executable by the name of “yourfileoutput”.</p><p>gcc -o yourfileoutput yourfile.c<br>g++ -o yourfileoutput yourfile.cpp<br>Do NOT forget the mandatory naming conventions mentioned before!<br>Also, inside your code you may need to include these header files in addition to any other header file you used:</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p><p>#include &lt;stdio.h&gt;</p><p>#include &lt;stdlib.h&gt;</p><p>#include &lt;unistd.h&gt;</p><p>#include &lt;errno.h&gt;</p><p>#include &lt;string.h&gt;</p><p>#include &lt;netdb.h&gt;</p><p>#include &lt;sys/types.h&gt;</p><p>#include &lt;netinet/in.h&gt;</p><p>#include &lt;sys/socket.h&gt;</p><p>#include &lt;arpa/inet.h&gt;</p><p>#include &lt;sys/wait.h&gt;<br>Submission Rules<br>Along with your code files, include a README file and a Makefile. Submissions without README and Makefile will be subject to a serious penalty.</p><p>In the README file write:</p><p>Your Full Name as given in the class list.<br>Your Student ID.<br>Your platform (Ubuntu version).<br>What you have done in the request.<br>What your code files are and what each one of them does. (Please do not repeat the project description, just name your code files, and briefly mention what they do).<br>The format of all the messages exchanged.<br>Any idiosyncrasy of your project. It should say under what conditions the project fails, if any.<br>Reused Code: Did you use code from anywhere for your project? If not, say so. If so, say what functions and where they’re from. (Also identify this with a comment in the source code.)<br>About the Makefile<br>Makefile Tutorial:<br><a href="https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html" target="_blank" rel="noopener">https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html</a></p><p>TA will first compile all codes using make all. TA will then open 3 different terminal windows. On one terminal, start Main Server using commands ./servermain. Remember that main server should always be on once started. On the other two terminals, start the client as ./client. TA will check the outputs for multiple queries. The terminals should display the messages specified above.</p><p>Please follow these rules to submit your request:</p><p>Compress all your files including the README file into a single “tar ball” and call it: ee450_yourUSCusername.tar.gz (all small letters) e.g. your filename may be ee450_nanantha.tar.gz. Please make sure that your name matches the one in the class list.<br>Do NOT include anything not required in your tar.gz file, for example data file list.txt. Do NOT use subfolders. Any compressed format other than .tar.gz will NOT be graded!<br>Upload “ee450_yourUSCusername.tar.gz” to Blackboard -&gt; requests. After the file is submitted, you must click on the “submit” button to actually submit it. If you do not click on “submit”, the file will not be submitted.<br>Blackboard will keep a history of all your submissions. If you make multiple submissions, we will grade your latest valid submission. Submission after the deadline is considered as invalid.<br>Please consider all kinds of possible technical issues and do expect a huge traffic on the Blackboard website very close to the deadline which may render your submission or even access to Blackboard unsuccessful.<br>Please DO NOT wait till the last 5 minutes to upload and submit because some technical issues might happen, and you will miss the deadline. And a kind suggestion, if you still get some bugs one hour before the deadline, please make a submission first to make sure you will get some points for your hard work!<br>After submitting, please confirm your submission by downloading and compiling it on your machine. If the outcome is not what you expected, try to resubmit, and confirm again. We will only grade what you submitted even though it’s corrupted.<br>You have sufficient time to work on this project and submit it in time hence there is absolutely zero tolerance for late submissions! Do NOT assume that there will be a late submission penalty or a grace period. If you submit your project late (no matter for what reason or excuse or even technical issues), you simply receive a zero for the project.<br>Grading Criteria<br>Notice: We will only grade what is already done by the program instead of what will be done. For example, the TCP connection is established, and data is sent to the Main Server. But the result is not received by the Main server (no on-screen message) because Main server got some errors. Then you will lose some points for phase 1 even though it might work well.</p><p>Your project grade will depend on the following:</p><p>Correct functionality, i.e. how well your programs fulfill the requirements of the request, especially the communications through TCP sockets.<br>Inline comments in your code. This is important as this will help in understanding what you have done.<br>Whether your programs work as you say they would in the README file.<br>Whether your programs print out the appropriate error messages and results.<br>If your submitted codes do not even compile, you will receive 10 out of 100 for the project.<br>If your submitted codes compile using make but when executed, produce runtime errors without performing any tasks of the project, you will receive 15 out of 100.<br>If you forget to include the README file or Makefile in the project tar-ball that you submitted, you will lose 15 points for each missing file (plus you need to send the file to the TA in order for your project to be graded.)<br>If you add subfolders or compress files in the wrong way, you will lose 2 points each.<br>If your data file path is not the same as the code files, you will lose 5 points.<br>Do not submit datafile (three .txt files) used for test, otherwise, you will lose 10 points.<br>If your code does not correctly assign the TCP port numbers (in any phase), you will lose 10 points each.<br>Detailed points requests for each functionality will be posted after finishing grading.<br>The minimum grade for an on-time submitted project is 10 out of 100, the submission includes a working Makefile and a README.<br>There are no points for the effort or the time you spend working on the project or reading the tutorial. If you spend plenty of time on this project and it doesn’t even compile, you will receive only 10 out of 100.<br>Your code will not be altered in any way for grading purposes and however it will be tested with different inputs. Your designated TA runs your project as is, according to the project description and your README file and then checks whether it works correctly or not. If your README is not consistent with the project description, we will follow the project description.<br>Final Words<br>Start on this project early. Hard deadline is strictly enforced. No grace periods. No grace days. No exceptions.<br>In view of what is a recurring complaint near the end of a project, we want to make it clear that the target platform on which the project is supposed to run is the provided Ubuntu (16.04/22.04). It is strongly recommended that students develop their code on this virtual machine. In case students wish to develop their programs on their personal machines, possibly running other operating systems, they are expected to deal with technical and incompatibility issues (on their own) to ensure that the final project compiles and runs on the requested virtual machine. If you do development on your own machine, please leave at least three days to make it work on Ubuntu. It might take much longer than you expect because of some incompatibility issues.<br>Check Blackboard (Discussion Board &amp; Announcement) regularly for additional requirements and latest updates about the project guidelines. Any project changes announced on Blackboard are final and overwrites the respective description mentioned in this document.</p>]]></content>
    
    <summary type="html">
    
      和往年一样，使用Socket编程，完成多个Server/Client, 实现一个Student Performance Analysis System.
    
    </summary>
    
      <category term="C" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="Network Programming" scheme="cplusplusdaixie.com/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>CSCI561-Path-Planning-For-Skier</title>
    <link href="cplusplusdaixie.com/CSCI561-Path-Planning-For-Skier.html"/>
    <id>cplusplusdaixie.com/CSCI561-Path-Planning-For-Skier.html</id>
    <published>2023-03-16T03:17:43.000Z</published>
    <updated>2023-05-27T13:30:02.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h3><p>This is a programming request. You will be provided sample inputs and outputs (see below). Please understand that the goal of the samples is to check that you can correctly parse the problem definitions and generate a correctly formatted output. The samples are very simple and it should not be assumed that if your program works on the samples it will work on all test cases. There will be more complex test cases and it is your task to make sure that your program will work correctly on any valid input. You are encouraged to try your own test cases to check how your program would behave in some complex special case that you might think of. Since each request is checked via an automated A.I. script, your output should match the specified format exactly. Failure to do so will most certainly cost some points. The output format is simple and examples are provided below. You should upload and test your code on vocareum.com, and you will also submit it there. You may use any of the programming languages provided by vocareum.com.</p><p>Grading<br>Your code will be tested as follows: Your program should not require any command-line argument. It should read a text file called “input.txt” in the current directory that contains a problem definition. It should write a file “output.txt” with your solution to the same current directory. Format for input.txt and output.txt is specified below. End-of-line character is LF (since vocareum is a Unix system and follows the Unix convention).</p><p>The grading A.I. script will, 50 times:</p><p>Create an input.txt file, delete any old output.txt file.<br>Run your code.<br>Check correctness of your program’s output.txt file.<br>If your outputs for all 50 test cases are correct, you get 100 points.<br>If one or more test case fails, you get 100 - 2xN points where N is the number of failed test cases.<br>Note that if your code does not compile, or somehow fails to load and parse input.txt, or writes an incorrectly formatted output.txt, or no output.txt at all, or OuTpUt.TxT, you will get zero points. Anything you write to stdout or stderr will be ignored and is ok to leave in the code you submit (but it will likely slow you down). Please test your program with the provided sample files to avoid any problem.</p><h3 id="Project-description"><a href="#Project-description" class="headerlink" title="Project description"></a>Project description</h3><p>In this project, we look at the problem of path planning in a different way just to give you the opportunity to deepen your understanding of search algorithms and modify search techniques to fit the criteria of a realistic problem. To give you a context for how search algorithms can be utilized, we invite you to a Ski Resort. However, this is not a ski resort for the faint of heart. In this resort, there are no carved-out slopes and skiers must plan their own path to the lodge at the bottom of the mountain. The terrain is treacherous and the success of reaching the lodge depends on the level of the skier. We are invited to develop an algorithm to find the optimal path to reach our destination (and to a cup of hot cocoa) based on a particular objective.</p><p>The input of our program includes a topographical map of the mountain resort, plus some information about where our skier starts their journey, the position of the lodge and some other quantities that control the quality of the solution. The mountain can be imagined as a surface in a 3-dimensional space, and a popular way to represent it is by using a mesh-grid. The E value assigned to each cell represents the elevation of that location or whether it contains a tree we need to navigate around. At each cell, the skier can move to one of 8 possible neighbor cells: North, North-East, East, South-East, South, South-West, West, and North-West. Actions are assumed to be deterministic and error-free (the skier will always end up at the intended neighbor cell).</p><p>The skier cannot go over trees that are high enough to not have been covered with snow, nor go up a slope unless they have enough speed or stamina. Therefore, the value E in each cell can advise us on whether we can take that route (in case of tree and hills) or how much stamina moving into that cell will cost the skier if they move into it.</p><h3 id="Search-for-the-optimal-paths"><a href="#Search-for-the-optimal-paths" class="headerlink" title="Search for the optimal paths"></a>Search for the optimal paths</h3><p>Our task is to lead the skier from their start position to the ski lodge, where they can celebrate a good ski day with a cup of hot chocolate. If we had a very advanced skier that can go across any land without a problem, usually the shortest geometrical path is defined as the optimal path; however, since our skiers might be at different levels (we will define this as stamina), our objective is to avoid high trees as well as very steep areas, unless we have gained some momentum first. Thus, we want to minimize the path from A to B under those constraints. Our goal is, roughly, finding the shortest path among the safe paths. What defines the safety of a path is whether there are trees we can’t cross and the elevation of the cells along that path.</p><h3 id="Problem-definition-details"><a href="#Problem-definition-details" class="headerlink" title="Problem definition details"></a>Problem definition details</h3><p>You will write a program that will take an input file that describes the land, the starting point, potential lodges we can relax in, and some other characteristics for our skier. For each lodge location, you should find the optimal (shortest) safe path from the starting point to that target lodge. A path is composed of a sequence of elementary moves. Each elementary move consists of moving the skier from their current position to one of its 8 neighbors. To find the solution you will use the following algorithms:</p><p>Breadth-first search (BFS)<br>Uniform-cost search (UCS)<br>A<em> search (A</em>).<br>Your algorithm should return an optimal path, that is, with shortest possible journey cost. Journey cost is further described below and is not equal to geometric path length. If an optimal path cannot be found, your algorithm should return “FAIL” as further described below.</p><h3 id="Terrain-map"><a href="#Terrain-map" class="headerlink" title="Terrain map"></a>Terrain map</h3><p>We assume a terrain map for the mountain is specified as follows:</p><p>A matrix with H rows (where H is a strictly positive integer) and W columns (W is also a strictly positive integer) will be given, with a value E (an integer number, to avoid rounding problems) specified in every cell of the WxH map. If E is a negative integer, this means there is a tree of height |E| in that cell. If E is a positive integer, the value represents the elevation of that cell. For example:<br>10 20 -30<br>12 13 40<br>is a map with W=3 columns and H=2 rows, and each cell contains an E value (in arbitrary units). By convention, we will use North (N), East (E), South (S), West (W) as shown above to describe motions from one cell to another. In the above example, elevation E in the North-West (NW) corner of the map is 10, and it is 40 in the South-East (SE) corner, which means our skier will spend more stamina to move into the SE corner than the NW corner.</p><p>Every skier will have a stamina value S that determines whether they can climb up certain elevations. A move from E = 20 to E = 40 is only allowed if a skier’s stamina is higher than or equal to 40 - 20 = 20. Important Note: Stamina remains as a constant value.</p><p>Notice that there is a tree of height 30 in the NE corner. If a cell contains a tree, there are a few factors that determine whether a move into that cell is allowed:</p><p>If your current E is higher than or equal to tree height |E|, you are allowed to move into the cell. In this case, we imagine the tree is covered with snow of height |E|. Therefore, if our tree is height 30 as above, it would be allowed to move into that cell from the cell with elevation 40, but not from others.<br>If your current E is lower than the tree height |E|, a move into that cell is not allowed from your current cell. Note that your stamina (or momentum) does not change whether a move like this is allowed.<br>To help us distinguish between your three algorithm implementations, you must follow the following conventions for computing operational path length:</p><p>Breadth-first search (BFS)<br>In BFS, each move from one cell to any of its 8 neighbors counts for a unit path cost of 1. You do not need to worry about the elevation levels or about the fact that moving diagonally (e.g., NorthEast) is actually a bit longer than moving along the North to South or East to West directions. However, you still need to make sure the move is allowed by checking how steep the move is (depends on the skier’s stamina) or whether a tree is involved. Therefore, any allowed move from one cell to an adjacent cell costs 1.</p><p>Uniform-cost search (UCS)<br>When running UCS, you should compute unit path costs in 2D. Assume that cells’ center coordinates projected to the 2D ground plane are spaced by a 2D distance of 10 North-South and East-West. That is, a North or South or East or West move from a cell to one of its 4-connected neighbors incurs a unit path cost of 10, while a diagonal move to a neighbor incurs a unit path cost of 14 as an approximation to 10 when running UCS. You still need to make sure the move is allowed, in the same way you did for BFS.</p><p>A<em> search (A</em>).<br>When running A*, you will have modified rules for allowed moves AND you should compute an approximate integer unit path cost for each move according to how the elevation of the terrain changes. We will explain these rules using elevations Ecurr (current cell elevation), Enext (potential next cell elevation), and Eprev (previous cell elevation), as well as stamina S (given as input) and momentum M (defined below).</p><p>Allowed moves for A<em>: For running A</em>, we modify whether a move is allowed by considering momentum (M), that is whether we gained some speed by going down in elevation in our most recent move. If we are currently at a cell with Ecurr, whether we are allowed to go into a cell Enext is determined by whether our momentum M going from Eprev to Ecurr can assist us.</p><p>That is, when we are going down from Eprev to Ecurr and then up from Ecurr to Enext, momentum M is &gt; 0 and will possibly assist us in reaching cells with higher Enext elevations. If the next move is going up in elevation (Enext &gt; Ecurr), a move will only be allowed if (Enext &lt;= Ecurr + S + M). For BFS/UCS, this rule was (Enext &lt;= Ecurr + S). M = 0 initially at the starting position. Note how in all cases other than going down from Eprev to Ecurr and then up from Ecurr to Enext, momentum M is 0 according to the above definition. Note that momentum does not accumulate across multiple moves. Only the latest Eprev to Ecurr are considered when computing M.</p><p>If a tree is involved, the rules to determine whether a move is allowed do not change from the BFS/UCS cases. If you are allowed to move into a cell with a tree, it acts as land with elevation |E| from then on.</p><p>Path cost for A<em>: You should also compute an approximate integer unit path cost for each move for A</em>, which is now approximately 3D. The cost of a move is computed by considering both the horizontal move distance as in the UCS case (unit cost of 10 when moving North to South or East to West, and unit cost of 14 when moving diagonally) and the change in elevation levels of the land. The cost C for the move is hence defined as follows:</p><p>C = (Horizontal Move Distance) + (Elevation Change Cost)<br>Thus, intuitively, the elevation change cost is how much we are going uphill, possibly minus how much momentum we have from going downhill on the previous move.</p><p>Examples:</p><p>If our previous cell was Eprev = 20 and our current cell is Ecurr = 8, we have M = 12. If our stamina is 30, we are allowed to go into a cell with Enext up to Ecurr + M + S = 8 + 12 + 30 = 50. Assume we choose a cell with Enext = 25. If we’re moving diagonally, our path cost becomes: 14 (Move Distance) + (25 - 8 - 12 = 5) (Elevation Change Cost) = 19.</p><p>If our previous cell was Eprev = 20 and our current cell is Ecurr = 25, we have M = 0. If our stamina is 15, we are allowed to go into, for example, a cell with Enext = 35 (since 35 - 25 [ 0 + 15). If we’re moving South, our path cost becomes: 10 (Move Distance) + (35 - 25) (Elevation Change Cost) = 20.</p><p>If our current cell is Ecurr = 40 and our next cell is Enext = 15, the move is allowed since we are going downhill. If we’re moving East, our path cost becomes: 10 (Move Distance) + (0) (Elevation Change Cost) = 10.</p><p>If our previous cell was Eprev = 12 and our current cell is Ecurr = -5, we have M = 7, since we treat tree cells as |E| elevation once we move into them. If our stamina is 5, we can go into, for example, a cell with Enext = 30 (since 30 - 12 [ 7 + 5). If we’re moving SW, our path cost becomes: 14 (Move Distance) + (30 - 5 - 7) (Elevation Change Cost) = 32.</p><p>Remember: In addition to computing the path cost, you also need to design an admissible heuristic for A* for this problem.</p><p>Input: The file input.txt in the current directory of your program will be formatted as follows:</p><p>First line: Instruction of which algorithm to use, as a string: BFS, UCS or A*<br>Second line: Two strictly positive 32-bit integers separated by one space character, for “W H” the number of columns (width) and rows (height), in cells, of the map.<br>Third line: Two positive 32-bit integers separated by one space character, for “X Y” the coordinates (in cells) of the starting position for our skier. 0 X W-1 and 0 Y H-1 (that is, we use 0-based indexing into the map; X increases when moving East and Y increases when moving South; (0,0) is the North West corner of the map). Starting point remains the same for each of the N lodge sites below and will never contain a tree.<br>Fourth line: Positive 32-bit integer number for the stamina S of the skier which determines how advanced our skier is. S will be used to compute allowed moves if we’re moving into a non-tree cell.<br>Fifth line: Strictly positive 32-bit integer N, the number of lodges on the mountain.<br>Next N lines: Two positive 32-bit integers separated by one space character, for “X Y” the coordinates (in cells) of each lodge site. 0 X W-1 and 0 Y H-1 (that is, we again use 0-based indexing into the map). These N target lodge sites are not related to each other, so you will run your search algorithm on each lodge site and write the result to the output as specified below. We will never give you a lodge site that is the same as the starting point. They will never contain a tree.<br>Next H lines: W 32-bit integer numbers separated by any numbers of spaces for the M values of each of the W cells in each row of the map. Each number can represent the following cases:<br>E &gt;= 0, snowy mountain slope with elevation E<br>E &lt; 0, tree of height |E| that might be covered with snow depending on the elevation we approach it from<br>For example:</p><p>A*<br>8 6<br>4 4<br>5<br>2<br>2 1<br>6 3<br>-10 40 34 21 42 37 18   7<br>-20 10  5 27 -6  5  2   0<br>-30  8 17 -3 -4 -1  0   4<br>-25 -4 12 14 -1  9  6   9<br>-15 -9 46  6 25 11 31 -21<br>-5  -6 -3 -7  0 25 53 -42<br>In this example, on an 8-cells-wide by 6-cells-high grid, we start at location (4, 4) highlighted in green above, where (0, 0) is the North West corner of the map. The maximum stamina that the skier has is 5 (in arbitrary units which are the same as for the E values of the map). We have 2 possible lodge sites, at locations (2, 1) and (6, 3), both highlighted in red above. The map of the land is then given as six lines in the file, with eight E values in each line, separated by spaces. The negative values are trees.</p><p>Output: The file output.txt which your program creates in the current directory should be formatted as follows:</p><p>N lines: Report the paths in the same order as the lodge sites were given in the input.txt file. Write out one line per target lodge. Each line should contain a sequence of X,Y pairs of coordinates of cells visited by the skier to travel from the starting point to the corresponding lodge for that line. Only use a single comma and no space to separate X,Y and a single space to separate successive X,Y entries. If no solution was found (lodge was unreachable by the skier from the given starting point), write a single word FAIL in the corresponding line. Our skier needs a rescue in this case.<br>For example, output.txt may contain:</p><p>4,4 3,3 2,2 2,1<br>4,4 5,3 6,3<br>Here the first line is a sequence of five X,Y locations which trace the path from the starting point (4,4) to the first settling site (1,1). Note how both the starting location and the settling site location are included in the path. The second line is a sequence of three X,Y locations which trace the path from the starting point (4,4) to the second possible settling site (6,3).</p><p>With the starting point shown in green, the lodge sites in red, and each traversed cell in between in yellow. Note how one could have thought of a perhaps shorter path: 4,4 4,3 3,2 2,1 (general lower |E| values). But this was not allowed, since once we get to position 4,3 we are blocked by the tree in 3,2.</p><p>Notes and hints<br>Please name your program “request.xxx” where ‘xxx’ is the extension for the programming language you choose (“py” for python, “cpp” for C++11, and “java” for Java).<br>Likely (but no guarantee) we will create 15 BFS, 15 UCS, and 20 A* text cases.<br>Your program will be killed after some time if it appears stuck on a given test case, to allow us to grade the whole class in a reasonable amount of time. We will make sure that the time limit for a given test case is at least 10x longer than it takes for the reference algorithm written by the TA to solve that test case correctly.<br>There is no limit on input size, number of target lodges, etc. other than specified above (32-bit integers, etc.). However, you can assume that all test cases will take [ 30 secs to run on a regular laptop.<br>If several optimal solutions exist, any of them will count as correct.<br>Actual test cases used for grading will be significantly more complex than the 3 examples shown below (e.g., that could have 500x500 maps or bigger). The examples below are mostly to make sure you can correctly parse the inputs and produce correctly formatted outputs.<br>Example 1<br>For this input.txt:</p><p>BFS<br>2 2<br>0 0<br>5<br>1<br>1 1<br>0   -10<br>-10 -20<br>the only possible correct output.txt is:</p><p>FAIL<br>Example 2<br>For this input.txt:</p><p>UCS<br>5 3<br>0 0<br>5<br>1<br>4 1<br>1 5   1  -1 -2<br>6 2   4  10  3<br>9 8 -10 -20 40<br>one possible correct output.txt is:</p><p>0,0 1,0 2,0 3,0 4,1<br>Example 3<br>For this input.txt:</p><p>A*<br>5 4<br>0 1<br>3<br>1<br>4 3<br>20 2 1 -2 -10<br>-8 1 10 2 -20<br>9 -1 4 15  11<br>6 -5 1  1  -1<br>one possible correct output.txt is:</p><p>0,1 1,1 2,2 3,3 4,3</p>]]></content>
    
    <summary type="html">
    
      使用BFS, UCS和A*，解决滑雪最短路径问题。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="cplusplusdaixie.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>COMP420-Fork</title>
    <link href="cplusplusdaixie.com/COMP420-Fork.html"/>
    <id>cplusplusdaixie.com/COMP420-Fork.html</id>
    <published>2023-03-11T01:39:33.000Z</published>
    <updated>2023-05-27T13:29:18.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You are given a base code. You can compile the code and execute the solver by typing ./flow <puzzlename>. You are going to have to program your solver in the file search.c. Look at the file and implement the missing part in the function called game_dijkstra_search. Once you implement the search algorithm, gProject Deliverables<br>Your project deliverables are to be posted to CUNY Blackboard using the Project 1 link.</puzzlename></p><p>1) Only one source code file as follows with filename format showing your last name and student id: MYLASTNAME_MYSTUDENTID.c<br>a) At top of the file: your full name and student id in comments, for example: // MYFIRSTNAME MYLASTNAME MYSTUDENTID<br>b) In-line code comments no fewer than every 5 lines of code which describe your algorithmic steps in plain English language.<br>That is, I do not want to see literal syntax transcriptions of the code.<br>2) An MS Word or PDF document with a write-up of your software design and an explanation of the issues encountered and resolved. (1 page)<br>The write-up is essay style with no bullet points nor itemized lists nor source code nor pseudo-code listings.<br>Filename format is MYLASTNAME_MYSTUDENTID.doc (or pdf). You are to use Times New Roman Font with font size = 11 and 1.5 line spacing.<br>3) Text file of program output (text files only, that is, no graphics files from copying screen output) according to output format in<br>Project Instructions further below for your program execution. I will provide sample input files and sample program execution commands on CUNY Blackboard for which program output is to be submitted.<br>4) Please please ensure that your program will compile and link using the GNU C compiler. I will compile and link your source code to generate an executable file using the following command:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gcc</span> <span class="selector-tag">MYLASTNAME_MYSTUDENTID</span><span class="selector-class">.c</span> <span class="selector-tag">-o</span> <span class="selector-tag">MYLASTNAME_MYSTUDENTID</span><span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure><h3 id="Project-Specification"><a href="#Project-Specification" class="headerlink" title="Project Specification"></a>Project Specification</h3><p>In your first project you will design and implement a program that, when executed, has both a parent process and a child process. You use the fork() system call to create a child process. The exec() system call is NOT to be used in this project. The parent and child utilize only two IPC resources between them: one POSIX message queue and one ordinary pipe.<br>Your program execution and command line arguments follows this syntax to provide counts for each input given on the command line:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./MYLASTNAME_MYSTUDENTID.exe</span> [OPTION]<span class="string">...</span> BUFFER_SIZE [INPUT FILE]<span class="string">...</span></span><br></pre></td></tr></table></figure></p><p>The OPTIONS are the following. If none are specified on the command line then -ncb is used by default.</p><p>-n prints the newline count for each input<br>-c prints the word counts for each input<br>-b prints the character counts for each input<br>-m prints the maximum line length for each input<br>BUFFER_SIZE is a number between 32 and 256 inclusively and must be specified.</p><p>[INPUT FILE] contains a list of input files. If no input file is specified, then myinpfile.txt is used.</p><h3 id="Project-Instructions"><a href="#Project-Instructions" class="headerlink" title="Project Instructions"></a>Project Instructions</h3><p>Your program source code must be provided in the C programming language.<br>Your program must use the POSIX system file I/O and process management system calls which were discussed in lectures and reading requests as well as those for POSIX message queues and ordinary pipes.<br>You are NOT permitted to use any C standard I/O library functions nor string library functions.<br>Only the child process will read the input as given by [INPUT FILE]. The child will write the input file contents in chunks as indicated by BUFFER_SIZE to the pipe. The parent will read this content from the pipe in chunks as indicated by BUFFER_SIZE.<br>The parent process will compute the counts as indicated by [OPTION] for each input file separately from any other input file.<br>The parent process will send each count (as indicated by [OPTION]) for each input file as its own POSIX message into the POSIX message queue. Therefore, as an example, if -ncbm is indicated with three input files on the command line, the parent process will send at least 4 * 3 = 12 messages into the POSIX message queue.<br>The child process will receive the messages from (6) above in the POSIX message queue and will write the following to standard output in the following format according to each [OPTION] requested for each input file [INPUT FILE] where NEWLINE_COUNT indicates the newline count, WORD_COUNT is the word count, CHAR_COUNT is the character count, and MAX_LINE is the maximum line length.<br>After all input files have been processed and the standard output in (7) has been generated, the parent and child processes will terminate. The parent will print its last output to standard output as follows:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Parent:</span> Terminating.\n</span><br></pre></td></tr></table></figure><p>Similarly, The child will print its last output to standard output as follows:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Child:</span> Terminating.\n</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      使用Fork系统调用，完成父子进程创建。
    
    </summary>
    
      <category term="C" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="Operating System" scheme="cplusplusdaixie.com/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP9012-Flow-Puzzle</title>
    <link href="cplusplusdaixie.com/COMP9012-Flow-Puzzle.html"/>
    <id>cplusplusdaixie.com/COMP9012-Flow-Puzzle.html</id>
    <published>2023-03-08T00:27:24.000Z</published>
    <updated>2023-05-27T13:29:18.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You are given a base code. You can compile the code and execute the solver by typing ./flow <puzzlename>. You are going to have to program your solver in the file search.c. Look at the file and implement the missing part in the function called game_dijkstra_search. Once you implement the search algorithm, go to the file called extensions.c and implement the function called game_check_deadends</puzzlename></p><p>You are given the structure of a node in node.<em>files, and also a priority queue queues.</em> implementation. Look into the engine.<em> and utils.</em> files to know about the functions you can call to perform the search.</p><p>In your final submission, you are free to change any file, but make sure the command line options remain the same.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>In order to execute your solver use the following command:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./flow [<span class="keyword">options</span>] <span class="symbol">&lt;puzzleName1&gt;</span> ... <span class="symbol">&lt;puzzleNameN&gt;</span></span><br></pre></td></tr></table></figure></p><p>for example:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/flow puzzles/</span>regular_5x5_01.txt</span><br></pre></td></tr></table></figure></p><p>Will run the solver for the regular 5 by 5 puzzle, and report if the search was successful, the number of nodes generated and the time taken. if you use flag -q (quiet) it will report the solutions more concisely. This option can be useful if you want to run several puzzles at once and study their performance.</p><p>If you append the option -A it will animate the solution found. If you append the option -d it will use the dead-end detection mechanism that you implemented. Feel free to explore the impact of the other options, specifically the ordering in which the colors are explored.</p><p>By default, the color that has fewer free neighbors (most constrained), is the one that is going to be considered first.</p><p>All the options can be found if you use option -h:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">./flow</span> -h</span><br><span class="line">usage: flow_solver [ OPTIONS ] BOARD1.txt</span><br><span class="line">BOARD2.txt [ <span class="string">...</span> ] ]</span><br><span class="line"></span><br><span class="line">Display options:</span><br><span class="line">  -q, <span class="params">--quiet</span>             Reduce output</span><br><span class="line">  -d, <span class="params">--diagnostics</span>       Print diagnostics when search unsuccessful</span><br><span class="line">  -A, <span class="params">--animation</span>         Animate solution</span><br><span class="line">  -F, <span class="params">--fast</span>              Speed up animation 4x</span><br><span class="line">  -C, <span class="params">--color</span>             Force use of ANSI color</span><br><span class="line">  -S, <span class="params">--svg</span>               Output final state to SVG</span><br><span class="line"></span><br><span class="line">Node evaluation options:</span><br><span class="line">  -d, <span class="params">--deadends</span>          dead-end checking</span><br><span class="line"></span><br><span class="line">Color ordering options:</span><br><span class="line">  -r, <span class="params">--randomize</span>         Shuffle order of colors before solving</span><br><span class="line">  -c, <span class="params">--constrained</span>       Disable order by most constrained</span><br><span class="line"></span><br><span class="line">Search options:</span><br><span class="line">  -n, <span class="params">--max-nodes</span> N       Restrict storage to N nodes</span><br><span class="line">  -m, <span class="params">--max-storage</span> N     Restrict storage to N MB <span class="params">(default 1024)</span></span><br><span class="line"></span><br><span class="line">Help:</span><br><span class="line">  -h, <span class="params">--help</span>              See this <span class="keyword">help</span> text</span><br></pre></td></tr></table></figure><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>Your solver will print the following information if option -q is used:</p><p>Puzzle Name<br>SearchFlag (see utils.c, line 65-68 to understand the flags)<br>Total Search Time, in seconds<br>Number of generated nodes<br>A final Summary<br>For example, the output of your solver ./flow -q ../puzzles/regular_* could be:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">../puzzles/regular_5x5_01.txt s <span class="number">0.000</span> <span class="number">18</span></span><br><span class="line">../puzzles/regular_6x6_01.txt s <span class="number">0.000</span> <span class="number">283</span></span><br><span class="line">../puzzles/regular_7x7_01.txt s <span class="number">0.002</span> <span class="number">3</span>,<span class="number">317</span></span><br><span class="line">../puzzles/regular_8x8_01.txt s <span class="number">0.284</span> <span class="number">409</span>,<span class="number">726</span></span><br><span class="line">../puzzles/regular_9x9_01.txt s <span class="number">0.417</span> <span class="number">587</span>,<span class="number">332</span></span><br><span class="line"><span class="number">5</span> total s <span class="number">0.704</span> <span class="number">1</span>,<span class="number">000</span>,<span class="number">676</span></span><br></pre></td></tr></table></figure></p><p>These numbers depend on your implementation of the search, the ordering you use, and whether you prune dead-ends. If we use dead-end pruning ./flow -q -d ../puzzles/regular_* we get the following results<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">../puzzles/regular_5x5_01.txt s <span class="number">0.000</span> <span class="number">17</span></span><br><span class="line">../puzzles/regular_6x6_01.txt s <span class="number">0.000</span> <span class="number">254</span></span><br><span class="line">../puzzles/regular_7x7_01.txt s <span class="number">0.001</span> <span class="number">2</span>,<span class="number">198</span></span><br><span class="line">../puzzles/regular_8x8_01.txt s <span class="number">0.137</span> <span class="number">182</span>,<span class="number">136</span></span><br><span class="line">../puzzles/regular_9x9_01.txt s <span class="number">0.210</span> <span class="number">279</span>,<span class="number">287</span></span><br></pre></td></tr></table></figure></p><p>5 total s 0.349 463,892<br>Remember that in order to get full marks, your solver has to solve at least the regular puzzles.</p><h3 id="Deliverables-1"><a href="#Deliverables-1" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Deliverable 1 - Dijkstra Solver source code<br>You are expected to hand in the source code for your solver, written in C. Obviously, your source code is expected to compile and execute flawlessly using the following makefile command:</p><p>Remember to compile using the optimization flag gcc -O3 for doing your experiments, it will run twice as quickly as compiling with the debugging flag gcc -g (see Makefile). The provided Makefile compiles with the optimization flag by default, and with the debugging flag if you type make debug=1. For the submission, please do not remove the -g option from your Makefile, as our scripts need this flag for testing. Your program must not be compiled under any flags that prevent it from working under gdb or valgrind.</p><p>Your implementation should be able to solve the regular puzzles provided. To solve the extreme puzzles, you’ll need further enhancements that go beyond the time for this request, but feel free to challenge yourself if you finish early and explore how you would solve the extreme puzzles.</p><h3 id="Deliverable-2-Experimentation"><a href="#Deliverable-2-Experimentation" class="headerlink" title="Deliverable 2 - Experimentation"></a>Deliverable 2 - Experimentation</h3><p>Besides handing in the solver source code, you’re required to provide a table reporting at least the execution time and number of generated nodes with and without dead-end detection. Include in the table only the puzzles that your solver finds a solution to.</p><p>Plot figures, where the x-axis can be the number of free cells at the start, or the size of the grid, and the y-axis is either the number of generated states or solution time.</p><p>Explain your results using your figures and tables. Which complexity growth does your data show? What’s the computational benefit of the dead-end detection, does it decrease the growth rate? Answer concisely.</p><p>If you decide to implement any further optimization beyond the instructions of the request, or change the default arguments such as allowed memory or color ordering, please discuss their impact on the experimentation section as well.</p><p>Please include your Username, Student ID and Full Name in your Document.</p><p>My recommendation is that you generate the plots using any standard Python visualization library. See for example Seaborn or Matplotlib. Otherwise, there’s always the old-school excel/open-office/google-sheets method.</p>]]></content>
    
    <summary type="html">
    
      实现程序Flow, 在规定时间内得到Puzzle的解，算法使用改进过的Dijkstra.
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Data Structure" scheme="cplusplusdaixie.com/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="cplusplusdaixie.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CAB403-Car-Park-Management-System-and-Simulator</title>
    <link href="cplusplusdaixie.com/CAB403-Car-Park-Management-System-and-Simulator.html"/>
    <id>cplusplusdaixie.com/CAB403-Car-Park-Management-System-and-Simulator.html</id>
    <published>2023-03-01T06:38:48.000Z</published>
    <updated>2023-05-27T13:29:22.588Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Your task is to develop and submit three pieces of software relating to a car park management system:</p><p>A car park management system, henceforth referred to as the ‘manager’ - software that takes care of the automated aspects of running a car park, interacting with license plate readers, boom gates and electronic displays to ensure smooth operation and accurate reporting of the car park.<br>A car park simulator, henceforth referred to as the ‘simulator’ - software that simulates all of the aforementioned pieces of hardware such that the manager can be tested without physical access to the actual car park systems. This also includes simulating the movement of vehicles around the car park.<br>A fire alarm system for the car park, henceforth known as the ‘fire alarm system’ software that interacts with temperature sensors within the car park and follows required procedures if a fire is detected. This component is regarded as a safety critical system, and while a functioning one has already been implemented (firealarm.c, available via Blackboard), your task is to assess it, write a report on its suitability as a safety-critical software component, and if necessary, fix or rewrite it.<br>These three pieces of software are all separate programs. They must be written in standard C (no other programming languages are permitted) and be compilable and runnable on the provided MX Linux virtual machine as-is. You will need to make use of the POSIX threads library (pthreads), POSIX shared memory and other libraries that you have used in the CAB403 practical classes to complete this request.</p><p>To simulate the interactions between the manager and the physical hardware present in the car park, a shared memory segment is used by the three programs to communicate- for example, the manager will check the status of the license plate recognition (LPR) sensors and control boom gates and digital signs by accessing this segment. A detailed description of the structure of this shared memory segment is available in the section titled ‘Shared memory’.</p><h3 id="What-you-need-to-submit"><a href="#What-you-need-to-submit" class="headerlink" title="What you need to submit"></a>What you need to submit</h3><p>You are required to submit, via Blackboard, a .zip archive (you can create these in MX Linux either by selecting the files in the GUI, right-clicking and choosing ‘Compress’, or by using the command line program ‘zip’) consisting of the following:</p><p>The C source code (may consist of .c and .h files) of your manager, simulator and fire alarm systems.<br>A Makefile which will automatically build the above three programs upon typing<br>‘make’ using the warning flags -Wall -Wextra -Werror, to ensure that all errors are enabled and that warnings are treated as errors and do not permit compilation (note that the provided firealarm.c will not compile under these conditions due to warnings)<br>Other files needed by your system (e.g. plates.txt)<br>A report (in .docx or .pdf format - MX Linux comes with LibreOffice Writer which can be used to create this) consisting of the following information:<br>The names and student numbers of everyone in your team<br>A statement of completeness describing how much of the request has been completed and any issues (e.g. known bugs)<br>A statement of contribution detailing what each member of your team contributed to the project<br>An assessment of the safety-critical fire alarm system component. This in turn will consist of:<br>Identification of safety-critical standards that the provided firealarm.c fails (e.g..from NASA’s The Power of 10, ISO 26262-6:2018, MISRA C)<br>Description of the approach you have taken to fix the problems (e.g. editing firealarm.c, completely rewriting it etc.)<br>Potential safety-critical concerns and reservations of your new implementation (for example, some safety-critical software guidelines cannot be followed perfectly - list these and how you have mitigated the concerns they pose.)<br>You are also required to submit a video demonstration, which should be no longer than 5 minutes in length, demonstrating your system in action. You can either upload a video file as part of your submission to Blackboard or upload it to e.g. YouTube and submit a link.</p><h3 id="Car-park-structure"><a href="#Car-park-structure" class="headerlink" title="Car park structure"></a>Car park structure</h3><p>The simulator and manager work with an abstract model of a multi-level car park with 1-5 entrances, 1-5 exits and 1-5 levels, each of which can contain some maximum number of vehicles. For the purposes of this exercise, we will assume a car park of 5 entrances, 5 exits and 5 levels, with a capacity of 20 vehicles per level; however, you are required to include constants / preprocessor #defines to allow these to be easily configured. This way the client will be able to easily recompile the software to work with different car park configurations.</p><p>Cars seeking to gain entry to the car park queue up at one of the entrances. Once a car appears at the front of the queue, its license plate will be read by an LPR. The manager will then look that car up in its internal list of vehicles with permission to enter the park, and if this is granted, it will display the number referring to the level of the car park that the car should park at on the digital sign above the entrance and raise the boom gate. Each level of the car park also has an LPR detecting cars when they enter and exit. This is used to determine where cars are within the car park for the purpose of ensuring incoming cars are only directed towards levels where there is free space available. Cars seeking to leave the car park will head to one of the exits. Once they are detected by an exit LPR, the boom gate at the exit will open, allowing the car to leave.</p><p>It is assumed that, in this abstract model of a car park, none of the entrances or exits have any special affinity with each other or with the different levels of the car park, from a location / proximity perspective. They are simply used to allow more cars to enter/exit the car park at a time.</p><p>The roles of the manager:</p><p>Monitor the status of the LPR sensors and keep track of where each car is in the car park<br>Tell the boom gates when to open and when to close (the boom gates are a simple piece of hardware that can only be told to open or close, so the job of automatically closing the boom gates after they have been open for a little while is up to the manager)<br>Control what is displayed on the information signs at each entrance<br>As the manager knows where each car is, it is the manager’s job to ensure that there is room in the car park before allowing new vehicles in (number of cars [ number of levels * the number of cars per level). The manager also needs to keep track of how full the individual levels are and direct new cars to a level that is not fully occupied<br>Keep track of how long each car has been in the parking lot and produce a bill once the car leaves.<br>Display the current status of the parking lot on a frequently-updating screen, showing how full each level is, the current status of the boom gates, signs, temperature sensors and alarms, as well as how much revenue the car park has brought in so far.<br>The roles of the fire alarm system:</p><p>Monitor the status of temperature sensors on each car park level<br>When a fire is detected, activate alarms on every car park level, open all boom gates and display an evacuation message on the information signs<br>The roles of the simulator:</p><p>Simulate cars:<br>A simulated car receives a random license plate (sometimes on the list, sometimes not) and queues up at a random entrance to the car park, triggering an LPR when it reaches the front of the queue.<br>After triggering the LPR, the simulated car will watch the digital sign. If the sign contains a number, it will keep note of that number (the level where the car has been instructed to park) and then wait for the boom gate to open. If the sign contains any other character, the simulated car will just leave the queue and drive off, disappearing from the simulation.<br>After the boom gate opens, the car will drive to the level it was instructed to drive to, triggering the level LPR in the process.<br>The car will then park for a random amount of time.<br>After the car has finished parking, it will leave, setting off the level LPR again. It will then drive towards a random exit. Upon reaching that exit, it will set off the exit LPR and wait for the boom gate to open. Once the boom gate is open, it will leave the car park and disappear from the simulation.<br>Simulate boom gates:<br>Boom gates take a certain amount of time to open and close. Once the manager has instructed a closed boom gate to open or an open boom gate to close, the simulator’s job is to wait for a small amount of time before putting the boom gate into the open/closed state.<br>Simulate temperature:<br>Each level of the car park has a temperature sensor, sending back the current temperature (in degrees celsius). The simulator will frequently update these values with reasonable random values. The simulator should also be able to simulate a fire by generating higher values, in order to test / demonstrate the fire alarm system.</p><h3 id="Timings"><a href="#Timings" class="headerlink" title="Timings"></a>Timings</h3><p>Things take a long time to happen in a real car park - cars take a substantial amount of time to actually move around, gates take a while to open and so forth. For the purpose of this exercise, and to make running simulations less time consuming, the simulator and manager operate within an accelerated timescale, with delays measured in milliseconds. This means that it only takes a small amount of time for the car park to be occupied by many cars. You will need to use an appropriate high resolution sleep function (usleep() or nanosleep()) in order to invoke the appropriate delays. It is suggested that you create your own function that sleeps for a certain number of milliseconds. You can then, for example, apply a multiplier to the sleep duration calculated within that function in order to experiment with different timescales (for the purposes of debugging.) Your submitted code should use the timings indicated below (or similar timings), however.</p><p>Note that many of these delays will happen simultaneously - for example, the time that is spent by a simulated car moving around only delays the progress of that particular car, not other cars etc. For this reason it is highly recommended that pthreads is used, which will greatly simplify the work required to implement the simulator and manager.</p><h3 id="Simulator-timings"><a href="#Simulator-timings" class="headerlink" title="Simulator timings"></a>Simulator timings</h3><p>Every 1-100ms*, a new car will be generated by the simulator with a random license plate, and will start moving towards a random entrance.<br>Note that when a range is listed, this means the simulator needs to generate a random number in that range (e.g. between 1 and 100 inclusively) and then wait for that length of time. Note that we are not marking you based on the statistical correctness of your choice of random number generator - the stdlib.h rand() function is fine, for example (but keep in mind that you should protect calls to rand() with a mutex as rand() accesses a global variable containing the current random seed.).</p><p>Once a car reaches the front of the queue, it will wait 2ms before triggering the entrance LPR.<br>Boom gates take 10ms to fully open and 10ms to fully close.<br>After the boom gate is open, the car takes another 10ms to drive its parking space (triggering the level LPR for the first time).<br>Once parked, the car will wait 100-10000ms before departing the level (and triggering the level LPR for the second time).<br>It then takes the car a further 10ms to drive to a random exit and trigger the exit LPR.<br>Every 1-5ms, the temperature on each level will change to a random value</p><h3 id="Manager-timings"><a href="#Manager-timings" class="headerlink" title="Manager timings"></a>Manager timings</h3><p>After a boom gate has been fully opened, it will start to close 20ms later. Cars entering the car park will just drive in if the boom gate is fully open after they have been directed to a level (however, if the car arrives just as the boom gate starts to close, it will have to wait for the boom gate to fully close, then fully open again.)<br>Cars are billed based on how long they spend in the car park (see the Billing section for more information.)</p><h3 id="Fire-alarm-timings"><a href="#Fire-alarm-timings" class="headerlink" title="Fire alarm timings"></a>Fire alarm timings</h3><p>The fire alarm system will collect temperature readings every 2ms for the purpose of determining if a fire has occurred<br>Once the fire alarm system is active, the character ‘E’ will be displayed on every digital sign in the parking lot. 20ms later, they will all show ‘V’, then ‘A’, ‘C’, ‘U’, ‘A’, ‘T’, ‘E’, ‘ ‘, then looping back to the first E again.</p><h3 id="Permitted-vehicle-identification"><a href="#Permitted-vehicle-identification" class="headerlink" title="Permitted vehicle identification"></a>Permitted vehicle identification</h3><p>When the manager is run, it will read a file in the current directory called plates.txt - this file will contain the license plates of permitted vehicles, one per line, like this:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">029</span>MZH</span><br><span class="line"><span class="number">088</span>FSB</span><br><span class="line"><span class="number">174</span>JJD</span><br><span class="line"><span class="number">376</span>DDS</span><br><span class="line"><span class="number">451</span>HLR</span><br><span class="line"><span class="number">481</span>WPQ</span><br><span class="line"><span class="number">549</span>QHD</span><br><span class="line"><span class="number">594</span>QVK</span><br><span class="line"><span class="number">688</span>QHN</span><br><span class="line"><span class="number">931</span>KQD</span><br></pre></td></tr></table></figure><p>(A longer example plates.txt file is available on Blackboard.)</p><p>Whenever a vehicle triggers an entrance LPR, its license plate should be checked against the contents of this file. For performance / scalability reasons, the license plates need to be read into a hash table, which will then be checked when new vehicles show up. Using the hash table exercise from Practical 3 as a base is recommended, although not required.</p><p>If a vehicle shows up with a license plate not in plates.txt, the digital sign will display the character ‘X’ and the boom gate will not open for that vehicle.</p><p>In the simulator, cars should be generated with a random license plate. To ensure a good mix of permitted and not permitted cars, 50% of the time a new car should be generated with a random valid license plate (that is not currently in use by a car being simulated) and 50% of the time it should be generated with a random license plate not on the list. Once a car leaves the simulation, its license plate becomes available for reuse.</p><h3 id="Billing"><a href="#Billing" class="headerlink" title="Billing"></a>Billing</h3><p>Cars are billed at a rate of 5 cents for every millisecond they spend in the car park (that is, the total amount of time between the car showing up at the entrance LPR and the exit LPR). This is tracked per car and the amount of time, shown in dollars and cents, is written next to the car’s license plate into a file when the car leaves (note that cars that are turned away at the entrance attract no such fee - the fee is only for cars that are accepted into the car park.) The manager writes these, line at a time, to a file named billing.txt, each time a car leaves the car park. The billing.txt file will be created by the manager if it does not already exist, and must be opened in append mode, which means that future lines will be written to the end of the file if the file already exists (this will avoid the accidental overwriting of old billing records). Here is an example billing file:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">029</span>MZH $<span class="number">8.25</span></span><br><span class="line"><span class="number">088</span>FSB $<span class="number">20.80</span></span><br><span class="line"><span class="number">174</span>JJD $<span class="number">14.95</span></span><br><span class="line"><span class="number">376</span>DDS $<span class="number">32.50</span></span><br><span class="line"><span class="number">451</span>HLR $<span class="number">11.00</span></span><br></pre></td></tr></table></figure></p><h3 id="Fire-detection"><a href="#Fire-detection" class="headerlink" title="Fire detection"></a>Fire detection</h3><p>The fire alarm system utilises temperature sensors to determine if a fire has occurred. Each temperature sensor (there is one on each level) returns a signed 16-bit integer containing the current temperature it is picking up. Because of the potential for noise and incorrect values being generated by the temperature sensor, the fire alarm system will smooth the data in the following way:</p><p>For each temperature sensor, the monitor will store the temperature value read from that sensor every 2 milliseconds. Out of the 5 most recent temperature readings, the median temperature will be recorded as the ‘smoothed’ reading for that sensor.<br>The 30 most recent smoothed temperatures are then analysed (before 30 smoothed temperatures have been read, the fire alarm system cannot use this sensor to detect the presence of a fire.<br>The fire alarm system then uses two approaches to determine the presence of a fire- fixed temperature and rate of rise. If either of these approaches detects a fire, the alarm is triggered.</p><h3 id="Fixed-temperature-fire-detection"><a href="#Fixed-temperature-fire-detection" class="headerlink" title="Fixed temperature fire detection"></a>Fixed temperature fire detection</h3><p>Out of the 30 most recent smoothed temperatures produced by a sensor, if 90% of them are 58C or higher, the temperature is considered high enough that there must be a fire.</p><h3 id="Rate-of-rise-fire-detection"><a href="#Rate-of-rise-fire-detection" class="headerlink" title="Rate-of-rise fire detection"></a>Rate-of-rise fire detection</h3><p>Out of the 30 most recent smoothed temperatures produced by a sensor, if the most recent temperature is 8C (or more) hotter than the 30th most recent temperature, the temperature is considered to be growing at a fast enough rate that there must be a fire.</p><p>For testing and demonstration purposes, your simulator should have the ability to generate both of these scenarios, to ensure that both successfully trigger the alarm.</p><h3 id="Shared-memory"><a href="#Shared-memory" class="headerlink" title="Shared memory"></a>Shared memory</h3><p>The three processes communicate via a shared memory segment named PARKING (all caps). The PARKING segment is 2920 bytes in size. The simulator needs to create this segment when it is first started (the segment may already exist from a previous run, in which case the simulator creates it again, overwriting the old one. The manager and fire alarm system both open the existing PARKING segment when they are started (and will print an error message and exit if it is not present.) The segment contains space for 5 parking lot entrances, 5 exits and 5 levels.</p><h3 id="Inter-process-communication"><a href="#Inter-process-communication" class="headerlink" title="Inter-process communication"></a>Inter-process communication</h3><p>Most of the values in the shared memory structure are accompanied by a mutex and a condition variable. These must be initialised by the simulator when the shared memory segment is created. Note that these mutexes and condition variables are accessed by different processes, which means they need to be process shared. By default, mutexes and condition variables are PTHREAD_PROCESS_PRIVATE, which means pthread_mutexattr_setpshared() and pthread_condattr_setpshared() need to be used to make these PTHREAD_PROCESS_SHARED, which will allow them to work correctly across multiple processes.</p><p>Mutexes are used to protect the integrity of shared data. The normal approach before accessing most values in the shared memory structure is to lock the associated mutex, read/write the value, then unlock the associated mutex.</p><p>Condition variables are used to allow threads to wait for a particular value to change in order to avoid busywaiting. Busywaiting must be avoided in this request where possible for a description of busywaiting, see Appendix B. When changing a value, the associated condition variable should be broadcast to, allowing threads that are waiting on that value to wake up and check it.</p><p>The process for waiting on a particular shared memory variable is usually the following:</p><p>The thread that is waiting on a value (e.g. for a boom gate to switch to its ‘open’ state) first acquires the mutex associated with that value.<br>The thread then waits on the associated condition variable, passing the mutex as the second parameter. This will also unlock the mutex while the thread is waiting.<br>Once the value has been changed and the condition variable broadcast to, the thread will wake up, re-acquire the mutex and check the value again, before making a decision about whether to continue waiting or not.<br>Finally, the thread will unlock the mutex and continue.<br>The temperature sensors and alarms are not protected by mutexes. Writes to them need to be atomic and the ‘volatile’ keyword in C should be used to ensure that reads and writes reflect the true contents of the shared memory segment.</p><h3 id="Shared-memory-structure"><a href="#Shared-memory-structure" class="headerlink" title="Shared memory structure"></a>Shared memory structure</h3><p>Bytes 0-1439 contain space for 5 entrances, each 288 bytes large. Each entrance consists of the following:</p><p>A license plate recognition sensor (96 bytes, at bytes 0-95)<br>A boom gate (96 bytes, at bytes 96-191)<br>An information sign (96 bytes, at bytes 192-287)<br>(Definitions for each of these appear later in this document, as some are reused in different areas.)</p><p>Bytes 1440-2399 contain space for 5 exits, each 192 bytes large. Each exit consists of the following:</p><p>A license plate recognition sensor (96 bytes, at bytes 0-95)<br>A boom gate (96 bytes, at bytes 96-191)<br>Bytes 2400-2919 contain space for 5 levels, each 104 bytes large. Each level consists of the following:</p><p>A license plate recognition sensor (96 bytes, at bytes 0-95)<br>A temperature sensor (2 bytes, at bytes 96-97)<br>An alarm (1 byte, at byte 98)<br>Padding (5 bytes, at bytes 99-103), not used for anything<br>Each license plate recognition (LPR) sensor is 96 bytes large and consists of the following:</p><p>A pthread_mutex_t mutex lock (40 bytes, at bytes 0-39)<br>A pthread_cond_t condition variable (48 bytes, at bytes 40-87)<br>A license plate, 6 characters long (6 bytes, at bytes 88-93)<br>Padding (2 bytes, at bytes 94-95), not used for anything<br>Vehicles pass in front of the various LPR sensors at different times depending on where the LPR is located:</p><p>The LPR at the entrance will detect a vehicle approaching the boom gate<br>The LPR at the exit will detect a vehicle approaching the exit boom gate<br>The LPR on each level of the parking lot will detect any vehicle entering or exiting that level.<br>It can be assumed that, in a normal case, a vehicle will appear on LPRs 4 times- once at an entrance, twice on the floor the vehicle parks on, and once when exiting the parking lot. When a vehicle passes an LPR, the vehicle’s license plate is written to the 6 character license plate field in that LPR and the LPR’s condition variable is signalled. The mutex is used to protect the license plate data against concurrent access.</p><p>Each boom gate is 96 bytes large and consists of the following:</p><p>A pthread_mutex_t mutex lock (40 bytes, at bytes 0-39)<br>A pthread_cond_t condition variable (48 bytes, at bytes 40-87)<br>The boom gate’s status, 1 character long (1 byte, at byte 88)<br>Padding (7 bytes, at bytes 89-95), not used for anything<br>There are 4 acceptable values for the boom gate’s status:</p><p>‘C’ - Closed. This is the default value every gate should start in.<br>‘O’ - Open. Vehicles can only pass through the gate while it is open.<br>‘R’ - Raising. Boom gate is currently in the process of being raised. To open the boom gate, the manager sets the gate’s status character to ‘R’ and signals the condition variable. The simulator will then set the status character to ‘O’ after 10 milliseconds.<br>‘L’ - Lowering. Boom gate is currently in the process of being lowered. To close the boom gate, the manager sets the gate’s status character to ‘L’ and signals the condition variable. The simulator will then set the status character to ‘C’ after 10 milliseconds.<br>Note that the only acceptable status changes are as follows: C -&gt; R, R -&gt; O, O -&gt; L, L -&gt; C. Only the manager can change the boom gate’s status from C to R or O to L and only the simulator can change the boom gate’s status from R to O or L to C. Any other status changes are in error.</p><p>An information sign is 96 bytes large and consists of the following:</p><p>A pthread_mutex_t mutex lock (40 bytes, at bytes 0-39)<br>A pthread_cond_t condition variable (48 bytes, at bytes 40-87)<br>The information sign’s display, 1 character long (1 byte, at byte 88)<br>Padding (7 bytes, at bytes 89-95), not used for anything<br>The information sign is very basic and only has room to display a single character. It is used to show information to drivers at various points:</p><p>When the driver pulls up in front of the entrance boom gate and triggers the LPR, the sign will show a character between ‘1’ and ‘5’ to indicate which floor the driver should park on.<br>If the driver is unable to access the car park due to not being in the access file, the sign will show the character ‘X’.<br>If the driver is unable to access the car park due to it being full, the sign will show the character ‘F’.<br>In the case of a fire, the information sign will cycle through the characters ‘E’ ‘V’ ‘A’ ‘C’ ‘U’ ‘A’ ‘T’ ‘E’ ‘ ‘, spending 20ms on each character and then looping back to the first ‘E’ after displaying the space character..<br>To show a new message on the sign, the display character is set and the condition variable broadcast to (to inform any processes waiting for the sign to change.)</p><p>The per-level temperature sensor is 2 bytes long and consists of a signed 16-bit integer representing the current temperature (in degrees celsius) detected on that floor. Note that the temperature sensors are not expected to be perfect and may occasionally contain incorrect values. This will be written to by the simulator and read by the fire alarm system (note that there is no mutex protecting this value).</p><p>The per-level alarm is 1 byte long and simply contains a value of 0 or 1 depending on whether the alarm is on or not (default is 0). Again, no mutex protects this value.</p><p>Some additional notes about the shared memory segment’s layout:</p><p>The size of the mutex (40 bytes) and condition variable (48 bytes) are platform-dependent. The values that have been given are for the MX Linux virtual machine where we will be testing your code. You are free to develop the code on the platform of your choice, but just make sure to keep in mind where your code will be run.<br>You can directly address the variables via their memory address (e.g. (pthread_mutex_t *)(ptr + 96) to get a pointer to the mutex for the boom gate for Entrance #1), but it may be better to create a struct with the same fields to assist with layout.<br>Appendix A contains the locations of every variable in the shared memory segment, which you might find useful as a reference<br>Unusual behaviour of vehicles<br>When a vehicle shows up at the entrance and is permitted entry, it is shown a level number and it is expected that the vehicle will go and park on that level. However, in reality, once the vehicle is inside the car park it can drive wherever it wants to go, including to a different level, or directly to the exit. A vehicle can even move between levels. For this reason, LPRs on each level are present, detecting a vehicle accessing other levels. Potential unusual activity of vehicles does need to be taken into account by the manager when determining how to assign vehicles to levels. This needs to happen in the following way:</p><p>The car park keeps track of both the number of vehicles assigned to each level and the level that each vehicle is currently assigned to<br>When a vehicle is directed by the digital sign to a level, that vehicle will be assigned to that level. Hence, if two vehicles arrive, one after another, they will not both be directed to a level that only has space for one more vehicle.<br>However, if the vehicle is detected moving into another level by one of the per-level LPRs, it will then be counted as being assigned to that level if there is room on that level. That is, if a vehicle was directed towards level 1, it would initially count towards level 1’s capacity. However, if that vehicle is then spotted by level 2’s LPR, if level 2 has room for it, it will be subtracted from level 1’s capacity and then added to level<br>Status display<br>When the manager program is run, the terminal it is run in should display a (text mode) screen showing the current status of the car park. The exact layout and formatting is up to you, but the following information is expected to be presented:</p><p>Current state of each LPR, boom gate and digital sign<br>Current state of each temperature sensor<br>Number of vehicles and maximum capacity on each level<br>Total billing revenue recorded by the manager thus far<br>The way the information is presented also has some requirements:</p><p>The display should update frequently (e.g. every 50ms)<br>To prevent visual fatigue from trying to process rapidly scrolling text, all the above information should be able to fit into a single screen. In addition, before printing out the current status, the screen should be cleared (e.g. with system(“clear”)), again, to prevent scrolling.</p><h3 id="Video-demonstration"><a href="#Video-demonstration" class="headerlink" title="Video demonstration"></a>Video demonstration</h3><p>You need to produce a short video demonstration showing your software in action, with most of the focus being on the manager program, given that its status display should be able to show you what is going on. You will want to demonstrate ordinary operation, as well as exceptional situations such as a spike in temperatures indicating the presence of a fire (and the response of the fire alarm system.)</p><p>Two examples programs that can be used to record a video fairly easily are Zoom and OBS Studio. With Zoom you can start up a meeting by yourself (or with other members of your team), share your screen, start recording the meeting and then demonstrate it that way.</p><p>The video is your way of demonstrating how your software is supposed to work, as well as showing that you’ve implemented the functionality you are required to. As a general rule, if you want to receive marks for a certain component in your software, you need to demonstrate it in the video.</p>]]></content>
    
    <summary type="html">
    
      完成小组任务的一部分，开发和提交与停车场管理系统(Car Park Management System)相关的三个软件。
    
    </summary>
    
      <category term="C" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>PSY4219-Gaussians-Filter</title>
    <link href="cplusplusdaixie.com/PSY4219-Gaussians-Filter.html"/>
    <id>cplusplusdaixie.com/PSY4219-Gaussians-Filter.html</id>
    <published>2023-02-25T01:28:13.000Z</published>
    <updated>2023-05-27T13:28:50.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Guidelines"><a href="#Project-Guidelines" class="headerlink" title="Project Guidelines"></a>Project Guidelines</h3><p>All user interaction should taRequirement<br>You can do this request in a Python .py file or in a Jupyter Notebook. Recall that if you run into problems with code in a Jupyter Notebook, the best thing would be to try to debug that code in PyCharm (even if you want to copy it back to a Jupyter Notebook).</p><h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><p>For this question, perform some basic operations on an image that I have loaded onto Brightspace (nashville.jpg).</p><p>(a) Read in nashville.jpg, display it, and convert it from RGB to grayscale using the following formula to convert from red, green, and blue values to grayscale intensity:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">intensity</span> <span class="string">=</span> <span class="number">0.2989</span><span class="string">*red</span> <span class="string">+</span> <span class="number">0.5870</span><span class="string">*green</span> <span class="string">+</span> <span class="number">0.1140</span><span class="meta">*blue</span></span><br></pre></td></tr></table></figure></p><p>Save the image as a jpg file called nashvillegray.jpg, read it back in, and display it. You will use this grayscale version in the remaining parts below.</p><p>(b) Create a scrambled version of the grayscale image nashvillegray.jpg. Imagine dividing the image into an 8x8 grid. Create a scrambled version of the image where each of the sections in the 8x8 grid is randomly shuffled (a permutation). An example of the grayscale version and one possible scrambled version is shown below. We discussed a way to accomplish this scrambling in class.</p><p>Your code should read in the image into a numpy array. Create a function that takes this numpy array as an argument and takes the number of ways to slice the image (for example 8 to create an 8x8 grid) and returns a numpy array containing the scrambled image. Your code should display the scrambled image. Aside from using a built in permutation function and other non-image-processing functions in Python, the scrambling of the image should be done by your code (in other words, do not search for any built-in image/signal processing functions or existing packages that might do this scrambling for). Please try to write your code so that you can change the “8” in the 8x8 grid to some other value, like a 4x4 grid, or a 64x64 grid; you can assume that the number is chosen to equally divide the image size. Save the resulting scrambled image to a jpg file.</p><p>(c) Add “noise” to an image (in this case nashvillegray.jpg). Your code should read in the image into a numpy array, that numpy array should be passed to a function that adds the noise, with the noise specified by other arguments passed to the function.<br>The noise should be normally distributed with mean 0 and standard deviation sigma. This “noise” is added to the intensity (brightness) of each pixel in the image. This kind of noise is what sometimes called “salt and pepper noise”, whereby the intensity of each image pixel is jiggled up or down by a normally distributed random number.</p><p>When you add noise, allow for two options (as an optional argument in your function): one version where added noise that would cause a pixel value to go above 255 is capped at 255 go below 0 is capped at 0, and another version where noise is allowed to jump from 255 to 0 or from 0 to 255 when you cast as an uint8. Your code should show what happens (displaying two images) to illustrate the two ways of manipulating noise (and capping vs. rolling over at the extremes).</p><p>Your function should return a numpy array as uint8.</p><p>For each version, create one image and save it with a low but perceptible level of noise and create another image and save it with a relatively high level of noise; you will be saving four images.</p><h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><p>We talked about using the Laplacian of Gaussians filter to find edges in images. For this question, I would like you to explore the Laplacian, the Gaussian, and the Laplacian of Gaussians (LoG). This question uses the convolution computations we talked about in class and illustrated in the posted Jupyter Notebooks from class.</p><p>For this request, read in and use nashvillegray.jpg from above, but your code should work for any image that is read in.</p><p>Use this Laplacian filter:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">L = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">24</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure></p><p>Use this Gaussian filter:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">G = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">26</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">26</span>, <span class="number">41</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">26</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])/<span class="number">273</span></span><br></pre></td></tr></table></figure></p><p>Note that this Gaussian filter is larger than some of the examples shown in class (and in the Jupyter notebook) because here we are using a higher-resolution image. Using a 3x3 Gaussian would produce nearly-imperceptible blur.</p><p>(a) Confirm (in code) that convolution is commutative, using the Laplacian and Gaussian filters, within a reasonable small epsilon [ .000001. Use the epsilon value in some way to support your demonstration (in other words, do not simply print out the resulting convolutions to inspect by eye - show it somehow).</p><p>(b) Confirm that you understand the computations that underlie convolution. Pick a single pixel location (i,j) somewhere in the grayscale image of the Nashville skyline (nashvillegray.jpg) that is sufficiently far away from the edges of the image to avoid dealing with edge effects. First, calculate the convolution of the Laplacian with the image at this pixel location without using the signal.convolve2d() function, i.e., just following the equations for computing the convolution at a particular pixel location (i,j). Confirm that the value you get with your “hand-coded” convolution calculation matches that using the built-in signal.convolve2d function at the same pixel location (i,j) within some epsilon.</p><p>Note that your code will need to work with other filters (not just the Laplacian) so make sure it’s general (not hard-coded). Recall that the convolution requires a particular way of doing its calculations that makes it different from a cross-correlation; don’t just rely on getting the same answer for your code and the signal.convolve2d function; make sure your code does the correct calculations.</p><p>(c) Create a new filter, called LoG, which is the convolution of the Laplacian with the Gaussian. I do not want you to use the LoG filter I defined in class, but create one by actually convolving the Laplacian with the Gaussian (above) in code. You can use signal.convolve2d() function for this.</p><p>(d) Convolve the image with the Laplacian alone, the Gaussian alone, and the Laplacian of Gaussians. You can use the signal.convolve2d() function for this.</p><p>Make a 1x4 subplot. Display the original and the results of the convolutions using imshow().</p><p>Recall that the Laplacian and Laplacian of Gaussians (LoG) produces an “image” of second derivatives. That means that it will contain both positive and negative values (you can confirm that by looking at the numpy arrays resulting from the convolution). You will want to play around with ways to visualize the Laplacian and LoG. If you just display it directly, it might be hard to see the results of the filtering. For example, you could set a criterion (a step function) so that values greater than the criterion are white and those less than the criterion are black (recall that the Laplacian detects “edges” in an image). Make sure you manipulate the Laplacian and Laplacian of Gaussian images the same way.</p>]]></content>
    
    <summary type="html">
    
      实现Gaussian Filter, Laplacian filter等图像处理中的经典算子。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="cplusplusdaixie.com/tags/Algorithm/"/>
    
      <category term="Image Processing" scheme="cplusplusdaixie.com/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>CS212-Hangman</title>
    <link href="cplusplusdaixie.com/CS212-Hangman.html"/>
    <id>cplusplusdaixie.com/CS212-Hangman.html</id>
    <published>2023-02-21T00:54:24.000Z</published>
    <updated>2023-02-21T00:55:29.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Guidelines"><a href="#Project-Guidelines" class="headerlink" title="Project Guidelines"></a>Project Guidelines</h3><p>All user interaction should take place through GUI (input and output)<br>User should be allowed to choose a text file using a file selector to take word list<br>A word should be randomly selected using the parsed list<br>Your GUI should have some visual hangman, an area with the placeholder for the word and also track wrong letter guesses<br>Prevent guessing a word of wrong length or a non-alphabetic character (make them guess again without penalty)<br>After finishing the game prompt, the user on whether or not they want to continue</p><h3 id="Game-Rules"><a href="#Game-Rules" class="headerlink" title="Game Rules"></a>Game Rules</h3><p>The user gets six tries to make guesses (head, 2 arms, body, 2 legs)<br>Each guess the user can either guess a single character or a word.<br>A wrong guess uses a try and causes a part of the hangman to appear</p><h3 id="Rubric"><a href="#Rubric" class="headerlink" title="Rubric"></a>Rubric</h3><p>Commenting and Naming - Commenting and proper naming of variables and objects shows me that you know what you are doing and more importantly it makes your code readable which is vital to being a professional programmer working with other programmers.<br>Proper Implementation of Game - This will assess your implementation of the game, how well you implement the rules in your program<br>GUI implementation - How well designed is your GUI? How well do you integrate JOptionPane and elements in your main window?<br>Other Logic - Logic for choosing a random word, parsing text file etc<br>Aesthetic - How good does your UI look, any creativity will also be noticed here</p><h3 id="Instant-0"><a href="#Instant-0" class="headerlink" title="Instant 0"></a>Instant 0</h3><p>Program does not compile<br>Program has no GUI<br>Program does not follow first four points under guidelines (should follow all points but the first four are the most important</p><p>Attached with this document is an example exe of a hangman game along with a sample text file you can use for testing, Note the txt file must be in the same directory as the exe for the game to work. The example given is just an example, the word file for testing will be similar format but not the same size, and also this program is purely command line and has some features that are not required by you</p>]]></content>
    
    <summary type="html">
    
      使用Swing完成Hangman小游戏。
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS6300-Textprocessor</title>
    <link href="cplusplusdaixie.com/CS6300-Textprocessor.html"/>
    <id>cplusplusdaixie.com/CS6300-Textprocessor.html</id>
    <published>2023-02-16T01:06:52.000Z</published>
    <updated>2023-05-27T13:29:04.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Goals"><a href="#Project-Goals" class="headerlink" title="Project Goals"></a>Project Goals</h3><p>In this project, you will be developing a simple Java application (textprocessor) using an agile, test-driven process involving multiple deliverables. While you will receive one grade for the entire project, each deliverable must be completed by its own due date, and all deliverables will contribute to the overall project grade.</p><h3 id="Specification-of-the-textprocessor-Utility"><a href="#Specification-of-the-textprocessor-Utility" class="headerlink" title="Specification of the textprocessor Utility"></a>Specification of the textprocessor Utility</h3><p>textprocessor is a command-line utility written in Java with the following specification.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>textprocessor allows for simple text manipulation of the contents of a file.</p><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>textprocessor [OPTIONS] FILE</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Program textprocessor performs basic text transformations on lines of text from an input FILE. Unless the -o option (see below) is specified, the program writes transformed text to stdout and errors/usage messages to stderr. The FILE parameter is required and must be the last parameter. OPTIONS may be zero or more of the following and may occur in an order:</p><p>-o output_file_name<br>The program writes the output to output_file_name with transformed text instead of writing to stdout. If output_file_name already exists, the program shall result in an error.<br>-i<br>Used with the -r flag and -k flag ONLY; the search of -r or -k becomes case-insensitive.<br>-k substring<br>Keep only the lines containing substring. The search for substring is case-sensitive, unless option -i is set. This option must be mutually exclusive with -r below.<br>-r old new<br>Replaces the first instance of string old in each line with string new. The search for old is case-sensitive, unless option -i is set. This option must be mutually exclusive with -k above.<br>-s suffix<br>Adds the string suffix at the end of each line.<br>-n padding<br>Add a line number followed by a single space to the beginning of each line, where padding is an integer in the inclusive range of 1 to 9 specifying the minimum padding of the line number field. If the number of digits in the line number is less than the specified padding, zeros are left padded until the minimum padding is reached. If the number of digits in the line number is greater than the specified padding, the line number is never truncated. Line numbering should start at 1. This option must be mutually exclusive with -w below.<br>-w<br>Removes all whitespace from lines. For this request, whitespace will count as any spaces, “ “, or tabs, “\t”, in the input file. It must be mutually exclusive with -n above.</p><h3 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES"></a>NOTES</h3><p>While the last command-line parameter provided is always treated as the filename, OPTIONS flags can be provided in an order and shall be applied as follows:<br>Options -o/-i shall be processed first, as the determine global parameters of the computation.<br>Options -k, -r, -n, -w , and -s, shall be processed in this order. That is: (1) if -k is present, then the file content is filtered based on the specified parameter, using a case insensitive search if -i is present; (2) if -r is present, then replacements are performed based on the option parameters, using a case insensitive search if -i is present; (3) if -n is present, then a line number is applied; (4) if -w is present, then whitespace from the line is removed; (5) if -s is present, then a suffix shall be applied.<br>To keep this application simple, all errors shall result in display of the standard usage message.<br>Specifying option -i without having specified option -r or -k shall result in an error.<br>Specifying option -k with an empty string as the substring parameter should keep all input lines.<br>Specifying option -r with an empty string as the old parameter or option -s with an empty string as the suffix parameter shall result in an error.<br>Specifying options -r and -k simultaneously shall result in an error.<br>Specifying option -n with a non-integer value or an integer out of range shall result in an error.<br>Specifying options -n and -w simultaneously shall result in an error.<br>If options are repeated, only their last occurrence is applied.<br>All program option parameters are required, resulting in an error if omitted.<br>You shall assume that the command line parameter strings will not contain newline characters (\r, \n, and so on), as the behavior of the program would be platform dependent and may result in errors during grading. Therefore, there should be no test cases using these values as option parameters.<br>An empty input file shall produce an empty output file.<br>The last line of a non-empty input file must be newline terminated. Otherwise, the program shall generate an error.</p><h3 id="EXAMPLES-OF-USAGE"><a href="#EXAMPLES-OF-USAGE" class="headerlink" title="EXAMPLES OF USAGE"></a>EXAMPLES OF USAGE</h3><p>Example 1<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -o <span class="keyword">sample</span>.txt <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">the</span> input <span class="built_in">file</span>.</span><br></pre></td></tr></table></figure></p><p>output sample.txt:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">the</span> input <span class="built_in">file</span>.</span><br></pre></td></tr></table></figure></p><p>stdout: nothing sent to stdout<br>stderr: nothing sent to stderr</p><p>Example 2<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -r 02 <span class="keyword">two</span> <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Some</span> words are: <span class="string">"one"</span>, <span class="string">"02"</span>, <span class="keyword">and</span> <span class="string">"three"</span></span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Some</span> words are: <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="keyword">and</span> <span class="string">"three"</span></span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 3<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -i -r the A <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The <span class="built_in">file</span></span><br><span class="line"><span class="keyword">the</span> <span class="built_in">file</span></span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A <span class="built_in">file</span></span><br><span class="line">A <span class="built_in">file</span></span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 4<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -s er <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> cool</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> cooler</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 5<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -k Java <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java <span class="keyword">is</span> one of the &lt;blank&gt; programming languages.</span><br><span class="line">Java <span class="keyword">is</span> a programming language.</span><br><span class="line">Programming languages are neat, an example of one <span class="keyword">is</span> Java.</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java <span class="keyword">is</span> a programming language.</span><br><span class="line">Programming languages are neat, an example of one <span class="keyword">is</span> Java.</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 6<br>textprocessor -r Question Exclamation -o text -s ! -w FILE<br>input FILE:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This Sentence Ends In <span class="keyword">A</span> Question Mark?</span><br></pre></td></tr></table></figure></p><p>output text:<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThisSentenceEndsInAExclamationMark?!</span><br></pre></td></tr></table></figure></p><p>stdout: nothing sent to stdout<br>stderr: nothing sent to stderr</p><p>Example 7<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">textprocessor</span> <span class="string">-n</span> <span class="number">8</span> <span class="string">-n</span> <span class="number">2</span> <span class="string">-s</span> <span class="comment">## -s ! FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:</p><p>I wish this line had a line number..<br>I also wish that..<br>output file: output file not created<br>stdout:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">01 </span>I wish this <span class="keyword">line</span> had a <span class="keyword">line</span> number..!</span><br><span class="line"><span class="symbol">02 </span>I also wish that..!</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 8<br>textprocessor<br>input FILE:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Today is January <span class="number">65</span>, <span class="number">2298.</span></span><br><span class="line">Yesterday was December <span class="number">0</span>, <span class="number">3000.</span></span><br><span class="line">Tomorrow we will time travel again.</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout: nothing sent to stdout<br>stderr:<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: textprocessor [ -o filename | <span class="type">-i</span> | <span class="type">-k</span> substring | <span class="type">-r</span> old new | <span class="type">-n</span> padding | <span class="type">-w</span> | <span class="type">-s</span> suffix ] FILE</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      实现一个Textprocessor并通过测试，注意命令参数的逻辑顺序。
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CP5638-Small-Website</title>
    <link href="cplusplusdaixie.com/CP5638-Small-Website.html"/>
    <id>cplusplusdaixie.com/CP5638-Small-Website.html</id>
    <published>2023-02-13T01:59:07.000Z</published>
    <updated>2023-05-27T13:29:16.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>This request involves two parts, to be implemented as Web pages and submitted as described below.</p><p>Project Plan<br>Small Website<br>Your (fictional) client for the request has provided an introductory email containing a description of their goals and some text content for the site they would like you to develop.<br>Your task is to turn this into a clear useful plan and a small functional website.</p><h3 id="Project-Plan"><a href="#Project-Plan" class="headerlink" title="Project Plan"></a>Project Plan</h3><p>Write your project plan so that it is a useful working document to guide your development. Carefully consider the description provided by the client to inform your planning. Complete the plan by editing the plan.html template file provided inside the “Assessment 1 folder”, which contains the following required sections:</p><h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><p>Concisely state what the goal (purpose) of the website is. Note that the mission must be to improve something in a measurable way. To “provide information about something” is not a good mission, since you cannot see a measurable improvement. Why is the site needed? How does it benefit the client? Be clear and specific. Good mission statements are usually only a few sentences and contain no unnecessary information.</p><h3 id="Success-Evaluation"><a href="#Success-Evaluation" class="headerlink" title="Success Evaluation"></a>Success Evaluation</h3><p>Describe the process(es) by which the site success will be evaluated. Note that “hits” only counts people (or robots) visiting your website, which says nothing about whether the site has achieved its mission. How do you know that the site does what the client wanted? Measure the mission you stated above.</p><h3 id="Target-Audience"><a href="#Target-Audience" class="headerlink" title="Target Audience"></a>Target Audience</h3><p>Describe two (2) things clearly and specifically:</p><p>the target audience that your site is intended for (be specific; you can’t aim for everyone)<br>how you will intentionally design the site to cater to this group (as distinct from another, different target audience).</p><h3 id="Site-Flowchart"><a href="#Site-Flowchart" class="headerlink" title="Site Flowchart"></a>Site Flowchart</h3><p>Create a site flowchart to show the hierarchy of pages in the site and their relationships.<br>Each page should be represented by one box.<br>The order of boxes is the order these links should appear on the site.<br>If you do not have a preferred drawing program for flowcharts, use <a href="https://app.diagrams.net/" target="_blank" rel="noopener">https://app.diagrams.net/</a>.<br>Save your flowchart as a PNG file (normally the best file format for plain, straight-lined diagrams like this) and insert the image in your plan file under this heading.</p><p>plan.html is the template file provided for your documentation, which you must use.</p><p>DO NOT change the file name or the formatting.<br>DO NOT edit it in Word just save it and edit it as an HTML file (in Visual Studio Code, PHPStorm, Notepad++, etc.).<br>Each section has a heading and a spot () for its content. Add your name in the [title] before submitting.<br>Your website SHOULD NOT link to the plan.<br>There is no set word limit for your plan, but be clear, concise, and complete. DO NOT be long.</p><h3 id="Small-Website"><a href="#Small-Website" class="headerlink" title="Small Website"></a>Small Website</h3><p>Design and develop a small website for the client. Use your project planning (goal, target audience, flowchart) to inform and guide your design.</p><p>Use all the text content provided by the client (but NOT the description about goals that they have provided for you, the developer).<br>Edit the text content, which comes “as is” from the client, to make it suitable for the website. You are welcome and encouraged to write some amount of additional text to benefit the site, as appropriate. But don’t just make stuff up that might not be true.<br>Think about the information architecture (organisation) and decide what content should go on what pages to best achieve the site goals.<br>You must develop the site from scratch yourself. You may NOT use existing templates or frameworks (including Bootstrap or similar).<br>Although it is up to you exactly what goes in the site and how/where, you should have at least the following elements:</p><p>HTML Pages - name your home page file index.html<br>Navigation - links between pages and to the external sites provided (no broken links).<br>CSS - you should use an external style sheet for most/all styling.<br>Images - make appropriate use of the images for your site (consider editing, resizing, cropping, compression, etc.).</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit a zip file of your work (not including temporary files/documents) to LearnJCU. Ensure you include every file required for your website as well as plan.html.</p>]]></content>
    
    <summary type="html">
    
      制定项目计划，完成一个小型的个人网站。
    
    </summary>
    
      <category term="HTML" scheme="cplusplusdaixie.com/categories/HTML/"/>
    
    
      <category term="Operating System" scheme="cplusplusdaixie.com/tags/Operating-System/"/>
    
      <category term="File System" scheme="cplusplusdaixie.com/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP3320-Category-Partition</title>
    <link href="cplusplusdaixie.com/COMP3320-Category-Partition.html"/>
    <id>cplusplusdaixie.com/COMP3320-Category-Partition.html</id>
    <published>2023-02-01T00:39:33.000Z</published>
    <updated>2023-05-27T13:29:18.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this individual request, you must generate between 60 and 100 test-case specifications (i.e., generated test frames) for a simplified version of the copy utility, whose specs are provided below, using the category-partition method that we saw in class.</p><p>Make sure, when defining your test specifications, to suitably cover the domain of the application under test. Finally, make sure to suitably use constraints (rather than eliminating choices) to keep the number of test frames within the specified thresholds.</p><h3 id="Concise-Specification-of-the-copy-Utility"><a href="#Concise-Specification-of-the-copy-Utility" class="headerlink" title="Concise Specification of the copy Utility"></a>Concise Specification of the copy Utility</h3><p>NAME:<br>cp - copy files and directories<br>SYNOPSIS<br>Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.<br>cp [OPTION]… SOURCE… DIRECTORY<br>where OPT can be zero or more of<br>-b<br>-f<br>-r<br>-v<br>COMMAND-LINE ARGUMENTS AND OPTIONS<br>source: directory or file to be copied.<br>directory: location to copy to.<br>-b: (backup) - make a backup of each existing destination file<br>-f: (force) - if an existing destination file cannot be opened, remove it and try again<br>-r: (recursive) - copy directories recursively<br>-v: (verbose) explain what is being done</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>As stated above, in defining your categories and choices, you should make sure to suitably cover the domain of the application under test. This also includes possibly erroneous inputs. Just to give you an example, if you had to test a calculator, you may want to cover the case of a division by zero.<br>You are only required to specify test inputs for the application, but you do not have to also specify the expected outcome for such inputs. It is therefore OK if you don’t know how the system would behave for a specific input. Using the same calculator example, you could test the case of a division by zero even if you do not know how exactly the calculator would behave for that input.</p><h3 id="Tools-and-Useful-Files"><a href="#Tools-and-Useful-Files" class="headerlink" title="Tools and Useful Files"></a>Tools and Useful Files</h3><p>You will use the TSLgenerator tool to generate test frames starting from a TSL file, just like we did in the demo. A version of the TSLgenerator tool for Linux, Mac OS X, and Windows (two versions), together with a user manual, are available at:</p><p>TSLgenerator-manual.txt<br>TSLgenerator.linux<br>TSLgenerator-mac<br>TSLgenerator-win32.exe<br>TSLgenerator-win64.exe<br>Important: These are command-line tools, which means that you have to run them from the command line, as I did in my demo, rather than by clicking on them. Also, on Linux and<br>Mac systems, you may need to change the permissions of the files to make them executable using the chmod utility. To run the tool on a Mac, for instance, you should do the following, from a terminal:</p><p>chmod +x TSLgenerator-mac<br>./TSLgenerator-mac <command line arguments><br>Finally, if you are running a modern version of Windows (&gt; XP), you may want to try the TSLgenerator-win64.exe version of the tool. It hasn’t been tested thoroughly, but it should work better on these versions than the TSLgenerator-win32.exe version. If you encounter issues, please post a public question on Piazza and consider running the tool on a different platform (if you have the option to do so).</p><p>We are also providing file split-example.txt, the TSL file for the example we saw in the lesson, for your reference.</p><p>Also, the demo example for your benefit.</p><h3 id="How-To-Submit"><a href="#How-To-Submit" class="headerlink" title="How To Submit"></a>How To Submit</h3><p>Create a directory “request6” in your personal GitHub repo.<br>Add to this new directory two text files:<br>catpart.txt: the TSL file you created.<br>catpart.txt.tsl: the test specifications generated by the TSLgenerator tool when run on your TSL file.<br>Commit and push your files to GitHub.<br>Submit on Blackboard the commit ID for your submission.</p>]]></content>
    
    <summary type="html">
    
      使用TSLgenerator工具生成60-100个测试用例，练习三方工具的使用
    
    </summary>
    
      <category term="Other" scheme="cplusplusdaixie.com/categories/Other/"/>
    
    
      <category term="Third-party" scheme="cplusplusdaixie.com/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CMPSC311-LFU-Cache</title>
    <link href="cplusplusdaixie.com/CMPSC311-LFU-Cache.html"/>
    <id>cplusplusdaixie.com/CMPSC311-LFU-Cache.html</id>
    <published>2023-01-24T00:50:32.000Z</published>
    <updated>2023-05-27T13:29:21.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>Select any tool that proviRequirement<br>You just completed implementing mdadm and it is working. The software engineers who plan to build secure crypto wallet on top of your storage system have been torturing your storage system by throwing at it all sorts of I/O patterns, and they have been unable to find any inconsistency in your implementation. This is great, because now you have a working system, even though it may not be performant. As professor John Ousterhout of Stanford says, “the best performance improvement is the transition from nonworking state to working state”. The software engineers are happy that your storage system is working correctly, but now they want you to make it fast as well. To this end, you are going to implement a block cache in mdadm.</p><p>Caching is one of the oldest tricks in the book for reducing request latency by saving often used data in a faster (and smaller) storage medium than your main storage medium. Since we covered caching extensively in the class, we are skipping its details in this document. You must watch the lecture to understand what caching is, and how the least-frequency used (LFU) algorithm that you are going to implement in this request works. Specifically, you will be implementing a look-aside cache with writethrough write policy.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>In general, caches store key and value pairs in a fast storage medium. For example, in a CPU cache, the key is the memory address, and the value is the data that lives at that address. When the CPU wants to access data at some memory address, it first checks to see if that address appears as a key in the cache; if it does, the CPU reads the corresponding data from the cache directly, without going to memory because reading data from memory is slow.</p><p>In a browser cache, the key is the URL of an image, and the value is the image file. When you visit a web site, the browser fetches the HTML file from the web server, parses the HTML file and finds the URLs for the images appearing on the web page. Before making another trip to retrieve the images from the web server, it first checks its cache to see if the URL appears as a key in the cache, and if it does, the browser reads the image from local disk, which is much faster than reading it over the network from a web server.</p><p>In this request you will implement a block cache for mdadm. In the case of mdadm, the key will be the tuple consisting of disk number and block number that identifies a specific block in JBOD, and the value will be the contents of the block. When the users of mdadm system issue mdadm_read call, your implementation of mdadm_read will first look if the block corresponding to the address specified by the user is in the cache, and if it is, then the block will be copied from the cache without issuing a slow JBOD_READ_BLOCK call to JBOD. If the block is not in the cache, then you will read it from JBOD and insert it to the cache, so that if a user asks for the block again, you can serve it faster from the cache.</p><h3 id="Cache-Implementation"><a href="#Cache-Implementation" class="headerlink" title="Cache Implementation"></a>Cache Implementation</h3><p>Typically, a cache is an integral part of a storage system and it is not accessible to the users of the storage system. However, to make the testing easy, in this request we are going to implement cache as a separate module, and then integrate it to mdadm_read and mdadm_write calls.<br>Please take a look at cache.h file. Each entry in your cache is the following struct.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">bool</span> valid;</span><br><span class="line">  <span class="keyword">int</span> disk_num;</span><br><span class="line">  <span class="keyword">int</span> block_num;</span><br><span class="line">  <span class="keyword">uint8_t</span> block[JBOD_BLOCK_SIZE];</span><br><span class="line">  <span class="keyword">int</span> num_accesses;</span><br><span class="line">&#125; <span class="keyword">cache_entry_t</span>;</span><br></pre></td></tr></table></figure><p>The valid field indicates whether the cache entry is valid. The disk_num and block_num fields identify the block that this cache entry is holding and the block field holds the data for the corresponding block. The num_accesses field stores total number of time this cache block was accessedeither written or read.<br>The file cache.c contains the following predefined variables.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">cache_entry_t</span> *cache = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cache_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num_queries = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num_hits = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>Now let’s go over the functions declared in cache.h that you will implement and describe how the above variables relate to these functions. You must look at cache.h for more information about each function.</p><p>int cache_create(int num_entries); Dynamically allocate space for num_entries cache entries and should store the address in the cache global variable. It should also set cache_size to num_entries, since that describes the size of the cache and will also be used by other functions. Calling this function twice without an intervening cache_destroy call (see below) should fail. The num_entries argument can be 2 at minimum and 4096 at maximum.<br>int cache_destroy(void); Free the dynamically allocated space for cache, and should set cache to NULL, and cache_size to zero. Calling this function twice without an intervening cache_create() call should fail.<br>int cache_lookup(int disk_num, int block_num, uint8_t <em>buf); Lookup the block identified by disk_num and block_num in the cache. If found, copy the block into buf, which can- not be NULL. This function must increment num_queries global variable every time it performs a lookup. If the lookup is successful, this function should also increment num_hits global variable; it should also increment num_accesses field of the corresponding entry, to indicate that the entry was used for one more time. We are going to use num_queries and num_hits variables to compute your cache’s hit ratio.<br>int cache_insert(int disk_num, int block_num, uint8_t </em>buf); Insert the block identified by disk_num and block_num into the cache and copy bufwhich cannot be NULL to the corresponding cache entry. Insertion should never fail: if the cache is full, then an entry should be overwritten according to the LFU policy using data from this insert operation. This function should also assign num_accesses of this cache entry to 1.<br>void cache_update(int disk_num, int block_num, const uint8_t *buf); If the entry exists in cache, updates its block content with the new data in buf. Should also update the num_accesses by 1 if successful.<br>bool cache_enabled(void); Returns true if cache is enabled. This will be useful when integrat- ing the cache to your mdadm_read and mdadm_write functions.</p><h3 id="Strategy-for-Implementation"><a href="#Strategy-for-Implementation" class="headerlink" title="Strategy for Implementation"></a>Strategy for Implementation</h3><p>The tester now includes new tests for your cache implementation. You should first aim to implement functions in cache.c and pass all the tester unit tests. Once you pass the tests, you should incorporate your cache into your mdadm_read and mdadm_write functions you need to implement caching in mdadm_write as well, because we are going to use write-through caching policy, as described in the class. Once you do that, make sure that you still pass all the tests.</p><p>Next, try your implementation on the trace files and see if it improves the performance. To evaluate the performance, we have introduced a new cost is a metric into JBOD for measuring the effectiveness of your cache, which is calculated based on the number of operations executed. Each JBOD operation has a different cost, and by effective caching, you reduce the number of read operations, thereby reducing your cost. Now, the tester also takes a cache size when used with a workload file, and prints the cost and hit rate at the end. The cost is computed internally by JBOD, whereas the hit rate is printed by cache_print_hit_rate function in cache.c. The value it prints is based on num_queries and num_hits variables that you should increment.</p><p>Here’s how the results look like with the reference implementation. First, we run the tester on random input file:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost:</span> <span class="number">40408900</span></span><br><span class="line"><span class="attr">num_hits:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="string">-nan%</span></span><br></pre></td></tr></table></figure></p><p>The cost is 40408900, and the hit rate is undefined because we have not enabled cache. Next, we rerun the tester and specify a cache size of 1024 entries, using -s option:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">-s</span> <span class="number">1024</span></span><br><span class="line"><span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost: 37060800 num_hits:</span> <span class="number">11679</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">49081</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="number">23.8</span><span class="string">%</span></span><br></pre></td></tr></table></figure></p><p>As you can see, the cache is working, given that we have non-zero hit rate, and as a result, the cost is now reduced. Let’s try it one more time with the maximum cache size:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">-s</span> <span class="number">4096</span></span><br><span class="line"><span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost: 27625200 num_hits:</span> <span class="number">44985</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">49081</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="number">91.7</span><span class="string">%</span></span><br><span class="line"><span class="string">$</span> <span class="string">diff</span> <span class="string">-u</span> <span class="string">x</span> <span class="string">traces/random-expected-output</span></span><br><span class="line"><span class="string">$</span></span><br></pre></td></tr></table></figure></p><p>Once again, we significantly reduced the cost using a larger cache. We also make sure that introducing caching does not violate correctness by comparing the outputs. If introducing a cache violates correctness of your mdadm implementation, you will get a zero grade for the corresponding trace file.</p>]]></content>
    
    <summary type="html">
    
      完善之前的Mdadm文件系统，增加LFU算法的Cache.
    
    </summary>
    
      <category term="C" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="Operating System" scheme="cplusplusdaixie.com/tags/Operating-System/"/>
    
      <category term="File System" scheme="cplusplusdaixie.com/tags/File-System/"/>
    
  </entry>
  
</feed>
