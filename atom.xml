<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2020-04-16T03:19:24.119Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS201-Information-Retrieval</title>
    <link href="https://tk1307993.coding.me/CS201-Information-Retrieval.html"/>
    <id>https://tk1307993.coding.me/CS201-Information-Retrieval.html</id>
    <published>2020-04-16T09:23:31.000Z</published>
    <updated>2020-04-16T03:19:24.119Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><ul><li>Translate written descriptions of behavior into code.</li><li>Practice representing state in a class.</li><li>Practice interacting with the Map, Set, and List abstractions.</li><li>Test code using unit tests.</li></ul><h3 id="Downloading-and-importing-the-starter-code"><a href="#Downloading-and-importing-the-starter-code" class="headerlink" title="Downloading and importing the starter code"></a>Downloading and importing the starter code</h3><p>As in previous assignments, download and save (but do not decompress) the provided archive file containing the starter code. Then import it into Eclipse in the same way; you should end up with a information-retrieval- project in the “Project Explorer”.</p><h3 id="Search-engine-behavior"><a href="#Search-engine-behavior" class="headerlink" title="Search engine behavior"></a>Search engine behavior</h3><p>For the purposes of this assignment, a search engine is a stateful object that “knows about” a set of documents and supports various queries on those documents and their contents.</p><p>Documents are identified by a unique ID and consist of a sequence of terms. Terms are (always) the lowercase version of words; operations on the search engine and documents are should therefore be case-insensitive. Documents are added one-by-one to the search engine.</p><p>The search engine function as an index. That is, given a term, the search engine can return the set of documents (that it knows about) that contain that term.</p><p>The search engine can also find a list of documents (again, from among the set it knows about) relevant to a given term, ordered from most-relevant to least-relevant. It does so using a specific version of the tf-idf statistic, which sounds intimidating but is actually fairly straightforward to calculate - so long as you have the data structures to support doing so.</p><h3 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do"></a>What to do</h3><p>The SearchEngine needs to keep track of the documents for two things: to do index lookups of terms, returning a set of documents (in indexLookup), and to compute the two components of the tf-idf statistics (in termFrequency and inverseD). You can hold this state with whatever data structures you like, but my suggestions follow.</p><p>I suggest you get addDocument and indexLooku working first. To support the index, a straightforward mapping of terms to DocumentIDs will work. (To be clear: a Map). It turns out you don’t need to create this structure; you can use the one you’ll make to support tf-idf instead, but creating this Map might be a good warmup. In any case, declare the structure(s) as instance variables, create the empty structure(s) you’ll use in the constructor, fill it/them in addDocument, and examine it/them in indexLookup. When turning the document itself into terms, use the same approach as in Assignment 05: String.split using “\W+“, and remember toLowercase the result.</p><p>termFrequency requires that you compute the number of times a given term appears in a given document. This suggests you should have a data structure that keeps track of the count of terms per document: a Map. But this frequency-counting structure is per-document; you need to keep track of each document’s counts. So overall, I suggest a Map. The outer map goes from DocumentIds to the inner frequency-counting structure. You’ll have to update addDocument to populate and update these structures. Be sure to get clear in your head the different times you’ll use get, put, containsKey, and getOrDefault.</p><p>Once you have the structure described above, inverseDocumentFrequenc is fairly straightforward. Be sure to read the javadoc comment above the method for the exact equation the tests are expecting. Use Math.log to compute the logarithm (not Math.log10 or Math.log2).</p><p>Use these two methods to compute a given document-term pair’s tfIdf.</p><p>Finally, implement relevanceLookup, which returns a list of all documents containing a given term, sorted from largest tf-idf to smallest. You’ll probably need to implement TfIdfComparator., but note that no tests test the comparator directly, so if you have another method in mind to sort the list, go ahead. If you do implement it, make sure it returns a value that will result in the list being sorted largest-to-smallest, and mind the tie-breaker requirement.</p>]]></content>
    
    <summary type="html">
    
      用TF-IDF算法，结合数据结构的Map, Set和List，代写一个信息检索系统。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CSE214-Decision-Tree-Classifier</title>
    <link href="https://tk1307993.coding.me/CSE214-Decision-Tree-Classifier.html"/>
    <id>https://tk1307993.coding.me/CSE214-Decision-Tree-Classifier.html</id>
    <published>2020-04-10T09:23:31.000Z</published>
    <updated>2020-04-10T09:51:43.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>In this homework you will be implementing a decision tree classifier. A decision tree classifier is used in rule-based machine learning to classify data based on a predefined set of attributes. In our case, we will be classifying text based on the terms it contains (or does not contain). Decision trees can be used for real-life applications ranging from answering FAQs to classifying a piece of data.<br>In order to be able to make decisions using the decision tree classifier, we must first build the decision tree. Your program will be able to import existing decision trees from text files, and edit them in the program. Additionally, it will have to read input text and classify it based on the decision tree, printing the decisions that were made in order to reach the final verdict.<br>NOTE: All exceptions explicitly thrown in Required Classes except for IllegalArgumentException are custom exceptions that need to be made by you.</p><h3 id="Required-Classes"><a href="#Required-Classes" class="headerlink" title="Required Classes"></a>Required Classes</h3><h4 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h4><p>private String[] keywords<br>This field holds the message only if it is a leaf, otherwise this is a list of words to trigger going down this path.<br>These keywords are joined as if OR’ed together:<br>Example: {“Fat”; “Orange”}: if text contains Fat or text contains Orange, then go down “yes” path, otherwise “no” path.<br>private TreeNode left<br>private TreeNode right<br>These two fields hold the left and right subtrees respectively.<br>You should have getters/setters for the three fields above.<br>public Boolean isLeaf():<br>function that returns true if the node is a leaf and its left and right subtrees are null, otherwise false.<br>Preconditions: This node is initialized<br>Postconditions: The tree remains unchanged<br>TreeNavigator<br>private TreeNode root<br>A reference to the root TreeNode of this tree.<br>private TreeNode cursor<br>A reference to the currently selected TreeNode in the tree.<br>The cursor should select the root node by default.<br>public static TreeNavigator buildTree(String treeFile)<br>Reads in a text file describing a TreeNavigator. See sample input for an example.<br>Preconditions: treeFile is a non-null, non-empty String that points to a file that exists that is readable and valid.<br>Returns a new TreeNavigator generated by the passed in text file.<br>public String classify(String text)<br>Classifies the text with the given tree and returns the classification as a String.<br>public String getPath()<br>Gets the current path of the cursor. For example, if cursor referred to a TreeNode at position “Garfield” in the example below, this method should return “NOT red, NOT coyote,wolf, IS cat, IS orange, DECISION: Garfield”<br>Note the comma above: This is how you can show multiple keywords.<br>public void resetCursor()<br>Resets the cursor to the root node.<br>Postconditions: Cursor references root node. Cursor contents are printed.<br>public void cursorLeft()<br>Moves cursor to its left child.<br>Postconditions: Cursor contents are printed.<br>public void cursorRight()<br>Moves cursor to its right child.<br>Postconditions: Cursor contents are printed.<br>public TreeNode getCursor()<br>This gets the Cursor so you can modify the keywords or the Left or the Right child links.<br>Precondition: Cursor is not null (return null if it is null)<br>Postcondition: Cursor is returned to the caller.<br>public void editCursor(String text)<br>Sets the keywords for the current cursor.</p><h4 id="DecisionTreeClassifier-Driver"><a href="#DecisionTreeClassifier-Driver" class="headerlink" title="DecisionTreeClassifier (Driver)"></a>DecisionTreeClassifier (Driver)</h4><p>public static void main (String args[])<br>This will drive the program and present a menu like shown below.<br>You can and should write helper functions for each menu option if not already present in the TreeNavigator.<br>General Recommendations<br>You might want to implement a toString() method for classes to make debugging and printing easier. You do not have to do this, but it will help you.<br>You can feel free to add any extra methods and variables as you see fit (public and private).</p><p>Text file format<br>The input file will be formatted like the following example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>;;Red;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span>;Coyote,Wolf;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span>;Cat;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-0</span>;snoopy;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span>;fat,orange;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-0</span>;tom;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span>;garfield;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span>;big,bad,evil,mean;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-0</span>;Wolf Blitzer;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span>;ACME;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span><span class="number">-0</span>;Big Bad Wolf;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span><span class="number">-1</span>;Wile E. Coyote;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span>;Dog;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span>;plumber;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span><span class="number">-0</span>;Little Red Riding Hood;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span><span class="number">-1</span>;Mario;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-1</span>;Clifford;leaf</span><br></pre></td></tr></table></figure></p><h3 id="UI-Required-Functions"><a href="#UI-Required-Functions" class="headerlink" title="UI Required Functions"></a>UI Required Functions</h3><p>Menu:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Classify (<span class="name">Sentence</span>)</span><br><span class="line">Path (<span class="name">Sentence</span>)</span><br><span class="line">Import (<span class="name">file</span>)</span><br><span class="line">Cursor To Root (<span class="name">print</span> cursor)</span><br><span class="line">Cursor Left (<span class="name">print</span> cursor)</span><br><span class="line">Cursor right (<span class="name">print</span> cursor)</span><br><span class="line">Edit Cursor (<span class="name">print</span> cursor)</span><br><span class="line">Add Left Child (<span class="name">doesn</span>’<span class="literal">t</span> move cursor)</span><br><span class="line">Add Right Child (<span class="name">doesn</span>’<span class="literal">t</span> move cursor)</span><br></pre></td></tr></table></figure></p><h3 id="Sample-IO"><a href="#Sample-IO" class="headerlink" title="Sample IO"></a>Sample IO</h3><h4 id="Example-1-Working-with-the-following-tree"><a href="#Example-1-Working-with-the-following-tree" class="headerlink" title="Example 1 - Working with the following tree:"></a>Example 1 - Working with the following tree:</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the DecisionTree Classifier</span><br><span class="line">Menu:</span><br><span class="line">        I)Import a tree from a file</span><br><span class="line">        E)Edit current tree</span><br><span class="line">        C)Classify a Description</span><br><span class="line">        P)<span class="keyword">Show</span> decision <span class="keyword">path</span> <span class="keyword">for</span> a Description</span><br><span class="line">        Q) Quit.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: E</span><br><span class="line"><span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: tree <span class="keyword">is</span> <span class="keyword">empty</span> Root node <span class="keyword">is</span> <span class="keyword">initialized</span> <span class="keyword">with</span> this value.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:</span><br><span class="line">        E)Edit Keywords</span><br><span class="line">        C)<span class="keyword">Add</span> Children Children <span class="keyword">are</span> automatically <span class="keyword">leaves</span>, can be edited later.</span><br><span class="line">        D)<span class="keyword">Delete</span> Children, <span class="keyword">and</span> Make Leaf Ask <span class="keyword">user</span> <span class="keyword">for</span> <span class="keyword">new</span> <span class="keyword">value</span> <span class="keyword">for</span> keyword(<span class="keyword">only</span> one, <span class="keyword">no</span> commas).</span><br><span class="line">        N)<span class="keyword">Cursor</span> <span class="keyword">to</span> <span class="keyword">No</span> <span class="keyword">Child</span></span><br><span class="line">        Y)<span class="keyword">Cursor</span> <span class="keyword">to</span> Yes <span class="keyword">Child</span></span><br><span class="line">        R)<span class="keyword">Cursor</span> <span class="keyword">to</span> Root</span><br><span class="line">        P)<span class="keyword">Cursor</span> <span class="keyword">to</span> <span class="keyword">Parent</span> Extra credit. May <span class="keyword">not</span> <span class="keyword">use</span> <span class="keyword">parent</span> <span class="keyword">reference</span> <span class="keyword">for</span> extra credit.</span><br><span class="line">M)<span class="keyword">Main</span> Menu</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:smelly,dim</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: smelly, dim.</span><br><span class="line">//Edit menu <span class="keyword">not</span> shown again <span class="keyword">in</span> <span class="keyword">sample</span> IO</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: C</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: tempNo</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: tempYes</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'tempYes'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'tempNo'</span></span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: Y</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> leaf, message <span class="keyword">is</span> <span class="string">'tempYes'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: A</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: Javits</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: <span class="keyword">Old</span> CS</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'Old CS'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'Javits'</span></span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:asbestos,broken</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: smelly, dim.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:R</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: smelly, dim</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:N</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> leaf, message <span class="keyword">is</span> <span class="string">'tempNo'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:sick,food,bad,activities</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: sick,food,bad,activities.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: A</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: <span class="keyword">New</span> CS</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: SAC</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'New CS'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'Javits'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: M</span><br><span class="line">//<span class="keyword">Main</span> menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span></span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: C</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: <span class="keyword">Where</span> can I <span class="keyword">go</span> <span class="keyword">if</span> I want <span class="keyword">to</span> sit <span class="keyword">in</span> a broken chair <span class="keyword">in</span> a dim room?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: <span class="keyword">Old</span> CS</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: P</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: I would <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">get</span> sick <span class="keyword">before</span> my <span class="keyword">test</span> tomorrow. <span class="keyword">Where</span> should I eat <span class="keyword">to</span> increase my chances?</span><br><span class="line">Decision <span class="keyword">path</span>:<span class="keyword">NOT</span> smelly, dim, <span class="keyword">IS</span> sick, DECISION: SAC</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: E</span><br><span class="line"><span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: smelly, dim</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: D</span><br><span class="line">Please enter a terminal <span class="built_in">text</span> <span class="keyword">for</span> this node: Chuck Norris</span><br><span class="line"><span class="keyword">Current</span> node <span class="keyword">is</span> leaf. <span class="built_in">Text</span> <span class="keyword">is</span>: <span class="string">'Chuck Norris'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: M</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: C</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: Who can <span class="keyword">kill</span> two stones <span class="keyword">with</span> one bird?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Chuck Norris</span><br><span class="line">Please enter a menu <span class="keyword">option</span>: Q</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h4 id="Example-2-Working-with-the-following-tree"><a href="#Example-2-Working-with-the-following-tree" class="headerlink" title="Example 2 - Working with the following tree:"></a>Example 2 - Working with the following tree:</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the DecisionTree Classifier</span><br><span class="line">Menu:</span><br><span class="line">        I)Import a tree <span class="keyword">from</span> a file</span><br><span class="line">        E)Edit current tree</span><br><span class="line">        C)Classify a Description</span><br><span class="line">        P)Show decision path <span class="keyword">for</span> a Description</span><br><span class="line">        Q)Quit.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: I</span><br><span class="line">Please enter a filename: sampletree.txt</span><br><span class="line">Tree Loaded.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:P</span><br><span class="line">Please enter some <span class="keyword">text</span>:This Character <span class="keyword">is</span> an orange cat who likes lasagna.</span><br><span class="line">Decision path: <span class="keyword">NOT</span> red, <span class="keyword">NOT</span> coyote,wolf, <span class="keyword">IS</span> cat, <span class="keyword">IS</span> orange, DECISION: Garfield</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:C</span><br><span class="line">Please enter some <span class="keyword">text</span>:I<span class="comment">'m looking for a plumber, but I insist that he wears a red hat, so I know how to tell  him apart from his brother.</span></span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Mario</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:C</span><br><span class="line">Please enter some <span class="keyword">text</span>: Who <span class="keyword">is</span> the unlucky coyote who always tries <span class="keyword">to</span> use ACME products <span class="keyword">to</span> <span class="keyword">catch</span> a bird?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Wile E. Coyote</span><br><span class="line">Please enter a menu <span class="keyword">option</span>: Q</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h3 id="Extra-Credit-GUI-OR-Android-–-NOT-BOTH-–-Requirements"><a href="#Extra-Credit-GUI-OR-Android-–-NOT-BOTH-–-Requirements" class="headerlink" title="Extra Credit: GUI OR Android – NOT BOTH – Requirements"></a>Extra Credit: GUI OR Android – NOT BOTH – Requirements</h3><p>You must make a nice visualization of all the components. For example this can include a graphical representation of the tree and what each node contains, along with connecting lines to each node.<br>All the menu options should be buttons, and all inputs should be graphical (ie: in a TextField in JavaFX) for any extra credit.</p><h3 id="Extra-Credit-Child-to-Parent-can-be-done-with-or-without-a-GUI-for-credit"><a href="#Extra-Credit-Child-to-Parent-can-be-done-with-or-without-a-GUI-for-credit" class="headerlink" title="Extra Credit: Child to Parent (can be done with or without a GUI for credit)"></a>Extra Credit: Child to Parent (can be done with or without a GUI for credit)</h3><p>Implement a Cursor to Parent function as in the sample WITHOUT putting a parent reference in the TreeNode class.</p>]]></content>
    
    <summary type="html">
    
      练习ADT中Tree的用法，代写一个决策树分类器的应用程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP2370-Midpoint-Pivot-Quicksort</title>
    <link href="https://tk1307993.coding.me/COMP2370-Midpoint-Pivot-Quicksort.html"/>
    <id>https://tk1307993.coding.me/COMP2370-Midpoint-Pivot-Quicksort.html</id>
    <published>2020-04-06T05:22:17.000Z</published>
    <updated>2020-04-06T00:27:43.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Non-Reversing-Permutation"><a href="#Non-Reversing-Permutation" class="headerlink" title="Non-Reversing Permutation"></a>Non-Reversing Permutation</h3><p>The pseudocode in the textbook for RANDOMIZE-IN-PLACE (p. 126) generates a permutation of an array such that any ordering is equally likely. Write pseudocode for PERMUTE-WITHOUT-REVERSAL, which should generate any ordering with equal likelihood except for the exact reverse of the original ordering. In other words, if the original array is A = {1, 5, 3, 2, 4}, then any permutation should be possible with equal likelihood except for {4, 2, 3, 5, 1}, which should not be a possible result. Your algorithm should not use any additional storage beyond the original array and a fixed number of temporary variables (no temporary arrays). Hint: it may help to think about how to correctly implement PERMUTE-WITHOUT-IDENTITY from problem 5.3-2 in the textbook (p. 128), and think about how you might use that code as part of your implementation of PERMUTE-WITHOUT-REVERSAL.</p><h3 id="Inversions-and-Insertion-Sort"><a href="#Inversions-and-Insertion-Sort" class="headerlink" title="Inversions and Insertion-Sort"></a>Inversions and Insertion-Sort</h3><p>An array A is said to have an inversion at (i, j). Exercise 5.2-5 in the text (p. 122) asks for the expected number of inversions in an array A if the elements of the array A are a uniform random permutation. The solution of exercise 5.2-5 is provided.</p><p>Let A be an array of integers with no repeated values. The rank of an element of A is the index at which the value appears in the sorted permutation of A. For example, if A = &lt;17, 6, 10, 9&gt;, then A has inversions at (1, 2), (1, 3), (1, 4), and (3, 4), for a total of 4 inversions. The ranks of the elements 17, 6, 10, and 9 are 4, 1, 3, and 2, respectively. Suppose all permutations of the ranks of values in A are equally likely.</p><p>Use the result of Exercise 5.2-5 to give a Θ bound on the average case running time of INSERTION-SORT (p. 18) on A (for the general case, not just the example above). Be sure to describe the relationship between the number of inversions in A and the running time of INSERTION-SORT on A.</p><h3 id="Sorting-Probabilities"><a href="#Sorting-Probabilities" class="headerlink" title="Sorting Probabilities"></a>Sorting Probabilities</h3><p>For an array A (using 1-based indexing) containing the integers 1 through n in random order, in regard to sorting the integers into ascending order, answer the following (give an explanation for each answer):</p><ul><li>What is the probability before sorting that A[i] = i for all 1 ≤ i ≤ n?</li><li>For any given j such that 1 ≤ j ≤ n, what is the probability before sorting that A[j] = j?</li><li>What is the probability before sorting that A[k] ≠ k for all 1 ≤ k ≤ n?</li><li>For a given value m, where 1 ≤ m ≤ n, what is the probability before sorting that A[i] = i for all 1 ≤ i ≤ m?</li><li>If Q UICKSORT (p. 171) is used to sort A, what is the probability that the top-level call P ARTITION (A, 1, n) will result in a return value of either 1 or n?</li></ul><h3 id="Midpoint-Pivot-Quicksort"><a href="#Midpoint-Pivot-Quicksort" class="headerlink" title="Midpoint-Pivot Quicksort"></a>Midpoint-Pivot Quicksort</h3><p>Consider the pseudocode below for a version of quicksort which always picks the middle item to use as the pivot:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MID-QUICKSORT (A, <span class="selector-tag">p</span>, r)</span><br><span class="line">  <span class="keyword">if</span> <span class="selector-tag">p</span> &lt; r</span><br><span class="line">    mid = [(<span class="selector-tag">p</span> + r)/<span class="number">2</span>]</span><br><span class="line">    swap A[mid] with A[r] <span class="comment">// move middle element to pivot</span></span><br><span class="line">    <span class="selector-tag">q</span> = P ARTITION (A, <span class="selector-tag">p</span>, r)</span><br><span class="line">    MID-QUICKSORT (A, <span class="selector-tag">p</span>, <span class="selector-tag">q</span> - <span class="number">1</span>)</span><br><span class="line">    MID-QUICKSORT (A, <span class="selector-tag">q</span> + <span class="number">1</span>, r)</span><br></pre></td></tr></table></figure><p>This code uses the version of P ARTITION on p. 171 of the textbook.</p><p>Find a permutation of the five numbers 11, 22, 33, 44, 55 which generates worst-case behavior when given as input to MID-QUICKSORT; that is, a sequence such that every partition result will have 0 elements in either the low or high range. Show the input, output, and q value for every call to P ARTITION using your worst-case input.</p>]]></content>
    
    <summary type="html">
    
      代写四个算法小程序，不需要写具体编程代码，使用伪代码即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS1210-Educational-Data</title>
    <link href="https://tk1307993.coding.me/CS1210-Educational-Data.html"/>
    <id>https://tk1307993.coding.me/CS1210-Educational-Data.html</id>
    <published>2020-04-03T05:22:17.000Z</published>
    <updated>2020-04-03T05:25:10.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>For this two-part project you will be working with a medium-size dataset (about 800K records) of education statistical indicators obtained from the World Bank. The dataset consists of two file:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f308b71c<span class="number">-00</span>be<span class="number">-4519</span><span class="number">-9</span>b0c<span class="number">-0</span>d3100b75092_Data.csv</span><br><span class="line">f308b71c<span class="number">-00</span>be<span class="number">-4519</span><span class="number">-9</span>b0c<span class="number">-0</span>d3100b75092_Definition and Source.csv</span><br></pre></td></tr></table></figure></p><p>both in csv or comma-separated value format. The first file contains the data, with each record having five fields, described in the first line of this file as:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country,CountryCode,SeriesCode,<span class="number">2015</span> <span class="string">[YR2015]</span></span><br></pre></td></tr></table></figure></p><p>The next 762,000 lines contain records of this form, while the last five lines look like:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Data from database:</span> Education Statistics - All Indicators,,,,</span><br><span class="line"><span class="symbol">Last Updated:</span> <span class="number">10</span> / <span class="number">04</span> / <span class="number">2016</span>,,,,</span><br></pre></td></tr></table></figure><p>and can safely be ignored (these lines are either blank - hence the rows of commas - or contain data provenance information).<br>The second file contains information about the data contained in the first file. Each line is a record consisting of four fields, described in the first line of this file as:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code, Indicator Name, <span class="keyword">Long</span> definition, <span class="keyword">Source</span></span><br></pre></td></tr></table></figure></p><p>Each of these lines can be quite long, especially (and not surprisingly) the field called “Long definition.” Using the elipsis (“…”) to shorten the line, a sample field (the 10th line of the file to be precise) looks like:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIS<span class="selector-class">.NERA</span>.<span class="number">3</span>, <span class="string">"Adjusted..."</span>, <span class="string">"Total..."</span>, UNESCO Institute <span class="keyword">for</span> Statistics</span><br></pre></td></tr></table></figure></p><p>Aside from the textual descriptions, the most interesting field here is the first, which by design contains interesting information about the type of data represented, and which is also appears as the third field in the data file. The key idea is that records in the data file that share the same “Series Code” (or simply “Code” as its called in the definitions file file) are by definition directly comparable. So, for example, if I am interested in the adjusted net enrollment rate for females in primary school (SE.PRM.TENR.FE) across different countries or populations, I could compare all the records from the data file with this “Series Code” (there are 254 of these).</p><h3 id="Reading-Data"><a href="#Reading-Data" class="headerlink" title="Reading Data"></a>Reading Data</h3><p>Your first task is to read these data into Python and construct an appropriate representation of these records. You will write two functions to achieve this end.<br>First, write a function</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defreadDefinitions</span><span class="params">(filename)</span></span>:</span><br></pre></td></tr></table></figure><p>which opens file filename of the second type described above, that is:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code, Indicator Name, Long definition, Source</span><br><span class="line"><span class="keyword">and</span> returns <span class="keyword">a</span> dictionary D <span class="keyword">with</span> entries <span class="keyword">of</span> <span class="keyword">the</span> form:</span><br></pre></td></tr></table></figure></p><p>Code: [ Indicator Name, Long definition, Source ]<br>Reading csv files can be tricky, because it is quite possible that some fields may contain explicit commas embedded in a single field (see, e.g., the “Long definition” field). In such cases, these extraneous commas are protected by enclosing the field in quotes. For example, consider the following line taken from a hypothetical csv file representing Olympic gold medalists:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Fencing</span>, <span class="string">"Garozzo, Daniele"</span>, <span class="keyword">ITA, </span><span class="number">2016</span></span><br></pre></td></tr></table></figure></p><p>Here, the correct interpretation is a single record (or line) containing four fields (and not five) because the comma in the gold medalist’s name is not semantically equivalent to the other three commas in the line. Fortunately, because this is such a common issue, Python provides a library for reading csv files while honoring the semantics of commas embedded in quoted fields. To use the library, you must first:<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br></pre></td></tr></table></figure></p><p>You will need to read up on how to use the csv library: more information can be found here:<br><a href="https://docs.python.org/3.5/library/csv.html" target="_blank" rel="noopener">https://docs.python.org/3.5/library/csv.html</a><br>Important: do not attempt to split() the line, as I can guarantee this will fail. To be successful, you will need to use the csv library. Also, be wary of the first line in the csv file, which is a “header” and should not be included in the dictionary as data.<br>The second function you should write:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defreadData</span><span class="params">(filename)</span></span>:</span><br></pre></td></tr></table></figure><p>should open a file filename of the first type above, that is:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country, CountryCode, SeriesCode, <span class="number">2015</span> <span class="string">[YR2015]</span></span><br></pre></td></tr></table></figure></p><p>and return a tuple of two dictionaries, C and V . The first dictionary, C, should have entries of the form:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Country</span> <span class="meta">Code</span>: Country</span><br></pre></td></tr></table></figure></p><p>and therefore should look like, e.g.,<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'USA'</span>: <span class="string">'United States'</span>, <span class="string">'ITA'</span>: <span class="string">'Italy'</span>, <span class="string">'PRT'</span>: <span class="string">'Portugal'</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>while the second dictionary, V , in the tuple should have entries of the form:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Series</span> <span class="meta">Code</span>: &#123;Country <span class="meta">Code</span>: <span class="number">2015</span> [YR2015], ...&#125;</span><br></pre></td></tr></table></figure></p><p>and thus look like, e.g.,<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'UIS.LR.AG15T99.GPI'</span>: &#123;<span class="string">'ARE'</span>: <span class="string">'1.02945005893707'</span>, ...&#125;, ...&#125;</span><br></pre></td></tr></table></figure></p><p>Again, be wary of the fact that the first line in this csv file is also a “header” and should not be include in the dictionary as data, but nor should the last five lines of this file, which represent summary information and not real data.<br>In constructing the readData() function, it is important not to include entries where the corresponding value is missing (missing values in this data file are indicated by a string, ‘..’); there will be many fewer values than the 762000 rows in the data file might imply. To get to the heart of the matter, you will write a third function:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defmakeProfiles</span><span class="params">(C, V)</span></span>:</span><br></pre></td></tr></table></figure><p>which will return a dictionary, P, indexed by country code with values consisting of the number of datapoints present in V for that particular country. Thus part of P produced by your first implementation of makeProfiles() might look like:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'MAR'</span>: <span class="number">307</span>, <span class="string">'IBT'</span>: <span class="number">0</span>, <span class="string">'WSM'</span>: <span class="number">293</span>, <span class="string">'URY'</span>: <span class="number">269</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>Indicating that there is no data about ‘IBT’ present in this dataset. You will note that ‘IBT’ is defined in C as ‘IDA &amp; IBRD total’ rather than some country name; IDA and IBRD stand for International Development Association and International Bank for Reconstruction and Development, respectively, two branches of the World Bank from which these data were obtained. Given that no data is provided, your complete version of makeProfiles() should alter C to remove the entry for IBT and any other similar code that has no data associated with it. Thus the value of P produced by your final version of makeProfiles() might look like:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'SMR'</span>: <span class="number">14</span>, <span class="string">'UMC'</span>: <span class="number">28</span>, <span class="string">'ARG'</span>: <span class="number">263</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>should not contain any entries with 0 values, and should also modify C to remove those entries. If your code is like mine, final versions of both P and C should contain 241 entries.<br>Finally, you will implement a plotting function:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defplotProfile</span><span class="params">(P)</span></span>:</span><br></pre></td></tr></table></figure><p>that will reproduce the figure shown here below.<br>Note how all of the country codes are arranged alphabetically along the x axis, with the y values corresponding to the number of datapoints for that particular country code. You will need to study the matplotlib pyplot documentation:<br><a href="http://matplotlib.org/api/pyplot_api.html" target="_blank" rel="noopener">http://matplotlib.org/api/pyplot_api.html</a><br>to learn how to make your code work.<br>Once this code is complete, we’ll turn our attention to a more interesting analysis of the data.</p>]]></content>
    
    <summary type="html">
    
      练习使用Python处理数据，以及matplot库的使用。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CSCI4150-File-System-Server</title>
    <link href="https://tk1307993.coding.me/CSCI4150-File-System-Server.html"/>
    <id>https://tk1307993.coding.me/CSCI4150-File-System-Server.html</id>
    <published>2020-03-28T02:39:31.000Z</published>
    <updated>2020-03-28T02:42:06.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RequirementRequirement"><a href="#RequirementRequirement" class="headerlink" title="RequirementRequirement"></a>RequirementRequirement</h3><p>This project is intended to integrate many aspects of OS design and implementation, from scheduling, to synchronization, to memory management, and file systems. You are to implement this in the xv6 OS (I’ll provide a repo link via Piazza). You will implement microkernel services on top of xv6 which is a monolithic OS! This is a large and hard project and is scoped around three team members. If you choose a smaller team, you’re still responsible for the entire project, so I suggest you form your team soon. The most important thing you can do to ensure you finish on time is to ​start early. Like now. To the keyboard!</p><h3 id="Final-goal-OS-Service-to-do-File-system-Checkpoint-Restore"><a href="#Final-goal-OS-Service-to-do-File-system-Checkpoint-Restore" class="headerlink" title="Final goal: OS Service to do File-system Checkpoint-Restore"></a>Final goal: OS Service to do File-system Checkpoint-Restore</h3><p>The final goal of the project is to implement a File-System Server (FSS) – implemented as a normal process – that communicates with the other processes in the system (called “clients), receiving requests for file system services (e.g. similar to open, read, write, close, mkdir, unlink), and it will make those calls on behalf of the requesting process. However, it will also be smart enough to enable the “undo” of any changes made to the file system by those processes. It will do this by saving the contents of files and directories to a “checkpoint/“ subdirectory when modifications are made. To restore this checkpoint, a simple program can simply copy everything incheckpoint/into the normal file system. The communication with the FSS is through shared memory regions coordinated with mutexes and condition variables (which xv6 does not already provide).</p><h3 id="Specification-and-Implementation-Plan"><a href="#Specification-and-Implementation-Plan" class="headerlink" title="Specification and Implementation Plan"></a>Specification and Implementation Plan</h3><p>There are three main modules to this project.</p><ol><li><p>The FSS which uses the normal kernel API to provide access to the file-system, and also to perform the operations to save files/directories when they are modified for checkpointing. This requires zero kernel programming.</p></li><li><p>The shared memory support between the FSS, and the processes that are using the FSS’s checkpointing support. This shared memory region is used to pass both the request being made (i.e. which type of call is it, read, open, etc…), and the corresponding data that is required for that call (the path and flags for open, the buffer and its length for read, etc…). This will require kernel hacking to make a shared memory region between the client and the FSS.</p></li><li><p>The synchronization code necessary to provide synchronization on that shared buffer. This will include both mutexes, and the ability to block waiting for an event (i.e. a new client request) – a function normally provided by condition variables. This will require kernel hacking to implement mutexes for user-level, and to add logic for condition variables. The FSS process should always execute with high priority as it is providing a service to other processes in the system.</p></li></ol><p>There are varying levels of support for each of these three components, and you should be able to develop each relatively independently, so if one person does not meet their commitment, the others should be able to still make progress. Level 1 is intended to be very basic functionality. Leveling up from there strengthens your project. Only a project at project level 5 will receive full credit. Each level assumes the functionality from the previous levels (i.e. you can’t get level 2 without achieving level 1).</p><p>A note on group work and collaboration: I designed these modules to be independent, but that does not mean that they are of equal difficulty. Do not plan on simply assigning one to each team member, and when one of the modules is complete assume that team member is “done”. After a module is done, you must help the other members on the other modules. Each team member must stay up-to-date with each other teammate. You should use github to coordinate your code modifications. In fact, I highly​ suggest that once each of the implementations get to Level 1, that you start integrating them together. Once integrated, you can keep leveling up in each module.</p><h3 id="Module-1-File-System-Server"><a href="#Module-1-File-System-Server" class="headerlink" title="Module #1: File-System Server"></a>Module #1: File-System Server</h3><p>The FSS uses the normal kernel API and is a normal process. It uses IPC to talk to clients. Those clients make requests to it to access the file system on their behalf. This is not very useful on its own, but the FSS is smart because it provides a checkpoint and restore functionality. This means that when the FSS starts, it begins recording all files and directories that are modified by clients. It will record these files/directories in the /checkpoint/ directory. So for example, if /hw.txt exists, and you wrote a program to write to that file (via IPC with the FSS), then the FSS would copy the /hw.txt file to /checkpoint/hw.txt, and then perform the write on the client’s behalf. If you write a program to remove a directory, /foo/, then the FSS would add /checkpoint/foo/ before removing the directory for the client. A separate program called restore can be executed to restore all files and directories in the /checkpoint/ directory into their original location. This will undo all edits made in the mean-time. You do not have to track files and directories that are created and remove them upon restore. This module requires no kernel programming.</p><p>You’ll first need to understand how the client and the FSS communicate via IPC. Each of the file-system system calls need a corresponding FSS operation, prepended with fss_. The client will call these operations instead of the normal system calls. Thus, you will need to provide your implementations for fss_read, fss_write, fss_open, fss_close, fss_mkdir, fss_unlink. Note that open and mkdir are used to create files and directories, respectively, and unlink isused to remove files and directories. These functions will be used to pass through IPC to the FSS, which function is being performed (e.g. you could pass it as a string), and the arguments being passed to the function. For example, you could define a structure:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fss_request</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> operation[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> arg;</span><br><span class="line"><span class="keyword">char</span> data[<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Where the operation field contains the operation (“mkdir”, “close”, etc…), arg contains any numerical argument passed to the function, and data contains any actual data that is meant to be passed. Once you fill out this structure, you can pass it over IPC to the FSS, and it can read the structure and convert the request into its own logic for making real file-system system calls to the kernel. It is cleaner to use an enumerated type for the operation.</p><p>A difficult part of this arrangement is that the FSS must return the return value from the kernel back to the client, and in the case of read, we must return the data that was read. So you’ll likely want a fss_response structure that holds that response as well (e.g. an couple of ints, and a array for the data). It can send this structure via IPC back to the client that made the request</p><h3 id="Module-2-Shared-Memory"><a href="#Module-2-Shared-Memory" class="headerlink" title="Module #2: Shared Memory"></a>Module #2: Shared Memory</h3><p>Shared memory is often used for IPC between processes. It is more efficient than message passing (e.g. pipes) as you can often have fewer memcpy operations (e.g. zero or one vs. two). This module will add shared memory to your project. Xv6 does not support shared memory, so this will require understanding the xv6 mechanisms for mapping memory into processes, and how that interacts with calls to sbrk (extending the amount of memory accessible by a process), and fork/exec/exit. </p><h3 id="Module-3-Synchronization-and-Scheduling"><a href="#Module-3-Synchronization-and-Scheduling" class="headerlink" title="Module #3: Synchronization and Scheduling"></a>Module #3: Synchronization and Scheduling</h3><p>Module 2 provides shared memory between processes. Now that we have shared memory, we must synchronize access to it! We want to provide a means for passing requests to the FSS, and for synchronizing the return value being passed to the client. Xv6 does not provide any memory sharing between user-level processes, so you’re job is to implement a set of mutex system calls, and to enable processes to block waiting for requests/responses, you’ll also provide condition variable system calls. </p><h3 id="Overall-Project"><a href="#Overall-Project" class="headerlink" title="Overall Project"></a>Overall Project</h3><p>The levels for the overall project are:</p><ul><li>Level 0: Level 1 in one module.</li><li>Level 1: Level 1 at least two modules.</li><li>Level 2: Level 1 in three modules, and level 2 in at least two. Two of the modules must be integrated together.</li><li>Level 3: All three modules must be integrated together.</li><li>Level 4: Highest level - 1 in each module.</li><li>Level 5: Highest level in all modules.</li></ul>]]></content>
    
    <summary type="html">
    
      代写大型的OS作业，实现一个文件系统服务。全方面考察调度、同步、内存管理以及文件系统方面的知识。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>CSCA08-UnitTests</title>
    <link href="https://tk1307993.coding.me/CSCA08-UnitTests.html"/>
    <id>https://tk1307993.coding.me/CSCA08-UnitTests.html</id>
    <published>2020-03-25T01:39:39.000Z</published>
    <updated>2020-03-25T01:40:58.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In our final exercise of the term, we’re going to be practicing writing UnitTests. The structure of the tests isn’t really as important as the testing plan, but we get to test both.</p><h3 id="What-to-Test"><a href="#What-to-Test" class="headerlink" title="What to Test"></a>What to Test</h3><p>We wanted to come up with a function for you to test that had a bit of everything: loops, selection, lists, strings, dictionaries, objects, etc. But we had a bit of a conundrum. We wanted something complicated enough to be interesting, but knew you were busy with your assignment, and didn’t want everyone to have to spend lots of time writing a new function in order to test it.</p><p>That’s when it hit us. You’re already writing a function that you’ll probably want to test anyway… cartesian product! It’s got everything we need, you already have to write it, and now it can help you test your own code for A2. (A pretty smart move if I do say so myself).</p><h3 id="How-to-Start"><a href="#How-to-Start" class="headerlink" title="How to Start"></a>How to Start</h3><p>Before you start writing any code, you should think about coverage testing, and how we came up with a test plan in lecture. Figure out all of the parameters, and the important ranges they fall into. Then write one test for each possible combination of ranges. The goal here is to find one example test case for all possible regions of your testing space.</p><p>Most of your actual tests will probably involve code that looks like this (now do you see why we made you write set dict and get dict?<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">d1 = <span class="meta">&#123;...&#125;</span></span><br><span class="line">d2 = <span class="meta">&#123;...&#125;</span></span><br><span class="line">t1 = <span class="type">Table</span>()</span><br><span class="line">t2 = <span class="type">Table</span>()</span><br><span class="line">t1.set_dict(d1)</span><br><span class="line">t2.set_dict(d2)</span><br><span class="line">result_table = squeal.cartesian_product(t1, t2)</span><br><span class="line">result_dict = result_table.get_dict()</span><br><span class="line">expected_dict = <span class="meta">&#123;...&#125;</span></span><br><span class="line">self.assertEqual(result_dict, expected_dict)</span><br></pre></td></tr></table></figure></p><h3 id="What-to-Do"><a href="#What-to-Do" class="headerlink" title="What to Do"></a>What to Do</h3><p>In a file called ex10.py, you should write a UnitTest to thoroughly test cartesian product. Your tests will actually be run on a version of the code that I have written. Therefore, you will be doing black box testing (you don’t know if I implemented the cartesian product or the Table class in the same way you will… in fact, you can bet that I probably won’t). My cartesian product function will be in a file called squeal.py, and my Table class will be in a file called database.py. Both will be placed into the same directory as your UnitTest. We’ve provided you with some starter code, just to make sure you can access everything correctly.</p><h3 id="What-to-Submit"><a href="#What-to-Submit" class="headerlink" title="What to Submit"></a>What to Submit</h3><p>Submit your ex10.py file to MarkUs as usual. Your UnitTest methods do not need any DocStrings, and unless you’re doing something particularly unusual, you probably don’t need any internal comments either. However, your method names and error messages should be descriptive enough to properly explain what each test case does and why it’s useful. Remember that writing frivolous test cases is no better than missing useful ones.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业，考察Python的Unit tests的使用方法，关注测试的code coverage。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSCA08-Inheritance</title>
    <link href="https://tk1307993.coding.me/CSCA08-Inheritance.html"/>
    <id>https://tk1307993.coding.me/CSCA08-Inheritance.html</id>
    <published>2020-03-23T07:37:13.000Z</published>
    <updated>2020-03-25T02:34:56.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this exercise, we will be working with inheritance, and thinking about how we can set up our inheritance hierarchy to make our lives easier. There is an easy way and a difficult way to complete this exercise. If you plan appropriately, you’ll find you won’t have to write very much code at all.</p><h4 id="Shapes"><a href="#Shapes" class="headerlink" title="Shapes"></a>Shapes</h4><p>Consider the following 4 shapes:</p><h4 id="Parallelogram"><a href="#Parallelogram" class="headerlink" title="Parallelogram"></a>Parallelogram</h4><p>A four sided figure with parallel pairs of sides. A Parallelogram is defined by the lengths of its two pairs of sides (labelled base and side in the picture below) and the interior angle (in degrees) between adjacent sides (labelled theta in the picture below).</p><h4 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h4><p>A parallelogram with four right angles. A Rectangle is defined by the lengths of its two pairs of sides (labelled base and side in the picture below).</p><h4 id="Rhombus"><a href="#Rhombus" class="headerlink" title="Rhombus"></a>Rhombus</h4><p>A parallelogram with four equal sides. A Rhombus is defined by the length of its sides (labelled base in the picture below) and the interior angle (in degrees) between adjacent sides (labelled theta in the picture below).</p><h4 id="Square"><a href="#Square" class="headerlink" title="Square"></a>Square</h4><p>A parallelogram with four equal sides and four right angles; both a Rectangle and a Rhombus. A Square is defined by the length of its sides (labelled base in the picture below).</p><p>Your first task is to figure out the IS-A hierarchy of these shapes. Draw it out in a piece of paper. Are there any instances of multiple parents?</p><h3 id="Your-Task"><a href="#Your-Task" class="headerlink" title="Your Task"></a>Your Task</h3><p>You must write four classes: Parallelogram, Rectangle, Rhombus and Square, ensuring that the class hierarchy follows your diagram from the previous step. You may create additional classes if you wish (are there any good reasons why you might want to do this?). The parameters of init methods should always be input in the following order: (base, side, theta) (theta being given in degrees), though of course, not every class’ init will take all three. So for example, a Rectangle will only take (base, side).</p><p>Objects of these classes must have the following methods:</p><ul><li>area() - returns the area of the shape<br>Note: The area of a parallelogram is computed by base side sin(theta)<br>Warning: function math.sin in Python expects its argument to be an angle given in radians - take a look at the function math.radians to convert between degrees and radians.</li><li>bst() - returns a list of three floats: [base, side, theta]. Even if a shape doesn’t need one of the parameters for its input, it should still be able to return it. (e.g., a 10 x 10 square would return: [10.0, 10.0, 90.0]).</li><li>When printed, each shape should return a string with text in the following format “I am a shape with area area”. Four example, a 10 x 10 square would return the string: “I am a Square with area 100”.</li></ul><h3 id="Be-Lazy"><a href="#Be-Lazy" class="headerlink" title="Be Lazy"></a>Be Lazy</h3><p>One way to solve this would be to write four completely independent classes, and have each class completely implement all of their own functions. This would be a bad idea (why?). If you use inheritance correctly, you should find the exercise much simpler. Remember, you should never calculate something when you can just get another method to do the work for you. Hint: It’s possible to set more than one parent for your class. Are there any shapes here for which that would be a sensible thing to do?</p><h3 id="What-to-Submit"><a href="#What-to-Submit" class="headerlink" title="What to Submit"></a>What to Submit</h3><p>All of your code should be submitted to MarkUs in a file called ex9.py that doesn’t import anything other than math, and does not ask for input or print anything when imported.</p>]]></content>
    
    <summary type="html">
    
      代写Interitance的小练习作业，求图形的边长和面积。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC401-ATM-Machine</title>
    <link href="https://tk1307993.coding.me/CSC401-ATM-Machine.html"/>
    <id>https://tk1307993.coding.me/CSC401-ATM-Machine.html</id>
    <published>2020-03-18T07:37:13.000Z</published>
    <updated>2020-03-18T02:59:54.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this assignment is to assess your understanding of</p><ul><li>Encapsulation in functions</li><li>Namespaces: global vs local</li><li>Exception handling</li><li>Program modularity<br>Next week, we will continue with chapter 10 recursion.</li></ul><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ul><li>Include your full name as a comment on the first line of your Python program.</li><li>Submit (upload) to the dropbox one file labeled as YourName_HW7.py</li></ul><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>You are to simulate a simple ATM machine. An account holder (user) should be able to enter their pin number and select from a menu of transactions: Deposit, Withdraw, Balance or Quit. You are to assume that the user has only one account on which these transactions can be performed. This account is associated with the user’s pin number. The ATM should properly and regularly communicate with the user. The ATM should get information on current account information from a file. An accounts.txt file is posted with this assignment. Examine the structure of each line of the file which contains a 4-digit code, first and last names, and the current account balance.</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Note: whenever I use ‘Code the exception’, this means you need to include code in a ‘try’ block to catch the exception caused by a runtime error.<br>You may not use global variables; all variables must be local.</p><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>Write a function startUp(fname) that takes as input a filename that contains the account holder information and current balance. The file should be read and the data stored in a dictionary with the pin as the key and the remaining information as the value.<br>Note: the current balance is a float data type. Do an explicit conversion to float on that list item. Code an exception (‘Cannot get to the file’). The function should return two values: Boolean, dictionary; for example: if you named your dictionary, daccts, and the file was successfully read and the dictionary successfully created, then return (True, daccts); if the file was not successfully read, return (False, daccts).</p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>Write a function getUser(proceed, dictionary) that takes as input a Boolean value and the dictionary you created in startUp. Prompt the user to enter a pin number. If the pin is valid, the function should return (user, proceed), where user is the dictionary key value; if the pin is invalid, print (‘Incorrect pin’) and return (None, False).</p><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>Write a function menu(name) that takes as input the user’s first name, greets the user and displays the menu options: 1. Deposit, 2: Withdraw, 3.Check Balance, 4. Quit. If the user enters an invalid value (i.e. not 1, 2, 3 or 4) display the menu option again and give the user a chance to enter a value again. Once a valid number is entered, the function should return the number of the chosen option.</p><h4 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h4><p>Write a function getAmount() that takes no input. Inside a loop, prompt the user for an amount to be either deposited or withdrawn, at this point it does not matter which it is. The amount must be converted to float. Code an exception (‘You entered an incorrect amount. Please try again’). An interruption would be caused if the user enters a string instead of a numeric value, or presses the enter key without entering anything. Stay in the loop until a valid number is entered and return amount.</p><h4 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h4><p>Write a function deposit(balance) that takes as input the user’s account balance. The function calls getAmount(), calculates and displays the new balance. The function returns the new balance.</p><h4 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h4><p>Write a function withdraw(balance) that takes as input the user’s account balance. The function calls getAmount(). If the amount to be withdrawn is greater than the balance display (‘Insufficient funds to complete the transaction’). The user should be prompted to enter a new amount, until the amount entered is less than the balance. The function calculates and displays the new balance. The function returns the new balance.</p><h4 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h4><p>Write a function balance(name, balance) that takes as input the user’s name and balance and prints the message ‘Your current balance is $xxxx.xx’ where xxxx.xx is the current balance amount. This function does not return a value.</p><h4 id="Step-8"><a href="#Step-8" class="headerlink" title="Step 8"></a>Step 8</h4><p>Write a function main() that will control the flow of your program. You will build this code as you continue to create functions. main() should call startup, getUser and menu. It should contain a loop that determines which transaction the user has chosen to process and allows the user to process as many transactions as desired.</p><ul><li>If the user chooses to make a deposit, the deposit function is called and the dictionary is updated with the returned balance.</li><li>If the user chooses to make a withdrawal, the withdraw function is called and the dictionary is updated with the returned balance.</li><li>If the user chooses to check the account balance, the balance function is called.</li><li>If the user chooses to quit, exit the loop and print (‘Goodbye’). Once, the user quits, the program should terminate. Note: suggestion - use a Boolean data type to determine when the loop should terminate</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The following is only one test case. You should do several test cases to evaluate all the exceptions you have coded and other possible data entry errors.</p><p>Sample execution:<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Welcome -- Please enter your pin number 4466</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Kay :</span></span><br><span class="line"><span class="attribute">1</span>: Deposit</span><br><span class="line"><span class="attribute">2</span>: Withdrawal</span><br><span class="line"><span class="attribute">3</span>: Check Balance</span><br><span class="line"><span class="attribute">4</span>: Quit</span><br><span class="line"></span><br><span class="line"><span class="attribute">Enter number</span>: 3</span><br><span class="line"><span class="attribute">Your current balance is $356.00</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Kay :</span></span><br><span class="line"><span class="attribute">1</span>: Deposit</span><br><span class="line"><span class="attribute">2</span>: Withdrawal</span><br><span class="line"><span class="attribute">3</span>: Check Balance</span><br><span class="line"><span class="attribute">4</span>: Quit</span><br><span class="line"></span><br><span class="line"><span class="attribute">Enter number</span>: 2</span><br><span class="line"><span class="attribute">Amount</span>: 600</span><br><span class="line"><span class="attribute">Insufficient funds to complete the transaction</span></span><br><span class="line"><span class="attribute">Amount</span>: 300</span><br><span class="line"><span class="attribute">Your new balance is $56.00</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Kay :</span></span><br><span class="line"><span class="attribute">1</span>: Deposit</span><br><span class="line"><span class="attribute">2</span>: Withdrawal</span><br><span class="line"><span class="attribute">3</span>: Check Balance</span><br><span class="line"><span class="attribute">4</span>: Quit</span><br><span class="line"></span><br><span class="line"><span class="attribute">Enter number</span>: 1</span><br><span class="line"><span class="attribute">Amount</span>: 100</span><br><span class="line"><span class="attribute">Your new balance is $156.00</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Kay </span>:    </span><br><span class="line"><span class="attribute">1</span>: Deposit</span><br><span class="line"><span class="attribute">2</span>: Withdrawal</span><br><span class="line"><span class="attribute">3</span>: Check Balance</span><br><span class="line"><span class="attribute">4</span>: Quit</span><br><span class="line"></span><br><span class="line"><span class="attribute">Enter number</span>: 4</span><br><span class="line"><span class="attribute">Goodbye</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      代写一个ATM机的模拟器，实现ATM机基本的存钱/提现/查询等功能。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC401-Recursive</title>
    <link href="https://tk1307993.coding.me/CSC401-Recursive.html"/>
    <id>https://tk1307993.coding.me/CSC401-Recursive.html</id>
    <published>2020-03-15T07:37:13.000Z</published>
    <updated>2020-03-15T06:45:42.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this assignment is to assess your understanding of</p><p>Recursive functions<br>Recursive thinking<br>Next week, we will continue with topics in Chapter 10.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Include your full name as a comment on the first line of your Python program.<br>Submit (upload) to the dropbox one file labeled as YourName_HW8.py</p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>All of the following problems use recursion. So, you are cannot use any types of loops, string processing functions other than slicing, global variables, remove, replace, etc.</p><h4 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h4><p>Write a recursive function stars(n) that takes an input a nonnegative integer and generates the pattern of stars shown below:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; stars(4)</span><br><span class="line">***<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>**<span class="strong">*</span></span><br><span class="line"><span class="strong">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure></p><p>Your function should produce a pattern for any nonnegative integer.</p><h4 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h4><p>Write a recursive function alt(s,t) that takes as input two strings and mixes string s and t with alternating characters from each string.. Check that s and t have the same length; if not, return immediately.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; alt(<span class="string">'abc```de'</span>, <span class="string">'vwxyz'</span>)</span></span><br><span class="line">avbwcxdyez</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; alt(<span class="string">'hello'</span>, <span class="string">'world'</span>)</span></span><br><span class="line">hweolrllod</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem 3"></a>Problem 3</h4><p>Write a recursive function check(s) that take a string representing a password as input and returns all the characters that are digits ( 0 -9)<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; check(<span class="string">'abc'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; check(<span class="string">'1abc2efg'</span>)</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; check(<span class="string">'a0b8nd79'</span>)</span><br><span class="line"><span class="number">9</span> <span class="number">7</span> <span class="number">8</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h4 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem 4"></a>Problem 4</h4><p>Write a recursive function prompt() that asks the user to enter a password. If the user simply hits return without entering anything, the function should prompt again, until the user enters a string. The string is then returned (not printed). Do not use any type of loop.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; prompt()</span><br><span class="line">Enter <span class="string">password:</span></span><br><span class="line">Enter <span class="string">password:</span></span><br><span class="line">Enter <span class="string">password:</span></span><br><span class="line">Enter <span class="string">password:</span></span><br><span class="line">Enter <span class="string">password:</span>abc1ghki9$%funny</span><br><span class="line"><span class="string">'abc1ghki9$%funny'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      代写四个小函数，所有的函数只能用recursion实现，练习基础的recursive的用法。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS7106-Speech-Synthesiser</title>
    <link href="https://tk1307993.coding.me/CS7106-Speech-Synthesiser.html"/>
    <id>https://tk1307993.coding.me/CS7106-Speech-Synthesiser.html</id>
    <published>2020-03-11T07:37:13.000Z</published>
    <updated>2020-03-11T03:28:22.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction-Speech-Synthesiser"><a href="#Introduction-Speech-Synthesiser" class="headerlink" title="Introduction - Speech Synthesiser"></a>Introduction - Speech Synthesiser</h3><p>For this assignment you will be required to create a Speech Synthesiser Python program. This will be a very basic waveform concatenation system, whereby the acoustic units are recordings of monophones. You will be provided with several files that you must use to do this:</p><h4 id="SimpleAudio-py"><a href="#SimpleAudio-py" class="headerlink" title="SimpleAudio.py"></a>SimpleAudio.py</h4><p>This is a version of the SimpleAudio.py module that we have used in the lab sessions. The Audio class will allow you to save, load and play .wav files as well as perform some simple audio processing functions. You should not modify this file.</p><h4 id="synth-py"><a href="#synth-py" class="headerlink" title="synth.py"></a>synth.py</h4><p>This is a skeleton structure of the program. Your task is to fill in the missing components to make it work. You are free to add any classes, methods or functions that you wish but you must not change the existing argparse arguments.</p><h4 id="monophones"><a href="#monophones" class="headerlink" title="monophones/"></a>monophones/</h4><p>A folder containing .wav files of monophones.</p><h4 id="examples"><a href="#examples" class="headerlink" title="examples/"></a>examples/</h4><p>A folder containing example .wav files of how the synthesiser should sound.</p><h3 id="Task-1-Basic-Synthesis"><a href="#Task-1-Basic-Synthesis" class="headerlink" title="Task 1 - Basic Synthesis"></a>Task 1 - Basic Synthesis</h3><p>The primary task for this assignment is to design a program that takes an input phrase and synthesises it. The main steps in the procedure are as follows:</p><ul><li>normalise the text (convert to lower/upper case, remove punctuation, etc.)</li><li>convert the word sequence to a phone sequence - you should make use of nltk.corpus.cmudict to do this.</li><li>concatenate the monophone wav files together in the right order to produce synthesised audio.<br>Your program should work by executing the synth.py script from the command line with arguments, e.g. the following should play “hello”:-</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python synth<span class="selector-class">.py</span> -<span class="selector-tag">p</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>If a word is not in the cmudict then you should print a warning to the user and exit the program. You can also listen to the examples hello.wav and rose.wav which were created as follows:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python synth<span class="selector-class">.py</span> -o hello<span class="selector-class">.wav</span> <span class="string">"hello nice to meet you"</span></span><br><span class="line">python synth<span class="selector-class">.py</span> -o rose<span class="selector-class">.wav</span> <span class="string">"A rose by any other name would smell as sweet"</span></span><br></pre></td></tr></table></figure></p><p>If you execute the same commands with your program and the output sounds the same then it is likely you have a functioning basic synthesiser.</p><h3 id="Task-2-Extending-the-Functionality"><a href="#Task-2-Extending-the-Functionality" class="headerlink" title="Task 2 - Extending the Functionality"></a>Task 2 - Extending the Functionality</h3><p>Implement at least two of the following extensions:-</p><h4 id="Extension-A-Volume-Control"><a href="#Extension-A-Volume-Control" class="headerlink" title="Extension A - Volume Control"></a>Extension A - Volume Control</h4><p>Allow the user to set the volume argument (–volume, -v) to a value between 0.0 and 1.0.<br>You should use the rescale method from the Audio class to do this.</p><h4 id="Extension-B-Punctuation"><a href="#Extension-B-Punctuation" class="headerlink" title="Extension B - Punctuation"></a>Extension B - Punctuation</h4><p>If the input phrase contains a comma - insert 250ms of silence.<br>If it contains a period, question mark or exclamation mark - insert 500ms of silence.<br>Strip all other punctuation.</p><h4 id="Extension-C-Spelling"><a href="#Extension-C-Spelling" class="headerlink" title="Extension C - Spelling"></a>Extension C - Spelling</h4><p>Allow the user to set the spell argument (–spell, -s) that will synthesise spelling instead of pronunciation. Do this by converting a string into a sequence of letters, then to an appropriate phone sequence to pronounce for each letter in its alphabetic form.</p><h4 id="Extension-D-Text-Normalisation-for-Numbers"><a href="#Extension-D-Text-Normalisation-for-Numbers" class="headerlink" title="Extension D - Text Normalisation for Numbers"></a>Extension D - Text Normalisation for Numbers</h4><p>If the input phrase contains numbers in numerical form, convert them to word sequences, e.g.<br><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"The meaning <span class="keyword">of</span> life <span class="keyword">is</span> 42"</span><br><span class="line">-&gt; "the meaning <span class="keyword">of</span> life <span class="keyword">is</span> forty two"</span><br></pre></td></tr></table></figure></p><p>You should include the ability to normalise numbers from 0 up to at least 999 (“nine hundred and ninety nine”).<br>Decimal points can be handled by reciting “point” and then reading the numbers after the point as individual digits, e.g.<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Pi is about 3.14159"</span></span><br><span class="line">-&gt; <span class="string">"pi is about three point one four one five nine"</span></span><br></pre></td></tr></table></figure></p><p>Take care not to treat decimal points as periods (see Punctuation).</p><h4 id="Extension-E-Text-Normalisation-for-Dates"><a href="#Extension-E-Text-Normalisation-for-Dates" class="headerlink" title="Extension E - Text Normalisation for Dates"></a>Extension E - Text Normalisation for Dates</h4><p>If the string contains dates in the form DD/MM, DD/MM/YY or DD/MM/YYYY, then convert them to word sequences, e.g.<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Burns Night is 25/01"</span></span><br><span class="line">-&gt; <span class="string">"burns night is the twenty fifth of january"</span></span><br><span class="line"><span class="string">"John Lennon died on 1/12/80"</span></span><br><span class="line">-&gt; <span class="string">"john lennon died on the first of december nineteen eighty"</span></span><br></pre></td></tr></table></figure></p><p>You may wish to make use of the built-in datetime and/or re packages to do this.</p><h3 id="Rules-and-Assessment"><a href="#Rules-and-Assessment" class="headerlink" title="Rules and Assessment"></a>Rules and Assessment</h3><p>Your submission should abide by the following rules:-</p><ul><li>you are encouraged to discuss the assignment together but all submissions must be written individually and be your own work.</li><li>you may only use numpy, nltk, the provided files, and any packages that are built-in to Python.</li><li>you may not change any of the existing arguments provided in synth.py.</li></ul>]]></content>
    
    <summary type="html">
    
      用NLTK库，在所给的代码框架上，代写一个语言合成器的程序。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CS4117-Music-Artist-Lyrics-Model</title>
    <link href="https://tk1307993.coding.me/CS4117-Music-Artist-Lyrics-Model.html"/>
    <id>https://tk1307993.coding.me/CS4117-Music-Artist-Lyrics-Model.html</id>
    <published>2020-03-08T07:37:13.000Z</published>
    <updated>2020-03-08T01:12:44.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Core-Description"><a href="#Core-Description" class="headerlink" title="Core Description"></a>Core Description</h3><p>For the core, you will implement a program that creates a model of a music artist’s lyrics. This model receives lyric data as input and ultimately generates new lyrics in the style of that artist. To do this, you will leverage an NLP concept called an n-gram and use an NLP technique called language modeling.<br>Your understanding of the linked concepts and definitions is crucial to your success, so make sure to understand n-grams, language modeling, Python dictionaries as taught in the warmup, and classes and inheritance in Python before attempting to implement the core.<br>The core does not require you to include any external libraries beyond what has already been included for you. Use of any other external libraries is prohibited on this part of the project.</p><h3 id="Core-Structure"><a href="#Core-Structure" class="headerlink" title="Core Structure"></a>Core Structure</h3><p>In the language-models/folder, you will find four files which contain class definitions: nGramModel.py, unigramModel.py, bigramModel.py, and trigramModel.py. You must complete the prepData, weightedChoice, and getNextToken functions in nGramModel.py. You must also complete the trainModel, trainingDataHasNGram, and getCandidateDictionary functions in each of the other three files.<br>In the root CreativeAI repository, there is a file called generate.py, which will be the driver for generating both lyrics and music. For the core, you will implement the trainLyricsModels, selectNGramModel, generateSentence, and runLyricsGenerator functions; these functions will be called, directly or indirectly, by main, which is written for you.<br>We recommend that you implement the functions in the order they are listed in the spec; start with prepData and work your way down to runLyricsGenerator.</p><h3 id="Getting-New-Lyrics-Optional"><a href="#Getting-New-Lyrics-Optional" class="headerlink" title="Getting New Lyrics (Optional)"></a>Getting New Lyrics (Optional)</h3><p>If your group chooses to use lyrics from an artist other than the Beatles, you can use the web scraper we have written to get the lyrics of the new artist and save them in the data/lyrics directory for you. A web scraper is a program that gets information from web pages: ours, which lives in the data/scrapers directory.<br>If you navigate to the data/scrapers folder and run the lyricsWikiaScraper.py file, you will be prompted to input the name of an artist. If that artist is found on lyrics.wikia.com, the program will make a folder in the data/lyrics directory for that artist, and save each of the artist’s songs as a .txt file in that folder.</p><h3 id="Explanation-of-Functions-to-Implement"><a href="#Explanation-of-Functions-to-Implement" class="headerlink" title="Explanation of Functions to Implement"></a>Explanation of Functions to Implement</h3><h4 id="prepData"><a href="#prepData" class="headerlink" title="prepData"></a>prepData</h4><p>The purpose of this function is to take input data in the form of a list of lists, and return a copy of that list with symbols added to both ends of each inner list.<br>For the core, these inner lists will be sentences, which are represented as lists of strings. The symbols added to the beginning of each sentence will be ^::^ followed by ^:::^, and the symbol added to the end of each sentence will be $:::$. These are arbitrary symbols, but make sure to use them exactly and in the correct order.<br>For example, if the function is passed this list of lists:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ [<span class="symbol">'hey</span>', <span class="symbol">'jude</span>'], [<span class="symbol">'yellow</span>', <span class="symbol">'submarine</span>'] ]</span><br></pre></td></tr></table></figure></p><p>Then it would return a new list that looks like this:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ [<span class="symbol">'^::^</span>', <span class="symbol">'^:::^</span>', <span class="symbol">'hey</span>', <span class="symbol">'jude</span>', <span class="symbol">'$:::$</span>'], [<span class="symbol">'^::^</span>', <span class="symbol">'^:::^</span>', <span class="symbol">'yellow</span>', <span class="symbol">'submarine</span>', <span class="symbol">'$:::$</span>'] ]</span><br></pre></td></tr></table></figure></p><p>The purpose of adding two symbols at the beginning of each sentence is so that you can look at a trigram containing only the first English word of that sentence. This captures information about which words are most likely to begin a sentence; without these symbols, you would not be able to use the trigam model at the beginning of sentences because there would be no trigrams to look at until the third word.<br>The purpose of adding a symbol to the end of each sentence is to be able to generate sentence endings. If you ever see $:::$ while generating a sentence in the generateSentence function, you know the sentence is complete.</p><h4 id="trainModel"><a href="#trainModel" class="headerlink" title="trainModel"></a>trainModel</h4><p>This function trains the NGramModel child classes on the input data by building their dictionary of n-grams and respective counts, self.nGramCounts. Note that the special starting and ending symbols also count as words for all NGramModels, which is why you should use the return value of prepData before you create the self.nGramCounts dictionary for each language model.</p><ul><li>For the unigram model, self.nGramCounts will be a one-dimensional dictionary of {unigram: unigramCount} pairs, where each unique unigram is somewhere in the input data, and unigramCount is the number of times the model saw that particular unigram appear in the data. The unigram model should not consider the special symbols ‘^::^’ and ‘^:::^’ as words, but it should consider the ending symbol $:::$ as a word. The bigram and trigram modles should consider all special symbols as words.</li><li>For the bigram model, the dictionary will be two-dimensional. It will be structured as {unigramOne: {unigramTwo: bigramCount}}, where bigramCount is the count of how many times this model has seen unigramOne + unigramTwo appear as a bigram in the input data. For example, if the only song you were looking at was Strawberry Fields Forever, part of the BigramModel’s self.nGramCounts dictionary would look like this.</li><li>For the trigram model, the dictionary will be three-dimensional. It will be structured as {unigramOne: {unigramTwo: {unigramThree: trigramCount}}}, where trigramCount is the count of how many times this model has seen unigramOne + unigramTwo + unigramThree appear as a trigram in the input data.</li></ul><h4 id="getCandidateDictionary"><a href="#getCandidateDictionary" class="headerlink" title="getCandidateDictionary"></a>getCandidateDictionary</h4><p>This function returns a dictionary of candidate next words to be added to the current sentence. More specifically, it returns the set of words that are legal to follow the sentence passed in, given the particular language model’s training data. So it looks at the sentence, figures out what word the model thinks can follow the last words in the sentence, and returns that set of words and counts. Note: when you write this function, you may assume that that the trainingDataHasNGram function for this specific language model instance has returned True.</p><p>For each n-gram model, this function will look at the last n - 1 words in the current sentence, index into self.nGramCounts using those words, and return a dictionary of possible n-th words and their counts. For example, the unigram model is an n-gram model for which n = 1, so the unigram model looks at the previous 0 words in the sentence. Therefore, the unigram model sees every word in its training data as a candidate; in other words, the unigram model version of getCandidateDictionary should return its entire self.nGramCounts dictionary. Based on this knowledge, what dictionaries should the bigram and trigram models return?<br>Hint: the indexing method you use here will be syntactically very similar to what you did in trainingDataHasNGram.</p><h4 id="printSongLyrics"><a href="#printSongLyrics" class="headerlink" title="printSongLyrics"></a>printSongLyrics</h4><p>This function takes three parameters which are lists of lists of strings: verseOne, verseTwo, and chorus. It then prints out the song in this order: verse one, chorus, verse two, chorus.</p><h4 id="getUserInput"><a href="#getUserInput" class="headerlink" title="getUserInput"></a>getUserInput</h4><p>This function takes three parameters: teamName, which should be the name of your group; lyricsSource, which should be the name of the artist that you’re generating lyrics for; and musicSource, which should be the name of the source from which you got your music data for the reach.<br>The function returns a user’s choice between 1 and 3, looping while the user does not input a valid choice. Choice 1 is for generating lyrics; choice 2 is for generating music; and choice 3 is to quit the program.</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>This function first trains instances of language models on the lyrics and music data by calling the trainLyricsModels and trainMusicModels functions. Then, it calls getUserInput and uses the return value of that function to either generate new lyrics by calling runLyricsGenerator, or generate a song by calling runMusicGenerator. Note that the trainMusicModels and runMusicGenerator functions don’t need to be touched for the core.<br>At the beginning of main there are several string variables to hold your group’s name, the name of the artist you’re using, etc. Make sure to update these values with your team’s name and your choices of data.</p><h3 id="Tips-for-Speeding-Up-Your-Program"><a href="#Tips-for-Speeding-Up-Your-Program" class="headerlink" title="Tips for Speeding Up Your Program"></a>Tips for Speeding Up Your Program</h3><p>If your program is taking a long time to load the data and train the models, it’s likely that inefficiencies in your code are slowing down your program. The most common cause of inefficiency is too many nested loops in your trainModel functions. For example, if you have 10 words, and you run through the words once for each word in the list (i.e. 10 times), that will be 100 steps total, which is not too bad. But if you have 10,000 words in the dataset, and you look at each one 10,000 times, then that will be 100,000,000, which is bad.<br>Each version of the trainModel function can be written correctly with at most two levels of nested for loops, and a typical program should not take more than around 30 seconds to load. Try experimenting with different loop structures if your program is taking too long to load.</p><h3 id="How-to-Run-Your-Program-to-Generate-Lyrics"><a href="#How-to-Run-Your-Program-to-Generate-Lyrics" class="headerlink" title="How to Run Your Program to Generate Lyrics"></a>How to Run Your Program to Generate Lyrics</h3><p>If you are using PyCharm, open generate.py and click “Run…” in the top navigation bar. If you are working from the command line, navigate to the root directory where your CreativeAI project is stored and type:<br>python generate.py</p><p>Even if you have not implemented any of the functions in the project, the starter code should work out of the box. Therefore, you can play around with it and get a feel for how the driver in main works.</p>]]></content>
    
    <summary type="html">
    
      代写NLP作业，对音乐的作者进行分类与识别。作业提供了框架以及相关文档，按照要求一步一步往下写即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CS211-Lexical-Analysis</title>
    <link href="https://tk1307993.coding.me/CS211-Lexical-Analysis.html"/>
    <id>https://tk1307993.coding.me/CS211-Lexical-Analysis.html</id>
    <published>2020-03-05T07:37:13.000Z</published>
    <updated>2020-03-05T07:40:42.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>In this problem, you should implement the lexical analysis task for a limited version (i.e., the depth of the nested loops) of a programming language. Lexical analysis is the first stage that compilers parse and detect the possible syntax errors.</p><p>Ideally, any new (programming) languages can be designed and analyzed in the similar manner. You will need to analyze a Pascal-and-C-like language in this programming assignment.</p><p>Given a segment of the source code, your C++ code should analyze the code and extract all tokens, which include:</p><ul><li>Keywords: keywords are the words reserved by the language. They are all uppercase. In the case of this simplified language, the keywords are restricted to the set { “BEGIN”, “END”, “FOR” }</li><li>Identifiers: An identifier is used to describe the variables, which are all lower-case</li><li>Constants: Numbers like 10, … .</li><li>Operators: all arithmetic operations (i.e., +, -, *, and /), “++” and “=”</li><li>Delimiters: like “,” and “;”</li></ul><p>Your C++ code should input a text file from user, which contains the expression he/she wants the compilers to analyze. Then, your code should parse the input, detect the tokens, classify them, and print out the results.</p><p>With this assignment, you will get practice with the stack implementation which is one of the most widely used data structures. Besides, you will be familiar with string processing and input parsing, which are of crucial importance in most C++ projects.</p><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>(Data Structures) You need to implement a stack data structure to keep track of the processing and compute the depth of the nested loops. Adding elements to the stack (push) and removing objects from it (pop) are two essential methods that must be implemented. You can use any data structure to implement the stack, e.g., arrays, linked-lists, etc.</p><p>(Algorithms) Once the input expression is given, your program should decide which character should be inserted to the stack, and when the result needs to be computed. You need to detect the possible syntax errors while tracing the depth of the nested loops.</p><h3 id="Example-Run"><a href="#Example-Run" class="headerlink" title="Example Run"></a>Example Run</h3><p>Try to keep your output as close to the given format as possible:<br>In this example, the input file is “code.txt”<br>It contains the code segment below:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FOR (i, 10, ++)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">FOR</span> (j, <span class="number">10</span>, ++)</span><br><span class="line">  BEGAN</span><br><span class="line">    <span class="keyword">sum</span>=<span class="keyword">sum</span> + i + j;</span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./pa3.<span class="keyword">out</span></span><br><span class="line">INPUT&gt; Please enter the name <span class="keyword">of</span> the input <span class="keyword">file</span>:</span><br><span class="line">code.txt</span><br><span class="line"></span><br><span class="line">OUTPUT&gt; The depth <span class="keyword">of</span> nested <span class="keyword">loop</span>(s) <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line">Keywords: <span class="keyword">FOR</span> <span class="keyword">BEGIN</span> <span class="keyword">END</span></span><br><span class="line">Identifier: sum i j</span><br><span class="line"><span class="keyword">Constant</span>: <span class="number">10</span></span><br><span class="line">Operatros: ++ = +</span><br><span class="line">Delimiter: ; ,</span><br><span class="line">Syntax <span class="literal">Error</span>(s): BEGAN</span><br></pre></td></tr></table></figure><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>You should get your stack data structure working well before implementing the lexical analysis task.</p><p>The string processing to parse the input is an essential part of this assignment. You should make sure that you parse the input correctly, and you take care of all edge cases, e.g., more than one spaces between characters, no spaces, etc.</p><h3 id="Grading-Criteria"><a href="#Grading-Criteria" class="headerlink" title="Grading Criteria"></a>Grading Criteria</h3><ol><li><p>Successful Compilation: Your source code should be able to compile using g++ -Wall command without any error or warning. The output should be a valid executable. Please note that we will be using g++ compiler on Linux to grade your programs. If you are using other compilers or IDE (e.g., Visual C++), it is recommended that you test the source codes with g++ before the CANVAS submission (i.e., make sure there is no warning).</p></li><li><p>Program Correctness: The executable should be able to run correctly by giving<br>out the required output.</p></li><li><p>Programming Style: Good coding style is a key to efficient programming. We<br>encourage you to write clear and readable codes. You should adopt a sensible set of coding conventions, including proper indentation, necessary comments and more. Here are some guidelines of good programming style.</p></li></ol><h3 id="Final-Notes"><a href="#Final-Notes" class="headerlink" title="Final Notes"></a>Final Notes</h3><p>Again, remember to start the programming assignments as soon as possible. Unlike the conventional assignments, programming assignments sometimes take un-predictable amount of time to finish. Thus, have the code running first, then polish it later with the extra time before the deadline.</p>]]></content>
    
    <summary type="html">
    
      代写一个精简版的词法解析器，能够对简单语言进行解析。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Compiler" scheme="https://tk1307993.coding.me/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>CCN2042-Console-Drawing-Board</title>
    <link href="https://tk1307993.coding.me/CCN2042-Console-Drawing-Board.html"/>
    <id>https://tk1307993.coding.me/CCN2042-Console-Drawing-Board.html</id>
    <published>2020-02-28T10:40:56.000Z</published>
    <updated>2020-02-28T10:43:14.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Expected-Learning-Outcomes"><a href="#Expected-Learning-Outcomes" class="headerlink" title="Expected Learning Outcomes"></a>Expected Learning Outcomes</h3><ul><li>familiarise themselves with at least one high level language programming environment.</li><li>develop a structured and documented computer program.</li><li>understand the fundamentals of object-oriented programming and apply it in computer program development.</li><li>apply the computer programming techniques to solve practical problems.</li></ul><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this assignment, you are going to develop a Console Drawing Board that runs in the command line environment. User can input commands to generate different patterns in the drawing area.</p><p>This is a group assignment. You need to form a group with 5 to 6 students, and write a Win32 Console Application program called drawing.cpp. This is a text-based drawing board with the following requirements.</p><h3 id="System-Requirements"><a href="#System-Requirements" class="headerlink" title="System Requirements"></a>System Requirements</h3><p>When the program starts, the console should display a welcome message, and then the System Menu of the program. User can enter the options of the corresponding actions.<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Welcome Message designed by your group</span><br><span class="line">***<span class="built_in"> System </span>Menu ***</span><br><span class="line">[1] Start Drawing</span><br><span class="line">[2] Change Board Size</span><br><span class="line">[3] Instructions</span><br><span class="line">[4] Credits</span><br><span class="line">[5] Exit</span><br><span class="line">*******************</span><br><span class="line">Option (1 - 5):</span><br></pre></td></tr></table></figure></p><h3 id="Start-Drawing"><a href="#Start-Drawing" class="headerlink" title="Start Drawing"></a>Start Drawing</h3><p>When the user inputs 1 in the System Menu, an empty drawing board is displayed with a pen in the middle. Then the user controls the pen in the drawing board by inputting commands, until a “QUIT” command is entered.</p><h4 id="Drawing-Board"><a href="#Drawing-Board" class="headerlink" title="Drawing Board"></a>Drawing Board</h4><p>The drawing board consists of a square drawing area with a default size 30 x 30. The area is enclosed by a boundary with characters ‘|’ for vertical boundary, ‘-‘ for horizontal boundary, and ‘+’ for the corner.</p><h4 id="Pen"><a href="#Pen" class="headerlink" title="Pen"></a>Pen</h4><p>The initial location of the pen is in the middle of the drawing area. Then based on the user control, the pen can move within the drawing area. An arrow character is displayed in the drawing area to indicate the current location of the pen.</p><p>The pen is represented by different arrow characters according to the direction it is facing. There are 8 available directions, with 45 o each (default is 0, i.e. upward). The corresponding ASCII code in decimal of each arrow is given.</p><h4 id="User-Control"><a href="#User-Control" class="headerlink" title="User Control"></a>User Control</h4><p>User can input one or multiple commands at a time to control the action of the pen. You may assume that user always input less than 200 characters each time.</p><p>If multiple commands are input, they must be separated by at least one space. The commands are case-insensitive.</p><p>The commands are executed one by one in the sequence of user input. When all commands have been executed, the drawing board is refreshed to show the most updated drawings. Then the user can input another set of commands again.</p><p>Appropriate error checking on user input of commands is expected. Whenever an error occurs, an error message should be displayed. All remaining commands will be ignored. The drawing board is then refreshed to show the most updated status.</p><p>For example, an erroneous input may look like:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FD <span class="number">10</span> RT <span class="number">90</span> BK LT <span class="number">45</span></span><br></pre></td></tr></table></figure></p><p>Only “FD 10” and “RT 90” are executed because the argument for command “BK” is missing. The last command “LT 45” is ignored and not executed.</p><h4 id="Quit"><a href="#Quit" class="headerlink" title="Quit"></a>Quit</h4><p>When the user inputs the command “QUIT”, the system prompts for user’s confirmation. If the user inputs ‘y’ or ‘Y’, the system returns back to the System Menu. If the user inputs ‘n’ or ‘N’, the system remains at the drawing board. Other input is not acceptable and the system should ask the user to confirm again.</p><h3 id="Change-Board-Size"><a href="#Change-Board-Size" class="headerlink" title="Change Board Size"></a>Change Board Size</h3><p>When the user inputs 2 in the System Menu, the system displays the current size (length of a side, default is 30). Then the user is allowed to input the new size within the range of 20 to 50, inclusively. After the input, the system returns back to the System Menu.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>The system displays the instructions for using the console drawing board. After displaying the instruction, the system returns back to the System Menu.</p><h3 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h3><p>The system displays the personal particulars (e.g. student name, student ID, class, tutorial group, etc.) of the group members. After displaying the information, the system returns back to the System Menu.</p><h3 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h3><p>When the user inputs this option, the system prompts for user’s confirmation. If the user inputs ‘y’ or ‘Y’, the program terminates. If the user inputs ‘n’ or ‘N’, the system returns to the System Menu. Other input is not acceptable and the system should ask the user to confirm again.</p><h3 id="Other-General-Requirements"><a href="#Other-General-Requirements" class="headerlink" title="Other General Requirements"></a>Other General Requirements</h3><p>Meaningful guidelines should be printed to assist with user’s input. Whenever an option is selected, meaningful messages should be displayed.</p><p>Suitable checking on user’s input is expected. Appropriate error messages should be printed whenever unexpected situation happens, e.g., invalid input, input out-of-range, etc.</p><p>The use of functions (in addition to main function) and classes are expected in your program. Appropriate comments should be added in your source code file.</p><p>Creativity and Critical Thinking: other features that you find useful or can enhance the user experience can also be implemented.</p>]]></content>
    
    <summary type="html">
    
      用C++代写一个console的画图板，练习基本的object-oriented programming设计。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CST8284-QuizMaster</title>
    <link href="https://tk1307993.coding.me/CST8284-QuizMaster.html"/>
    <id>https://tk1307993.coding.me/CST8284-QuizMaster.html</id>
    <published>2020-02-24T01:17:13.000Z</published>
    <updated>2020-02-24T09:10:08.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The purpose of this assignment is to build an application that</p><ol><li>Locates a .quiz file on your hard drive and opens it</li><li>Reads each of the objects in that file into an array (for easier handling)</li><li>Each object contains a question and an array of possible answers, along with the correct answer, the difficulty level, the number of points awarded, etc. Therefore, each pane will need to display this information into the pane</li><li>The code loops through the array of objects, and on each iteration displays a new Q/A combination. The program terminates when the questions are finished, and displays the number of correct responses out of the total number of questions asked.</li></ol><h3 id="QuizMaster"><a href="#QuizMaster" class="headerlink" title="QuizMaster"></a>QuizMaster</h3><h4 id="Load-the-code-for-this-lab-available-on-Blackboard-into-a-new-project"><a href="#Load-the-code-for-this-lab-available-on-Blackboard-into-a-new-project" class="headerlink" title="Load the code for this lab, available on Blackboard, into a new project"></a>Load the code for this lab, available on Blackboard, into a new project</h4><ul><li>In Eclipse, create a new project called Assignment1</li><li>Download Assignment1.zip from Blackboard and open the contents into a package</li></ul><h4 id="Review-the-files-in-Assignment1-zip-and-make-sure-you-understand-their-purpose"><a href="#Review-the-files-in-Assignment1-zip-and-make-sure-you-understand-their-purpose" class="headerlink" title="Review the files in Assignment1.zip and make sure you understand their purpose"></a>Review the files in Assignment1.zip and make sure you understand their purpose</h4><p>There are four files included with this assignment, which you must use, and which you must submit with your finished assignment.<br>QuizMain is the main point of entry for your program. It performs three main actions: it loads a simple splash pane (given); it opens the file containing the Q/A objects and loads them into an array, and then loops through the array loading each question into a BorderPane with separate sections for the question, answers, and explanation; and finally displays the results of the quiz.</p><p>Note that each of the three sections is associated with a method that loads up a different Pane object. getSplashPane() loads a simple text message (“Welcome to QuizMaster”) for initial display in the centre of a BorderPane. getCurrentQAPane() uses the current QA object to load up a BorderPane with some of the components of the QA object. getResultsPane() displays the results of the quiz. getSplashPane() is provided for you; more information on the other two panes is provided below.</p><p>FileUtils is a class containing static methods that perform basic file I/O operations, including checking to see if the file exists, returning the file name, and so on. The static method getFileHandle() calls up the FileChooser dialog box, shown below, which prompts the user to select a .quiz file (to be provided), which contains the QA objects to be loaded. Note that the other utilities in this class rely on a file having been correctly selected. If the ‘Cancel’ button on the dialog is selected, then no file handle is returned from getFileHandle(), and any further attempts to return a path name to the file return an empty string.</p><p>If they do wish to continue, then prompt them with the above dialog again, otherwise execute Platform.exit() to exit the program.</p><p>The code in FileUtils is mostly complete, with the exception of the getQAArray() method, which you’ll need to supply. This method reads in the absolute path of the file returned from getFileHandle() - you can use getFileName() to return this string, assuming it was correctly supplied by the user—and loads each object into an array of QA objects, which gets returned to the user.</p><p>QuesAns is an abstract class that lists the abstract methods required elsewhere in your program.</p><p>QA extends QuesAns and supplies concrete methods. Use the QA class when you need to load the QA objects from the .ques file returned by getFileHandle(), as indicated above in part (b), and when you need to load the currentQAPane, as indicated below</p><h4 id="Supply-the-classes-methods-required-to-allow-for-the-correct-execution-of-your-program"><a href="#Supply-the-classes-methods-required-to-allow-for-the-correct-execution-of-your-program" class="headerlink" title="Supply the classes/methods required to allow for the correct execution of your program"></a>Supply the classes/methods required to allow for the correct execution of your program</h4><p>Note that the method FileUtils.showAndWait(FileUtils.ON) effectively pauses the program to give the user time to input a response. Without such a mechanism, the enhanced for loop that drives the program would simply loop through and load every pane in rapid succession, with no way to allow the user time to read questions and select answers.</p><p>There are better ways to perform this operation, but they involve code that is beyond our reach just now. For now, showAndWait() does the job. Therefore, when the user wishes to move on to the next question, the NEXT QUESTION button must execute FileUtils.showAndWait(FileUtiles.OFF), to allow the program to load the next QA object in the loop.</p><p>Also note that, for demonstration purposes, the .ques file will only contain MAX_QA_SIZE questions (initially set to 5); hence we only load MAX_QA_SIZE objects into the array, and loop through the enhanced for loop MAX_QA_SIZE times. This will change in Assignment 2 when we modify this code to accommodate files of any size.</p><p>Aside from the getQAArray code needed to complete the FileUtils class, along with the code needed to display the results at the end of the program, most of your time will be spent writing the code needed to display the current Question/Answers combination.</p><p>The getCurrentPane() method, which reads in the currentQA object, should be included in QuizMain, along with the two other ‘getPane()’ methods needed for proper execution of the program.</p><p>Your QA input pane should look something like the screenshot shown in the figure below.</p><p>Note however that you have considerably flexibility in how you choose to present this information, including which type of pane(s) you use, which fonts, etc. There are some things which you must do however:</p><ul><li>The output should be positioned in the middle of the window</li><li>The text output should maintain its general features when resized (e.g. to full screen)</li><li>When the Check Answer button is selected, it should indicate in the space below the answers (a) which answer is correct, displaying the currentQA.explanation() String into the bottom of the screen to explain why the answer was correct or incorrect (not shown above).</li><li>In the Next Question event handler, set FileUtils.waitAndShow(OFF). This should allow your program to move on to the next QA object, thereby loading the next question into the pane.</li><li>You must use Radio Buttons for the Answers section of the pane, and this will require that you construct a new class, called AnswerPane, described next.<br>The AnswerPane class stores all the information needed to load and display the answers, as well as record which one of the radio buttons was selected. The UML diagram for AnswerPane is shown below.</li></ul><p>The getButtonSelected() method should loop through the array of radio buttons and use the radio button’s isSelected() property to determine which button was chosen by the user.</p><p>The Check Answer button is not part of the AnswerPane, however it relies on an instance of the AnswerPane object to (1) get the answer selected by the user using getButtonSeleted() (2) compare this with the correct answer, as provided by the QA object (3) store the result in the QA object using the setResult() method, true if the answer was correct and false otherwise (4) Load the response string beneath the answers so the user can check the results.</p><p>The resultsPane() loops through each QA object reports constructs a text string for display in the pane returned by this method. The text should indicate (1) the question number (2) whether the answer with CORRECT or WRONG, and (3) at the very end, the total score, based on the total number of correct answers divided by the total number of questions.</p>]]></content>
    
    <summary type="html">
    
      用Java代写一个选择题的答题器程序，练习基本的程序设计。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Swing" scheme="https://tk1307993.coding.me/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>CS148-Car-Configuration-Application</title>
    <link href="https://tk1307993.coding.me/CS148-Car-Configuration-Application.html"/>
    <id>https://tk1307993.coding.me/CS148-Car-Configuration-Application.html</id>
    <published>2020-02-21T01:17:13.000Z</published>
    <updated>2020-02-21T12:09:01.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>You should review following questions, to make sure you understand the outcomes from Unit 1. You should document lessons learnt for submission (with final unit of Car Configuration Application). You do not submit these questions for grading:</p><ol><li>What is the relationship between containment and encapsulation (as applied in this project), when building components?</li><li>What are some ways to analyze data (presented in requirements) to design Objects?</li><li>What strategies can be used to design core classes, for future requirements, so that they are reusable, extensible and easily modifiable?</li><li>What are good conventions for making a Java class readable?</li><li>What are the advantages and disadvantages of reading data from sources such as text files or databases in a single pass and not use intermediary buffering?</li><li>What is the advantage of using Serialization? What issues can occur, when using Serialization with Inner classes?</li><li>Where can following object relationships be used: encapsulation, association, containment, inheritance and polymorphism?</li><li>How can you design objects, which are self-contained and independent?</li></ol><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>Part A<br>In this assignment, you will continue to build the application, for configuring the car:<br>I would like you to expand your proof of concept, by building API’s for car configuration classes, using interfaces and abstract classes. You will also add a custom exception handler, to enhance your design.<br>For expanding proof of concept, please consider the following requirements:</p><ul><li>Define a set of methods in an interface (as API), to exercise the functionality of the existing class set.</li><li>Create an exception handler, which handles at least 5 exceptions.</li><li>Enhance your design and code to create any abstract classes for extensibility and reusability.</li></ul><h3 id="Deliverable"><a href="#Deliverable" class="headerlink" title="Deliverable"></a>Deliverable</h3><p>Design and code classes for above requirements and write a driver program, to exercise API and test the exception handler. Test your code adequately.<br>Concepts you will need to know:</p><ul><li>Object Theory</li><li>Exception Handling</li><li>Abstract Classes</li><li>Interfaces</li></ul><p>Your Exception class at a minimum should handle and fix at least one exception.<br>AutoException should have following features:</p><ol><li>Ability to track error no and error message.</li><li>Contain an enumeration of all possible error numbers and messages, which can be used, when AutoException is instantiated.</li><li>Ability to log AutoException with timestamps into a log file (you do not need to implement any complex logging mechanism).</li><li>Write helper classes to delegate fixes for each method. For example, if exception number 1 to 100 is assigned to model package, you might author a class called Fix1to100 as a helper class for AutoException, which contains fix methods for exceptions raised in the model package.</li><li>AutoException should have following implementation of fix method, which can be used for fixing any exception in entire application.</li><li>Next, make the fix method accessible through FixAuto interface.</li></ol>]]></content>
    
    <summary type="html">
    
      代写一个完整的汽车管理应用程序，练习Java基本的程序设计。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS206-Email-Handler</title>
    <link href="https://tk1307993.coding.me/CS206-Email-Handler.html"/>
    <id>https://tk1307993.coding.me/CS206-Email-Handler.html</id>
    <published>2020-02-18T01:17:13.000Z</published>
    <updated>2020-02-18T01:20:09.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Practical-Work"><a href="#Practical-Work" class="headerlink" title="Practical Work"></a>Practical Work</h3><p>By using Microsoft Visual Studio 2015, develop an object-oriented console application that can handle emails. Your program is NOT expected to be able to send emails. It is for providing the environment to build a database of the emails, displaying and handling the database content. While you are responsible for the final design of the console application, your program is expected to realise a class cEmail representing an email that contains the following:</p><ul><li>Member variables including the fields To_From (that contains a name followed by an email address put inside a pair of square brackets, and a character to indicate whether it is a sent-to-receiver or received-from-sender message), Subject, Cc (that contains a name followed by an email address put inside a pair of square brackets), Message, and Date (e.g. 8 November 2015 can be represented by the integer 151108). Notice that the first 4 member variables are for storing a string, while the member variable Date is of type int.</li><li>Member functions for reading and writing the member variables in cEmail.</li></ul><p>Then, develop the class Em_Han to build up a database that keeps the emails ever sent or received. The database can be realised by an array of a finite size, which is assumed big enough and your program does not need to check this. Member functions that allow the user to build up and display the content of the database should be implemented. Then, within the class, you are required to write public member function(s) to realise one of the following five tasks (of handling the email messages). The task to do should be determined by the remainder obtained from dividing your team number by 5. For example, if your team number is SEVEN, 7%5 = 2, you should do Task 2) of this assignment.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><ol><li><p>The function performs the sorting of the received emails based on the name of the sender (within the To_From field) in ascending order, and display a sorted list of sender name, subject and date of sending.<br>Hint: To do the sorting, notice that strcmp(“Peter”, “Mary”) will return 1, meaning that “Peter” is larger than “Mary”. Similarly, strcmp(“Mary”, “Peter”) will return -1, strcmp(“Mary”,”Mary”) will return 0. Notice that you can ignore the sent-to-receiver messages.</p></li><li><p>The function performs the sorting of the sent emails based on the name of the receiver (within the To_From field) in ascending order, and display a sorted list of receiver name, subject and date of receiving. To do the sorting, read the hint in Task 0). Notice that you can ignore the received-from-sender messages.</p></li><li><p>The function performs the sorting of the emails based on the date in ascending order, and display a sorted list of date, name, and subject together with a string indicating it is a sent or received message.</p></li><li><p>The function performs the sorting of the emails based on the subject in ascending order, and display the sorted list of subject, name, and date together with a string indicating it is a sent or received message. To do the sorting, read the hint in Task 0).</p></li><li><p>The function asks the user to input a name, and display a numbered list of subject and date of the email together with a string indicating it is a sent or received email under that name. The user can then enter a number and the corresponding email will be deleted from the database.</p></li></ol><p>Hint: You can add a member variable in the cEmail class that specifies whether it is a valid email. If an email is deleted from the database, that email becomes an invalid email. On displaying the content of the database, only valid emails will be shown.</p><ul><li>It is required that the class and the implementation of its member functions should be built as a separate static library and linked into the console application.</li><li>Your program is expected to provide a text-mode user interface so that users can repeatedly handle and display the database of emails until the user chooses to end the application.</li><li>Should you want to get a credit, you should design the application such that when a user wants to start it, he needs to login the application with a username first, which will be checked with a file that stores username-password pairs. If the username is new, the application will ask for a password from the user and store it into that file. If the username can be found in that file, the application will start only when the password is correct. The application will end if the user fails to provide the correct password in three consecutive trials.</li></ul><h3 id="General-Description"><a href="#General-Description" class="headerlink" title="General Description"></a>General Description</h3><ol><li><p>Each team should comprise up to TWO students (THREE students for HD class).</p></li><li><p>Unless you get prior approval from your subject lecturer/tutor, you must observe the following:</p></li><li><p>Do NOT use any technique or C++ constructs not taught in the subject</p><ul><li>Any library not mentioned in the subject must NOT be used (e.g. the mathematics library to compute x to the power of y.)</li><li>Each team should upload the zipped file to the Blackboard (under Groups, select File Exchange after clicking your team number).</li></ul></li><li><p>The documentation for your assignment is important. The ability of writing good comments in the program will also be an important factor to the final assessment of your assignment.</p></li><li><p>It is compulsory to use a word processing tool to write your report. The font size must not be bigger than 12 or smaller than 10. Use 1.5 lines spacing on both sides of a page. Including all figures and tables, if any, the length of the report should not be shorter than 7 pages.</p></li></ol>]]></content>
    
    <summary type="html">
    
      用C++代写一个Email的处理程序，本质上是字符串处理函数以及程序设计。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Algorithms" scheme="https://tk1307993.coding.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>PSCB57-Own-Small-Project</title>
    <link href="https://tk1307993.coding.me/PSCB57-Own-Small-Project.html"/>
    <id>https://tk1307993.coding.me/PSCB57-Own-Small-Project.html</id>
    <published>2020-02-14T04:13:39.000Z</published>
    <updated>2020-02-14T04:15:37.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do"></a>What to do</h3><p>This is the last assignment for PSCB57. In this assignment, you find your own small project to work on. What subject area you want to work on is entirely up to you. You can work with data that you collected in a lab for a different course. You can also use data that you find online in any field that interests you. Or you can write a simulation and create your own data.</p><p>You have to submit a short report as well as the python code that you wrote for simulating, analyzing and/or visualizing. Make sure your submission satisfies all the following criteria:</p><ol><li>Out of the following list of topics that we covered in this course, select three topics. For each topic you choose, use one of the algorithms/methods in your project. For example, use the Euler method, then perform a linear interpolation and plot the final results. Or, do a Lagrange interpolation, find the roots with Newton’s method and visualize the results on a plot.</li><li>Root finding: Bisection method, Newton’s method</li><li>Interpolation: Linear/linear interpolation, cubic splines, Lagrange interpolation</li><li>Fitting: (Linear) Least Square Fit</li><li>Solving ODEs: Euler method, mid-point method</li><li>Stochastic processes: Monte Carlo, Markov Chain Monte Carlo</li><li>Plotting: matplotlib</li><li>Your program should be written in python 3.</li><li>You can use any library that you want for this project.</li><li>Place all the code that you wrote into one file. The file should run and reproduce all the data/plots for your project. There are no restrictions on the length. Don’t include any data files.</li><li>Write a report. The report should be two pages or less. Describe which project you worked on, what you tried to find out, which methods you used. Show the results and discuss them.</li><li>The report should be a single pdf file with all tables and plots embedded in the file.</li></ol><h3 id="Grading-scheme"><a href="#Grading-scheme" class="headerlink" title="Grading scheme"></a>Grading scheme</h3><p>This assignment will count twice as much as the other assignments. Here is the grading scheme that will be used to evaluate your report and the code you wrote:</p><ul><li>Project choice</li><li>Choice of appropriate numerical methods, accurate use of numerical methods</li><li>Coding style</li><li>Report, presentation of results, plots, tables</li></ul>]]></content>
    
    <summary type="html">
    
      任意选择六个topics中的三个，代写一个小型的Project，内容自定。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Algorithms" scheme="https://tk1307993.coding.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>CSE143X-Backus-Naur-Form</title>
    <link href="https://tk1307993.coding.me/CSE143X-Backus-Naur-Form.html"/>
    <id>https://tk1307993.coding.me/CSE143X-Backus-Naur-Form.html</id>
    <published>2020-02-09T02:25:55.000Z</published>
    <updated>2020-02-09T02:30:58.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This assignment will give you practice with recursion, regular expressions, and grammars and will give you another opportunity to work with maps. You will complete a program that reads an input file with a grammar in Backus-Naur Form (BNF) and will allow the user to randomly generate elements of the grammar.</p><p>You will be given a main program that does the file processing and user interaction. It is called GrammarMain.java. You are to write a class called GrammarSolver that manipulates the grammar. A grammar will be specified as a sequence of Strings, each of which represents the rules for a nonterminal symbol. Each String will be of the form:<br><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;nonterminal symbol&gt;</span>::=&lt;rule&gt;|&lt;rule&gt;|&lt;rule&gt;|…|&lt;rule&gt;</span><br></pre></td></tr></table></figure></p><p>Notice that this is the standard BNF format of a nonterminal symbol on the left-hand-side and a series of rules separated by vertical bar characters (“|”) on the right-hand side. If there is only one rule for a particular nonterminal, then there will be no vertical bar characters. BNF productions use the characters “::=” to separate the symbol from the rules.</p><p>There will be exactly one occurrence of “::=” per String. The text appearing before the “::=” is a nonterminal symbol. You may assume that it is not empty, that it does not contain a vertical bar character, and that it does not contain any whitespace. Often we surround nonterminal symbols with the characters, but this will not always be the case. The text appearing after the “::=” will be a nonempty series of rules separated by vertical bar characters (“|”). Each of these rules will have a series of tokens (always at least one) separated and potentially surrounded by whitespace. There could be any amount of whitespace surrounding tokens. Any token that appears to the left of a “::=” in the grammar is considered a nonterminal. All other tokens are considered terminals.</p><p>The grammars you will be asked to process will be stored in text files with each line of the file being of the form described above. GrammarMain reads this file into a List and passes the list to the constructor of your GrammarSolver. Your solver has to be able to perform certain tasks, most notably generating random elements of the grammar.</p><p>To generate a random instantiation of a nonterminal, you simply pick at random one of its rules and generate whatever that rule tells you to generate. Notice that this is a recursive process. Generating a nonterminal involves picking one of its rules at random and then generating each part of that rule, which might involve more nonterminal symbols to generate for which you pick rules at random and generate each part of those rules, and so on. Depending upon the grammar, this process could continue indefinitely. Any grammar you will be asked to work with will be guaranteed to converge in a finite period of time. Most often this process doesn’t go on indefinitely because many rules involve terminals rather than nonterminals. . When you encounter a terminal, you simply include it in the String you are generating. This becomes the base case of the recursive process. Your generating method produces various String objects. Each String should be compact in the sense that there should be exactly one space between each terminal and there should be no leading or trailing spaces.</p><p>For example, the grammar on the previous page could be used to randomly generate a non-terminal for the sentence, “Fred honored the green wonderful child”, as shown in the diagram on the next page:</p><p>Your class must include the following public methods.<br>|  Method   |     Description  |<br>|  ———–  | ———–  |<br>| GrammarSolver(List grammar)  | This method will be passed a grammar as a List of Strings. Your method should store this in a convenient way so that you can later generate parts of the grammar. It should throw an IllegalArgumentException if the grammar is empty or if there are two or more entries in the grammar for the same nonterminal. Your method is not to change the List of Strings. |<br>| boolean grammarContains(String symbol)  | Returns true if the given symbol is a nonterminal of the grammar; returns false otherwise. |<br>| String[] generate(String symbol, int times)  | In this method you should use the grammar to randomly generate the given number of occurrences of the given symbol and you should return the result as an array of Strings. For any given nonterminal symbol, each of its rules should be applied with equal probability. It should throw an IllegalArgumentException if the grammar does not contain the given nonterminal symbol or if the number of times is less than 0. |<br>| String getSymbols()  | This method should return a String representation of the various nonterminal symbols from the grammar as a sorted, comma-separated list enclosed in square brackets, as in “[, , ]” |</p><p>Case matters when comparing symbols. For example, S would not be considered the same as.</p><p>The directory crawler program will serve as a good guide for how to write this program. In that program, the recursive method has a for-each loop. This is perfectly acceptable. Just because we are now learning how to use recursion, we don’t want to abandon what we know about loops. If you find that some part of this problem is easily solved with a loop, then go ahead and use one. In the directory crawler, the hard part was writing code to traverse all of the different directories and that’s where we used recursion. For your program the hard part is following the grammar to generate different parts of the grammar, so that is the place to use recursion.</p><p>You will discover that when writing recursive solutions to problems, we often find ourselves with a public/private pair of methods. You will want to use that approach here. You have been asked to write a public method called generate that will generate an array of Strings. But internally inside your object, you’re going to want to produce these values one String at a time using a recursive method. You should make this internal method private so that it is not visible to the client.</p><p>We want you to store the grammar in a particular way. We are making use of the SortedMap interface and the implementation TreeMap, both in java.util. Maps keep track of key/value pairs. Each key is associated with a particular value. In our case, we want to store something for each nonterminal symbol. So the nonterminal symbols become the keys and the rules become the values. Using this approach, you will find that the getSymbols method can be written quickly because the SortedMap interface includes a method called keySet that returns a set of keys from the map. If you ask for the “toString” of this set, you will get the desired string. It is important to use the SortedMap/TreeMap combination because it keeps the keys in sorted order (notice that getSymbols requires that the nonterminals be listed in sorted order).</p><p>Below are some specific notes about Java constructs you should be using:</p><ul><li><p>The Random class in java.util can be used to generate a random integer by calling its nextInt method or you can use the method Math.random.</p></li><li><p>The String class has a method called “trim” that will return a new version of the String minus any leading or trailing whitespace.</p></li><li><p>One problem you will have to deal with is breaking up strings into various parts. You should use the split method of the String class to do so, although you are also allowed to use a string-based Scanner if you prefer. The split method makes use of what are called “regular expressions” and this can be confusing, but you will find that learning about regular expressions is extremely helpful for computer scientists and computer programmers. Many unix tools, for example, take regular expressions as input.</p></li></ul><p>In terms of correctness, your class must provide all of the functionality described above. In terms of style, we will be grading on your use of comments, good variable names, consistent indentation and good coding style to implement these operations. Remember that you will lose points if you declare variables as data fields that can instead be declared as local variables. You should also avoid extraneous cases (e.g., don’t make something into a special case if it doesn’t have to be). And you should continue to declare variables, fields, parameters and return types using an interface when possible.</p><p>You should name your file GrammarSolver.java and you should turn it in electronically from the “assignments” link on the class web page. A collection of files needed for the assignment is included on the web page as ass5.zip. You will need to have GrammarMain.java, sentence.txt and sentence2.txt in the same directory as your GrammarSolver.java in order to run GrammarMain. The second input file contains extraneous whitespace, including tabs. This second input file sometimes generates very long expressions as output.</p>]]></content>
    
    <summary type="html">
    
      练习Recursion和Regular expressions的用法，代写一个语法解析器，比较烧脑的一个作业。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CIS22A-Nested-Loops</title>
    <link href="https://tk1307993.coding.me/CIS22A-Nested-Loops.html"/>
    <id>https://tk1307993.coding.me/CIS22A-Nested-Loops.html</id>
    <published>2020-02-06T01:39:35.000Z</published>
    <updated>2020-02-06T01:41:18.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a C++ program CIS22A-Lab6-XXXXX.cpp that implements a simple number guessing game with multiple questions / answers. For each game, the program generates a random number between 1 and 10. User enters an answer from 1 and 10. If the user input number matches the generated number, then print a message to inform users that he/she has a correct guess. If the guess is not correct, allow the user to have two more chances to guess the correct number. At any time, if users enter 0, then the program should display the session summary and exits. The program should keep track of the wins and losses and print the counts when user chooses to exit by entering 0.<br>The program should generate a new random number only after user enters the correct guess or after user has tried 3 times and did not have the right guess. Do not ask user for a yes/no confirmation after each game because the 0 input value will serve as the sentinel to stop the continuous game.</p><p>Here is a sample run using command line.</p><p>At the program start, it shows:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"Welcome to the number guessing game.</span></span><br><span class="line">For each game, you have at most <span class="number">3</span> chances <span class="keyword">to</span> guess <span class="keyword">a</span> secret <span class="keyword">number</span> from <span class="number">1</span> <span class="keyword">to</span> <span class="number">10</span>.<span class="comment">"</span></span><br></pre></td></tr></table></figure></p><p>The first time, when a new question is asked, the program displays:<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"Enter a number from 1 to 10. Enter 0 to exit:"</span></span><br></pre></td></tr></table></figure></p><p>When users give a wrong guess, it shows:</p><p>Not correct, try again:</p><p>When users give a wrong answer after the third trials for the same question, the program displays:<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"Not correct. You have reached your third trials. The correct number is X."</span></span><br><span class="line"><span class="comment">"Lets start a new secret number"</span></span><br></pre></td></tr></table></figure></p><p>When users answer with the correct number, it shows this prompt:<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"Congratulation, correct! Let's start a new secret number."</span></span><br></pre></td></tr></table></figure></p><p>When users hit 0, the game summary is displayed:</p><p>Here is your game summary:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Total <span class="string">games:</span>           <span class="number">5</span></span><br><span class="line">Total game <span class="string">wins:</span>       <span class="number">3</span></span><br><span class="line">Total game <span class="string">losses:</span>     <span class="number">2</span></span><br></pre></td></tr></table></figure></p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><ol><li>Use the function rand() to generate random numbers and srand() to intialize the generator.</li><li>Also use “time.h” and use the srand() to generate a random seed for the random generator. The srand() should be called only once outside the loop before the game starts.</li><li>In main(), you can use a “while” or “for” loop to gets inputs.</li><li>To control the number of maximum trial answer per question, you can use a nested loop inside the main “while” loop.<br>Generate a new random number only when a new game starts after users either have entered the correct answer or users have exceeded the 3 trials.</li><li>For the count of losses, update the count only when users have exceeded the maximum 3 trials. Do not count as a loss if users have not finished the 3 trials.</li></ol><p>Add Comment at the top of yor program:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br><span class="line">/* Author:</span><br><span class="line">/* Description:</span><br><span class="line">/*</span><br><span class="line">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br></pre></td></tr></table></figure><p>To run my game with “cheating mode”, open the Windows command console , change to folder where you save the sample game, and run with the /c option<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/MyDocuments/lab-6</span></span><br><span class="line">lab-6 <span class="string">/c</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      基础C++作业代写，练习嵌套循环的使用方法。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS150-Game-of-War</title>
    <link href="https://tk1307993.coding.me/CS150-Game-of-War.html"/>
    <id>https://tk1307993.coding.me/CS150-Game-of-War.html</id>
    <published>2020-02-01T01:09:09.000Z</published>
    <updated>2020-02-01T01:11:56.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this problem set you’ll build on the work of recent dailies to write a complete program. There is a flowchart deadline and a draft deadline as well as a final deadline.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>You will implement the game of War in a C++ program. There are no official rules, so we will follow the 2-player rules outlined below. Visit Wikipedia for more details. If you are not familiar with the standard deck of cards, there is a Wikipedia article for that too. The rules of the game are very simple, so it is really a game for young children.</p><ul><li>The game is played with a standard 52-card deck (13 ranks, Aces high, 4 suits). Suits are ignored in War.</li><li>The deck is shuffled and then dealt into 2 equal hands of 26.</li><li>Players play their hands from top to bottom. Cards are not examined or rearranged.</li><li>Each player turns over the top card from their hand. The high card wins and collects both cards, which are returned to the bottom of the winner’s hand. In the event of a tie, there is a war, described below.</li><li>In a war, the tying cards stay out and are followed by one face-down card and one face-up card per player. The face-up cards play in the same way as usual: the high card winds and the player collects all six cards out and returns them to the bottom of their hand.</li><li>If ties continue, the war continues with another two face-down cards and another two face-up cards. If a player runs out of cards during a war, the player loses immediately.</li><li>If the war ends, play continues as normal.<br>The game is over when one player collects all 52 cards, or when a war ends due to one player’s inability to continue.</li></ul><h3 id="Specifications"><a href="#Specifications" class="headerlink" title="Specifications"></a>Specifications</h3><p>Much of the program’s design is up to you, but you must write your code to follow the specifications below.</p><ul><li><p>Your code should compile using the command</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">g</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">-</span><span class="comment">std=c</span><span class="literal">+</span><span class="literal">+</span><span class="comment">11</span> <span class="literal">-</span><span class="comment">Wall</span> <span class="literal">-</span><span class="comment">Werror</span> <span class="literal">-</span><span class="comment">pedantic</span> <span class="literal">-</span><span class="comment">o</span> <span class="comment">war</span> <span class="comment">war</span><span class="string">.</span><span class="comment">c</span><span class="literal">+</span><span class="literal">+</span></span><br></pre></td></tr></table></figure></li><li><p>The deck of cards and each hand, as well as other piles of cards of a temporary nature, should be implemented as vectors.</p></li><li>When a player wins a trick, the cards collected must be returned to the bottom of the hand—that is, the opposite side from where cards are played.</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个叫Game of War的扑克牌游戏，能实现双人对战。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
</feed>
