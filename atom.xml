<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2020-03-08T01:12:44.024Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS4117-Music-Artist-Lyrics-Model</title>
    <link href="https://tk1307993.coding.me/CS4117-Music-Artist-Lyrics-Model.html"/>
    <id>https://tk1307993.coding.me/CS4117-Music-Artist-Lyrics-Model.html</id>
    <published>2020-03-08T07:37:13.000Z</published>
    <updated>2020-03-08T01:12:44.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Core-Description"><a href="#Core-Description" class="headerlink" title="Core Description"></a>Core Description</h3><p>For the core, you will implement a program that creates a model of a music artist’s lyrics. This model receives lyric data as input and ultimately generates new lyrics in the style of that artist. To do this, you will leverage an NLP concept called an n-gram and use an NLP technique called language modeling.<br>Your understanding of the linked concepts and definitions is crucial to your success, so make sure to understand n-grams, language modeling, Python dictionaries as taught in the warmup, and classes and inheritance in Python before attempting to implement the core.<br>The core does not require you to include any external libraries beyond what has already been included for you. Use of any other external libraries is prohibited on this part of the project.</p><h3 id="Core-Structure"><a href="#Core-Structure" class="headerlink" title="Core Structure"></a>Core Structure</h3><p>In the language-models/folder, you will find four files which contain class definitions: nGramModel.py, unigramModel.py, bigramModel.py, and trigramModel.py. You must complete the prepData, weightedChoice, and getNextToken functions in nGramModel.py. You must also complete the trainModel, trainingDataHasNGram, and getCandidateDictionary functions in each of the other three files.<br>In the root CreativeAI repository, there is a file called generate.py, which will be the driver for generating both lyrics and music. For the core, you will implement the trainLyricsModels, selectNGramModel, generateSentence, and runLyricsGenerator functions; these functions will be called, directly or indirectly, by main, which is written for you.<br>We recommend that you implement the functions in the order they are listed in the spec; start with prepData and work your way down to runLyricsGenerator.</p><h3 id="Getting-New-Lyrics-Optional"><a href="#Getting-New-Lyrics-Optional" class="headerlink" title="Getting New Lyrics (Optional)"></a>Getting New Lyrics (Optional)</h3><p>If your group chooses to use lyrics from an artist other than the Beatles, you can use the web scraper we have written to get the lyrics of the new artist and save them in the data/lyrics directory for you. A web scraper is a program that gets information from web pages: ours, which lives in the data/scrapers directory.<br>If you navigate to the data/scrapers folder and run the lyricsWikiaScraper.py file, you will be prompted to input the name of an artist. If that artist is found on lyrics.wikia.com, the program will make a folder in the data/lyrics directory for that artist, and save each of the artist’s songs as a .txt file in that folder.</p><h3 id="Explanation-of-Functions-to-Implement"><a href="#Explanation-of-Functions-to-Implement" class="headerlink" title="Explanation of Functions to Implement"></a>Explanation of Functions to Implement</h3><h4 id="prepData"><a href="#prepData" class="headerlink" title="prepData"></a>prepData</h4><p>The purpose of this function is to take input data in the form of a list of lists, and return a copy of that list with symbols added to both ends of each inner list.<br>For the core, these inner lists will be sentences, which are represented as lists of strings. The symbols added to the beginning of each sentence will be ^::^ followed by ^:::^, and the symbol added to the end of each sentence will be $:::$. These are arbitrary symbols, but make sure to use them exactly and in the correct order.<br>For example, if the function is passed this list of lists:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ [<span class="symbol">'hey</span>', <span class="symbol">'jude</span>'], [<span class="symbol">'yellow</span>', <span class="symbol">'submarine</span>'] ]</span><br></pre></td></tr></table></figure></p><p>Then it would return a new list that looks like this:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ [<span class="symbol">'^::^</span>', <span class="symbol">'^:::^</span>', <span class="symbol">'hey</span>', <span class="symbol">'jude</span>', <span class="symbol">'$:::$</span>'], [<span class="symbol">'^::^</span>', <span class="symbol">'^:::^</span>', <span class="symbol">'yellow</span>', <span class="symbol">'submarine</span>', <span class="symbol">'$:::$</span>'] ]</span><br></pre></td></tr></table></figure></p><p>The purpose of adding two symbols at the beginning of each sentence is so that you can look at a trigram containing only the first English word of that sentence. This captures information about which words are most likely to begin a sentence; without these symbols, you would not be able to use the trigam model at the beginning of sentences because there would be no trigrams to look at until the third word.<br>The purpose of adding a symbol to the end of each sentence is to be able to generate sentence endings. If you ever see $:::$ while generating a sentence in the generateSentence function, you know the sentence is complete.</p><h4 id="trainModel"><a href="#trainModel" class="headerlink" title="trainModel"></a>trainModel</h4><p>This function trains the NGramModel child classes on the input data by building their dictionary of n-grams and respective counts, self.nGramCounts. Note that the special starting and ending symbols also count as words for all NGramModels, which is why you should use the return value of prepData before you create the self.nGramCounts dictionary for each language model.</p><ul><li>For the unigram model, self.nGramCounts will be a one-dimensional dictionary of {unigram: unigramCount} pairs, where each unique unigram is somewhere in the input data, and unigramCount is the number of times the model saw that particular unigram appear in the data. The unigram model should not consider the special symbols ‘^::^’ and ‘^:::^’ as words, but it should consider the ending symbol $:::$ as a word. The bigram and trigram modles should consider all special symbols as words.</li><li>For the bigram model, the dictionary will be two-dimensional. It will be structured as {unigramOne: {unigramTwo: bigramCount}}, where bigramCount is the count of how many times this model has seen unigramOne + unigramTwo appear as a bigram in the input data. For example, if the only song you were looking at was Strawberry Fields Forever, part of the BigramModel’s self.nGramCounts dictionary would look like this.</li><li>For the trigram model, the dictionary will be three-dimensional. It will be structured as {unigramOne: {unigramTwo: {unigramThree: trigramCount}}}, where trigramCount is the count of how many times this model has seen unigramOne + unigramTwo + unigramThree appear as a trigram in the input data.</li></ul><h4 id="getCandidateDictionary"><a href="#getCandidateDictionary" class="headerlink" title="getCandidateDictionary"></a>getCandidateDictionary</h4><p>This function returns a dictionary of candidate next words to be added to the current sentence. More specifically, it returns the set of words that are legal to follow the sentence passed in, given the particular language model’s training data. So it looks at the sentence, figures out what word the model thinks can follow the last words in the sentence, and returns that set of words and counts. Note: when you write this function, you may assume that that the trainingDataHasNGram function for this specific language model instance has returned True.</p><p>For each n-gram model, this function will look at the last n - 1 words in the current sentence, index into self.nGramCounts using those words, and return a dictionary of possible n-th words and their counts. For example, the unigram model is an n-gram model for which n = 1, so the unigram model looks at the previous 0 words in the sentence. Therefore, the unigram model sees every word in its training data as a candidate; in other words, the unigram model version of getCandidateDictionary should return its entire self.nGramCounts dictionary. Based on this knowledge, what dictionaries should the bigram and trigram models return?<br>Hint: the indexing method you use here will be syntactically very similar to what you did in trainingDataHasNGram.</p><h4 id="printSongLyrics"><a href="#printSongLyrics" class="headerlink" title="printSongLyrics"></a>printSongLyrics</h4><p>This function takes three parameters which are lists of lists of strings: verseOne, verseTwo, and chorus. It then prints out the song in this order: verse one, chorus, verse two, chorus.</p><h4 id="getUserInput"><a href="#getUserInput" class="headerlink" title="getUserInput"></a>getUserInput</h4><p>This function takes three parameters: teamName, which should be the name of your group; lyricsSource, which should be the name of the artist that you’re generating lyrics for; and musicSource, which should be the name of the source from which you got your music data for the reach.<br>The function returns a user’s choice between 1 and 3, looping while the user does not input a valid choice. Choice 1 is for generating lyrics; choice 2 is for generating music; and choice 3 is to quit the program.</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>This function first trains instances of language models on the lyrics and music data by calling the trainLyricsModels and trainMusicModels functions. Then, it calls getUserInput and uses the return value of that function to either generate new lyrics by calling runLyricsGenerator, or generate a song by calling runMusicGenerator. Note that the trainMusicModels and runMusicGenerator functions don’t need to be touched for the core.<br>At the beginning of main there are several string variables to hold your group’s name, the name of the artist you’re using, etc. Make sure to update these values with your team’s name and your choices of data.</p><h3 id="Tips-for-Speeding-Up-Your-Program"><a href="#Tips-for-Speeding-Up-Your-Program" class="headerlink" title="Tips for Speeding Up Your Program"></a>Tips for Speeding Up Your Program</h3><p>If your program is taking a long time to load the data and train the models, it’s likely that inefficiencies in your code are slowing down your program. The most common cause of inefficiency is too many nested loops in your trainModel functions. For example, if you have 10 words, and you run through the words once for each word in the list (i.e. 10 times), that will be 100 steps total, which is not too bad. But if you have 10,000 words in the dataset, and you look at each one 10,000 times, then that will be 100,000,000, which is bad.<br>Each version of the trainModel function can be written correctly with at most two levels of nested for loops, and a typical program should not take more than around 30 seconds to load. Try experimenting with different loop structures if your program is taking too long to load.</p><h3 id="How-to-Run-Your-Program-to-Generate-Lyrics"><a href="#How-to-Run-Your-Program-to-Generate-Lyrics" class="headerlink" title="How to Run Your Program to Generate Lyrics"></a>How to Run Your Program to Generate Lyrics</h3><p>If you are using PyCharm, open generate.py and click “Run…” in the top navigation bar. If you are working from the command line, navigate to the root directory where your CreativeAI project is stored and type:<br>python generate.py</p><p>Even if you have not implemented any of the functions in the project, the starter code should work out of the box. Therefore, you can play around with it and get a feel for how the driver in main works.</p>]]></content>
    
    <summary type="html">
    
      代写NLP作业，对音乐的作者进行分类与识别。作业提供了框架以及相关文档，按照要求一步一步往下写即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CS211-Lexical-Analysis</title>
    <link href="https://tk1307993.coding.me/CS211-Lexical-Analysis.html"/>
    <id>https://tk1307993.coding.me/CS211-Lexical-Analysis.html</id>
    <published>2020-03-05T07:37:13.000Z</published>
    <updated>2020-03-05T07:40:42.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>In this problem, you should implement the lexical analysis task for a limited version (i.e., the depth of the nested loops) of a programming language. Lexical analysis is the first stage that compilers parse and detect the possible syntax errors.</p><p>Ideally, any new (programming) languages can be designed and analyzed in the similar manner. You will need to analyze a Pascal-and-C-like language in this programming assignment.</p><p>Given a segment of the source code, your C++ code should analyze the code and extract all tokens, which include:</p><ul><li>Keywords: keywords are the words reserved by the language. They are all uppercase. In the case of this simplified language, the keywords are restricted to the set { “BEGIN”, “END”, “FOR” }</li><li>Identifiers: An identifier is used to describe the variables, which are all lower-case</li><li>Constants: Numbers like 10, … .</li><li>Operators: all arithmetic operations (i.e., +, -, *, and /), “++” and “=”</li><li>Delimiters: like “,” and “;”</li></ul><p>Your C++ code should input a text file from user, which contains the expression he/she wants the compilers to analyze. Then, your code should parse the input, detect the tokens, classify them, and print out the results.</p><p>With this assignment, you will get practice with the stack implementation which is one of the most widely used data structures. Besides, you will be familiar with string processing and input parsing, which are of crucial importance in most C++ projects.</p><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>(Data Structures) You need to implement a stack data structure to keep track of the processing and compute the depth of the nested loops. Adding elements to the stack (push) and removing objects from it (pop) are two essential methods that must be implemented. You can use any data structure to implement the stack, e.g., arrays, linked-lists, etc.</p><p>(Algorithms) Once the input expression is given, your program should decide which character should be inserted to the stack, and when the result needs to be computed. You need to detect the possible syntax errors while tracing the depth of the nested loops.</p><h3 id="Example-Run"><a href="#Example-Run" class="headerlink" title="Example Run"></a>Example Run</h3><p>Try to keep your output as close to the given format as possible:<br>In this example, the input file is “code.txt”<br>It contains the code segment below:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FOR (i, 10, ++)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">FOR</span> (j, <span class="number">10</span>, ++)</span><br><span class="line">  BEGAN</span><br><span class="line">    <span class="keyword">sum</span>=<span class="keyword">sum</span> + i + j;</span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./pa3.<span class="keyword">out</span></span><br><span class="line">INPUT&gt; Please enter the name <span class="keyword">of</span> the input <span class="keyword">file</span>:</span><br><span class="line">code.txt</span><br><span class="line"></span><br><span class="line">OUTPUT&gt; The depth <span class="keyword">of</span> nested <span class="keyword">loop</span>(s) <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line">Keywords: <span class="keyword">FOR</span> <span class="keyword">BEGIN</span> <span class="keyword">END</span></span><br><span class="line">Identifier: sum i j</span><br><span class="line"><span class="keyword">Constant</span>: <span class="number">10</span></span><br><span class="line">Operatros: ++ = +</span><br><span class="line">Delimiter: ; ,</span><br><span class="line">Syntax <span class="literal">Error</span>(s): BEGAN</span><br></pre></td></tr></table></figure><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>You should get your stack data structure working well before implementing the lexical analysis task.</p><p>The string processing to parse the input is an essential part of this assignment. You should make sure that you parse the input correctly, and you take care of all edge cases, e.g., more than one spaces between characters, no spaces, etc.</p><h3 id="Grading-Criteria"><a href="#Grading-Criteria" class="headerlink" title="Grading Criteria"></a>Grading Criteria</h3><ol><li><p>Successful Compilation: Your source code should be able to compile using g++ -Wall command without any error or warning. The output should be a valid executable. Please note that we will be using g++ compiler on Linux to grade your programs. If you are using other compilers or IDE (e.g., Visual C++), it is recommended that you test the source codes with g++ before the CANVAS submission (i.e., make sure there is no warning).</p></li><li><p>Program Correctness: The executable should be able to run correctly by giving<br>out the required output.</p></li><li><p>Programming Style: Good coding style is a key to efficient programming. We<br>encourage you to write clear and readable codes. You should adopt a sensible set of coding conventions, including proper indentation, necessary comments and more. Here are some guidelines of good programming style.</p></li></ol><h3 id="Final-Notes"><a href="#Final-Notes" class="headerlink" title="Final Notes"></a>Final Notes</h3><p>Again, remember to start the programming assignments as soon as possible. Unlike the conventional assignments, programming assignments sometimes take un-predictable amount of time to finish. Thus, have the code running first, then polish it later with the extra time before the deadline.</p>]]></content>
    
    <summary type="html">
    
      代写一个精简版的词法解析器，能够对简单语言进行解析。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Compiler" scheme="https://tk1307993.coding.me/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>CCN2042-Console-Drawing-Board</title>
    <link href="https://tk1307993.coding.me/CCN2042-Console-Drawing-Board.html"/>
    <id>https://tk1307993.coding.me/CCN2042-Console-Drawing-Board.html</id>
    <published>2020-02-28T10:40:56.000Z</published>
    <updated>2020-02-28T10:43:14.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Expected-Learning-Outcomes"><a href="#Expected-Learning-Outcomes" class="headerlink" title="Expected Learning Outcomes"></a>Expected Learning Outcomes</h3><ul><li>familiarise themselves with at least one high level language programming environment.</li><li>develop a structured and documented computer program.</li><li>understand the fundamentals of object-oriented programming and apply it in computer program development.</li><li>apply the computer programming techniques to solve practical problems.</li></ul><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this assignment, you are going to develop a Console Drawing Board that runs in the command line environment. User can input commands to generate different patterns in the drawing area.</p><p>This is a group assignment. You need to form a group with 5 to 6 students, and write a Win32 Console Application program called drawing.cpp. This is a text-based drawing board with the following requirements.</p><h3 id="System-Requirements"><a href="#System-Requirements" class="headerlink" title="System Requirements"></a>System Requirements</h3><p>When the program starts, the console should display a welcome message, and then the System Menu of the program. User can enter the options of the corresponding actions.<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Welcome Message designed by your group</span><br><span class="line">***<span class="built_in"> System </span>Menu ***</span><br><span class="line">[1] Start Drawing</span><br><span class="line">[2] Change Board Size</span><br><span class="line">[3] Instructions</span><br><span class="line">[4] Credits</span><br><span class="line">[5] Exit</span><br><span class="line">*******************</span><br><span class="line">Option (1 - 5):</span><br></pre></td></tr></table></figure></p><h3 id="Start-Drawing"><a href="#Start-Drawing" class="headerlink" title="Start Drawing"></a>Start Drawing</h3><p>When the user inputs 1 in the System Menu, an empty drawing board is displayed with a pen in the middle. Then the user controls the pen in the drawing board by inputting commands, until a “QUIT” command is entered.</p><h4 id="Drawing-Board"><a href="#Drawing-Board" class="headerlink" title="Drawing Board"></a>Drawing Board</h4><p>The drawing board consists of a square drawing area with a default size 30 x 30. The area is enclosed by a boundary with characters ‘|’ for vertical boundary, ‘-‘ for horizontal boundary, and ‘+’ for the corner.</p><h4 id="Pen"><a href="#Pen" class="headerlink" title="Pen"></a>Pen</h4><p>The initial location of the pen is in the middle of the drawing area. Then based on the user control, the pen can move within the drawing area. An arrow character is displayed in the drawing area to indicate the current location of the pen.</p><p>The pen is represented by different arrow characters according to the direction it is facing. There are 8 available directions, with 45 o each (default is 0, i.e. upward). The corresponding ASCII code in decimal of each arrow is given.</p><h4 id="User-Control"><a href="#User-Control" class="headerlink" title="User Control"></a>User Control</h4><p>User can input one or multiple commands at a time to control the action of the pen. You may assume that user always input less than 200 characters each time.</p><p>If multiple commands are input, they must be separated by at least one space. The commands are case-insensitive.</p><p>The commands are executed one by one in the sequence of user input. When all commands have been executed, the drawing board is refreshed to show the most updated drawings. Then the user can input another set of commands again.</p><p>Appropriate error checking on user input of commands is expected. Whenever an error occurs, an error message should be displayed. All remaining commands will be ignored. The drawing board is then refreshed to show the most updated status.</p><p>For example, an erroneous input may look like:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FD <span class="number">10</span> RT <span class="number">90</span> BK LT <span class="number">45</span></span><br></pre></td></tr></table></figure></p><p>Only “FD 10” and “RT 90” are executed because the argument for command “BK” is missing. The last command “LT 45” is ignored and not executed.</p><h4 id="Quit"><a href="#Quit" class="headerlink" title="Quit"></a>Quit</h4><p>When the user inputs the command “QUIT”, the system prompts for user’s confirmation. If the user inputs ‘y’ or ‘Y’, the system returns back to the System Menu. If the user inputs ‘n’ or ‘N’, the system remains at the drawing board. Other input is not acceptable and the system should ask the user to confirm again.</p><h3 id="Change-Board-Size"><a href="#Change-Board-Size" class="headerlink" title="Change Board Size"></a>Change Board Size</h3><p>When the user inputs 2 in the System Menu, the system displays the current size (length of a side, default is 30). Then the user is allowed to input the new size within the range of 20 to 50, inclusively. After the input, the system returns back to the System Menu.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>The system displays the instructions for using the console drawing board. After displaying the instruction, the system returns back to the System Menu.</p><h3 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h3><p>The system displays the personal particulars (e.g. student name, student ID, class, tutorial group, etc.) of the group members. After displaying the information, the system returns back to the System Menu.</p><h3 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h3><p>When the user inputs this option, the system prompts for user’s confirmation. If the user inputs ‘y’ or ‘Y’, the program terminates. If the user inputs ‘n’ or ‘N’, the system returns to the System Menu. Other input is not acceptable and the system should ask the user to confirm again.</p><h3 id="Other-General-Requirements"><a href="#Other-General-Requirements" class="headerlink" title="Other General Requirements"></a>Other General Requirements</h3><p>Meaningful guidelines should be printed to assist with user’s input. Whenever an option is selected, meaningful messages should be displayed.</p><p>Suitable checking on user’s input is expected. Appropriate error messages should be printed whenever unexpected situation happens, e.g., invalid input, input out-of-range, etc.</p><p>The use of functions (in addition to main function) and classes are expected in your program. Appropriate comments should be added in your source code file.</p><p>Creativity and Critical Thinking: other features that you find useful or can enhance the user experience can also be implemented.</p>]]></content>
    
    <summary type="html">
    
      用C++代写一个console的画图板，练习基本的object-oriented programming设计。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CST8284-QuizMaster</title>
    <link href="https://tk1307993.coding.me/CST8284-QuizMaster.html"/>
    <id>https://tk1307993.coding.me/CST8284-QuizMaster.html</id>
    <published>2020-02-24T01:17:13.000Z</published>
    <updated>2020-02-24T09:10:08.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The purpose of this assignment is to build an application that</p><ol><li>Locates a .quiz file on your hard drive and opens it</li><li>Reads each of the objects in that file into an array (for easier handling)</li><li>Each object contains a question and an array of possible answers, along with the correct answer, the difficulty level, the number of points awarded, etc. Therefore, each pane will need to display this information into the pane</li><li>The code loops through the array of objects, and on each iteration displays a new Q/A combination. The program terminates when the questions are finished, and displays the number of correct responses out of the total number of questions asked.</li></ol><h3 id="QuizMaster"><a href="#QuizMaster" class="headerlink" title="QuizMaster"></a>QuizMaster</h3><h4 id="Load-the-code-for-this-lab-available-on-Blackboard-into-a-new-project"><a href="#Load-the-code-for-this-lab-available-on-Blackboard-into-a-new-project" class="headerlink" title="Load the code for this lab, available on Blackboard, into a new project"></a>Load the code for this lab, available on Blackboard, into a new project</h4><ul><li>In Eclipse, create a new project called Assignment1</li><li>Download Assignment1.zip from Blackboard and open the contents into a package</li></ul><h4 id="Review-the-files-in-Assignment1-zip-and-make-sure-you-understand-their-purpose"><a href="#Review-the-files-in-Assignment1-zip-and-make-sure-you-understand-their-purpose" class="headerlink" title="Review the files in Assignment1.zip and make sure you understand their purpose"></a>Review the files in Assignment1.zip and make sure you understand their purpose</h4><p>There are four files included with this assignment, which you must use, and which you must submit with your finished assignment.<br>QuizMain is the main point of entry for your program. It performs three main actions: it loads a simple splash pane (given); it opens the file containing the Q/A objects and loads them into an array, and then loops through the array loading each question into a BorderPane with separate sections for the question, answers, and explanation; and finally displays the results of the quiz.</p><p>Note that each of the three sections is associated with a method that loads up a different Pane object. getSplashPane() loads a simple text message (“Welcome to QuizMaster”) for initial display in the centre of a BorderPane. getCurrentQAPane() uses the current QA object to load up a BorderPane with some of the components of the QA object. getResultsPane() displays the results of the quiz. getSplashPane() is provided for you; more information on the other two panes is provided below.</p><p>FileUtils is a class containing static methods that perform basic file I/O operations, including checking to see if the file exists, returning the file name, and so on. The static method getFileHandle() calls up the FileChooser dialog box, shown below, which prompts the user to select a .quiz file (to be provided), which contains the QA objects to be loaded. Note that the other utilities in this class rely on a file having been correctly selected. If the ‘Cancel’ button on the dialog is selected, then no file handle is returned from getFileHandle(), and any further attempts to return a path name to the file return an empty string.</p><p>If they do wish to continue, then prompt them with the above dialog again, otherwise execute Platform.exit() to exit the program.</p><p>The code in FileUtils is mostly complete, with the exception of the getQAArray() method, which you’ll need to supply. This method reads in the absolute path of the file returned from getFileHandle() - you can use getFileName() to return this string, assuming it was correctly supplied by the user—and loads each object into an array of QA objects, which gets returned to the user.</p><p>QuesAns is an abstract class that lists the abstract methods required elsewhere in your program.</p><p>QA extends QuesAns and supplies concrete methods. Use the QA class when you need to load the QA objects from the .ques file returned by getFileHandle(), as indicated above in part (b), and when you need to load the currentQAPane, as indicated below</p><h4 id="Supply-the-classes-methods-required-to-allow-for-the-correct-execution-of-your-program"><a href="#Supply-the-classes-methods-required-to-allow-for-the-correct-execution-of-your-program" class="headerlink" title="Supply the classes/methods required to allow for the correct execution of your program"></a>Supply the classes/methods required to allow for the correct execution of your program</h4><p>Note that the method FileUtils.showAndWait(FileUtils.ON) effectively pauses the program to give the user time to input a response. Without such a mechanism, the enhanced for loop that drives the program would simply loop through and load every pane in rapid succession, with no way to allow the user time to read questions and select answers.</p><p>There are better ways to perform this operation, but they involve code that is beyond our reach just now. For now, showAndWait() does the job. Therefore, when the user wishes to move on to the next question, the NEXT QUESTION button must execute FileUtils.showAndWait(FileUtiles.OFF), to allow the program to load the next QA object in the loop.</p><p>Also note that, for demonstration purposes, the .ques file will only contain MAX_QA_SIZE questions (initially set to 5); hence we only load MAX_QA_SIZE objects into the array, and loop through the enhanced for loop MAX_QA_SIZE times. This will change in Assignment 2 when we modify this code to accommodate files of any size.</p><p>Aside from the getQAArray code needed to complete the FileUtils class, along with the code needed to display the results at the end of the program, most of your time will be spent writing the code needed to display the current Question/Answers combination.</p><p>The getCurrentPane() method, which reads in the currentQA object, should be included in QuizMain, along with the two other ‘getPane()’ methods needed for proper execution of the program.</p><p>Your QA input pane should look something like the screenshot shown in the figure below.</p><p>Note however that you have considerably flexibility in how you choose to present this information, including which type of pane(s) you use, which fonts, etc. There are some things which you must do however:</p><ul><li>The output should be positioned in the middle of the window</li><li>The text output should maintain its general features when resized (e.g. to full screen)</li><li>When the Check Answer button is selected, it should indicate in the space below the answers (a) which answer is correct, displaying the currentQA.explanation() String into the bottom of the screen to explain why the answer was correct or incorrect (not shown above).</li><li>In the Next Question event handler, set FileUtils.waitAndShow(OFF). This should allow your program to move on to the next QA object, thereby loading the next question into the pane.</li><li>You must use Radio Buttons for the Answers section of the pane, and this will require that you construct a new class, called AnswerPane, described next.<br>The AnswerPane class stores all the information needed to load and display the answers, as well as record which one of the radio buttons was selected. The UML diagram for AnswerPane is shown below.</li></ul><p>The getButtonSelected() method should loop through the array of radio buttons and use the radio button’s isSelected() property to determine which button was chosen by the user.</p><p>The Check Answer button is not part of the AnswerPane, however it relies on an instance of the AnswerPane object to (1) get the answer selected by the user using getButtonSeleted() (2) compare this with the correct answer, as provided by the QA object (3) store the result in the QA object using the setResult() method, true if the answer was correct and false otherwise (4) Load the response string beneath the answers so the user can check the results.</p><p>The resultsPane() loops through each QA object reports constructs a text string for display in the pane returned by this method. The text should indicate (1) the question number (2) whether the answer with CORRECT or WRONG, and (3) at the very end, the total score, based on the total number of correct answers divided by the total number of questions.</p>]]></content>
    
    <summary type="html">
    
      用Java代写一个选择题的答题器程序，练习基本的程序设计。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Swing" scheme="https://tk1307993.coding.me/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>CS148-Car-Configuration-Application</title>
    <link href="https://tk1307993.coding.me/CS148-Car-Configuration-Application.html"/>
    <id>https://tk1307993.coding.me/CS148-Car-Configuration-Application.html</id>
    <published>2020-02-21T01:17:13.000Z</published>
    <updated>2020-02-21T12:09:01.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>You should review following questions, to make sure you understand the outcomes from Unit 1. You should document lessons learnt for submission (with final unit of Car Configuration Application). You do not submit these questions for grading:</p><ol><li>What is the relationship between containment and encapsulation (as applied in this project), when building components?</li><li>What are some ways to analyze data (presented in requirements) to design Objects?</li><li>What strategies can be used to design core classes, for future requirements, so that they are reusable, extensible and easily modifiable?</li><li>What are good conventions for making a Java class readable?</li><li>What are the advantages and disadvantages of reading data from sources such as text files or databases in a single pass and not use intermediary buffering?</li><li>What is the advantage of using Serialization? What issues can occur, when using Serialization with Inner classes?</li><li>Where can following object relationships be used: encapsulation, association, containment, inheritance and polymorphism?</li><li>How can you design objects, which are self-contained and independent?</li></ol><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>Part A<br>In this assignment, you will continue to build the application, for configuring the car:<br>I would like you to expand your proof of concept, by building API’s for car configuration classes, using interfaces and abstract classes. You will also add a custom exception handler, to enhance your design.<br>For expanding proof of concept, please consider the following requirements:</p><ul><li>Define a set of methods in an interface (as API), to exercise the functionality of the existing class set.</li><li>Create an exception handler, which handles at least 5 exceptions.</li><li>Enhance your design and code to create any abstract classes for extensibility and reusability.</li></ul><h3 id="Deliverable"><a href="#Deliverable" class="headerlink" title="Deliverable"></a>Deliverable</h3><p>Design and code classes for above requirements and write a driver program, to exercise API and test the exception handler. Test your code adequately.<br>Concepts you will need to know:</p><ul><li>Object Theory</li><li>Exception Handling</li><li>Abstract Classes</li><li>Interfaces</li></ul><p>Your Exception class at a minimum should handle and fix at least one exception.<br>AutoException should have following features:</p><ol><li>Ability to track error no and error message.</li><li>Contain an enumeration of all possible error numbers and messages, which can be used, when AutoException is instantiated.</li><li>Ability to log AutoException with timestamps into a log file (you do not need to implement any complex logging mechanism).</li><li>Write helper classes to delegate fixes for each method. For example, if exception number 1 to 100 is assigned to model package, you might author a class called Fix1to100 as a helper class for AutoException, which contains fix methods for exceptions raised in the model package.</li><li>AutoException should have following implementation of fix method, which can be used for fixing any exception in entire application.</li><li>Next, make the fix method accessible through FixAuto interface.</li></ol>]]></content>
    
    <summary type="html">
    
      代写一个完整的汽车管理应用程序，练习Java基本的程序设计。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS206-Email-Handler</title>
    <link href="https://tk1307993.coding.me/CS206-Email-Handler.html"/>
    <id>https://tk1307993.coding.me/CS206-Email-Handler.html</id>
    <published>2020-02-18T01:17:13.000Z</published>
    <updated>2020-02-18T01:20:09.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Practical-Work"><a href="#Practical-Work" class="headerlink" title="Practical Work"></a>Practical Work</h3><p>By using Microsoft Visual Studio 2015, develop an object-oriented console application that can handle emails. Your program is NOT expected to be able to send emails. It is for providing the environment to build a database of the emails, displaying and handling the database content. While you are responsible for the final design of the console application, your program is expected to realise a class cEmail representing an email that contains the following:</p><ul><li>Member variables including the fields To_From (that contains a name followed by an email address put inside a pair of square brackets, and a character to indicate whether it is a sent-to-receiver or received-from-sender message), Subject, Cc (that contains a name followed by an email address put inside a pair of square brackets), Message, and Date (e.g. 8 November 2015 can be represented by the integer 151108). Notice that the first 4 member variables are for storing a string, while the member variable Date is of type int.</li><li>Member functions for reading and writing the member variables in cEmail.</li></ul><p>Then, develop the class Em_Han to build up a database that keeps the emails ever sent or received. The database can be realised by an array of a finite size, which is assumed big enough and your program does not need to check this. Member functions that allow the user to build up and display the content of the database should be implemented. Then, within the class, you are required to write public member function(s) to realise one of the following five tasks (of handling the email messages). The task to do should be determined by the remainder obtained from dividing your team number by 5. For example, if your team number is SEVEN, 7%5 = 2, you should do Task 2) of this assignment.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><ol><li><p>The function performs the sorting of the received emails based on the name of the sender (within the To_From field) in ascending order, and display a sorted list of sender name, subject and date of sending.<br>Hint: To do the sorting, notice that strcmp(“Peter”, “Mary”) will return 1, meaning that “Peter” is larger than “Mary”. Similarly, strcmp(“Mary”, “Peter”) will return -1, strcmp(“Mary”,”Mary”) will return 0. Notice that you can ignore the sent-to-receiver messages.</p></li><li><p>The function performs the sorting of the sent emails based on the name of the receiver (within the To_From field) in ascending order, and display a sorted list of receiver name, subject and date of receiving. To do the sorting, read the hint in Task 0). Notice that you can ignore the received-from-sender messages.</p></li><li><p>The function performs the sorting of the emails based on the date in ascending order, and display a sorted list of date, name, and subject together with a string indicating it is a sent or received message.</p></li><li><p>The function performs the sorting of the emails based on the subject in ascending order, and display the sorted list of subject, name, and date together with a string indicating it is a sent or received message. To do the sorting, read the hint in Task 0).</p></li><li><p>The function asks the user to input a name, and display a numbered list of subject and date of the email together with a string indicating it is a sent or received email under that name. The user can then enter a number and the corresponding email will be deleted from the database.</p></li></ol><p>Hint: You can add a member variable in the cEmail class that specifies whether it is a valid email. If an email is deleted from the database, that email becomes an invalid email. On displaying the content of the database, only valid emails will be shown.</p><ul><li>It is required that the class and the implementation of its member functions should be built as a separate static library and linked into the console application.</li><li>Your program is expected to provide a text-mode user interface so that users can repeatedly handle and display the database of emails until the user chooses to end the application.</li><li>Should you want to get a credit, you should design the application such that when a user wants to start it, he needs to login the application with a username first, which will be checked with a file that stores username-password pairs. If the username is new, the application will ask for a password from the user and store it into that file. If the username can be found in that file, the application will start only when the password is correct. The application will end if the user fails to provide the correct password in three consecutive trials.</li></ul><h3 id="General-Description"><a href="#General-Description" class="headerlink" title="General Description"></a>General Description</h3><ol><li><p>Each team should comprise up to TWO students (THREE students for HD class).</p></li><li><p>Unless you get prior approval from your subject lecturer/tutor, you must observe the following:</p></li><li><p>Do NOT use any technique or C++ constructs not taught in the subject</p><ul><li>Any library not mentioned in the subject must NOT be used (e.g. the mathematics library to compute x to the power of y.)</li><li>Each team should upload the zipped file to the Blackboard (under Groups, select File Exchange after clicking your team number).</li></ul></li><li><p>The documentation for your assignment is important. The ability of writing good comments in the program will also be an important factor to the final assessment of your assignment.</p></li><li><p>It is compulsory to use a word processing tool to write your report. The font size must not be bigger than 12 or smaller than 10. Use 1.5 lines spacing on both sides of a page. Including all figures and tables, if any, the length of the report should not be shorter than 7 pages.</p></li></ol>]]></content>
    
    <summary type="html">
    
      用C++代写一个Email的处理程序，本质上是字符串处理函数以及程序设计。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Algorithms" scheme="https://tk1307993.coding.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>PSCB57-Own-Small-Project</title>
    <link href="https://tk1307993.coding.me/PSCB57-Own-Small-Project.html"/>
    <id>https://tk1307993.coding.me/PSCB57-Own-Small-Project.html</id>
    <published>2020-02-14T04:13:39.000Z</published>
    <updated>2020-02-14T04:15:37.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do"></a>What to do</h3><p>This is the last assignment for PSCB57. In this assignment, you find your own small project to work on. What subject area you want to work on is entirely up to you. You can work with data that you collected in a lab for a different course. You can also use data that you find online in any field that interests you. Or you can write a simulation and create your own data.</p><p>You have to submit a short report as well as the python code that you wrote for simulating, analyzing and/or visualizing. Make sure your submission satisfies all the following criteria:</p><ol><li>Out of the following list of topics that we covered in this course, select three topics. For each topic you choose, use one of the algorithms/methods in your project. For example, use the Euler method, then perform a linear interpolation and plot the final results. Or, do a Lagrange interpolation, find the roots with Newton’s method and visualize the results on a plot.</li><li>Root finding: Bisection method, Newton’s method</li><li>Interpolation: Linear/linear interpolation, cubic splines, Lagrange interpolation</li><li>Fitting: (Linear) Least Square Fit</li><li>Solving ODEs: Euler method, mid-point method</li><li>Stochastic processes: Monte Carlo, Markov Chain Monte Carlo</li><li>Plotting: matplotlib</li><li>Your program should be written in python 3.</li><li>You can use any library that you want for this project.</li><li>Place all the code that you wrote into one file. The file should run and reproduce all the data/plots for your project. There are no restrictions on the length. Don’t include any data files.</li><li>Write a report. The report should be two pages or less. Describe which project you worked on, what you tried to find out, which methods you used. Show the results and discuss them.</li><li>The report should be a single pdf file with all tables and plots embedded in the file.</li></ol><h3 id="Grading-scheme"><a href="#Grading-scheme" class="headerlink" title="Grading scheme"></a>Grading scheme</h3><p>This assignment will count twice as much as the other assignments. Here is the grading scheme that will be used to evaluate your report and the code you wrote:</p><ul><li>Project choice</li><li>Choice of appropriate numerical methods, accurate use of numerical methods</li><li>Coding style</li><li>Report, presentation of results, plots, tables</li></ul>]]></content>
    
    <summary type="html">
    
      任意选择六个topics中的三个，代写一个小型的Project，内容自定。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Algorithms" scheme="https://tk1307993.coding.me/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>CSE143X-Backus-Naur-Form</title>
    <link href="https://tk1307993.coding.me/CSE143X-Backus-Naur-Form.html"/>
    <id>https://tk1307993.coding.me/CSE143X-Backus-Naur-Form.html</id>
    <published>2020-02-09T02:25:55.000Z</published>
    <updated>2020-02-09T02:30:58.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This assignment will give you practice with recursion, regular expressions, and grammars and will give you another opportunity to work with maps. You will complete a program that reads an input file with a grammar in Backus-Naur Form (BNF) and will allow the user to randomly generate elements of the grammar.</p><p>You will be given a main program that does the file processing and user interaction. It is called GrammarMain.java. You are to write a class called GrammarSolver that manipulates the grammar. A grammar will be specified as a sequence of Strings, each of which represents the rules for a nonterminal symbol. Each String will be of the form:<br><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;nonterminal symbol&gt;</span>::=&lt;rule&gt;|&lt;rule&gt;|&lt;rule&gt;|…|&lt;rule&gt;</span><br></pre></td></tr></table></figure></p><p>Notice that this is the standard BNF format of a nonterminal symbol on the left-hand-side and a series of rules separated by vertical bar characters (“|”) on the right-hand side. If there is only one rule for a particular nonterminal, then there will be no vertical bar characters. BNF productions use the characters “::=” to separate the symbol from the rules.</p><p>There will be exactly one occurrence of “::=” per String. The text appearing before the “::=” is a nonterminal symbol. You may assume that it is not empty, that it does not contain a vertical bar character, and that it does not contain any whitespace. Often we surround nonterminal symbols with the characters, but this will not always be the case. The text appearing after the “::=” will be a nonempty series of rules separated by vertical bar characters (“|”). Each of these rules will have a series of tokens (always at least one) separated and potentially surrounded by whitespace. There could be any amount of whitespace surrounding tokens. Any token that appears to the left of a “::=” in the grammar is considered a nonterminal. All other tokens are considered terminals.</p><p>The grammars you will be asked to process will be stored in text files with each line of the file being of the form described above. GrammarMain reads this file into a List and passes the list to the constructor of your GrammarSolver. Your solver has to be able to perform certain tasks, most notably generating random elements of the grammar.</p><p>To generate a random instantiation of a nonterminal, you simply pick at random one of its rules and generate whatever that rule tells you to generate. Notice that this is a recursive process. Generating a nonterminal involves picking one of its rules at random and then generating each part of that rule, which might involve more nonterminal symbols to generate for which you pick rules at random and generate each part of those rules, and so on. Depending upon the grammar, this process could continue indefinitely. Any grammar you will be asked to work with will be guaranteed to converge in a finite period of time. Most often this process doesn’t go on indefinitely because many rules involve terminals rather than nonterminals. . When you encounter a terminal, you simply include it in the String you are generating. This becomes the base case of the recursive process. Your generating method produces various String objects. Each String should be compact in the sense that there should be exactly one space between each terminal and there should be no leading or trailing spaces.</p><p>For example, the grammar on the previous page could be used to randomly generate a non-terminal for the sentence, “Fred honored the green wonderful child”, as shown in the diagram on the next page:</p><p>Your class must include the following public methods.<br>|  Method   |     Description  |<br>|  ———–  | ———–  |<br>| GrammarSolver(List grammar)  | This method will be passed a grammar as a List of Strings. Your method should store this in a convenient way so that you can later generate parts of the grammar. It should throw an IllegalArgumentException if the grammar is empty or if there are two or more entries in the grammar for the same nonterminal. Your method is not to change the List of Strings. |<br>| boolean grammarContains(String symbol)  | Returns true if the given symbol is a nonterminal of the grammar; returns false otherwise. |<br>| String[] generate(String symbol, int times)  | In this method you should use the grammar to randomly generate the given number of occurrences of the given symbol and you should return the result as an array of Strings. For any given nonterminal symbol, each of its rules should be applied with equal probability. It should throw an IllegalArgumentException if the grammar does not contain the given nonterminal symbol or if the number of times is less than 0. |<br>| String getSymbols()  | This method should return a String representation of the various nonterminal symbols from the grammar as a sorted, comma-separated list enclosed in square brackets, as in “[, , ]” |</p><p>Case matters when comparing symbols. For example, S would not be considered the same as.</p><p>The directory crawler program will serve as a good guide for how to write this program. In that program, the recursive method has a for-each loop. This is perfectly acceptable. Just because we are now learning how to use recursion, we don’t want to abandon what we know about loops. If you find that some part of this problem is easily solved with a loop, then go ahead and use one. In the directory crawler, the hard part was writing code to traverse all of the different directories and that’s where we used recursion. For your program the hard part is following the grammar to generate different parts of the grammar, so that is the place to use recursion.</p><p>You will discover that when writing recursive solutions to problems, we often find ourselves with a public/private pair of methods. You will want to use that approach here. You have been asked to write a public method called generate that will generate an array of Strings. But internally inside your object, you’re going to want to produce these values one String at a time using a recursive method. You should make this internal method private so that it is not visible to the client.</p><p>We want you to store the grammar in a particular way. We are making use of the SortedMap interface and the implementation TreeMap, both in java.util. Maps keep track of key/value pairs. Each key is associated with a particular value. In our case, we want to store something for each nonterminal symbol. So the nonterminal symbols become the keys and the rules become the values. Using this approach, you will find that the getSymbols method can be written quickly because the SortedMap interface includes a method called keySet that returns a set of keys from the map. If you ask for the “toString” of this set, you will get the desired string. It is important to use the SortedMap/TreeMap combination because it keeps the keys in sorted order (notice that getSymbols requires that the nonterminals be listed in sorted order).</p><p>Below are some specific notes about Java constructs you should be using:</p><ul><li><p>The Random class in java.util can be used to generate a random integer by calling its nextInt method or you can use the method Math.random.</p></li><li><p>The String class has a method called “trim” that will return a new version of the String minus any leading or trailing whitespace.</p></li><li><p>One problem you will have to deal with is breaking up strings into various parts. You should use the split method of the String class to do so, although you are also allowed to use a string-based Scanner if you prefer. The split method makes use of what are called “regular expressions” and this can be confusing, but you will find that learning about regular expressions is extremely helpful for computer scientists and computer programmers. Many unix tools, for example, take regular expressions as input.</p></li></ul><p>In terms of correctness, your class must provide all of the functionality described above. In terms of style, we will be grading on your use of comments, good variable names, consistent indentation and good coding style to implement these operations. Remember that you will lose points if you declare variables as data fields that can instead be declared as local variables. You should also avoid extraneous cases (e.g., don’t make something into a special case if it doesn’t have to be). And you should continue to declare variables, fields, parameters and return types using an interface when possible.</p><p>You should name your file GrammarSolver.java and you should turn it in electronically from the “assignments” link on the class web page. A collection of files needed for the assignment is included on the web page as ass5.zip. You will need to have GrammarMain.java, sentence.txt and sentence2.txt in the same directory as your GrammarSolver.java in order to run GrammarMain. The second input file contains extraneous whitespace, including tabs. This second input file sometimes generates very long expressions as output.</p>]]></content>
    
    <summary type="html">
    
      练习Recursion和Regular expressions的用法，代写一个语法解析器，比较烧脑的一个作业。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CIS22A-Nested-Loops</title>
    <link href="https://tk1307993.coding.me/CIS22A-Nested-Loops.html"/>
    <id>https://tk1307993.coding.me/CIS22A-Nested-Loops.html</id>
    <published>2020-02-06T01:39:35.000Z</published>
    <updated>2020-02-06T01:41:18.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a C++ program CIS22A-Lab6-XXXXX.cpp that implements a simple number guessing game with multiple questions / answers. For each game, the program generates a random number between 1 and 10. User enters an answer from 1 and 10. If the user input number matches the generated number, then print a message to inform users that he/she has a correct guess. If the guess is not correct, allow the user to have two more chances to guess the correct number. At any time, if users enter 0, then the program should display the session summary and exits. The program should keep track of the wins and losses and print the counts when user chooses to exit by entering 0.<br>The program should generate a new random number only after user enters the correct guess or after user has tried 3 times and did not have the right guess. Do not ask user for a yes/no confirmation after each game because the 0 input value will serve as the sentinel to stop the continuous game.</p><p>Here is a sample run using command line.</p><p>At the program start, it shows:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"Welcome to the number guessing game.</span></span><br><span class="line">For each game, you have at most <span class="number">3</span> chances <span class="keyword">to</span> guess <span class="keyword">a</span> secret <span class="keyword">number</span> from <span class="number">1</span> <span class="keyword">to</span> <span class="number">10</span>.<span class="comment">"</span></span><br></pre></td></tr></table></figure></p><p>The first time, when a new question is asked, the program displays:<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"Enter a number from 1 to 10. Enter 0 to exit:"</span></span><br></pre></td></tr></table></figure></p><p>When users give a wrong guess, it shows:</p><p>Not correct, try again:</p><p>When users give a wrong answer after the third trials for the same question, the program displays:<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"Not correct. You have reached your third trials. The correct number is X."</span></span><br><span class="line"><span class="comment">"Lets start a new secret number"</span></span><br></pre></td></tr></table></figure></p><p>When users answer with the correct number, it shows this prompt:<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"Congratulation, correct! Let's start a new secret number."</span></span><br></pre></td></tr></table></figure></p><p>When users hit 0, the game summary is displayed:</p><p>Here is your game summary:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Total <span class="string">games:</span>           <span class="number">5</span></span><br><span class="line">Total game <span class="string">wins:</span>       <span class="number">3</span></span><br><span class="line">Total game <span class="string">losses:</span>     <span class="number">2</span></span><br></pre></td></tr></table></figure></p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><ol><li>Use the function rand() to generate random numbers and srand() to intialize the generator.</li><li>Also use “time.h” and use the srand() to generate a random seed for the random generator. The srand() should be called only once outside the loop before the game starts.</li><li>In main(), you can use a “while” or “for” loop to gets inputs.</li><li>To control the number of maximum trial answer per question, you can use a nested loop inside the main “while” loop.<br>Generate a new random number only when a new game starts after users either have entered the correct answer or users have exceeded the 3 trials.</li><li>For the count of losses, update the count only when users have exceeded the maximum 3 trials. Do not count as a loss if users have not finished the 3 trials.</li></ol><p>Add Comment at the top of yor program:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br><span class="line">/* Author:</span><br><span class="line">/* Description:</span><br><span class="line">/*</span><br><span class="line">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br></pre></td></tr></table></figure><p>To run my game with “cheating mode”, open the Windows command console , change to folder where you save the sample game, and run with the /c option<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/MyDocuments/lab-6</span></span><br><span class="line">lab-6 <span class="string">/c</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      基础C++作业代写，练习嵌套循环的使用方法。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS150-Game-of-War</title>
    <link href="https://tk1307993.coding.me/CS150-Game-of-War.html"/>
    <id>https://tk1307993.coding.me/CS150-Game-of-War.html</id>
    <published>2020-02-01T01:09:09.000Z</published>
    <updated>2020-02-01T01:11:56.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this problem set you’ll build on the work of recent dailies to write a complete program. There is a flowchart deadline and a draft deadline as well as a final deadline.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>You will implement the game of War in a C++ program. There are no official rules, so we will follow the 2-player rules outlined below. Visit Wikipedia for more details. If you are not familiar with the standard deck of cards, there is a Wikipedia article for that too. The rules of the game are very simple, so it is really a game for young children.</p><ul><li>The game is played with a standard 52-card deck (13 ranks, Aces high, 4 suits). Suits are ignored in War.</li><li>The deck is shuffled and then dealt into 2 equal hands of 26.</li><li>Players play their hands from top to bottom. Cards are not examined or rearranged.</li><li>Each player turns over the top card from their hand. The high card wins and collects both cards, which are returned to the bottom of the winner’s hand. In the event of a tie, there is a war, described below.</li><li>In a war, the tying cards stay out and are followed by one face-down card and one face-up card per player. The face-up cards play in the same way as usual: the high card winds and the player collects all six cards out and returns them to the bottom of their hand.</li><li>If ties continue, the war continues with another two face-down cards and another two face-up cards. If a player runs out of cards during a war, the player loses immediately.</li><li>If the war ends, play continues as normal.<br>The game is over when one player collects all 52 cards, or when a war ends due to one player’s inability to continue.</li></ul><h3 id="Specifications"><a href="#Specifications" class="headerlink" title="Specifications"></a>Specifications</h3><p>Much of the program’s design is up to you, but you must write your code to follow the specifications below.</p><ul><li><p>Your code should compile using the command</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">g</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">-</span><span class="comment">std=c</span><span class="literal">+</span><span class="literal">+</span><span class="comment">11</span> <span class="literal">-</span><span class="comment">Wall</span> <span class="literal">-</span><span class="comment">Werror</span> <span class="literal">-</span><span class="comment">pedantic</span> <span class="literal">-</span><span class="comment">o</span> <span class="comment">war</span> <span class="comment">war</span><span class="string">.</span><span class="comment">c</span><span class="literal">+</span><span class="literal">+</span></span><br></pre></td></tr></table></figure></li><li><p>The deck of cards and each hand, as well as other piles of cards of a temporary nature, should be implemented as vectors.</p></li><li>When a player wins a trick, the cards collected must be returned to the bottom of the hand—that is, the opposite side from where cards are played.</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个叫Game of War的扑克牌游戏，能实现双人对战。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS117-Palindrome</title>
    <link href="https://tk1307993.coding.me/CS117-Palindrome.html"/>
    <id>https://tk1307993.coding.me/CS117-Palindrome.html</id>
    <published>2020-01-29T00:17:30.000Z</published>
    <updated>2020-01-29T00:29:06.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise #1"></a>Exercise #1</h3><p>A palindrome is any word or phrase which reads the same backwards as it does forward. For instance the word Bob is a palindrome. Napoleon is also attributed as saying the famous palindrome Able was I ere I saw Elba. As a counter example the phrase Computer Science is fun is NOT a palindrome.</p><p>For this exercise you will implement a program which asks the user for a string. The program will then output whether or not the phrase is a palindrome.</p><blockquote><p>Hint: use an array of characters to determine if the string is a palindrome.</p></blockquote><p>Sample output:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter <span class="keyword">a</span> phrase: Rise <span class="built_in">to</span> vote sir</span><br><span class="line"></span><br><span class="line"><span class="string">"Rise to vote sir"</span> IS A PALINDROME</span><br></pre></td></tr></table></figure></p><p>Save your solution in a file named palindrome.cpp.</p><h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise #2"></a>Exercise #2</h3><p>In statistics, the standard deviation measures the amount of variation or dispersion from the average. It can be calculated using the following formula:<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">σ =√∑(x−μ)<span class="number">2</span> / <span class="built_in">n</span></span><br></pre></td></tr></table></figure></p><p>Where σ is the standard deviation, x is each value in the data set, μ is the mean of all values in the data set, and n is the number of values in the data set. For your program you will ask the user for double values. Your program should stop when the user enters -99 when at this point your program will display the mean and the standard deviation from the data set.</p><p>Sample output:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Enter <span class="keyword">a</span> <span class="built_in">value</span> (<span class="keyword">or</span> <span class="number">-99</span> <span class="built_in">to</span> quit): <span class="number">3</span></span><br><span class="line">Enter <span class="keyword">a</span> <span class="built_in">value</span> (<span class="keyword">or</span> <span class="number">-99</span> <span class="built_in">to</span> quit): <span class="number">5</span></span><br><span class="line">Enter <span class="keyword">a</span> <span class="built_in">value</span> (<span class="keyword">or</span> <span class="number">-99</span> <span class="built_in">to</span> quit): <span class="number">11</span></span><br><span class="line">Enter <span class="keyword">a</span> <span class="built_in">value</span> (<span class="keyword">or</span> <span class="number">-99</span> <span class="built_in">to</span> quit): <span class="number">14</span></span><br><span class="line">Enter <span class="keyword">a</span> <span class="built_in">value</span> (<span class="keyword">or</span> <span class="number">-99</span> <span class="built_in">to</span> quit): <span class="number">11</span></span><br><span class="line">Enter <span class="keyword">a</span> <span class="built_in">value</span> (<span class="keyword">or</span> <span class="number">-99</span> <span class="built_in">to</span> quit): <span class="number">-99</span></span><br><span class="line">The <span class="built_in">average</span> is <span class="number">8.8</span> <span class="keyword">with</span> <span class="keyword">a</span> standard deviation <span class="keyword">of</span> <span class="number">4.11</span>.</span><br></pre></td></tr></table></figure></p><p>Save your solution in a file named stddev.cpp.</p><h3 id="Exercise-3"><a href="#Exercise-3" class="headerlink" title="Exercise #3"></a>Exercise #3</h3><p>Consider the classic number guessing game we played in class, where one person thinks of a number and the second player attempts to guess that number given a number of attempts. For this exercise, you will write a program where the user will think of a number between 1 and 100, and the computer will attempt to guess it using the binary search algorithm.</p><p>Sample output:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Think of a number between 1 <span class="keyword">and</span> 100.    Ready?    (Y/N)    Y</span><br><span class="line">Is the number 50? (<span class="attribute">1</span>=Higher, <span class="attribute">2</span>=Lower, <span class="attribute">3</span>=Exact) 2</span><br><span class="line">Is the number 25? (<span class="attribute">1</span>=Higher, <span class="attribute">2</span>=Lower, <span class="attribute">3</span>=Exact) 1</span><br><span class="line">Is the number 37? (<span class="attribute">1</span>=Higher, <span class="attribute">2</span>=Lower, <span class="attribute">3</span>=Exact) 3</span><br><span class="line">Thanks <span class="keyword">for</span> playing.</span><br></pre></td></tr></table></figure></p><p>Save your solution in a file named guess.cpp.</p><h3 id="Exercise-4"><a href="#Exercise-4" class="headerlink" title="Exercise #4"></a>Exercise #4</h3><p>For this exercise you will read in student names and test scores into two arrays: an array of strings for the names and an array of integers for the scores. You will write a program which sorts the scores and displays the scores from highest to lowest and the student’s name who received the grade. Please use one of the sorting algorithms discussed in class. Do not use std::sort.</p><p>Implement the sort using either the Quick Sort algorithm, Merge Sort algorithm or with any advanced sorting algorithm with an average case runtime of Θ(nlog2n).</p><p>Sample output:<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">How many students took the exam?    <span class="number">3</span></span><br><span class="line">Student <span class="string">#1</span> <span class="keyword">Name</span>: Justin Verlander</span><br><span class="line">Student <span class="string">#1</span> Score: <span class="number">84</span></span><br><span class="line">Student <span class="string">#2</span> <span class="keyword">Name</span>: Jon Lester</span><br><span class="line">Student <span class="string">#2</span> Score: <span class="number">96</span></span><br><span class="line">Student <span class="string">#3</span> <span class="keyword">Name</span>: Clayton Kershaw</span><br><span class="line">Student <span class="string">#3</span> Score: <span class="number">51</span></span><br><span class="line">RESULTS:</span><br><span class="line">Jon Lester – <span class="number">96</span></span><br><span class="line">Justin Verlander – <span class="number">84</span></span><br><span class="line">Clayton Kershaw - <span class="number">51</span></span><br></pre></td></tr></table></figure></p><p>Save your solution in a file named reversal.cpp.</p>]]></content>
    
    <summary type="html">
    
      代写五个基础C++练习题，从Palindrome到Tic-Tac-Toe.
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS368-Shopping-Website</title>
    <link href="https://tk1307993.coding.me/CS368-Shopping-Website.html"/>
    <id>https://tk1307993.coding.me/CS368-Shopping-Website.html</id>
    <published>2020-01-21T02:33:34.000Z</published>
    <updated>2020-01-21T02:35:36.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Using a combination of HTML and JavaScript functionality, implement some specific user interaction features in the provided “Shopping Cart” and “Shipping Details” pages. Both HTML documents and some initial JavaScript are provided for you in the document.</p><ul><li>cart.html - a simple HTML shopping cart</li><li>shipping.html - a simple form for billing and shipping details.</li><li>css/ - folder containing styles used for both pages</li><li>images/ - folder containing product images</li><li>js/ - folder containing cart.js and shipping.js<br>The tasks can be completed using native JavaScript and HTML code only. However, if you wish to use jQuery code to implement some functionality, you may download jQuery and link it to the HTML documents as and external script. You are allowed to edit the HTML documents as long as the information and overall presentation of each page is not affected.</li></ul><h3 id="Marking-Criteria"><a href="#Marking-Criteria" class="headerlink" title="Marking Criteria"></a>Marking Criteria</h3><h4 id="Shopping-Cart"><a href="#Shopping-Cart" class="headerlink" title="Shopping Cart"></a>Shopping Cart</h4><ul><li>The item quantity fields should allow user-friendly entry of number values</li><li>The number in the item quantity fields should be limited to values between 1 and 10 inclusive</li><li>When an item quantity is changed, automatically recalculate the sub-total for that item</li><li>When clicking on an item’s × button, remove the item’s entire table row from the table</li><li>When a sub-total changes or an item is removed, automatically update the final cart total</li><li>When the “Go to Checkout” button is clicked, navigate to the “Shipping Details” page</li></ul><h4 id="Shipping-Details"><a href="#Shipping-Details" class="headerlink" title="Shipping Details"></a>Shipping Details</h4><ul><li>When the checkbox is selected, any information in the billing fields should be copied to the shipping fields</li><li>When the checkbox is deselected, any information in the shipping fields should be cleared.</li><li>Prevent form submission if any of the fields are left empty - except for the “Address 2” fields which are optional</li><li>Ensure that the user has entered an email and Australian postcode in the correct formats</li></ul><p>The JavaScript files provided for this task contain some comments to help you understand the partially complete functionality that is currently implemented.</p>]]></content>
    
    <summary type="html">
    
      用JavaScript和HTML代写前端页面，实现Shopping Cart页面和Shipping Details页面的交互逻辑。
    
    </summary>
    
      <category term="Javascript" scheme="https://tk1307993.coding.me/categories/Javascript/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>CSE6242-HadoopSparkPigandAzure</title>
    <link href="https://tk1307993.coding.me/CSE6242-HadoopSparkPigandAzure.html"/>
    <id>https://tk1307993.coding.me/CSE6242-HadoopSparkPigandAzure.html</id>
    <published>2020-01-18T00:49:00.000Z</published>
    <updated>2020-01-18T00:52:41.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task-1-Analyzing-a-Graph-with-Hadoop-Java"><a href="#Task-1-Analyzing-a-Graph-with-Hadoop-Java" class="headerlink" title="Task 1: Analyzing a Graph with Hadoop/Java"></a>Task 1: Analyzing a Graph with Hadoop/Java</h3><h4 id="Writing-your-first-simple-Hadoop-program"><a href="#Writing-your-first-simple-Hadoop-program" class="headerlink" title="Writing your first simple Hadoop program"></a>Writing your first simple Hadoop program</h4><p>Imagine that your boss gives you a large dataset which contains an entire email communication network from a popular social network site. The network is organized as a directed graph where each node represents an email address and the edge between two nodes (e.g., Address A and Address B) has a weight stating how many times A wrote to B. The boss is very interested in finding out the people most frequently contacted by others. Your task is to write a MapReduce program in Java to report the largest weight among all the weighted inbound edges for each node in the graph.</p><p>First, go over the Hadoop word count tutorial to get familiar with Hadoop and some Java basics. You will be able to complete this task with only some knowledge about Java. You should have already loaded two graph files into HDFS and loaded into your HDFS file system in your vm. Each file stores a list of edges as tab-separated-values. Each line represents a single edge consisting of three columns: (source node ID, target node ID, edge weight), each of which is separated by a tab (\t). Node IDs are positive integers, and weights are also positive integers. Edges are ordered randomly.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src  tgt  weight</span><br><span class="line"><span class="number">117</span>  <span class="number">51</span>   <span class="number">1</span></span><br><span class="line"><span class="number">194</span>  <span class="number">51</span>   <span class="number">1</span></span><br><span class="line"><span class="number">299</span>  <span class="number">51</span>   <span class="number">3</span></span><br><span class="line"><span class="number">230</span>  <span class="number">151</span>  <span class="number">51</span></span><br><span class="line"><span class="number">194</span>  <span class="number">151</span>  <span class="number">79</span></span><br><span class="line"><span class="number">51</span>   <span class="number">130</span>  <span class="number">10</span></span><br></pre></td></tr></table></figure><p>Your code should accept two arguments upon running. The first argument (​args[0]) will be a path for the input graph file on HDFS (e.g., /user/cse6242/graph1.tsv), and the second argument (​args[1]) will be a path for output directory on HDFS (e.g., /user/cse6242/task1output1). The default output mechanism of Hadoop will create multiple files on the output directory such as part-00000, part-00001, which will be merged and downloaded to a local directory by the supplied run script. Please use the run scripts for your convenience.</p><p>The format of the output should be such that each line represents a node ID and the largest weight among all its inbound edges. The ID and the largest weight must be separated by a tab (\t). Lines do not need be sorted. The following example result is computed based on the toy graph above. Please exclude nodes that do not have incoming edges (e.g., those email addresses that never get contacted by anybody).</p><p>For the toy graph above, the output is as follows.<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">51 </span>  <span class="number">3</span></span><br><span class="line"><span class="symbol">151 </span> <span class="number">79</span></span><br><span class="line"><span class="symbol">130 </span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>Test your program on graph1.tsv and graph2.tsv. To demonstrate how your MapReduce procedure works, ​use the inline example above, trace the input and output of your map and reduce functions. That is, given the above graph as the input, describe the input and output of your map and reduce function(s) and how the functions transform/process the data (provide examples whenever appropriate). Write down your answers in ​description.pdf​. You are welcome to explain your answers using a combination of text and images.</p><h4 id="Designing-a-MapReduce-algorithm-and-thinking-in-MapReduce"><a href="#Designing-a-MapReduce-algorithm-and-thinking-in-MapReduce" class="headerlink" title="Designing a MapReduce algorithm (and thinking in MapReduce)"></a>Designing a MapReduce algorithm (and thinking in MapReduce)</h4><p>Design a MapReduce algorithm that accomplishes the following task: for each node i in a directed graph G, find that node’s in neighbors’ in neighbors​. Node u is considered to be an in neighbor of node v if there is a directed edge pointing from node u to node v. In other words, your task is find every “2-hop” neighbor of every node i in the graph G, where such a neighbor is connected by at least one directed path of length 2 that reaches node i.</p><blockquote><p>NOTE: You only need to submit pseudo code, a brief explanation of your algorithm, and trace of input and output of your map and reduce functions for the graph given below. No coding is required​.</p></blockquote><h3 id="Task-2-Analyzing-a-Large-Graph-with-Spark-Scala"><a href="#Task-2-Analyzing-a-Large-Graph-with-Spark-Scala" class="headerlink" title="Task 2: Analyzing a Large Graph with Spark/Scala"></a>Task 2: Analyzing a Large Graph with Spark/Scala</h3><p>Please go over this ​Spark word count tutorial​ to get more background about Spark/Scala.</p><h4 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h4><p>Your task is to calculate the gross accumulated node weights for each node in graph1.tsv and graph2.tsv from edge weights using Spark and Scala. Assume the graph to be a representation of a network flow where each edge represents the number of items flowing from source to target. The gross accumulated node weight for a node is now defined as the number of items produced/consumed by the node.</p><p>When loading the edges, parse the edge weights using the ​toInt method and filter out (ignore) all edges whose edge weights equal 1 i.e., only consider edges whose edge weights do not equal 1.</p><p>Your Scala program should handle the same two arguments as in Task 1 for input and output from the console, and should generate the same formatted output file on the supplied output directory (tab-separated-file). Please note that the default Spark saveastextfile method uses a saving format that is different from Hadoop’s, so you need to format the result before saving to file (Tip: use map and mkString). The result doesn’t need to be sorted.</p><h3 id="Task-3-Analyzing-Large-Amount-of-Data-with-Pig-on-AWS"><a href="#Task-3-Analyzing-Large-Amount-of-Data-with-Pig-on-AWS" class="headerlink" title="Task 3: Analyzing Large Amount of Data with Pig on AWS"></a>Task 3: Analyzing Large Amount of Data with Pig on AWS</h3><p>You will try out PIG (​<a href="http://pig.apache.org​" target="_blank" rel="noopener">http://pig.apache.org​</a>) for processing n-gram data on Amazon Web Services (AWS). This is a fairly simple task, and in practice you may be able to tackle this using commodity computers (e.g., consumer-grade laptops or desktops). However, we would like you to use this exercise to learn and solve it using distributed computing on Amazon EC2, and gain experience (very helpful for your future career in research or industry), so you are prepared to tackle more complex problems.</p><p>The services you will primarily be using are Amazon S3 storage, Amazon Elastic Cloud Computing (EC2) virtual servers in the cloud, and Amazon Elastic MapReduce (EMR) managed Hadoop framework.</p><p>This task will ideally​ use up​ only a very small fraction of your $100 credit​. AWS allows you to use up to 20 instances in total (that means 1 master instance and up to 19 core instances) without filling out a “limit request form”. For this assignment, you should not exceed this quota of 20 instances​. You can learn about these instance types, their specs, and pricing at Instance Types​.</p><p>Please read the AWS Setup Guidelines provided to set up your AWS account. In this task, you will use subsets of the Google books n-grams dataset (full dataset for reference), on which you will perform some analysis. An ‘n -gram’ is a phrase with n words; the full n-gram dataset lists n-grams present in the books on books.google.com along with some statistics.</p><p>You will perform your analysis on two custom datasets, extracted from the Google books bigrams (2-grams), that we have prepared for you: a small one and a large one. To help you evaluate the correctness of your output, we have uploaded the output for the small dataset on T-Square (the link is here​ ).</p><blockquote><p>VERY IMPORTANT​ : Both these datasets are in the US-Standard (US-East) region. Using machines in other regions for computation would incur data transfer charges. Hence, set your region to US East (N. Virginia) in the beginning (not Oregon which is the default). This is extremely important otherwise your code may not work and you may be charged extra.</p></blockquote><h4 id="Goal-1"><a href="#Goal-1" class="headerlink" title="Goal"></a>Goal</h4><p>For each unique bigram, compute its average number of appearances per book, with at least 50 occurrences for each recorded year. For the above example, the results will be:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I am       (<span class="number">342</span> + <span class="number">211</span>) / (<span class="number">90</span> + <span class="number">10</span>) = <span class="number">5.53</span></span><br><span class="line">very cool  (<span class="number">500</span> + <span class="number">3210</span> + <span class="number">9994</span>) / (<span class="number">10</span> + <span class="number">1000</span> + <span class="number">3020</span>) = <span class="number">3.40049628</span></span><br></pre></td></tr></table></figure></p><p>Output the 10 bigrams having the highest average number of appearances per book along with their corresponding averages, in tab-separated format​, sorted in descending order, with at least 50 occurrences for each recorded year. If multiple bigrams have the same average, order them alphabetically. For the example above, the output will be:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">I</span> <span class="selector-tag">am</span>       5<span class="selector-class">.53</span></span><br><span class="line"><span class="selector-tag">very</span> <span class="selector-tag">cool</span>  3<span class="selector-class">.40049628</span></span><br></pre></td></tr></table></figure></p><p>You will solve this problem by writing a PIG script on Amazon EC2 and save the output.</p><p>You can use the interactive PIG shell provided by EMR to perform this task from the command line (grunt). In this case, you can copy the commands you used for this task into a single file to have the PIG script and the output from the command line into a separate file. Please see this for how to use PIG shell. Also, you can upload the script and create a task on your cluster.</p><h3 id="Task-4-Analyzing-a-Large-Graph-using-Hadoop-service-onMicrosoft-Azure"><a href="#Task-4-Analyzing-a-Large-Graph-using-Hadoop-service-onMicrosoft-Azure" class="headerlink" title="Task 4: Analyzing a Large Graph using Hadoop service onMicrosoft Azure"></a>Task 4: Analyzing a Large Graph using Hadoop service onMicrosoft Azure</h3><h4 id="Goal-2"><a href="#Goal-2" class="headerlink" title="Goal"></a>Goal</h4><p>Your task is to write a MapReduce program to calculate the degree distribution of a graph. Note that this task shares some similarities with Task 1 (e.g., both are analyzing graphs). Task 1 can be completed using your own computer. This task is to be completed using Azure. We recommend that you first complete Task 1.</p><p>You will use data files small.tsv(~75MB) and large.tsv(~3GB), for this question. Each file stores a list of edges as tab-separated-values. Each line represents a single edge consisting of two columns: (Node A, Node B), each of which is separated by a tab. Node IDs are positive integers and the rows are already sorted by Node A.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src  tgt</span><br><span class="line"><span class="number">51</span>   <span class="number">130</span></span><br><span class="line"><span class="number">51</span>   <span class="number">194</span></span><br><span class="line"><span class="number">51</span>   <span class="number">299</span></span><br><span class="line"><span class="number">130</span>  <span class="number">200</span></span><br><span class="line"><span class="number">151</span>  <span class="number">230</span></span><br><span class="line"><span class="number">151</span>  <span class="number">194</span></span><br></pre></td></tr></table></figure></p><p>Your code should accept two arguments upon running. The first argument (args[0]) will be a path for the input graph file, and the second argument (args[1]) will be a path for output directory. The default output mechanism of Hadoop will create multiple files on the output directory such as part-00000, part-00001, which will have to be merged and downloaded to a local directory.</p><p>The format of the output should be as follows. Each line represents the degree and its frequency. The degree and the frequency of the degree must be separated by a tab(\t), and lines don’t have to be sorted. The following example result is computed based on the toy graph above.</p><blockquote><p>Hint​: One way of doing it is using mapreduce procedure twice. First for finding the degree of each node and second for calculating the frequency of each degree. You will have to make appropriate changes in the skeleton code for this.</p></blockquote>]]></content>
    
    <summary type="html">
    
      代写四个关于大数据的作业，涉及到Hadoop, Spark和Pig的使用，最后需要在AWS和Azure上搭建环境进行计算。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/tags/Hadoop/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
      <category term="Pig" scheme="https://tk1307993.coding.me/tags/Pig/"/>
    
      <category term="Spark" scheme="https://tk1307993.coding.me/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>CS104-Rational-Problem</title>
    <link href="https://tk1307993.coding.me/CS104-Rational-Problem.html"/>
    <id>https://tk1307993.coding.me/CS104-Rational-Problem.html</id>
    <published>2020-01-14T10:58:08.000Z</published>
    <updated>2020-01-14T11:00:20.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Rational-Numbers"><a href="#Rational-Numbers" class="headerlink" title="Rational Numbers"></a>Rational Numbers</h3><p>Let p and q be integers, with q being non-zero integer. A rational number n is a number which can be expressed as the following:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">n</span> = p/q</span><br></pre></td></tr></table></figure></p><p>It should be noted that any integer can be expressed as a rational number, since the integer q may be equal to 1.</p><p>As an example the double value in C++ 0.95 can be expressed as the following rational number:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span>/<span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>Arithmetic operations can be performed on rational numbers. For instance two rational numbers can be added, subtracted from, multiplied and divided. When adding and subtracting two rational numbers, the denominators first need to be reduced to a common denominator. As an example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>/<span class="number">4</span> + <span class="number">1</span>/<span class="number">6</span> = (<span class="number">15</span>+<span class="number">2</span>)/<span class="number">12</span> = <span class="number">17</span>/<span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>When multiplying two rational numbers, the numerators and the denominators are multiplied separately. Using integers a, b, c, and d as an example:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">a/b</span>) * (<span class="name">c/d</span>) = ac/bd</span><br></pre></td></tr></table></figure></p><p>When dividing two rational numbers, the second rational number is first inverted (known as its reciprocal) and then is multiplied with the first rational number like above:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(a/b)</span> ÷ <span class="comment">(c/d)</span> = <span class="comment">(a/b)</span> * <span class="comment">(d/c)</span> = ad/bc</span><br></pre></td></tr></table></figure></p><p>It should be noted that rational numbers can be expressed in “simplest form” as well, for instance given the following rational number:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>/<span class="number">15</span></span><br></pre></td></tr></table></figure></p><p>If both the numerator and the denominator are each divided by 5, we obtain the following reduced rational number:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>/<span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>For this assignment, you are to write a C++ program which will read in rational numbers using the following convention (as an example):<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">50 </span>/ <span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>If in the code two integers n1 and d1 were used, after reading in the above from cin n1 would be set to 50 and n2 would be set to 12. (As a hint you can read the forward slash (/) into any arbitrary char data type.)</p><p>Your program will prompt the user for two rational numbers. Your program will then display the following menu for the user:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>ADDITION</span><br><span class="line"><span class="bullet">2. </span>SUBTRACTION</span><br><span class="line"><span class="bullet">3. </span>MULTIPLICATION</span><br><span class="line"><span class="bullet">4. </span>DIVISION</span><br></pre></td></tr></table></figure></p><p>If the user presses (1), the two rational numbers are added together. If the user presses (2) the two rational numbers are subtracted from each other. If the user presses (3) the two rational numbers are multiplied together. If the user presses (4) the two numbers are divided. After the answer is shown to the user, the user is prompted if he/she would like to run the program again.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>To receive full credit for this assignment, the following conditions must be met:</p><ul><li>If a user enters a zero value for either denominator, your program will loop until the user enters the rational number correctly.</li><li>If the user enters an incorrect menu selection (correct values are 1, 2, 3 and 4), your program will loop until a correct value is entered.</li><li>The program will loop as many times necessary until the user decides to quit.</li><li>The output of each operation is a rational number expressed in reduced lowest terms. To express this, the greatest common divisor (GCD) must be obtained from the numerator and the denominator. The following C++ code can be used to calculate the GCD (which can be used to divide both the numerator and the denominator to reduce the number):<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">gcd</span>, p, q;</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span>=<span class="number">1</span>; <span class="built_in">i</span>&lt;=p &amp;&amp; <span class="built_in">i</span>&lt;=q; <span class="built_in">i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">if ((p%i == <span class="number">0</span>) &amp;&amp; (q%i == <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">  gcd=i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">THIS PROGRAM PERFORMS ARITHMETIC OPERATIONS ON RATIONAL NUMBERS.</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br><span class="line">Please enter the first rational number: 1 / 2</span><br><span class="line">Please enter the second rational number: 1 / 6</span><br><span class="line">OPERATIONS</span><br><span class="line">(1) ADDITION</span><br><span class="line">(2) SUBTRACTION</span><br><span class="line">(3) MULTIPLICATION</span><br><span class="line">(4) DIVISION</span><br><span class="line">Please select an operation (1, 2, 3 or 4): 4</span><br><span class="line">1 / 2 % 1 / 6 = 3 / 1</span><br><span class="line">Would you like to run this program again? N</span><br></pre></td></tr></table></figure><p>Save your solution in a file named rational.cpp.</p>]]></content>
    
    <summary type="html">
    
      基础的C++代写，实现一个加减乘除的计算器，注意输出格式即可。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC401-Index-Random-and-Dictionary</title>
    <link href="https://tk1307993.coding.me/CSC401-Index-Random-and-Dictionary.html"/>
    <id>https://tk1307993.coding.me/CSC401-Index-Random-and-Dictionary.html</id>
    <published>2020-01-10T00:30:46.000Z</published>
    <updated>2020-01-10T00:32:49.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this assignment is to assess your understanding of</p><ol><li>Dictionary</li><li>Tuple</li><li>Set</li><li>Random Module</li></ol><p>Next week, we will discuss functions and the role of functions in programming (section 7.1) and how encapsulation is implemented (namespaces, local, global variables, section 7.2) and exceptions (section 7.3) and recursion, Chapter 10. You notice what we are skipping Chapters 8 and 9, some of that material you will see later in Java.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ul><li>Include your full name as a comment on the first line of your Python program.</li><li>As we did in class, code all the problems in one Python file (.py). Each problems will consist of 1 or 2 modules (def). Identify each problem with comment like #Problem 1, Problem 2, etc.</li><li>Submit (upload) to the dropbox one file labeled as YourName_HW6.py</li></ul><h3 id="Problam"><a href="#Problam" class="headerlink" title="Problam"></a>Problam</h3><h4 id="Indexing-problem"><a href="#Indexing-problem" class="headerlink" title="Indexing problem"></a>Indexing problem</h4><p>At the end of books, there usually is an index that lists the pages where a certain word appears. In this problem, you will create an index for a text but, instead of the page number, you will use the line numbers. You are to implement the function index (fname, letter) that takes as input the name of the text file and the first letter of the words for which you are to create the line number index. For each word that begins with ‘letter’, you are to print the corresponding line numbers. You should</p><ol><li>open and read the file only once; use readline()</li><li>Remove all punctuation from the text</li><li>For each word that begins with the specified letter, find all the line numbers in which the letter appears.</li><li>Print the total number of lines in the text and the number of words that begin with the specified letter.</li></ol><p>Use a dictionary to store results {word: list of line number(s)}. For each word, a line number should be listed only once, for example, ‘the’ appears 3 time on line 250; 250 should not be listed 3 times, only once. In the output, the line numbers should be separated by commas, but they are not printed as lists (no brackets). The words in the output should be in alphabetical order, i.e. a - z.</p><h4 id="Random-problem"><a href="#Random-problem" class="headerlink" title="Random problem"></a>Random problem</h4><p>Craps is a dice-based game played in many casinos. The game starts with the player throwing a pair of standard, six-sided dice. If the player rolls a total of 7 or 11, the player wins. If the player rolls a total of 2, 3 or 12, the player loses. For all other roll values, the player will repeatedly roll the pair of dice until either she rolls the initial value again (in which case she wins) or 7 (in which case she loses. Write a function craps() that takes no arguments, simulates one game of craps, and returns ‘I win’ if the player won and ‘I lost’ if the player lost. Consider implementing a second function if the player does not win or lose on the initial roll.</p><h4 id="Dictionary-problem"><a href="#Dictionary-problem" class="headerlink" title="Dictionary problem"></a>Dictionary problem</h4><p>Implement a function STUDENT() which allows the user to enter the 7-digit student ID. The program will keep prompting the user for a last name and first name. If the student does not have a student ID on record, the program will then ask for the student ID, and store that information. If the student already has a student ID, the program will display it, and ask for confirmation whether a new studentID should be assigned (and, if so allows the new studentID to be entered). When the user hits the return key, the program prints a report listing all students with their studentID. Your report does not have to be in alphabetical order, however, if you do want to make it alphabetical, you can use sorted on the keys() of your dictionary.</p>]]></content>
    
    <summary type="html">
    
      代写三个基础的Python问题，一个是索引问题，另一个是随机问题，最后一个是字典问题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC2542-Search</title>
    <link href="https://tk1307993.coding.me/CSC2542-Search.html"/>
    <id>https://tk1307993.coding.me/CSC2542-Search.html</id>
    <published>2020-01-07T01:25:24.000Z</published>
    <updated>2020-01-07T01:28:29.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The goal of this assignment is to give you experience running and experimenting with heuristic search code. There are three main components. The first is on tiebreaking in A<em> , the second is on tiebreaking in WA</em> and GBFS, and the third is on re-expansions in WA* and GBFS.</p><p>For this assignment, you are provided with C++ code for generic best-first search and A*, as well as for code for working with the map pathfinding and the 3 × 4 sliding tile puzzle domains. You are strongly encourage to use this code, though you are free to complete the experiments in whatever language you so choose. If you choose to use your own code, you will need to use the following input files, which have been provided (see the framework documentation for information on the format of these files):</p><ul><li>“starcraft bgh.map” is a file representation of a map to run experiments on.</li><li>“starcraft bgh.probs” is a file containing a list of pathfinding problems for the map given by “starcraft bgh.map.”</li><li>“3x4 puzzle.probs” is a list of start states for experiments on the 3 × 4 sliding tile puzzle domain.</li></ul><p>All sections have both an experimental and theoretical component. For the theoretical component, feel free to use any of the theorems or lemmas we have already discussed in class.</p><p>Finally, note that different authors sometimes define a count of the number of node expansions slightly differently. For this assignment, we will count the number of node expansions as the number of times a node is taken off the open list, or equivalently, the number of calls to the goal test function that are performed.</p><h3 id="Tiebreaking-in-A"><a href="#Tiebreaking-in-A" class="headerlink" title="Tiebreaking in A*"></a>Tiebreaking in A*</h3><p>The first part of this assignment is on the importance of tiebreaking in A<em>. By default, A</em> compares nodes according to the evaluation f(n) = g(n) + h(n), called the f-value, and no other criteria. Ties are then dealt with arbitrarily (usually just by their ordering in the comparison). In the rest of this document, we refer to this as the Default tiebreaking rule. For the following experiments, we also define the following two different methods, each of which you will have to implement:</p><ul><li>If there is a tie in the f-value between two nodes, the node with the lower value of g(n) (i.e. the g-cost) is considered “best. We call this tiebreaking rule, Low-G tiebreaking.</li><li>If there is a tie in the f-cost between two nodes, the node with the higher g-cost is considered best. We call this tiebreaking rule, High-G tiebreaking.</li></ul><p>You are now required to complete the following tasks:</p><ol><li><p>Create an empty grid map of size 20 × 20. This means there are no obstacles. Set the map to be 4-connected, which means that in any location, the agent can only move in the 4 cardinal directions (i.e., north, east, south, and west) provided there is no obstacle in the way or they are prevented from moving in a given direction because they are at the boundary of the map. Consider the task of finding a path from location (1,10) and to location (11, 10). Run A* with each of the three different tiebreaking rules on this problem (Default, Low-G, and High-G). In at most two sentences, describe how the different tiebreaking rules compare in terms of nodes expanded.</p></li><li><p>Run the same experiment as in 1(a), except this time set the goal state to location (6, 15). In at most three sentences, describe how the results compare to those seen in the experiment in 1(a).</p></li><li><p>Notice that because there are no obstacles the Manhattan distance heuristic provides perfect estimates on the empty 20 × 20 grid map that you constructed. Also notice that the optimal solution cost to the tasks in questions 1(a) and 1(b) are the same. In no more than four sentences, explain why the relative performance of Low-G and High-G tiebreaking differs between these two problems, and what these experiments suggest about the best way to do tiebreaking when using A*.</p></li><li><p>Run A* with each of the three different tiebreaking rules on the 100 pathfinding problems given in file “starcraft bgh.probs” on the map given in file “starcraft bgh.map”. Make a table that shows the average number of nodes expanded when using each rule, the median number of nodes expanded, and the percentage of problems for which each tiebreaking rule is the best. In at most two sentences, describe if the results are consistent with the conclusions you made in question 1(c).</p></li><li><p>Let α and β be two instances of A<em> that are identical aside from their tiebreaking policy, and both use the same consistent heuristic. Prove that if some node n is expanded by α before a goal is found, while β does not expand n before a goal is found, then f(n) = C</em>.</p></li></ol><h3 id="Tiebreaking-in-WA-and-GBFS"><a href="#Tiebreaking-in-WA-and-GBFS" class="headerlink" title="Tiebreaking in WA* and GBFS"></a>Tiebreaking in WA* and GBFS</h3><p>The second part of this assignment is on the importance of tiebreaking in WA<em> and GBFS. If you are using the provided code, this means you must extend the given best-first search code to create instances of WA</em> and GBFS.</p><ol><li><p>Repeat the experiments in questions 1(a) and 1(b) with WA<em> (use weights 2 and 5) and GBFS. In no more than 5 sentences, explain if the same trends hold as with A</em>, and why or why not.</p></li><li><p>Consider the set of 100 3 × 4 sliding tile puzzle problems given. Run WA<em> using weights 1, 2, 5, 10, and 100, and GBFS, each using the three different tiebreaking strategies to solve these problems. Make a table that shows the average number of node expansions, the median number of node expansions, and the percentage of problems for which each tiebreaking rule runs the fastest (per weight). Make a second table that shows the average solution cost, the median solution cost, and the percentage of problems for which each tiebreaking rule finds the best solution. In at most 4 sentences, describe what these experiments suggest is the best way to do tiebreaking in WA</em> and GBFS.</p></li><li><p>Even after applying the High-G and Low-G tiebreaking rules, there may still be ties. Add to your implementation the ability to break these remaining ties randomly. Take the problem from the 15-puzzle test set with the largest optimal solution cost, and solve it 100 times each with WA* with weights 1, 2, 5, 10, and GBFS. Use the best tiebreaking strategy seen in the above experiments for each algorithm. Show the average, median, and variance in terms of number of node expansions for each algorithm and weight. What is the general trend?</p></li><li><p>Let T(x, y) be a boolean function that returns true if node x is less than or equal to y and false otherwise (i.e., T is a tiebreaking rule). Consider any problem with a finite number of states. Let α be an instance of WA* that uses T to tiebreak, and let β be an instance of GBFS that uses the same heuristic as α, Low-G tiebreaking, and T to resolve any remaining ties. Prove that on any problem with a finite state-space, there exists a constant W such that if α uses a weight w ≥ W , then α and β will expand the exact same set of nodes in the exact same order until a solution is found.</p></li></ol><h3 id="Re-expansions-in-WA-and-GBFS"><a href="#Re-expansions-in-WA-and-GBFS" class="headerlink" title="Re-expansions in WA* and GBFS"></a>Re-expansions in WA* and GBFS</h3><p>The third part of the assignment is on the impact of re-expansions in WA<em> and GBFS. For this part of the assignment, you will have to modify the code, so that it has the option to not reopen nodes when a lower-cost path is found to a state. For clarity, we refer to a WA</em> or GBFS that does reopen nodes as rWA<em> and rGBFS, respectively, and a WA</em> or GBFS that does not reopen nodes as nrWA* and nrGBFS, respectively.</p><ol><li><p>Run nrGBFS and nrWA* with weights 2, 5, and 10, on the 100 15-puzzle problems and create a table that shows the average and median number of node expansions, and the average and median solution costs. For each algorithm, use the best tiebreaking rule as seen in 2(b). In at most three sentences, describe how the results compare to those seen in question 2(b).</p></li><li><p>Using the results from the runs in 3(a) and 2(b), make a table that shows, for each weight, the percentage of problems for which rWA<em> expanded fewer nodes than nrWA</em> (as well as vice versa and ties), and the percentage of problems for which rWA<em> found solutions of lower cost than nrWA</em> (as well as vice versa and ties). Construct a similar table for rGBFS and nrGBFS.</p></li><li><p>Run rWA* with weights, 2, 5, and 10 on the 100 pathfinding problems given for map “starcraft bgh.map”. Make a table that shows the average number of nodes expanded (including reexpansions), the average number of unique state expansions (i.e., the average number of states expanded at least once), the median number of node expansions, and the median number of unique state expansions.</p></li><li><p>Run nrGBFS and nrWA* with weights 2, 5, and 10 on the 100 pathfinding problems given for map “starcraft bgh.map”. Make a table that shows the average number of nodes expanded and the median number of node expansions. How do the results compare with those seen in question 3(c)?</p></li><li><p>Prove that if the heuristic nrWA<em> using weight w &gt;= 1 is using a consistent heuristic, then any solution it finds will have a cost of no more than w·C</em>.</p></li></ol>]]></content>
    
    <summary type="html">
    
      用C++代写几个经典的搜索算法，包括BFS, A*, WA*和GBFS.
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CS120-Art-Show</title>
    <link href="https://tk1307993.coding.me/CS120-Art-Show.html"/>
    <id>https://tk1307993.coding.me/CS120-Art-Show.html</id>
    <published>2020-01-03T02:02:04.000Z</published>
    <updated>2020-01-03T02:04:57.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a Python program that creates a photo collage of modified images. The entire collage must be created entirely using only Python – no Photoshop, etc. allowed. (The only allowable use of Photoshop, etc. is to reduce the original resolution of a high resolution image to start with.) You should have a single function make all of this happen–all of the effects and compositing must occur from a single function named collage(). IT IS COMPLETELY ACCEPTABLE AND EXPECTED FOR collage() TO USE OTHER FUNCTIONS! I will setMediaPath() to your folder, execute collage(), and expect to see your collage get generated. For full credit, your completed collage must satisfy the following requirements:</p><ol><li>Start with a blank canvas that is 700 pixels wide by 515 pixels tall or 515 pixels wide by 700 pixels tall.</li><li>Any number of different images may be placed on the blank starting canvas, but you must include the same image at least five times: once in its original form, and at least four more times modified in any way you want using at least four different modifications.</li><li>Each of the four image modifications required above must alter the original image’s appearance in some noticeable way. At least one of the modification algorithms must be created or significantly modified by you, and not copied from another resource. Possible image modifications include, but are not limited to:<ul><li>Grayscale</li><li>Crop</li><li>Lighten/darken</li><li>Negative</li><li>Scale</li><li>Sepia tone/cyanotype</li><li>Blend</li><li>Rotate/mirror</li><li>Line drawing/edge detection</li><li>Shift colors</li><li>Posterize</li><li>Added lines or shapes</li></ul></li><li>Develop a chromakey-like function to “sign” your collage by using a file containing your signature on a white background. Change corresponding pixels in your collage to a contrasting color when it detects the non-white pixels of your signature.</li><li>The program should not prompt for any input, but rather have all files specified in your code. You should make use of the getMediaPath() function.</li><li>The final collage that your program creates should be appropriate for all ages to view.</li><li>All beginning images used in your collage must satisfy at least one of the following:<ul><li>The image is owned by you, or you have documented permission from the copyright holder to use it.</li><li>The image is included in the “JPG Images.zip” file provided in the CS 120 area of Blackboard.</li><li>The image is available royalty-free in the public domain.</li></ul></li></ol><p>Your code should be hierarchically decomposed and use descriptive function and variable names. Additionally, make sure to include reasonable documentation comments throughout your code as you feel appropriate. At a minimum, include comments at the start of the code that includes your name and date. Additional comments should be included in your code similar to those used by the authors in the text book. Your code should be formatted similar to the text book authors’ examples. Include a reflection paper along with your submitted files. See Blackboard for a description of its content.</p><p>Completed projects may be posted online by the instructor (with attribution to you, unless you wish to remain anonymous) so that others can view your creations. Additionally, your completed project will be entered into a CS 120 Art Show. Details about the art show will be provided separately.</p><h3 id="TO-SUBMIT-YOUR-WORK-FOR-GRADING"><a href="#TO-SUBMIT-YOUR-WORK-FOR-GRADING" class="headerlink" title="TO SUBMIT YOUR WORK FOR GRADING"></a>TO SUBMIT YOUR WORK FOR GRADING</h3><p>Even if you feel your project is incomplete, turn in something before the due date and time. Whatever you turn in will be worth a few points! To submit your project, do the following.</p><ol><li>Place ALL of your files for the project into a single folder named project2. Don’t forget the image files and reflection paper, etc. Compress (zip) this folder, creating project2.zip.</li><li>Log into Blackboard and enter the CS 120 part of the site. Go to the Projects area by using the “Projects” navigation button on the left side of the screen. Inside the Projects area, click on the “Project 2” link.</li><li>Find the “Assignment Submission” section. Click on the “Browse my Computer” button and locate your project2.zip compressed (zipped) file you created in step 1 above.</li><li>Once you have attached your file, click on the “Submit” button in section 4 “Submit”, at the bottom right of the submission page. You should then receive a confirmation of your submission on your screen.</li></ol>]]></content>
    
    <summary type="html">
    
      用Python的图形库，画出要求的图形即可，其余部分可自由发挥。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COS30018-Electric-Car-Charge-Scheduling-System</title>
    <link href="https://tk1307993.coding.me/COS30018-Electric-Car-Charge-Scheduling-System.html"/>
    <id>https://tk1307993.coding.me/COS30018-Electric-Car-Charge-Scheduling-System.html</id>
    <published>2019-12-30T02:18:57.000Z</published>
    <updated>2019-12-30T02:21:09.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal-of-the-assignment"><a href="#Goal-of-the-assignment" class="headerlink" title="Goal of the assignment"></a>Goal of the assignment</h3><p>The goal of this assignment is to implement and demonstrate a simple intelligent scheduling system for the coordinated charging of a number of plug-in electric cars in a precinct/neighbourhood.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Design and implement a simple intelligent system for coordinated scheduling of a number of plug-in electric cars in a precinct/neighbourhood, in such a way that all the cars are efficiently and fairly charged according to the different time preferences of the individual owners, the car charging constraints and the maximum electricity load constraints.</p><p>An electric car charge scheduling system should involve agents with the following roles:</p><ol><li>Master scheduling agent<ol><li>Collects requirements and preferences from other agents (i.e. from car agents)</li><li>Produces a coordinated schedule for all the cars (can use e.g. KBR, GA, ACO or other intelligent search/optimisation/reaoning techniques from the unit)</li><li>Sends the individual schedules to car agents</li></ol></li><li>Car agents (at least 6 agents)<ol start="2"><li>Send the requirements and preferences to the master scheduling agent</li><li>Receives the individual schedule</li></ol></li><li>Car scheduling agents (at least 3 – instead of a master agent) (optional)<ol start="3"><li>Exchange the requirements and preferences with other agents</li><li>Collaboratively produce a schedule for all the cars (e.g. iteratively exchange individual schedules and improve/alter them until all the individual schedules are valid)</li></ol></li></ol><p>The master scheduling agent assists the households in a neighbourhood with producing a schedule for the coordinated charging of all plug-in electric cars in such a way that all the cars are efficiently (e.g. shortest overall time, etc) and fairly (e.g. similar waiting time for individual cars, user preferences satisfied to a similar level, etc) charged according to the different time preferences of individual owners (e.g. earliest time to start charging, latest time for a car to be fully charged, etc), car charging constraints (e.g. minimum time and min/max energy for a charge in multi-step charging) and the maximum electricity load constraints (e.g. maximum total load at any time). The car agents send their requirements and preferences to the master scheduling agent and are notified about their individualschedules produced by the master scheduling agent. Optionally, each charging station can have a car scheduling agent that interact with each other to produce schedules for individual cars (that satisfy all the local and global preference/constraints). The agents can exchange their preferences and individually schedule charging their cars. Alternatively, they can iteratively exchange individual schedules and improve/alter them until all individual schedules are valid.</p><h3 id="Assumptions-and-options-can’s-and-or’s"><a href="#Assumptions-and-options-can’s-and-or’s" class="headerlink" title="Assumptions and options (can’s and or’s)"></a>Assumptions and options (can’s and or’s)</h3><ul><li>The master scheduling agent (or car scheduling agents) can use any search/optimisation technique from the unit (e.g. KBR, genetic algorithm, ant colony, etc) or combination of them</li><li>The car scheduling agents can also use negotiation or other distributed mechanism (e.g. KBR, auction, CNP etc)</li><li>Provide GUI for the user input, parameter settings and visualisation (and a config file for the defaults)-</li><li>Use and compare different approaches/techniques (e.g. KBR vs ACO vs GA) (optional)</li><li>For agent communication any interaction protocols can used such as FIPA predefined (e.g. CNP, iterated CNP), nested or newly specified; any standard content language is ok; display the massage exchanged between the agents (e.g. sniffer agent)</li><li>Try to demonstrate the system with a well designed and realistic example</li><li>Be creative but keep it simple!!!</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个电动车充电调度系统，实现一个prototype的demo即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CS413-Market-Information</title>
    <link href="https://tk1307993.coding.me/CS413-Market-Information.html"/>
    <id>https://tk1307993.coding.me/CS413-Market-Information.html</id>
    <published>2019-12-26T02:07:10.000Z</published>
    <updated>2019-12-26T02:11:57.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Goal of this project: reading/writing csv files, plotting a chart, creating some calculations (daily return, monthly return) from the data, using data structure</p><ul><li>Unzip the file markedata.zip</li><li>You will find 19 csv files with information about stocks (for the Part I)</li><li>You will find 3 csv files with information about exchange (BARX, EDGX, NYSE) (for the Part 2)</li></ul><h3 id="Part-I-Reading-a-CSV-file-containing-Market-Information"><a href="#Part-I-Reading-a-CSV-file-containing-Market-Information" class="headerlink" title="Part I: Reading a CSV file containing Market Information"></a>Part I: Reading a CSV file containing Market Information</h3><p>Load the content of these files into the following data structure:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">market_data[<span class="string">'Symbol'</span>] = &#123;<span class="string">'Open'</span>:[], <span class="string">'High'</span>:[], <span class="string">'Low'</span>:[], <span class="string">'Close'</span>:[], <span class="string">'Volume'</span>:[], <span class="string">'Adjusted'</span>:[], <span class="string">'Date'</span>:[]&#125;</span><br></pre></td></tr></table></figure><p>Since you have to handle many symbols, market_data should be a dictionary of dictionary.</p><p>Every values of this dictionary of dictionary will be a list of number or float or date.</p><h4 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h4><p>Create this dictionary</p><h4 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h4><p>Create a new key in this dictionary being a list of values representing the moving average for 10 days.<br>It means that market_data will be:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">market_data[<span class="string">'Symbol'</span>] = &#123;<span class="string">'Open'</span>:[], <span class="string">'High'</span>:[], <span class="string">'Low'</span>:[], <span class="string">'Close'</span>:[], <span class="string">'Volume'</span>:[], <span class="string">'Adjusted'</span>:[], <span class="string">'Date'</span>:[], <span class="string">'MA_10'</span>:[]&#125;</span><br></pre></td></tr></table></figure><p>Since it is a moving average, there are some parts without values; you will just use None as a value. All the different lists should have the same length.</p><h4 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h4><p>You will create another key in this dictionary containing the daily return for every day (the first day shouldn’t have any return)</p><p>You will calculate the return using the adjusted price (the adjusted price taking into account split and dividends)</p><h4 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h4><p>You will create:</p><ul><li>A function ‘maximum_return’, which will return the best return across all the symbols. The return should contain the return and the date associated</li><li>A function ‘minimum_return’, which will return the best return across all the symbols. The return should contain the return and the date associated</li><li>A function ‘best_return_for_one_month’, which will return the best return across all the symbols for a 1-month period. The return should contain the return and the month/year</li></ul><h4 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h4><p>Plot a chart for MSFT, NVDA, GOOGL representing the daily market price.<br>You will use the library the library matplot.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">matplotlib</span></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">matplotlib</span><span class="selector-class">.pyplot</span> <span class="selector-tag">as</span> <span class="selector-tag">plt</span></span><br><span class="line"><span class="selector-tag">plt</span><span class="selector-class">.plot</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="selector-tag">plt</span><span class="selector-class">.ylabel</span>(<span class="string">'some numbers'</span>)</span><br><span class="line"><span class="selector-tag">plt</span><span class="selector-class">.show</span>()</span><br></pre></td></tr></table></figure></p><h3 id="Creating-an-order-book"><a href="#Creating-an-order-book" class="headerlink" title="Creating an order book"></a>Creating an order book</h3><p>You are creating an order book builder for your trading system. The book builder will have as an input a list of files with the same format. Each exchange will have a given file. During this exercise, you will take 3 venues (3 files) as input: ARCA, EDGX, NYSE.</p><p>You will need to read the three files at the same time (to make it deterministic, you will always read ARCA first then EDGX second).</p><p>An order book is defined as the following on wiki:</p><p>A book builder is a component of a trading system sorting the orders from different exchanges by price and by side. It is a critical component: Primary source of market information for trading models.</p><p>In this assignment, you will read the files and get the orders coming from the different exchanges.</p><p>You will create a class capable to handle the market data coming one by one and build a book for each side. In this part I, you will just need to handle one symbol for 3 different exchanges. But in the following part, you will have a book for different symbols, therefore it is important to have your book handling many symbols.</p><h4 id="Task-1-1"><a href="#Task-1-1" class="headerlink" title="Task 1"></a>Task 1</h4><p>You will create the class book_builder having for functions: process_tick (tick), this function will update the book ‘bid’ ‘offer’ with the input tick top_of_book(), this function will return the top of the book for bid and offer</p><h4 id="Task-2-1"><a href="#Task-2-1" class="headerlink" title="Task 2"></a>Task 2</h4><p>You will create the functions:</p><ul><li>getBestBid returning the best bid (price, volume, venue)</li><li>getBestOffer returning the best bid (price, volume, venue)</li></ul><h4 id="Task-3-1"><a href="#Task-3-1" class="headerlink" title="Task 3"></a>Task 3</h4><p>You will create the function:</p><ul><li>getBidVolumeBetween(price1, price2) returning the total volume between price1 and price2 for bids.</li><li>getOfferVolumeBetween(price1, price2) returning the total volume between price1 and price2 for offers</li></ul>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业分为两个部分，第一部分是关于读写一份Market Information的程序，第二部分是关于Order book的程序。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS218-Shark</title>
    <link href="https://tk1307993.coding.me/CS218-Shark.html"/>
    <id>https://tk1307993.coding.me/CS218-Shark.html</id>
    <published>2019-12-23T08:17:18.000Z</published>
    <updated>2019-12-23T08:29:10.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview-of-the-Assignment"><a href="#Overview-of-the-Assignment" class="headerlink" title="Overview of the Assignment"></a>Overview of the Assignment</h3><p>Fish Game: Create a fish game along the line of a classic game Shark! Shark!(<a href="http://www.youtube.com/watch?v=HiHTZ8wZ_Hc&amp;feature=related)" target="_blank" rel="noopener">http://www.youtube.com/watch?v=HiHTZ8wZ_Hc&amp;feature=related)</a>.</p><p>In the classic game above, you start as a baby fish, growing by eating smaller fishes, and staying alive by dodging larger fishes.</p><p>In this assignment, we will create a fish game that is similar to but not exactly the same as this classic game – please always follow our requirements as specified below when they are different. You may use as much of your code from Assignment 2 as you need. Before you start, take some time to plan your design.</p><p>This assignment is different from the last two and will require you think through things in advance. Use Inheritance, polymorphism, key-based interactions, ArrayList, and your knowledge of objects to write the code.</p><h3 id="General-Requirements-amp-Learning-Objectives"><a href="#General-Requirements-amp-Learning-Objectives" class="headerlink" title="General Requirements&amp; Learning Objectives"></a>General Requirements&amp; Learning Objectives</h3><h4 id="Learning-objectives"><a href="#Learning-objectives" class="headerlink" title="Learning objectives"></a>Learning objectives</h4><ul><li>Create application using inheritance and polymorphism;</li><li>Create key-based interactions;</li><li>Use ArrayList to store and remove objects;</li><li>Create dynamic text messages;</li><li>Create simple Graphical User Interface (GUI) using GUI library</li></ul><h4 id="Programming-Requirements"><a href="#Programming-Requirements" class="headerlink" title="Programming Requirements"></a>Programming Requirements</h4><p>First of all, this assignment must be done using Java System Library (e.g. using Graphics2D for drawing). You will get 0 if you use Processing library (e.g. using PApplet for drawing) or any other 3rd party libraries.</p><p>This assignment has two iterative steps: Milestone: initial UML design and code for drawing the fishes and Pond, and Final Deliverable: updated UML design and code for fishing For the UML design document, you are graded on completeness and correctness, and for the code on completeness and visual style.</p><p>For the UML design document, you are graded on completeness and correctness, and for the code on completeness and visual style.</p><h3 id="MilestoneCode-Design-Inheritance-and-Drawing-Fishes-and-Sea"><a href="#MilestoneCode-Design-Inheritance-and-Drawing-Fishes-and-Sea" class="headerlink" title="MilestoneCode: Design Inheritance and Drawing Fishes and Sea"></a>MilestoneCode: Design Inheritance and Drawing Fishes and Sea</h3><h4 id="UML-Design"><a href="#UML-Design" class="headerlink" title="UML Design"></a>UML Design</h4><p>Draw the initial UML that should include at least three classes to represent a general fish and two types of enemy fish: shark and herbivore fish (i.e. weed eating only). The enemy fishes must extend (i.e. be the subclasses of) the general fish, and meet the following requirements:</p><p>First of all, you need to design your classes by following strict Encapsulation for fields (except for constants), and provide public methods only when it’s absolutely necessary. When working with inheritance, you are allowed to relax access control of superclass’ fields from private to protected so as to facilitate subclasses to access some of these fields directly. As with public methods, you should relax access as such only when it is absolutely necessary.</p><h3 id="About-the-general-fish"><a href="#About-the-general-fish" class="headerlink" title="About the general fish"></a>About the general fish</h3><p>a) The general fish class should hold properties common to both player fish and enemy fish, such as position (along x &amp; y), velocity (along x and y), angle for rotation, etc.</p><p>b) The general fish should also have some methods that could be either used directly or overridden by its subclasses, such as drawFish(Graphics2D g2), detectCollision(), detectOffScreen(), etc.</p><p>c) Please note the whole purpose to have the general fish class is to use it as the superclass for player fish and enemy fish, you shouldn’t instantiate any object of it.</p><h3 id="About-the-enemy-fishes"><a href="#About-the-enemy-fishes" class="headerlink" title="About the enemy fishes"></a>About the enemy fishes</h3><p>d) For the herbivore fish, you can basically use the fish that you have created in Assignment 2 with modifications. For instance, you need to redesign the code structure to accommodate inheritance, so that it will make use of the fields and methods of the general fish while declaring its own fields such as field for body color.</p><p>e) It must override at least drawFish(Graphics2D g2) method of the general fish, to allow it to draw enemy fish using the color held in the field of body color f) For the shark, you need to redesign a new fish that is visually in the form of shark, which must has tail that is visually obvious. Beyond inheriting the common properties of the general fish, the fish must have the capability to eat other types of fish, including the herbivore fish and player fish (included in the final deliverable)</p><p>g) A shark can eat other fishes only when it is facing them and close to their mouth (i.e. in head-on position), so you need to have a method to check on this.</p><p>h) Design FishPanel class and aggregate an ArrayList of general fish. Then add as field a Timer object.</p><p>i) Create FishApp class as a subclass of JFrame, and associate it with the FishPanel class.</p><p>j) The UML diagram must follow the UML notations for class and encapsulation. Also the names of the class, fields and methods must follow the naming convention with appropriate upper- or lower case for the initial and CamelCase thereafter.</p><p>(Please note the structure of your code must match your UML design. Otherwise you will lose credit for the UML design)</p><h3 id="Coding-per-the-design"><a href="#Coding-per-the-design" class="headerlink" title="Coding per the design:"></a>Coding per the design:</h3><p>a) you should use the whole display window to represent the sea, leaving no margins for any of the sides.</p><p>b) You must use an ArrayList of general fish to hold the enemy fishes, among which two of them should be sharks and the rest herbivore fish.</p><p>c) The sharks initially should be in uniform color and size (it should be equal to or slightly larger than the upper bound of herbivore fishes’ sizes), while the herbivore fishes must be in randomized colors and sizes.</p><p>d) An herbivore fish is eaten by a shark when they go head-on (i.e. face to face with mouths being close) and grow itself proportionally to the size of the fish eaten. Otherwise they bounce off from each other.</p><p>e) Herbivore fishes must bounce off each other when they collide and NO eating happen among themselves.</p><p>f) The enemy fishes must move left and right in the sea, with wavy (up and down) movement based on the sin or cos function.</p><p>g) When an enemy fish fully goes off the screen or when it is killed, it must be destroyed (i.e. removed from the ArrayList).</p><p>h) Enemy fishes should be respawned at a steady interval for up to a maximum of 10 including no more than 8 herbivore fishes and no more than 2 sharks on the screen (you should spawn one fish for each interval, and use a random function call to give 80% of chance to herbivore fishes and 20% chance to shark). Respawned fishes should move in randomly from either left or right side of the window.</p><h3 id="Final-deliverable-Fish-Game"><a href="#Final-deliverable-Fish-Game" class="headerlink" title="Final deliverable: Fish Game"></a>Final deliverable: Fish Game</h3><h4 id="Update-the-UML-design-to-include"><a href="#Update-the-UML-design-to-include" class="headerlink" title="Update the UML design to include"></a>Update the UML design to include</h4><p>a) Class for player fish (avatar), which is a subclass of general fish as well, and must include at least two unique visual features (e.g. dots, stripes etc.) as represented by geom objects so that it will be easy to distinguish it from those herbivore fishes.</p><p>b) The player fish must override at least the drawFish(Graphics2D g2) method of general fish to draw it differently.</p><p>c) An inner class (you can download the membership notation from Canvas|Resource and used it in the UML to indicate the nested relationship), which extends KeyAdaptor class for key interaction per the features for gameplay below.</p><p>d) GUI features as outlined below.</p><p>(Please note the structure of your code must match your UML design. Otherwise you will lose credit for the UML design)</p><h4 id="Coding-per-the-design-1"><a href="#Coding-per-the-design-1" class="headerlink" title="Coding per the design"></a>Coding per the design</h4><p>About the player fish.</p><p>a) The movement of the player fish must be controlled by key inputs.</p><p>b) The player fish would grow by eating an herbivore fish smaller than itself, and the growth must be proportional to the size of the fish eaten.</p><p>c) If it however tries to eat an herbivore fish that is greater than itself, it will be killed, and before it runs out of its lives it respawns at a location within the screen, which meets the digit-based requirements as specified.</p><p>d) Eating can happen ONLY when the player fish and an enemy fish go in head-on position as outline in the milestone part.</p><p>e) Whenever eating happens (no matter player fish eats enemy fish or vice verse), certain bubbles or traces should be displayed as per the digit-based requirements as specified.</p><p>f) Player fish can kill a shark by touching its tail 4 times before it moves out of the screen. If however it touches on the shark any part other than the tail, it will be killed instantly.</p><p>g) When a shark is touched by its tail it must flash with a different color to demonstrate the effect, and when it is killed, it must change its shape in certain way to show that it is dead while sinking to the bottom of the sea (refer to Shark! Shark! for example but you can have your own appropriate form)</p><h3 id="About-Style"><a href="#About-Style" class="headerlink" title="About Style"></a>About Style</h3><p>As always, visual Design Matters! Grades will partially depend on how the game looks, including sea design with appropriate, animated decoration objects, animated fish features for enemy fishes and player fish, the HUD (e.g. using fish images rather number to show number of lives, and nicely designed score board). Beyond this, there are some specific requirements as follows based on your student number.</p>]]></content>
    
    <summary type="html">
    
      代写一个类似大鱼吃小鱼的游戏，小鱼不停的吃比他体积小的鱼，最终成长成大鱼后，和鲨鱼一战。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
</feed>
