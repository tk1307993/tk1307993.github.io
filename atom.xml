<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2023-02-16T01:11:19.145Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS6300-Textprocessor</title>
    <link href="https://tk1307993.coding.me/CS6300-Textprocessor.html"/>
    <id>https://tk1307993.coding.me/CS6300-Textprocessor.html</id>
    <published>2023-02-16T01:06:52.000Z</published>
    <updated>2023-02-16T01:11:19.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Goals"><a href="#Project-Goals" class="headerlink" title="Project Goals"></a>Project Goals</h3><p>In this project, you will be developing a simple Java application (textprocessor) using an agile, test-driven process involving multiple deliverables. While you will receive one grade for the entire project, each deliverable must be completed by its own due date, and all deliverables will contribute to the overall project grade.</p><h3 id="Specification-of-the-textprocessor-Utility"><a href="#Specification-of-the-textprocessor-Utility" class="headerlink" title="Specification of the textprocessor Utility"></a>Specification of the textprocessor Utility</h3><p>textprocessor is a command-line utility written in Java with the following specification.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>textprocessor allows for simple text manipulation of the contents of a file.</p><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>textprocessor [OPTIONS] FILE</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Program textprocessor performs basic text transformations on lines of text from an input FILE. Unless the -o option (see below) is specified, the program writes transformed text to stdout and errors/usage messages to stderr. The FILE parameter is required and must be the last parameter. OPTIONS may be zero or more of the following and may occur in an order:</p><p>-o output_file_name<br>The program writes the output to output_file_name with transformed text instead of writing to stdout. If output_file_name already exists, the program shall result in an error.<br>-i<br>Used with the -r flag and -k flag ONLY; the search of -r or -k becomes case-insensitive.<br>-k substring<br>Keep only the lines containing substring. The search for substring is case-sensitive, unless option -i is set. This option must be mutually exclusive with -r below.<br>-r old new<br>Replaces the first instance of string old in each line with string new. The search for old is case-sensitive, unless option -i is set. This option must be mutually exclusive with -k above.<br>-s suffix<br>Adds the string suffix at the end of each line.<br>-n padding<br>Add a line number followed by a single space to the beginning of each line, where padding is an integer in the inclusive range of 1 to 9 specifying the minimum padding of the line number field. If the number of digits in the line number is less than the specified padding, zeros are left padded until the minimum padding is reached. If the number of digits in the line number is greater than the specified padding, the line number is never truncated. Line numbering should start at 1. This option must be mutually exclusive with -w below.<br>-w<br>Removes all whitespace from lines. For this assignment, whitespace will count as any spaces, “ “, or tabs, “\t”, in the input file. It must be mutually exclusive with -n above.</p><h3 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES"></a>NOTES</h3><p>While the last command-line parameter provided is always treated as the filename, OPTIONS flags can be provided in an order and shall be applied as follows:<br>Options -o/-i shall be processed first, as the determine global parameters of the computation.<br>Options -k, -r, -n, -w , and -s, shall be processed in this order. That is: (1) if -k is present, then the file content is filtered based on the specified parameter, using a case insensitive search if -i is present; (2) if -r is present, then replacements are performed based on the option parameters, using a case insensitive search if -i is present; (3) if -n is present, then a line number is applied; (4) if -w is present, then whitespace from the line is removed; (5) if -s is present, then a suffix shall be applied.<br>To keep this application simple, all errors shall result in display of the standard usage message.<br>Specifying option -i without having specified option -r or -k shall result in an error.<br>Specifying option -k with an empty string as the substring parameter should keep all input lines.<br>Specifying option -r with an empty string as the old parameter or option -s with an empty string as the suffix parameter shall result in an error.<br>Specifying options -r and -k simultaneously shall result in an error.<br>Specifying option -n with a non-integer value or an integer out of range shall result in an error.<br>Specifying options -n and -w simultaneously shall result in an error.<br>If options are repeated, only their last occurrence is applied.<br>All program option parameters are required, resulting in an error if omitted.<br>You shall assume that the command line parameter strings will not contain newline characters (\r, \n, and so on), as the behavior of the program would be platform dependent and may result in errors during grading. Therefore, there should be no test cases using these values as option parameters.<br>An empty input file shall produce an empty output file.<br>The last line of a non-empty input file must be newline terminated. Otherwise, the program shall generate an error.</p><h3 id="EXAMPLES-OF-USAGE"><a href="#EXAMPLES-OF-USAGE" class="headerlink" title="EXAMPLES OF USAGE"></a>EXAMPLES OF USAGE</h3><p>Example 1<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -o <span class="keyword">sample</span>.txt <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">the</span> input <span class="built_in">file</span>.</span><br></pre></td></tr></table></figure></p><p>output sample.txt:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">the</span> input <span class="built_in">file</span>.</span><br></pre></td></tr></table></figure></p><p>stdout: nothing sent to stdout<br>stderr: nothing sent to stderr</p><p>Example 2<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -r 02 <span class="keyword">two</span> <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Some</span> words are: <span class="string">"one"</span>, <span class="string">"02"</span>, <span class="keyword">and</span> <span class="string">"three"</span></span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Some</span> words are: <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="keyword">and</span> <span class="string">"three"</span></span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 3<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -i -r the A <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The <span class="built_in">file</span></span><br><span class="line"><span class="keyword">the</span> <span class="built_in">file</span></span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A <span class="built_in">file</span></span><br><span class="line">A <span class="built_in">file</span></span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 4<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -s er <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> cool</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> cooler</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 5<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -k Java <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java <span class="keyword">is</span> one of the &lt;blank&gt; programming languages.</span><br><span class="line">Java <span class="keyword">is</span> a programming language.</span><br><span class="line">Programming languages are neat, an example of one <span class="keyword">is</span> Java.</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java <span class="keyword">is</span> a programming language.</span><br><span class="line">Programming languages are neat, an example of one <span class="keyword">is</span> Java.</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 6<br>textprocessor -r Question Exclamation -o text -s ! -w FILE<br>input FILE:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This Sentence Ends In <span class="keyword">A</span> Question Mark?</span><br></pre></td></tr></table></figure></p><p>output text:<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThisSentenceEndsInAExclamationMark?!</span><br></pre></td></tr></table></figure></p><p>stdout: nothing sent to stdout<br>stderr: nothing sent to stderr</p><p>Example 7<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">textprocessor</span> <span class="string">-n</span> <span class="number">8</span> <span class="string">-n</span> <span class="number">2</span> <span class="string">-s</span> <span class="comment">## -s ! FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:</p><p>I wish this line had a line number..<br>I also wish that..<br>output file: output file not created<br>stdout:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">01 </span>I wish this <span class="keyword">line</span> had a <span class="keyword">line</span> number..!</span><br><span class="line"><span class="symbol">02 </span>I also wish that..!</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 8<br>textprocessor<br>input FILE:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Today is January <span class="number">65</span>, <span class="number">2298.</span></span><br><span class="line">Yesterday was December <span class="number">0</span>, <span class="number">3000.</span></span><br><span class="line">Tomorrow we will time travel again.</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout: nothing sent to stdout<br>stderr:<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: textprocessor [ -o filename | <span class="type">-i</span> | <span class="type">-k</span> substring | <span class="type">-r</span> old new | <span class="type">-n</span> padding | <span class="type">-w</span> | <span class="type">-s</span> suffix ] FILE</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      实现一个Textprocessor并通过测试，注意命令参数的逻辑顺序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CP5638-Small-Website</title>
    <link href="https://tk1307993.coding.me/CP5638-Small-Website.html"/>
    <id>https://tk1307993.coding.me/CP5638-Small-Website.html</id>
    <published>2023-02-13T01:59:07.000Z</published>
    <updated>2023-02-13T02:00:48.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>This assignment involves two parts, to be implemented as Web pages and submitted as described below.</p><p>Project Plan<br>Small Website<br>Your (fictional) client for the assignment has provided an introductory email containing a description of their goals and some text content for the site they would like you to develop.<br>Your task is to turn this into a clear useful plan and a small functional website.</p><h3 id="Project-Plan"><a href="#Project-Plan" class="headerlink" title="Project Plan"></a>Project Plan</h3><p>Write your project plan so that it is a useful working document to guide your development. Carefully consider the description provided by the client to inform your planning. Complete the plan by editing the plan.html template file provided inside the “Assessment 1 folder”, which contains the following required sections:</p><h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><p>Concisely state what the goal (purpose) of the website is. Note that the mission must be to improve something in a measurable way. To “provide information about something” is not a good mission, since you cannot see a measurable improvement. Why is the site needed? How does it benefit the client? Be clear and specific. Good mission statements are usually only a few sentences and contain no unnecessary information.</p><h3 id="Success-Evaluation"><a href="#Success-Evaluation" class="headerlink" title="Success Evaluation"></a>Success Evaluation</h3><p>Describe the process(es) by which the site success will be evaluated. Note that “hits” only counts people (or robots) visiting your website, which says nothing about whether the site has achieved its mission. How do you know that the site does what the client wanted? Measure the mission you stated above.</p><h3 id="Target-Audience"><a href="#Target-Audience" class="headerlink" title="Target Audience"></a>Target Audience</h3><p>Describe two (2) things clearly and specifically:</p><p>the target audience that your site is intended for (be specific; you can’t aim for everyone)<br>how you will intentionally design the site to cater to this group (as distinct from another, different target audience).</p><h3 id="Site-Flowchart"><a href="#Site-Flowchart" class="headerlink" title="Site Flowchart"></a>Site Flowchart</h3><p>Create a site flowchart to show the hierarchy of pages in the site and their relationships.<br>Each page should be represented by one box.<br>The order of boxes is the order these links should appear on the site.<br>If you do not have a preferred drawing program for flowcharts, use <a href="https://app.diagrams.net/" target="_blank" rel="noopener">https://app.diagrams.net/</a>.<br>Save your flowchart as a PNG file (normally the best file format for plain, straight-lined diagrams like this) and insert the image in your plan file under this heading.</p><p>plan.html is the template file provided for your documentation, which you must use.</p><p>DO NOT change the file name or the formatting.<br>DO NOT edit it in Word just save it and edit it as an HTML file (in Visual Studio Code, PHPStorm, Notepad++, etc.).<br>Each section has a heading and a spot () for its content. Add your name in the [title] before submitting.<br>Your website SHOULD NOT link to the plan.<br>There is no set word limit for your plan, but be clear, concise, and complete. DO NOT be long.</p><h3 id="Small-Website"><a href="#Small-Website" class="headerlink" title="Small Website"></a>Small Website</h3><p>Design and develop a small website for the client. Use your project planning (goal, target audience, flowchart) to inform and guide your design.</p><p>Use all the text content provided by the client (but NOT the description about goals that they have provided for you, the developer).<br>Edit the text content, which comes “as is” from the client, to make it suitable for the website. You are welcome and encouraged to write some amount of additional text to benefit the site, as appropriate. But don’t just make stuff up that might not be true.<br>Think about the information architecture (organisation) and decide what content should go on what pages to best achieve the site goals.<br>You must develop the site from scratch yourself. You may NOT use existing templates or frameworks (including Bootstrap or similar).<br>Although it is up to you exactly what goes in the site and how/where, you should have at least the following elements:</p><p>HTML Pages - name your home page file index.html<br>Navigation - links between pages and to the external sites provided (no broken links).<br>CSS - you should use an external style sheet for most/all styling.<br>Images - make appropriate use of the images for your site (consider editing, resizing, cropping, compression, etc.).</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit a zip file of your work (not including temporary files/documents) to LearnJCU. Ensure you include every file required for your website as well as plan.html.</p>]]></content>
    
    <summary type="html">
    
      制定项目计划，完成一个小型的个人网站。
    
    </summary>
    
      <category term="HTML" scheme="https://tk1307993.coding.me/categories/HTML/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP3320-Category-Partition</title>
    <link href="https://tk1307993.coding.me/COMP3320-Category-Partition.html"/>
    <id>https://tk1307993.coding.me/COMP3320-Category-Partition.html</id>
    <published>2023-02-01T00:39:33.000Z</published>
    <updated>2023-02-01T00:41:20.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this individual assignment, you must generate between 60 and 100 test-case specifications (i.e., generated test frames) for a simplified version of the copy utility, whose specs are provided below, using the category-partition method that we saw in class.</p><p>Make sure, when defining your test specifications, to suitably cover the domain of the application under test. Finally, make sure to suitably use constraints (rather than eliminating choices) to keep the number of test frames within the specified thresholds.</p><h3 id="Concise-Specification-of-the-copy-Utility"><a href="#Concise-Specification-of-the-copy-Utility" class="headerlink" title="Concise Specification of the copy Utility"></a>Concise Specification of the copy Utility</h3><p>NAME:<br>cp - copy files and directories<br>SYNOPSIS<br>Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.<br>cp [OPTION]… SOURCE… DIRECTORY<br>where OPT can be zero or more of<br>-b<br>-f<br>-r<br>-v<br>COMMAND-LINE ARGUMENTS AND OPTIONS<br>source: directory or file to be copied.<br>directory: location to copy to.<br>-b: (backup) - make a backup of each existing destination file<br>-f: (force) - if an existing destination file cannot be opened, remove it and try again<br>-r: (recursive) - copy directories recursively<br>-v: (verbose) explain what is being done</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>As stated above, in defining your categories and choices, you should make sure to suitably cover the domain of the application under test. This also includes possibly erroneous inputs. Just to give you an example, if you had to test a calculator, you may want to cover the case of a division by zero.<br>You are only required to specify test inputs for the application, but you do not have to also specify the expected outcome for such inputs. It is therefore OK if you don’t know how the system would behave for a specific input. Using the same calculator example, you could test the case of a division by zero even if you do not know how exactly the calculator would behave for that input.</p><h3 id="Tools-and-Useful-Files"><a href="#Tools-and-Useful-Files" class="headerlink" title="Tools and Useful Files"></a>Tools and Useful Files</h3><p>You will use the TSLgenerator tool to generate test frames starting from a TSL file, just like we did in the demo. A version of the TSLgenerator tool for Linux, Mac OS X, and Windows (two versions), together with a user manual, are available at:</p><p>TSLgenerator-manual.txt<br>TSLgenerator.linux<br>TSLgenerator-mac<br>TSLgenerator-win32.exe<br>TSLgenerator-win64.exe<br>Important: These are command-line tools, which means that you have to run them from the command line, as I did in my demo, rather than by clicking on them. Also, on Linux and<br>Mac systems, you may need to change the permissions of the files to make them executable using the chmod utility. To run the tool on a Mac, for instance, you should do the following, from a terminal:</p><p>chmod +x TSLgenerator-mac<br>./TSLgenerator-mac <command line arguments><br>Finally, if you are running a modern version of Windows (&gt; XP), you may want to try the TSLgenerator-win64.exe version of the tool. It hasn’t been tested thoroughly, but it should work better on these versions than the TSLgenerator-win32.exe version. If you encounter issues, please post a public question on Piazza and consider running the tool on a different platform (if you have the option to do so).</p><p>We are also providing file split-example.txt, the TSL file for the example we saw in the lesson, for your reference.</p><p>Also, the demo example for your benefit.</p><h3 id="How-To-Submit"><a href="#How-To-Submit" class="headerlink" title="How To Submit"></a>How To Submit</h3><p>Create a directory “Assignment6” in your personal GitHub repo.<br>Add to this new directory two text files:<br>catpart.txt: the TSL file you created.<br>catpart.txt.tsl: the test specifications generated by the TSLgenerator tool when run on your TSL file.<br>Commit and push your files to GitHub.<br>Submit on Blackboard the commit ID for your submission.</p>]]></content>
    
    <summary type="html">
    
      使用TSLgenerator工具生成60-100个测试用例，练习三方工具的使用
    
    </summary>
    
      <category term="Other" scheme="https://tk1307993.coding.me/categories/Other/"/>
    
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CMPSC311-LFU-Cache</title>
    <link href="https://tk1307993.coding.me/CMPSC311-LFU-Cache.html"/>
    <id>https://tk1307993.coding.me/CMPSC311-LFU-Cache.html</id>
    <published>2023-01-24T00:50:32.000Z</published>
    <updated>2023-01-24T00:52:21.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>Select any tool that proviRequirement<br>You just completed implementing mdadm and it is working. The software engineers who plan to build secure crypto wallet on top of your storage system have been torturing your storage system by throwing at it all sorts of I/O patterns, and they have been unable to find any inconsistency in your implementation. This is great, because now you have a working system, even though it may not be performant. As professor John Ousterhout of Stanford says, “the best performance improvement is the transition from nonworking state to working state”. The software engineers are happy that your storage system is working correctly, but now they want you to make it fast as well. To this end, you are going to implement a block cache in mdadm.</p><p>Caching is one of the oldest tricks in the book for reducing request latency by saving often used data in a faster (and smaller) storage medium than your main storage medium. Since we covered caching extensively in the class, we are skipping its details in this document. You must watch the lecture to understand what caching is, and how the least-frequency used (LFU) algorithm that you are going to implement in this assignment works. Specifically, you will be implementing a look-aside cache with writethrough write policy.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>In general, caches store key and value pairs in a fast storage medium. For example, in a CPU cache, the key is the memory address, and the value is the data that lives at that address. When the CPU wants to access data at some memory address, it first checks to see if that address appears as a key in the cache; if it does, the CPU reads the corresponding data from the cache directly, without going to memory because reading data from memory is slow.</p><p>In a browser cache, the key is the URL of an image, and the value is the image file. When you visit a web site, the browser fetches the HTML file from the web server, parses the HTML file and finds the URLs for the images appearing on the web page. Before making another trip to retrieve the images from the web server, it first checks its cache to see if the URL appears as a key in the cache, and if it does, the browser reads the image from local disk, which is much faster than reading it over the network from a web server.</p><p>In this assignment you will implement a block cache for mdadm. In the case of mdadm, the key will be the tuple consisting of disk number and block number that identifies a specific block in JBOD, and the value will be the contents of the block. When the users of mdadm system issue mdadm_read call, your implementation of mdadm_read will first look if the block corresponding to the address specified by the user is in the cache, and if it is, then the block will be copied from the cache without issuing a slow JBOD_READ_BLOCK call to JBOD. If the block is not in the cache, then you will read it from JBOD and insert it to the cache, so that if a user asks for the block again, you can serve it faster from the cache.</p><h3 id="Cache-Implementation"><a href="#Cache-Implementation" class="headerlink" title="Cache Implementation"></a>Cache Implementation</h3><p>Typically, a cache is an integral part of a storage system and it is not accessible to the users of the storage system. However, to make the testing easy, in this assignment we are going to implement cache as a separate module, and then integrate it to mdadm_read and mdadm_write calls.<br>Please take a look at cache.h file. Each entry in your cache is the following struct.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">bool</span> valid;</span><br><span class="line">  <span class="keyword">int</span> disk_num;</span><br><span class="line">  <span class="keyword">int</span> block_num;</span><br><span class="line">  <span class="keyword">uint8_t</span> block[JBOD_BLOCK_SIZE];</span><br><span class="line">  <span class="keyword">int</span> num_accesses;</span><br><span class="line">&#125; <span class="keyword">cache_entry_t</span>;</span><br></pre></td></tr></table></figure><p>The valid field indicates whether the cache entry is valid. The disk_num and block_num fields identify the block that this cache entry is holding and the block field holds the data for the corresponding block. The num_accesses field stores total number of time this cache block was accessedeither written or read.<br>The file cache.c contains the following predefined variables.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">cache_entry_t</span> *cache = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cache_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num_queries = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num_hits = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>Now let’s go over the functions declared in cache.h that you will implement and describe how the above variables relate to these functions. You must look at cache.h for more information about each function.</p><p>int cache_create(int num_entries); Dynamically allocate space for num_entries cache entries and should store the address in the cache global variable. It should also set cache_size to num_entries, since that describes the size of the cache and will also be used by other functions. Calling this function twice without an intervening cache_destroy call (see below) should fail. The num_entries argument can be 2 at minimum and 4096 at maximum.<br>int cache_destroy(void); Free the dynamically allocated space for cache, and should set cache to NULL, and cache_size to zero. Calling this function twice without an intervening cache_create() call should fail.<br>int cache_lookup(int disk_num, int block_num, uint8_t <em>buf); Lookup the block identified by disk_num and block_num in the cache. If found, copy the block into buf, which can- not be NULL. This function must increment num_queries global variable every time it performs a lookup. If the lookup is successful, this function should also increment num_hits global variable; it should also increment num_accesses field of the corresponding entry, to indicate that the entry was used for one more time. We are going to use num_queries and num_hits variables to compute your cache’s hit ratio.<br>int cache_insert(int disk_num, int block_num, uint8_t </em>buf); Insert the block identified by disk_num and block_num into the cache and copy bufwhich cannot be NULL to the corresponding cache entry. Insertion should never fail: if the cache is full, then an entry should be overwritten according to the LFU policy using data from this insert operation. This function should also assign num_accesses of this cache entry to 1.<br>void cache_update(int disk_num, int block_num, const uint8_t *buf); If the entry exists in cache, updates its block content with the new data in buf. Should also update the num_accesses by 1 if successful.<br>bool cache_enabled(void); Returns true if cache is enabled. This will be useful when integrat- ing the cache to your mdadm_read and mdadm_write functions.</p><h3 id="Strategy-for-Implementation"><a href="#Strategy-for-Implementation" class="headerlink" title="Strategy for Implementation"></a>Strategy for Implementation</h3><p>The tester now includes new tests for your cache implementation. You should first aim to implement functions in cache.c and pass all the tester unit tests. Once you pass the tests, you should incorporate your cache into your mdadm_read and mdadm_write functions you need to implement caching in mdadm_write as well, because we are going to use write-through caching policy, as described in the class. Once you do that, make sure that you still pass all the tests.</p><p>Next, try your implementation on the trace files and see if it improves the performance. To evaluate the performance, we have introduced a new cost is a metric into JBOD for measuring the effectiveness of your cache, which is calculated based on the number of operations executed. Each JBOD operation has a different cost, and by effective caching, you reduce the number of read operations, thereby reducing your cost. Now, the tester also takes a cache size when used with a workload file, and prints the cost and hit rate at the end. The cost is computed internally by JBOD, whereas the hit rate is printed by cache_print_hit_rate function in cache.c. The value it prints is based on num_queries and num_hits variables that you should increment.</p><p>Here’s how the results look like with the reference implementation. First, we run the tester on random input file:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost:</span> <span class="number">40408900</span></span><br><span class="line"><span class="attr">num_hits:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="string">-nan%</span></span><br></pre></td></tr></table></figure></p><p>The cost is 40408900, and the hit rate is undefined because we have not enabled cache. Next, we rerun the tester and specify a cache size of 1024 entries, using -s option:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">-s</span> <span class="number">1024</span></span><br><span class="line"><span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost: 37060800 num_hits:</span> <span class="number">11679</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">49081</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="number">23.8</span><span class="string">%</span></span><br></pre></td></tr></table></figure></p><p>As you can see, the cache is working, given that we have non-zero hit rate, and as a result, the cost is now reduced. Let’s try it one more time with the maximum cache size:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">-s</span> <span class="number">4096</span></span><br><span class="line"><span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost: 27625200 num_hits:</span> <span class="number">44985</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">49081</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="number">91.7</span><span class="string">%</span></span><br><span class="line"><span class="string">$</span> <span class="string">diff</span> <span class="string">-u</span> <span class="string">x</span> <span class="string">traces/random-expected-output</span></span><br><span class="line"><span class="string">$</span></span><br></pre></td></tr></table></figure></p><p>Once again, we significantly reduced the cost using a larger cache. We also make sure that introducing caching does not violate correctness by comparing the outputs. If introducing a cache violates correctness of your mdadm implementation, you will get a zero grade for the corresponding trace file.</p>]]></content>
    
    <summary type="html">
    
      完善之前的Mdadm文件系统，增加LFU算法的Cache.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP3032-Heap-Allocator</title>
    <link href="https://tk1307993.coding.me/COMP3032-Heap-Allocator.html"/>
    <id>https://tk1307993.coding.me/COMP3032-Heap-Allocator.html</id>
    <published>2023-01-16T04:18:30.000Z</published>
    <updated>2023-01-16T04:20:12.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you will write a heap allocator - implement a version of malloc and free. This assignment is standalone and does not require you to work with any of the SOS code. However, you must work in the XUbuntu virtual machine for some of the provided code to run.</p><p>Download the mymalloc.c file to get started. It has some helper functions and placeholders for the two functions you will implement in this assignment. You can (and should) write other helper functions as necessary.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The my_malloc function will be used to request memory from the heap. It is a user level function (not part of the kernel). The function returns a logical (virtual) address. The my_free function is used to return a block of memory to the allocator. The function takes as argument an address (one returned by my_malloc). To understand how each function is required to behave, keep reading.</p><p>Note that this program runs in your virtual machine’s Linux environment, which is a 64-bit operating system. As such, addresses in this assignment are 64-bit. In the images below, only the lower 32 bits of an address are shown.</p><h3 id="Buddy-allocator"><a href="#Buddy-allocator" class="headerlink" title="Buddy allocator"></a>Buddy allocator</h3><p>The memory allocator you will implement is based on the Buddy algorithm. In this algorithm, the allocator keeps track of memory blocks of size 2^0, 2^1, 2^2, , 2^MAX_ORDER bytes inside the heap (the part of memory area in the logical address space of a process right after the program code and data). It does this using MAX_ORDER+1 different linked lists. A memory block of size 2n bytes is called an order n block, and the corresponding linked list is called the order n free list. The free_list_start pointers array holds the address of the first memory block of various sizes.</p><p>For example, consider the free_list_start[3] pointer. This pointer will point to an address where a memory block of 23 bytes (8 bytes) is available. The first four bytes of that memory block will have information on whether another order 3 block is present. If yes, then the start address of that block will be stored here; otherwise NULL (the C macro) will be stored. This process will repeat as long as there are order 3 blocks present, thereby resulting in a linked list. The blocks must always be arranged in ascending order of their start addresses. See picture below for an illustration.</p><p>When a program begins, all free_list_start pointers are set to NULL, since the heap begins at size zero. During memory allocation, my_malloc can use the grow_heap function to request the operating system to allocate some space (4096 bytes for each call) in the heap. More details on when this should be done is given later.</p><p>Another rule that the Buddy allocator enforces: the start address of an order k block of memory will always have to be a multiple of 2k. For example, in the picture, the order 3 memory blocks starting at 0x82541008 and the one at 0x82541010 together form a contiguous memory area of 16 bytes; however, they together do not form an order 4 memory block since 0x82541008 is not a multiple of 24.</p><h3 id="Implementing-my-malloc"><a href="#Implementing-my-malloc" class="headerlink" title="Implementing my_malloc"></a>Implementing my_malloc</h3><p>The first step in my_malloc is to increase the amount of needed memory by 4 bytes (reason coming up). Therefore, the amount of memory bytes allocated to serve a request is always at least (size+4). The Buddy allocator always allocates memory in size of powers of 2. Therefore, we need to determine the smallest n such that an order n block can serve the request. This can be calculated as<br>The allocation algorithm for the Buddy allocator then proceeds as follows.</p><p>If free_list_start[n] is not NULL, delete the first order n memory block from the list.<br>Store n in the first 4 bytes of that block, and return (4 + start address of the block).<br>Otherwise, move to the free list of the next higher order and check if it is NULL. Keep doing this until you find one that is not NULL. In case you reach the maximum order (MAX_ORDER) and the free list there is still empty, then you can call grow_heap to receive a 4KB (212 bytes, order 12) memory block. Add this block to the order 12 free list and continue.<br>Lets say free_list_start[p] is not NULL. Of course, p&gt;n.<br>a. delete the first order p memory block from the list; say the start address of that block is s.<br>b. add two order (p-1) memory blocks to the order (p-1) free list. The first of the two blocks will begin at address s and the second one will begin at address (s + 2^p-1). Remember, the list must be kept in ascending order of the start addresses.<br>Essentially, you have split a larger chunk of memory into two smaller ones of equal sizes.</p><p>Repeat from step 1.<br>As an example, the following figures show the before and after versions of few of the free lists (order 3, 4, 5) when my_malloc(4) is called. Note that the way the implementation is sought here implies that each my_malloc call should not be for more than 4092 bytes. There are ways to handle this, but is not needed in this assignment.</p><h3 id="Implementing-my-free"><a href="#Implementing-my-free" class="headerlink" title="Implementing my_free"></a>Implementing my_free</h3><p>The first step in my_free is to determine how much memory is to be freed. The function takes as input a memory address returned by my_malloc in an earlier call. Since my_malloc stores the order of the memory block allocated, we can use it to determine how much memory is being returned. If p is the start address of the returned area of memory, then the 4 bytes beginning at f=(p-4) has the order (say n). Therefore, we need to insert back an order n memory block beginning at address f into the order n free list. The deallocation algorithm is as follows.</p><p>Add the order n block starting at f to the order n free list. Remember, the list must be kept in ascending order of the start addresses.<br>If n &lt; MAX_ORDER, check whether<br>a. the added block and the next (or previous) block in the list together represent a contiguous memory region, and<br>b. the smaller of the two start addresses of the two blocks is a multiple of 2n+1.<br>If any of the above two conditions is not true, return; otherwise, continue.<br>The two blocks can be merged and entered into a higher order list.<br>a. let f = the smaller of the start addresses of the two blocks.<br>b. remove the two blocks from the order n free list.<br>c. let n = n + 1.<br>d. Repeat from step 1 with the updated n and f values.<br>Therefore, the my_free function returns memory blocks to the free lists, and coalesces contiguous blocks to higher order blocks whenever possible. Note that my_free does not return memory back to the operating system (decrement the heap top). As a program calls my_malloc and my_free, the same heap region gets allocated in different sizes over the life of the program. Since the two functions are running in user space, this reduces the number of system calls that user programs will have to make to request heap memory. The following figure shows an example of my_free.</p><h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>Download the mymalloc.c file from the assignment page. The file has the grow_heap function and some helper functions to print the free lists and return values. Your objective is to complete the implementation of the my_malloc and my_free functions as per the specifications. The main function is for testing purposes only; what you write in this function will be discarded before grading. The output generated by the provided main function is given in the last page. Some interesting cases that you should test:</p><p>malloc such that no splitting is necessary<br>malloc such that splitting will be necessary; check the case when splitting initiates multiple levels down<br>free such that merging happens with the next block in the list<br>free such that merging happens with the previous block in the list<br>malloc and free such that merging does not happen<br>malloc and free such that merging propagates down more than one level<br>other interesting pointer related errors!!</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit in Canvas the modified mymalloc.c file, and a README file containing any information you feel the GTA should know before grading your program. Comment your program well (include your name).</p>]]></content>
    
    <summary type="html">
    
      编写Heap allocator, 实现malloc和free函数
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="OS" scheme="https://tk1307993.coding.me/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>COMP20003-Python-Libraries</title>
    <link href="https://tk1307993.coding.me/COMP20003-Python-Libraries.html"/>
    <id>https://tk1307993.coding.me/COMP20003-Python-Libraries.html</id>
    <published>2023-01-13T01:10:12.000Z</published>
    <updated>2023-01-13T01:12:51.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Coursework 3 (CW3), the final assessment component this semester, consists of 3 parts: Part A, B and C. It contributes to 80% of your final marks.Using Python libraries: Math &amp; Random<br>Write a program that uses different Python libraries in different subroutines:</p><ol><li>Calculate the area of a circle with the math library. The program asks the user for the radius of the circle and then calculates the surface area of the circle. Use the pi value (pi) found in the math library and the power calculation function pow. Finally, print the area rounded to 2 decimals.</li><li>Guessing a random number with the random library. The program selects a random number between 0-1000 with the randint function of the random library. After that, the program asks the user for a guess and tells whether the searched number is larger or smaller until the user guesses the number correctly. When the user guesses the number, the program also informs how many tries the user needed to find the correct number<br>You should use pseudo-random numbers. To make testing the program possible, set the seed number before the number is drawn with the random.seed(1) command.<br>See the example run below for more detailed operation of the program.</li></ol><p>Example run:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">This program uses libraries <span class="keyword">to</span> solve tasks.</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line">1) Calculate the<span class="built_in"> area </span>of the circle</span><br><span class="line">2) Guess the number</span><br><span class="line">0) Stop</span><br><span class="line">Your choice:</span><br><span class="line">1</span><br><span class="line">Enter the<span class="built_in"> radius </span>of the circle as an integer:</span><br><span class="line">7</span><br><span class="line">With a<span class="built_in"> radius </span>of 7, the<span class="built_in"> area </span>of the circle is 153.94.</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line">1) Calculate the<span class="built_in"> area </span>of the circle</span><br><span class="line">2) Guess the number</span><br><span class="line">0) Stop</span><br><span class="line">Your choice:</span><br><span class="line">2</span><br><span class="line">Guess the integer drawn by the program.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">500</span><br><span class="line">The requested number is lower.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">250</span><br><span class="line">The requested number is lower.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">125</span><br><span class="line">The requested number is higher.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">187</span><br><span class="line">The requested number is lower.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">140</span><br><span class="line">The requested number is lower.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">132</span><br><span class="line">The requested number is higher.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">137</span><br><span class="line">Correct! You used 7 tries <span class="keyword">to</span> guess the correct integer<span class="built_in">..</span></span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line">1) Calculate the<span class="built_in"> area </span>of the circle</span><br><span class="line">2) Guess the number</span><br><span class="line">0) Stop</span><br><span class="line">Your choice:</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><h3 id="Creating-amp-Using-your-own-library"><a href="#Creating-amp-Using-your-own-library" class="headerlink" title="Creating &amp; Using your own library"></a>Creating &amp; Using your own library</h3><p>Write a Python program that converts temperatures between Fahrenheit, Kelvin and Celsius temperature scales. For example, 0 degrees Celcius is 273.15 degrees in Kelvin. There are simple formulas for all these conversions (see e.g., Wikipedia).</p><p>Program each temperature conversion into its own subroutine, which receives the temperature to be converted as a parameter and returns a floating-point result as a return value. Put these conversion functions in your own file as a subprogram library and add the library’s version number as a fixed value, now 1.0.</p><p>Make another file that contains the main program. In this task, it is the menu and the associated selection structure, as shown in the example run below. The user starts by selecting the desired conversion and gives the temperature to be converted as an integer. After this, the main program calls a library function to perform this conversion and prints the result on the screen rounded to two decimals.</p><p>With libraries, it is essential that the interface and functionality are understood correctly. In this program each function receives an integer as a parameter and returns a floating-point number after conversion without rounding it. Since it is a temperature conversion library, the library only contains conversion functions and a number telling the version of the library (fixed value). In this task, the main program and the menu form the user interface of the program and are therefore in another file.</p><p>In this task, the name of the file containing the library needs to be L08T2Library.py and the file containing the main program is main.py. Submit them both to CodeGrade submission box and only after you have uploaded them both, click “Submit”.</p><p>Example run:<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Using version <span class="number">1.0</span> of the temperature conversion library.</span><br><span class="line">What temperature conversion <span class="keyword">do</span> you want to do?</span><br><span class="line"><span class="number">1</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">2</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">3</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">4</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">5</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">6</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">0</span>) Stop</span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Enter the starting temperature:</span><br><span class="line">-<span class="number">20</span></span><br><span class="line">Temperature <span class="built_in">in</span> degrees Fahrenheit: -<span class="number">4.0</span></span><br><span class="line">What temperature conversion <span class="keyword">do</span> you want to do?</span><br><span class="line"><span class="number">1</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">2</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">3</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">4</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">5</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">6</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">0</span>) Stop</span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">5</span></span><br><span class="line">Enter the starting temperature:</span><br><span class="line"><span class="number">100</span></span><br><span class="line">Temperature <span class="built_in">in</span> degrees Celsius: -<span class="number">173.15</span></span><br><span class="line">What temperature conversion <span class="keyword">do</span> you want to do?</span><br><span class="line"><span class="number">1</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">2</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">3</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">4</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">5</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">6</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">0</span>) Stop</span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="Using-Python-libraries-datetime"><a href="#Using-Python-libraries-datetime" class="headerlink" title="Using Python libraries, datetime"></a>Using Python libraries, datetime</h3><p>We will continue practicing the use of datetime library. The program is menu-based, see the example runs below. The selected operation should call a function doing the required task.</p><p>The tasks are the following:</p><p>Instance variables of the datetime object. The program asks the user for the date and time as a string in the format dd.mm.yyyy hh:mm and converts the string into a datetime object. From this object, it is easy to use instance variables: date, month, year, hour, minute to print them to the screen according to the example run.</p><p>Calculation of the length of the period. The program asks the user for date of birth in the format dd.mm.yyyy and calculates how old he/she was on the beginning of this year, that is, on January 1, 2022, and prints the answer in days. By using timedelta objects you can deal with periods of time.</p><p>Printing the names of the days of the week. With the strftime function, you can print the information contained in the datetime object in a versatile way. Use this function to print the names of the days of the week on the screen.</p><p>Start by creating a datetime object using Monday’s date (any Monday’s date will do).<br>After that, go through all the days of one week with the repeat structure and move to the next day by using timedelta. Please note that the language settings in the computer settings may affect the language of the printout, but in CodeGrade the days of the week are printed in English with the strftime function.<br>Printing the names of the months of one year as abbreviations. The task is to print the names of the 12 months correctly. Note that the transition must always fall on the next month, but not necessarily on the same day. The names of the months should be printed as abbreviations.</p><p>See the example run below for more detailed operation of the program and the programming manual describes the most important functions of the datetime module. Implement each of the above functions as its own subroutine, typically less than 10 lines per subroutine.</p><p>Example run:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">This program uses the datetime library to deal <span class="keyword">with</span> time.</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Enter the <span class="built_in">date</span> <span class="keyword">and</span> <span class="built_in">time</span> <span class="keyword">in</span> the <span class="keyword">format</span> <span class="string">'dd.mm.yyyy hh:mm'</span>:</span><br><span class="line"><span class="number">24.12</span><span class="number">.2021</span> <span class="number">18</span>:<span class="number">45</span></span><br><span class="line">You gave <span class="keyword">year</span> <span class="number">2021</span></span><br><span class="line">You gave <span class="keyword">month</span> <span class="number">12</span></span><br><span class="line">You gave <span class="keyword">day</span> <span class="number">24</span></span><br><span class="line">You gave <span class="keyword">hour</span> <span class="number">18</span></span><br><span class="line">You gave <span class="keyword">minute</span> <span class="number">45</span></span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">Enter your birthday <span class="keyword">as</span> dd.mm.yyyy:</span><br><span class="line"><span class="number">07.07</span><span class="number">.1977</span></span><br><span class="line"><span class="keyword">On</span> January <span class="number">1</span>, <span class="number">2022</span>, you were <span class="number">16249</span> <span class="keyword">days</span> old.</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Monday</span><br><span class="line">Tuesday</span><br><span class="line">Wednesday</span><br><span class="line">Thursday</span><br><span class="line">Friday</span><br><span class="line">Saturday</span><br><span class="line">Sunday</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">4</span></span><br><span class="line">Jan</span><br><span class="line">Feb</span><br><span class="line">Mar</span><br><span class="line">Apr</span><br><span class="line">May</span><br><span class="line">Jun</span><br><span class="line">Jul</span><br><span class="line">Aug</span><br><span class="line">Sep</span><br><span class="line"><span class="keyword">Oct</span></span><br><span class="line">Nov</span><br><span class="line"><span class="built_in">Dec</span></span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="Python-module-fraction"><a href="#Python-module-fraction" class="headerlink" title="Python module fraction"></a>Python module fraction</h3><p>This exercise deals with fraction package. The task is to demonstrate how mathematical operations work on fractions. Write a program that ask the numerator and the denominator of two fractions. The program also asks an integer as an exponent. The program forms fractions from the given numerators and denominators and performs the usual mathematical operations according to the example below:</p><p>Example run:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Give</span> <span class="string">the</span> <span class="string">first</span> <span class="string">fraction.</span></span><br><span class="line"><span class="string">Give</span> <span class="string">numerator</span> <span class="string">(top):</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="string">Give</span> <span class="string">denominator</span> <span class="string">(bottom):</span></span><br><span class="line"><span class="number">37</span></span><br><span class="line"><span class="string">Give</span> <span class="string">the</span> <span class="string">second</span> <span class="string">fraction.</span></span><br><span class="line"><span class="string">Give</span> <span class="string">numerator</span> <span class="string">(top):</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="string">Give</span> <span class="string">denominator</span> <span class="string">(bottom):</span></span><br><span class="line"><span class="number">41</span></span><br><span class="line"><span class="attr">Give an exponent:</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="attr">Sum:</span> <span class="number">26</span><span class="string">/37</span> <span class="string">+</span> <span class="number">17</span><span class="string">/41</span> <span class="string">=</span> <span class="number">1695</span><span class="string">/1517</span></span><br><span class="line"><span class="attr">Subtract:</span> <span class="number">26</span><span class="string">/37</span> <span class="bullet">-</span> <span class="number">17</span><span class="string">/41</span> <span class="string">=</span> <span class="number">437</span><span class="string">/1517</span></span><br><span class="line"><span class="attr">Multiply:</span> <span class="string">(26/37)</span> <span class="string">*</span> <span class="string">(17/41)</span> <span class="string">=</span> <span class="number">442</span><span class="string">/1517</span></span><br><span class="line"><span class="attr">Divide:</span> <span class="string">(26/37)</span> <span class="string">/</span> <span class="string">(17/41)</span> <span class="string">=</span> <span class="number">1066</span><span class="string">/629</span></span><br><span class="line"><span class="attr">Power:</span> <span class="string">(26/37)**3</span> <span class="string">=</span> <span class="number">17576</span><span class="string">/50653</span></span><br></pre></td></tr></table></figure></p><h3 id="Python-module-JSON-and-lists"><a href="#Python-module-JSON-and-lists" class="headerlink" title="Python module JSON and lists"></a>Python module JSON and lists</h3><p>In this exercise we have a file containing statistics of inhabitants of Helsinki between the years 1900-1961. The data has been fetched from public Finnish open data set, available at: <a href="https://www.avoindata.fi/data/en_GB/dataset/helsingin-historialliset-tilastot" target="_blank" rel="noopener">https://www.avoindata.fi/data/en_GB/dataset/helsingin-historialliset-tilastot</a><br>The name of the file is helsinki_stats.json and it is available in Moodle.</p><p>The file content displays the inhabitants by year, age-group and gender. The age groups in use are 20-24, 25-29, 30-34 and 35-39 years. The JSON-format is widely used data format and it is a common way to transfer data between web-programs. You will see this format in many places across the internet.</p><p>Your goal is to:</p><p>read the .json file (you can use the familiar open() -function) and convert the text into a json format. Use the json-library of Python to do this (read more from <a href="https://docs.python.org/3/library/json.html" target="_blank" rel="noopener">https://docs.python.org/3/library/json.html</a>)<br>Allow the user to calculate the total number of inhabitants by gender for the whole period 1900-1961.<br>Allow the user to search for the number of inhabitants by a given year. Helsinki hosted the world Olympics in 1952, how many people lived in the city back then?<br>Allow the user to search for inhabitants by age cohorts and starting year. For example, calculate the total number of inhabitants of ages 30-34 from year 1950 until the year 1961<br>Some helpers for the task:</p><p>Please, open the file and check its contents to get a good understanding of the contents<br>Once you read the data into a json-format, you can access the data in a similar way as using list of words.<br>You can access the actual data with json_stats[“data”]. You need to use a loop to go through the entries and process them json_stats[“data”][0]points to the first row in the data, which is<br>{“key”: [“1900”, “0”, “4”], “values”: [“7501”]}<br>To compare the year, you could compare the value json_stats[“data”][0][“key”][0], if it matches with the year 1900 (yes it does)<br>To read the value of this data row, use json_stats[“data”][0][ “values”][0]<br>This may look confusing, but you have all the skills to master this task! Remember, this is what real-life data may look like.</p><p>Clarifications for the file:<br>data[“key”]is a list that contains 3 values. [0]= year, [1]= gender, [2]= age group</p><p>Year options are: 1900-1961 [Notice that there are some years missing]<br>Gender options are: 0 = male, 1 = female<br>Age group options are: 4 = 20-24, 5 = 25-29, 6 = 30-34, 7 = 35-39<br>Note: All numbers in the text file are actual strings. Remember int-string conversions!</p><p>Example runs:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Welcome to history data analyzer.</span><br><span class="line">Enter the file to open: helsinki_stats.json</span><br><span class="line">File read successfully, ready for analysis.</span><br><span class="line">What would you like to <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="keyword">Select</span> your gender (<span class="number">0</span>=male, <span class="number">1</span>=female):</span><br><span class="line"><span class="number">0</span></span><br><span class="line">There were a total <span class="keyword">of</span> <span class="number">1086873</span> males <span class="keyword">in</span> Helsinki <span class="keyword">between</span> <span class="keyword">years</span> <span class="number">1900</span><span class="number">-1961</span></span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="keyword">Select</span> your gender (<span class="number">0</span>=male, <span class="number">1</span>=female):</span><br><span class="line"><span class="number">1</span></span><br><span class="line">There were a total <span class="keyword">of</span> <span class="number">1410942</span> females <span class="keyword">in</span> Helsinki <span class="keyword">between</span> <span class="keyword">years</span> <span class="number">1900</span><span class="number">-1961</span></span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Bye!</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">Welcome <span class="keyword">to</span> history <span class="keyword">data</span> analyzer.</span><br><span class="line">Enter the <span class="keyword">file</span> <span class="keyword">to</span> <span class="keyword">open</span>: helsinki_stats.json</span><br><span class="line"><span class="keyword">File</span> <span class="keyword">read</span> successfully, ready <span class="keyword">for</span> analysis.</span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">Please enter <span class="keyword">year</span> <span class="keyword">for</span> <span class="keyword">search</span> (<span class="number">1900</span><span class="number">-1961</span>):</span><br><span class="line"><span class="number">1952</span></span><br><span class="line">There were a total <span class="keyword">of</span> <span class="number">124263</span> inhabitants <span class="keyword">in</span> Helsinki <span class="keyword">on</span> <span class="keyword">year</span> <span class="number">1952</span></span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Bye!</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">Welcome <span class="keyword">to</span> history <span class="keyword">data</span> analyzer.</span><br><span class="line">Enter the <span class="keyword">file</span> <span class="keyword">to</span> <span class="keyword">open</span>: helsinki_stats.json</span><br><span class="line"><span class="keyword">File</span> <span class="keyword">read</span> successfully, ready <span class="keyword">for</span> analysis.</span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Please enter <span class="keyword">year</span> <span class="keyword">for</span> <span class="keyword">search</span> (<span class="number">1900</span><span class="number">-1961</span>):</span><br><span class="line"><span class="number">1950</span></span><br><span class="line"><span class="keyword">Select</span> age cohort (<span class="number">4</span>=<span class="number">20</span><span class="number">-24</span>, <span class="number">5</span>=<span class="number">25</span><span class="number">-29</span>, <span class="number">6</span>=<span class="number">30</span><span class="number">-34</span>, <span class="number">7</span>=<span class="number">35</span><span class="number">-39</span>):</span><br><span class="line"><span class="number">6</span></span><br><span class="line">There were a total <span class="keyword">of</span> <span class="number">410839</span> inhabitants <span class="keyword">of</span> ages <span class="number">30</span><span class="number">-34</span> <span class="keyword">between</span> the <span class="keyword">years</span> <span class="number">1950</span> <span class="keyword">and</span></span><br><span class="line"><span class="number">1961</span></span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Bye!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      完成使用Python库函数的五个基础练习题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CPT204-Union-Find</title>
    <link href="https://tk1307993.coding.me/CPT204-Union-Find.html"/>
    <id>https://tk1307993.coding.me/CPT204-Union-Find.html</id>
    <published>2023-01-05T03:34:03.000Z</published>
    <updated>2023-01-05T06:36:26.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Coursework 3 (CW3), the final assessment component this semester, consists of 3 parts: Part A, B and C. It contributes to 80% of your final marks.</p><p>In Part A, you will implement a data structure called Union Find with Path Compression. You will then use this data structure to solve a problem called Connect Coins in Part B . Finally, in Part C (300 marks), you will have to solve three problems of various data structures, problem-solving and object-oriented techniques that are derived from Lecture and Lab 1 - 13.</p><p>Submit all your answers for parts A, B, and C to Learning Mall for grading on the Submission Day.</p><h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><p>The rest of the task sheet will describe all the three parts and the Submission Day in detail.</p><h3 id="Part-A-Union-Find-with-Path-Compression"><a href="#Part-A-Union-Find-with-Path-Compression" class="headerlink" title="Part A - Union Find with Path Compression"></a>Part A - Union Find with Path Compression</h3><p>Recall that in Lecture 9 and Lab 9, we have constructed a Union Find data structure called Weighted Quick Union, and achieved O(log N) time for union, find and isSameGroup operations. It turns out that we can do even better, to get almost constant time for both operations!</p><p>In part A, you are to improve your Lab 9: Weighted Quick Union data structure with<br>Path Compression.</p><h3 id="Idea-of-Path-Compression"><a href="#Idea-of-Path-Compression" class="headerlink" title="Idea of Path Compression"></a>Idea of Path Compression</h3><p>Consider the connectivity tree below. It is one of the possible valid trees of 16 items in a Weighted Quick Union data structure, resulting from some series of operations.</p><p>Now imagine you call isSameGroup(10, 11) . That will involve finding the root of 10 and 11, and will be preceded by finding the parent of the elements in blue.</p><p>The key idea is this: since we have found the root of the elements in blue while climbing the tree, whose root is 0, we want to change and set the parents of those blue elements directly to the root.</p><p>Notice that this changes nothing about which group each element belongs to. They are still in the tree where 0 is the root.</p><p>The additional cost of this path compression operation to isSameGroup is still in the same order of growth, but now the future operations that require finding the root will be faster! We are going to use the same path compression idea on the other operations as well.</p><p>Note that this path compression results in amortized running time on N operations of union/ isSameGroup/ size of O((N)), where is the inverse Ackermann function, of which the value, for practical purposes, is always less than 5.</p><h3 id="Part-A-Weighted-Quick-Union-with-Path-Compression"><a href="#Part-A-Weighted-Quick-Union-with-Path-Compression" class="headerlink" title="Part A: Weighted Quick Union with Path Compression"></a>Part A: Weighted Quick Union with Path Compression</h3><p>In part A, your task is to complete an implementation of the Union Find data structure using Weighted Quick Union of Lab 9 with Path Compression.<br>You will have to implement the following methods to complete the data structure:<br>public UnionFind(int N) creates a Union Find data structure with N elements: 0 through N-1. Initially, each element is in its own group.<br>public void validate(int p) checks whether p is a valid element. It throws an IllegalArgumentException if p is not a valid index.<br>public int sizeOf(int p) returns the size of the group the element p belongs to.<br>public int find(int p) returns the group identity number which is the root of the tree element p belongs to. Assume p is a valid element. The path compression operation is applied in this method to reduce the finding root’s running time.<br>Note that now, the given method public boolean isSameGroup(int p, int q) is then implemented by simply calling validate on p and q, and then checking whether find(p) is the same as find(q).<br>public void union(int p, int q) connects two elements p and q together, by combining the groups containing them, connecting the root of the smaller size tree to the root of the larger size tree. If the sizes of the trees are equal, break the tie by connecting p’s root to q’s root. It throws an IllegalArgumentException if p or q is not a valid index.<br>The total marks of all the implementations in part A is 100 points, for passing all the test cases.</p><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><p>The following advice may be found useful in implementing Part A:</p><p>Use the same Automated Regression Unit Testing and Integration Testing strategy that you have been using in Lab 9. Note that with the use of the Path Compression strategy, the output may be different from the result in Lab 9.<br>Add more test cases, and create a good suite of test cases and practice the Partitioning/Boundary, Black-box/White-box, and Coverage testing.<br>Debug with the help of Java Visualizer plugin in IntelliJ IDEA.<br>You may define your own private helper methods. Include them in each of your submissions.<br>Do not define your own instance variables. They are not going to be used in the hidden test cases and may cause unpredictable errors in the grading system.</p><h3 id="Part-B-Connect-Coins"><a href="#Part-B-Connect-Coins" class="headerlink" title="Part B - Connect Coins"></a>Part B - Connect Coins</h3><p>In part B, you are going to use the data structure you have developed in part A to solve an interesting computational problem efficiently in a simple game. The game involves connecting gold coins in a 2-Dimensional space.</p><p>Connect Coins Problem<br>What’s better than gold coins? More gold coins! In your game, a number of gold coins are placed on a 2-D space. The players can place a new gold coin by specifying a series of 2-D coordinates.<br>We say that two coins are connected if the coins are next to each other in one of the 4 directions: left, right, up or down.</p><p>Consider a particular step in that game, when a player wants to place a new coin. We are interested in finding out where to place the new coin so that the resulting connected coins are as many as possible.</p><h3 id="2-D-Space-and-Coins-Representation"><a href="#2-D-Space-and-Coins-Representation" class="headerlink" title="2-D Space and Coins Representation"></a>2-D Space and Coins Representation</h3><p>We represent the 2-D space as a 2-D boolean array of true (T) and false (F) values called boolean[][] ccMatrix.</p><p>A T in a coordinate indicates that there is a coin at that position in the 2-D space, while an F indicates an empty space.</p><p>The location of the new coin that would maximally connect the coins is specified by a 2-element integer array int[] representing the coordinates in [row, column] format.</p><p>The number of newly connected coins will be returned as an int.</p><h3 id="Part-B-Connect-Coins-Task"><a href="#Part-B-Connect-Coins-Task" class="headerlink" title="Part B: Connect Coins Task"></a>Part B: Connect Coins Task</h3><p>In part B, your task is to complete a skeleton code of the ConnectCoins class in order to figure out where to place a coin to maximally connect them, and how many coins can be maximally connected.</p><p>You will have to implement the following methods to complete the class:</p><p>public ConnectCoins(boolean[][] ccMatrix). Each ConnectCoins instance is bound to a single 2-D space, which is passed in through its constructor. You may assume this space is valid, i.e., there is at least one empty coordinate to place a new coin.<br>public int[] placeMaxConnCoins(). The method returns a 2-element integer array that represents the coordinate in [row, column] so that a coin that is placed in that coordinate will give the maximum number of newly connected coins. If there are multiple possible such placements, return the upper-leftmost coordinate.<br>public int maxConnCoins(). The method returns the maximum number of newly connected coins after placing a new coin.<br>The total marks of all the implementations in part B is 100 points, for passing all the test cases.</p><h3 id="Additional-Notes"><a href="#Additional-Notes" class="headerlink" title="Additional Notes"></a>Additional Notes</h3><p>Here are some additional notes:</p><p>The correct implementation of the Union Find data structure will be provided in the automatic grader system for you readily to use.<br>You have to use the Union Find data structure in your implementation and computation. Failing to do so will result in 0 marks.<br>The number of rows and columns in the 2-D space will be in the range [1, 1000]. In particular, it means that the smallest valid array is 1-by-1.</p><h3 id="Advice-1"><a href="#Advice-1" class="headerlink" title="Advice"></a>Advice</h3><p>The following advice may be found useful in implementing Part B:</p><p>Use the Automated Regression Unit Testing with your correct Weighted Union Find (without Path Compression) of Lab 9, that is guaranteed correct, if you have not completely finished Part A.<br>Add more test cases, and create a good suite of test cases and practice the Partitioning/Boundary, Black-box/White-box, and Coverage testing.<br>Debug with the help of Java Visualizer plugin in IntelliJ IDEA.<br>You may define your own private helper methods. Include them in each of your submissions.<br>Do not define your own instance variables. They are not going to be used in the hidden test cases and may cause unpredictable errors in the grading system.</p><h3 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h3><p>In part C, you are going to solve 3 questions, closely related to the works you have done throughout the semester in Lab 1 - Lab 13. Note that you could still access the course materials similar to an open-book exam setting.</p><p>Relative to the programming questions in the Lab Exercises, there will be 2 easy and 1 hard coding questions. There are multiple possible candidate questions for each question with the same difficulty, you will be given one of them randomly.</p><p>While the specific questions are not going to be revealed here, the range of topics will be given below. You can also practice by reviewing all your works in Lab 1 - Lab 13.</p><h3 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h3><p>List, ArrayList, MyList, SLList, DLList, ARList<br>Deque, LLDeque, ARDeque<br>Map, HashMap, HAMap<br>Set, ARSet, HASet<br>MinPQ, ARBinHeap<br>Union Find, Quick Find, Quick Union, Weighted Quick Union<br>Generic Data Structure of the above and their subclasses</p><p>Object-oriented Features and Problem-solving Techniques<br>Empty Constructor, Default Constructor, Copy Constructor, Deep Copy<br>Iterative, Recursive, Recursion with Helper Method<br>Mutates, Not Mutate, Immutable<br>Resizing Array, Table Doubling/Halving<br>Checked/Unchecked Exception, Assertion<br>Iterator, Iterable, Enhanced For Loop, ToString<br>Interface, ADT, Interface Inheritance, Implementation Inheritance, Casting<br>Static/Dynamic Type, Dynamic Method Selection, Overloading, Overriding<br>Equality, Higher Order Functions, Comparator, Comparable, HashCode</p>]]></content>
    
    <summary type="html">
    
      数据结构大作业，完成Union Find结构，并解决Connect Coins问题，然后再解决三个数据结构问题。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CSE565-Analyzing-Code-Coverage</title>
    <link href="https://tk1307993.coding.me/CSE565-Analyzing-Code-Coverage.html"/>
    <id>https://tk1307993.coding.me/CSE565-Analyzing-Code-Coverage.html</id>
    <published>2022-12-31T01:09:25.000Z</published>
    <updated>2022-12-31T01:10:48.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>Select any tool that provides statement and decision code coverage. Utilizing the VendingMachine.java code given to you, develop a set of test cases for your code based on the following requirements:</p><p>Takes in an integer input<br>Allows users to select between three products: Candy (20 cents), Coke (25 cents), Coffee (45 cents)<br>Returns the selected product and any remaining change<br>If there is not enough money to buy the product, displays the amount necessary to buy the product and other products to purchase.<br>Execute the program with your test cases and observe the code coverage of your test cases.<br>The goal is to reach 100% in statement and 90% in decision coverage.</p><h3 id="Please-submit-the-following"><a href="#Please-submit-the-following" class="headerlink" title="Please submit the following:"></a>Please submit the following:</h3><p>Description of the tool used and the types of coverage it provides<br>Set of test cases<br>Screenshot showing the coverage achieved for the test cases developed<br>Your evaluation of the tool’s usefulness</p><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>Select any static source code analysis tool. The StaticAnalysis.java code given to you contains two different data flow anomalies. Execute the tool on StaticAnalysis.java and identify what the two data flow anomalies are. The inputs are:</p><p>the weight of the package as an integer<br>the length of the package as an integer<br>the type of product as a String</p><h3 id="Please-submit-the-following-1"><a href="#Please-submit-the-following-1" class="headerlink" title="Please submit the following"></a>Please submit the following</h3><p>Description of the tool used and the types of analysis it provides<br>Description of the two data flow anomalies<br>Screenshot showing the analysis performed<br>Your evaluation of the tool’s usefulness</p><h3 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h3><p>Your assignment will be scored based on the following criterion:</p><h4 id="Part-1-1"><a href="#Part-1-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>Description of the tool used and the types of coverage it provides<br>Set of test cases<br>Screenshot showing the coverage achieved for the test cases developed<br>Evaluation of the tool’s usefulness</p><h4 id="Part-2-1"><a href="#Part-2-1" class="headerlink" title="Part 2"></a>Part 2</h4><p>Description of the tool used and the types of analysis it provides<br>Description of the two date flow anomalies<br>Screenshot showing the analysis performed<br>Evaluation of the tool’s usefulness</p>]]></content>
    
    <summary type="html">
    
      任意选择一款包含覆盖率测试的测试工具，对提供的文件编写测试用例进行测试，满足Code coverage要求。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS427-Shared-Memory</title>
    <link href="https://tk1307993.coding.me/CS427-Shared-Memory.html"/>
    <id>https://tk1307993.coding.me/CS427-Shared-Memory.html</id>
    <published>2022-12-27T01:04:25.000Z</published>
    <updated>2022-12-27T01:05:37.123Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a program whose main routine obtains one parameter n from the user, i.e. passed to your program when it was invoked from the shell. Your program shall then create a shared memory and a child process. The shared memory shall have a size of BUF_SZ*sizeof(long int), where BUF_SZ is defined as 6 using a macro, e.g. “#define BUF_SZ 6“.</p><p>The child process should obtain the value of n (you actually have multiple options for doing that) and create a sequence of length n, whose elements are of type long int, and implements the equation z = y! (i.e. the factorial) where y is the index of the element, for example, the fourth element (index 3) shall have a value of 3! = 3x2x1 = 6, whereas the first element (index 0) shall have a value of 0!=1 . If n=4, then the sequence shall be 1, 1, 2 and 6.</p><p>The child process shall create the elements, one at a time, and wait for a random interval of time (0 to 2.999 seconds) between generating elements of the sequence. As soon as an element is generated, the child places the element in the shared memory by organizing it as described below.</p><p>The parent process shall NOT wait for the child to exit but instead shall print an element as soon as it arrives into the shared buffer (again, in a manner similar to slides 25-28 of lecture 5)</p><p>Hint: Use fflush() to ensure printf’s are printed immediately into the screen.</p><ul><li>Repeat this, except that now you do not create a shared memory, but rather use an ordinary pipe to pass the sequence instead.</li><li>Repeat this, except that now you do not create a shared memory or a child process, but use a child thread instead. By definition, The parent and child threads already share their memory spaces.</li></ul>]]></content>
    
    <summary type="html">
    
      分别使用Shared Memory, Pipe以及Thread解决同样的问题。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP2560-Devices-as-Files</title>
    <link href="https://tk1307993.coding.me/COMP2560-Devices-as-Files.html"/>
    <id>https://tk1307993.coding.me/COMP2560-Devices-as-Files.html</id>
    <published>2022-12-22T02:19:46.000Z</published>
    <updated>2022-12-22T02:21:35.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The main objective of this lab will be to learn how to UNIX handles devices as files. For the sake of this lab, whenever we refer to a file that is a device, we say special file. Otherwise, it is a normal file like an image file or program file.</p><h3 id="Step-1-UNIX-Devices-as-Special-Files"><a href="#Step-1-UNIX-Devices-as-Special-Files" class="headerlink" title="Step 1. UNIX Devices as Special Files"></a>Step 1. UNIX Devices as Special Files</h3><p>UNIX’s kernel at its high-level of File System (File Manager) defines file as an abstract entity to read from or write to. File could be part of a hard disk drive that stores your C program main.c, another part of the hard disk drive that stores your program executable main, or the whole hard disk drive. UNIX’s kernel at its File System assumes all other hardware devices are also files. The differences between the devices are handled by another part of the kernel, Device Manager. So, like your files in your home directory, devices are also files at /dev directory.</p><p>As seen, we have cpu (processor) and mem (memory), which are the two essential parts of any computer system.</p><p>School’s computer system is a multiprocessor system; that is, it has multiple cpus. So, you can go inside the /dev/cpu and see how many cpus exist:</p><p>Let’s go into the first cpu.</p><p>Amazingly, devices are managed like files and directories that are directly connected to the devices. You may be tempted to open them as normal files using vi:</p><p>You see that vi is not able to read from cpu/0/cpuid like a normal file. Let’s try it for memory device.</p><p>Is this because devices are not files and what we say is incorrect, or vi program is not able to read from these special files? We’ll answer this shortly.</p><p>What are other files? What is the file for mouse, keyboard, monitor, sound, mic, hard disk drives, etc?</p><p>Important parts of a computer system are storage devices. Depending on the type of storage, the file name for the device is either start with hd or sd followed by a letter that distinguishes multiple hard disk storages. For instance, sda is the first hard disk, sdb is the second, and so on. Also, each hard disk storage can have different partitions, which are identified by a number. For instance, sda1 is the first partition of the first hard disk storage.</p><p>As you can see, the School’s system has one hard disk storage with 3 partitions.</p><p>Who select these names for devices? Are there any standards? Can I rename the file of a device? For instance, can I change the /dev/mem to /dev/memory?</p><h3 id="Step-2-Standard-File-Descriptors"><a href="#Step-2-Standard-File-Descriptors" class="headerlink" title="Step 2. Standard File Descriptors"></a>Step 2. Standard File Descriptors</h3><p>There are three files that look like they are devices, but they are not. They are file descriptors (numbers) that are connected to either a normal file or a special file (device):</p><p>Traditionally, /dev/fd/0 or /dev/stdin was connected to keyboard device, meaning that reading from keyboard file (device) was the same as reading from /dev/fd/0 or /dev/stdin file descriptors. /dev/fd/1 or /dev/stdout was connected to printing device or monitor, meaning that writing to printer file (device) was the same as writing to /dev/fd/1 or /dev/stdout file descriptors; likewise, for /dev/fd/2 and /dev/stderr to print out errors. Why not use special files’ names directly for keyboard or printer instead of working with these numbers? Very good question!</p><p>Working with special files (device) requires somebody to be next to the School’s computer system. For instance, if you want to read from the keyboard from its assigned special file.</p><p>Somebody should be in the School’s server room and press any keys in the keyboard device attached to the School’s computer system. This is not convenient for us when we connect remotely to a computer system.</p><p>Therefore, by default, UNIX-based/like operating system developers came up with the idea of standardizing the input and output for programs regardless of where or what the actual device is. So, they fixed these three file descriptors that can be connected to any special file (device) or normal file. For the program, it does not matter.</p><p>The program reads from 0 and writes to 1. If error, the program writes to 2.</p><p>You may connect 0 and 1 and 2, all to a normal file (how?). Then your program reads input from the file and writes output and errors, if any, to the same file.</p><p>But how do we run our program, like the one in Lab03, at School’s computer system that reads input and writes outputs? This is handled by either kernel or shell, who attach standard file descriptors to a virtual terminal device called tty (TeleTYpewriter) with a unique number for a user connected to the computer system. This virtual device is the window with the black background that shows you the shell command prompt.</p><p>You can see your virtual terminal device number by using the tty command:</p><p>This is the device your program reads from or writes to, not the keyboard or monitor at the School’s server room or at your home!</p><p>When your program, like in Lab03, asks an input value, it reads from 0 which is connected to your tty. So, when you type numbers or characters by your keyboard attached to your computer at home, it goes to your tty, and then it forwards them to your program. Can you explain what happens when your program writes outputs and you see it in your monitor?</p><h3 id="Step-3-Read-Write-to-Devices-as-Files-via-Shell"><a href="#Step-3-Read-Write-to-Devices-as-Files-via-Shell" class="headerlink" title="Step 3. Read/Write to Devices as Files via Shell"></a>Step 3. Read/Write to Devices as Files via Shell</h3><p>vi is a program to open normal files that are stored in storage devices. But it cannot open special files (devices) and simply raise an error. However, UNIX, which claims that devices are files, must provide the same system calls to work with devices the same way as files. In the next step, we’ll see UNIX fulfills its promise. Not only that, now we see that its shell also provides a built-in command cat (concatenate)to do the operations on devices and files in the same way.</p><p>To read from a normal file or a special file (device), you can simply use cat followed by the name of the file/device.</p><p>As seen, we do not have enough permission to read from some devices. But we have permission to access our assigned virtual terminal device tty. Let’s find our unique tty again:</p><p>Then, read from it.</p><p>As seen, it is empty initially. You can put some data to it by typing and pressing enter:<br>You see that the cat reads from the tty and shows it to us. You can continue to send more info to the tty and cat reads them and show them to you. You can exit cat by CTRL+C.</p><p>I used cat on my first hard disk storage on my own computer system, and here is the output:</p><p>Technically, cat opens the special file (device) sda1, reads the content and writes them into 1 which is connected to tty, and you can see the content of my hard disk drive.</p><p>Let’s write to a device. You can use cat with ] operator that connects 1 to a device instead of your tty. Then, you are able to input data and it writes them to that device:</p><p>As seen, you are not able to write to memory due to lack of enough permission.</p><p>However, you can write to your tty.</p><p>You see the same effect as when you read from tty. Can you explain what is happening?</p><p>I don’t dare to write on my hard disk storage by cat! But I can write to my sound device, whose file is /dev/dsp.</p><p>I have to exit cat to hear my sound device. If you do it on your sound card, you will hear nothing but a loud noise! This is because the sound device needs audio signals and cannot read my sentences in English. To send an audio signal to my sound device:</p><p>I record my voice in a file test.wav<br>I send the content of this file to the sound device cat can connect two files/devices by reading from one file or device (source) and write it into the second file or device (target). For example,<br>Which reads from the file test.c and writes it to your tty device. Now, I want to send my test.wav to my sound device:</p><p>Great! Please note that we cannot do this on the School’s computer system due to lack of permission. You can try it yourself if you have UNIX-base/like OS or UNIX emulator software (e.g., Cygwin 1 on Windows.)</p><h3 id="Step-4-Read-Write-to-Devices-as-Files-via-System-Calls"><a href="#Step-4-Read-Write-to-Devices-as-Files-via-System-Calls" class="headerlink" title="Step 4. Read/Write to Devices as Files via System Calls"></a>Step 4. Read/Write to Devices as Files via System Calls</h3><p>Now that we know how devices and files are treated the same in UNIX, let’s open a device and read from or write to it like a normal file in a C program. Due to our lack of enough permission on the School’s computer system, we use the virtual terminal device tty in our example. First, we need to know the tty number that assigned to our terminal:</p><p>Now, /dev/pts/9 is our read and write device. First, we need to open it and have a file descriptor to the device.</p><p>The open system call is in the file control header (fcntl.h):</p><p>Then, we need to read from it using the file descriptor at hand. The read system call is in UNIX standard header (unistd.h):</p><p>There are two tasks for your submission:</p><p>Our example in step 4 never stops. Add lines of code such that when the user writes END, it exits the while loop, safely closes the device, and returns.</p><p>Instead of printing what we read from the device to output (the terminal device itself), write them into a normal file, named log.txt.<br>You are not allowed to use any library routines, no stdio.h! Only system calls in fcntl.h and unistd.h. The sample code for step 4 has been attached in a zip file named lab06_hfani.zip.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You will prepare and submit the program in one single zip file lab06_uwinid.zip containing the following items:</p><p>lab06_uwinid.zip<br>tty.c =&gt; built with no error<br>log.txt =&gt; the output of the program<br>results.pdf/jpg/png =&gt; the image snapshot of the program run<br>(Optional) readme.txt<br>Files Naming and Formats<br>Please follow the naming convention as you lose marks otherwise. Instead of uwinid, use your own account name.</p>]]></content>
    
    <summary type="html">
    
      学习如何将Linux Device作为文件进行处理。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CSE383-PHP</title>
    <link href="https://tk1307993.coding.me/CSE383-PHP.html"/>
    <id>https://tk1307993.coding.me/CSE383-PHP.html</id>
    <published>2022-12-19T02:27:18.000Z</published>
    <updated>2022-12-19T02:29:00.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>The objective of this exercise is to:</p><ol><li>Understand database queries</li><li>Understand the php programming construct</li><li>Write php rest interface</li></ol><h3 id="Part-1-Update-the-lookup-table"><a href="#Part-1-Update-the-lookup-table" class="headerlink" title="Part #1: Update the lookup table"></a>Part #1: Update the lookup table</h3><p>Exercise<br>Using phpliteadmin as in the previous lab.<br>Update the table so that the value field is now a text (string) field<br>Copy the “Query used to create this table” from the phpliteadmin</p><h3 id="Part-2-Update-the-setLookup-rest-method"><a href="#Part-2-Update-the-setLookup-rest-method" class="headerlink" title="Part #2: Update the setLookup rest method"></a>Part #2: Update the setLookup rest method</h3><p>Exercise<br>Edit the file final.class.php in /var/www/html.<br>Remove the check for value to be a numeric field Test.<br>Verify the data was entered correctly by looking in phpliteadmin</p><h3 id="Part-3-Create-the-getLookup-rest-method"><a href="#Part-3-Create-the-getLookup-rest-method" class="headerlink" title="Part #3: Create the getLookup rest method"></a>Part #3: Create the getLookup rest method</h3><p>Exercise<br>Edit the file final.class.php in /var/www/html.</p><p>Create the getLookup rest interface<br>You only need to create the function<br>I suggest copying and pasting the setLookup routine as a starting point<br>Arguments (update the function arguments)<br>date = date field<br>Returned value<br>All elements of file that match the requested date<br>SQL<br>Call GET_SQL (same calling sequence as EXEC_SQL, but it returns an array of results, keyed by field names)<br>Query<br>Reminder. Do NOT copy/paste from word with smartquotes into php (will not work out well)<br>Make sure you build up the command using the exact same concept as EXEC_SQL in setTemp (but using GET_SQL instead), same argument concept. (every ? needs an appropriate variable to fill it in)<br>Update the return message with appropriate words for both good and error situations</p><h3 id="Reminder"><a href="#Reminder" class="headerlink" title="Reminder"></a>Reminder</h3><p>You can look for php errors in the following<br>If your call to the php doesn’t work or shows a 500 server error, you have a php error.</p><p>Check the piece of code you just edited: final.class.php<br>a. php final.class.php<br>b. if good - should give NO response<br>c. if a response - it’s an error<br>Check the web server output<br>a. sudo tail /var/log/httpd/error.log</p>]]></content>
    
    <summary type="html">
    
      使用PHP, 练习Database的调用方法
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>COMP4173-Randomized-Response</title>
    <link href="https://tk1307993.coding.me/COMP4173-Randomized-Response.html"/>
    <id>https://tk1307993.coding.me/COMP4173-Randomized-Response.html</id>
    <published>2022-12-13T03:04:32.000Z</published>
    <updated>2022-12-13T03:05:46.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Randomized-response"><a href="#Randomized-response" class="headerlink" title="Randomized response"></a>Randomized response</h3><p>(a) The simplest version of randomized response involves flipping a single fair coin (50% probability of heads and 50% probability of tails). Suppose an individual is asked a potentially incriminating question, and flips a coin before answering. If the coin comes up tails, he answers truthfully, otherwise he answers “yes”. Is this mechanism differentially private? If so, what epsilon value does it achieve? Carefully justify your answer.</p><h3 id="Privacy-preserving-synthetic-data"><a href="#Privacy-preserving-synthetic-data" class="headerlink" title="Privacy-preserving synthetic data"></a>Privacy-preserving synthetic data</h3><p>In this problem, you will take on the role of a data owner who owns two sensitive datasets, called hw_compas and hw_fake, and is preparing to release differentially private synthetic versions of these datasets.</p><p>The first dataset, hw_compas is a subset of the dataset released by ProPublica as part of their COMPAS investigation. The hw_compas dataset has attributes age, sex, score, and race, with the following domains of values: age is an integer between 18 and 96, sex is one of ‘Male’ or ‘Female’, score is an integer between -1 and 10, race is one of ‘Other’, ‘Caucasian’, ‘African-American’, ‘Hispanic’, ‘Asian’, or ‘Native American’.</p><p>The second dataset, hw_fake, is a synthetically generated dataset. We call this dataset “fake” rather than “synthetic” because you will be using it as input to a privacy-preserving data generator. We will use the term “synthetic” to refer to privacy-preserving datasets that are produced as output of a data generator.</p><p>We generated the hw_fake dataset by sampling from the following Bayesian network:</p><p>In this Bayesian network, parent_1, parent_2, child_1, and child_2 are random variables. Each of these variables takes on one of three values {0, 1, 2}.</p><p>Variables parent_1 and parent_2 take on each of the possible values with an equal probability. Values are assigned to these random variables independently.<br>Variables child_1 and child_2 take on the value of one of their parents. Which parent’s value the child takes on is chosen with an equal probability.<br>To start, use the Data Synthesizer library to generate 4 synthetic datasets for each sensitive dataset hw_compas and hw_fake (8 synthetic datasets in total), each of size N=10,000, using the following settings:</p><p>A: random mode<br>B: independent attribute mode with epsilon = 0.1.<br>C: correlated attribute mode with epsilon = 0.1, with Bayesian network degree k=1<br>D: correlated attribute mode with epsilon = 0.1, with Bayesian network degree k=2<br>For guidance, you can use the HW2_Template here. We have provided the code to generate the 4 synthetic datasets for you. Please make sure to duplicate this file rather than write your code directly here.</p><p>(a) Execute the following queries on synthetic datasets and compare the results to those on the corresponding real datasets:</p><p>Q1 (hw_compas only): Execute basic statistical queries over synthetic datasets.<br>The hw_compas has numerical attributes age and score. Calculate the median, mean, min, max of age and score for the synthetic datasets generated with settings A, B, C, and D (described above). Compare to the ground truth values, as computed over hw_compas. Present results in a table. Discuss the accuracy of the different methods in your report. Which methods are accurate and which are less accurate? If there are substantial differences in accuracy between methods - explain these differences.<br>Q2 (hw_compas only): Compare how well random mode (A) and independent attribute mode (B) replicate the original distribution.<br>Plot the distributions of values of age and sex attributes in hw_compas and in synthetic datasets generated under settings A and B. Compare the histograms visually and explain the results in your report.<br>Next, compute cumulative measures that quantify the difference between the probability distributions over age and sex in hw_compas vs. in privacy-preserving synthetic data.<br>To do so, use the Two-sample Kolmogorov-Smirnov test (KS test) for the numerical attribute and Kullback-Leibler divergence (KL-divergence) for the categorical attribute, using provided functions ks_test and kl_test. Discuss the relative difference in performance under A and B in your report.<br>Q3 (hw_fake only): Compare the accuracy of correlated attribute mode with k=1 (C) and with k=2 (D).<br>Display the pairwise mutual information matrix by heatmaps, showing mutual information between all pairs of attributes, in hw_fake and in two synthetic datasets (generated under C and D). Discuss your observations in your report, noting how well / how badly mutual information is preserved in synthetic data.<br>(b) (hw_compas only): Study the variability in the mean and median of age for synthetic datasets generated under settings A, B, and C.</p><p>To do this, fix epsilon = 0.1, and generate 10 synthetic datasets (by specifying different seeds).</p><p>Calculate the mean and median of age for each of the 10 datasets. Plot the 10 median values and the 10 mean values using a box-and-whiskers plot. Compare these metrics to the ground truth median and mean from the real data. Carefully explain your observations: which mode gives more accurate results and why? In which cases do we see more or less variability?</p><p>Specifically for the box-and-whiskers plots, we expect to see two subplots: one for the mean and one for the median, with the three settings (A, B and C) along the X-axis and age on the Y-axis. You should include these plots in your report.</p><p>(c) (hw_compas only): Study how well statistical properties of the data are preserved as a function of the privacy budget, epsilon. To see robust results, execute your experiment with 10 different synthetic datasets (with different seeds) for each value of epsilon, for each data generation setting (B, C, and D). Specifically, you should:</p><p>Compute the KL-divergence over the attribute race in hw_compas. For each setting (B, C, and D), vary epsilon from 0.02 to 0.1 in increments of 0.02. Specifically, the epsilons are [0.02, 0.04, 0.06, 0.08, 1]. In total, you should generate 3<em>10</em>6 synthetic datasets and calculate the KL-divergence for race in each dataset. Create three box-and-whiskers plots, one for each setting (B, C, D). Each plot should have epsilon on the X-axis and KL-divergence on the Y-axis. Discuss your findings in the report and include your plots.</p>]]></content>
    
    <summary type="html">
    
      使用Kolmogorov–Smirnov Test分析数据。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS203-Proxy-Server</title>
    <link href="https://tk1307993.coding.me/CS203-Proxy-Server.html"/>
    <id>https://tk1307993.coding.me/CS203-Proxy-Server.html</id>
    <published>2022-12-03T09:06:51.000Z</published>
    <updated>2022-12-03T09:08:03.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>For this assignment, you must implement an Internet resource retriever to act as a client and to make requests to a server, including the basic Web server you have implemented. The basic Web server’s task is to deliver resources to the client. The client requests a particular resource by writing an HTTP GET (or similar) request. On receiving a legitimate request in the form of a URL path, the server should return the contents of the corresponding file so that the client can read the response from the server via the proxy server. When networking facilities are available, the basic Web server (or any other server) can be executed on one machine and the client can be executed on another to make requests to the server. When networking facilities are not available, both the basic Web server and the client may be executed on the same machine. The client may refer to the server host by the standard name localhost.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>Tutor-marked Exercise (TME) 1 requires that you develop three programs: one for a client, one for a basic Web server, and one for a proxy server.</p><p>A proxy server is a special-purpose HTTP server; it is the core application for this project. The proxy server has two socket connections. It “listens” for communication from clients through one and launches requests to specific Web servers through the other. In this exercise you should use a thread in the proxy server so that it is able to send and receive messages simultaneously to and from the server/client.</p><p>A basic Web server can deal with requests for resources from a client. It is necessary to have a Web server return messages to a client such as 404 - not found; 403 - bad request; etc., as appropriate. If the resource requested is available, which means that the resource can be found on the disk of the Web server, the Web server needs to read the resource and write the data to the socket. For example, a Web server may find an HTML file or a JPEG (image) file on its disk and transfer the data to the socket.</p><p>The client basically needs access to the function that allows the user to input the resource URL that identifies the resource s/he wants to access. However, the client has to access the resource by sending a request to the proxy server, and then the client must receive the resource from the proxy server. No matter what kind of data the client receives, the client only needs to print it on the screen. Note that where the response from a server is an HTML file, a typical Web browser will render it according to HTML semantics. This functionality is not considered in this exercise.</p><p>Note: Your tutor may use resource URLs other than those for the basic Web server (e.g., Java tutorial Web pages and public FTP files).</p><p>To test your basic Web server’s function you can simply use an HTML file named testfile.html and a JPG file name testfile.jpg with Microsoft Internet Explorer or Mozilla Firefox. After you are completely certain that your basic Web server works properly, you can use <a href="http://127.0.0.1/testfile.html" target="_blank" rel="noopener">http://127.0.0.1/testfile.html</a> or <a href="http://localhost/testfile.jpg" target="_blank" rel="noopener">http://localhost/testfile.jpg</a> with your client to test whether your proxy works. Finally, try to use <a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a> or <a href="ftp://ftp.us.dell.com/readme.txt" target="_blank" rel="noopener">ftp://ftp.us.dell.com/readme.txt</a> within your client to test whether your proxy works properly.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Your assignment must be zipped into one file and uploaded using the Assignment Drop Box feature of Moodle. The file must include</p><p>all source files.<br>a complete test plan.<br>Before you submit your TME, please review Tutor-marked Exercise Requirements for full details of TME requirements and to review the marking scheme. Please contact your tutor if you have any questions.</p><p>Note: Your tutor will not accept TMEs by email.</p><h3 id="Submitting-your-assignments"><a href="#Submitting-your-assignments" class="headerlink" title="Submitting your assignments"></a>Submitting your assignments</h3><p>Use the Add submission OR Edit submission button below to upload your completed assignment file(s).<br>Remember to click the Save changes button after uploading files<br>The maximum upload file size is 501MB<br>You can upload a maximum of 1 files<br>Remember to click the Submit assignment button after you upload your assignment file(s), enter your online text or record your audio file.</p>]]></content>
    
    <summary type="html">
    
      实现一个代理服务器，用于代理HTTP请求以及FTP请求。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>CSC108H-Working-With-arxiv-Metadata</title>
    <link href="https://tk1307993.coding.me/CSC108H-Working-With-arxiv-Metadata.html"/>
    <id>https://tk1307993.coding.me/CSC108H-Working-With-arxiv-Metadata.html</id>
    <published>2022-11-18T04:09:48.000Z</published>
    <updated>2022-11-18T04:12:02.975Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goals-of-this-Assignment"><a href="#Goals-of-this-Assignment" class="headerlink" title="Goals of this Assignment"></a>Goals of this Assignment</h3><p>In this assignment, you will practise working with files, building and using dictionaries, designing functions using the Function Design Recipe, and writing unit tests.</p><h3 id="Introduction-arxiv-org"><a href="#Introduction-arxiv-org" class="headerlink" title="Introduction: arxiv.org"></a>Introduction: arxiv.org</h3><p>arxiv.org (<a href="https://arxiv.org/" target="_blank" rel="noopener">https://arxiv.org/</a>) is a free distribution service and an open-access archive for nearly two million scholarly articles in the fields of physics, mathematics, computer science, quantitative biology, quantitative finance, statistics, electrical engineering and systems science, and economics. arXiv is pronounced as “archive” (<a href="https://en.wikipedia.org/wiki/ArXiv" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/ArXiv</a>) .</p><p>arxiv.org (<a href="https://arxiv.org/" target="_blank" rel="noopener">https://arxiv.org/</a>) maintainers believe in open, free, and accessible information. In addition to free and easy access to the articles themselves, arxiv.org also provides ways to access its metadata (<a href="https://arxiv.org/help/bulk_data" target="_blank" rel="noopener">https://arxiv.org/help/bulk_data</a>) . This metadata includes information such as the article’s unique identification number, author(s), title, abstract, the date the article was added to the arxiv and when it was last modified, licence under which the article was published, etc. This metadata is used by a variety of research tools that investigate scientific research trends, provide intelligent scientific search techniques, and in many other areas.</p><p>To make this assignment more manageable for you, we have extracted a sample of arxiv’s metadata, simplified it, and created a text file you will use as input to your program.</p><h3 id="The-Metadata-File"><a href="#The-Metadata-File" class="headerlink" title="The Metadata File"></a>The Metadata File</h3><p>The metadata file contains a series of one or more article descriptions, one after the other. Each article description has the following elements, in order:</p><p>A line containing a unique identifier of the article. An identifier will not occur more than once in the file, and it does not contain any whitespace.<br>A line containing the article’s title. If we do not have title information, this line will be blank.<br>A line containing the date the article was created, or a blank line if this information is not provided. The date is formatted YYYYMM-DD.<br>A line containing the date the article was last modified, or a blank line if this information is not provided. The date is formatted YYYY-MM-DD.<br>Zero or more lines with the article’s author(s). Each line contains an author’s last name followed by a comma , followed by the author’s first name(s). There is always exactly one comma , on the author line. Note, that there may be white space and/or punctuation other than commas included in an author’s last name and/or first name. Immediately after the zero or more author lines, the file contains a single blank line. If we do not have any author information for an article, then the blank line will come immediately after the modification date line.<br>Zero or more lines of text containing the abstract of the article. Immediately after the abstract, the file contains a line with the keyword END on it (and nothing else other than perhaps whitespace). You may assume that a line with only END in it does not occur in any other context in the metadata file, i.e. it always signifies that an article description is over. Unless this is the last line in the file, the next line will contain the identifier of the next article, and so on.<br>You can assume that any file we test your code with has this structure. You do not need to handle any invalid file formats.</p><h3 id="Example-Metadata-File"><a href="#Example-Metadata-File" class="headerlink" title="Example Metadata File"></a>Example Metadata File</h3><p>Here is an example metadata file (also provided in the starter code later (a3.zip) ):<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">008</span></span><br><span class="line"><span class="string">Intro</span> <span class="string">to</span> <span class="string">CS</span> <span class="string">is</span> <span class="string">the</span> <span class="string">Best</span> <span class="string">Course</span> <span class="string">Ever</span></span><br><span class="line"><span class="number">2021</span><span class="number">-09</span><span class="number">-01</span></span><br><span class="line"></span><br><span class="line"><span class="string">Ponce,Marcelo</span></span><br><span class="line"><span class="string">Tafliovich,Anya</span> <span class="string">Y.</span></span><br><span class="line"></span><br><span class="line"><span class="string">We</span> <span class="string">present</span> <span class="string">clear</span> <span class="string">evidence</span> <span class="string">that</span> <span class="string">Introduction</span> <span class="string">to</span></span><br><span class="line"><span class="string">Computer</span> <span class="string">Science</span> <span class="string">is</span> <span class="string">the</span> <span class="string">best</span> <span class="string">course.</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="number">031</span></span><br><span class="line"><span class="string">Calculus</span> <span class="string">is</span> <span class="string">the</span> <span class="string">Best</span> <span class="string">Course</span> <span class="string">Ever</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-09</span><span class="number">-02</span></span><br><span class="line"><span class="string">Breuss,Nataliya</span></span><br><span class="line"></span><br><span class="line"><span class="string">We</span> <span class="string">discuss</span> <span class="string">the</span> <span class="string">reasons</span> <span class="string">why</span> <span class="string">Calculus</span> <span class="string">I</span></span><br><span class="line"><span class="string">is</span> <span class="string">the</span> <span class="string">best</span> <span class="string">course.</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="number">067</span></span><br><span class="line"><span class="string">Discrete</span> <span class="string">Mathematics</span> <span class="string">is</span> <span class="string">the</span> <span class="string">Best</span> <span class="string">Course</span> <span class="string">Ever</span></span><br><span class="line"><span class="number">2021</span><span class="number">-09</span><span class="number">-02</span></span><br><span class="line"><span class="number">2021</span><span class="number">-10</span><span class="number">-01</span></span><br><span class="line"><span class="string">Pancer,Richard</span></span><br><span class="line"><span class="string">Bretscher,Anna</span></span><br><span class="line"></span><br><span class="line"><span class="string">We</span> <span class="string">explain</span> <span class="string">why</span> <span class="string">Discrete</span> <span class="string">Mathematics</span> <span class="string">is</span> <span class="string">the</span> <span class="string">best</span> <span class="string">course</span> <span class="string">of</span> <span class="string">all</span> <span class="string">times.</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="number">827</span></span><br><span class="line"><span class="string">University</span> <span class="string">of</span> <span class="string">Toronto</span> <span class="string">is</span> <span class="string">the</span> <span class="string">Best</span> <span class="string">University</span></span><br><span class="line"><span class="number">2021</span><span class="number">-08</span><span class="number">-20</span></span><br><span class="line"><span class="number">2021</span><span class="number">-10</span><span class="number">-02</span></span><br><span class="line"><span class="string">Ponce,Marcelo</span></span><br><span class="line"><span class="string">Bretscher,Anna</span></span><br><span class="line"><span class="string">Tafliovich,Anya</span> <span class="string">Y.</span></span><br><span class="line"></span><br><span class="line"><span class="string">We</span> <span class="string">show</span> <span class="string">a</span> <span class="string">formal</span> <span class="string">proof</span> <span class="string">that</span> <span class="string">the</span> <span class="string">University</span> <span class="string">of</span></span><br><span class="line"><span class="string">Toronto</span> <span class="string">is</span> <span class="string">the</span> <span class="string">best</span> <span class="string">university.</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="number">042</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-05</span><span class="number">-04</span></span><br><span class="line"><span class="number">2021</span><span class="number">-05</span><span class="number">-05</span></span><br><span class="line"><span class="string">This</span> <span class="string">is</span> <span class="string">a</span> <span class="string">very</span> <span class="string">strange</span> <span class="string">article</span> <span class="string">with</span> <span class="literal">no</span> <span class="string">title</span></span><br><span class="line"><span class="string">and</span> <span class="literal">no</span> <span class="string">authors.</span></span><br><span class="line"><span class="string">END</span></span><br></pre></td></tr></table></figure></p><p>This metadata file contains information on five articles with unique identifiers ‘008’ , ‘031’ , ‘067’ , ‘827’ , and ‘042’ . Notice that the following information is not provided in the file: modified date in article ‘008’ , created date in article ‘031’ , and title and authors in article ‘042’ . All these are valid cases and your code should deal with them. Also notice that an abstract can occupy zero or one or more lines in the input file.</p><h3 id="Storing-the-Arxiv-Metadata"><a href="#Storing-the-Arxiv-Metadata" class="headerlink" title="Storing the Arxiv Metadata"></a>Storing the Arxiv Metadata</h3><p>We will use a dictionary to maintain the arxiv metadata. Let us look in detail at the format of this dictionary. The types below are defined in constants.py and we have imported them into arxiv_functions.py for use in your type contracts.</p><h4 id="Type-NameType"><a href="#Type-NameType" class="headerlink" title="Type NameType"></a>Type NameType</h4><p>We will store the names of authors as tuples of two strings: the author’s last name(s) and the author’s first name(s). For example, the author Anna Bretscher would be listed in the metadata file as ‘Bretscher,Anna’ and will be stored as (‘Bretscher’, ‘Anna’) . Note, that there may be punctuation and/or white space included in an author’s last name and/or first name, and we need to keep all this information. The only exception is: there are no commas in author’s first nor last names. For example, Tafliovich,Anya Y. , Van Dyke,Mary-Ellen and Sklodowska Curie,Marie Salomea are all valid input lines, and should be stored as (‘Tafliovich’, ‘Anya Y.’) , (‘Van Dyke’, ‘Mary-Ellen’) and (‘Sklodowska Curie’, ‘Marie Salomea’) , respectively. A line like Tafliovich,Anya,Y. is not valid, since it contains two commas and we cannot tell which is supposed to be the first and which is the last name. You will only have to deal with valid input in this assignment. We will also make the simplification that all authors will have both first and last names.</p><h4 id="Type-ArticleType"><a href="#Type-ArticleType" class="headerlink" title="Type ArticleType"></a>Type ArticleType</h4><p>The file constants.py in the starter code defines the following constants that you should use instead of the literal strings. Below are the current values of the constants.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ID</span> = <span class="string">'identifier'</span></span><br><span class="line"><span class="attr">TITLE</span> = <span class="string">'title'</span></span><br><span class="line"><span class="attr">CREATED</span> = <span class="string">'created'</span></span><br><span class="line"><span class="attr">MODIFIED</span> = <span class="string">'modified'</span></span><br><span class="line"><span class="attr">AUTHORS</span> = <span class="string">'authors'</span></span><br><span class="line"><span class="attr">ABSTRACT</span> = <span class="string">'abstract'</span></span><br></pre></td></tr></table></figure><p>We will store information about a single article in a dictionary that maps ID , TITLE , CREATED , MODIFIED , AUTHORS , and ABSTRACT to the corresponding values. The value for each piece of information is of type str , except for the value associated with key AUTHORS , which is a List of NameType . If an element is not provided in the metadata file, then the value associated with that key will be empty (i.e. the empty string, or in the case of no authors, an empty list). The list of authors will be sorted in lexicographic order. (removed Nov 12)</p><p>Notice that since the fourth line in the specification is blank, the value corresponding to key MODIFIED is the empty string. Also notice that the final newline character on each line is not included in any of the stored values, except for the newline characters inside the abstract we keep those! Take a careful look at the starter file example_data.txt (same as the example above) and the corresponding dictionary EXAMPLE_ARXIV defined in the file arxiv_functions.py for more examples.</p><h4 id="Type-ArxivType"><a href="#Type-ArxivType" class="headerlink" title="Type ArxivType"></a>Type ArxivType</h4><p>Finally, we will store the entire arxiv metadata in a dictionary that maps article identifiers to articles, i.e. to values of type<br>ArticleType . The key/value pair in this dictionary that corresponds to the above article</p><h3 id="Required-Functions"><a href="#Required-Functions" class="headerlink" title="Required Functions"></a>Required Functions</h3><p>In the starter code file arxiv_functions.py , follow the Function Design Recipe to complete the following functions. In addition, you must add some helper functions (i.e. functions that you design yourself) to aid with the implementation of these required functions. Helper functions also require complete docstrings. We strongly recommend you also use the suggested helper functions in the table below; we give you these hints to make your programming task easier.</p><p>Some indicators that you should consider writing a new helper function</p><p>For each of the functions below, other than read_arxiv_file , write at least two examples that use the constant EXAMPLE_ARXIV . If your helper function takes an open file as an argument, you do NOT need to write any examples in that function’s docstring. Otherwise, for any helper functions you add, write at least two examples in the docstring.</p><p>Your functions should not mutate their arguments, unless the description says that is what they do.</p><p>A note on sorting: Throughout the assignment, we ask for lists to be sorted in lexiocographic order. This is the order that Python sorts in (such as when you call list.sort ). You do not have to write your own sorting code (unless you want to!)</p><p>We have broken the components of the assignment down into five Tasks, grouping related functions together. Some tasks are easier than others, and you can do the tasks in any order. As in the previous assignments, we’ll be marking each function mostly separately (however there will be some overlap when functions call other functions).</p>]]></content>
    
    <summary type="html">
    
      完成Python基础作业，练习Dict的使用，对arXiv.org的数据进行分析。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSCC11-Classification</title>
    <link href="https://tk1307993.coding.me/CSCC11-Classification.html"/>
    <id>https://tk1307993.coding.me/CSCC11-Classification.html</id>
    <published>2022-11-14T01:43:11.000Z</published>
    <updated>2022-11-14T01:44:34.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>Download the starter file on the course webpage. The file requires the same login and password as the video lectures. Once downloaded and unpacked, a directory called Exam will exist. Please do not change the directory structure or the headers of functions in python files. All modified python files and others you generate (e.g., plots) should be left in the Exam directory (which you’ll submit). Remember to read all instructions and comments in the python files very carefully.</p><h3 id="Written-work"><a href="#Written-work" class="headerlink" title="Written work"></a>Written work</h3><p>For written answers you can either write on paper or use an editor that supports equations (eg Word or Latex). If writing on paper, please scan or photograph and save as a png file or perhaps pdf (and make sure it is easily legible). If formatting your answers in Word or latex etc, please save as pdf. All such png or pdf files should be left in the Exam directory for submission.</p><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>You’ll use the same environment you’ve been using on assignments. You will need Python3,<br>Numpy, Matplotlib, and Pickle; you may not use any other python packages. Please pre-install if working on your own computer. If you’d rather work on a UTSC machine, remote login to one of these lab machines:</p><p>IC lab (ranging from 01 to 50): i406-[01-50]<br>BV lab (ranging from 01 to 40): b473-[01-40]</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit your exam on the Mathlab server (like assignments). Do not modify the Exam directory tree or method/function headers therein.</p><p>Q1. Classification with Gaussian Class Conditionals<br>In Chapter 8.4 of the online course lecture notes, we introduced the Gaussian class-conditional (GCC) model for classification. The generative model for a data point x, in the two class case. Where c is the class random variable; it takes on the value 0 for one class, and 1 for the other. The decision function for the CC model is the log posterior ratio.</p><p>To learn the model, given N data points, we estimate the class priors. For GCC models the likelihoods are Gaussian, for which we estimate the means and covariances.</p><p>For the problem below you are asked implement the GCC model. You will then apply your algorithm to three datasets, each having a training set and a test set. You will train this model, visualize the Gaussians, and identify the properties of the GCC model. Starter code is in directory gcc.</p><p>Implementing GCC: You should implement the GCC model by completing the methods train and predict in gcc.py :</p><p>train fits the GCC model. The means and covariances for the likelihoods should be stored in self.means and self.covariances. The learned priors are stored in self.priors.<br>predict takes inputs and computes the probability of each input being assigned to each class.<br>You can test your code by running debug_gcc.py. It provides simple test cases and feedback to help debug your code. Once you are confident with your implementation, run train_gcc.py on the three datasets mentioned above by modifying the dataset variable in the main block. This code trains a GCC model on the specified dataset, computes the test accuracy, and displays the Gaussian likelihoods with the training and test data.</p><p>Provide a brief answer (no more than 3 or 4 sentences) for each of the following questions in Questions.txt:</p><p>Does GCC perform well on generic_1? Why or why not?<br>Does GCC perform well on generic_2? Why or why not?<br>Does GCC perform well on generic_3? Why or why not?<br>If input feature vectors have length D, how many parameters do we need to learn for each Gaussian?<br>Suppose you decide to use Naive Bayes with GCC. In words, what would you have to change in your code? How many parameters would you need to learn for each Gaussian in this case?<br>Suppose certain elements of the input feature vectors are highly correlated. Why is this problematic for Naive Bayes?<br>How could you transform the data to mitigate this problem with Naive Bayes?<br>Q2. Multi-Line Regression with Expectation-Maximization<br>In Assignment 4 we fit a Gaussian mixture model (GMM) to data using the EM Algorithm. The mixture model provides a way to assign points to clusters in a probabilistic sense. That is, we compute the posterior probability that point i should be owned by (i.e., assigned to) the jth component of the mixture. Where K is the number of components in the mixture. Given the ownership probabilities, we then computed weighted means and covariances, the parameters of the Gaussian components. This works well for density estimation and clustering, but is actually much more general. To that end, here we’re going to consider the use of EM for parametric model fitting; i.e., a mixture of regressors.</p><p>Suppose you have a bunch of points in the plane, like those shown in the plot below. Normally you might not know how many lines are in any given dataset, but here it seems clear enough that you should be able to fit two lines. But to do this you need to figure out a way to determine which points belong to which line. And this is where the EM algorithm comes in, since we can use the posterior probability that a given point comes from a given line. This will allow us to simultaneously regress to multiple lines (not just two).</p><p>To find the model parameters we minimize the negative log likelihood with the added constraint that mixing probabilities sum to 1. For this we add a Lagrange multiplier.</p><p>We’ll treat the noise variance 2 as a hyper-parameter, and set it manually in the code.</p><p>The EM algorithm alternates between inferring the posterior over the assignment of points to lines in the E-step, and the estimation of the model parameters in the M-step. For the E-step, as with the GMM in A4, we’ll write the posterior ownership probability.</p><p>Written Part<br>The questions below ask you to derive the equations for the E-step and the M-step. Save your answers as written.pdf in the directory em_line_fitting. E.g., you could take pictures of written work on paper, or format electronically, e.g., with LateX.</p><p>Programming Part<br>Implement multi-line fitting using the EM algorithm described above. The starter code is in directory em_line_fitting. The associated methods are:</p><p>_fit: fits K linear models to training data. Each iteration contains the E-step and the M-step. The iteration terminates when there is negligible change in the ownership probabilities.<br>_e_step: computes the ownership probabilities for each data point.<br>_m_step: computes the mixing probabilities and the parameters of each of the linear models.<br>_visualize: visualizes training data with fitted lines and ownership probabilities for each point.<br>You will need to complete the methods _e_step and _m_step. The equations for these steps are given above. The starter code includes a way to specify initial conditions for the optimization; this includes the initial line parameters and the mixing probabilities.</p><p>You can run train_em_line_fitting.py to debug your code with pre-defined test cases (test_case = [i], where [i] = 0, 1, 2, 3). This script determines whether your learned model parameters, mixing probabilities, and ownership probabilities are correct. If you set visualize = True, this method will display at each iteration the current estimates of the fitted lines, along with a plot that shows, for each model, the ownership probability for each data point. Once you’re confident in the code, we’ll analyze the results.</p><p>The EM algorithm will find one of several local optima. Some are good, and some are not great. The chance of getting “stuck” in poor minima often depends on the initial guess and the value of the model standard deviation. To explore this, we’ve pre-specified several test cases, with different numbers of lines and values of . Run train_em_line_fitting.py for each test case, setting test_case to be 0 through 4. If you set test_case = False, you can play with the algorithm by manually changing the seed, stddev, num_lines.</p><p>When your code works correctly, the first four test cases should produce the following plots. In these plots, each component (line) and its associated ownership probabilities (the bar graph) have a unique colour.</p><p>Now, reflect on these estimates and how they change with each iteration as the model fit evolves from the initial guess to the final estimate. And provide brief answers (no more than 5 sentences) to the following questions in Questions.txt :</p><p>In test case 0, the two lines fit well. The ownership probabilities are either 0 or 1 near the right and left sides of the plot, but near 0.5 closer to the middle. Explain why this occurs and why it’s useful.<br>In test case 1, the lines do not fit the data well. Explain what might be the source of the problem in this case.<br>Test cases 2 and 3 fit two and three lines, but in both cases not all lines appear to fit the data well. Select one of these two test cases and explain what might be the source of the problem, making reference to the model variance and the ownership probabilities.</p>]]></content>
    
    <summary type="html">
    
      完成Machine Learning中关于Classification的练习题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Machine Learning" scheme="https://tk1307993.coding.me/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>CSCI1200-Jagged-Arrays</title>
    <link href="https://tk1307993.coding.me/CSCI1200-Jagged-Arrays.html"/>
    <id>https://tk1307993.coding.me/CSCI1200-Jagged-Arrays.html</id>
    <published>2022-10-26T03:27:29.000Z</published>
    <updated>2022-10-26T03:29:33.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment you will build a custom data structure named JaggedArray. A JaggedArray is a 1D array of n bins, and each bin stores a collection of elements of templated type T. Building this data structure will give you practice with pointers, dynamic array allocation and deallocation, and writing templated classes. The implementation of this data structure will involve writing one new class. You are not allowed to use any of the STL container classes in your implementation or use any additional classes or structs. Please read the entire handout before beginning your implementation. Also, be sure to review the Lecture 8 notes.</p><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>The JaggedArray class is found in many real-world applications where a variable number of elements are stored in a collection of bins. This data structure is helpful to ensure high performance for applications needing frequent read and write access to this organizational information.</p><p>For example, let’s consider a physical simulation with hundreds of ping pong balls bouncing around inside a box. We will need to calculate the collisions of the balls with the sides of the box, but also the collisions of the balls with each other. A naive, brute-force implementation will require consideration of all pairwise collisions - for n balls, this is n^2 !</p><p>A relatively straightforward optimization will instead consider the interaction of each ball with only its nearest k neighbors = k n total potential collisions (a great improvement for large n!). How do we efficiently find each ball’s nearest neighbors? If we divide space into a large grid of bins and sort all the balls into the bins, we can find the nearest neighbors of a particular ball by collecting the balls in the same bin (and the adjacent bins). How many balls are in each bin? Some bins are empty. Some bins have several or many balls. As the simulation progresses and the balls move around, balls move in and out of bins and the number of balls in each bin changes. A JaggedArray is an obvious choice for storing this data for efficient collision detection.</p><h3 id="The-Data-Structure"><a href="#The-Data-Structure" class="headerlink" title="The Data Structure"></a>The Data Structure</h3><p>The JaggedArray class you will implement has two fundamental representation modes: unpacked and packed. In the unpacked representation, the JaggedArray stores an array of integers containing the counts of how many elements are in each bin and an array of pointers to arrays that hold these elements. In the packed representation, the JaggedArray stores an array of offsets for the start of each bin. These offsets refer to a single large array that stores all of the elements grouped by bin but all packed into the same large array. We can convert a JaggedArray from unpacked to packed mode by calling the pack member function and similarly convert from packed to unpacked by calling unpack. Below is an illustration of both representations for a small example with 7 bins storing 6 total elements (unpacked on the left, packed on the right)</p><p>The JaggedArray stores elements of template type T. In the examples in this handout, T is type char. The representation consists of the six member variables presented in these diagrams and you should exactly follow this representation (variable names, types, and data). Depending on the mode (unpacked or packed) of the JaggedArray, two of the variables are set to NULL. The JaggedArray contains the expected accessor functions numElements, numBins, numElementsInBin, getElement, and isPacked and modifiers addElement, removeElement, and clear. See the provided main.cpp code for example usage and details on the arguments and return values for these functions.</p><p>In the packed version of the data structure, the first element in bin i is stored at the index stored in offsets[i]. The number of elements in the bin is equal to offsets[i+1] - offsets[i]. Except the last bin, which contains num_elements - offsets[i] elements.</p><h3 id="Modifying-the-Data-Structure"><a href="#Modifying-the-Data-Structure" class="headerlink" title="Modifying the Data Structure"></a>Modifying the Data Structure</h3><p>The JaggedArray can only be edited while in unpacked mode. The left diagram illustrates the necessary changes to the representation for the call addElement(3,’g’), which adds the element ‘g’ to bin 3 (the bins are indexed starting with 0). And the diagram on the right illustrates the changes to the representation for the subsequent call to removeElement(1,1) which removes the element in slot 1 (element ‘b’) from bin 1.</p><p>Note how the variables holding the total number of elements in the JaggedArray and the count of the elements for the specific bin are updated appropriately.</p><p>For our implementation we will always size each of the arrays to exactly contain the required information. This will ensure you get plenty of practice with proper allocation and de-allocation. When the new array is allocated, the necessary data from the old array is copied and then the old array is de-allocated.</p><p>Attempting to access the non-existent bins or elements (out-of-bounds indices) is an error. Similarly, attempting to edit a JaggedArray while the array is in packed mode is an error. Your program should check for these situations, and if a problem is detected, your program should print an appropriate warning message to std::cerr and call exit(1).</p><h3 id="Testing-Debugging-and-Printing"><a href="#Testing-Debugging-and-Printing" class="headerlink" title="Testing, Debugging, and Printing"></a>Testing, Debugging, and Printing</h3><p>We provide a main.cpp file with a wide variety of tests of your data structure. Some of these tests are initially commented out. We recommend you get your class working on the basic tests, and then uncomment the additional tests as you implement and debug the key functionality of the JaggedArray class. Study the provided test cases to understand what code triggers calls to your JaggedArray copy constructor, assignment operator, and destructor and verify that these functions are working correctly.</p><p>It is your responsibility to add additional test cases, including examples where the template class type T is something other than char. You must also implement a simple print function to help as you debug your class. Include examples of the use of this function in your new test cases. Your function should work for JaggedArrays containing char, int, and reasonably short strings. The print function does not need to work for more complex types. Please use the example output as a guide (we will grade this output by hand).</p><h3 id="Performance-Analysis"><a href="#Performance-Analysis" class="headerlink" title="Performance Analysis"></a>Performance Analysis</h3><p>The data structure for this assignment (intentionally) involves a lot of memory allocation &amp; deallocation. Certainly it is possible to revise this design for improved performance and efficiency or adapt the data structure to specific applications. For this assignment, please implement the data structure exactly as described.</p><p>In your README.txt file include the order notation for each of the JaggedArray member functions described above: numElements, numBins, numElementsInBin, getElement, isPacked, clear, addElement, removeElement, pack, unpack, and print and don’t forget the constructors, destructor, and assignment operator. For each function determine the performance for each of the representation modes (packed and unpacked), as appropriate. You will be graded on the order notation efficiency of your implementation, so carefully consider any significant implementation choices.</p><p>You should assume that calling new [] or delete [] on an array will take time proportional to the number of elements in the array. In your answers use the variables b = the number of bins, e = the number of elements, and k = the number of elements in the largest bin.</p><h3 id="Looking-for-Memory-Leaks"><a href="#Looking-for-Memory-Leaks" class="headerlink" title="Looking for Memory Leaks"></a>Looking for Memory Leaks</h3><p>To help verify that your data structure does not contain any memory leaks and that your destructor is correctly deleting everything, we include a batch test function that repeatedly allocates a JaggedArray, performs many operations, and then deallocates the data structure. To run the batch test case, specify 2 command line arguments, a file name (small.txt, medium.txt, or large.txt) and the number of times to process that file. If you don’t have any bugs or memory leaks, this code can be repeated indefinitely with no problems.</p><p>On Unix/Linux/OSX, open another shell and run the top command. While your program is running, watch the value of “RES” or “RPRVT” (resident memory) for your program. If your program is leaking memory, that number will continuously increase and your program will eventually crash. Alternately, on Windows, open the Task Manager (Ctrl-Shift-Esc). Select “View” “Select Columns” and check the box next to “Memory Usage”. View the “Processes” tab. Now when your program is running, watch the value of “Mem Usage” for your program (it may help to sort the programs alphabetically by clicking on the “Image Name” column). If your program is leaking memory, that number will continuously increase.</p><h3 id="Memory-Debuggers"><a href="#Memory-Debuggers" class="headerlink" title="Memory Debuggers"></a>Memory Debuggers</h3><p>We also recommend using a memory debugging tool to find errors. Information on installation and use of the memory debuggers “Dr. Memory” (available for Linux/MacOSX/Windows) and “Valgrind” (available for Linux/OSX) is presented on the course webpage.</p><p>The homework submission server is configured to run your code with Dr. Memory to search for memory problems. Your program must be memory error free to receive full credit.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Do all of your work in a new folder named hw3 inside of your Data Structures homeworks directory. Use good coding style when you design and implement your program. Be sure to make up new test cases and don’t forget to comment your code! Please use the provided template README.txt file for any notes you want the grader to read.</p>]]></content>
    
    <summary type="html">
    
      实现Jagged Array, 一种不定长数组。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSE510-Database-Management-System</title>
    <link href="https://tk1307993.coding.me/CSE510-Database-Management-System.html"/>
    <id>https://tk1307993.coding.me/CSE510-Database-Management-System.html</id>
    <published>2022-10-22T07:27:22.000Z</published>
    <updated>2022-10-22T07:31:57.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>The version of the MiniBase I have distributed to you implements various modules of a relational database management system. Our goal this semester is to use these modules of MiniBase as building blocks for implementing a user preference sensitive DBMS to support e-commerce applications:</p><p>S. Borzsony, D. Kossmann and K. Stocker, “The Skyline operator,” Proceedings 17th International Conference on Data Engineering, Heidelberg, Germany, 2001, pp. 421-430, doi: 10.1109/ICDE.2001.914855.<br>Chomicki J., Godfrey P., Gryz J., Liang D. (2005) Skyline with Presorting: Theory and Optimizations. In: Kopotek M.A., Wierzcho S.T., Trojanowski K. (eds) Intelligent Information Processing and Web Mining. Advances in Soft Computing, vol 31. Springer, Berlin, Heidelberg.<br>K.L. Tan, P.K. Eng and B. C. Ooi. “Efficient Progressive Skyline Computation.” 27th Int. Conference on Very Large Data Bases (VLDB), Roma, Italy, 301-310, September 2001.</p><h3 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h3><p>The following is a list of tasks that you need to perform for this phase of the project: Note that getting these working may involve other changes to various modules not described below.</p><h4 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h4><p>Create a new tuple comparison method, Dominates,<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> Dominates(Tuple t1,</span><br><span class="line">                         AttrType[] type1,</span><br><span class="line">                         Tuple t2,</span><br><span class="line">                         AttrType[] type2,</span><br><span class="line">                         <span class="keyword">short</span> len_in,</span><br><span class="line">                         <span class="keyword">short</span>[] str_sizes,</span><br><span class="line">                         <span class="keyword">int</span>[] pref_list,</span><br><span class="line">                         <span class="keyword">int</span> pref_list_length)</span><br></pre></td></tr></table></figure></p><p>which returns</p><p>1 if t1 dominates t2 in the list of preference attributes<br>0 otherwise.<br>Create a new tuple comparison method, CompareTupleWithTuplePref,<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> CompareTupleWithTuplePref(Tuple t1,</span><br><span class="line">                                         AttrType[] type1,</span><br><span class="line">                                         Tuple t2,</span><br><span class="line">                                         AttrType[] type2,</span><br><span class="line">                                         <span class="keyword">short</span> len_in,</span><br><span class="line">                                         <span class="keyword">short</span>[] str_sizes,</span><br><span class="line">                                         <span class="keyword">int</span>[] pref_list,</span><br><span class="line">                                         <span class="keyword">int</span> pref_list_length)</span><br></pre></td></tr></table></figure></p><p>which returns</p><p>0 if they are equal<br>1 if the tuple, t1, is greater<br>-1 if the tuple, t1, is smaller<br>on the “sum” of their preference attributes.</p><h4 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h4><p>Modify Sort in such a way that the tuples are sorted according to the new CompareTupleWithTuplePref on their preference attributes:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SortPref(AttrType[] in,</span><br><span class="line">         <span class="keyword">short</span> len_in,</span><br><span class="line">         <span class="keyword">short</span>[] str_sizes,</span><br><span class="line">         Iterator am,</span><br><span class="line">         TupleOrder sort_order,</span><br><span class="line">         <span class="keyword">int</span>[] pref_list,</span><br><span class="line">         <span class="keyword">int</span> pref_list_length,</span><br><span class="line">         <span class="keyword">int</span> n_pages)</span><br></pre></td></tr></table></figure><p>Here, pref list is the list of attributes that are going to be used for preference sorting, pref list length is the number of preference attributes, and n pages is the number of buffer frames (each of the size of a single disk page) allocated for this operation.</p><h4 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h4><p>Implement NestedLoopsSky BlockNestedLoopsSky and SortFirstSky iterators, which compute skylines</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NestedLoopsSky(AttrType[] in1, <span class="built_in">int</span> len_in1, short[] t1_str_sizes,</span><br><span class="line">               <span class="built_in">Iterator</span> am1, java.lang.<span class="built_in">String</span></span><br><span class="line">               relationName, <span class="built_in">int</span>[] pref_list, <span class="built_in">int</span> pref_list_length,</span><br><span class="line">               <span class="built_in">int</span> n_pages)</span><br><span class="line"></span><br><span class="line">BlockNestedLoopsSky(AttrType[] in1, <span class="built_in">int</span> len_in1, short[] t1_str_sizes,</span><br><span class="line">                    <span class="built_in">Iterator</span> am1, java.lang.<span class="built_in">String</span></span><br><span class="line">                    relationName, <span class="built_in">int</span>[] pref_list, <span class="built_in">int</span> pref_list_length,</span><br><span class="line">                    <span class="built_in">int</span> n_pages)</span><br><span class="line"></span><br><span class="line">SortFirstSky(AttrType[] in1, <span class="built_in">int</span> len_in1, short[] t1_str_sizes,</span><br><span class="line">             <span class="built_in">Iterator</span> am1, java.lang.<span class="built_in">String</span></span><br><span class="line">             relationName, <span class="built_in">int</span>[] pref_list, <span class="built_in">int</span> pref_list_length,</span><br><span class="line">             <span class="built_in">int</span> n_pages)</span><br></pre></td></tr></table></figure><h4 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h4><p>Implement a BTreeSky iterator which computes skylines using BTrees on individual preference attributes.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">BTreeSky</span>(<span class="selector-tag">AttrType</span><span class="selector-attr">[]</span> <span class="selector-tag">in1</span>, <span class="selector-tag">int</span> <span class="selector-tag">len_in1</span>, <span class="selector-tag">short</span><span class="selector-attr">[]</span> <span class="selector-tag">t1_str_sizes</span>,</span><br><span class="line">         <span class="selector-tag">Iterator</span> <span class="selector-tag">am1</span>, <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.String</span></span><br><span class="line">         <span class="selector-tag">relationName</span>, <span class="selector-tag">int</span><span class="selector-attr">[]</span> <span class="selector-tag">pref_list</span>, <span class="selector-tag">int</span><span class="selector-attr">[]</span> <span class="selector-tag">pref_list_length</span>,</span><br><span class="line">         <span class="selector-tag">IndexFile</span><span class="selector-attr">[]</span> <span class="selector-tag">index_file_list</span>,</span><br><span class="line">         <span class="selector-tag">int</span> <span class="selector-tag">n_pages</span>)</span><br></pre></td></tr></table></figure><p>Related publication [Borzsonyi et al. 2001]. This operator will assume that the BTree indexes on the preference attributes have already been created.</p><h4 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h4><p>Implement a BTreeSortedSky iterator which computes skylines using a combined BTree on preference attributes.<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BTreeSortedSky(AttrType[] in1, <span class="built_in">int</span> len_in1, short[] t1_str_sizes, <span class="built_in">int</span></span><br><span class="line">               <span class="built_in">Iterator</span> am1, java.lang.<span class="built_in">String</span></span><br><span class="line">               relationName, <span class="built_in">int</span>[] pref_list, <span class="built_in">int</span>[]</span><br><span class="line">               pref_list_length, IndexFile index_file,</span><br><span class="line">               <span class="built_in">int</span> n_pages)</span><br></pre></td></tr></table></figure></p><h4 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h4><p>Implement a program which, given a data file [format described below], stores and indexes the data in<br>Minibase. The program should then let the user specify attributes that will be used for skyline computation and the number of memory pages available for the operation.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input data format:</span> <span class="comment"># of attributes in the first line, followed by rows of values between 0.0 and 1.0. For example</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0.4</span> <span class="number">0.6</span> <span class="number">0.2</span> <span class="number">0.8</span></span><br><span class="line"><span class="number">0.3</span> <span class="number">0.4</span> <span class="number">0.2</span> <span class="number">0.4</span></span><br><span class="line"><span class="string">.....</span> <span class="string">or</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0.100</span> <span class="number">0.345</span> <span class="number">0.3456</span></span><br><span class="line"><span class="number">0.2345</span> <span class="number">0.222</span> <span class="number">0.347</span></span><br><span class="line"><span class="string">....</span></span><br></pre></td></tr></table></figure></p><p>The program should output both the resulting skylines and the number of read and write pages accesses during the operation (see Task 7).</p><p>Note: You may need to modify the Minibase BTree index structure to support creation of a combined BTree index on preference attributes.</p><p>Note: The operators that you are implementing cannot use more buffer frames than specified in the input.</p><h4 id="Task-7"><a href="#Task-7" class="headerlink" title="Task 7"></a>Task 7</h4><p>Modify Minibase disk manager in such a way that counts the number of reads and writes. One way to do this is as follows:</p><p>First create add pcounter.java, where<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> diskmgr;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PCounter</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> rcounter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> wcounter;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rcounter = <span class="number">0</span>;</span><br><span class="line">wcounter = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rcounter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">wcounter++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>into your code.</p><p>Then, modify the read_page() and write_page() methods of the diskmgr to increment the appropriate counter upon a disk read and write request.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You will be provided with a sample data set. You have to return the following before the deadline:<br>Your source code properly commented, tared and ziped.<br>The output of your program with the provided test data and the driver.<br>A report which describes who did what. This will be taken very seriously! So, be honest. Be prepared to explain on demand (not only your part) but the entire set of modifications. See the report specifications.<br>A confidential document (individually submitted by each group member) which rates group members’ contributions out of 10 (10 best; 0 worst). Please provide a brief explanation for each group member.</p>]]></content>
    
    <summary type="html">
    
      按照要求实现Database Management System中的功能。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>CSCI1200-DVD-Preference-Lists</title>
    <link href="https://tk1307993.coding.me/CSCI1200-DVD-Preference-Lists.html"/>
    <id>https://tk1307993.coding.me/CSCI1200-DVD-Preference-Lists.html</id>
    <published>2022-10-21T01:14:42.000Z</published>
    <updated>2022-10-21T01:16:12.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment you will write a program to manage the physical DVD media inventory of Netflix and ship DVDs to customers according to their specified movie preferences. Your program will handle several different operations: adding a number of copies of a DVD to the inventory, signing up a new customer with their initial preferences, shipping DVDs to the customers, restocking DVDs as they are returned by customers, modifying the customer preference lists, and printing information about specific DVDs and customers. We provide the code to parse an input file that specifies these operations. Furthermore, we provide the core implementation of the DVD shipping algorithm. You will use the STL list class heavily in your implementation of this program. Please carefully read the entire assignment before beginning your implementation.</p><p>The input for the program will come from a file and the output will also go to a file. These file names are specified by command-line arguments. Here’s an example of how your program will be called:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">preferences</span><span class="selector-class">.exe</span> <span class="selector-tag">requests</span><span class="selector-class">.txt</span> <span class="selector-tag">results</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>The form of the input is relatively straightforward. Each request begins with a keyword token. There are eight different requests, described below. You may assume that the input file strictly follows this format (i.e., you don’t need to worry about error checking the formatting). Here is a sample input file and the corresponding output file:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">requests small.txt                      results small.txt</span><br><span class="line">dvd <span class="string">"Into the Wild"</span> 3                   3 copies of <span class="string">"Into the Wild"</span> added</span><br><span class="line">dvd <span class="string">"Forrest Gump"</span> 2                    2 copies of <span class="string">"Forrest Gump"</span> added</span><br><span class="line">dvd <span class="string">"Gone with the Wind"</span> 2              2 copies of <span class="string">"Gone with the Wind"</span> added</span><br><span class="line">dvd <span class="string">"Raiders of the Lost Ark"</span> 1         1 copy of <span class="string">"Raiders of the Lost Ark"</span> added</span><br><span class="line">dvd <span class="string">"Toy Story"</span> 3                       3 copies of <span class="string">"Toy Story"</span> added</span><br><span class="line">customer Carol Adams 4                  new customer: Carol Adams</span><br><span class="line">  <span class="string">"Raiders of the Lost Ark"</span>             new customer: Kim Smith</span><br><span class="line">  <span class="string">"Gone with the Wind"</span>                  new customer: Wayne Evans</span><br><span class="line">  <span class="string">"Forrest Gump"</span>                        Ship DVDs</span><br><span class="line">  <span class="string">"Into the Wild"</span>                         Carol Adams receives <span class="string">"Raiders of the Lost Ark"</span></span><br><span class="line">customer Kim Smith 3                      Kim Smith receives <span class="string">"Into the Wild"</span></span><br><span class="line">  <span class="string">"Raiders of the Lost Ark"</span>               Carol Adams receives <span class="string">"Gone with the Wind"</span></span><br><span class="line">  <span class="string">"Into the Wild"</span>                         Kim Smith receives <span class="string">"Gone with the Wind"</span></span><br><span class="line">  <span class="string">"Gone with the Wind"</span>                    Carol Adams receives <span class="string">"Forrest Gump"</span></span><br><span class="line">customer Wayne Evans 1                  Carol Adams returns <span class="string">"Forrest Gump"</span></span><br><span class="line">  <span class="string">"Raiders of the Lost Ark"</span>             Kim Smith returns <span class="string">"Into the Wild"</span></span><br><span class="line">ship                                    Ship DVDs</span><br><span class="line">return_newest Carol Adams                 Carol Adams receives <span class="string">"Into the Wild"</span></span><br><span class="line">return_oldest Kim Smith                 Carol Adams returns <span class="string">"Into the Wild"</span></span><br><span class="line">add_preference Carol Adams <span class="string">"Toy Story"</span>  Ship DVDs</span><br><span class="line">ship                                      Carol Adams receives <span class="string">"Toy Story"</span></span><br><span class="line">return_newest Carol Adams               Carol Adams has 3 movies:</span><br><span class="line">ship                                      <span class="string">"Raiders of the Lost Ark"</span></span><br><span class="line">print_customer Carol Adams                <span class="string">"Gone with the Wind"</span></span><br><span class="line">print_customer Wayne Evans                <span class="string">"Toy Story"</span></span><br><span class="line">print_dvd <span class="string">"Toy Story"</span>                   Wayne Evans has <span class="literal">no</span> movies</span><br><span class="line">print_dvd <span class="string">"Gone with the Wind"</span>            preference list:</span><br><span class="line">                                            <span class="string">"Raiders of the Lost Ark"</span></span><br><span class="line">                                        <span class="string">"Toy Story"</span>:</span><br><span class="line">                                          1 copy checked out <span class="keyword">and</span> 2 copies available</span><br><span class="line">                                        <span class="string">"Gone with the Wind"</span>:</span><br><span class="line">                                          2 copies checked out</span><br></pre></td></tr></table></figure></p><p>And here are the details on each command:</p><p>dvd “movie title” copies Adds the specified number of copies of this movie DVD to the inventory. Movie titles may consist of one or more words, so they are always placed in double quotes. If the movie is already in the inventory, simply add more copies to the record.<br>customer first_name last_name num_movies “1st movie” “2nd movie” … “nth movie” Each customer is described by two strings, their first and last names. The name is followed by an integer, the number of movies in their initial ranking, and then the titles of those movies in preference order. Your program should print a warning message if a customer of this name is already stored in the system or if the movie preference list contains duplicates, or includes movies not in the DVD inventory.<br>add_preference first_name last_name “movie_title” This command allows the customer to add an additional movie to their preference list. The new request is added at the end of their preference list. A customer is allowed to request a movie they have already been shipped and returned. Your program should print a warning message if the customer already has this movie in their preference list, if no customer with this name exists in the system, or the movie is not in the DVD inventory.<br>ship This command simulates the shipment algorithm that is run once a day. The customers are organized by priority to receive a new movie. Higher priority goes to customers who have been waiting longer since they last received a new movie. The customers are examined in priority order. For each customer, if they do not already hold three movies (Netflix’s original cap on the number of movies a customer could hold at one time) and they have at least one movie in their preference list, the algorithm attempts to ship them a movie. The algorithm looks through their preference list in order, from first choice down to last choice and ships the first movie that has at least one copy available (not held by another customer). If the customer is shipped a movie, the customer priority queue is rearranged to put this customer at the back. If none of their requested movies are available, the customer stays where they are in the queue. The algorithm repeats until each customer either has three movies or no copies of their requested movies are available.<br>return_oldest first_name last_name<br>return_newest first_name last_name These two commands examine the movies currently held by the specified customer and return either the DVD they have held the longest (oldest), or the DVD they received most recently (newest). When a DVD is returned, that copy is again available to be shipped out to another customer. Your program should print a warning message if no customer with this name exists in the system, or if the specified customer does not currently have any DVDs.<br>print_customer first_name last_name Prints the DVDs currently held by the specified customer (in order from oldest to newest) and prints the DVDs remaining in the customer’s preference list (from first choice through last). A warning message is printed if no customer by this name exists. For extra credit: When the “–analysis” command line argument is specified, customer satisfaction information for this customer is printed.<br>print_dvd “movie title” For the specified movie, prints the number of available copies and the number of copies currently held by customers. A warning message is printed if no movie with this name is in the inventory. For extra credit: When the optional “–analysis” command line argument is specified, rental information about this movie is printed.<br>All of the normal output of the program, as well as warning messages about invalid requests, are saved to the output file specified on the command line. Note: Warning messages do not cause the program to crash or exit.</p><p>Extra Credit<br>For extra credit, analyze the performance of the algorithm in satisfying customer requests. For example: How many movies were shipped to each customer? What percentage of DVD shipments were the customer’s first choice? How many days was each customer waiting while holding fewer than 3 DVDs, with at least one DVD on their list, but no DVD was shipped to them? How many times was each movie title shipped?</p><p>How many people request each movie title? Use the optional argument “–analysis” to specify that this additional information should be printed with each customer and DVD. Your code should also summarize the overall performance of the algorithm after processing the last request in the input file.</p><p>Discuss in your README.txt an alternate algorithm that you believe would better satisfy the customer demand. Implement your new algorithm and run the same customer satisfaction analysis. Paste the summary output information into your README.txt file and discuss your conclusions. Your new shipping algorithm should run when the optional command line argument “–improved” is specified:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">preferences</span><span class="selector-class">.exe</span> <span class="selector-tag">requests</span><span class="selector-class">.txt</span> <span class="selector-tag">results</span><span class="selector-class">.txt</span> <span class="selector-tag">--analysis</span> <span class="selector-tag">--improved</span></span><br></pre></td></tr></table></figure></p><h3 id="Assignment-Requirements-Hints-and-Suggestions"><a href="#Assignment-Requirements-Hints-and-Suggestions" class="headerlink" title="Assignment Requirements, Hints, and Suggestions"></a>Assignment Requirements, Hints, and Suggestions</h3><p>You may not use vectors or arrays for this assignment. Use STL lists instead. You may not use maps, or sets, or things we haven’t seen in class yet.<br>We have provided a partial implementation of this program, focusing on input parsing and the DVD shipping algorithm. There are member function calls to our versions of the DVD and Customer classes, so you can deduce how some of the member functions in our solution work. You are strongly encouraged to examine this code carefully and follow the interfaces suggested in the provided code.<br>In your README.txt file, provide an order notation analysis of each operation assuming d different movie DVD titles, an average or maximum of k copies of each DVD, c customers, and an average or maximum of p movies ranked on each customer’s preference list.<br>Do all of your work in a new folder named hw4 inside of your homeworks directory. Use good coding style when you design and implement your program. Be sure to make up new test cases to fully test your program and don’t forget to comment your code! Use the template README.txt to list your collaborators, your time spent on the assignment, and any notes you want the grader to read. You must do this assignment on your own, as described in the “Collaboration Policy &amp; Academic Integrity” handout. If you did discuss the problem or error messages, etc. with anyone, please list their names in your README.txt file.</p>]]></content>
    
    <summary type="html">
    
      练习list的使用方法，编写DVD租赁店铺程序。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CSC108-Phrase-Puzzler</title>
    <link href="https://tk1307993.coding.me/CSC108-Phrase-Puzzler.html"/>
    <id>https://tk1307993.coding.me/CSC108-Phrase-Puzzler.html</id>
    <published>2022-10-18T03:36:16.000Z</published>
    <updated>2022-10-18T00:45:43.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This handout explains the problem you are to solve, and the tasks you need to complete for the assignment. Please read it carefully.</p><h3 id="Goals-of-this-Assignment"><a href="#Goals-of-this-Assignment" class="headerlink" title="Goals of this Assignment"></a>Goals of this Assignment</h3><p>Use the Function Design Recipe to plan, implement, and test functions.<br>Write function bodies using variables, numeric types, strings, and conditional statements. (You can do this whole assignment with only the concepts from Weeks 1, 2, and 3 of the course.)<br>Learn to use Python 3, Wing 101, provided starter code, a checker module, and other tools.</p><h3 id="Phrase-Puzzler"><a href="#Phrase-Puzzler" class="headerlink" title="Phrase Puzzler"></a>Phrase Puzzler</h3><p>In this assignment, you’ll be writing a Phrase Puzzler game. To see how the game is played, please watch the demo below.</p><p>The video demonstrates playing the one-player version of the game, but your code will eventually also have a two-player human vs. human version and also a human vs. computer version.</p><p>If you have trouble viewing the video above, you can click here to watch it on MS Stream (Links to an external site.).</p><h3 id="Starter-code"><a href="#Starter-code" class="headerlink" title="Starter code"></a>Starter code</h3><p>For this assignment, we are giving you some files, including Python starter code files. Please download the Assignment 1 filesand extract/unzip the zip file.</p><p>There are three starter code Python files, two sample text input files, and a Python program that helps you check (not fully test!) your solutions for Python style violations:<br>puzzler_functions.py<br>This file contains constants for you to use in your code, a provided function (is_game_over), and the complete docstrings (but not the function bodies) for the first two functions you are to write. Note that we have provided extra docstring examples for these functions to help you, however you only need to write two for your own docstrings.<br>You can find the full table of functions to implement below. Your job is to complete this file.<br>puzzler.py<br>This is the main program. You will not modify this file (with one exception stated in the next section), and you will not submit it. Rather, you will run this file to play the Phrase Puzzler game. Please note that puzzler.py depends on functions you will write in puzzler_functions.py, so this program won’t run properly until you’ve implemented the functions.<br>puzzles_small.txt and puzzles.txt<br>Each of these files contains puzzle phrases used by puzzler.py to select a puzzle for a game and also to provide a pool of phrases that the computer player “knows”. You may want to use puzzles_small.txt when you are in the beginning of developing and debugging your solution, and puzzles.txt to play the game.<br>To change which of these files you are using, edit the string that the constant DATA_FILE refers to inpuzzler.py. This is the only change you should make topuzzler.py.<br>a1_checker.py<br>This is a checker program that you should use to check your code. See below for more information about a1_checker.py.<br>There are some other files and folders in the zip file. You do not need to do anything with them, other than leave them where they are.</p><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><p>Constants are special variables whose values should not change once assigned. A different naming convention (uppercase pothole) is used for constants, so that programmers know to not change their values. For example, in the starter code, the constant CONSONANT_POINTS is assigned the value 1 at the beginning of the module and the value of CONSONANT_POINTS should never change in your code. When writing your code, if you need to use the number of points awarded for a guessed consonant, you should use CONSONANT_POINTS. The same goes for the other constant values.</p><p>Using constants simplifies code modifications and improves readability and changeability. For example, if we later decide to use a different character to represent a hidden index in our puzzle, we would only have to make a change in one place (the HIDDEN assignment statement), rather than throughout the program. This also makes our code more readable – whether we use’^’or any other character to represent a hidden index, we write our code using the constant HIDDEN so it is clear to the reader what we mean.</p><h3 id="More-about-the-Phrase-Puzzler-program"><a href="#More-about-the-Phrase-Puzzler-program" class="headerlink" title="More about the Phrase Puzzler program:"></a>More about the Phrase Puzzler program:</h3><p>Two strings are used to represent information about a Phrase Puzzler puzzle:<br>puzzleis made up of alphabetic and non-alphabetic characters (e.g., spaces, punctuation, and digits). An example puzzle string is ‘e-mail inbox’.<br>view is the current view of the puzzle as seen by the players. In it, the alphabetic characters are either displayed (if they have been revealed) or hidden (using a special character (a caret’^’by default), if they have not yet been revealed). Non-alphabetic characters (spaces, punctuation, and digits) are always displayed. For example, at the beginning of the game, the view string for the puzzle above would be (with a caret to represent a hidden character):’^-^^^^ ^^^^^’.<br>As the game progresses and players guess letters to be revealed, the view is updated. Continuing with the example above, if the player guesses “m”, the view becomes’^-m^^^ ^^^^^’and then if “i” is guessed, it becomes’^-m^i^ i^^^^’.<br>There are three types of games that your program will play: human, human vs human, and human vs computer. We will use the constants HUMAN,HUMAN_HUMAN, and HUMAN_COMPUTER respectively, to represent the type of game being played.<br>When a player guesses a consonant, each occurrence of that consonant in the puzzle earns a certain number points for that player: the value of the constant CONSONANT_POINTS. If a player correctly guesses a consonant, they play again in the next turn. If the guess is incorrect, the turn goes to the next player (in a two-player game).<br>Players have to pay to guess a vowel. The cost does not depend on the number of occurrences of the vowel, and is always equal to the value of the constant VOWEL_PRICE. Thus, guessing a vowel decreases the player’s points. A player is not allowed to guess a vowel if they do not have sufficient points to pay for it. After paying to guess a vowel, the player plays again if the vowel is in the puzzle. If the guessed vowel is not in the puzzle, the turn goes to the next player (in a two-player game).<br>When a player solves the puzzle, CONSONANT_BONUS bonus points are added to their score for each occurrence of a consonant that is still HIDDEN.<br>All puzzles are always lower-case. That is, the puzzles will not contain any upper-case letters.<br>You should read the constants defined at the top of puzzler_functions.py carefully to understand the purpose of each defined constant. You must use these constants in your code and NOT the literal values. For example, you must use HIDDEN instead of’^’.</p><h3 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do"></a>What to do</h3><p>In the starter code file puzzler_functions.py, complete the following function definitions. Use the Function Design Recipe that you have been learning in this course. We have included the type contracts in the following table; please read through the table to understand how the functions will be used.<br>We will be evaluating your docstrings in addition to your code. Please include two examples in your docstrings. You will need to paraphrase the full descriptions of the functions to get an appropriate docstring description.</p><h3 id="Using-Constants"><a href="#Using-Constants" class="headerlink" title="Using Constants"></a>Using Constants</h3><p>As we discuss in section Constants above, your code should make use of the provided constants. If the value of one of those constants were changed, and your program rerun, your functions should work with those new values.</p><p>For example, if CONSONANT_POINTS were changed, then your functions should work according to the new number of bonus points that should be earned for guessing a consonant. Using constants in your code means that this happens automatically.</p><p>Your docstring examples should reflect the given values of the constants in the provided starter code, and do not need to change.</p><h3 id="Preconditions"><a href="#Preconditions" class="headerlink" title="Preconditions"></a>Preconditions</h3><p>You can assume that your functions will be called with arguments as described in the table above. For example, you can assume that is_human will only be passed one of the three constants representing the type of game being played.<br>If this hand out states that a parameter represents a particular value, then you can assume that will be the case and you do not need to state it as a precondition.</p><h3 id="No-Input-or-Output"><a href="#No-Input-or-Output" class="headerlink" title="No Input or Output"></a>No Input or Output</h3><p>Your puzzler_functions.py file should contain the starter code, plus the function definitions specified above. puzzler_functions.py must not include any calls to the print and input functions. Do not add any import statements. Also, do not include any function calls or other code outside of the function definitions.</p><h3 id="How-should-you-test-whether-your-code-works"><a href="#How-should-you-test-whether-your-code-works" class="headerlink" title="How should you test whether your code works"></a>How should you test whether your code works</h3><p>First, run the checker and review ALL output you may need to scroll. You should also test each function individually by writing code to verify your functions in the Python shell. For example, after defining functionis_human, you might call it from the shell (e.g.,is_human(‘Player One’, ‘HC’)) to check whether it returns the right value (True). One call usually isn’t enough to thoroughly test the function for example, we should also testis_human(‘Player Two’, ‘HC’) where it must return False.</p><h3 id="Running-the-checker-program-on-Markus"><a href="#Running-the-checker-program-on-Markus" class="headerlink" title="Running the checker program on Markus"></a>Running the checker program on Markus</h3><p>In addition to running the checker program on your own computer, run the checker on MarkUs as well. You will be able to run the checker program on MarkUs once every 12 hours (note: we may have to revert to every 24 hours if MarkUs has any issues handling every 12 hours). This can help to identify issues such as uploading the incorrect file.</p><p>First, submit your work on MarkUs. Next, click on the “Automated Testing” tab and then click on “Run Tests”. Wait for a minute or so, then refresh the webpage. Once the tests have finished running, you’ll see results for the Style Checker and Type Checker components of the checker program (see both the Automated Testing tab and results files under the Submissions tab). Note that these are not actually marks – just the checker results. This is the same checker that we have provided to you in the starter code. If there are errors, edit your code, run the checker program again on your own machine to check that the problems are resolved, resubmit your assignment on MarkUs, and (if time permits) after the 24 hour period has elapsed, rerun the checker on MarkUs.</p>]]></content>
    
    <summary type="html">
    
      完善一个Puzzler游戏，补全函数。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>CS345-Blockchain</title>
    <link href="https://tk1307993.coding.me/CS345-Blockchain.html"/>
    <id>https://tk1307993.coding.me/CS345-Blockchain.html</id>
    <published>2022-10-14T03:36:16.000Z</published>
    <updated>2022-10-14T03:37:36.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>In this lab we are going to get an old block from the BitCoin block chain and demonstrate how any changes would be caught by the BitCoin network.</p><p>Connect to a peer in the P2P BitCoin network and get the block number that corresponds to your SU<br>ID number (your number modulo 650000).<br>Display the transactions in the block.<br>Have your program manipulate one of the transactions in the block to change its output account, then fix up the block to correctly represent this modified data (fix the merkle-tree hashes, etc.).<br>Then show with a program-generated report how the hash of the block has changed and the ways in which this block would be rejected by peers in the network.<br>Program written in Python 3 with no use of publicly available BitCoin libraries (except as shown below).<br>Use TCP/IP to communicate with a full node in the network.<br>Submit the program in the usual way on cs1 , all in one file,<br>Start by reading about blockchains in general, the original paper the developer documentation (<a href="https://bitcoin.org/bitcoin.pdf" target="_blank" rel="noopener">https://bitcoin.org/bitcoin.pdf</a>) , and (<a href="https://bitcoin.org/en/developer-reference" target="_blank" rel="noopener">https://bitcoin.org/en/developer-reference</a>) .</p><h3 id="Getting-Connected"><a href="#Getting-Connected" class="headerlink" title="Getting Connected"></a>Getting Connected</h3><p>To get a list of bitcoin nodes, use makeseeds (<a href="https://github.com/bitcoin/bitcoin/tree/master/contrib/seeds" target="_blank" rel="noopener">https://github.com/bitcoin/bitcoin/tree/master/contrib/seeds</a>) . You may need to install dnspython for this to work (</p><p>[NOTE: On Windows, the command is usually python and on a Mac python3 . The -W directive is to get around their use of a deprecated method in the DNS resolver library. The process can take 5 minutes or more.]</p><p>Pick nodes from that are not onion nodes (<a href="https://en.wikipedia.org/wiki/Onion_routing" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Onion_routing</a>) and just choose one at random that is currently working. You may have to try several before you get a working node. You can leave the host you are using hard-coded in your submitted program.</p><h3 id="Guidance"><a href="#Guidance" class="headerlink" title="Guidance"></a>Guidance</h3><p>Here is the beginning dialog I recorded with one of the BitCoin peers:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">sending MESSAGE</span><br><span class="line">(110) f9beb4d976657273696f6e0000000000560000003b9840b27f11010000000000000000007833d25d0000000001000000000000000000000000000000<span class="built_in">..</span>.</span><br><span class="line">  HEADER</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">    f9beb4d9                         MAGIC</span><br><span class="line">    76657273696f6e0000000000         COMMAND: version</span><br><span class="line">    56000000                         PAYLOAD size: 86</span><br><span class="line">    3b9840b2                         checksum (verified)</span><br><span class="line">  VERSION</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">    7f110100                         version 70015</span><br><span class="line">    0000000000000000                 my services</span><br><span class="line">      7833d25d00000000                 epoch time Mon, 18 Nov 2019 06:00:24 GMT</span><br><span class="line">    0100000000000000                 your services</span><br><span class="line">    00000000000000000000ffff5c3fc0d1 your host 92.63.192.209</span><br><span class="line">    8d20                             your<span class="built_in"> port </span>8333</span><br><span class="line">    0000000000000000                 my services (AGAIN)</span><br><span class="line">    00000000000000000000FFFF0A000048 my host 10.0.0.72</span><br><span class="line">    9ee8                             my<span class="built_in"> port </span>59550</span><br><span class="line">    0000000000000000                 nonce</span><br><span class="line">    00                              <span class="built_in"> user </span>AGENT size 0</span><br><span class="line">                                    <span class="built_in"> user </span>AGENT <span class="string">''</span></span><br><span class="line">    00000000                         START height 0</span><br><span class="line">    00                               RELAY <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">received MESSAGE</span><br><span class="line">(126) f9beb4d976657273696f6e000000000066000000c6d922107f1101000d040000000000007833d25d0000000000000000000000000000000000000000<span class="built_in">..</span>.</span><br><span class="line">  HEADER</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">    f9beb4d9                         MAGIC</span><br><span class="line">    76657273696f6e0000000000         COMMAND: version</span><br><span class="line">    66000000                         PAYLOAD size: 102</span><br><span class="line">    c6d92210                         checksum (verified)</span><br><span class="line">  VERSION</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">    7f110100                         version 70015</span><br><span class="line">    0d04000000000000                 my services</span><br><span class="line">    7833d25d00000000                 epoch time Mon, 18 Nov 2019 06:00:24 GMT</span><br><span class="line">    0000000000000000                 your services</span><br><span class="line">    00000000000000000000ffff4961e4ed your host 73.97.228.237</span><br><span class="line">    e89e                             your<span class="built_in"> port </span>40680</span><br><span class="line">    0d04000000000000                 my services (AGAIN)</span><br><span class="line">    00000000000000000000000000000000 my host 0.0.0.0</span><br><span class="line">    0000                             my<span class="built_in"> port </span>0</span><br><span class="line">    C1F685008A419236                 nonce</span><br><span class="line">    10                              <span class="built_in"> user </span>AGENT size 16</span><br><span class="line">    2F5361746F7368693A302E31382E302F<span class="built_in"> user </span>AGENT <span class="string">'/SATOSHI:0.18.0/'</span></span><br><span class="line">    A4380900                         START height 604324</span><br><span class="line">    01                               RELAY <span class="literal">True</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      搭建开源BitCoin节点，完成实验内容。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
</feed>
