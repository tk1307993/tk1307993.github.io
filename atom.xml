<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-05-02T09:13:47.031Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C代写：COMP20005-Path-Planning</title>
    <link href="https://tk1307993.coding.me/COMP20005-Path-Planning.html"/>
    <id>https://tk1307993.coding.me/COMP20005-Path-Planning.html</id>
    <published>2019-05-02T09:10:56.000Z</published>
    <updated>2019-05-02T09:13:47.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>In this project you will demonstrate your understanding of structures and arrays of structures, and will develop a computational solution for a non-trivial problem. You are also expected to make extensive use of functions; and to demonstrate that you have adopted a clear and elegant programming style. You will find it difficult to create a working solution unless you plan your program carefully in advance, and develop it incrementally.</p><h3 id="Path-Planning"><a href="#Path-Planning" class="headerlink" title="Path Planning"></a>Path Planning</h3><p>Path planning is required in many situations, including satnav software and autonomous robot control. For example, the item-pickers employed in Amazon’s warehouses follow instructions that specify their routing through the warehouse as they assemble each order, with the route determined in advance so as to minimize their walking time (or riding time, the warehouses are big). Your task in this project is to develop a program that computes a shortest routing through a set of obstacles structured as a maze.</p><h3 id="Stage-1-–-Reading-and-Printing"><a href="#Stage-1-–-Reading-and-Printing" class="headerlink" title="Stage 1 – Reading and Printing"></a>Stage 1 – Reading and Printing</h3><p>The input to your program will consist of a character-based description of a maze, to be read from stdin using input redirection, in the same way as was used in Assignment 1. (Please do not make use of fopen() and fread() from Chapter 11.) Mazes are composed of a rectangular array of two characters, ‘#’ to indicate no-go cells that may not be used by the robot (the maze walls), and ‘.’ to indicate passable cells that the robot may move into. For example, the description in test0.txt (available on the LMS) is<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#.#######</span><br><span class="line">#.......#</span><br><span class="line">####.####</span><br><span class="line">#....#..#</span><br><span class="line">#.####.##</span><br></pre></td></tr></table></figure></p><p>and describes a maze that has one gap in the top row (for entry to the maze), two gaps in the bottom row (for exiting the maze), and is configured as a grid of five rows and nine columns, with each row of the input corresponding to a one row maze cells. The robot is assumed to always enter the maze at one of the available gaps in the top row, and must always exit via one of the available gaps in the bottom row. If there is no path from any entry gap to any of the exit gaps then the maze has no solution.</p><p>You should assume throughout that input files will be “correct”, and will contain nothing but ‘#’, ‘.’, and ‘\n’ characters laid out correctly in a rectangular grid that will never be bigger than 100 × 100 cells; will always have at least one entry gap in the top row, and will always have at least one exit gap in the final row. You may not assume that there will be a legal path from any particular entry gap to any particular exit gap, and must correctly handle cases in which the maze has no valid solution.</p><p>In this first stage you should develop a program that has these elements:</p><ul><li>a type definition for a suitable struct for recording a maze as a two dimensional array, plus some auxiliary variables, and in which each cell in the maze is represented as a lower-level struct that contains the state variables associated with each cell;</li><li>a function that reads the input maze, via a suitable pointer-to-struct argument; and</li><li>a function for printing a maze out via a suitable pointer-to-struct argument, with each cell’s character doubled to make the maze easier to view on the screen.</li></ul><p>The required output for this stage for test0.txt is:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stage <span class="number">1</span></span><br><span class="line">=======</span><br><span class="line">maze has <span class="number">5</span> rows and <span class="number">9</span> columns</span><br><span class="line">##..##############</span><br><span class="line">##..............##</span><br><span class="line">########..########</span><br><span class="line">##........##....##</span><br><span class="line">##..########..####</span><br></pre></td></tr></table></figure></p><p>In this stage your elemental struct for each cell might only contain one variable, the type of that cell.</p><h3 id="Stage-2-–-Determining-Reachable-Regions"><a href="#Stage-2-–-Determining-Reachable-Regions" class="headerlink" title="Stage 2 – Determining Reachable Regions"></a>Stage 2 – Determining Reachable Regions</h3><p>Each legal move of the robot takes it either one step vertically or one step horizontally, from one viable cell to an immediately adjacent viable cell. A viable cell is reachable if the robot can reach it starting at any of the gaps in the top row of the maze, and then following (any number of) legal moves.</p><p>Develop an algorithm for determining (and storing with your structure) a flag that records the reachability of every viable cell in the maze, including any exit gaps in the last row. The output of this stage is again a map of the maze, but with reachable cells shown as doubled ‘+’ characters, and non-reachable cells as doubled ‘-‘ characters. If any of the exit gaps is reachable, then the maze as a whole can be reported as having a solution. The required output from this stage for test0.txt is<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stage <span class="number">2</span></span><br><span class="line">=======</span><br><span class="line">maze has a solution</span><br><span class="line">##++##############</span><br><span class="line">##++++++++++++++##</span><br><span class="line">########++########</span><br><span class="line">##++++++++##----##</span><br><span class="line">##++########--####</span><br></pre></td></tr></table></figure></p><p>Note the region in this maze that is non-reachable, including one of the exit gaps. (The alternative message to be used, if all of the exit gaps are non-reachable, is “maze does not have a solution”.) Further examples showing the full output that is required are provided on the LMS, and you should study them carefully so that you understand the details of what is required in this stage.</p><p>Note that the output from this stage is in addition to the output of Stage 1.</p><h3 id="Stage-3-–-Calculating-Costs"><a href="#Stage-3-–-Calculating-Costs" class="headerlink" title="Stage 3 – Calculating Costs"></a>Stage 3 – Calculating Costs</h3><p>Now add a further variable to the struct that represents each cell of the maze, and for each reachable cell, compute into that variable the minimum cost of any path from any entry gap in the top row through until that cell, counting one unit of cost for each cell that is traveled through, and with a cost of zero assigned at each top-row gap. The cost of every second reachable cell should be printed using two digits; other cells should be printed as before. If the cost of a reachable cell is greater than 99, then only the last two digits of the number should be printed. The required output from this stage for test0.txt is<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stage <span class="number">3</span></span><br><span class="line">=======</span><br><span class="line">maze has a solution <span class="keyword">with</span> cost <span class="number">10</span></span><br><span class="line">##<span class="number">00</span>##############</span><br><span class="line">##++<span class="number">02</span>++<span class="number">04</span>++<span class="number">06</span>++##</span><br><span class="line">########++########</span><br><span class="line">##++<span class="number">08</span>++<span class="number">06</span>##----##</span><br><span class="line">##<span class="number">10</span>########--####</span><br></pre></td></tr></table></figure></p><p>Further examples showing the full output that is required are provided on the LMS, and you should study them carefully so that you understand the details of what is required in this stage. Note that the output from this stage is in addition to the output of Stages 1 and 2.</p><h3 id="Stage-4-–-Plotting-a-Path"><a href="#Stage-4-–-Plotting-a-Path" class="headerlink" title="Stage 4 – Plotting a Path"></a>Stage 4 – Plotting a Path</h3><p>Now add further state information to the struct for each cell so that the exact path implied by one solution is drawn, and none of the other cell costs are shown. In this stage, reachable cells not on the final path should be shown as doubled blanks. The required output from this stage for test0.txt is<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stage <span class="number">4</span></span><br><span class="line">=======</span><br><span class="line">maze solution</span><br><span class="line">##<span class="number">00</span>##############</span><br><span class="line">##..<span class="number">02.</span><span class="number">.04</span>      ##</span><br><span class="line">########..########</span><br><span class="line">##..<span class="number">08.</span><span class="number">.06</span>##----##</span><br><span class="line">##<span class="number">10</span>########--####</span><br></pre></td></tr></table></figure></p><p>In cases where there are two or more exit gaps that have the same minimum distance from a start gap, a path to the leftmost of them should be plotted. Note that the output from this stage is in addition to the output of Stages 1, 2 and 3, assuming that a solution exists. In cases where there is no solution nothing should be printed except for the Stage 1, 2 and 3 output. Further examples showing the full output that is required are provided on the LMS, and you should study them carefully so that you understand the details of what is required in this stage.</p><h3 id="A-Note-on-Algorithms"><a href="#A-Note-on-Algorithms" class="headerlink" title="A Note on Algorithms"></a>A Note on Algorithms</h3><p>You are free to adopt any approach that you wish to labeling cells and computing path costs, but you do need to be systematic, and develop a mechanism that computes the correct answers. Be sure to provide comments in your programs to help the markers understand the particular mechanism you have used.</p><p>One possible approach is to cycle through the maze, examining every cell in order. Then, if that cell has been labeled with a path cost, use that cell to try and also label its neighbors with a path cost that is one greater. Path costs of labeled cells should only ever decrease, once a cell is first labeled. If a complete run through of every cell results in no changes to the path cost of reaching any cell in the maze, then a final set of path costs must have emerged. On the other hand, if any cell got its cost reduced in the last run through, start another pass through and allow that change to propagate further if it needs to. Begin by assigning a path cost of zero to the gaps in the top row of the maze.</p><p>This isn’t a very efficient algorithm, but it will be fast enough for the scale of maze being considered here. There are – of course! – more efficient algorithms than this that can be applied when there are millions or even billions of cells involved (for example, when the maze is three-dimensional). Come back and enrol in comp20003 in second semester if you want to know more.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业由一堆小程序组成，主要的目的是为了熟悉基本的数据结构用法。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CUDA代写：CME213-Neural-Networks-on-CUDA-Part2</title>
    <link href="https://tk1307993.coding.me/CME213-Neural-Networks-on-CUDA-Part2.html"/>
    <id>https://tk1307993.coding.me/CME213-Neural-Networks-on-CUDA-Part2.html</id>
    <published>2019-04-29T12:21:24.000Z</published>
    <updated>2019-04-29T12:24:39.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this second part of the final project, we provide further details about the grading policy and introduce you to the starter code. You can also find instructions for running and profiling the code on the cluster and submitting your work.</p><h3 id="Grading-details"><a href="#Grading-details" class="headerlink" title="Grading details"></a>Grading details</h3><p>Please refer to Part I for an overall grading information. Here we explain in detail how we determine the correctness of the code and test the performance. We have setup four testcases (with corresponding grading modes in the code) for testing correctness and performance. These testcases or grading modes can be run by passing command line arguments to the program. More details about them are given in later sections.</p><h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><p>You can find the grading outline below. More details about them are in the subsections that follow.</p><ul><li>Preliminary Report</li><li>Final Report</li></ul><h3 id="GEMM-correctness"><a href="#GEMM-correctness" class="headerlink" title="GEMM correctness"></a>GEMM correctness</h3><p>Since the GEMM function is a building block of any neural network implementation and will be an important tool in your arsenal, we test the GEMM implementation separately from the overall code testing. We have provided a function prototype called myGEMM for you in gpu_func.cu, which takes inputs as two scalars a, b, three matrices A, B, C, and returns the result of D = a <em> A </em> B + b * C in C (in place).</p><p>Your job is to fill in this function, and we will test your implementation on two sets of inputs that are relevant to this project. You are welcome to, but you don’t have to use this myGEMM function in your parallel training; this is only for the purpose of grading.</p><p>We test this correctness by running grading mode 4, which runs the myGEMM function alone. This myGEMM function is called only by rank 0 in the grading mode, i.e., for this part you just need to write kernels to do GEMM on a single GPU.</p><h3 id="Overall-correctness"><a href="#Overall-correctness" class="headerlink" title="Overall correctness"></a>Overall correctness</h3><p>In large neural network problems, a common issue encountered is the aggregation of rounding errors or inconsistencies.</p><p>Unfortunately, the implementations of several operations are not exactly same on CPU and GPU. Some of the sources for differences include exp() operations used in Softmax and Sigmoid functions, FMA (fused multiply add), the order of operations etc. There are some differences at the hardware level of implementation too. These discrepancies are usually of the order of 1e-16 for double precision calculations. However, such discrepancies can build up over time. In general, as the learning rate gets larger, the instability of the algorithm due to roundoff errors is high. These discrepancies might not lead to any parameter blow-up, but might create significant differences between the CPU and GPU solutions. This makes determining correctness challenging.</p><p>In order to tackle this, we have setup three testcases for determining correctness in the form of grading modes. In all those modes, a max. norm of the difference between final CPU and GPU results (parameters W(1) , W(2) , b(1) , b(2) ) is considered. If this max. norm is greater than a set threshold (1e-7) for any case, your code will fail correctness for that case. The actual max. norm values we get are much lower than this, but we want to provide some leeway in this regard and have relaxed the threshold. Apart from passing the three correctness tests, the precision on the validation set of the CPU and GPU implementations must be very close.</p><p>The hyper-parameters for the three testcases are as follows,</p><ol><li>Low learning rate: 0.001, large # iterations: 40 epochs;</li><li>Medium learning rate: 0.01, medium # iterations: 10 epochs;</li><li>High learning rate: 0.025, small # iterations: 1 epoch.</li></ol><p>The grading modes 1,2 and 3 run the above three testcases respectively.</p><p>Note: In order to get full credit on overall code correctness, these above thresholds must be met by a fully parallel code running on 4 GPUs through four different processes (or CPU threads) using MPI and CUDA. If the code is running on a single GPU or is not using GPUs (just MPI), you will lose a significant portion of the grade. Similarly, if you are running four processes but only one of them is using GPUs, you will again lose points. Here, when we say running on GPUs, we expect that all the GEMM, Softmax and Sigmoid calculations be done on GPUs.</p><h3 id="GEMM-Performance"><a href="#GEMM-Performance" class="headerlink" title="GEMM Performance"></a>GEMM Performance</h3><p>This refers to the performance of your myGEMM function. To test this we run the code in grading mode 4. The grade for this will be based on the performance of your GEMM function (in terms of the time taken) relative to other students in the class. The exact method for calculating this relative grade will be determined by us later depending on the range of performances we get.</p><p>In the code, we run this myGEMM function repeatedly for a number of iterations. This has been currently set to 10, but we might change this based on the performance we see in the submissions. We believe that this should not affect your implementation.<br>Caveat: If your GEMM implementation does not pass the GEMM correctness test, you will not receive any points for performance.</p><h3 id="Overall-Performance"><a href="#Overall-Performance" class="headerlink" title="Overall Performance"></a>Overall Performance</h3><p>This refers to the performance of your full NN code. Here we use the default settings of the program for benchmarking the performance (time taken). Here again, the grade is based on your performance relative to other students in the class. The exact method for calculating this relative grade will be determined by us later depending on the range of performances we get.</p><p>Caveat: If you do not pass the overall correctness tests, you will be penalized and we will determine the penalty on a case by case basis.</p><h3 id="Running-instructions"><a href="#Running-instructions" class="headerlink" title="Running instructions"></a>Running instructions</h3><p>We have provided a sample .bashrc file in sample_bashrc. You can replace your current ̃/.bashrc (or bash profile) file on the cluster with this. You can also copy the relevant portions to your current bashrc file. The modules that have been loaded are as follows:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module <span class="keyword">add</span><span class="bash"> shared</span></span><br><span class="line"><span class="bash">module add slurm</span></span><br><span class="line"><span class="bash">module add gcc/4.8.5</span></span><br><span class="line"><span class="bash">module add cuda75</span></span><br><span class="line"><span class="bash">module add mvapich2/gcc/64/2.1</span></span><br><span class="line"><span class="bash">module add intel-cluster-runtime/intel64/3.7</span></span><br></pre></td></tr></table></figure></p><p>(Please load gcc/4.8.5 instead of gcc, because the nvcc does not support gcc version 4.9 and up.)<br>Make sure all the above modules are loaded. If you changed your .bashrc file, you may have to source it for the changes to take effect. Alternatively you can exit your ssh session and log back in. You can see the modules that have been loaded by using<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure></p><p>With the correct modules loaded, run<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./init.sh</span></span><br></pre></td></tr></table></figure></p><p>This downloads the MNIST dataset and installs the Armadillo library. You only need to do this the first time after you download the code.<br>Edit the job script run.sh to add command line arguments or change number of processes you want to run with. By default, we request for 4 processes on a single node in the cluster and request for 4 GPUs. The single node is to reduce MPI overhead. Communication across nodes is slower than within a single node. Note that the program prints out the number of MPI processes and CUDA devices used in the very beginning to help you make sure you are running it correctly.<br>Submit the job script run.sh using sbatch as follows<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbatch <span class="keyword">run</span>.<span class="bash">sh</span></span><br></pre></td></tr></table></figure></p><p>You can check whether your job is still running via the command squeue.</p>]]></content>
    
    <summary type="html">
    
      用GPU编写Neural Network算法的第二部分作业，这部分要求做性能的优化。
    
    </summary>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/categories/CUDA/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Machine Learning" scheme="https://tk1307993.coding.me/tags/Machine-Learning/"/>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/tags/CUDA/"/>
    
      <category term="MPI" scheme="https://tk1307993.coding.me/tags/MPI/"/>
    
  </entry>
  
  <entry>
    <title>CUDA代写：CME213-Neural-Networks-on-CUDA-Part1</title>
    <link href="https://tk1307993.coding.me/CME213-Neural-Networks-on-CUDA-Part1.html"/>
    <id>https://tk1307993.coding.me/CME213-Neural-Networks-on-CUDA-Part1.html</id>
    <published>2019-04-27T03:29:05.000Z</published>
    <updated>2019-04-27T03:32:16.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this project, you will implement a neural network using CUDA to identify digits from handwritten images (a specific case of image classification problem). Neural networks are widely used in machine learning problems, specifically in the domains of image processing, computer vision and natural language processing. Recently, there has been a lot of excitement regarding deep learning, which basically uses more advanced variants of the simpler neural network (NN) we cover here. Therefore, being able to train large neural networks efficiently is important and is the goal of this project.</p><p>The main purpose of this Part I is to introduce you to the project and give you a picture of what needs to be done. Details of the starter code, submission instructions and full details of the grading steps will be handed out in Part II.</p><h3 id="Data-and-Notation"><a href="#Data-and-Notation" class="headerlink" title="Data and Notation"></a>Data and Notation</h3><p>We will be using the MNIST dataset, which consists of greyscale 28 × 28 pixel images of handwritten digits from 0 to 9.</p><p>The dataset is divided into two parts — 60,000 training data and 10,000 test data. We will use the training data to learn the parameters of our neural network (described later), and the test data to measure the performance of the learned network.</p><p>In the training process, one issue will be overfitting on the training data. To avoid this, a standard practice is to perform a cross-validation — a technique to measure how the model will generalize on an independent dataset. Cross-validation is carried out by further dividing the training data into two sets - a training set and a validation set. The validation set is a small portion (usually 10%) of the training dataset. We then perform the training on the training set (excluding the validation set) and evaluate our model on the validation set. There are different types of cross-validation, and we will only do a single holdout for validation because of computational issues. We use insights from this validation to improve our model.</p><p>The goal of the test set is to perform a final evaluation of our model on the unseen data. It is not meant to be used to in the training process.</p><h3 id="Neural-Networks"><a href="#Neural-Networks" class="headerlink" title="Neural Networks"></a>Neural Networks</h3><h4 id="Neurons"><a href="#Neurons" class="headerlink" title="Neurons"></a>Neurons</h4><p>To describe neural networks, we will begin by describing the simplest possible neural network, one which comprises a single “neuron.”</p><p>This is a good time for us to discuss the calculation of the derivative of the sigmoid function with respect to its input, since we are going to use it significantly in the following sections.</p><p>The neuron performs a linear transform on the input and then applies a non-linear transformation (sigmoid, in this case).<br>When a single neuron is used, we are limited to a binary classification. Take the example of a cancer tumor. We may build a neural network that takes as input the size of the tumor, its location, and the length of time it has been there. Based on these three pieces of information, the network needs to determine whether the tumor is benign or malignant. This is a true/false type of determination. In our previous model using the sigmoid function, we can interpret the output of the network.</p><p>Our task is therefore to learn the parameters of the network W and b so that it achieves the best accuracy or precision on the test set.</p><p>In the project we need to extend this concept to multiple classes. Instead of a simple true/false output, we need to decide which digits from 0 to 9 is shown on the input image. This requires a full neural network.</p><h4 id="Fully-connected-neural-network"><a href="#Fully-connected-neural-network" class="headerlink" title="Fully-connected neural network"></a>Fully-connected neural network</h4><p>Figure 4 shows a fully-connected neural network with 1 input layer, 1 hidden layer, and 1 output layer. We call such a network to be a two-layered neural network (ignoring the input layer as it is trivially present)</p><p>In our problem, we are trying to determine the digit associated with each image. We will call this digit the “label” associated with the image (using the neural network terminology). The total number of labels is denoted C. In our case C = 10, since we are trying to determine digits 0 to 9.</p><p>The last layer is special. This is the output of our network. In the project, we have C = 10 output nodes. Each node represent a possible digit. We will see later on how the output vector y can be interpreted to determine the digit that is guessed by the network for a given image.</p><h4 id="Feed-forward"><a href="#Feed-forward" class="headerlink" title="Feed-forward"></a>Feed-forward</h4><p>The nice thing about neural networks is that they are highly modular. Layer L[i] does not need to know whether its input is the input layer itself or the output of L[i−1]. L[i] computes its activations</p><h4 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h4><p>Recall that our objective is to learn the parameters of the neural network such that it gets the best accuracy on a set of data points, which we call the dev set. Let y be the one-hot vector denoting the class of the input, i.e., y[c] = 1 if c is the correct label, 0, otherwise. We want P (label = c|x) to be the highest.</p><p>Without going into the mathematical details, we will use the following general expression to determine the error of our neural network.</p><p>The above cost measures the error or our “dissatisfaction” with the output of the network. The more certain the network is about the correct label (high P (y = c|x)), the lower our cost will be.</p><p>Clearly, we should choose the parameters that minimize this cost. This is an optimization problem, and is usually solved using the method of Gradient Descent (described below).</p><p>Our neural network applies a non-linear function to the input because of the sigmoid and softmax functions. However, if we make W very small, the network becomes nearly linear because T is itself very small. To optimize the neural network, we often add a penalization term for the magnitude of W in order to control the non-linearity of the network. There is no rigorous justification for this penalization. It is found to work well in practice and is easy to use. With the penalization term.</p><h4 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><p>Gradient Descent is an iterative algorithm for finding local minima of a function.</p><p>In practice, we often do not compute J using all the input images. Instead, we subdivide the input into mini-batches containing M images. We process one mini-batch at a time. For each mini-batch, we calculate J, and update the network coefficients. Then, process the next batch, until all images are processed. See Listing 5 for the pseudo-code. In the code, an epoch (in the machine learning lingo) is an iteration over the entire data set of N images.</p><p>This approach usually leads to faster convergence because we update the network coefficients more often and are able to learn faster.</p><h4 id="Backpropagation"><a href="#Backpropagation" class="headerlink" title="Backpropagation"></a>Backpropagation</h4><p>Backpropagation is the process of updating the neural network coefficients. This involves computing the gradient of multi-variable functions using the chain rule.</p><h3 id="Outline-of-parallelization-strategies-for-CUDA-and-MPI"><a href="#Outline-of-parallelization-strategies-for-CUDA-and-MPI" class="headerlink" title="Outline of parallelization strategies for CUDA and MPI"></a>Outline of parallelization strategies for CUDA and MPI</h3><ul><li>GEMM CUDA implementation: A GEMM operation can be expressed as D = a <em> A </em> B + b * C. Some BLAS libraries perform in-place computation that saves the result D in the memory space of C, as cuBLAS does. This is possible if C is no longer used after the computation.</li><li>We first outline the basic implementation (“Algorithm 1”). The simplest implementation is to have one thread for each element in the result D. Each thread reads the required row of A, column of B, and an element of C to compute the output element in D.<br>For Algorithm 2, try to think of a better implementation. For example, use a blocking algorithm and take advantage of the shared memory. One approach is to have each thread block (e.g., a block of 32<em>32 threads) compute a sub-matrix (of size 32</em>32) in the output matrix. Blocks from matrices A and B can be loaded into shared memory, with each thread reading one element of each sub-matrix.</li><li>Each thread then updates its entry in the sub-matrix of D. A loop is used to multiply all the required entries in A and B. For an even more optimized and a possible “A+ grade” implementation, please refer to section 5.</li><li>We intentionally do not explain the details of these algorithms. It’s for you to fill the blanks and perhaps come up with better ideas!</li><li>MPI implementation: For each batch of images, you should subdivide the input images into smaller image batches and use MPI communication methods to distribute the input data and Neural Network parameters among MPI nodes, and perform GEMM and other computations in parallel. The resulting network coefficient updates should be reduced and sent to all nodes.</li></ul>]]></content>
    
    <summary type="html">
    
      结合了神经网络的高级的CUDA，用GPU进行NeuralNetwork的算法编写进行数字识别。核心算法部分框架都已提供，需要实现的主要是相关数据结构在GPU中的申请和释放。
    
    </summary>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/categories/CUDA/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Machine Learning" scheme="https://tk1307993.coding.me/tags/Machine-Learning/"/>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/tags/CUDA/"/>
    
      <category term="MPI" scheme="https://tk1307993.coding.me/tags/MPI/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS125-Course-Scheduler</title>
    <link href="https://tk1307993.coding.me/CS125-Course-Scheduler.html"/>
    <id>https://tk1307993.coding.me/CS125-Course-Scheduler.html</id>
    <published>2019-04-25T13:44:18.000Z</published>
    <updated>2019-04-25T13:46:45.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You will create a text-based university student course scheduler. Each course object will contain information for the course department (a String) (e.g., “CS”; “MATH”; etc), course number (integer) (125; 315), course description (String) (e.g., “Introduction to Computer Science”; “Linear Transformations and Matrices”), starting hour (integer: use 24-hour clock: 0-23), a boolean variable requiredForMajor, an integer indicating the number of credit hours for the course, and days the course meets (an array of chars - ‘M’,’T’,’W’,’R’,’F’).</p><p>While the course scheduler program is running, the text-interface should look like this:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="built_in">to</span> <span class="keyword">the</span> Course Scheduler! Select <span class="keyword">an</span> option below:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="built_in">add</span> <span class="keyword">an</span> course</span><br><span class="line"><span class="number">2</span>) remove <span class="keyword">a</span> course</span><br><span class="line"><span class="number">3</span>) display courses alphabetically</span><br><span class="line"><span class="number">4</span>) display courses <span class="keyword">in</span> major</span><br><span class="line"><span class="number">5</span>) display schedule <span class="keyword">for</span> day</span><br><span class="line"><span class="number">6</span>) display total <span class="built_in">number</span> <span class="keyword">of</span> credit hours</span><br><span class="line"><span class="number">7</span>) quit</span><br><span class="line">Select <span class="keyword">an</span> option above:</span><br></pre></td></tr></table></figure></p><p>You will maintain a sorted linked list data structure to hold the schedule information.</p><p>For extra credit points, your app will be demonstrated and the code reviewed by two peers and one course assistant at the last lab/sections of the semester. Partial credit will be given for non-working code. Important: For maximum credit, in addition to a fully-functioning app, reviewers will be looking for good coding style such as: proper indentation, liberal use of constructors, data encapsulation, a short ‘main’ method and extensive use of subprograms. Use recursive methods whenever possible! Your code must also be checked into your subversion archive.</p><p>The following app behaviors will be expected for each option:</p><ol><li>add - The user will be prompted for information for a course to add (dept, number, description, whether it is in the students major, number of credit hours, and the time and days the course meets). The store will add the course in the appropriate location in the linked list, alphabetically sorted (by department and number) course list. For full credit, only add the course to the list provided the course day/time does not conflict with an already existing course. Partial credit will be awarded if you choose to not include this check. If conflict exists, the user will be prompted to enter a different course (call the add method again).</li><li>remove - The user will be shown a list of current courses in the schedule (use method 3 below) and will be prompted to choose a course to remove. The course selected will be removed from the inventory and the linked list correctly updated.</li><li>display courses alphabetically - the student’s courses will be displayed in alphabetical order by course (e.g., CS125 then Math 315 then PSYCH100) - all information for the course will be displayed: courseID, description, days it meets, number of credit hours, time/days it meets and a ‘*’ indicating the course is required for the student’s major.</li><li>display courses in major - only the student’s courses that are required for the major will be displayed in alphabetical order by course (e.g., CS125 then Math 315) - all information for the course will be displayed courseID, description, days it meets, credit hours, date/time it meets.</li><li>display schedule for day - the user will be prompted for a day of the week (MTWRF) and the schedule for the day will be displayed with courses ordered by starting hour.</li><li>display total number of credit hours - the total number of credit hours will be displayed for the current course list.</li><li>quit - the user will receive a prompt (“Are you sure you want to quit? - all your data will be lost.”) If the user replies yes, the app quits.</li></ol>]]></content>
    
    <summary type="html">
    
      这次需要代写的Java作业是一个简单的单链表应用，实现单链表的增、删、条件查询和排序即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：ADDS10-Polish-Notation</title>
    <link href="https://tk1307993.coding.me/ADDS10-Polish-Notation.html"/>
    <id>https://tk1307993.coding.me/ADDS10-Polish-Notation.html</id>
    <published>2019-04-22T13:23:36.000Z</published>
    <updated>2019-04-22T13:26:04.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prefix-to-infix-based-on-tree-data-structure"><a href="#Prefix-to-infix-based-on-tree-data-structure" class="headerlink" title="Prefix to infix based on tree data structure"></a>Prefix to infix based on tree data structure</h2><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>Create a directory for this assignment inside your SVN file system. Remember to commit your work early and often.</p><h3 id="Important-Notice"><a href="#Important-Notice" class="headerlink" title="Important Notice"></a>Important Notice</h3><p>This assignment will only be marked by the testing script on websubmission (because our tutors’ contracts end before the deadline). There will be six test cases (1 mark each). The total mark is six as usual. You don’t have to write a design, because the testing script won’t be able to understand it anyway. (But feel free to write one for your own benefit.) The testing script doesn’t care about your code style either, so feel free to use variable names like aa, bb, cc, dd (I know some of you love these kinds of names – well, jk, please don’t).</p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>Polish notation, also known as Polish prefix notation or simply prefix notation, is a form of notation for logic, arithmetic, and algebra. Its distinguishing feature is that it places operators to the left of their operands. (Many Lisp family programming languages require prefix notation, including the popular language Clojure.)</p><p>The expression for adding the numbers 1 and 2 is, in prefix notation, written “+ 1 2” rather than “1 + 2”. In more complex expressions, the operators still precede their operands, but the operands may themselves be nontrivial expressions including operators of their own. For instance, the expression that would be written in conventional infix notation as<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">5</span> + <span class="number">6</span>) * <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>can be written in prefix as<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* (+ <span class="number">5</span> <span class="number">6</span>) <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>You only need to care about binary operators: + - * and /</p><p>Also, you only need to care about operands that are from 0 to 9 (single digit).</p><p>For binary operators, prefix representation is unambiguous, and bracketing the prefix expression is un-necessary. As such, the previous expression can be further simplified to<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* + <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>The processing of the product is deferred until its two operands are available (i.e., 5 plus 6, then multiplies the result with 7). As with any notation, the innermost expressions are evaluated first, but in prefix notation this “innermost-ness” is conveyed by order rather than bracketing.</p><p>You are asked to create a class that converts prefix expressions to infix expressions. You are asked to use a tree data structure to achieve this task. (Hint: use a binary tree, use the leaf nodes to store the operands and use the non-leaf nodes to store the operators.)</p><p>Create a main function that takes in one line. The line contains a list of operators and operands separated by spaces. The input doesn’t contain parenthesis. An operator is a character from +, -, *, and /. An operand is an integer from 0 to 9. You are asked to determine whether this line describes a valid prefix expression.</p><p>If so, output its infix form. Otherwise, output “Error”. (Division by zero is considered error.)</p><p>When you output the infix form, the output format should follow two rules</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: * - 5 6 7</span><br><span class="line"><span class="keyword">Sample</span> output: (5 - 6) * 7</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: * 5</span><br><span class="line"><span class="keyword">Sample</span> output: <span class="keyword">Error</span></span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: * 5 6 7</span><br><span class="line"><span class="keyword">Sample</span> output: <span class="keyword">Error</span></span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: + * - 5 6 7 3</span><br><span class="line"><span class="keyword">Sample</span> output: ((5 - 6) * 7) + 3</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: / + * - 5 6 7 3 9</span><br><span class="line"><span class="keyword">Sample</span> output: (((5 - 6) * 7) + 3) / 9</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: / + * - 5 6 7 3 0</span><br><span class="line"><span class="keyword">Sample</span> output: <span class="keyword">Error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业是用树来实现Polish Notation，没什么难度。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：FIT2071-TextQuest</title>
    <link href="https://tk1307993.coding.me/FIT2071-TextQuest.html"/>
    <id>https://tk1307993.coding.me/FIT2071-TextQuest.html</id>
    <published>2019-04-20T00:43:54.000Z</published>
    <updated>2019-04-20T00:47:15.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task-Details"><a href="#Task-Details" class="headerlink" title="Task Details"></a>Task Details</h3><p>The Weeks 2 and 3 laboratory exercises contain a designated “Main Portfolio Exercise”. These are a series of exercises that add to each other to form a main portfolio program: TextQuest. You are to submit a final, completed version of that game.</p><p>uccessful completion of the exercises as described in the laboratory exercises may obtain you up to a maximum of 80% of the total assignment marks. In order to obtain a higher mark you should seek to include some advanced functionality (as described in the Week 3 portfolio description). The additional functionality should demonstrate advanced or more complex application of principles covered to date. It need not be large amounts of work but should demonstrate a willingness to explore new and advanced concepts. You must detail what you have done in an accompanying “readme” file.</p><p>The assignment must be created and submitted as a Visual Studio 2013 project. You may complete the exercises in your preferred IDE, however you should create a Visual Studio project in order to submit. This project must then be zipped up into one zip file for submission. The zip file MUST be named “FIT2071-AA1-YourAuthcateID.zip”. This zip file must be submitted via the Moodle assignment submission page. Note to reduce the file size of your zip, you can delete the “ipch” folder from your project before zipping without affecting your program.</p><p>Explicit assessment criteria are provided over the page, however please note you will be assessed on the following broad criteria:</p><ul><li>Meeting functional requirements as described in the exercise description</li><li>Demonstrating a solid understanding of the week’s C++ concepts, including good practice</li><li>Following the unit Programming Style Guide</li><li>Creating solutions that are as efficient and extensible as possible</li></ul><p>NOTE! Your submitted program MUST compile and run. Any submission that do not compile will be awarded zero marks. This means you should continually compile and test your code as you do it, ensuring it compiles at every step of the way.</p><p>If you have any questions or concerns please contact Tim as soon as possible.</p><h3 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h3><p>Main Portfolio Exercise: TextQuest</p><p>This week’s portfolio exercise is to begin building a (very simple) text-based Role Playing game. We will be building upon this exercise in the next week to culminate in the submission of a game built up with the 2 portfolio exercises from weeks 2 and 3. This week we will start by writing the basic structure of the code to create a character and save the character data to a file.</p><p>Step 1. Prompt the player to enter a name for their character and save that name to a file.</p><p>Step 2. You will also need to read a file containing the default statistics associated with the different character vocations that the player can choose. Add code to your program to read in the vocation file which is a comma-separated list, with four fields corresponding to: vocation, health, strength and magic. The vocation field is a text string, the remaining fields are smallish integers. Here’s an example vocation file:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Warrior,<span class="number">100</span>,<span class="number">120</span>,<span class="number">0</span> </span><br><span class="line">Mage,<span class="number">80</span>,<span class="number">60</span>,<span class="number">100</span> </span><br><span class="line">Rogue,<span class="number">60</span>,<span class="number">80</span>,<span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>Your program should read this file, print the list of vocations to the console and ask the player to select one by entering its number in the list (starting from 0).</p><p>Now write out the character information to a file which should again be a comma separated file containing five fields: name, vocation, health, strength and magic. The health score should (initially) come from the value specified in the vocation file (the second field). Here’s an example output:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TimTheMagical,Mage,<span class="number">80</span>,<span class="number">60</span>,<span class="number">100</span></span><br></pre></td></tr></table></figure></p><p>Bonus: What happens if we try to save another character? Why does this happen? How might we overcome this issue to allow us to save multiple characters?</p><p>Next week we will complete the basic game with code to resurrect the character from such a save file, make a turn loop where stuff happens pseudo-randomly affecting health until the character dies! Don’t worry, we will also start to do stuff with the strength and magic fields.</p><h3 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h3><p>Main Portfolio Exercise: TextQuest continued</p><p>This week’s portfolio exercise is to complete last week’s TextQuest game.</p><p>By now you should have a program that allows the user to create a character, choose the character’s name and choose a vocation for the character from a list of possible vocations and their health, strength and magic stats. Finally it should be saving the created character in a separate file (check last week’s lab portfolio exercise for details).</p><p>This week, we are going to again extend the program in several steps, we’re up to Step 3:</p><p>Step 3. Add to your code the ability to either read an existing character from the file created on a previous run, or create a new character from scratch.</p><p>Step 4. Now we are going to create the actual game loop. The game loop will apply a sequence of events that output a message to the screen and modify the character’s health score. Here’s a sample events file (also available on Moodle).<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">An enemy Warrior hits you with his weapon!,-50 </span><br><span class="line">An enemy Mage casts an evil spell on you!,-20 </span><br><span class="line">You found a<span class="built_in"> health </span>potion!,25 </span><br><span class="line">An enemy Rogue backstabs you <span class="keyword">from</span> the shadows!,-40 </span><br><span class="line">You got eaten by a Dragon!,-1000</span><br></pre></td></tr></table></figure></p><p>After each event, if the player’s health score is not yet 0, they should be prompted whether to continue (y/n). Answering ‘y’ will apply another event. Answering ‘n’ should end the loop. Before the program finishes it should write out the player’s current stats (in the same file as in Step 1/2).</p><p>HD Bonus: Implementing the basic functionality described in Steps 1-4 will enable you to achieve a maximum of 80% of the available marks. In order to achieve the final 20% (or “HD” component) you should seek to include some advanced functionality. The additional functionality should demonstrate advanced or more complex application of principles covered to date. It need not be large amounts of work but should demonstrate a willingness to explore new and advanced concepts. Note however that your program must still satisfy all functionality as detailed in Steps 1-4. You must describe your additions in the readme file included with your submission (see below).</p><p>Here are some ideas for things you could add:</p><ul><li>basic validation (check if the file is empty before trying to read from it, check that the name was not left blank, check that the vocation entered was within range etc.)</li><li>the ability to save/load multiple characters</li><li>events that allow the player to fight back at the cost of strength (if warrior/rogue) or magic (if mage)</li><li>a simple xp/level system</li></ul><p>Readme.txt Document: as described in the (separate) assignment hand-out you will also need to submit a brief text document explaining how your program works. To get marks for any extra functionality you may have implemented, it must be highlighted and explained clearly in this document.</p><p>Full details of submission are detailed in the assignment brief on Moodle. However, important things to note include:</p><ul><li>Your submitted program MUST compile and run in VISUAL STUDIO 2013. If a program will not compile it will be awarded ZERO marks. NO exceptions. This means you must continually compile and test your code!</li><li>You can discuss ideas with others, but your code and your readme.txt document must be your own work. We will be checking! Monash applies heavy penalties to students who plagiarise.</li></ul><p>Please note! It is not expected that you need to implement this game as an object-oriented solution. We will be writing fully object-oriented programs in the remaining assessment items.</p>]]></content>
    
    <summary type="html">
    
      本次代写的作业内容，是完成一个简单的文本的RPG游戏。作业属于Lab作业，难度不大。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Oracle代写：CS6024-Dynamic-SQL</title>
    <link href="https://tk1307993.coding.me/CS6024-Dynamic-SQL.html"/>
    <id>https://tk1307993.coding.me/CS6024-Dynamic-SQL.html</id>
    <published>2019-04-18T12:58:08.000Z</published>
    <updated>2019-04-18T13:00:44.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Option-1-for-regular-credit-Given-the-following-package-including-the-procedure-as-named"><a href="#Option-1-for-regular-credit-Given-the-following-package-including-the-procedure-as-named" class="headerlink" title="Option 1 (for regular credit): Given the following package, including the procedure, as named:"></a>Option 1 (for regular credit): Given the following package, including the procedure, as named:</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE project_pkg</span><br><span class="line"> <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">TYPE</span> namePriceRecType <span class="keyword">IS</span> <span class="keyword">RECORD</span>(</span><br><span class="line">    pname Products.Product_Name%<span class="keyword">TYPE</span>,</span><br><span class="line">    pprice Products.Unit_Price%<span class="keyword">TYPE</span>);</span><br><span class="line">  <span class="keyword">TYPE</span> tblNamePriceType <span class="keyword">IS</span> TABLE</span><br><span class="line">    <span class="keyword">INDEX</span> <span class="keyword">BY</span> BINARY_INTEGER;</span><br><span class="line">  <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">Top_Ten</span> <span class="params">(tblNamePrice <span class="keyword">IN</span> <span class="keyword">OUT</span> tblNamePriceType)</span>;</span></span><br><span class="line"><span class="keyword">END</span> project_pkg;</span><br></pre></td></tr></table></figure><p>Create the package body, which will define a cursor to select the product name and unit price from the Products table in order by descending unit price. After opening the cursor, fetch each item from the cursor into the table (which was passed as a parameter) until you either run out of items or reach a maximum of 10. Properly end the procedure.</p><p>Create an anonymous script that declares the table variable needed to be able to retrieve the table that the procedure has built. Obtain the record count of the table. Loop from the beginning for this record count and display the sequence number, name, and price of the values in the retrieved table. Display “End of data in table” at the end of all retrieved values.</p><p>Your output should look like this:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In routine, Rec Count: 10</span><br><span class="line"><span class="meta">#</span><span class="bash">:1   Cote de Blaye   263.5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:2   Thuringer Rostbratwurst   123.79</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:3   Mishi Kobe Niku   97</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:4   Sir Rodney<span class="string">'s Marmalade   81</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">:5   Carnarvon Tigers   62.5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:6   Raclette Courdavault   55</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:7   Manjimup Dried Apples   53</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:8   Tarte au sucre   49.3</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:9   Ipoh Coffee   46</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:10  Rossle Sauerkraut   45.6</span></span><br><span class="line">End of data in table</span><br></pre></td></tr></table></figure></p><h3 id="Option-2-for-10-extra-credit-Given-the-following-package-including-the-function-as-named"><a href="#Option-2-for-10-extra-credit-Given-the-following-package-including-the-function-as-named" class="headerlink" title="Option 2 (for 10% extra credit): Given the following package, including the function, as named:"></a>Option 2 (for 10% extra credit): Given the following package, including the function, as named:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE <span class="keyword">OR</span> REPLACE PACKAGE project_pkg</span><br><span class="line"> AS</span><br><span class="line"> <span class="built_in"> TYPE </span>namePriceRecType IS RECORD(</span><br><span class="line">    pname Products.Product_Name%TYPE,</span><br><span class="line">pprice Products.Unit_Price%TYPE);</span><br><span class="line"> <span class="built_in"> TYPE </span>tblNamePriceType IS TABLE OF namePriceRecType</span><br><span class="line">    INDEX BY BINARY_INTEGER;</span><br><span class="line">  FUNCTION Top_Selected (top NUMBER) RETURN tblNamePriceType;</span><br><span class="line">END project_pkg;</span><br></pre></td></tr></table></figure><p>Create the package body, in which the function will do the same as the above procedure, except that being a function, it will obtain the “maximum number of results to return” as a parameter (top) and will return the same kind of table. If the calling script passed 10 to this function, the displayed result would be the same as option 1. However, if the calling script were to pass 5, the displayed result would be<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In routine, Rec Count: 10</span><br><span class="line"><span class="meta">#</span><span class="bash">:1   Cote de Blaye   263.5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:2   Thuringer Rostbratwurst   123.79</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:3   Mishi Kobe Niku   97</span></span><br><span class="line"><span class="meta">#</span><span class="bash">:4   Sir Rodney<span class="string">'s Marmalade   81</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">:5   Carnarvon Tigers   62.5</span></span><br><span class="line">End of data in table</span><br></pre></td></tr></table></figure></p><p>Thus, with this function, the user (calling script) can elect the maximum number of results to be returned. Be sure to capture several sets of output, each showing different results.</p><h3 id="Option-3p-for-an-additional-10-extra-credit-Choose-the-following-package-for-a-procedure-as-named"><a href="#Option-3p-for-an-additional-10-extra-credit-Choose-the-following-package-for-a-procedure-as-named" class="headerlink" title="Option 3p (for an additional 10% extra credit): Choose the following package for a procedure, as named:"></a>Option 3p (for an additional 10% extra credit): Choose the following package for a procedure, as named:</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PACKAGE project_pkg</span><br><span class="line"> <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">TYPE</span> namePriceRecType <span class="keyword">IS</span> <span class="keyword">RECORD</span>(</span><br><span class="line">    pname Products.Product_Name%<span class="keyword">TYPE</span>,</span><br><span class="line">    pprice Products.Unit_Price%<span class="keyword">TYPE</span>);</span><br><span class="line">  <span class="keyword">TYPE</span> tblNamePriceType <span class="keyword">IS</span> TABLE <span class="keyword">OF</span> namePriceRecType</span><br><span class="line">    <span class="keyword">INDEX</span> <span class="keyword">BY</span> BINARY_INTEGER;</span><br><span class="line">  <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">Rank_Selected</span><span class="params">(top NUMBER, dir <span class="keyword">IN</span> VARCHAR2,</span></span></span><br><span class="line"><span class="function"><span class="params">                  tblNamePrice <span class="keyword">IN</span> <span class="keyword">OUT</span> tblNamePriceType)</span>;</span></span><br><span class="line"><span class="keyword">END</span> project_pkg;</span><br></pre></td></tr></table></figure><p>or Option 3f (also an additional 10% extra credit): the following package for a function, as named:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE <span class="keyword">OR</span> REPLACE PACKAGE project_pkg</span><br><span class="line"> AS</span><br><span class="line"> <span class="built_in"> TYPE </span>namePriceRecType IS RECORD(</span><br><span class="line">    pname Products.Product_Name%TYPE,</span><br><span class="line">    pprice Products.Unit_Price%TYPE);</span><br><span class="line"> <span class="built_in"> TYPE </span>tblNamePriceType IS TABLE OF namePriceRecType</span><br><span class="line">    INDEX BY BINARY_INTEGER;</span><br><span class="line">  FUNCTION Rank_Selected(top NUMBER, dir <span class="keyword">IN</span> VARCHAR2) RETURN tblNamePriceType;</span><br><span class="line">END project_pkg;</span><br></pre></td></tr></table></figure></p><p>Use dynamic SQL which will obtain multiple rows in a query, allow the user to supply an order (ASC or a null value for ascending, DESC for descending), in addition to the maximum limit as described above.</p><p>Again, with this routine, the user (calling script) can select not only the maximum number of results returned, but also the sort order. Be sure to capture several sets of output, each showing illustrating combinations of results.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的SQL作业可以二选一，将所给代码补充完整即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS1101-Hard-Manager</title>
    <link href="https://tk1307993.coding.me/CS1101-Hard-Manager.html"/>
    <id>https://tk1307993.coding.me/CS1101-Hard-Manager.html</id>
    <published>2019-04-14T01:56:30.000Z</published>
    <updated>2019-04-14T01:59:24.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Aim"><a href="#1-Aim" class="headerlink" title="1. Aim"></a>1. Aim</h3><p>The purpose of this assignment is to:</p><ol><li>Create client files that use the class to model “real world” scenarios.</li><li>Instantiate objects, create arrays of objects.</li><li>Generate random integers and random Boolean values.</li><li>Call methods on objects.</li></ol><p>It is recommended that you read and understand all the instructions below before starting the exercises.</p><h3 id="2-Files-Needed"><a href="#2-Files-Needed" class="headerlink" title="2. Files Needed"></a>2. Files Needed</h3><p>You will be provided with starter files for both exercises in this assignment. Create a project in Eclipse for this assignment and copy both starter files into this project. Be sure to complete the standard header comments at the top of each file.</p><h3 id="3-To-be-Handed-In"><a href="#3-To-be-Handed-In" class="headerlink" title="3. To be Handed In"></a>3. To be Handed In</h3><p>The files HerdManager.java and FillTheCorral.java should be submitted on-line via the HW15 page on Blackboard. Be sure to name the file/class exactly as specified. There is no MPL component for this assignment.</p><h3 id="4-Programming-Exercises"><a href="#4-Programming-Exercises" class="headerlink" title="4. Programming Exercises"></a>4. Programming Exercises</h3><p>For both exercises below, a fully functioning Gate class is necessary. If you implemented your Gate class correctly, you can use that class. Note that the toString() method prints out a statement that is different from the toString() output. The toString() method should return the statement after the semicolon (and space) (i.e., after “West Gate: “ and “East Gate: “). You will need to update that method.</p><p>Note: when dealing with Gate objects in these exercises, you must use the interface (the methods) that was specified for the Gate class in HW14. You cannot add any new public behavior or modify the interface to your Gate class that was not specified in HW14.</p><h3 id="Exercise-1-HerdManager-java"><a href="#Exercise-1-HerdManager-java" class="headerlink" title="Exercise 1: HerdManager.java"></a>Exercise 1: HerdManager.java</h3><p>In this exercise, you will build a client program that simulates the movement of an escargatoire of snails in and out of a pen.</p><ol><li>Create a public static final integer HERD to indicate the size of your escargatoire. Set the constant to 24 for this simulation.</li><li>Create two gates in your main() method and call them westGate and eastGate. You will need to call both methods described below in the main() method.</li><li>Create the setGates() method that accepts as input parameters two Gate objects. This method will set the westGate to allow snails to re-enter the pen, leaving the pasture, and set the eastGate to OUT, to allow snails to leave the pen and go to pasture. Note: make sure the order of the parameters that are passed to this method is the following: westGate, eastGate.</li><li>Create the simulateHerd() method that accepts two Gate objects and a Random object as input parameters.</li></ol><p>Note: make sure the order of the parameters that are passed to this method are as listed above, where the order of the two Gate objects are: westGate, eastGate.</p><p>Set the number of snails in the pen equal to the size of the HERD. The method should run ten iterations of the simulation. In each iteration, randomly select one of the gates to the pen and move a random number of snails through that gate (in or out depending on the swing direction), thus changing the number of snails in the pen and out to pasture (an illustration is shown in Figure 1). Suggestion: to select a random gate, use nextBoolean() to get a random boolean value (only two possible values).</p><p>You must be sure that neither of these numbers (in the pen or out to pasture) is ever negative and that the sum total of snails is always equal to the size of the HERD. If, during some iteration, there are no snails currently out to pasture, then you should not randomly select a gate, but rather would move a random number of snails through the eastGate and out to pasture (an illustration is shown in Figure 2). You must do a similar thing when there are no more snails in the pen.</p><p>Also, the range of random numbers generated should change according to which gate you have selected and how many snails are currently available to go through that selected gate. However, the value should always be greater than zero.</p><p>Print out the status of the gates after creating the objects, after setting (opening) the gates, and the necessary information for each iteration as shown in the example execution of HerdManager.java below. Note that the first output line in the simulateHerd() method has been included in your starter file. Your output format must match the example execution exactly.</p><h4 id="Example-execution-1"><a href="#Example-execution-1" class="headerlink" title="Example execution 1"></a>Example execution 1</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">West Gate: The gate is locked.</span><br><span class="line">East Gate: The gate is locked.</span><br><span class="line"></span><br><span class="line">West Gate: This gate is <span class="keyword">not</span> locked <span class="keyword">and</span> swings <span class="built_in">to</span> enter <span class="keyword">the</span> pen only.</span><br><span class="line">East Gate: This gate is <span class="keyword">not</span> locked <span class="keyword">and</span> swings <span class="built_in">to</span> exit <span class="keyword">the</span> pen only.</span><br><span class="line"></span><br><span class="line">There are currently <span class="number">24</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">0</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line"></span><br><span class="line">There are currently <span class="number">8</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">16</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">6</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">28</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">4</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">20</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">3</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">21</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">2</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">22</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">0</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">24</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">7</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">17</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">6</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">18</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">5</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">19</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">0</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">24</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br></pre></td></tr></table></figure><h4 id="Example-execution-2"><a href="#Example-execution-2" class="headerlink" title="Example execution 2"></a>Example execution 2</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">West Gate: The gate is locked.</span><br><span class="line">East Gate: The gate is locked.</span><br><span class="line"></span><br><span class="line">West Gate: This gate is <span class="keyword">not</span> locked <span class="keyword">and</span> swings <span class="built_in">to</span> enter <span class="keyword">the</span> pen only.</span><br><span class="line">East Gate: This gate is <span class="keyword">not</span> locked <span class="keyword">and</span> swings <span class="built_in">to</span> exit <span class="keyword">the</span> pen only.</span><br><span class="line"></span><br><span class="line">There are currently <span class="number">24</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">0</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line"></span><br><span class="line">There are currently <span class="number">4</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">20</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">3</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">21</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">0</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">24</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">21</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">3</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">11</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">13</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">2</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">22</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">1</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">23</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">0</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">24</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">20</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">4</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br><span class="line">There are currently <span class="number">11</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pen <span class="keyword">and</span> <span class="number">13</span> snails <span class="keyword">in</span> <span class="keyword">the</span> pasture.</span><br></pre></td></tr></table></figure><h3 id="Exercise-2-FillTheCorral-java"><a href="#Exercise-2-FillTheCorral-java" class="headerlink" title="Exercise 2: FillTheCorral.java"></a>Exercise 2: FillTheCorral.java</h3><p>In this exercise, you will build a client program that simulates moving snails from a pasture into four different corrals. It’s a bit of a game really. Following the best practices for writing programs, fill in the methods provided in the starter file to accomplish the following. Use a Random object to initially set each of the four gates to a specific swing direction or closed. So, the gates for each of the four corrals will be set to swing IN to the corral, OUT of the corral, or remain locked (an illustration is shown in Figure 3). Note that one of these gates must be set to IN (more details in a moment).</p><p>The program begins with five snails out to pasture and an infinite number of snails in each corral. A random number of snails, not to exceed the number already out to pasture, attempt to pass through a randomly chosen corral gate.</p>]]></content>
    
    <summary type="html">
    
      本次作业仍然和上次一样，考察Object Oriented Programming的概念，实现一个具有现实意义的小项目。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMS227-Yahtzee-Part2</title>
    <link href="https://tk1307993.coding.me/COMS227-Yahtzee-Part2.html"/>
    <id>https://tk1307993.coding.me/COMS227-Yahtzee-Part2.html</id>
    <published>2019-04-11T12:40:24.000Z</published>
    <updated>2019-04-11T12:43:00.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="YahtzeeGame"><a href="#YahtzeeGame" class="headerlink" title="YahtzeeGame"></a>YahtzeeGame</h3><p>A YahtzeeGame instance is pretty simple: it encapsulates some configuration information (the number of dice, the maximum value on the die faces, and the number of rolls allowed in a round) along with a list of categories. There is no other state information required, since each category object keeps track of the score for that category. The method for returning the total game score just needs to iterate over the scoring categories to add things up.</p><p>One feature that may not be obvious is the method createNewHand(). This method constructs and returns a new Hand object that is based on the attributes of that particular game instance. This way, a client does not have to separately keep track of the number of dice, maximum value, or number of rolls; that information is only stored in the game object. See the UI for sample usage.</p><h3 id="GameFactory"><a href="#GameFactory" class="headerlink" title="GameFactory"></a>GameFactory</h3><p>(Note that the class GameFactory is already implemented. However, you can add to it as you wish for testing and experimentation.)<br>This class has some static methods for creating various games. You can take a look to see how the game constructor is used and how the categories are added to a YahtzeeGame object. This class is used in the sample UI.</p><p>Note that in the sample code, all the calls to the constructors of the Category implementations are commented out. That’s because this code won’t compile until you actually have implementations of the classes that are named there that are subtypes of Category.</p><p>As you complete the implementations, you can start uncommenting the constructor calls to try them out (and uncomment the import statements too).</p><h3 id="The-sample-code"><a href="#The-sample-code" class="headerlink" title="The sample code"></a>The sample code</h3><p>The sample code is an Eclipse project that you can import. See the instructions given for homework 2 if you don’t remember how to import a project.</p><p>There are “complete” skeletons present for Hand and YahtzeeGame classes in package hw3. (The Hand class has the toString method implemented for you already.) You will also find partial skeletons for the 8 required concrete subtypes of Category. Each of these classes has a descriptive javadoc comment and a stub for the required constructor. You will need to add either an implements or extends clause to each of these class declarations to make it a subtype of Category, and add whatever implementation code is necessary for your design, as discussed in the above section “Scoring Categories”.</p><h3 id="About-the-UI"><a href="#About-the-UI" class="headerlink" title="About the UI"></a>About the UI</h3><p>There is a sample user interface TextUIMain provided in the default (top-level) package of the sample code. This code will not run until you have implemented the YahtzeeGame and Hand classes, and you will not be able to play a game until you have started implementing the necessary categories. As you implement and test the categories, you can uncomment the corresponding constructors (and add appropriate import statements) in the GameFactory.</p><p>This is a text-based UI using clunky console I/O. It is not as slick as a graphical UI, but has the advantage that the code is entirely comprehensible, so you can read it to see how the other classes in the application are used. A typical screenshot of a game in progress is shown below.</p><p>The dashed lines in the second column indicate the categories called “Sixes” and “Three of a kind” are already filled, and the rightmost columns show the score and the list of dice for the hand that was used to fill the category. The “You rolled…” shows the current state of our hand. Since the parentheses are nonempty, this is not the first roll in this round. We must have previously chosen to “keep” the 2, 3, and 4 from the previous roll, and we just rolled a 1 and a 6. The second column in the list shows us what potential score we would get in each category for this roll as it stands (e.g. 30 points if we use it to fill the “Small Straight” category, or 16 points if we use it for the “Chance” category). One of our options might be to “keep” the 1 and reroll the 6 in the hope of getting a 5 (that would be a large straight).<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Potential</span> <span class="string">scores</span> <span class="string">for</span> <span class="string">this</span> <span class="attr">roll:</span></span><br><span class="line"> <span class="number">0</span><span class="string">)</span>     <span class="number">1</span> <span class="string">Aces</span></span><br><span class="line"> <span class="number">1</span><span class="string">)</span>     <span class="number">2</span> <span class="string">Twos</span></span><br><span class="line"> <span class="number">2</span><span class="string">)</span>     <span class="number">3</span> <span class="string">Threes</span></span><br><span class="line"> <span class="number">3</span><span class="string">)</span>     <span class="number">4</span> <span class="string">Fours</span></span><br><span class="line"> <span class="number">4</span><span class="string">)</span>     <span class="number">0</span> <span class="string">Fives</span></span><br><span class="line"> <span class="number">5</span><span class="string">)</span>   <span class="meta">---</span> <span class="string">Sixes</span>             <span class="number">12</span> <span class="string">(1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">6</span><span class="string">)</span></span><br><span class="line"> <span class="number">6</span><span class="string">)</span>   <span class="meta">---</span> <span class="number">3</span> <span class="string">of</span> <span class="string">a</span> <span class="string">kind</span>       <span class="number">15</span> <span class="string">(2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span><span class="string">)</span></span><br><span class="line"> <span class="number">7</span><span class="string">)</span>     <span class="number">0</span> <span class="number">4</span> <span class="string">of</span> <span class="string">a</span> <span class="string">kind</span></span><br><span class="line"> <span class="number">8</span><span class="string">)</span>     <span class="number">0</span> <span class="string">Fill</span> <span class="string">House</span></span><br><span class="line"> <span class="number">9</span><span class="string">)</span>    <span class="number">30</span> <span class="string">Small</span> <span class="string">Straight</span></span><br><span class="line"><span class="number">10</span><span class="string">)</span>     <span class="number">0</span> <span class="string">Large</span> <span class="string">Straight</span></span><br><span class="line"><span class="number">11</span><span class="string">)</span>     <span class="number">0</span> <span class="string">Yahtzee</span></span><br><span class="line"><span class="number">12</span><span class="string">)</span>    <span class="number">16</span> <span class="string">Chance</span></span><br><span class="line"><span class="bullet">                          -</span><span class="bullet">----</span></span><br><span class="line"><span class="attr">                   SCORE:</span>    <span class="number">27</span></span><br><span class="line"><span class="string">You</span> <span class="string">rolled</span>  <span class="number">1</span> <span class="number">6</span> <span class="string">(2</span> <span class="number">3</span> <span class="number">4</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="string">Press</span> <span class="string">ENTER</span> <span class="string">to</span> <span class="string">roll</span> <span class="string">available</span> <span class="string">dice,</span> <span class="attr">or:</span></span><br><span class="line"><span class="string">a)</span> <span class="string">keep</span> <span class="string">all</span></span><br><span class="line"><span class="string">b)</span> <span class="string">select</span> <span class="string">dice</span> <span class="string">to</span> <span class="string">keep</span></span><br><span class="line"><span class="string">c)</span> <span class="string">select</span> <span class="string">dice</span> <span class="string">to</span> <span class="string">free</span></span><br><span class="line"><span class="string">Your</span> <span class="attr">choice:</span></span><br></pre></td></tr></table></figure></p><p>You can edit the UI main method to 1) choose a seed for the random number generator, in case you want the dice results to be reproducible while you are developing the code, and 2) to get a different game from the GameFactory. To try a different game from those constructed in the GameFactory, add another static method to GameFactory. (The “factory” keeps the UI from having any direct dependence on any of the specific category classes, so it will continue to work correctly even if you add new or different categories.)</p><h3 id="Testing-and-the-SpecChecker"><a href="#Testing-and-the-SpecChecker" class="headerlink" title="Testing and the SpecChecker"></a>Testing and the SpecChecker</h3><p>As always, you should try to work incrementally and write tests for your code as you develop it. Please do not put your test code in the hw3 package.</p><p>Do not rely on the UI code for testing! Trying to test your code using a UI is generally slow and unreliable. In particular, when we grade your work we are NOT going to run either of UIs, we are going to test that each method works according to its specification.<br>We will provide a basic SpecChecker, but it will not perform any functional tests of your code. At this point in the course, you are expected to be able to read the specfications, ask questions when things require clarification, and write your own unit tests.<br>Since the test code is not a required part of this assignment and does not need to be turned in, you are welcome to post your test code on Piazza for others to check, use and discuss.</p><p>The SpecChecker will verify the class names and packages, the public method names and return types, and the types of the parameters. If your class structure conforms to the spec, you should see a message similar to this in the console output:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x <span class="keyword">out</span> <span class="keyword">of</span> x tests pass.</span><br></pre></td></tr></table></figure></p><p>Note that spec conformance can only be checked for the ten required classes listed at the beginning of this document that are known to the specchecker. Remember that your instance variables should always be declared private, and if you want to add any additional “helper” methods that are not specified, they must be declared private as well.</p><p>This SpecChecker will also offer to create a zip file for you. Note that it will look for the 10 required classes, and it will also zip up all other java files in your hw3 directory. Thus the archive should include any additional classes you added to your inheritance hierarchy, and should NOT include extraneous or unnecessary files such as your unit tests.</p><h3 id="Suggestions-for-getting-started"><a href="#Suggestions-for-getting-started" class="headerlink" title="Suggestions for getting started"></a>Suggestions for getting started</h3><ol><li>The YahtzeeGame class is very straightforward and doesn’t really depend on anything else you’re implementing. It should refer only to the interface Category.</li><li>Hand can also be developed and tested independently. You might start with the constructor that takes an int array, so you can specify starting values, and just implement the method getAll(). Your first attempt may not be sufficient for implementing all the other methods of Hand, but having this much will enable you to start on the scoring categories.</li><li>Although the scoring categories depend on Hand, they can be individually developed and tested with just a simplified, partial implementation of Hand. Within a given category class implementation, the only method of Hand you will need is getAll().</li><li>For the scoring categories, you might start with something like CountOccurrences. Add the clause implements Category and create stubs for the required methods. Write a couple of simple test case and start to implement the methods. (You may later move some of this code into an abstract superclass, but this is a good place to begin.)</li><li>As noted above, you can develop and test all the categories with just that minimal implementation of Hand. Of, course, at some point you’ll need to finish the rest of the Hand methods. As usual, start with some test cases and think about the expected behavior. Start with getAvailableDice(), getFixedDice(), and keep().</li><li>Note that the roll() method of Hand takes a Random as an argument. For testing, you can specify a Random with a known seed to make your test results reproducible.</li><li>Once you have YahtzeeGame, Hand, and CountOccurrences, you can uncomment the constructor in the createReallyTinyGame() method of the GameFactory. Then, you can run the UI and play the Really Tiny Game! Likewise, as you complete and test each of the scoring categories, uncomment the relevant constructor from one of the games in GameFactory and try it out.</li></ol>]]></content>
    
    <summary type="html">
    
      接上一个Part1，这部分是关于Yahtzee这个游戏规则部分以及UI部分的实现。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMS227-Yahtzee-Part1</title>
    <link href="https://tk1307993.coding.me/COMS227-Yahtzee-Part1.html"/>
    <id>https://tk1307993.coding.me/COMS227-Yahtzee-Part1.html</id>
    <published>2019-04-09T12:52:28.000Z</published>
    <updated>2019-04-09T12:59:08.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>For this assignment you will implement a number of classes for an implementation of a dice game based on the game Yahtzee. The purposes of this assignment are:</p><ul><li>To use interfaces and inheritance in a realistic way</li><li>To give you a chance to make some design decisions related to inheritance</li><li>To give you more practice using arrays and ArrayLists</li></ul><h3 id="Summary-of-tasks"><a href="#Summary-of-tasks" class="headerlink" title="Summary of tasks"></a>Summary of tasks</h3><p>You will implement the following classes:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">YahtzeeGame</span></span><br><span class="line"><span class="attribute">Hand</span></span><br></pre></td></tr></table></figure></p><p>plus, at a minimum, the following eight classes, all of which directly or indirectly implement the Category interface:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">AllButOneOfAKind</span></span><br><span class="line"><span class="attribute">AllButTwoOfAKind</span></span><br><span class="line"><span class="attribute">AllOfAKind</span></span><br><span class="line"><span class="attribute">Chance</span></span><br><span class="line"><span class="attribute">CountOccurrences</span></span><br><span class="line"><span class="attribute">FullHouse</span></span><br><span class="line"><span class="attribute">LargeStraight</span></span><br><span class="line"><span class="attribute">SmallStraight</span></span><br></pre></td></tr></table></figure></p><p>All of your code goes in package hw3 . In addition to the classes listed above, you will implement whatever additional classes you decide are necessary in order to exploit inheritance to facilitate code reuse. See the discussion of scoring categories below for more information.</p><p>The exact definition of each of the eight category classes listed above can be found by reading the class javadoc.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Yahtzee is normally played with five six-sided dice and a scorecard. One round consists of rolling the dice up to three times, and then filling one of the categories on the scorecard with a score. The score depends on both the criteria for the category and the actual dice values, and the player will normally choose an unfilled category so as to maximize the resulting score.</p><p>In our version of the game, the number of dice, the maximum value on the dice (i.e., the number of faces), the max number of rolls per round, and the types of categories on the scorecard, will all be configurable.</p><p>If you are not at all familiar with the game, don’t worry, it is not too complicated. Take a look at the Wikipedia page for an overview, <a href="https://en.wikipedia.org/wiki/Yahtzee" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Yahtzee</a></p><p>Note that our version of the game does not include several features described on Wikipedia or in the traditional versions of the game. In particular, we do not distinguish the “upper section” and “lower section” categories, there is no bonus for the “upper section”, there is no special bonus for a second Yahtzee, and there are no jokers.</p><p>The two key abstractions in the design are hands and scoring categories.</p><h3 id="Hands"><a href="#Hands" class="headerlink" title="Hands"></a>Hands</h3><p>A hand, represented by the Hand class that you will implement, is a basically a list of integers representing the current states of all the dice (in the traditional game there would be 5 numbers with possible values 1 through 6). However, the dice are partitioned into two lists: available dice and fixed dice. Initially, all dice are available. When the dice are “rolled”, random values in the appropriate range are generated for the available dice only; the fixed values are not modified. If the maximum number of rolls has not yet been reached, the player can choose to “keep” some of the current available dice values, which means they are moved to the fixed list so they won’t be modified by the next roll. Likewise, the player can choose to “free” any of the fixed values, so they will be re-rolled. Note that in this design, an individual die isn’t represented by a special type of object; a die value is just an integer. All methods that return arrays containing dice values must return the values in ascending order.</p><p>After the maximum number of rolls is reached, all dice are automatically moved to the fixed list and the hand can no longer be modified. A new hand must be created for the next round.</p><p>See the javadoc for details. Also note that the client normally obtains a new Hand using the method createNewHand in the YahtzeeGame class, not by calling the constructor directly. (You can see how this works by reading at the doOneTurn() method of the sample UI.)</p><p>Hand example. Suppose we display a dice group as a string by listing first the available dice and then the fixed dice in parentheses. For example, in a game with 5 dice, after the first roll we might see the values such as this:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> ()</span><br></pre></td></tr></table></figure></p><p>Depending on which scoring categories you need to fill, you might decide to keep 2, 3, and 4 (perhaps in the hope of completing a straight). Now you have<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">6</span> (<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>On the next roll, the 6 and the other 3 are then replaced by random values, but the 2, 3, and 4 you selected remain fixed. If (for example) you now roll a 2 and a 5, you would have<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">5</span> (<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>At this point you could choose to keep the 5 (to make a small straight, maybe hoping the next roll will give you a large straight). Now you have<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span>(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>In the traditional game, you get a maximum of three rolls; in that case if you (for example) rolled a 4, you’d end up with<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>That is, when you reach the maximum number of rolls, all dice are automatically fixed. Once all dice are fixed, we say the hand is complete. At this point in the game, the player chooses one of the scoring categories and uses the completed hand to fill that category.</p><h3 id="Scoring-categories"><a href="#Scoring-categories" class="headerlink" title="Scoring categories"></a>Scoring categories</h3><p>A scoring category represents one row of the score sheet. A category object stores the actual score for that category along with the hand that was used to fill the category. A given category object also contains the algorithms needed to a) determine whether a given hand satisfies the criteria defined for the category (e.g., is it a straight, or three-of-a-kind, or whatever), and b) determine what the potential score would be for a given hand, if it were used to fill that category.</p><p>There are many different possible categories, each with its own particular algorithms. For example, the traditional game has a three-of-a-kind category: a hand satisfies the category if it contains any three numbers that are the same, and it is scored by summing the values of all the dice. The traditional game also has a “large straight” category: a hand satisfies the category if it has 5 consecutive values, and it always receives a fixed score of 40.</p><p>This is where polymorphism becomes useful. The client using this code (e.g., think of the client as the text-based UI provided in the sample code) does not care about the details of what the categories are or how each category calculates its score. The client just needs to be able to invoke methods on a category to find out whether a given dice group satisfies it, what the score would be, and to inform the category when it has been selected to be filled by a given hand.</p>]]></content>
    
    <summary type="html">
    
      作业要求实现一个Yahtzee，即快艇骰子游戏。这个游戏需要了解游戏规则，考察的知识点是继承的运用。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C#代写：CIS340-Campus-Cafeteria</title>
    <link href="https://tk1307993.coding.me/CIS340-Campus-Cafeteria.html"/>
    <id>https://tk1307993.coding.me/CIS340-Campus-Cafeteria.html</id>
    <published>2019-04-07T11:48:38.000Z</published>
    <updated>2019-04-07T10:35:13.144Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Design a Campus Cafeteria application prototype complete with UML design documentation. Your application must match your delivered UML diagrams (all UML must be completed using the Astah UML tool). Your application shall take advantage of the C# programming language to provide a way to rapidly develop a working prototype.</p><p>The application will allow customers (both students &amp; non-students) to purchase meals. Non-students will pay with a card and students will have the option to use their meal plan or pay with a card (in the event they are out of meal credits). A customer will select the meal type and quantity of meals then pay. Students will need to verify their identity to use meal plan credits or select to pay with card. As an incentive, Students who maintain a GPA over 3.5 are given 1 free meal. The Campus is on a tight budget so a limited number of meals will be served for each meal type.</p><p>Your application will utilize an object-oriented design. The delivered project must contain a class called Menu, Customer, and Meal. Certain classes will only be used as a class while others will require objects to be created. The application must have the following requirements:</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ul><li>Menu class (rename program class or create a new class as shown in tutorials. “Program” will not be accepted as a Class name) doesn’t need any attributes. All data items should be declared within the Main method or other methods that are inside your Menu class code block.</li><li>Menu class will perform the following actions (can be methods)</li><li>Customer objects will contain data (all data will be instance variables)</li><li>Customer objects will perform all manipulations on the above customer data</li><li>Meal class/objects will contain data (this can be a class with only static members or used to create objects with instance members. It will depend on how you decide to design the application</li><li>Meal class/objects will perform all manipulations on the above meal data</li></ul><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p>While completing the application, document your application using UML. Create a Class Diagram for your application showing objects, attributes, methods, relationships, relationship text, and multiplicities. In the class diagram make sure to identify the following for all objects:</p><ul><li>Attributes and their data type</li><li>Methods with their defined return type and passing parameters</li><li>For all passing parameters make sure to have the parameter name and data type</li><li>Create relationships based on your code (if a class calls a method in another class there is a relationship).</li></ul>]]></content>
    
    <summary type="html">
    
      这次作业是用C#代写一个校园自助餐厅的应用，实现基本的菜单处理逻辑。UI按照所给的example，用简单的命令行即可。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1300-Working-with-real-data</title>
    <link href="https://tk1307993.coding.me/CSCI1300-Working-with-real-data.html"/>
    <id>https://tk1307993.coding.me/CSCI1300-Working-with-real-data.html</id>
    <published>2019-04-04T11:48:38.000Z</published>
    <updated>2019-04-04T09:21:20.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment you will have the opportunity to apply what you’ve learned this semester about programming to an actual problem and actual data. For this assignment we will use social media data collected during the 2014 Carlton Complex Wildfire in Eastern Washington State. This data set was part of my dissertation research on the integration of public social media communication into emergency response.</p><p>The development of information and communication technologies (ICTs) has changed how members of the public communicate and share information with each other during crisis and disaster events. Researchers in the field of crisis informatics look at social media communications for insight into how these technologies are reshaping the information space surrounding a disaster and provide new ways for the public to participate in both sharing of information and response. My research focuses on the challenges faced by emergency responders as they work to leverage these channels as part of their emergency communications plan and also the solutions being developed to support the monitoring of an often complex and unwieldy information space as events unfold.<br>I work with an innovative group of emergency responders who are part of the social media in emergency management community (SMEM) that have pioneered a new form of digital volunteerism within the emergency response community called a Virtual Operational Support Team (VOST). Members of VOST teams have a mix of social media communication skills and training in public information work and emergency response protocols. During a disaster, a VOST team extends the resources of the emergency response team on the ground coordinating public social media communications and gathering relevant situational awareness information for the incident management team.</p><p>This dataset was taken from the 2014 Carlton Complex Wildfire. The fire started on July 14th, when a lightning storm moved through the Methow Valley in Eastern Washington State. On July 17th, adverse weather conditions caused the fire to grow explosively overnight from approximately forty-nine thousand acres to over a hundred and fifty thousand acres. This rate of fire growth is somewhat unprecedented and the fires burned through the towns of Pateros and Twisp resulting in large-scale evacuations and the destruction of over 300 homes. The fire also destroyed critical infrastructure resulting in widespread power and cellular outages in many place for over a week. The data set for this fire starts on July 17th when Portland NIMO, a federal Type I team, was assigned to the fire and the NIMO VOST was activated until July 27th when the team stood down. The fire ultimately grew to 256 thousand acres making it the largest wildfire in Washington State history (eclipsed by the 2015 Okanogan Complex in the same area a year later).<br>As a researcher on CU’s Project EPIC, my role on the VOST was to provide analytical support to the public information team on the ground using data collected through the Twitter API. I developed Python scripts that expanded the links to embedded content and massaged the data in useful ways for analysis in Tableau, a data visualization tool. At the end of each day, I worked on a comprehensive summary that was forwarded to the public information team as a reference for the morning briefing the following day.</p><p>Twitter is a particularly interesting platform for analysis during a disaster because the Twitter stream can show you what is relevant in the moment across a wide variety of sources. The ability to retweet information reinforces its currency and acts as recommendation to others in a Twitterer’s network or following the conversation. In addition, the ability to embed links and media provides visibility to what is being shared across multiple social media platforms simultaneously.</p><h3 id="Data-Set-Description"><a href="#Data-Set-Description" class="headerlink" title="Data Set Description"></a>Data Set Description</h3><p>The full dataset for this fire contains over 24 thousand tweets and related information. I hava created multiple data extract files from this dataset so that you can work with information on a more manageable scale.</p><p>As part of the analysis, we coded the most commonly occurring sources of information (Twitter accounts and URL domains) using the following values:</p><h3 id="Tweet-extracts"><a href="#Tweet-extracts" class="headerlink" title="Tweet extracts"></a>Tweet extracts</h3><p>Each row in the tweet extracts is an individual tweet and contains the following columns:</p><h3 id="A-final-message"><a href="#A-final-message" class="headerlink" title="A final message"></a>A final message</h3><p>After the user selects No, and you exit your loop, you need to print another message to the user. In this message, briefly explain the easiest, hardest, and most and least enjoyable portions of this project. Then, exit the program.</p><h2 id="Implementation-Details-Technical-Requirements"><a href="#Implementation-Details-Technical-Requirements" class="headerlink" title="Implementation Details/ Technical Requirements"></a>Implementation Details/ Technical Requirements</h2><h3 id="Store-data-from-the-files-in-an-object"><a href="#Store-data-from-the-files-in-an-object" class="headerlink" title="Store data from the files in an object"></a>Store data from the files in an object</h3><p>Your program needs to have at least one class. A technical requirement of this project is that you create a class to support the functionality of the program. The class(es) you create will depend on the problem and data you are working with. For instance, if you are working with individual tweets you may need a Tweet class. If you are working geocoded tweets you may also want a Geocode class that stores the latitude /longitude data.</p><p>The first thing your program needs to do, even before displaying the welcome message, is input the data from the txt files. Data should be read in from the files and stored in the appropriate variable in your class to support what your program does. You should structure your program to read in all data only one time.</p><h3 id="Other-requirements"><a href="#Other-requirements" class="headerlink" title="Other requirements:"></a>Other requirements:</h3><ol><li>All variables in your class need to be private and accessed through public methods. For example, if one of the class variables is latitude then you will need getLatitude() and setLatitude() methods.</li><li>You need at least three objects. For example if you create a class Tweet, then you need at least three instances of Tweet in your program.</li><li>You are welcome to generate new data files to support your program’s functionality. For example, if you are working with the URL domains extract, you may want to limit your analysis to domains that occur at least 25 times. The data in these sub-extracts is sorted by count, so you can import the .csv file into Excel and delete the rows that fall below 25. You can also write a program or talk to us about the specific slice of data you are interested in.</li><li>If you store data in an array, you can create an array that is larger than you need and leave some of it unused. Look at the arrays in the AppleFarmer class for an example of what you might do for this assignment. You will need to keep track of how much ofthe array is used. The technique for doing this is the same as using the Curren tDay variable in AppleFarmer.</li><li>The easiest way to read the .csv files is to use getline() for each line in the file and then use stringstream to parse the line. 6. There are examples of how to do both of these things in notes provided on the Moodle.</li><li>When you submit your program, include all data files you used in your project directory.</li></ol>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业是处理一个真实的数据集，并按照需求所给的信息展示数据。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CSCI141-Blackout-Math</title>
    <link href="https://tk1307993.coding.me/CSCI141-Blackout-Math.html"/>
    <id>https://tk1307993.coding.me/CSCI141-Blackout-Math.html</id>
    <published>2019-03-29T13:37:17.000Z</published>
    <updated>2019-03-29T10:38:13.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ploblem"><a href="#Ploblem" class="headerlink" title="Ploblem"></a>Ploblem</h3><p>Blackout Math is a puzzle in which you are given an incorrect arithmetic equation, such as this one:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">288 </span>/ <span class="number">24</span> × <span class="number">6</span> = <span class="number">18</span> × <span class="number">13</span> × <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>To solve the puzzle, figure out which two squares must be blacked out to create a correct equation. Blacked out squares are simply skipped over when reading the new equation. Note that you can choose to black out an operation — for example, if you black out the last multiplication sign, the right side would read 18 x 138. You are not allowed to black out the equal sign!<br>In this particular instance of the puzzle, the answer is as follows:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">288 </span>/ <span class="number">4</span> × <span class="number">6</span> = <span class="number">18</span> × <span class="number">3</span> × <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>as both sides of the equation now evaluate to 432.<br>Here is another puzzle for you to try:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">168 </span>/ <span class="number">24</span> + <span class="number">8</span> = <span class="number">11</span> × <span class="number">3</span> - <span class="number">16</span></span><br></pre></td></tr></table></figure></p><p>In this project, you will develop a program that reads in Blackout Math puzzles from a file and determines their solutions.</p><h3 id="Building-your-solution"><a href="#Building-your-solution" class="headerlink" title="Building your solution"></a>Building your solution</h3><p>Once your solution is complete, it will work as follows:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Open up <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">of</span> Blackout Math puzzles</span><br><span class="line">  For <span class="keyword">each</span> puzzle:</span><br><span class="line">    For <span class="keyword">each</span> possible pair <span class="keyword">of</span> <span class="keyword">characters</span> <span class="keyword">in</span> <span class="keyword">the</span> puzzle</span><br><span class="line">      Determine <span class="keyword">the</span> <span class="keyword">string</span> that results <span class="built_in">from</span> deleting those <span class="keyword">characters</span></span><br><span class="line">      Compute <span class="keyword">the</span> <span class="built_in">value</span> <span class="keyword">of</span> <span class="keyword">each</span> side <span class="keyword">of</span> <span class="keyword">the</span> equation</span><br><span class="line">      If <span class="keyword">the</span> <span class="literal">two</span> sides have <span class="keyword">the</span> same <span class="built_in">value</span>, success!</span><br></pre></td></tr></table></figure></p><p>However, it will be easier to build your solution from the inside out — that is, first create a function that computes the value of one side of one equation, then use that to build a checker for a single puzzle, and so on. Here we will give you some hints for how to complete this process.</p><h3 id="Computing-the-value-of-an-expression"><a href="#Computing-the-value-of-an-expression" class="headerlink" title="Computing the value of an expression"></a>Computing the value of an expression</h3><p>Consider the following string: 5 × 2 + 3 – going from left to right, your program will have to check whether each character represents a digit or an operation, and keep a running total of the current value of the expression. Also note that when you come to a number, you have to remember what the last character was – knowing only that the current character is a 3 only helps if you know that you were supposed to add it to the previous value of the expression! The Python function isdigit will be helpful for this process. To get started, write a skeleton of a compute function that takes a string and goes through it character by character, converting the numbers to ints and printing “add”, “subtract”, “multiply” or “divide” for each operation as they are encountered.</p><p>Now, consider the expression 5 + 2 × 3 – if we parse this string from left to right (as we would usually process it in a loop), we will get 21, but according to the standard order of operations, we should do the multiplication first, then the addition, to get 11. In effect, when going left-to-right, we need to delay the addition until the multiplication has been completed. One way to do that is to save the addition on a stack, then pop it off the stack and execute it once the multiplication has finished. You also need to save the numbers themselves on a separate stack until they are needed. Of course, if you have multiple additions or subtractions in a row, then you need to only save the last one, so when you see a second addition or subtraction, you need to compute the result of the first before saving the result and the most recent operation.</p><p>If we have parentheses as well, this also can be easily handled with a stack, again essentially forcing the contents of the parentheses to happen first.</p><p>The pseudocode for handling order-of-operations (for just the four standard operations plus parentheses) using a pair of stacks is as follows:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Determine what <span class="keyword">the</span> next <span class="keyword">item</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">string</span> is, call this X</span><br><span class="line">If X is <span class="keyword">a</span> <span class="built_in">number</span>, push <span class="keyword">it</span> onto <span class="keyword">the</span> <span class="built_in">number</span> stack</span><br><span class="line">If X is <span class="keyword">any</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="literal">four</span> arithmetic operations:</span><br><span class="line">  While <span class="keyword">the</span> top <span class="keyword">of</span> <span class="keyword">the</span> operation stack is equal <span class="keyword">or</span> higher precedence <span class="built_in">to</span> X:</span><br><span class="line">    Pop <span class="keyword">the</span> top <span class="literal">two</span> numbers <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">number</span> stack <span class="keyword">and</span> <span class="literal">one</span> operation <span class="built_in">from</span> <span class="keyword">the</span> operation stack</span><br><span class="line">    Apply <span class="keyword">the</span> operation that you just popped, push <span class="keyword">the</span> <span class="built_in">result</span> onto <span class="keyword">the</span> <span class="built_in">number</span> stack</span><br><span class="line">  Push X onto <span class="keyword">the</span> operation stack</span><br><span class="line">If X is (, push <span class="keyword">it</span> onto <span class="keyword">the</span> operation stack</span><br><span class="line">If X is ),</span><br><span class="line">  While <span class="keyword">the</span> top <span class="keyword">of</span> <span class="keyword">the</span> operation stack is <span class="keyword">not</span> <span class="string">'('</span>:</span><br><span class="line">    Pop <span class="keyword">the</span> top <span class="literal">two</span> numbers <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">number</span> stack <span class="keyword">and</span> <span class="keyword">the</span> top operation <span class="built_in">from</span> <span class="keyword">the</span> operation stack</span><br><span class="line">    Apply <span class="keyword">the</span> operation that you just popped, push <span class="keyword">the</span> <span class="built_in">result</span> onto <span class="keyword">the</span> <span class="built_in">number</span> stack</span><br><span class="line">    Pop off <span class="keyword">the</span> (</span><br><span class="line">Once you reach <span class="keyword">the</span> <span class="function"><span class="keyword">end</span> <span class="title">of</span> <span class="title">the</span> <span class="title">input</span>, <span class="title">while</span> <span class="title">the</span> <span class="title">stacks</span> <span class="title">are</span> <span class="title">not</span> <span class="title">empty</span>:</span></span><br><span class="line">  Pop <span class="keyword">the</span> top <span class="literal">two</span> numbers <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">number</span> stack <span class="keyword">and</span> <span class="keyword">the</span> top operation <span class="built_in">from</span> <span class="keyword">the</span> operation stack</span><br><span class="line">  Apply <span class="keyword">the</span> operation that you just popped, push <span class="keyword">the</span> <span class="built_in">result</span> onto <span class="keyword">the</span> <span class="built_in">number</span> stack</span><br></pre></td></tr></table></figure></p><p>To get a feel for how and why this works, trace this pseudocode for the input 2 + 5 × (6 - 3) - 6 by noting what is in each stack after reading each character.</p><p>Finally, consider the string 5 × 12 + 3 – in this case, when you come to a number, you cannot count on it being immediately used. Instead, you have to continue building up the value of the current number until you read an operation, then you can incorporate that into the expression. Figure out what happens when the 1 is read by your function, then the 2, and finally the +. Modify your compute function to handle the case of multi-digit numbers. As above, trace the correct execution on paper and then test the code on a few different cases.</p><h3 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h3><p>In many cases in this course, we do not worry about handling errors in input as they are not critical to the problem at hand. However, in this case, we can expect “errors” to occur when parsing. This is because we will be deleting arbitrary characters from the puzzle. For example, when trying to solve our first example 288 / 24 × 6=18 × 13 × 8 we might try deleting the 6, leaving a left side of 288 / 24×. We know right away that this is not a possible solution to the puzzle, but our compute function must still handle this gracefully. Luckily, the stack-based algorithm will handle most of these cases easily – if we get to the end of the input and have anything other than one number and no operators left, there was erroneous input. Other error cases that you may discover can also be dealt with via the parsing algorithm itself.</p><h3 id="Testing-whether-an-equation-is-correct"><a href="#Testing-whether-an-equation-is-correct" class="headerlink" title="Testing whether an equation is correct"></a>Testing whether an equation is correct</h3><p>Once we can evaluate a single expression, it is simple to compute whether two sides of an equation are equal. You may find the Python functions find (with slicing) or split useful to locate the equal sign in your equation (if it still has one!). Write a function called test that takes in a string and uses your compute function to decide if the string represents the correct solution to a Blackout Math puzzle.</p><h3 id="Computing-all-possible-pairs-of-characters"><a href="#Computing-all-possible-pairs-of-characters" class="headerlink" title="Computing all possible pairs of characters"></a>Computing all possible pairs of characters</h3><p>To solve a Blackout Math puzzle, you have to find the two squares to black out, or in our case, two characters to remove from the string. For a computer, the simplest thing to do is simply to test all possible pairs of characters. Note that although the two examples in this writeup are the same length, not all Blackout Math puzzles will be.</p><p>Write a function solve that takes in a full Blackout Math puzzle as a string and loops through all possible pairs of characters. For each pair of characters, create the string that results when those two characters are removed, and use your evaluate function to see which of those represents the solution! This is a good time to make sure that your error handling works, as this loop will send many malformed equations to your evaluate function – consider how compute will report errors, and how evaluate will handle them. Remember, that the two characters that are removed COULD be on the same side of the equals sign.</p><h3 id="Using-a-binary-tree-to-compute-all-possible-solutions"><a href="#Using-a-binary-tree-to-compute-all-possible-solutions" class="headerlink" title="Using a binary tree to compute all possible solutions"></a>Using a binary tree to compute all possible solutions</h3><p>Now that you have done this for all possible combinations of two blacked out characters, you need to now do it for any arbitrary number of blacked out characters.</p><p>To do this you are required to use a binary tree. The tree will be structured such that all leaf nodes of the tree are all possible combinations of blacked out characters.</p><p>The left child of the tree will be the equation with the current character blacked out. The right child will be the equation with the current character not blacked out.</p><p>To construct the tree you will consider one character at a time in the equation. You will make two children, one with the current value blacked out and one with the value not blacked out. Each level of the tree will represent all possible combinations of a new character character being added to the statement.</p><p>Your function for making the tree will be recursive in nature, as recursion is the easiest way to process a binary tree.<br>Psuedocode for making the tree:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def makeTree( equation, <span class="built_in">value</span> ):</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">the</span> equation is <span class="literal">empty</span>, we have reached <span class="keyword">the</span> leaves <span class="keyword">of</span> this branch:</span><br><span class="line">    <span class="built_in">set</span> left <span class="keyword">and</span> <span class="literal">right</span> children <span class="built_in">to</span> None</span><br><span class="line">  otherwise:</span><br><span class="line">    we need <span class="built_in">to</span> <span class="built_in">create</span> <span class="keyword">the</span> left <span class="keyword">and</span> <span class="literal">right</span> children:</span><br><span class="line">    - left will be <span class="keyword">a</span> recursive call <span class="built_in">to</span> make tree <span class="keyword">with</span>:</span><br><span class="line">      - <span class="keyword">the</span> <span class="keyword">first</span> <span class="keyword">character</span> removed <span class="built_in">from</span> <span class="keyword">the</span> equation</span><br><span class="line">      - <span class="keyword">the</span> same <span class="built_in">value</span></span><br><span class="line">    - <span class="literal">right</span> will be <span class="keyword">a</span> recursive call <span class="built_in">to</span> make tree <span class="keyword">with</span>:</span><br><span class="line">      - <span class="keyword">the</span> equation <span class="keyword">with</span> <span class="keyword">the</span> <span class="keyword">first</span> <span class="keyword">character</span> removed</span><br><span class="line">      - <span class="keyword">the</span> <span class="keyword">first</span> <span class="keyword">character</span> <span class="keyword">of</span> <span class="keyword">the</span> equation appended <span class="built_in">to</span> <span class="keyword">the</span> <span class="built_in">value</span></span><br><span class="line">  make <span class="keyword">a</span> binary tree node <span class="keyword">with</span> <span class="keyword">the</span> left, <span class="literal">right</span>, <span class="keyword">and</span> current <span class="built_in">value</span></span><br><span class="line">  <span class="literal">return</span> <span class="keyword">the</span> binary tree node</span><br></pre></td></tr></table></figure></p><p>In the case of the tree presented above, there are no valid solutions. These trees can get large. There are actually 2 n possible leaf nodes, where n is the length of the equation. For example, the equation 3 + 2 / 5 = 5 + 3 × 2 will have 2 11 possible leaf nodes. That’s 2048 leaf nodes!</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>As you develop your solution, make sure to thoroughly test each function as well as the overall solution. For the compute function, it probably makes sense to test simple expressions first, then more complex ones (including parentheses), and finally ones that will cause errors of various kinds.</p><p>For the overall solution, you should test some different puzzles including some of your own creation (making a puzzle isn’t that hard!). Make sure that your code works for all the puzzles – but we will not test with any puzzle that does not have a solution. Note that some puzzles, such as the one given at the top of this assignment, do not rely on order of operations, so can be used for testing whether or not you have implemented that algorithm.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的Python作业是解Blackout Math问题，也就是算数挖空，类似于九宫格游戏，不过多了运算符号，而且是挖数字而不是填数字。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMPSCI230-Bouncing-Program</title>
    <link href="https://tk1307993.coding.me/COMPSCI230-Bouncing-Program.html"/>
    <id>https://tk1307993.coding.me/COMPSCI230-Bouncing-Program.html</id>
    <published>2019-03-26T13:37:17.000Z</published>
    <updated>2019-03-26T13:41:16.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction-The-Bouncing-Program"><a href="#Introduction-The-Bouncing-Program" class="headerlink" title="Introduction - The Bouncing Program"></a>Introduction - The Bouncing Program</h3><p>The application, as given, is a simple bouncing program. Different shapes move around in various paths.</p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>The user can create a new shape by clicking anywhere within the panel area of the program. The properties of the newly created shape are based on the current values saved in the appropriate UI fields (e.g. height, width etc).</p><h3 id="Selecting-deselecting-shapes"><a href="#Selecting-deselecting-shapes" class="headerlink" title="Selecting/deselecting shapes:"></a>Selecting/deselecting shapes:</h3><p>A user can select a shape by clicking anywhere on the shape. If a shape is selected, all its handles are shown. The user can change the path types/widths/heights for all selected shapes by changing the current values with the help of the tools provided at the top of the application interface. (But the shape type can’t be modified once a shape has been created.)</p><p>Clicking on a selected shape will deselect it.</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="Shape-Combo-Box"><a href="#Shape-Combo-Box" class="headerlink" title="Shape Combo Box"></a>Shape Combo Box</h3><p>The ‘Shape’ combo box sets the current shape type for new shapes. Clicking in the panel area for Shape Creation will create the selected type of the shape. A rectangle or a circle can be selected in the program.</p><h3 id="Path-Combo-Box"><a href="#Path-Combo-Box" class="headerlink" title="Path Combo Box"></a>Path Combo Box</h3><p>Users may select one of several moving paths for shapes from the ‘Path’ combo box. Selecting a new path changes the path of all currently selected shapes. Additionally, the new path becomes the current path for any new shapes that are created.</p><h3 id="Width-TextField"><a href="#Width-TextField" class="headerlink" title="Width TextField"></a>Width TextField</h3><p>Users may change the current width of new shapes and currently selected shapes by entering a valid number in the width text field and pressing “ENTER”.</p><h3 id="Height-TextField"><a href="#Height-TextField" class="headerlink" title="Height TextField"></a>Height TextField</h3><p>Users may change the current height of new shapes and currently selected shapes by entering a valid number in the height text field and pressing “ENTER”.</p><h3 id="Border-Colour-Button"><a href="#Border-Colour-Button" class="headerlink" title="Border Colour Button"></a>Border Colour Button</h3><p>Users may change the current border colour of new shapes and currently selected shapes by selecting a colour from the colour dialog box and pressing “OK”.</p><h3 id="Start-Button"><a href="#Start-Button" class="headerlink" title="Start Button"></a>Start Button</h3><p>Starts the animation.</p><h3 id="Stop-Button"><a href="#Stop-Button" class="headerlink" title="Stop Button"></a>Stop Button</h3><p>Stops the animation.</p><h3 id="Animation-Slider"><a href="#Animation-Slider" class="headerlink" title="Animation Slider"></a>Animation Slider</h3><p>Users may use the animation delay slider to adjust the speed of the animation.</p><h3 id="Popup-Menu"><a href="#Popup-Menu" class="headerlink" title="Popup Menu"></a>Popup Menu</h3><p>The application has a popup menu, which is activated by clicking the right mouse button anywhere in the panel area (on a windows machine). The popup menu contains a menu item called “Clear All” which allows the user to clear all shapes from the program.</p><h3 id="What-you-are-to-do"><a href="#What-you-are-to-do" class="headerlink" title="What you are to do"></a>What you are to do</h3><p>Firstly, become familiar with the program supplied. The files included in the program are as follows:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A2.java</span><br><span class="line">AnimationPanel.java</span><br><span class="line">MovingShape.java</span><br><span class="line">MovingRectangle.java</span><br></pre></td></tr></table></figure></p><p>Download all source files from the assignment course page. The design and implementation of the program will be covered in lectures, please refer to the relevant material. It is strongly recommended to start as early as you can and implement the parts you know as soon as they are taught in lectures.</p><p>Your assignment is divided into several stages for ease of completion. Please complete the assignment in order of the stages.</p><h3 id="Stage-1-Using-An-ArrayList-10-marks"><a href="#Stage-1-Using-An-ArrayList-10-marks" class="headerlink" title="Stage 1: Using An ArrayList (10 marks)"></a>Stage 1: Using An ArrayList (10 marks)</h3><p>In this part you are required to modify classes in A2 which enable users to store instances of shapes using an ArrayList.</p><h3 id="Stage-2-Pen-Width-5-marks"><a href="#Stage-2-Pen-Width-5-marks" class="headerlink" title="Stage 2: Pen Width (5 marks)"></a>Stage 2: Pen Width (5 marks)</h3><p>In this part you are required to modify classes in A2 which enable users to change the pen width of all the currently selected shapes and the current pen width that will be used when creating new shapes.</p><p>You are required to add a setCurrentPenWidth() method into the AnimationPanel class in order to set the pen width of all the currently selected shapes and the pen width that will be used when creating new shapes. You are also required to add a getCurrentPenWidth() method into the AnimationPanel class to return the CURRENT pen width.</p><p>You should add the set and get methods to the MovingShape class in order to set or get the pen width of shapes. You should also modify the draw method of MovingRectangle class (and all subclasses) in order to use the pen width attribute stored in the superclass to draw the shape.</p><h3 id="Stage-3-Adding-new-Shapes-25"><a href="#Stage-3-Adding-new-Shapes-25" class="headerlink" title="Stage 3: Adding new Shapes (25%)"></a>Stage 3: Adding new Shapes (25%)</h3><p>The MovingShape is an abstract class which contains two abstract methods: draw and contains. You are required to add new subclasses. You may need to implement some or all abstract methods for the new shapes. You may also need to add a private instance field to store a specific property of the new shape. You will need to think carefully on the structure of the inheritance hierarchy.</p><h3 id="Stage-3B-MovingPolygon-Class-10-marks"><a href="#Stage-3B-MovingPolygon-Class-10-marks" class="headerlink" title="Stage 3B: MovingPolygon Class (10 marks)"></a>Stage 3B: MovingPolygon Class (10 marks)</h3><p>You are required to add a new class to the bouncing program. This class should draw a polygon based on the current width, height, pen width, border colour and the bouncing path stored in the AnimationPanel. Some examples are shown in the following diagram. You can choose any one or all of them.</p><h3 id="Stage-3C-MovingRotatingSquare-Class-10-marks"><a href="#Stage-3C-MovingRotatingSquare-Class-10-marks" class="headerlink" title="Stage 3C: MovingRotatingSquare Class (10 marks)"></a>Stage 3C: MovingRotatingSquare Class (10 marks)</h3><p>You are required to add a new class to the bouncing program. This class should draw a list of rotating squares based on the current width, height, pen width, border colour and the bouncing path stored in the AnimationPanel. Some examples are shown in the following diagram.</p><p>You may need to use methods from the AffineTransform class to rotate squares.</p><h3 id="Stage-4-Adding-a-New-Path-10-marks-JumpingPath-class"><a href="#Stage-4-Adding-a-New-Path-10-marks-JumpingPath-class" class="headerlink" title="Stage 4: Adding a New Path (10 marks): JumpingPath class"></a>Stage 4: Adding a New Path (10 marks): JumpingPath class</h3><p>In this part, you are required to add a jumping path to the bouncing program.</p><p>The MovingPath is an abstract inner class which contains an abstract method. You are required to add a new subclass which extends the MovingPath. You may need to add a private instance field to store a specific property of the new path. You will need to think carefully on the structure of the inheritance hierarchy.</p><h3 id="A2-amp-MovingShape"><a href="#A2-amp-MovingShape" class="headerlink" title="A2 &amp; MovingShape"></a>A2 &amp; MovingShape</h3><p>Next, you are required to add a new ImageIcon to the ‘Path’ combo box control in the A2 class for the new type of path. You are also required to modify the setPath method in the MovingShape class which allows users to create a new subclass instance. An example is shown as below:</p><h3 id="Assessment-criteria"><a href="#Assessment-criteria" class="headerlink" title="Assessment criteria"></a>Assessment criteria</h3><ul><li>Users should be able to add a new shape which bounce off using the jumping path idea.</li><li>Users should be able to change the bouncing path of the selected shapes to the jumping path.</li></ul>]]></content>
    
    <summary type="html">
    
      这次需要代写的Java作业是完善一个UI程序，需要使用面向对象编程设计，特别是OOP中的继承和多态。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS3410-Game-Design</title>
    <link href="https://tk1307993.coding.me/CS3410-Game-Design.html"/>
    <id>https://tk1307993.coding.me/CS3410-Game-Design.html</id>
    <published>2019-03-23T07:20:29.000Z</published>
    <updated>2019-03-23T07:22:32.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><h4 id="Flexible-design-Demonstrate-flexibility-by"><a href="#Flexible-design-Demonstrate-flexibility-by" class="headerlink" title="Flexible design. Demonstrate flexibility by:"></a>Flexible design. Demonstrate flexibility by:</h4><p>Implementing at least two different versions for one or a set of features. The variation needs to be behavioural, not parametric. For example, writing a game where the user drives a car and the bitmap image of the car can be changed, or changing the probability of an event happening, will not be considered a variation that fulfills this requirement.</p><p>Showing that adding versions to the set of features is achieved by adding new code rather than by modifying existing code.</p><h4 id="Reliable-code-Demonstrate-reliability-by"><a href="#Reliable-code-Demonstrate-reliability-by" class="headerlink" title="Reliable code. Demonstrate reliability by:"></a>Reliable code. Demonstrate reliability by:</h4><p>Arguing that a significant set of features have corresponding test cases.</p><p>You demo a relatively stable version of your project and no errors occur during the demo.</p><p>You have an effective resource management policy. For example, you can use “valgrind” to check and show evidence of the effectiveness of your memory management scheme, or you can use smart pointers, if applicable.</p><h4 id="Reasonable-scope-Show-that-your-project-is-not-trivial"><a href="#Reasonable-scope-Show-that-your-project-is-not-trivial" class="headerlink" title="Reasonable scope. Show that your project is not trivial:"></a>Reasonable scope. Show that your project is not trivial:</h4><p>Describe the features of your project by describing use case stories (an example is in your textbook), or listing the features that you implemented (you can include your test lists annotated with explanations so that the test list makes sense to an outside reader).</p><p>Provide code statistics. Tools for this purpose exist. For example, you can look at: CCCC (C and C++ Code Counter, <a href="http://sourceforge.net/projects/cccc/" target="_blank" rel="noopener">http://sourceforge.net/projects/cccc/</a> ).</p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation:"></a>Implementation:</h3><p>Source code commented using doxygen.</p><p>Source code naming and formatting conventions are consistent.</p><p>Building from sources is clearly explained and appropriately managed.</p><p>Use of a version control system is absolutely necessary. Show evidence that every team member has contributed code to the project. Bitbucket, for example, has the ability to show the users who have pushed commits to the remote repository. Every member should have at least one commit used in the project.</p><h3 id="FINAL-PROJECT-REPORT-grading-scheme"><a href="#FINAL-PROJECT-REPORT-grading-scheme" class="headerlink" title="FINAL PROJECT REPORT (grading scheme)"></a>FINAL PROJECT REPORT (grading scheme)</h3><p>Provide evidence that you fulfill each of the four requirements above (10% allocated for each requirement, total 40%). Please note that claims of the type “our implementation used shared_ptr classes” or “we have written a lot of code” are only claims. They need to be followed by evidence such as reference to the source code or doxygen documentation, or code statistics. Your report need not fill many pages, but it should be to the point. Please avoid double space lines and verbose formulations.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的游戏自由发挥，游戏内容不限
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop代写：CS1003-Data-Processing-with-MapReduce</title>
    <link href="https://tk1307993.coding.me/CS1003-Data-Processing-with-MapReduce.html"/>
    <id>https://tk1307993.coding.me/CS1003-Data-Processing-with-MapReduce.html</id>
    <published>2019-03-20T13:49:54.000Z</published>
    <updated>2019-03-20T13:54:06.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Key-Competency"><a href="#Key-Competency" class="headerlink" title="Key Competency"></a>Key Competency</h3><ul><li>using MapReduce to process data</li></ul><h3 id="Necessary-Skills"><a href="#Necessary-Skills" class="headerlink" title="Necessary Skills"></a>Necessary Skills</h3><ul><li>expressing an algorithm in the MapReduce style</li><li>choosing appropriate classes and methods from the MapReduce API</li><li>testing and debugging</li><li>writing clear, tidy, consistent and understandable code</li></ul><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>The practical involves manipulating fairly large data files using the Hadoop implementation of MapReduce.</p><p>When working in the lab, it is highly recommended that you copy a small subset of these files to your local machine under /cs/scratch/username , and use them to develop and test your program. Do not use the input files directly from studres or your home folder as this will exhaust the network.</p><p>Your program should perform the following operations:</p><ul><li>Obtain the absolute paths of the input and output directories from the user. The input must be read in from files in the input directory, and must be written to files in the output directory.</li><li>Find all character level or word level n-grams for text fragments contained within files in the given input directory written in a given language, depending on the user’s input</li><li>Print the list of n-grams and their frequency to a file in the output directory, in alphabetical order</li></ul><p>Your program should deal gracefully with possible errors such as the web resource file being unavailable, or the response containing data in an unexpected format. The source code for your program should follow common style guidelines, including:</p><ol><li>formatting code neatly</li><li>consistency in name formats for methods, fields, variables</li><li>avoiding embedded “magic numbers” and string literals</li><li>minimising code duplication</li><li>avoiding long methods</li><li>using comments and informative method/variable names to make the code clear to the reader</li></ol><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Hand in via MMS, a zip file containing the following:</p><p>Your Java source files</p><ul><li>A brief report (maximum 3 pages) explaining the decisions you made, how you tested your program, and how you solved any difficulties that you encountered. Include instructions on how to run your program and any dependencies that need resolving. You can use any software you like to write your report, but your submitted version must be in PDF format.</li><li>Also within your report:</li><li>Highlight one piece of feedback from your previous submissions, and explain how you used it to improve this submission</li><li>If you had to carry out a similar large-scale data processing task in future, would you choose Hadoop or basic file manipulation as you did in earlier practicals? Write a brief comparison of the two methods, explaining the advantages and disadvantages of each, and justify your choice.</li></ul><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><p>If you wish to experiment further, you could try any or all of the following:</p><ol><li>Give the user an option to order the n-grams by occurrence frequency. Hint: You could use the ‘Most Popular Word’ example on studres as a starting point.</li><li>Perform additional queries on the data, such as:<ol start="2"><li>a. Count all text fragments containing a given string by the user in a given language</li><li>b. Find which word occurs in the highest number of different languages</li><li>c. Any other additional statistics/queries about the data you could generate using Hadoop</li></ol></li></ol><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>Here is one possible sequence for developing your solution. It is recommended that you make a new method or class at each stage, so that you can easily go back to a previous stage if you run into problems. Please use demonstrator support in the labs whenever possible.</p><ol><li>You will need to examine the structure of the data files, to see how the text fragments and language specifications are represented.</li><li>Tackle one problem at a time, beginning with selecting all text in a particular language, which requires a mapper class but no reducer. Initially, you can use a fixed search language String in your mapper class for testing purposes.</li><li>To select only text in the required language, the difficulty is that the language is recorded in a different line from the text fragment, so will be processed in a different call to map. This can be solved using a field in the mapper object to record the most recently encountered language. The map method can then either update this field, if the current line contains a language, or check the language field value, if the current line contains a text fragment.</li><li>To test, first make a new directory and copy 10 or 20 of the data files into it—the full data set will take inconveniently long to run.</li><li>Once this works, refine your solution so that the search language is passed as a parameter. Recall that you can pass a parameter value to a mapper or reducer by calling the method.</li><li>To return text in the specified language as n-grams, you will need to also pass the user’s specified n-gram type and size as parameters, using the same methods in Step 5. Following this, it is recommended that you reuse your n-gram creation code from Practical 2 to split each String into its corresponding n-grams. Remember that, unlike Practical 2, you do not need to represent word boundaries with an underscore.</li><li>In order to output the n-gram frequencies alongside the n-grams themselves, you will need to implement a reducer class that groups duplicate n-grams and sums their total frequency. For a reminder of how to do this, review the ‘Word Count’ example on studres.</li><li>For ordering your output n-grams, recall that sorting order is specified with the setOutputKeyComparatorClass method of the JobConf class.</li></ol>]]></content>
    
    <summary type="html">
    
      这个代写的作业是使用Hadoop来处理数据，搭建Hadoop平台，分析数据，编写对应的Map函数和Reduce函数来完成。
    
    </summary>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/categories/Hadoop/"/>
    
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Operating System代写：COMP3080-File-Description</title>
    <link href="https://tk1307993.coding.me/COMP3080-File-Description.html"/>
    <id>https://tk1307993.coding.me/COMP3080-File-Description.html</id>
    <published>2019-03-17T11:48:38.000Z</published>
    <updated>2019-03-17T11:51:26.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The program you will write will accept from 0 to an arbitrary number of command line file names and produce an output structure for each identified file (or all files in the working directory if no command line file names are listed) as shown below:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FILENAME</span><br><span class="line">FILE_TYPE</span><br><span class="line">PERMISSIONS</span><br><span class="line">OWNER_NAME</span><br><span class="line">GROUP_NAME</span><br><span class="line">DATE_OF_LAST_MODIFICATION</span><br><span class="line">LINK_COUNT</span><br><span class="line">SIZE_IN_BYTES <span class="keyword">OR</span> DEV INFO</span><br><span class="line">INODE_NUMBER</span><br></pre></td></tr></table></figure></p><p>Example:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">FILENAME:</span></span><br><span class="line">alpha</span><br><span class="line"><span class="symbol">FILE_TYPE:</span></span><br><span class="line">ordinary</span><br><span class="line"><span class="symbol">PERMISSIONS:</span></span><br><span class="line">rw- r-- r--</span><br><span class="line"><span class="symbol">OWNER_NAME:</span></span><br><span class="line">jedwards</span><br><span class="line"><span class="symbol">GROUP_NAM:</span></span><br><span class="line">grad</span><br><span class="line"><span class="symbol">DATE_OF_LAST_MODIFICATION:</span></span><br><span class="line">Mar <span class="number">30</span> <span class="number">08</span>:<span class="number">11</span> <span class="number">2003</span></span><br><span class="line"><span class="symbol">LINK_COUNT:</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">SIZE_IN_BYTES:</span></span><br><span class="line"><span class="number">1345</span> (<span class="keyword">or</span> <span class="number">12</span>, <span class="number">6</span> dev info)</span><br><span class="line"><span class="symbol">INODE_NUMBER:</span></span><br><span class="line"><span class="number">347</span></span><br><span class="line">*******&lt; a blank line between entries &gt;*******</span><br></pre></td></tr></table></figure></p><p>System calls needed on a UNIX system include:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line">getdirentries(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> nbytes, <span class="keyword">long</span> *basep)</span><br></pre></td></tr></table></figure><p>which reads up to nbytes of data into buf in the form:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>   d_ino;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span>  d_reclen;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span>  d_namlen;</span><br><span class="line"><span class="keyword">char</span>            d_name[MAXNAMLEN + <span class="number">1</span>];</span><br></pre></td></tr></table></figure></p><p>see the man pages for more detail. This routine is difficult to use, so you may find the library routines opendir() and readdir() easier to use as shown in class.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">ctime</span><span class="params">(<span class="keyword">long</span> *clock)</span></span></span><br></pre></td></tr></table></figure></p><p>see the man pages for more detail. This data structure may vary somewhat from platform to platform (see the stat.h header and its #includes), but the entry names shown above are common to all Unix/Linux type platforms</p><p>The getdirentries() call requires that you use the open() system call to open a directory, and you can then use getdirentries() to extract filenames from the directory. (You may want to check out the library routines opendir() and readdir(), which will do this for you in a more friendly way.) Your program will have to work in two basic modes:</p><ul><li>if called with no arguments (as with ls) it must find the names of all the files in the current directory (including dotted files) and print information in the format shown above for each file object.</li><li>if called with a series of file names (from the command line as with ls abc xyz etc) it must print information in the format shown above for each named object in the argv [ ] vector (wildcard characters are not allowed).</li></ul><p>File types include ordinary (-), directory (d), symbolic link (l), character device (c), and block device (b). You must show sample output with each of these types. (You do not have to worry about pipe (p) and UNIX domain socket (s) types, nor do you have to print resolution names for symbolic link (l) types.) There are several additional library routines and header file macros and defined constants that can help you get this done.</p><p>If you compile your code on mercury, you will need to define a compile time symbol to work properly with NFS mounted file objects:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Bash-$</span><span class="bash">  gcc -D_FILE_OFFSET_BITS=64 -g -o <span class="built_in">stat</span> stat.c</span></span><br></pre></td></tr></table></figure></p><p>You won’t need this if you compile on cs but it will not hurt to include it either way (cs is a 64 bit Linux, while mercury is a 32 bit Linux)</p>]]></content>
    
    <summary type="html">
    
      本次需要代写的作业要求实现文件系统的高级操作，如查看文件的大小、创建时间、修改时间、用户、用户组等等meta信息。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMSW3101-Introduction-To-Python</title>
    <link href="https://tk1307993.coding.me/COMSW3101-Introduction-To-Python.html"/>
    <id>https://tk1307993.coding.me/COMSW3101-Introduction-To-Python.html</id>
    <published>2019-03-15T15:31:26.000Z</published>
    <updated>2019-03-15T15:34:31.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem-1-Decrypting-Government-Data"><a href="#Problem-1-Decrypting-Government-Data" class="headerlink" title="Problem 1 - Decrypting Government Data"></a>Problem 1 - Decrypting Government Data</h3><p>Your job is to summarize this gov data about oil consumation</p><ul><li>The format of the file is rather bizzare - note that each line has data for two months, in two different years! (Plus I had to hand edit the file to make it parseable)</li><li>Fortunately, Python is great for untangling and manipulating data.</li><li>Write a generator that reads from the given url over the network, and produces a summary line for a year’s data on each ‘next’ call</li><li>remember that urllib.request returns ‘bytes arrays’, not strings</li><li>The generator should read the lines of the oil2.txt file in a lazy fashion - it should only read 13 lines for every two years of output. Note a loop can have any number of ‘yield’ calls in it.</li><li>Ignore the monthly data, just extract the yearly info</li><li>Drop the month column</li><li>In addition to the ‘oil’ generator function, my solution had a separate helper function, ‘def makeCSV- Line(year, data):’</li></ul><h3 id="Here-is-the-first-two-years-of-data-2014-and-2013"><a href="#Here-is-the-first-two-years-of-data-2014-and-2013" class="headerlink" title="Here is the first two years of data, 2014 and 2013"></a>Here is the first two years of data, 2014 and 2013</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Year,Quantity,QuantityChange,Unknown,Unknown2,Price,PriceChange</span><br><span class="line"><span class="number">2014</span>,<span class="number">2700903</span>,<span class="number">-112867</span>,<span class="number">246409332</span>,<span class="number">-26397845</span>,<span class="number">91.23</span>,<span class="number">-5.72</span></span><br><span class="line"><span class="number">2013</span>,<span class="number">2813770</span>,<span class="number">-283638</span>,<span class="number">272807177</span>,<span class="number">-40367786</span>,<span class="number">96.95</span>,<span class="number">-4.15</span></span><br><span class="line"><span class="number">2012</span>,<span class="number">3097408</span>,<span class="number">-224509</span>,<span class="number">313174963</span>,<span class="number">-18407090</span>,<span class="number">101.11</span>,<span class="number">1.29</span></span><br><span class="line"><span class="number">2011</span>,<span class="number">3321917</span>,<span class="number">-55160</span>,<span class="number">331582053</span>,<span class="number">79421544</span>,<span class="number">99.82</span>,<span class="number">25.15</span></span><br><span class="line"><span class="number">2010</span>,<span class="number">3377077</span>,<span class="number">62290</span>,<span class="number">252160509</span>,<span class="number">63448733</span>,<span class="number">74.67</span>,<span class="number">17.74</span></span><br><span class="line"><span class="number">2009</span>,<span class="number">3314787</span>,<span class="number">-275841</span>,<span class="number">188711776</span>,<span class="number">-153200712</span>,<span class="number">56.93</span>,<span class="number">-38.29</span></span><br><span class="line"><span class="number">2008</span>,<span class="number">3590628</span>,<span class="number">-99940</span>,<span class="number">341912488</span>,<span class="number">104700835</span>,<span class="number">95.22</span>,<span class="number">30.95</span></span><br><span class="line"><span class="number">2007</span>,<span class="number">3690568</span>,<span class="number">-43658</span>,<span class="number">237211653</span>,<span class="number">20584322</span>,<span class="number">64.28</span>,<span class="number">6.26</span></span><br><span class="line"><span class="number">2006</span>,<span class="number">3734226</span>,<span class="number">-20445</span>,<span class="number">216627331</span>,<span class="number">40871990</span>,<span class="number">58.01</span>,<span class="number">11.20</span></span><br><span class="line"><span class="number">2005</span>,<span class="number">3754671</span>,<span class="number">-66308</span>,<span class="number">175755341</span>,<span class="number">44012676</span>,<span class="number">46.81</span>,<span class="number">12.33</span></span><br><span class="line"><span class="number">2004</span>,<span class="number">3820979</span>,<span class="number">144974</span>,<span class="number">131742665</span>,<span class="number">32575492</span>,<span class="number">34.48</span>,<span class="number">7.50</span></span><br><span class="line"><span class="number">2003</span>,<span class="number">3676005</span>,<span class="number">257983</span>,<span class="number">99167173</span>,<span class="number">21883842</span>,<span class="number">26.98</span>,<span class="number">4.37</span></span><br><span class="line"><span class="number">2002</span>,<span class="number">3418022</span>,<span class="number">-53045</span>,<span class="number">77283331</span>,<span class="number">2990437</span>,<span class="number">22.61</span>,<span class="number">1.21</span></span><br><span class="line"><span class="number">2001</span>,<span class="number">3471067</span>,<span class="number">71827</span>,<span class="number">74292894</span>,<span class="number">-15583539</span>,<span class="number">21.40</span>,<span class="number">-5.04</span></span><br><span class="line"><span class="number">2000</span>,<span class="number">3399240</span>,<span class="number">171148</span>,<span class="number">89876433</span>,<span class="number">38986812</span>,<span class="number">26.44</span>,<span class="number">10.68</span></span><br><span class="line"><span class="number">1999</span>,<span class="number">3228092</span>,<span class="number">-14620</span>,<span class="number">50889621</span>,<span class="number">13637399</span>,<span class="number">15.76</span>,<span class="number">4.28</span></span><br><span class="line"><span class="number">1998</span>,<span class="number">3242712</span>,<span class="number">173281</span>,<span class="number">37252222</span>,<span class="number">-16973685</span>,<span class="number">11.49</span>,<span class="number">-6.18</span></span><br><span class="line"><span class="number">1997</span>,<span class="number">3069431</span>,<span class="number">175785</span>,<span class="number">54225907</span>,<span class="number">-704950</span>,<span class="number">17.67</span>,<span class="number">-1.32</span></span><br><span class="line"><span class="number">1996</span>,<span class="number">2893646</span>,<span class="number">126333</span>,<span class="number">54930857</span>,<span class="number">11181204</span>,<span class="number">18.98</span>,<span class="number">3.17</span></span><br></pre></td></tr></table></figure><p>now that we have something that looks like a CVS file, can do all kinds of things</p><p>Input:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'/tmp/oil.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">l</span> in oil(url):</span><br><span class="line">  <span class="keyword">f</span>.<span class="keyword">write</span>(<span class="keyword">l</span> + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">o</span> = oil(url)</span><br><span class="line"><span class="keyword">ls</span> = <span class="keyword">list</span>(<span class="keyword">o</span>)</span><br><span class="line">s = <span class="string">'\n'</span>.<span class="keyword">join</span>(<span class="keyword">ls</span>)</span><br><span class="line">import pandas <span class="keyword">as</span> pd</span><br><span class="line">import io</span><br><span class="line"># we will cover StringIO <span class="keyword">next</span> week - kind of <span class="keyword">an</span> <span class="string">'in-memory'</span> <span class="keyword">file</span></span><br><span class="line">df = pd.read_csv(io.StringIO(s))</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    Year Quantity QuantityChange    Unknown   Unknown2   Price PriceChange</span><br><span class="line"><span class="number">0</span>   <span class="number">2014</span>  <span class="number">2700903</span>        <span class="number">-112867</span>  <span class="number">246409332</span>  <span class="number">-26397845</span>   <span class="number">91.23</span>       <span class="number">-5.72</span></span><br><span class="line"><span class="number">1</span>   <span class="number">2013</span>  <span class="number">2813770</span>        <span class="number">-283638</span>  <span class="number">272807177</span>  <span class="number">-40367786</span>   <span class="number">96.95</span>       <span class="number">-4.15</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2012</span>  <span class="number">3097408</span>        <span class="number">-224509</span>  <span class="number">313174963</span>  <span class="number">-18407090</span>  <span class="number">101.11</span>        <span class="number">1.29</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2011</span>  <span class="number">3321917</span>         <span class="number">-55160</span>  <span class="number">331582053</span>   <span class="number">79421544</span>   <span class="number">99.82</span>       <span class="number">25.15</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2010</span>  <span class="number">3377077</span>          <span class="number">62290</span>  <span class="number">252160509</span>   <span class="number">63448733</span>   <span class="number">74.67</span>       <span class="number">17.74</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2009</span>  <span class="number">3314787</span>        <span class="number">-275841</span>  <span class="number">188711776</span> <span class="number">-153200712</span>   <span class="number">56.93</span>      <span class="number">-38.29</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2008</span>  <span class="number">3590628</span>         <span class="number">-99940</span>  <span class="number">341912488</span>  <span class="number">104700835</span>   <span class="number">95.22</span>       <span class="number">30.95</span></span><br><span class="line"><span class="number">7</span>   <span class="number">2007</span>  <span class="number">3690568</span>         <span class="number">-43658</span>  <span class="number">237211653</span>   <span class="number">20584322</span>   <span class="number">64.28</span>        <span class="number">6.26</span></span><br><span class="line"><span class="number">8</span>   <span class="number">2006</span>  <span class="number">3734226</span>         <span class="number">-20445</span>  <span class="number">216627331</span>   <span class="number">40871990</span>   <span class="number">58.01</span>       <span class="number">11.20</span></span><br><span class="line"><span class="number">9</span>   <span class="number">2005</span>  <span class="number">3754671</span>         <span class="number">-66308</span>  <span class="number">175755341</span>   <span class="number">44012676</span>   <span class="number">46.81</span>       <span class="number">12.33</span></span><br><span class="line"><span class="number">10</span>  <span class="number">2004</span>  <span class="number">3820979</span>         <span class="number">144974</span>  <span class="number">131742665</span>   <span class="number">32575492</span>   <span class="number">34.48</span>        <span class="number">7.50</span></span><br><span class="line"><span class="number">11</span>  <span class="number">2003</span>  <span class="number">3676005</span>         <span class="number">257983</span>   <span class="number">99167173</span>   <span class="number">21883842</span>   <span class="number">26.98</span>        <span class="number">4.37</span></span><br><span class="line"><span class="number">12</span>  <span class="number">2002</span>  <span class="number">3418022</span>         <span class="number">-53045</span>   <span class="number">77283331</span>    <span class="number">2990437</span>   <span class="number">22.61</span>        <span class="number">1.21</span></span><br><span class="line"><span class="number">13</span>  <span class="number">2001</span>  <span class="number">3471067</span>          <span class="number">71827</span>   <span class="number">74292894</span>  <span class="number">-15583539</span>   <span class="number">21.40</span>       <span class="number">-5.04</span></span><br><span class="line"><span class="number">14</span>  <span class="number">2000</span>  <span class="number">3399240</span>         <span class="number">171148</span>   <span class="number">89876433</span>   <span class="number">38986812</span>   <span class="number">26.44</span>       <span class="number">10.68</span></span><br><span class="line"><span class="number">15</span>  <span class="number">1999</span>  <span class="number">3228092</span>         <span class="number">-14620</span>   <span class="number">50889621</span>   <span class="number">13637399</span>   <span class="number">15.76</span>        <span class="number">4.28</span></span><br><span class="line"><span class="number">16</span>  <span class="number">1998</span>  <span class="number">3242712</span>         <span class="number">173281</span>   <span class="number">37252222</span>  <span class="number">-16973685</span>   <span class="number">11.49</span>       <span class="number">-6.18</span></span><br><span class="line"><span class="number">17</span>  <span class="number">1997</span>  <span class="number">3069431</span>         <span class="number">175785</span>   <span class="number">54225907</span>    <span class="number">-704950</span>   <span class="number">17.67</span>       <span class="number">-1.32</span></span><br><span class="line"><span class="number">18</span>  <span class="number">1996</span>  <span class="number">2893646</span>         <span class="number">126333</span>   <span class="number">54930857</span>   <span class="number">11181204</span>   <span class="number">18.98</span>        <span class="number">3.17</span></span><br><span class="line"><span class="number">19</span>  <span class="number">1995</span>  <span class="number">2767313</span>          <span class="number">63116</span>   <span class="number">43749653</span>    <span class="number">5270236</span>   <span class="number">15.81</span>        <span class="number">1.58</span></span><br><span class="line"><span class="number">20</span>  <span class="number">1994</span>  <span class="number">2704197</span>         <span class="number">160822</span>   <span class="number">38479417</span>      <span class="number">10041</span>   <span class="number">14.23</span>       <span class="number">-0.90</span></span><br><span class="line"><span class="number">21</span>  <span class="number">1993</span>  <span class="number">2543375</span>         <span class="number">248805</span>   <span class="number">38469376</span>     <span class="number">-83679</span>   <span class="number">15.13</span>       <span class="number">-1.68</span></span><br></pre></td></tr></table></figure><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h3><ul><li>suppose we want to convert between C(Celsius) and F(Fahrenheit), using the equation 9C = 5 (F-32)</li><li>could write functions ‘c2f’ and ‘f2c’</li><li>do all computation in floating point for this problem</li></ul><h3 id="Problem-3-Hamlet"><a href="#Problem-3-Hamlet" class="headerlink" title="Problem 3 - Hamlet"></a>Problem 3 - Hamlet</h3><p>Python is very popular in ‘digital humanities’</p><p>MIT has the complete works of Shakespeare in a simple html format</p><p>You will do a simple analysis of Hamlet by reading the html file, one line at a time(usual iteration scheme) and doing pattern matching</p><p>The goal is to return a list of the linecnt, total number of ‘speeches’(look at the file format), and a dict showing the number of ‘speeches’ each character gives</p><p>Your program should read directly from the url given, but you may want to download a copy to examine the structure of the file.<br>remember that usrlib.request returns ‘byte arrays’, not strings</p><p>here’s a short sample of the file</p><h3 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem 5"></a>Problem 5</h3><p>define the <strong>mul</strong> method for polydict<br>Input:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[pd1, pd2, pd3, pd1 * pd2, pd1 * pd3, pd2 * pd3]</span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[+ <span class="number">3</span> * X ** <span class="number">2</span> + <span class="number">2</span> * X + <span class="number">1</span>,</span><br><span class="line"> + <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * x,</span><br><span class="line"> <span class="number">3</span> * X ** <span class="number">2</span> + <span class="number">2</span> * X + <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X,</span><br><span class="line"> <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X ** <span class="number">-1</span>,</span><br><span class="line"> <span class="number">15</span> * X ** <span class="number">4</span> + <span class="number">40</span> * X ** <span class="number">3</span> + <span class="number">25</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X,</span><br><span class="line"> <span class="number">15</span> * X ** <span class="number">4</span> + <span class="number">10</span> * X ** <span class="number">3</span> + <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">30</span> * X + <span class="number">20</span> * X ** <span class="number">-1</span>,</span><br><span class="line"> <span class="number">25</span> * X ** <span class="number">4</span> + <span class="number">50</span> * X ** <span class="number">3</span> + <span class="number">50</span> * X + <span class="number">100</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本次需要代写的Python作业，包含了5个算术问题需要解决。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop代写：CS698-Flight-Data-Analysis</title>
    <link href="https://tk1307993.coding.me/CS698-Flight-Data-Analysis.html"/>
    <id>https://tk1307993.coding.me/CS698-Flight-Data-Analysis.html</id>
    <published>2019-03-12T12:56:09.000Z</published>
    <updated>2019-03-12T12:59:13.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><ol><li>Form a project team of two students (including yourself).</li><li>Install Hadoop/Oozie on your AWS VMs.</li><li>Download the Airline On-time Performance data set (flight data set) from the period of October 1987 to April 2008 on the Statistical Computing website: <a href="http://stat-computing.org/dataexpo/2009/the-data.html" target="_blank" rel="noopener">http://stat-computing.org/dataexpo/2009/the-data.html</a></li><li>Design, implement, and run an Oozie workflow to find out<ul><li>a. the 3 airlines with the highest and lowest probability, respectively, for being on schedule;</li><li>b. the 3 airports with the longest and shortest average taxi time per flight (both in and out), respectively; and</li><li>c. the most common reason for flight cancellations.</li></ul></li></ol><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ol><li>Your workflow must contain at least three MapReduce jobs that run in fully distributed mode.</li><li>Run your workflow to analyze the entire data set (total 22 years from 1987 to 2008) at one time on two VMs first and then gradually increase the system scale to the maximum allowed number of VMs for at least 5 increment steps, and measure each corresponding workflow execution time.</li><li>Run your workflow to analyze the data in a progressive manner with an increment of 1 year, i.e. the first year (1987), the first 2 years (1987-1988), the first 3 years (1987-1989), …, and the total 22 years (1987-2008), on the maximum allowed number of VMs, and measure each corresponding workflow execution time.</li></ol><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ol><li>A commands.txt text file that lists all the commands you used to run your code and produce the required results in fully distributed mode</li><li>An output.txt text file that stores the final results from all the runs</li><li>The source code of your MapReduce programs (including the JAR files) and any other programs you might have developed and included in the workflow</li><li>The Oozie workflow XML file</li><li>A project report in PDF that includes:<br>a. A diagram that shows the structure of your Oozie workflow<br>b. A detailed description of the algorithm you designed to solve each of the problems<br>c. A performance measurement plot that compares the workflow execution time in response to an increasing number of VMs used for processing the entire data set (22 years) and an in-depth discussion on the observed performance comparison results<br>d. A performance measurement plot that compares the workflow execution time in response to an increasing data size (from 1 year to 22 years) and an in-depth discussion on the observed performance comparison results</li></ol>]]></content>
    
    <summary type="html">
    
      这次需要代写的是一个大数据的作业，需要在AWS上搭建Hadoop来进行计算。此外，数据集也非常大，也包含了脏数据需要处理。
    
    </summary>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/categories/Hadoop/"/>
    
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/tags/Hadoop/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>FTP代写：CS159-Socket-Programming-FTP-Server</title>
    <link href="https://tk1307993.coding.me/CS159-Socket-Programming-FTP-Server.html"/>
    <id>https://tk1307993.coding.me/CS159-Socket-Programming-FTP-Server.html</id>
    <published>2019-03-09T09:31:12.000Z</published>
    <updated>2019-03-09T09:34:46.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Your task is to create a very simple FTP server program using sockets.</p><ol><li>The server needs to be able to interpret the protocol commands, including: LIST, RETR, STOR</li><li>The client should be a standard command line FTP client application (available on your OS). The application commands that should work from the client are:<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir (<span class="built_in">or</span> <span class="keyword">ls</span>)</span><br><span class="line"><span class="built_in">get</span> <span class="symbol">&lt;filename&gt;</span></span><br><span class="line"><span class="keyword">put</span> <span class="symbol">&lt;filename&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>Assume that the files to be transferred are text only (ASCII rather than binaries). There is no need to implement text X binary modes.</p><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>This exercise makes use of the FTP protocol directly from a command line application. You have probably used FTP before, but in a transparent way (perhaps via a browser).</p><p>FTP is an acronym used with different meanings, each with its set of commands:</p><p>FTP protocol commands (e.g., USER, PASV, PORT etc)</p><p>FTP application commands, associated with a FTP client (e.g., get, put, dir etc).</p><p>When using different Operating Systems one might find that the FTP application works in different ways, even though they may be using the same FTP protocol. The commands described below should work in most OS. However different FTP clients may have incomplete implementations or use nonstandard FTP application commands.</p><p>To start the exercise:</p><ol><li>1) Open a terminal</li><li>2) Issue the command:</li></ol><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>We have seen some examples using the application called telnet to connect to servers listening to certain ports (see some examples in Chapter 2). Does that work with FTP?</p><h3 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h3><p>Understanding the difference between FTP “protocol commands” and “application commands”:</p><p>We have looked at protocol commands, such as: RETR, USER, PASS, STOR etc.</p><p>Also, there are application commands with an FTP client: get, put, ls etc</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p>Your submission has to be a single source file (server) compatible with GCC (if using other compilers to develop the assignment, make sure the final source compiles on GCC). Submit to Stream.</p><p>This assignment is worth 10 marks.</p><p>You may lose marks for late assignments.</p>]]></content>
    
    <summary type="html">
    
      这个需要代写的作业要求基于Linux Socket编程，实现一个FTP Server。需要支持常见的上传(put)、下载(get)和列表(ls)等命令。
    
    </summary>
    
      <category term="FTP" scheme="https://tk1307993.coding.me/categories/FTP/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
</feed>
