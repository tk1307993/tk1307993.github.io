<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-11-16T04:45:02.950Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>COMP9021-Solve-Logical-Puzzles</title>
    <link href="https://tk1307993.coding.me/COMP9021-Solve-Logical-Puzzles.html"/>
    <id>https://tk1307993.coding.me/COMP9021-Solve-Logical-Puzzles.html</id>
    <published>2019-11-16T04:41:57.000Z</published>
    <updated>2019-11-16T04:45:02.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Aim-of-assignment-and-general-description"><a href="#Aim-of-assignment-and-general-description" class="headerlink" title="Aim of assignment and general description"></a>Aim of assignment and general description</h3><p>The aim of the assignment is to analyse English sentences and solve logical puzzles. The assignment will make you work with textual data and reinforce the fundamental programming skills and use of basic data structures that you are expected to have acquired.</p><p>Raymond Smullyan has designed many puzzles involving Knights and Knaves. Knights always tell the truth, whereas Knaves always lie. We refer to Knights and Knaves as Sirs. A puzzle, which is a set of English sentences, involves a finite number of Sirs. Solving the puzzle means:</p><ul><li>determining the names of all Sirs involved in the puzzle;</li><li>determining solutions to the puzzle, where a solution qualifies each Sir as either a Knight or a Knave.<br>Some puzzles have no solution, others have a unique solution, and others have at least 2 solutions. The following is an example of a puzzle with a unique solution.<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">One evening <span class="keyword">as</span> you are out <span class="keyword">for</span> a stroll, you walk <span class="keyword">by</span> a doorway labeled <span class="literal">no</span> normals</span><br><span class="line">allowed. Some people are talking inside. Curious, you listen, <span class="keyword">and</span> you hear Sir</span><br><span class="line">Paul who says: <span class="string">"all of us are Knaves."</span> <span class="string">"Exactly one of us is a Knight,"</span> replies</span><br><span class="line">Sir Jenny. As <span class="keyword">for</span> Sir John, who <span class="keyword">is</span> also inside, he just keeps quiet. Who <span class="keyword">is</span> a</span><br><span class="line">Knight, <span class="keyword">and</span> who <span class="keyword">is</span> a Knave?</span><br></pre></td></tr></table></figure></li></ul><p>The Sirs involved in this puzzle are Sir Jenny, Sir John, and Sir Paul. The unique solution is given by Sir Jenny being a Knight, Sir John being a Knave, and Sir Paul being a Knave.</p><h3 id="Detailed-description"><a href="#Detailed-description" class="headerlink" title="Detailed description"></a>Detailed description</h3><h4 id="Syntax-of-puzzles"><a href="#Syntax-of-puzzles" class="headerlink" title="Syntax of puzzles"></a>Syntax of puzzles</h4><p>A sentence starts with a capital letter and ends in a full stop, an exclamation mark, or a question mark, possibly followed by closing double quotes. Sir, Sirs, Sir names, Knight and Knave always start with a capital letter, and no other word inside a sentence is capitalised. A sentence in a puzzle contains at most one part enclosed between double quotes. When a sentence contains one part enclosed between double quotes, the part outside the double quotes contains a single occurrence of the form Sir Sir_Name, and what occurs between the double quotes is something said by Sir Sir_Name. A sentence that contains no part enclosed between double quotes might refer to a number of Sirs, always in the form Sir Sir_Name, or Sirs Sir_Name_1 and Sir_Name_2, or Sirs Sir_Name_1, Sir_Name_2, . . . and Sir_Name_n, where n ≥ 3, and Sir_Name_1, … , Sir_Name_n are pairwise distinct.</p><p>What is between double quotes is a sentence in one of the following forms, ending in either a comma, a full stop, an exclamation mark, or a question mark:</p><ul><li>At/at least one of Conjunction_of_Sirs/us is a Knight/Knave</li><li>At/at most one of Conjunction_of_Sirs/us is a Knight/Knave</li><li>Exactly/exactly one of Conjunction_of_Sirs/us is a Knight/Knave</li><li>All/all of us are Knights/Knaves</li><li>I am a Knight/Knave</li><li>Sir Sir_Name is a Knight/Knave</li><li>Disjunction_of_Sirs is a Knight/Knave</li><li>Conjunction_of_Sirs are Knights/Knaves</li></ul><p>where:</p><ul><li>Disjunction_of_Sirs is in one of the following forms:<ul><li>Sir_1 or Sir_2</li><li>Sir_1, Sir_2, … or Sir_n (n ≥ 3)</li></ul></li><li>Conjunction_of_Sirs is in one of the following forms:<ul><li>Sir_1 and Sir_2</li><li>Sir_1, Sir_2, … and Sir_n (n ≥ 3)</li></ul></li><li>Sir_1, … , Sir_n are pairwise distinct expressions of the form Sir Sir_Name or I.</li></ul><h3 id="Input-and-output-of-programs"><a href="#Input-and-output-of-programs" class="headerlink" title="Input and output of programs"></a>Input and output of programs</h3><p>Your program will prompt the user for a text file, assumed to be stored in the working directory, that stores the sentences that make up a puzzle. No assumption should be made on the number of English sentences provided as input, nor on the length of a sentence, nor on the length of a Sir name, nor on the number of Sirs involved in the puzzle.</p><p>Your program should:</p><ul><li>output the Sirs involved in the puzzle in lexicographic order;</li><li>output whether or not there is a solution, and in case there is one, whether the solution is unique;</li><li>outputs the solution in case a unique solution exists, with all Sirs being qualified as either Knight or Knave in alphabetical order.</li></ul><h3 id="Sample-outputs"><a href="#Sample-outputs" class="headerlink" title="Sample outputs"></a>Sample outputs</h3><p>Here are a few tests together with the expected outputs. The outputs of your program should be exactly in accordance with the following outputs. Outputs of your program will be matched against expected outputs line for line.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> test1.txt</span><br><span class="line">I have just seen Sirs Sanjay <span class="built_in">and</span> Eleonore!</span><br><span class="line"><span class="string">"I am a Knave,"</span> whispered Sir Eleonore.</span><br><span class="line">Who <span class="keyword">is</span> <span class="keyword">a</span> Knight <span class="built_in">and</span> who <span class="keyword">is</span> <span class="keyword">a</span> Knave?</span><br><span class="line">$ <span class="keyword">python3</span> solve.<span class="keyword">py</span></span><br><span class="line">Which text <span class="keyword">file</span> <span class="keyword">do</span> you want <span class="keyword">to</span> use <span class="keyword">for</span> the puzzle? test1.txt</span><br><span class="line">The Sirs are: Eleonore Sanjay</span><br><span class="line">There <span class="keyword">is</span> <span class="keyword">no</span> solution.</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">cat</span> test2.txt</span><br><span class="line">I have just met Sirs Frank, Paul <span class="built_in">and</span> Nina.</span><br><span class="line">Sir Nina said: <span class="string">"I am a Knight,"</span> but I <span class="keyword">am</span> not sure</span><br><span class="line"><span class="keyword">if</span> that <span class="keyword">is</span> true. What <span class="keyword">do</span> you think?</span><br><span class="line">$ <span class="keyword">python3</span> solve.<span class="keyword">py</span></span><br><span class="line">Which text <span class="keyword">file</span> <span class="keyword">do</span> you want <span class="keyword">to</span> use <span class="keyword">for</span> the puzzle? test2.txt</span><br><span class="line">The Sirs are: Frank Nina Paul</span><br><span class="line">There are <span class="number">8</span> solutions.</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">cat</span> test3.txt</span><br><span class="line">Yesterday, I visited Sirs Andrew <span class="built_in">and</span> Nancy. I asked Sir Andrew</span><br><span class="line">who he was, <span class="built_in">and</span> he answered impatiently: <span class="comment">"Sir Nancy and I</span></span><br><span class="line">are Knaves!<span class="comment">" Then I met Sir Bill who introduced me to his wife</span></span><br><span class="line"><span class="built_in">and</span> told <span class="keyword">me</span>: <span class="comment">"at least one of Sir Hilary</span></span><br><span class="line"><span class="built_in">and</span> I <span class="keyword">is</span> <span class="keyword">a</span> Knave.<span class="comment">" Should I trust them?</span></span><br><span class="line">$ <span class="keyword">python3</span> solve.<span class="keyword">py</span></span><br><span class="line">Which text <span class="keyword">file</span> <span class="keyword">do</span> you want <span class="keyword">to</span> use <span class="keyword">for</span> the puzzle? test3.txt</span><br><span class="line">The Sirs are: Andrew Bill Hilary Nancy</span><br><span class="line">There <span class="keyword">is</span> <span class="keyword">a</span> unique solution:</span><br><span class="line">Sir Andrew <span class="keyword">is</span> <span class="keyword">a</span> Knave.</span><br><span class="line">Sir Bill <span class="keyword">is</span> <span class="keyword">a</span> Knight.</span><br><span class="line">Sir Hilary <span class="keyword">is</span> <span class="keyword">a</span> Knave.</span><br><span class="line">Sir Nancy <span class="keyword">is</span> <span class="keyword">a</span> Knight.</span><br></pre></td></tr></table></figure></p><h3 id="Assessment-and-submission"><a href="#Assessment-and-submission" class="headerlink" title="Assessment and submission"></a>Assessment and submission</h3><h4 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h4><p>Up to eight marks will reward correctness of solutions by automatically testing your program on some tests, all different to the provided examples. Read carefully the part on program output to maximise your chances of not failing some tests for stupid reasons.</p><p>Up to one mark will reward good comments, good choice of names for identifiers and functions, readability of code, simplicity of statements, compactness of functions. This will be determined manually.</p>]]></content>
    
    <summary type="html">
    
      代写自动求解Logical Puzzles的Python程序，这个作业由于是求解逻辑问题，因此测试的时候相当烧脑。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS316-Large-Data-Sorting</title>
    <link href="https://tk1307993.coding.me/CS316-Large-Data-Sorting.html"/>
    <id>https://tk1307993.coding.me/CS316-Large-Data-Sorting.html</id>
    <published>2019-11-13T13:41:26.000Z</published>
    <updated>2019-11-13T13:45:29.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you will be performing some important data-processing operations, specifically sorting a large database file. Sorting data is a very important operation in computing for many reasons. One of those reasons is that it makes the data more accessible to humans once it is printed (imagine trying to use a telephone directory in which the names do not appear in any particular order). Another reason is that it makes the data more quickly searchable by the computer.</p><p>There are many large data files to use for this assignment, but you will only need the first one until you get on to the advanced parts. They are all available on blackboard, and are named people1.txt, people2.txt, people3.txt, people5.txt, people10.txt, people20.txt, people30.txt, people50.txt, and people100.txt. You must represent a person as an object of class PersonType, throughout the assignment.</p><p>Look at the file “people1.txt” with a text editor. You will see that it contains data about a number of people. Each line contains exactly five items: a person’s social security number, their first name, their last name, their date of birth, and state of residence. The five items are separated by spaces, but no item will ever contain a space. Here is a sample from the middle of the file:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">320990814 </span>Arthur Farmer <span class="number">19560424</span> NV</span><br><span class="line"><span class="symbol">322230050 </span>Eros Crandon <span class="number">19250819</span> TX</span><br><span class="line"><span class="symbol">324640114 </span>Lusitania Lissom <span class="number">19440104</span> IN</span><br><span class="line"><span class="symbol">325400784 </span>Rose Terwilliger <span class="number">19260122</span> WI</span><br><span class="line"><span class="symbol">327640597 </span>Jeffrey Stone <span class="number">19760801</span> DE</span><br><span class="line"><span class="symbol">327950765 </span>Mary Emmett <span class="number">19290224</span> CO</span><br><span class="line"><span class="symbol">328610085 </span>Heironymous Inchworm <span class="number">19661102</span> CA</span><br><span class="line"><span class="symbol">329310410 </span>William McCormick <span class="number">19550819</span> WV</span><br><span class="line"><span class="symbol">329320248 </span>Nicola Birchmore <span class="number">19230107</span> IA</span><br><span class="line"><span class="symbol">330270343 </span>Pauline McTaggart <span class="number">19290402</span> MN</span><br><span class="line"><span class="symbol">331130693 </span>Jim Trombone <span class="number">19411222</span> NE</span><br><span class="line"><span class="symbol">331960453 </span>Abraham Larch <span class="number">19750901</span> WY</span><br><span class="line"><span class="symbol">332040687 </span>Trixie Underwood <span class="number">19200516</span> UT</span><br></pre></td></tr></table></figure></p><p>As you may have noticed, the date of birth is provided as a single integer, in the format yyyymmdd; Arthur Farmer was born on the 24th of April 1956. The 1 in the filename people1.txt indicates that it contains exactly one thousand lines.</p><h3 id="Read-the-Data"><a href="#Read-the-Data" class="headerlink" title="Read the Data"></a>Read the Data</h3><p>Write a program that creates a list of type PersonType to read all the data from the file into that list. Of course, it will have to be a list of type Person that you will also need to define. Make your program close the file, then print out the first 10 items of data from the list, so that you can make sure everything was read correctly. You can use intermediate lists of lines while you are constructing the persons list if you would like.</p><h3 id="Basic-Search"><a href="#Basic-Search" class="headerlink" title="Basic Search"></a>Basic Search</h3><p>Make your program ask the user to enter a name. It should then search through the data in the list (don’t read the file again), finding any entry with a matching name. Correct matches with either first or last name should be accepted. For every matching entry that is found, print out all four data items: the social security number, first and last names, and date of birth of each matching person.</p><p>Remember that if you use the == operator to compare strings, the test is case-sensitive. The user (i.e. you) will have to type the name exactly correctly, with capital letters in the right places.</p><blockquote><p>Important: Good clean design will make this lab much easier. Write a separate function that searches the list, do not put all the work in main.</p></blockquote><h3 id="Find-the-Oldest"><a href="#Find-the-Oldest" class="headerlink" title="Find the Oldest"></a>Find the Oldest</h3><p>Modify your program so that after closing the file, instead of printing the first ten items of data, it searches through all of them to find the oldest person represented. It should print the social security number, first and last names, date of birth, and state of the oldest person found.</p><blockquote><p>Important: As for part two, good clean design will make this lab much easier. Write a separate function that searches the list to find the oldest person, do not put all the work in main.</p></blockquote><h3 id="Promote-the-Oldest"><a href="#Promote-the-Oldest" class="headerlink" title="Promote the Oldest"></a>Promote the Oldest</h3><p>For some unfathomable reason, the management wants the oldest person to occupy the first position in the list. Modify your program so that after finding the oldest person, it swaps his or her data with the data already occupying the first position in the list. Remember that the first position in a list is numbered zero, not one.</p><h3 id="Now-Promote-the-Second-Oldest"><a href="#Now-Promote-the-Second-Oldest" class="headerlink" title="Now Promote the Second Oldest."></a>Now Promote the Second Oldest.</h3><p>The management has now decided not only that the oldest person must occupy the first position in the list, but also that the second-oldest person must occupy the second position in the list. So, after searching for the oldest and moving their data to the front of the list, now search the remainder of the list (all except the first element), and move the oldest person you find (which must be the second oldest of all) into the second position of the list. Make sure you swap data, so that whoever was originally in the second position is not lost.</p><h3 id="More-of-the-Same"><a href="#More-of-the-Same" class="headerlink" title="More of the Same."></a>More of the Same.</h3><p>The management are going to keep on adding requirements like this, next putting the third-oldest in the third position, then the fourth, then the fifth. There is no knowing when they will grow out of this petty obsession, so make things easier for yourself. Modify your search function so that it can be told how much of the list to search. That is, give it two int parameters (let’s call them a and b); its job is now to search only the portion of the list between position a and position b, to find the oldest person therein. This makes it very easy to search the remainder of the list to find the second and third oldest.</p><h3 id="The-Ultimate-Demand"><a href="#The-Ultimate-Demand" class="headerlink" title="The Ultimate Demand."></a>The Ultimate Demand.</h3><p>Now the management make their final demand. You are to repeat the process of moving the nth-oldest person into the nth position 1000 times. (please remember, 1000 is the number of data records in the whole file).</p><p>This will result in the list being completely sorted. Do it, and check that it worked. Make your program print the contents of the list after it has finished. Look at the output to make sure that everyone is printed in order of their age.</p><p>Try to implement your own selection sort function – instead of using the Python sort.</p><p>(Research item/Optional – extra credit) Try again with bubble sort, insertion sort, quick sort, and compare the results in terms of the execution time of the sorting of records.</p><h3 id="Sorting-the-File"><a href="#Sorting-the-File" class="headerlink" title="Sorting the File."></a>Sorting the File.</h3><p>Once you have sorted the contents of the list, it might be a good idea to save the sorted data in a file. Make your program create a new file, and write all the contents of the list into that file in a sensible format. Use a text editor to look at the file and verify that it has the same format as the original file, and all the data is properly sorted.</p><h3 id="How-Fast-Is-It"><a href="#How-Fast-Is-It" class="headerlink" title="How Fast Is It?"></a>How Fast Is It?</h3><p>It is important to know how long computer operations are going to take when they have to work on a large amount of data.</p><p>Use a function (twice) to time how long it takes the computer to sort the list of 1000 data items. Do not include the time it takes to read the file or the time it takes to write the new file, just the pure sorting time. Note the time that you observe.</p><p>Now you know how long it takes to sort a database of 1000 items. How long do you think it would take to sort a database of 2000 names? 3000 names? 10,000 names?</p><p>Think about those questions, and work out what you believe the answer is. Then find out what the real answer is. The other files have exactly the same format as people1.txt, but are longer. PeopleN.txt contains N thousand data records. If your program was nicely written, it will be a few seconds’ work to change the list size and make it read a different file.</p><p>See how long it takes to sort these larger files, and compare the results to your predictions. If your predictions weren’t substantially correct, make sure you understand why. You have just demonstrated a very important phenomenon of computing.</p>]]></content>
    
    <summary type="html">
    
      分析在不同数据量情况下，各种排序算法的性能优劣，并且根据题目要求算出所需要的数据。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CS112-Grade-Distribution</title>
    <link href="https://tk1307993.coding.me/CS112-Grade-Distribution.html"/>
    <id>https://tk1307993.coding.me/CS112-Grade-Distribution.html</id>
    <published>2019-11-10T00:46:35.000Z</published>
    <updated>2019-11-10T00:51:15.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>From now on, all assignments will involve defining classes with instance variables and methods.</p><p>Instance variables are used to describe an object of the class. For example, to describe a rectangle, we need to have height and width, so should be instance variables of the Rectangle class.</p><p>Methods are used to manipulate the instance variables, for example to retrieve, or modify, or print out the instance variables etc.</p><p>When designing a class, you should answer the following question: What information is needed in order to describe an object?</p><p>This information should be defined as instance variables. If some information is not related with object, they SHOULD NOT be defined as instance variables. For example, Scanner object is needed for input, but it is not necessary to describe a rectangle, so it should not be an instance variable.</p><p>When some information is related with the object, but can be obtained from some other instance variables, you have to decide if you want to define them as instance variables. If you do define them as instance variables, you have to make sure the consistency of these variables when you modify some instance variables. For example, the area of a rectangle is a function of height and width, if you define the area as instance variable; you have to make sure the area is updated whenever you update height and width.</p><p>This information should be defined as instance variables. If some information is not related with object, they SHOULD NOT be defined as instance variables. For example, Scanner object is needed for input, but it is not necessary to describe a rectangle, so it should not be an instance variable.</p><p>When some information is related with the object, but can be obtained from some other instance variables, you have to decide if you want to define them as instance variables. If you do define them as instance variables, you have to make sure the consistency of these variables when you modify some instance variables. For example, the area of a rectangle is a function of height and width, if you define the area as instance variable; you have to make sure the area is updated whenever you update height and width.</p><p>This homework is based on Project 3 on page 372. Create a class that represents a grade distribution for a given course.</p><ol><li>Download the attached GradeDistribution.txt, rename it to GradeDistribution.java</li><li>Complete the class definition by<ul><li>Determine the needed instance variables</li><li>Define the set methods for each of the letter grades A, B, C, D, and F.<blockquote><p>Note: a set method should (1) have return type void<br>(2) take a parameter for the new value of the instance variable.<br>(3) assign the value of the instance variable to be the given parameter.</p></blockquote></li><li>Define get method for each of the letter grades A, B, C, D, and F.<blockquote><p>Note: a get method should (1) takes no parameter (2) returns the value of an instance variable (3) the return type should be the type of the instance variable.</p></blockquote></li><li>Define the following method which returns the total number of grades.</li><li>Method that returns the percentage of each letter grade as a whole number between 0 and 100, inclusive.</li><li>Draw a bar graph of the grade distribution.</li></ul></li></ol><p>For example, if the grades are 1 A, 4 Bs, 6 Cs, 2 Ds, and 1 F, the total number of grades is 14, the percentage of As is 7, the percentage of Bs is 29, the percentage of Cs is 43, the percentage of Ds is 14, and the percentage of Fs is 7. The A row would contain 4 asterisks (7 percent of 50 rounded to the nearest integer), the B row 14, the C row 21, the D row 7, and the F row 4.</p><h3 id="Test-the-class"><a href="#Test-the-class" class="headerlink" title="Test the class"></a>Test the class</h3><p>Download the GradesGraphTest.java, compile and run compare the output with the attached sample output, debug your code if it doesn’t look right.</p>]]></content>
    
    <summary type="html">
    
      代写Java基础课作业，做一个统计分数的小程序，打印出统计分布图即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP20003-2048-Game</title>
    <link href="https://tk1307993.coding.me/COMP20003-2048-Game.html"/>
    <id>https://tk1307993.coding.me/COMP20003-2048-Game.html</id>
    <published>2019-11-07T13:40:13.000Z</published>
    <updated>2019-11-08T14:57:33.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-description"><a href="#Assignment-description" class="headerlink" title="Assignment description"></a>Assignment description</h3><p>In this programming assignment you’ll be expected to build a solver for the 2048 game. The game has been described by the Wall Street Journal as “almost like Candy Crush for math geeks”. You can play the game compiling the code given to you using the keyboard, or using this web implementation <a href="http://2048game.com/" target="_blank" rel="noopener">http://2048game.com/</a>.</p><h3 id="The-2048-game"><a href="#The-2048-game" class="headerlink" title="The 2048 game"></a>The 2048 game</h3><p>2048 is played on a 4x4 grid, with numbered tiles that slide smoothly when a player moves them using the four arrow keys. Every turn, a new tile will randomly appear in an empty spot on the board with a value of either 2 or 4. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.</p><p>A scoreboard on the upper-right keeps track of the user’s score. The user’s score starts at zero, and is incremented whenever two tiles combine, by the value of the new tile.</p><p>The game is won when a tile with a value of 2048 appears on the board, hence the name of the game. After reaching the 2048 tile, players can continue to play (beyond the 2048 tile) to reach higher scores. In this assignment, your solver should continue playing after reaching tile 2048. When the player has no legal moves (there are no empty spaces and no adjacent tiles with the same value), the game ends.</p><h3 id="The-Algorithm"><a href="#The-Algorithm" class="headerlink" title="The Algorithm"></a>The Algorithm</h3><p>Each possible configuration of the 2048 4x4 grid is called a state. The 2048 Graph G = (V, E) is implicitly defined. The vertex set V is defined as all the possible 4x4 configurations (states), and the edges E connecting two vertexes are defined by the legal movements (right, left, up, down).</p><p>Your task is to find the path leading to the higest score, i.e. leading to the most rewarding vertex (state). A path is a sequence of movements. You are going to use a variant of Dijkstra to explore the most rewarding path first, up to a maximum depth D.</p><p>Every time the game asks you for a movement (action), you should explore all possible paths up to depth D. Once you finished generating all the paths, you should return the first action only of the path leading to the highest score vertex. This action will be then executed by the game engine.</p><p>You might have multiple paths with the same maximum score. If more than one action (left, right, up or down) begins paths with the same maximum score, you’ll have to break ties randomly.</p><p>Make sure you manage the memory well. Everytime you finish running the algorithm, you have to free all the nodes from the memory, otherwise you are going to run out of memory fairly fast.</p><p>When you applyAction you have to create a new node, that points to the parent, updates the board with the action chosen, updates the priority of the node with the new score, and updates any other auxiliary data in the node.</p><p>You are going to need some auxiliary data structures to update the scores of the first 4 applicable actions. The function propagateBackScoreToFirstAction takes the score of the newly generated node, and propagates back the score to the first action of the path.</p><p>This propagation can be either Maximeze or Average:</p><p>If you Maximize, you have to make sure that the first action is updated to reflect the maximum score of any of its children up to depth D.</p><p>If you Average, you have to make sure that the first action is updated to reflect the average score taking into account all its children up to depth D.</p><h3 id="Deliverables-evaluation-and-delivery-rules"><a href="#Deliverables-evaluation-and-delivery-rules" class="headerlink" title="Deliverables, evaluation and delivery rules"></a>Deliverables, evaluation and delivery rules</h3><p>Deliverable 1 – Solver source code<br>You are expected to hand in the source code for your solver, written in C. Obviously, your source code is expected to compile and execute flawlessly using the following makefile command: make generating an executable called 2048. Remember to compile using the optimization flag gcc -O3 for doing your experiments, it will run twice faster than compiling with the debugging flag gcc -g. For the submission, please submit your makefile with gcc -g option, as our scripts need this flag for testing.</p><p>Your implementation should achive scores higher than 5000 points.</p><p>Base Code<br>You are given a base code. You can compile the code and play with the keyboard. The default solver chooses an action randomly. You are going to have to program your solver in the file ai.c. Look at the file 2048.c to know which function is called to select an action to execute.</p><p>You are given the structure of a node, and also a priority queue implementation. Look into the utils.* files to know about the functions you can call to apply actions.</p><p>You are free to change any file.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>You can play the game with the keyboard by executing ./2048</p><p>In order to execute your solver use the following command:</p><p>./2048 ai &lt;max/avg&gt; <depth><br>for example:</depth></p><p>./2048 ai avg 6<br>Will run average updates up to depth 6. </p><p>If you append the option “slow” at the end, it will slow the ai so you can see it playing</p><p>./2048 ai avg 6 slow</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>Your solver will print into an output.txt file the following information:</p><p>Max Depth<br>Number of generated nodes.<br>Number of expanded nodes.<br>Number of expanded nodes per second.<br>Total Search Time, in seconds.<br>Maximum value in the board.<br>Score</p><h4 id="Deliverable-2-–-Experimentation"><a href="#Deliverable-2-–-Experimentation" class="headerlink" title="Deliverable 2 – Experimentation"></a>Deliverable 2 – Experimentation</h4><p>Besides handing in the solver source code, you’re required to provide a table with the mean score and deviation, mean max tile and deviation, and total execution time for each type of propagation (max/avg) you implement and each max depth from 0,..,6.<br>In order to test your solver, you have to average over multiple runs because 2048 has a random component: tiles can appear in different locations after each move. A sample of 10 runs is enough.</p><p>For each propagation type, plot a figure where the x axis is the depth, and y is the mean score.</p><p>Explain your results using your figures and tables. Which max depth works best? Is it better to propagate max or avg?</p>]]></content>
    
    <summary type="html">
    
      代写一个带AI功能的2048游戏，要求能自动玩，并且平均能得到5000分以上的成绩。作业中给出了2048的高分AI参考算法。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CS812-Inventory-Management-System</title>
    <link href="https://tk1307993.coding.me/CS812-Inventory-Management-System.html"/>
    <id>https://tk1307993.coding.me/CS812-Inventory-Management-System.html</id>
    <published>2019-11-03T11:06:24.000Z</published>
    <updated>2019-11-03T11:08:59.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Key to any retail shop, from Amazon to K-Mart to Coles, is its inventory management system - that is a system to decide what items to stock and how many should the stock be. In this assignment, we will see an application of Markov Decision Processes (MDPs) in such a system.</p><h3 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h3><p>You have been hired to setup the inventory management system for Retail (R). R sells various types of electronics goods, designed and developed by staffs and students. R has multiple retail stores of various sizes, at different locations. Your task is to create a system that uses historical customer behaviour data from a store, to decide what type of items to order/return and how many, so that the store makes the most profit. The rest of this document describes the detail of the problem.</p><p>Each retail store of R can be classified into one of five different classes of store, based on their capacities. The 5 types of stores, along with their stocking capacities and maximum ordering capabilities are:</p><ul><li><p>Tiny store. This store sells up to 2 types of items and can stock at most 3 items. It can order at most 2 items per week and can return at most 1 item per week.</p></li><li><p>Small store. This store sells up to 2 types of items and can stock up to 8 items. It can order at most 3 items per week and can return at most 2 items per week.</p></li><li><p>Medium store. This store sells up to 3 types of items and can stock up to 8 items. It can order at most 3 items per week and can return at most 2 items per week.</p></li><li><p>Large store. This store sells up to 5 types of items and can stock up to 10 items. It can order at most 4 items per week and can return at most 2 items per week.</p></li><li><p>Mega store. This store sells up to 7 types of items and can stock up to 20 items. It can order at most 5 items per week and can return at most 3 items per week.</p></li></ul><p>Each store can order items at no cost. Whenever an item is sold, the store keeps 75% of the payment and passes the rest to R headquarter. For each miss opportunity (i.e., failing to provide an item requested by a customer), the store is fined 25% of the price of the requested item by R headquarter. When a store returns an item, it must pay half of the price of the item to R headquarter.</p><p>To simplify the problem, R assumes:</p><ul><li><p>Stocking is done while the store is closed (Saturday-Sunday). Each store can only order the stocks once per week, which is on Saturday morning. The stock will be delivered and arrange on the shelves during the weekend, before it opens again for next week’s operation.</p></li><li><p>All items ordered will be delivered in good condition, on time. Also, the quality of the goods will not degrade over time.<br>When the order/return operation causes the store to have more items than its capacity, R will automatically cut the store’s order prior to delivery, so that there will be no excess items in the store. Assuming the types of items are indexed from 1, the items will be cut ascendingly, from items with the lowest index first. This cut will cost the store a penalty fee of $F per item cut.</p></li><li><p>The buying habit of the customers are independent between one another. Also, the buying habit of the customers of one store is independent from those of other stores. However, for each type of items in the store, the amount of items the customer buys do depend on the amount that is available in the store right after the most recent replenishment.</p></li><li><p>Within the week, the total number of items per type of goods that the customers of a store want to buy is at most equivalent to the total number of items that the store can stock.</p></li><li><p>The performance of the store is measured weekly, right after the store is closed for the week.</p></li><li><p>The inventory system should assume that the store will remain open forever.<br>Although for simplicity in computing the actual profit gained, the system will be tested on a finite number of weeks.</p></li></ul><p>Given the stochastic model of the customers’ behavior, the type of store, and information about the available items in the store immediately before the shopping order is made, the inventory management system should decide which types of items and how many should be ordered and returned, so that the store gains the maximum profit possible. Profit is defined as the income the store gets (i.e., 75% of the total payment received from customer) minus the sum of the cost of returning the items, the fines for miss opportunities, and the penalty fees for having items being cut from the order list by R headquarter.</p><h3 id="What-you-need-to-do"><a href="#What-you-need-to-do" class="headerlink" title="What you need to do"></a>What you need to do</h3><p>Your tasks in this assignment can be classified into 4 parts:</p><ol><li><p>Design the solution. This task contains two main components, i.e., framing the problem as an MDP problem and deciding how to solve the problem. Note that you should design the MDP components, i.e., what are the states, actions, etc., manually. However, the exact parameters of your MDP problem will depend on the given input file. Please be aware that how you define your MDP problem might help or hurt your ability to solve the problem.</p></li><li><p>Implement your design. Your program is allowed a maximum of 3 minutes computation prior to each simulation run. If you use an online method for solving MDP, at each step during run-time, your program is allowed a maximum of 30 seconds computation time for a tiny/small/medium store and a maximum of 1 minute computation time for a large/mega store. Your program will be run on a PC with the same specification as those in the tutorial rooms. The time requirement is for a program that runs as a single-threaded process. If you use multi-threading, then we will divide the aforementioned time limit with the number of threads you use. Note: You are not allowed to use any library for linear algebra, optimization, and MDP solver.</p></li><li><p>Implement the basic value iteration to compare your design with the baseline (at least for the tiny and small stores).</p></li><li><p>Write a report. you only need to answer the questions we post for the Report (see the last part of this document). However, to answer these questions well, you do need to do #3.</p></li></ol><h3 id="Input-and-Output-format"><a href="#Input-and-Output-format" class="headerlink" title="Input and Output format"></a>Input and Output format</h3><p>Input format. The input is a single .txt file, containing all the information about the store, the types and price of the items that can be sold at the store, and the store’s customers’ behaviour.</p><h3 id="Output-format"><a href="#Output-format" class="headerlink" title="Output format"></a>Output format</h3><p>Your program should output the state, the order list, and the return list at each week.</p>]]></content>
    
    <summary type="html">
    
      代写人工智能课程的作业，不用全部实现，但是需要有基础功能，比如读写的support code，马卡洛夫决策过程相关。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>COMPSCI101-Python-Lists</title>
    <link href="https://tk1307993.coding.me/COMPSCI101-Python-Lists.html"/>
    <id>https://tk1307993.coding.me/COMPSCI101-Python-Lists.html</id>
    <published>2019-10-30T14:05:03.000Z</published>
    <updated>2019-10-30T14:09:34.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-Assignment"><a href="#The-Assignment" class="headerlink" title="The Assignment"></a>The Assignment</h3><p>In this assignment, you will develop eight functions. Each function needs to be submitted into CodeRunner. When you press the check button, CodeRunner will give you feedback and a mark for that function.</p><h3 id="Question-1-get-ends-with-a-vowel-function"><a href="#Question-1-get-ends-with-a-vowel-function" class="headerlink" title="Question 1 - get_ends_with_a_vowel() function"></a>Question 1 - get_ends_with_a_vowel() function</h3><p>Define the get_ends_with_a_vowel() function which is passed a list of strings as a parameter. The function returns a list containing all the strings of the parameter list which have a last letter which is a vowel (the letters a, e, i, o, u). You can assume that none of the elements of the parameter list are the empty string. For example, the following code:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">print</span>(<span class="string">"1."</span>, get_ends_with_a_vowel([<span class="string">"Cain"</span>, <span class="string">"Jessie"</span>, <span class="string">"Robert"</span>, <span class="string">"Geoffrey"</span>, <span class="string">"Li"</span>]))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"2."</span>, get_ends_with_a_vowel([<span class="string">"Jess"</span>, <span class="string">"Cain"</span>, <span class="string">"Amity"</span>, Raeann<span class="string">"]))</span></span><br><span class="line"><span class="string">print("</span>3.<span class="string">", get_ends_with_a_vowel([]))</span></span><br></pre></td></tr></table></figure></p><p>prints:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> ['Jessie', 'Li']</span><br><span class="line"><span class="number">2.</span> []</span><br><span class="line"><span class="number">3.</span> []</span><br></pre></td></tr></table></figure></p><h3 id="Question-2-get-common-words-used-function"><a href="#Question-2-get-common-words-used-function" class="headerlink" title="Question 2 - get_common_words_used() function"></a>Question 2 - get_common_words_used() function</h3><p>Define the get_common_words_used() function which is passed a string of text and a list of commonly used words (strings) as parameters. The function returns a list containing all the words in the text string which are in the list of commonly used words. The returned list should contain no duplicates and should be sorted (use the list method, sort()). The string of text should be converted to lower case before you do any checking as the commonly used words are all in lower case. For example, the following code:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"1."</span>, get_common_words_used(<span class="string">"A bus station is where a bus stops A train station is where a train stops On my desk I have a work station"</span>, [<span class="string">"a"</span>, <span class="string">"is"</span>, <span class="string">"i"</span>, <span class="string">"on"</span>, <span class="string">"the"</span>])</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"2."</span>, get_common_words_used(<span class="string">"Easy come, easy go go go"</span>, [<span class="string">"a"</span>, <span class="string">"go"</span>, <span class="string">"i"</span>, <span class="string">"on"</span>, <span class="string">"the"</span>])</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"3."</span>, get_common_words_used(<span class="string">"Easy come, easy go go go"</span>, [<span class="string">"a"</span> , <span class="string">"is"</span>, <span class="string">"i"</span>, <span class="string">"on"</span>, <span class="string">"the"</span>])</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"4."</span>, get_common_words_used(<span class="string">""</span>, [<span class="string">"a"</span>, <span class="string">"is"</span>, <span class="string">"i"</span>, <span class="string">"the"</span>])</span></span>)</span><br></pre></td></tr></table></figure></p><p>prints:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> ['a' , 'i' , 'is' , 'on']</span><br><span class="line"><span class="number">2.</span> ['go']</span><br><span class="line"><span class="number">3.</span> []</span><br><span class="line"><span class="number">4.</span> []</span><br></pre></td></tr></table></figure></p><h3 id="Question-3-get-text-value-function"><a href="#Question-3-get-text-value-function" class="headerlink" title="Question 3 - get_text_value() function"></a>Question 3 - get_text_value() function</h3><p>Define the get_text_value() function which is passed a string of text as a parameter. The function returns an integer which is the total of the value of each word of the parameter string. The words of the parameter string are valued based on the value of the first letter added to the value of the last letter. If the word has only one letter then the value of the word is just the value of the first letter. The first two lines of code in this function are:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', k', '<span class="number">1</span>', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'V', 'w', 'x', 'y', 'z']</span><br><span class="line">letter_values = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>where the letters list contains every lowercase letter of the alphabet and the letter_values list contains the value corresponding to each letter of the alphabet, i.e., the first element is the value of the letter ‘a’, the second element is the value of the letter b’,and so on.</p><p>The string of text parameter should be converted to lower case before you do any checking as the letters of the alphabet are all in lower case. You can assume that the first and the last letters of all the words are alphabetic characters. For example, the following code:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"1. Text value:"</span>, get_text_value(<span class="string">"abracadabra"</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"2. Text value:"</span>, get_text_value(<span class="string">"a b"</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"3. Text value:"</span>, get_text_value(<span class="string">"enjoy Today"</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"4. Text value:"</span>, get_text_value(<span class="string">""</span>)</span></span>)</span><br></pre></td></tr></table></figure></p><p>prints:<br><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="built_in">Text</span> value: <span class="number">2</span></span><br><span class="line"><span class="number">2</span>. <span class="built_in">Text</span> value: <span class="number">5</span></span><br><span class="line"><span class="number">3</span>. <span class="built_in">Text</span> value: <span class="number">21</span></span><br><span class="line"><span class="number">4</span>. <span class="built_in">Text</span> value: <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-4-is-legitmate-code-function"><a href="#Question-4-is-legitmate-code-function" class="headerlink" title="Question 4 - is_legitmate_code() function"></a>Question 4 - is_legitmate_code() function</h3><p>Define the is_legitmate_code() function which is passed a string as a parameter. The function returns a boolean indicating whether the parameter string denotes a legitimate code or not. A legitimate code is a string made up of one letter followed by any<br>number of digits or spaces (at least one digit). The first three lines of code inside the function should be:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code-letters = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"Z"</span>, <span class="string">"T"</span>, <span class="string">"X"</span>]</span><br><span class="line">min_for_each_letter = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, O, <span class="number">4</span>] # inclusive</span><br><span class="line">max_for_each_letter = [<span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>] # inclusive</span><br></pre></td></tr></table></figure></p><p>where:</p><ul><li>code_letters is the list of code letters which are legitimate for the first letter of the code string,</li><li>min_for_each_letter is a list which contains the minimum number (inclusive) for each digit following that letter,</li><li>max_for_each_letter is a list which contains the maximum number (inclusive) for each digit following that letter.</li></ul><p>For example, the third element of the code_letters list is the letter ‘Z’, the corresponding third element of the min_for_each_letter list is 1 and the corresponding third element of the max_for_each_letter list is 6. This indicates that the code digits which follows the letter ‘Z’ can be any number made up of the digits 1, 2, 3, 4, 5 or 6. The number part of the code string can contain any number of spaces.</p><p>Note: The code number part of a parameter string to be tested could contain an alphabetic character thus making the code not legitimate. You will find it useful to use the isdigit() method which returns True if the string is a digit, False otherwise.For example, the following code:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"1."</span>, is_legitmate_code(<span class="string">'B747346'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"2."</span>, is_legitmate_code(<span class="string">'X 444 454'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"3."</span>, is_legitmate_code(<span class="string">'T 444854'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"4."</span>, is_legitmate_code(<span class="string">'X 444X454'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"5."</span>, is_legitmate_code(<span class="string">'X '</span>)</span></span>)</span><br></pre></td></tr></table></figure></p><p>prints<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="literal">True</span></span><br><span class="line"><span class="number">2.</span> <span class="literal">True</span></span><br><span class="line"><span class="number">3.</span> <span class="literal">False</span></span><br><span class="line"><span class="number">4.</span> <span class="literal">False</span></span><br><span class="line"><span class="number">5.</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-5-get-fail-pass-average-function"><a href="#Question-5-get-fail-pass-average-function" class="headerlink" title="Question 5 - get_fail_pass_average() function"></a>Question 5 - get_fail_pass_average() function</h3><p>Define the get_fail_pass_average() function which is passed a list of integers as a parameter where each integer represents a mark out of 100. The function returns a tuple made up of the average of all the marks which are less than 50, followed by the average of all the marks which are 50 or more (both averages are rounded to the nearest whole number). If there are no fail marks then the average fail mark should be set to -1 and if there are no pass marks then the average pass mark should be set to -1. For example, the following code:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"1."</span>, get_fail_pass_average([<span class="number">63</span>, <span class="number">65</span>, <span class="number">33</span>]))</span><br><span class="line">print(<span class="string">"2."</span>, get_fail_pass_average([<span class="number">63</span>, <span class="number">62</span>, <span class="number">100</span>, <span class="number">100</span>]))</span><br><span class="line">print(<span class="string">"3."</span>, get_fail_pass_average([<span class="number">33</span>, <span class="number">42</span>, <span class="number">20</span>, <span class="number">10</span>]))</span><br><span class="line">print(<span class="string">"4."</span>, get_fail_pass_average([<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">0</span>]))</span><br><span class="line">print(<span class="string">"5."</span>, get_fail_pass_average([]))</span><br></pre></td></tr></table></figure></p><h3 id="Question-6-get-triple-sums-list-function"><a href="#Question-6-get-triple-sums-list-function" class="headerlink" title="Question 6 - get_triple_sums_list() function"></a>Question 6 - get_triple_sums_list() function</h3><p>Define the get_triple_sums_list() function which is passed a list of integers as a parameter. The function returns a new list containing all the sums of the parameter list elements taken three at a time, i.e., the sum of the first three elements, the sum of the next three elements, and so on. If there are elements of the parameter list which are left over, the final element of the returned list is the sum of these leftover elements (it could be that there is one or that there are two leftover elements). If the parameter list is empty, the function returns the empty list.</p><h3 id="Question-7-remove-doubles-function"><a href="#Question-7-remove-doubles-function" class="headerlink" title="Question 7 - remove_doubles() function"></a>Question 7 - remove_doubles() function</h3><p>Define the remove_doubles() function which is passed a list of integers as a parameter. The function removes any element in the list which is the same as the previous element.</p><h3 id="Question-8-get-dice-score-function"><a href="#Question-8-get-dice-score-function" class="headerlink" title="Question 8 - get_dice_score( ) function"></a>Question 8 - get_dice_score( ) function</h3><p>In a dice rolling game a hand is made up of eight random dice throws and is valued in the following way:</p><ul><li>Each dice which is part of a run of dice starting from a 1 is valued at 3 points.</li><li>If there is no 1 in a hand of eight dice then the score for the whole hand is 0.</li><li>A hand of dice can contain more than one run.<br>Study the following five example hands of eight dice and their corresponding valuation.</li></ul>]]></content>
    
    <summary type="html">
    
      代写关于List用法的Python基础作业，一共编写八个问题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS180-Repetition</title>
    <link href="https://tk1307993.coding.me/CS180-Repetition.html"/>
    <id>https://tk1307993.coding.me/CS180-Repetition.html</id>
    <published>2019-10-26T04:15:53.000Z</published>
    <updated>2019-10-26T04:18:59.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this project is to help you become more familiar with scanners, String manipulation, conditionals, and advanced usage of the for loop.</p><p>These skills will help you in job interviews and future projects.</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>One of the great unsolved problems of the 20th century was sequencing the entire human genome. Until our genome was sequenced we had an incomplete view of our evolution, diseases, migrations as a species and genetic differences.</p><p>One of the most challenging parts of sequencing the genome was putting it all together. This was left to computer scientists. Gene sequencing machines work by splitting DNA down into small fragments, replicating them thousands of times with radioactive nucleotices, and finally reading them back.</p><p>The problem is that a human genome has three billion (3,000,000,000) base pairs and the sequencer processes about 500 random pairs at a time. Sequencing software pieces all of these together matching the overlaps to reconstruct the whole thing.</p><p>You are going to build sequencing software that:</p><ul><li>Reads in and re-constructs overlapping sequences</li><li>Checks to make sure the DNA is valid</li><li>Looks for genes in the DNA</li><li><p>Prints out an analysis of the gene<br>Note:</p></li><li><p>Please do the project chronologically as you cannot test a section without first completely its predecessor.</p></li></ul><h3 id="Part-1-Reconstruction"><a href="#Part-1-Reconstruction" class="headerlink" title="Part 1 - Reconstruction"></a>Part 1 - Reconstruction</h3><p>Problem<br>The first part of your DNA analysis program is going to be finding the longest terminating overlap between the DNA you have so far and the new DNA the sequencer gives you. Look at the following example:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">We start with no <span class="string">DNA:</span></span><br><span class="line">Your <span class="string">DNA:</span>      <span class="string">""</span></span><br><span class="line">Sequencer <span class="string">DNA:</span> <span class="string">"ATATATATA"</span></span><br><span class="line">New <span class="string">Sequence:</span>  <span class="string">"ATATATATA"</span></span><br><span class="line"></span><br><span class="line">Your <span class="string">DNA:</span>      <span class="string">"ATATATATA"</span></span><br><span class="line">Sequencer <span class="string">DNA:</span>       <span class="string">"ATACATGA"</span></span><br><span class="line">New <span class="string">Sequence:</span>  <span class="string">"ATATATATACATGA"</span></span><br><span class="line"></span><br><span class="line">Your <span class="string">DNA:</span>      <span class="string">"ATATATATA"</span></span><br><span class="line">Sequencer <span class="string">DNA:</span>       <span class="string">"ATACATGA"</span></span><br><span class="line">New <span class="string">Sequence:</span>  <span class="string">"ATATATATACATGA"</span></span><br></pre></td></tr></table></figure></p><h4 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h4><p>Know how to use the Scanner</p><p>Know how to use the substring, startsWith and endsWith methods in String</p><p>Get a sheet of paper and write down instructions telling your roommate how to find the longest terminating overlap.</p><h4 id="Things-To-Do"><a href="#Things-To-Do" class="headerlink" title="Things To Do"></a>Things To Do</h4><ol><li>Create a class Sequencer</li><li>Create a public static void main(String[] args) method in Sequencer, this is where you will put all your code.</li><li>Ask the user for input by printing “Input lowercase DNA fragments one line at a time. End with a blank line.”<br>Read lines of DNA from the input</li><li>Convert the line to lower case</li><li>Join the line with the current DNA on their longest terminating overlap like the example above.</li><li>Stop scanning when the user enters a blank line.</li><li>If the input contains any characters that are not a, t, c or g print “DNA is invalid” and return otherwise print “Input DNA: “ followed by the joined DNA.</li></ol><h4 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h4><p>You may assume the input DNA is lower-case</p><p>You may assume that each line of input will have at lease one overlap</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Here is an example up to this point with the DNA ccatgctaatttag:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input lowercase DNA fragments <span class="literal">one</span> <span class="built_in">line</span> <span class="keyword">at</span> <span class="keyword">a</span> <span class="built_in">time</span>. End <span class="keyword">with</span> <span class="keyword">a</span> blank <span class="built_in">line</span>.</span><br><span class="line">ccatgctaa</span><br><span class="line">taatttag</span><br><span class="line"></span><br><span class="line">Input DNA: ccatgctaatttag</span><br></pre></td></tr></table></figure></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input lowercase DNA fragments <span class="literal">one</span> <span class="built_in">line</span> <span class="keyword">at</span> <span class="keyword">a</span> <span class="built_in">time</span>. End <span class="keyword">with</span> <span class="keyword">a</span> blank <span class="built_in">line</span>.</span><br><span class="line">atgaccggcagtctatatgactctgatgccgcaggctgcctctga</span><br><span class="line"></span><br><span class="line">Input DNA: atgaccggcagtctatatgactctgatgccgcaggctgcctctga</span><br><span class="line">Start codon position: <span class="number">0</span></span><br><span class="line">End codon position: <span class="number">42</span></span><br><span class="line">Gene: atgaccggcagtctatatgactctgatgccgcaggctgcctc</span><br><span class="line"></span><br><span class="line">Analysis Results</span><br><span class="line"></span><br><span class="line">Eye color: brown</span><br><span class="line">Hair color: red</span><br><span class="line">Can roll tongue? no</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础作业，练习基本的scanner, conditionals和for, loop操作。但是内容很多，分三个part.
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS3014-Shell</title>
    <link href="https://tk1307993.coding.me/CS3014-Shell.html"/>
    <id>https://tk1307993.coding.me/CS3014-Shell.html</id>
    <published>2019-10-22T14:47:01.000Z</published>
    <updated>2019-10-22T14:49:26.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This is an individual assignment. However, you are encouraged to help (and seek help from) your peers (except sharing code, of course). This assignment contains the following two parts: 1) observing the OS through the /proc file system; 2) building a shell. Everything you do in this warm-up assignment is at the user-level (outside of the OS kernel). Your code must be compiled for Linux, and our reference machines will be the ones in the CSIL lab(Make sure your code compiles and runs correctly on these machines).</p><h3 id="Building-a-shell"><a href="#Building-a-shell" class="headerlink" title="Building a shell"></a>Building a shell</h3><p>UNIX shells:<br>The OS command interpreter is the program that people interact with in order to launch and control programs. On UNIX systems, the command interpreter is often called shell: a user-level program that gives people a command-line interface to launching, suspending, and killing other programs. sh, ksh, csh, tcsh, bash, … are all examples of UNIX shells. You use a shell like this every time you log into a Linux machine at a CS computer lab and bring up a terminal. It might be useful to look at the manual pages of these shells, for example, type “man csh”.</p><p>The most rudimentary shell is structured as the following loop:</p><ul><li><p>Print out a prompt;</p></li><li><p>Read a line from the user;</p></li><li><p>Parse the line into the program name and an array of parameters;</p></li><li><p>Use the fork() system call to spawn a new child process;</p></li><li><p>The child process then uses the exec() system call (or one of its variants) to launch the specified program;</p></li><li><p>The parent process (the shell) uses the wait() system call (or one of its variants) to wait for the child to terminate;</p></li><li><p>Once the child (the launched program) finishes, the shell repeats the loop by jumping to 1.</p></li></ul><p>Although most commands people type on the shell prompt are the names of other UNIX programs (such as ps or cat), shells also recognize some special commands (called internal commands) that are not program names. For example, the exit command terminates the shell, and the cd command changes the current working directory. Shells directly make system calls to execute these commands, instead of forking a child process to handle them.</p><h3 id="Requirements-in-detail"><a href="#Requirements-in-detail" class="headerlink" title="Requirements in detail"></a>Requirements in detail</h3><p>Your job is to implement a very primitive shell that knows how to launch new programs in the foreground and the background. It should also recognize a few internal commands. More specifically, it should support the following features.</p><p>It should recognize the internal commands: exit, jobs, and cd. exit should use the exit() system call to terminate the shell. cd uses the chdir() system call to change to a new directory. If the command line does not indicate any internal commands, it should be in the following form:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">program</span> <span class="attr">name</span>&gt;</span> <span class="tag">&lt;<span class="name">arg1</span>&gt;</span> <span class="tag">&lt;<span class="name">arg2</span>&gt;</span> .... <span class="tag">&lt;<span class="name">argN</span>&gt;</span> [&amp;]</span><br></pre></td></tr></table></figure></p><p>Your shell should invoke the program, passing it the list of arguments in the command line. The shell must wait until the started program completes unless the user runs it in the background (with &amp;).</p><p>To allow users to pass arguments you need to parse the input line into words separated by whitespace (spaces and ‘\t’ tab characters). You might try to use strtok_r() for parsing (check the manual page of strtok_r() and Google it for examples of using it). In case you wonder, strtok_r() is a user-level utility, not a system call. This means this function is fulfilled without the help of the operating system kernel. To make the parsing easy for you, you can assume the ‘&amp;’ token (when used) is separated from the last argument with one or more spaces or ‘\t’ tab characters.</p><p>The shell runs programs using two core system calls: fork() and execvp(). Read the manual pages to see how to use them. In short, fork() creates an exact copy of the currently running process, and is used by the shell to spawn a new process. The execvp() call is used to overload the currently running program with a new program, which is how the shell turns a forked process into the program it wants to run. In addition, the shell must wait until the previously started program completes unless the user runs it in the background (with &amp;). This is done with the wait() system call or one of its variants (such as waitpid()). All these system calls can fail due to unforeseen reasons (see their manual pages for details). You should check their return status and report errors if they occur.</p><p>No input the user gives should cause the shell to exit (except when the user types exit or Ctrl+D). This means your shell should handle errors gracefully, no matter where they occur. Even if an error occurs in the middle of a long pipeline, it should be reported accurately and your shell should recover gracefully. In addition, your shell should not generate leaking open file descriptors. Hint: you can monitor the current open file descriptors of the shell process through the /proc file system.</p><p>Your shell needs to support pipes. Pipes allow the stdins and stdouts of a list of programs to be concatenated in a chain. More specifically, the first program’s stdout is directed to the stdin of the second program; the second program’s stdout is directed to the stdin of the third program; and so on so forth. Multiple piped programs in a command line are separated with the token “|’. A command line will therefore have the following form:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">program1</span>&gt;</span> <span class="tag">&lt;<span class="name">arglist1</span>&gt;</span> | <span class="tag">&lt;<span class="name">program2</span>&gt;</span> <span class="tag">&lt;<span class="name">arglist2</span>&gt;</span> | ... | <span class="tag">&lt;<span class="name">programN</span>&gt;</span> <span class="tag">&lt;<span class="name">arglistN</span>&gt;</span> [&amp;]</span><br></pre></td></tr></table></figure></p><p>Try an example like this: pick a text file with more than 10 lines (assume it is called textfile) and then type<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat textfile | <span class="type">gzip</span> -c | <span class="type">gunzip</span> -c | <span class="type">tail</span> -n <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>in a regular shell or in the working shell we provide. Pause a bit to think what it really does. Note that multiple processes need to be launched for piped commands and all of them should be waited on in a foreground execution. The pipe() and dup2() system calls will be useful.</p><p>Your compiled executable must be called my_shell.</p><h3 id="Administrative-policies"><a href="#Administrative-policies" class="headerlink" title="Administrative policies"></a>Administrative policies</h3><p>A note on the programming language:</p><p>C/C++ is the only choice for this assignment and all later programming assignments. We are not alone in this. Most existing operating system kernels (Linux and other UNIX variants) themselves are written in C; the remaining parts are written in assembly language. Higher-level languages (Java, Perl, …), while possible, are less desirable because C allows more flexible and direct control of system resources.</p>]]></content>
    
    <summary type="html">
    
      操作系统作业，代写一个类似于Unix的Shell的程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CS246-Position-and-Matrix</title>
    <link href="https://tk1307993.coding.me/CS246-Position-and-Matrix.html"/>
    <id>https://tk1307993.coding.me/CS246-Position-and-Matrix.html</id>
    <published>2019-10-20T04:17:31.000Z</published>
    <updated>2019-10-20T04:23:06.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>You must use the C++ I/O streaming and memory management facilities on this assignment. Moreover, the only standard headers you may #include are iostream, fstream, sstream, iomanip, string, and utility. Marmoset will be programmed to reject submissions that violate these restrictions.</p><p>Each question on this assignment asks you to write a C++ program, and the programs you write on this assignment each span multiple files. Moreover, each question asks you to submit a Makefile for building your program. For these reasons, we strongly recommend that you develop your solution for each question in a separate directory. Just remember that, for each question, you should be in that directory when you create your zip file, so that your zip file does not contain any extra directory structure.</p><p>Questions on this assignment will be hand-marked to ensure that you are writing high quality code, and to ensure that your solutions employ the programming techniques mandated by each question.</p><h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><p>In this exercise, you will write a C++ class (implemented as a struct) to control a simple robotic drone exploring some terrain. Your drone starts at coordinates (0,0), facing north. Use the following structure definition for coordinates:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Position</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> ew, ns;</span><br><span class="line">  Position( <span class="keyword">int</span> ew = <span class="number">0</span>, <span class="keyword">int</span> ns = <span class="number">0</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The east-west direction is the first component of a position, and the north-south direction is the second. Your Drone class must be properly initialized via a constructor, and must provide the following methods:</p><p><table><br>    <tr><br>        <th>Method</th><br>        <th>Description</th><br>    </tr><br>    <tr><br>        <td>void forward()</td><br>        <td>Move the drone one unit forward.</td><br>    </tr><br>    <tr><br>        <td>void backward()</td><br>        <td>Move the drone one unit backward.</td><br>    </tr><br>    <tr><br>        <td>void left()</td><br>        <td>Turns the drone 90 degrees to the left, while remaining in the same location.</td><br>    </tr><br>    <tr><br>        <td>void right()</td><br>        <td>Turns the drone 90 degrees to the right, while remaining in the same location.</td><br>    </tr><br>    <tr><br>        <td>Position current()</td><br>        <td>Returns the current position of the drone.</td><br>    </tr><br>    <tr><br>        <td>int manhattanDistance()</td><br>        <td>Returns the total units of distance travelled by the drone.</td><br>    </tr><br></table><br>For simplicity, you may assume that the drone will never visit more than 50 positions before running out of fuel or otherwise breaking down.</p><p>Implement the specified operations for the Drone. (Some starter code has been provided for you in the file drone.h, along with a sample executable.) You may not change the contents of drone.h other than by adding your instance variables and comments i.e. the interface must stay exactly the same.</p><p>The test harness a3q1.cc is provided with which you may interact with your drone for testing purposes. The test harness is not robust and you are not to devise tests for it, just for the Drone class. Do not change this file.</p><h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>Consider the following class definition for a two-dimensional integer Matrix class:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Matrix</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Requires numRows &gt;= 0 &amp;&amp; numCols &gt;= 0.</span></span><br><span class="line">  <span class="comment">// If both dimensions are 0, then array pointer is set to nullptr.</span></span><br><span class="line">  <span class="comment">// If only one dimension is 0, also treat as 0x0 matrix; otherwise,</span></span><br><span class="line">  <span class="comment">// allocate space and set values in 2-D array to 0--fill later using</span></span><br><span class="line">  <span class="comment">// either operator&gt;&gt; or set().</span></span><br><span class="line">  Matrix( <span class="keyword">int</span> numRows = <span class="number">0</span>, <span class="keyword">int</span> numCols = <span class="number">0</span> );</span><br><span class="line">  Matrix( <span class="keyword">const</span> Matrix &amp; );  <span class="comment">// copy constructor</span></span><br><span class="line">  Matrix( Matrix &amp;&amp; );       <span class="comment">// move constructor</span></span><br><span class="line">  ~Matrix();</span><br><span class="line">  Matrix &amp; <span class="keyword">operator</span>=( <span class="keyword">const</span> Matrix &amp; ); <span class="comment">// copy assignment operator</span></span><br><span class="line">  Matrix &amp; <span class="keyword">operator</span>=( Matrix &amp;&amp; ); <span class="comment">// move assignment operator</span></span><br><span class="line">  Matrix <span class="keyword">operator</span>+( <span class="keyword">const</span> Matrix &amp; ) <span class="keyword">const</span>; <span class="comment">// add two matrices</span></span><br><span class="line">  Matrix <span class="keyword">operator</span>*( <span class="keyword">const</span> Matrix &amp; ) <span class="keyword">const</span>; <span class="comment">// multiply two matrices</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">rows</span>(<span class="params"></span>) <span class="keyword">const</span></span>; <span class="comment">// returns the number of rows in the matrix</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">cols</span>(<span class="params"></span>) <span class="keyword">const</span></span>; <span class="comment">// returns the number of columns in the matrix// Requires 0 &lt;= row &lt; this-&gt;rows() &amp;&amp; 0 &lt;= col &lt; this-&gt;cols()</span></span><br><span class="line">  <span class="comment">// Sets this's [row][col] == value</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set</span>(<span class="params"> <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> <span class="keyword">value</span> </span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Requires 0 &lt;= row &lt; this-&gt;rows() &amp;&amp; 0 &lt;= col &lt; this-&gt;cols()</span></span><br><span class="line">  <span class="comment">// Returns this's [row][col]</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">get</span>(<span class="params"> <span class="keyword">int</span> row, <span class="keyword">int</span> col </span>) <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// add your helper and instance variables here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Implement the specified constructors, destructor and assignment operators for the Matrix. (Some starter code has been provided for you in the file Matrix.h, along with a sample executable.) Further, you are to overload the input, output, addition, and multiplication operators as follows:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates an empty matrix whose dimensions are 0x0 and the 2-D pointer is</span></span><br><span class="line"><span class="comment">// set to nullptr</span></span><br><span class="line">Matrix m0;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m0 = "</span> &lt;&lt; m0 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// Outputs "[]"</span></span><br><span class="line"><span class="function">Matrix <span class="title">m1</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>; <span class="comment">// Creates a 2x3 matrix filled with 0s</span></span><br><span class="line">m1.<span class="built_in">set</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>); <span class="comment">// Sets m1[0][0] = 1</span></span><br><span class="line"><span class="function">Matrix <span class="title">m2</span><span class="params">(m1)</span></span>; <span class="comment">// Calls the copy constructor to make a deep copy of m1 in m2</span></span><br><span class="line">Matrix m3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reads in the number of rows, the number of columns, and then the values from</span></span><br><span class="line"><span class="comment">// standard input.</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs the matrix that is the sum of m1 and m2 (dimensions must be equal).</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m1 + m2 =\n"</span> &lt;&lt; m1 + m2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs the matrix that is the multiplication of m2 by m3, assuming</span></span><br><span class="line"><span class="comment">// their dimensions are compatible.</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m2 * m3 =\n"</span> &lt;&lt; m2 * m3 &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>which produces the following output.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./matrix &lt; in.txt</span><br><span class="line">m0 = []</span><br><span class="line">m1 + m2 =    <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">   <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">m2 * m3 =    <span class="number">1</span>    <span class="number">0</span></span><br><span class="line">   <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"></span><br><span class="line">$ cat in.txt</span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>Some implementation notes follow:</p><ul><li><p>In order to work more easily with the move operations (move constructor, move assignment operator), we have defined an empty matrix as one where the row and column dimensions are both set to 0 and the two-dimensional array pointer is set to nullptr.<br>Thus, a matrix whose information is “stolen” becomes an empty matrix. The matrix “stealing” the information must be able to grow or shrink as necessary and not throw an error.</p></li><li><p>Use the language features to simplify how you handle reading in the matrix dimensions and values. It should be possible for any white space to be used to separate the numbers (spaces, tabs, newlines, etc.) and have the input operator work properly. You shouldn’t need to do anything complex, so don’t over-think it.</p></li><li><p>When outputting the values of the matrix, an empty matrix produces the string “[]”. A non-empty matrix outputs each row’s values on a separate line, and sets the width of the value to 4 (see the setw operator in the iomanip library). You are not required to handle values whose width (including the sign) exceed this size.</p></li><li><p>The declaration of the Matrix type can be found in the provided Matrix.h file. For your submission you must add all requisite declarations to Matrix.h and all routine and member definitions to Matrix.cc. The public interface to Matrix may not be changed.</p></li><li><p>The provided test harness, a3q2.cc, can be compiled with your solution to test (and then debug) your code. The test harness is not robust and you are not to devise tests for it, just for the Matrix class. Do not change this file. The test harness allows you to have up to 10 matrices defined at one time, identified as m0 to m9. If a matrix has not been initialized, it consists of a nullptr. Most of the test harness commands cannot be performed upon an uninitialized matrix, and the harness enforces this. Additionally, the user prompts are printed to standard error so that they will not interfere with the output produced, and thus make it easier to write your test files. The test harness also provides some simple error checking, such as ensuring that get/set are within the bounds of the matrix,and that matrix dimensions are compatible for addition and multiplication. If the commands do not meets its criteria, they are silently ignored. Thus, you are not required to test these cases and only need to test valid input.</p></li><li><p>Your Makefile must create an executable named matrix. Note that the executable name is case-sensitive.</p></li></ul>]]></content>
    
    <summary type="html">
    
      实现Position和Matrix两个类，以及对应的overload方法，通过测试即可。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>COMP10002-Indexed-Document-Retrieval</title>
    <link href="https://tk1307993.coding.me/COMP10002-Indexed-Document-Retrieval.html"/>
    <id>https://tk1307993.coding.me/COMP10002-Indexed-Document-Retrieval.html</id>
    <published>2019-10-15T13:54:21.000Z</published>
    <updated>2019-10-15T13:57:42.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>In this project you will demonstrate your understanding of dynamic memory and linked data structures, and extend your skills in terms of program design, testing, and debugging. You will also learn about inverted indexes, and the basic principles of web search algorithms.</p><h3 id="Indexed-Document-Retrieval"><a href="#Indexed-Document-Retrieval" class="headerlink" title="Indexed Document Retrieval"></a>Indexed Document Retrieval</h3><p>The idea of an inverted index was mentioned briefly in class. To build an index for some input text, the words are isolated, together with their document numbers (in our case, line numbers in the input file), and arranged so that, for every word, a list of the documents that contain that word is constructed. In terms of notation, if t is an indexed term, then f t is the number of documents in the collection that contain that term at least once; and for any given document d, the value f d,t is the number of times that t appears in d. For example, consider the text:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">line</span> <span class="literal">one</span> has <span class="literal">one</span> <span class="built_in">word</span> twice</span><br><span class="line"><span class="built_in">line</span> <span class="literal">two</span> has <span class="keyword">words</span> once only</span><br><span class="line"><span class="built_in">line</span> <span class="literal">three</span> follows <span class="keyword">lines</span> <span class="literal">one</span> <span class="keyword">and</span> <span class="literal">two</span>, but <span class="keyword">not</span> <span class="literal">four</span></span><br><span class="line"><span class="built_in">line</span> <span class="literal">four</span> is like <span class="keyword">the</span> other <span class="keyword">lines</span>, <span class="keyword">not</span> like <span class="built_in">line</span> <span class="literal">five</span></span><br><span class="line"><span class="built_in">line</span> <span class="literal">five</span> has <span class="built_in">word</span> <span class="literal">one</span> <span class="keyword">and</span> <span class="built_in">word</span> <span class="literal">two</span> <span class="keyword">and</span> <span class="built_in">word</span> <span class="literal">three</span></span><br><span class="line"><span class="literal">six</span> is <span class="keyword">the</span> littlest <span class="literal">one</span></span><br></pre></td></tr></table></figure></p><p>If each line of that input file is taken to be a “document”, then the first few lines of a simple document-level inverted index for it would be<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">and <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line">but <span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">five <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line">follows <span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">four <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">has <span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>where the first integer following each word is the f(t) value for that term t, with exactly that many (d, f(d,t)) pairs after it all on the same input line. For example, term t = “and” appears in f(t) = 2 documents, document d = 3 (with f(d,t) = 1, that is, one occurrence), and in document d = 5 (with f(d,t) = 2 occurrences). The full index file for the original six lines is available on the LMS, together with larger examples. Make sure that you understand the structure, and what the values represent.</p><h3 id="Stage-1-–-Reading-the-Index"><a href="#Stage-1-–-Reading-the-Index" class="headerlink" title="Stage 1 – Reading the Index"></a>Stage 1 – Reading the Index</h3><p>Write a program that reads an index file with this format, specified as the first (and only) argument on the command-line, and builds (using realloc() and malloc()) a data structure to store that index information. The only assumption you may make, purely for the purposes of reading the input strings, is that each term in the index will be at most 999 characters long. Apart from a single buffer of that size, all stored strings and lists of (d, f(d,t)) pairs should be held in dynamic arrays of the correct length for the data they contain (or within a factor of two of that minimum length). As evidence of the operation of this stage of your program, it should report the number of terms in the index that was read, the total number of (d, f(d,t)) pairs in the index, and up to ten of the pairs associated with the first two and the last two terms in the index, using exactly the output format that is shown here and in the LMS examples. Note that the terms are labeled from 1:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mac: ./ass2-soln test0-<span class="literal">ind</span>.txt</span><br><span class="line">Stage <span class="number">1</span> Output</span><br><span class="line">index has <span class="number">23</span> terms <span class="keyword">and</span> <span class="number">43</span> (d,fdt) pairs</span><br><span class="line">term <span class="number">1</span> <span class="built_in">is</span> <span class="string">"and"</span>:</span><br><span class="line">    <span class="number">3</span>,<span class="number">1</span>; <span class="number">5</span>,<span class="number">2</span></span><br><span class="line">term <span class="number">2</span> <span class="built_in">is</span> <span class="string">"but"</span>:</span><br><span class="line">    <span class="number">3</span>,<span class="number">1</span></span><br><span class="line">term <span class="number">22</span> <span class="built_in">is</span> <span class="string">"word"</span>:</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>; <span class="number">5</span>,<span class="number">3</span></span><br><span class="line">term <span class="number">23</span> <span class="built_in">is</span> <span class="string">"words"</span>:</span><br><span class="line">    <span class="number">2</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>You may assume throughout that all input files you will be provided with will be “correct”, according to the description given above – there won’t be any tricksy-wicksy deviations. That is, all strings will be lower-case alpha only; all elements will be separated by a single space; all lines will have the correct number of values; all lines (including the last one) will be ended by a single (DOS-style) CR-LF combination (see the discussion of this in the Assignment 1 FAQ page); etc. Note that the terms are provided in the index file in strict dictionary order, and that the d values in the set of pairs associated with each term are also are strictly increasing; you will need to make these two facts in Stage 2 and Stage 3. Your Stage 1 program must open and read from a named file (and not from stdin yet, see Stage 2 for that input) so you will need to be familiar with Chapter 11 of the textbook. Output should be written to stdout (but you may also write error messages to stderr if you wish).</p><h3 id="Stage-2-–-Queries-and-Term-Lookup"><a href="#Stage-2-–-Queries-and-Term-Lookup" class="headerlink" title="Stage 2 – Queries and Term Lookup"></a>Stage 2 – Queries and Term Lookup</h3><p>Extend your program so that it reads “queries” from stdin and looks up their corresponding term numbers in the index. Terms that do not appear in the index should be noted accordingly. For example (not showing the Stage 1 output again):<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mac: ./ass2-soln test0-<span class="literal">ind</span>.txt</span><br><span class="line">four <span class="keyword">and</span> five</span><br><span class="line">Stage <span class="number">2</span> Output</span><br><span class="line">    <span class="string">"four"</span> <span class="built_in">is</span> term <span class="number">5</span></span><br><span class="line">    <span class="string">"and"</span> <span class="built_in">is</span> term <span class="number">1</span></span><br><span class="line">    <span class="string">"five"</span> <span class="built_in">is</span> term <span class="number">3</span></span><br><span class="line">line seven</span><br><span class="line">Stage <span class="number">2</span> Output</span><br><span class="line">    <span class="string">"line"</span> <span class="built_in">is</span> term <span class="number">9</span></span><br><span class="line">    <span class="string">"seven"</span> <span class="built_in">is</span> <span class="keyword">not</span> indexed</span><br></pre></td></tr></table></figure></p><p>The eventual expectation in this stage is that you will use binary search to do this lookup; but it might be prudent to make use of linear search in the first instance, while you are debugging this stage and working on Stage 3, and then switch to binary search when you are sure of yourself, and ready to extend again. You may assume that each input line will contain at most 999 characters, and at most 20 different query terms. Lines should be processed interactively, so that the output for each line is generated before the next line is typed, with query terms limited to alphabetic characters, and case-folded to lowercase before the lookup is undertaken, to match the index. You do not need to retain each query line once it has been processed by Stage 2 and then Stage 3.</p><h3 id="Stage-3-–-Ranked-Querying"><a href="#Stage-3-–-Ranked-Querying" class="headerlink" title="Stage 3 – Ranked Querying"></a>Stage 3 – Ranked Querying</h3><p>Ok, now for the fun part. Suppose that the collection has N documents, and suppose that (as before) term t appears in f(t) of them, and appears in document d a total of f(d,t) times. To determine the documents d(here, lines) that are the “strongest” matches for each query q, the following calculation is carried out on a per-document basis.</p><p>The average document length over the N documents (computed as the arithmetic mean), and k = 1.2 and b = 0.75 are constants. Broadly speaking, there are three key relationships being balanced in this equation: rare words with low f(t) values are regarded as being more important than common words; words that appear multiple times in any given document have more weight than words that only appear a few times; and long documents are discounted relative to shorter ones. This computation is known as the “BM25” similarity mechanism. A wide range of other such scoring mechanisms have been proposed and used in web search systems. The ones actually used by Google and similar are, of course, closely-guarded commercial secrets, but still embed these same three principles. For web documents, commercial search providers also make use of features such as page title text; information from relative font-sizes being used; the anchor text that points to each page; language cues; the link relationships between pages; query click-through rates from other users; and so on.</p><p>Add further functionality to your program so that as each query is read from stdin, it is processed against the index, and the top-3 matching documents (by score, with ties on score resolved according to increasing document number) identified and reported. For example (with the interleaved Stage 2 outputs suppressed, see the LMS for full examples of the output required):<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mac</span>: ./ass2-soln test0-ind.txt</span><br><span class="line">four and five</span><br><span class="line">Stage 3 Output</span><br><span class="line">    document   5: <span class="keyword">score</span> 3.619</span><br><span class="line">    document   3: <span class="keyword">score</span> 3.115</span><br><span class="line">    document   4: <span class="keyword">score</span> 2.978</span><br><span class="line"><span class="keyword">line</span> seven</span><br><span class="line">Stage 3 Output</span><br><span class="line">    document   4: <span class="keyword">score</span> 0.474</span><br><span class="line">    document   1: <span class="keyword">score</span> 0.425</span><br><span class="line">    document   2: <span class="keyword">score</span> 0.425</span><br></pre></td></tr></table></figure></p><p>For this process to be efficient, you need to combine a number of different sources of information, bringing components in as they are required. The document lengths |d| should be stored as part of your index data structure, and can be computed once the full index has been read. A value for N can similarly be determined from the input data and stored as a component of the index structure you build. But that still leaves the task of processing the term lists to generate document scores, and determining the top few (where “few” is three in this project, but is 10 for Google and Bing, for example) in an appropriate manner. Be sure to start simple, and check your computations at every step as you build towards the required output.</p><p>As an overall outline of the process to be implemented, to compute the required score(d, q) values you should: (a) create and set to zero an array of N document score accumulators; (b) iterate over the index entries for the (indexed) terms that appear in the query, and for each such term, iterate over its (d, f(d,t)) pairs, computing contributions to document scores one term at a time and adding them to the corresponding accumulator; and then (c) partially sort the array of accumulators (including their corresponding document numbers) to bring the biggest ones to the front. Note you don’t have to fully sort the score array in order to generate the required output (that is, there is an algorithmic efficiency question here for you to consider).</p><p>My program to implement all three stages is a little under 500 lines long, including detailed comments and debugging output, about 100 lines longer than the solution for Assignment 1. Start early! If you want more of a challenge, try writing (but please don’t submit) the indexing program that generated the index files. And, of course, a real system would generate a query-biased caption, or snippet, for each answer document (rather than just the document number), you might like to think about how that process gets done.</p>]]></content>
    
    <summary type="html">
    
      考察动态内存分配以及单链表的用法，前面两个Stage挺简单，最后一个Stage的Ranking算法计算非常复杂。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CITS2002-cfind</title>
    <link href="https://tk1307993.coding.me/CITS2002-cfind.html"/>
    <id>https://tk1307993.coding.me/CITS2002-cfind.html</id>
    <published>2019-10-13T03:59:58.000Z</published>
    <updated>2019-10-13T04:09:23.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Unix-based systems have long supported a utility program named find which, unsurprisingly, is used to find files and directories in a file-system. While the features provided by find are extensive, find is often criticised for its arcane syntax (see man find).</p><p>There is a need for an easier-to-use utility, with an easy-to-remember syntax, even if it supports far fewer of the infrequently used features.</p><h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>The goal of this project is to implement a system utility, named cfind, to find file-system entries matching specific criteria. Successful completion of the project will develop your understanding of some advanced features of the C99 programming language, and your understanding of the role of a number of system-calls responsible for file and directory access and file-system attributes.</p><h3 id="Program-operation"><a href="#Program-operation" class="headerlink" title="Program operation"></a>Program operation</h3><p>cfind is invoked using the command:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">prompt&gt;</span><span class="bash"> cfind  [options]  pathname  [<span class="built_in">stat</span>-expression]</span></span><br></pre></td></tr></table></figure></p><p>which specifies optional command-line arguments, a single mandatory file-system pathname (either relative or absolute), and an optional single conditional expression. If invoked correctly, cfind will print the names of all files and directories at or below the provided pathname, for which the provided expression evalutes to true. The ‘starting’ pathname may be either a file or a directory.</p><p>A stat expression is a character string providing a Boolean predicate, written in a C-like syntax, that is evaluated against an individual file-system entry. The supported syntax provides arithmetic, equality and relational expressions, dates and times, and access to fields of the file-entry’s struct stat structure.</p><p>The default conditional expression is just ‘1’, which evaluates to true. Examples of stat expressions are given in the project’s clarifications.</p><p>Note that the stat expression will usually contain characters with a special meaning to the shell (such as whitespace characters, double-quotes, less-than/greater-than signs, and square-brackets) so it’s recommended that the full stat expression be provided within single-quote characters.</p><p>A library provides the stat expression-based functions. The anticipated use of the functions is to:</p><ol><li>First call the compile_stat_expression() function with the Boolean predicate to later be evaluated. If a valid expression, the function builds internal state to represent the expression, and returns an instance of the STAT_EXPRESSION datatype.</li><li>This STAT_EXPRESSION instance, a directory-entry’s filename (not its full pathname), and an instance of a struct stat structure are passed to the evaluate_stat_expression() function to determine if the attributes of the indicated file-entry match the expression.</li><li>Finally, when done, the STAT_EXPRESSION value is passed to free_stat_expression() to release allocated memory.<br>Command-line options, which appear before the mandatory pathname, indicate how the file-system should be traversed and how the output should be formatted.</li></ol><p>The project’s sample solution defines the project’s definitive operation.</p><p>The cfind utility is to support the following command-line options:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-a</span><br><span class="line">Normally, file-entries beginning with the ‘.’ character are ignored. Specifying -a requests that all entries be considered.</span><br><span class="line"></span><br><span class="line">-c</span><br><span class="line">Print only the count of the number of matching file-entries, then exit. <span class="keyword">Do</span> <span class="keyword">not</span> print <span class="keyword">or</span> <span class="keyword">do</span> anything else.</span><br><span class="line"></span><br><span class="line">-d <span class="keyword">depth</span></span><br><span class="line">Normally the indicated filepath <span class="keyword">is</span> recursively searched (completely). Specifying the -d <span class="keyword">option</span> limits the <span class="keyword">search</span> <span class="keyword">to</span> the indicated <span class="keyword">depth</span>, descending <span class="keyword">at</span> most <span class="keyword">depth</span> <span class="keyword">levels</span> (a non-negative <span class="built_in">integer</span>) <span class="keyword">of</span> directories. -d <span class="number">0</span> means <span class="keyword">only</span> <span class="keyword">apply</span> the tests <span class="keyword">and</span> actions <span class="keyword">to</span> the command-line pathname, <span class="keyword">and</span> <span class="keyword">is</span> obviously implied <span class="keyword">if</span> the command-line pathname <span class="keyword">is</span> a file.</span><br><span class="line"></span><br><span class="line">-l</span><br><span class="line">Print a <span class="keyword">long</span> listing <span class="keyword">of</span> matching <span class="keyword">file</span>-entries, printing <span class="keyword">in</span> <span class="keyword">order</span> (<span class="keyword">left</span> <span class="keyword">to</span> <span class="keyword">right</span>): inode, <span class="keyword">each</span> entry’s permissions, <span class="built_in">number</span> <span class="keyword">of</span> links, owner’s <span class="keyword">name</span>, <span class="keyword">group</span>-owner’s <span class="keyword">name</span>, <span class="keyword">size</span>, modificate-<span class="built_in">date</span>, <span class="keyword">and</span> entry-<span class="keyword">name</span> (similar <span class="keyword">to</span> the <span class="keyword">output</span> <span class="keyword">of</span> /<span class="keyword">bin</span>/ls -l -i ).</span><br><span class="line">The listing <span class="keyword">is</span> sorted <span class="keyword">by</span> <span class="keyword">name</span> (the <span class="keyword">default</span>).</span><br><span class="line"></span><br><span class="line">-r</span><br><span class="line"><span class="keyword">Reverse</span> the <span class="keyword">order</span> <span class="keyword">of</span> <span class="keyword">any</span> sorting options.</span><br><span class="line"></span><br><span class="line">-s</span><br><span class="line">Print matching <span class="keyword">file</span>-entries, sorted <span class="keyword">by</span> size. <span class="keyword">If</span> <span class="keyword">both</span> -s <span class="keyword">and</span> -t <span class="keyword">are</span> provided, -t takes precedence.</span><br><span class="line"></span><br><span class="line">-t</span><br><span class="line">Print matching <span class="keyword">file</span>-entries, sorted <span class="keyword">by</span> <span class="keyword">modification</span> time. <span class="keyword">If</span> <span class="keyword">both</span> -s <span class="keyword">and</span> -t <span class="keyword">are</span> provided, -t takes precedence.</span><br><span class="line"></span><br><span class="line">-u</span><br><span class="line">Attempt <span class="keyword">to</span> unlink (remove) <span class="keyword">as</span> many matching <span class="keyword">file</span>-entries <span class="keyword">as</span> possible. The cfind utility should <span class="keyword">exit</span> <span class="keyword">with</span> <span class="keyword">failure</span> <span class="keyword">if</span> <span class="keyword">any</span> attempt <span class="keyword">to</span> unlink a <span class="keyword">file</span>-entry was unsuccessful.</span><br></pre></td></tr></table></figure></p><h3 id="Program-requirements"><a href="#Program-requirements" class="headerlink" title="Program requirements"></a>Program requirements</h3><ol><li>Your project, and its executable program, must be named cfind.</li><li>Your project must be developed using multiple C99 source files and must employ a Makefile, employing variable definitions and automatic variables, to compile and link your project’s files and the provided library. While you can read the source-code of the library (to learn how it works), you should not use its source in your project - just link against its compiled library.</li><li>If any error is detected during its execution, your project must use fprintf(stderr, ….) or perror() (as appropriate) to print an error message.</li><li>It is anticipated that a successful project will need to use (at least) the standard C99 and POSIX functions: getopt(), opendir(), readdir(), closedir(), stat(), rmdir(), unlink(), perror(), and exit().</li><li>Your project must employ sound programming practices, including the use of meaningful comments, well chosen identifier names, appropriate choice of basic data-structures and data-types, and appropriate choice of control-flow constructs.</li></ol><h3 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h3><p>The project may be completed individually or in teams of two. You are strongly encouraged to work with someone else - this will enable you to discuss your initial design, and to assist each other to develop and debug your joint solution.</p><p>During the marking, attention will obviously be given to the correctness of your solution. However, a correct and efficient solution should not be considered as the perfect, nor necessarily desirable, form of solution. Preference will be given to well presented, well documented solutions that use the appropriate features of the language to complete tasks in an easy to understand and easy to follow manner. That is, do not expect to receive full marks for your project simply because it works correctly. Remember, a computer program should not only convey a message to the computer, but also to other human programmers.</p><p>Half of the possible marks will come from the correctness of your solution. The remaining marks will come from your programming style, including your use of meaningful comments, well chosen identifier names, appropriate choice of basic data-structures, data-types, control-flow constructs, and</p><p>Your project will be marked on CSSE computers running OS-X. No allowance will be made for a program that “works at home” but not on CSSE computers, so be sure that your code compiles and executes correctly on these machines before you submit it.</p>]]></content>
    
    <summary type="html">
    
      实现类似UNIX系统的find命令，编写一个名为cfind的查找工具。工具要求支持的参数较多，输出必须和output完全一样，因此测试比较麻烦。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CPSE3710-Cube</title>
    <link href="https://tk1307993.coding.me/CPSE3710-Cube.html"/>
    <id>https://tk1307993.coding.me/CPSE3710-Cube.html</id>
    <published>2019-10-11T14:07:52.000Z</published>
    <updated>2019-10-11T14:09:14.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Written-questions"><a href="#Written-questions" class="headerlink" title="Written questions"></a>Written questions</h3><p>(1) Consider the intersection between two line segments L1 and L2 in 2D, where L1 is defined by two points P1 and P2 while L2 is defined by two points Q1 and Q2.</p><p>Both line segments are represented using parametric form. Suppose that u1 is the parameter for L1 and u2 is the parameter for L2 . In the class, we have discussed some situations for the intersection between the two line segments. List all the possible situations for the intersection and, for each situation, show the range of u1 and u2, respectively.</p><p>(2) Consider the graphics pipeline we have discussed in class. We understand that there are three operations in the pipeline: namely transformation, clipping, and projection, in that order. Assume that each such operation takes T time units. For a graphics application, suppose that it contains four separate vertices. Answer the following questions.</p><p>(a) If we apply sequentially the three operations (in that order) to each vertex and process all the four vertices one after another, calculate how many time units we need to process them. Show your work.</p><p>(b) Suppose that a graphic card implements the pipeline and needs T time units to conduct each operation. If we apply the pipeline in the card to process all the four vertices, calculate how many time units the card needs to process them. Show your work.</p><p>(3) Consider viewing using a rectangle, i.e., only the parts of objects inside the rectangle are visible and consider clipping a line segment using the rectangle. It turns out that we only need to consider the line segment’s endpoints in order to determine whether it is completely visible, is partially clipped, or is completely clipped. Show this is true and draw all possible situations.</p><p>(4) In program hello.c posted on the course website, find the following lines of code and answer the questions.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">glutInitWindowSize (<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">glOrtho(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">glVertex3f (<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.0</span>); <span class="comment">// V1</span></span><br><span class="line">glVertex3f (<span class="number">0.75</span>, <span class="number">0.25</span>, <span class="number">0.0</span>); <span class="comment">// V2</span></span><br></pre></td></tr></table></figure></p><p>(a) What does function glOrtho do?(b) Calculate the distance between the two points V1 and V2, in the unit of pixels, on the monitor.</p><p>(b) Calculate the distance between the two points V1 and V2, in the unit of pixels, on the monitor.</p><h3 id="Programming-questions"><a href="#Programming-questions" class="headerlink" title="Programming questions"></a>Programming questions</h3><p>Read carefully the program control.c on the course website and try it yourself.</p><p>Also try the corresponding make file.</p><p>First delete all the callback functions for keys and special keys. Your tasks are as follows.<br>(a) Create a cube using glBegin(GL_QUADS) … glEnd() by modifying control.c. (Note that in the original control.c, the program only creates four QUADs and there even exist some gaps among them.) Choose any color you like for each face (QUAD) of your cube.</p><p>(b) Create a callback function myCBKey and install it. This function handles keys a and z, such that pressing a pushes the cube forward (away from you) while pressing z retreats the cube backward (back toward you). Your eye position is fixed.<br>Your program should be called lastname.c, where lastname is your last name. Also create a make file called lastnameMake, such that the marker can compile your program and check it.</p><p>Send lastname.c and lastnameMake to your marker through your e-mail account. The subject of your e-mail should be read: Assignment 1, lastname. The marker’s e-mail address will be announced shortly.</p>]]></content>
    
    <summary type="html">
    
      OpenGL的基础作业，包括四个问答题以及小程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="OpenGL" scheme="https://tk1307993.coding.me/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>CS812-Safari-Rush-Hour</title>
    <link href="https://tk1307993.coding.me/CS812-Safari-Rush-Hour.html"/>
    <id>https://tk1307993.coding.me/CS812-Safari-Rush-Hour.html</id>
    <published>2019-10-06T08:49:29.000Z</published>
    <updated>2019-10-06T08:51:39.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Safari Rush Hour is a variation on the popular Rush Hour game from Binary Arts. The object is to move your car through a tangle of obstacles to reach the exit. Your job is to write a program to find the best way out of the traffic.</p><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><p>Safari Rush Hour is played on a 7 x 7 game grid with up to 19 playing pieces (safari rover and animals). The object is to slide the safari rover through the exit gate in the playing grid frame. Each puzzle gives a configuration of animals and the safari rover. To play, you shift the animals and safari rover up, down, left, and right until the path is clear to make your escape. Note: lions, lionesses, impalas, zebras, rhinos, and elephants move only forward and reverse. The large square safari rover and the wild dogs (termite mound) may move up, down, right, and left. No lifting of playing pieces off of the gameboard grid surface once play has begun.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The predecessor game of Safari Rush Hour is Rush Hour. It is played on a smaller board, with a different number and different shaped pieces. Try playing the applet here. You can practice on this applet to get an idea of how to solve Safari Rush Hour puzzles.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>A sample problem input looks as follows:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">P J1</span><br><span class="line">.......</span><br><span class="line"><span class="selector-class">.rrrf</span>..</span><br><span class="line">hh.<span class="selector-class">.fq</span>.!</span><br><span class="line">o<span class="selector-class">.xx</span><span class="selector-class">.q</span>.!</span><br><span class="line">o<span class="selector-class">.xx</span><span class="selector-class">.q</span>.</span><br><span class="line">ob.<span class="selector-class">.ee</span>.</span><br><span class="line"><span class="selector-class">.bppp</span>..</span><br></pre></td></tr></table></figure></p><p>The first line indicates a problem (“P”) and the name of the problem (“J1”). The problems are all numbered, and the first letter indicates the difficulty of the problem: “J” is junior, “B” is beginner, “I” is intermediate, “A” is advanced, and “E” is expert. In the puzzle specification, the letters stand for the playing pieces: 2x2 pieces: termite mounds (u,v) and safari rover (x); 3x1 pieces: elephant (o, q, s) and rhino (p, r); 2x1 pieces: lion (a, f), lioness (d, g, j), impala (b, h, i, k) and zebra (c, e). The actual names do not matter; all that is important is the shape of each of the pieces and the way that they move. The “!” indicates the exit (the exit position is fixed and does not change from puzzle to puzzle).</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Using A<em> or IDA</em>, your assignment is to solve a given puzzle in the minimum number of moves with the smallest search tree possible. The latter implies enhancing A<em>/IDA</em> to eliminate as much of the search tree as possible using some of the standard techniques in the literature (or possibly some of your own application-dependent enhancements). Files a2-orig.data, a2-deep.data, a2-vast.data, a2-fiendish.data contain test sets of problems for evaluating your solutions.</p><p>Report solution using the following format:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solution <span class="string">[id]</span> <span class="string">[t]</span> <span class="string">[n]</span> <span class="string">[move_1]</span> ... <span class="string">[move_n]</span></span><br></pre></td></tr></table></figure></p><p>where [id] is the problem id, [t] is the wallclock time in seconds your program required to find the solution (or “timeout” if your program timed out - see -t options below) [n] is the number of moves and [move_i] is a move encoded by specifying the name of the piece, its move direction (“l”eft, “r”ight, “u”p, or “d”own) followed by the number of squares that the piece moves. For example, a solution line for the puzzle above is:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solution J1 <span class="number">0.15</span> <span class="number">5</span> el1 qd2 fu1 xu1 xr5</span><br></pre></td></tr></table></figure></p><p>The length of a solution is the number of move strings. Note that the rover must be moved off the board completely. Test your program on the junior/beginner problems. Then work your way up to the more difficult ones.</p><p>Your program should output the following. For each input problem, I want to see statistics on the number of nodes searched, execution time, average h-value for all nodes where an evaluation occurred in the tree, and min/average/max depth of nodes where a cutoff occurred. When the program successfully terminates, print out the solution.</p><h3 id="Specifications"><a href="#Specifications" class="headerlink" title="Specifications"></a>Specifications</h3><p>Your program should take input from stdin and output to stdout. The input is in the format given above possibly containing multiple positions which need to be solved by your program in turn.</p><p>You program must be single-threaded and use no more than 200 MB of RAM. You must implement command-line option -t n, where n is an integer. This option sets the program to stop searching a position after n seconds of real time. If a timeout occurs your program must report “timeout” as time and proceed with the next problem.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>A tar file that contains your source code, a makefile, and a report in pdf format. Your executable must be named safari. Late assignments will not be accepted!</p><p>In the report, give me a description of your program. Skip the basics (such as A<em>/IDA</em>). I want to know any search enhancements that you tried. Describe your heuristic function. Tell me what you did that was interesting. What problems did you encounter? How can your solution be improved? This document must be no longer than five pages. Include a table of experimental results that shows the (positive?) impact of your enhancements.</p>]]></content>
    
    <summary type="html">
    
      代写程序解决类似华容道的问题，用A*算法实现，很有意思的一个作业。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CS110-Higher-Order-Functions</title>
    <link href="https://tk1307993.coding.me/CS110-Higher-Order-Functions.html"/>
    <id>https://tk1307993.coding.me/CS110-Higher-Order-Functions.html</id>
    <published>2019-10-04T00:57:10.000Z</published>
    <updated>2019-10-04T00:59:45.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In the problems from the last homework, we did a bit of rudimentary Scrabble scoring. Your ultimate task here is to write a function that takes as input a rack - a list of letters - and returns the highest scoring word that can be made with those letters. This is the key ingredient in a computerized Scrabble game!</p><p>In this problem, you may use recursion as well as the built-in higher-order functions map, filter, and reduce. In fact, if you write a function that needs to process a long list (e.g. a dictionary) with more than a few hundred items in it, you are much better off letting map, filter, or reduce cruise through those lists since they have been optimized to work very fast.</p><p>There will be a few places here where using anonymous functions (lambda) is probably the cleanest and nicest way to do business. Use it when it’s the cleanest way to proceed.</p><p>One of the objectives of this problem is to have you think about designing a more complicated program that involves several functions. You have complete autonomy in deciding what functions to write in order to reach the ultimate goal (see more on the two required functions below). Try to think carefully about which functions you will need and try to implement those functions so that they are as simple and clean as possible. Part of your score on this problem will be based on the elegance of your overall design and individual functions.</p><p>Our solution has fewer than 9 functions, two of which we modified from our solution to Homework 1. The remaining 7 (or so) functions range from one to four lines of code per function. While you are not required to have the same number of functions and you may have a few slightly longer functions, this is intended to indicate that there is not much code that needs to be written here!</p><p>Be sure to have a comment at the top of the file with your name(s), the filename, and the date. Any function that is even a bit complicated should at least have a short comment explaining to the reader how this function works. Also, include a docstring for every function that you write.</p><p>All of your work should go into a single file named scrabble.py. Any tests and their results should go into this file, commented out of course. Make sure your file loads without producing any output. We will test your program by loading this file and testing your functions. Be sure they are properly named.</p><ol><li>Firstly, rewrite your definition of letterScore(letter, scoreList&gt; so it makes use of the built-in function filter.</li><li>Secondly, rewrite your definition of wordScore(word, scoreList) so that it makes use of the built-in map and reduce.</li><li>As an exercise in writing list comprehensions, define the following variables, using expressions made up of list comprehensions:<br>words – all of the words in the list Dictionary.<br>twoLetterWords – all of the words in the list Dictionary having exactly two letters.<br>lengths – a list of only the lengths of all words in Dictionary.</li><li>Now the main problem.<br>A bit later in this problem, we’ll give you a fairly large dictionary of English words to use. For now, we recommend that you use the following tiny dictionary during the course of testing and development. Include this line near the top of your file. Now, it’s a global variable that can be used by any of your functions in that file. Similarly, you should include the scrabble letter score list from Homework 1.</li></ol><p>Don’t try to change the values of these global variables! As we’ll see soon, that can make Python angry. However, there’s no need to change the contents of the Dictionary or the scrabble letter scores during execution of the program.</p><h3 id="The-details"><a href="#The-details" class="headerlink" title="The details"></a>The details</h3><p>Ultimately, there are two functions that we will be testing.</p><p>scoreList(Rack) takes as input a Rack which is a list of lower-case letters and returns a list of all of the words in the global Dictionary that can be made from those letters and the score for each one. Specifically, this function returns a list of lists, each of which contains a string that can be made from the Rack and its Scrabble score. Here are some examples using the tiny Dictionary above:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scoreList([<span class="string">"a"</span>, <span class="string">"s"</span>, <span class="string">"m"</span>, <span class="string">"t"</span>, <span class="string">"p"</span>])</span><br><span class="line">[[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'am'</span>, <span class="number">4</span>], [<span class="string">'at'</span>, <span class="number">2</span>], [<span class="string">'spam'</span>, <span class="number">8</span>]]</span><br><span class="line">&gt;&gt;&gt; scoreList([<span class="string">"a"</span>, <span class="string">"s"</span>, <span class="string">"m"</span>, <span class="string">"o"</span>, <span class="string">"f"</span>, <span class="string">"o"</span>])</span><br><span class="line">[[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'am'</span>, <span class="number">4</span>], [<span class="string">'foo'</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure></p><p>The order in which the words are presented is not important.</p><p>bestWord(Rack) takes as input a Rack as above and returns a list with two elements: the highest possible scoring word from that Rack followed by its score. If there are ties, they can be broken arbitrarily. Here is an example, again using the tiny Dictionary above:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; bestWord([<span class="string">"a"</span>, <span class="string">"s"</span>, <span class="string">"m"</span>, <span class="string">"t"</span>, <span class="string">"p"</span>])</span><br><span class="line">[<span class="string">'spam'</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></p><p>Aside from these two functions, all of the other helper functions are up to you! Some of those helper functions may be functions that you wrote in Homework 1 or slight variants of those functions. However, you might find it useful to use a strategy in which you write a function that determines whether or not a given string can be made from the given Rack list. Then, another function can use that function to determine the list of all strings in the dictionary that can be made from the given Rack. Finally, another function might score those words.</p><p>Remember to use map, reduce, or filter where appropriate - they are powerful and they are optimized to be very fast.</p><p>Test each function carefully with small test inputs before you proceed to write the next function. This will save you a lot of time and aggravation!</p><p>A reminder about in: Imagine that you are writing a function that attempts to determine if a given string S can be made from the letters in the Rack list. You might be tempted to scramble (“permute” to use a technical term) the Rack in every possible way as part of this process, but that is more work than necessary. Instead, you can test if the first symbol in your string, S[0], appears in the rack with the statement:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> S[<span class="number">0</span>] <span class="keyword">in</span> Rack:</span><br><span class="line">  # <span class="keyword">if</span> <span class="literal">True</span> you will <span class="keyword">end</span> up here</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  # <span class="keyword">if</span> <span class="literal">False</span> you will <span class="keyword">end</span> up here</span><br></pre></td></tr></table></figure><p>That in feature is very handy. Now, recursion will let you do the rest of the work without much effort on your part!<br>Although we don’t expect that you will end up doing huge recursive calls, you should know that Python can get snippy when there are a lot of recursive calls. By default, Python generally complains when there are 1000 or more recursive calls of the same function. To convince Python to be friendlier, you can use the following at the top of your file.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure><p>sys.setrecursionlimit(10000)  # Allows up to 10000 recursive calls; the maximum permitted ranges from system to system</p><h3 id="Trying-it-with-a-bigger-dictionary"><a href="#Trying-it-with-a-bigger-dictionary" class="headerlink" title="Trying it with a bigger dictionary"></a>Trying it with a bigger dictionary</h3><p>Finally, if you want to test out a big dictionary (it’s more fun than the little one above), you can download the file. It contains a large list of words (a bit over 4000 words). The list is still called Dictionary. After you have downloaded the file and placed it in the same directory as your Python file, you should do the following at the top of your Python file:</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dict <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>Now, you can refer to Dictionary as a global variable. This is much nicer than cutting-and-pasting that very large list into your Python file. Here are some examples using that Dictionary.</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scoreList([<span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>])</span><br><span class="line">[[<span class="string">'leo'</span>, <span class="number">3</span>], [<span class="string">'low'</span>, <span class="number">6</span>], [<span class="string">'lowly'</span>, <span class="number">11</span>], [<span class="string">'ow'</span>, <span class="number">5</span>], [<span class="string">'owe'</span>, <span class="number">6</span>], [<span class="string">'owl'</span>, <span class="number">6</span>], [<span class="string">'we'</span>, <span class="number">5</span>], [<span class="string">'well'</span>, <span class="number">7</span>], [<span class="string">'woe'</span>, <span class="number">6</span>], [<span class="string">'yell'</span>, <span class="number">7</span>], [<span class="string">'yo'</span>, <span class="number">5</span>]]</span><br></pre></td></tr></table></figure><p>Notice that “yellow” is not in this dictionary. We “cropped” off words of length 6 or more to keep the dictionary from getting too large. Finally, here is an example of bestWord in action:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; bestWord([<span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>])</span><br><span class="line">[<span class="string">'lowly'</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; bestWord([<span class="string">"s"</span>, <span class="string">"p"</span>, <span class="string">"a"</span>, <span class="string">"m"</span>, <span class="string">"y"</span>])</span><br><span class="line">[<span class="string">'may'</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; bestWord([<span class="string">"s"</span>, <span class="string">"p"</span>, <span class="string">"a"</span>, <span class="string">"m"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>])</span><br><span class="line">[<span class="string">'zap'</span>, <span class="number">14</span>]</span><br></pre></td></tr></table></figure><p>And an even bigger dictionary!</p><p>Want to try this with an even bigger dictionary? We’ve got one! The bad news is that it causes IDLE to crash on some computers. However, if you are running Python without IDLE (e.g. from the Unix shell) then this dictionary should work just fine!</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">from</span> <span class="keyword">bigdict </span><span class="meta">import</span> *</span><br></pre></td></tr></table></figure><p>The dictionary is still called Dictionary and it is available as a global variable. Here is an example of it in use:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scoreList([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'v'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'z'</span>, <span class="string">'z'</span>])</span><br><span class="line">[[<span class="string">'ab'</span>, <span class="number">4</span>], [<span class="string">'aby'</span>, <span class="number">8</span>], [<span class="string">'ax'</span>, <span class="number">9</span>], [<span class="string">'ay'</span>, <span class="number">5</span>], [<span class="string">'ba'</span>, <span class="number">4</span>], [<span class="string">'bay'</span>, <span class="number">8</span>], [<span class="string">'by</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      虽然是入门级的Python作业，不过作业竟然要求使用lambda表达式来完成，而且还给了一个超大的数据集来做性能测试。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS5201-Quaternion</title>
    <link href="https://tk1307993.coding.me/CS5201-Quaternion.html"/>
    <id>https://tk1307993.coding.me/CS5201-Quaternion.html</id>
    <published>2019-10-01T00:50:21.000Z</published>
    <updated>2019-10-01T00:52:11.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-Concept"><a href="#The-Concept" class="headerlink" title="The Concept"></a>The Concept</h3><p>One of our goals this semester is to attain as much abstraction as possible in our data representation. To that end, we are first going to consider the concept of a “wrapper” for a basic? numeric type. The aim is to hide many of the implementation details from the user of the type. A programmer doesn’t need (or want) to know exactly what is happening when two integers or floats or complex numbers are added, multiplied, or disemboweled. They simply want the results of such actions. This assignment will have you “wrap” quaternions:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">h</span> = a + bi + cj + dk</span><br></pre></td></tr></table></figure></p><p>Now, you may be wondering what in the world is a quaternion. You can learn much (enough) about them by using one of the links on this webpage. It is not this one</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Your abstraction will be implemented with a class, of course. And, of course, your implementation should be transparent. This means that the functionality you build into your class should reflect the expected behavior of your type and that of the C++ primitives (int, float, etc.). So, in addition to the usual functions of a well defined and physiologically appealing class, you will need to overload operators so that operations such as<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h1 += h2</span><br></pre></td></tr></table></figure></p><p>make sense and indeed work. In addition, you want your quaternions to be able to be based in numeric types of varying kinds. That is, you want the ability to have the a’s, b’s, c’s and d’s be int or float or double or whatever. So, you will template the class.</p><p>Once you have your quaternion class, you will need to demonstrate how well it works. To do this, we want you to concurrently learn a little mathematics and to demonstrate your programming prowess by coding and applying a norm. Ok, so what is a norm? Loosely speaking, a norm is a way of measuring on a set of objects. It is a real-valued function of a set of things. The set of things you will be concerned with here is a set of quaternions. The norm you will implement is the L1 - norm (pr. “el 1 norm”) and is defined to be the sum of the “magnitudes” of the elements in that set. For a quaternion, we will define its magnitude as the square root of the sum of the squares of the component coefficients (a, b, c, d in the above example) of that quaternion. Thus, you must “pass” to your implementation of the norm a set of objects on which to operate. What, then, is the relationship between objects and operations here? This is your problem. You need to think carefully about your design. Use your UML. I passed out in class some sample code and UML to help you get your head around this idea. So you need to think about what class depends on what other class.</p><p>It is possible to implement your norm operation either as a function or as a class. However, we will require that you implement it as a class for this assignment. The concept of representing an operation as a class may be foreign to you. But the method has definite advantages. It boils down to this: define a class with no data (in this case) and one (public) overloaded operator, the function evaluation operator. Using the class object then appears to be the use of a function. I will speak about this in class.</p><p>We want you to use the STL vector class to contain your set of objects (quaternions). Then you will be able to do this and have a vector of quaternion values whose components are ints. Note: be careful to put that extra space between the two &gt; symbols if you are not compiling with c++11.</p><h3 id="Program-Specifications"><a href="#Program-Specifications" class="headerlink" title="Program Specifications"></a>Program Specifications</h3><p>You will include in your submission source code for your templated quaternion class. You will include a default constructor (initializing to 0 + 0i + 0j + 0k) and another constructor taking 4 args to initialize the 4 parts of a quaternion. You will also have a copy constructor and a destructor. You will overload the following operators: (h is the name we’ll use for an arbitrary quaternion)<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ =, +, -, - =, = =, ! = <span class="keyword">to</span> do <span class="keyword">the</span> obvious</span><br><span class="line">unary - so <span class="keyword">that</span> - h <span class="keyword">is</span> <span class="keyword">the</span> negative <span class="keyword">of</span> h</span><br><span class="line">* <span class="keyword">for</span> multiplying a quaternion <span class="keyword">by</span> a quaternion</span><br><span class="line">/ <span class="keyword">for</span> division <span class="keyword">of</span> quaternions h1 / h2 = h1 * (h2)<span class="number">-1</span></span><br><span class="line">= <span class="keyword">for</span> assignment</span><br><span class="line">[ ] <span class="keyword">to</span> <span class="literal">return</span> <span class="keyword">the</span> nth coefficient <span class="keyword">of</span> <span class="keyword">the</span> quaternion, <span class="keyword">with</span> <span class="number">0</span> <span class="keyword">returning</span> <span class="keyword">the</span> <span class="built_in">real</span> part, <span class="number">1</span> <span class="keyword">the</span> i part, <span class="number">2</span> <span class="keyword">the</span> j part, <span class="keyword">and</span> <span class="number">3</span> <span class="keyword">the</span> k part</span><br><span class="line">stream operators</span><br><span class="line">! <span class="keyword">to</span> <span class="literal">return</span> <span class="keyword">its</span> conjugate</span><br><span class="line">~ <span class="keyword">to</span> <span class="literal">return</span> <span class="keyword">the</span> magnitude</span><br></pre></td></tr></table></figure></p><p>You will also include a function called mag that returns the magnitude.</p><p>You will submit your implementation of the L1 - norm and a driver to test your constructs. The driver will read data values from a file. Here is a data set you may use for testing. It is in the format you are to assume:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">-3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">-2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span></span><br><span class="line"><span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">.1</span> <span class="number">.2</span> <span class="number">.1</span> <span class="number">.1</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>(Note: the first value in this file is the number of quaternions that are to follow. Each quaternion is a set of ordered quadruplets. White space will delimit each value in the file. Have your program read data according to this file format. Your program may be tested on other data sets using this format.) Apply the L1 - norm to the entire set of quaternions and output the result. Also, output the first two quaternions and then output. Include exception handling for division by zero, bad subscripting, and anything else clearly foolish. You will also submit during class a UML model of your code (hand-drawn if you like). Also submit during class the gradesheet. Be sure also to provide a makefile.</p><p>Submit your driver with classes templated on floats. Name your executable “driver”.</p>]]></content>
    
    <summary type="html">
    
      虽然是一个Lab作业，但由于测试特别多，导致这两个小程序编写时间长于一般的Lab作业。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC261-AVL-Tree</title>
    <link href="https://tk1307993.coding.me/CSC261-AVL-Tree.html"/>
    <id>https://tk1307993.coding.me/CSC261-AVL-Tree.html</id>
    <published>2019-09-28T08:27:32.000Z</published>
    <updated>2019-09-28T09:09:00.586Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>In this question, you must use the insertion and deletion algorithms as described in the “Balanced Search Trees: AVL trees” handout posted on the course web site.</p><p>a. Insert keys 17, 7, 8, 14, 19, 6, 10, 21, 15, 12, 9, 11 (in this order) into an initially empty AVL tree, and show the resulting AVL tree T , including the balance factor of each node.</p><p>b. Delete key 17 from the above AVL tree T , and show the resulting AVL tree, including the balance factor of each node.<br>In each of the above questions, only the final tree should be shown: intermediate trees will be disregarded, and not given partial credit.</p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><p>In this question, you must use the insertion and deletion algorithms described in the “Balanced Search Trees: AVL trees” handout posted on the course web site.</p><p>a. Prove or disprove: “For any AVL tree T and any key x in T , if we let T1 = Delete(T, x) and T2 = Insert(T1, x), then T2 = T1 .” State clearly whether you are attempting to prove or disprove the statement. If proving, give a clear general argument; if disproving, give a concrete example where you show clearly each tree T, T1, T2 with the balance factors indicated beside each node.</p><p>b. Find an AVL tree T and a key x in T such that calling Delete(T, x) causes two rebalancing operations to take place. Your tree T should be as small as possible, in terms of the number of nodes, so that this takes place (you do not have to prove that it is indeed the smallest). Show your original tree T and the key x, then show the result of each rebalancing operation. Make sure to clearly indicate the balance factor next to each node.</p><h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h3><p>Give a simple, linear-time algorithm that determines if a Binary Search Tree (BST) satisfies the AVL balancing condition. The algorithm’s input is a pointer to the root of a BST T where each node u has the following fields: an integer key, and lchild and rchild which are pointers to the left and right children of u in T (if u has no left or right child, then u.lchild = Nil or u.rchild = Nil, respectively). There is no balance factor or height information already stored in any node. The algorithm’s output is True if T satisfies the AVL balancing condition, and False otherwise.</p><p>The worst-case running time of your algorithm must be O(n) where n is the number of nodes in T.</p><p>Describe your algorithm by giving its pseudo-code, and explain why its worst-case running time is O(n).</p><h3 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h3><p>We want an efficient algorithm for the following problem. The algorithm is given an integer m &gt; 1, and then a (possibly infinite) sequence of distinct keys are input to the algorithm, one at a time. A query operation can occur at any point between any two key inputs in the sequence.</p><p>When a query occurs, the algorithm must return, in sorted order, the m smallest keys among all the keys that were input before the query. Assume that at least m keys are input before the first query occurs.</p><p>For example, suppose m = 3, and the key inputs and query operations occur in the following order:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">24</span>, query, <span class="number">10</span>, <span class="number">17</span>, query, <span class="number">9</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">11</span>, query, <span class="number">14</span>, ...</span><br></pre></td></tr></table></figure></p><p>Then the first query should return 6, 13, 15; the second query should return 6, 10, 13; the third query should return 5, 6, 9.</p><p>Describe a simple algorithm that, for every m &gt; 1, solves the above problem with the following worst-case time complexity:</p><ul><li>O(log m) to process each input key, and</li><li>O(m) to perform each query operation.</li></ul>]]></content>
    
    <summary type="html">
    
      关于AVL Tree的Data Structure作业，五个分析问答题。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CS240-Number-Conversion-and-Bit-Manipulation</title>
    <link href="https://tk1307993.coding.me/CS240-Number-Conversion-and-Bit-Manipulation.html"/>
    <id>https://tk1307993.coding.me/CS240-Number-Conversion-and-Bit-Manipulation.html</id>
    <published>2019-09-24T13:24:14.000Z</published>
    <updated>2019-09-24T13:32:48.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Step-0-Introduction"><a href="#Step-0-Introduction" class="headerlink" title="Step 0. Introduction"></a>Step 0. Introduction</h3><p>In this lab you will write a number converter, implement memdump to display memory content, introduction to pointers, implement string functions with pointers, and bit operations.</p><h3 id="Step-1-Writing-a-number-converter"><a href="#Step-1-Writing-a-number-converter" class="headerlink" title="Step 1. Writing a number converter"></a>Step 1. Writing a number converter</h3><p>Using convert.c write a program to convert a given number from one base to another. The format is:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert <span class="tag">&lt;<span class="name">basefrom</span>&gt;</span> <span class="tag">&lt;<span class="name">baseto</span>&gt;</span> <span class="tag">&lt;<span class="name">number</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>You now know how to access the arguments on the command line. Assume that basefrom and baseto are integers between 2 and 25 (both inclusive). Since base 16 uses the characters A, B, C, D, E, F to represent decimal numbers 10 through 15, bases 17 through 20 will involve additional characters. For example, base 20 will involve the additional characters G, H, I and J. Use defensive programming to make sure your command line arguments are what you would expect. You may assume that no number (in any base) has more than 32 digits, and all numbers are nonnegative.</p><p>To convert a number, say (123)9, from base 9 to another base such as base 8, simply convert from base 9 to decimal (i.e., base 10), to get the number, i.e.,</p><blockquote><p>(1 x 92) + (2 x 91) + (3 x 90) = (102) 10</p></blockquote><p>and then convert to base 8 by doing repeated division, just the way you convert from decimal to binary (base 2) - simple, because you understand decimal (base 10) arithmetic. In this case you should get (146)8. The following link may refresh your memory.</p><h3 id="Step-2-Implement-bit-operations"><a href="#Step-2-Implement-bit-operations" class="headerlink" title="Step 2. Implement bit operations."></a>Step 2. Implement bit operations.</h3><p>You will implement the bit operations described in the file lab4-src/bits.c . To test your implementation run testall.</p><p>Notice that the printbits() should prints the 1s and 0s in one line followed by another line with the indices (mod 10) of the bits.</p><h3 id="Step-3-Our-Tests"><a href="#Step-3-Our-Tests" class="headerlink" title="Step 3. Our Tests"></a>Step 3. Our Tests</h3><p>Also, make sure that your program passes our tests. To run the tests, compile your program and type<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./testall</span></span><br></pre></td></tr></table></figure></p><p>or run each individual test as indicated in the output.</p><p>Make sure that all tests pass and testall gives the maximum points.</p><h3 id="Step-4-Turning-In-your-Project"><a href="#Step-4-Turning-In-your-Project" class="headerlink" title="Step 4. Turning In your Project"></a>Step 4. Turning In your Project</h3><p>Follow these instructions to turn in lab4.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cs240</span><br><span class="line">turnin -c cs240 -v -<span class="selector-tag">p</span> lab4 lab4-src</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      虽然是一个Lab作业，但由于测试特别多，导致这两个小程序编写时间长于一般的Lab作业。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS1510-Data-Structures</title>
    <link href="https://tk1307993.coding.me/CS1510-Data-Structures.html"/>
    <id>https://tk1307993.coding.me/CS1510-Data-Structures.html</id>
    <published>2019-09-21T02:05:38.000Z</published>
    <updated>2019-09-21T02:49:51.825Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Using C++ Class and pointers, implement Single-Linked List of integers. You are not allowed to use STL. Consider the following for your linked list implementation:</p><ul><li>Update the List class implementations in the lecture slides so that the List does not have any duplicate value.</li><li>Also make the necessary updates to the List class to maintain a sorted list (i.e. the Nodes are in increasing order of data values). In particular, replace all the insert methods, and replace them with insert(int x), which inserts x in the right position so that the List remains sorted.</li><li>Implement DeleteMid() to delete the middle element (when the list contains an odd number of elements) or middle two elements (when the list contains an even number of elements).</li><li>Using recursion, implement Ascend() and Descend() to display the entire list in ascending and descending orders, respectively.</li></ul><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span>              // Total no of <span class="keyword">input</span> sets </span><br><span class="line"><span class="symbol">5 </span><span class="number">10</span> <span class="number">4</span> <span class="number">4</span>        // <span class="keyword">Input</span> set <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">9</span> -<span class="number">1</span> <span class="number">7</span>  // <span class="keyword">Input</span> set <span class="number">2</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> -<span class="number">999</span>    // <span class="keyword">Input</span> set <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Output-for-Input-set-1"><a href="#Sample-Output-for-Input-set-1" class="headerlink" title="Sample Output (for Input set 1)"></a>Sample Output (for Input set 1)</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sorted <span class="keyword">List</span>: 4 5 10</span><br><span class="line"></span><br><span class="line">After Deleting Middle Element:</span><br><span class="line"><span class="keyword">List</span>: 4 10</span><br><span class="line"></span><br><span class="line"><span class="keyword">Display</span> <span class="keyword">List</span> <span class="keyword">in</span> Ascending <span class="keyword">Order</span>:</span><br><span class="line">4 10</span><br><span class="line"></span><br><span class="line"><span class="keyword">Display</span> <span class="keyword">List</span> <span class="keyword">in</span> Descending <span class="keyword">Order</span>:</span><br><span class="line">10 4</span><br><span class="line"></span><br><span class="line">and <span class="keyword">so</span> <span class="keyword">on</span> <span class="keyword">for</span> other <span class="keyword">sample</span> <span class="keyword">input</span> sets 2 and 3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      代写数据结构里面的单链表实现，稍微麻烦一点的是，单链表排序需要用递归来实现。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CSCE310-Analytical-Problems</title>
    <link href="https://tk1307993.coding.me/CSCE310-Analytical-Problems.html"/>
    <id>https://tk1307993.coding.me/CSCE310-Analytical-Problems.html</id>
    <published>2019-09-18T13:25:30.000Z</published>
    <updated>2019-09-18T13:27:18.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>This assignment consists of 6 analytical problems and 2 programming problems. Your solutions to the analytical problems must be submitted, as one PDF, via webhandin. While handwritten (then scanned) solutions to the analytical problems are acceptable, you are strongly encouraged to typeset your solutions in L A TEX or a word processor with an equation editor. The legibility of your solutions is of great importance. It is required that your PDF’s filename not include spaces, percent signs, pound symbols, or parentheses.</p><h3 id="Programming-Assignment"><a href="#Programming-Assignment" class="headerlink" title="Programming Assignment"></a>Programming Assignment</h3><p>Your methods will be tested on the cse.unl.edu server, using<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc version <span class="number">4.8</span><span class="number">.1</span> <span class="number">20130909</span> [gcc<span class="number">-4</span>_8-branch revision <span class="number">202388</span>] (SUSE Linux).</span><br></pre></td></tr></table></figure></p><p>To ensure proper execution, you should test your submission in the webgrader<br>You will submit csce310hw002pt01.h, csce310hw002pt02.h, csce310hw002pt01.cpp, csce310hw002pt02.cpp (and maybe csce310hw002pt03.h and csce310hw002pt03.cpp), along with your PDF, via web handin.</p><h3 id="ourQuickSelect"><a href="#ourQuickSelect" class="headerlink" title="ourQuickSelect"></a>ourQuickSelect</h3><p>ourQuickSelect is a function that should take an integer value i and a vector of n integer values. ourQuickSelect should return the number of comparisions needed to find the i th smallest value in the vector using the quickselect algorithm. The first element in the vector should be used as the pivot. You may assume that each number in the vector is unique.</p><h3 id="sumToN"><a href="#sumToN" class="headerlink" title="sumToN"></a>sumToN</h3><p>sumToN is an adaptation of Exercise 6.1.7 on page 206. sumToN will take two arguments: a vector of integer values and another integer value. The function will return true if two unique values in the array sum to the quantitiy of the second input value. It may be assumed that the vector will be in ascending order.</p><h3 id="averageComparisions-10-Points-Extra-Credit-or-Honors-Contract"><a href="#averageComparisions-10-Points-Extra-Credit-or-Honors-Contract" class="headerlink" title="averageComparisions (10 Points Extra Credit or Honors Contract)"></a>averageComparisions (10 Points Extra Credit or Honors Contract)</h3><p>Given an array of n integers, return the average number of comparisons that would be required to successfully find an element in the array using binary search. You may assume that the values in the array will be provided in ascending order. When more than one element can be chosen in the search, choose the element with a smaller value.</p><h3 id="General-Guidelines"><a href="#General-Guidelines" class="headerlink" title="General Guidelines"></a>General Guidelines</h3><p>Sample header, source, and testing files have been provided. You may modify the .h and .cpp files as needed, but you will only be turning in the four/six files mentioned above. The webgrader will be compiling the code with the command g++ -o /path/to/executable.out /path/to/source/files/*.cpp for each part, but I will only be copying the files I asked for out of your submission and into separate directories for Part 1, Part 2, and Part 3.</p><h3 id="Written-Assignment"><a href="#Written-Assignment" class="headerlink" title="Written Assignment"></a>Written Assignment</h3><p>Question 1 (10 points)<br>Question 5.3.2 in The Design and Analysis of Algorithms</p><h3 id="Question-2-10-points"><a href="#Question-2-10-points" class="headerlink" title="Question 2 (10 points)"></a>Question 2 (10 points)</h3><p>(a) Draw a binary tree with 10 nodes labeled 0, 1, … , 9 in such a way that the inorder and preorder traversals of the tree yield the following lists: 3, 1, 7, 9, 5, 8, 2, 0, 6, 4 (Preorder) and 9, 7, 1, 5, 3, 8, 0, 6, 4, 2 (Inorder)</p><p>(b) Give an example of two permutations of the same n labels 0, 1, … , n − 1 that cannot be inorder and postorder traversal lists of the same binary tree.</p><p>(c) Design an algorithm that constructs a binary tree for which two given lists of n labels 0, 1, … , n − 1 are generated by the inorder and postorder traversals of the tree. Your algorithm should also indentify inputs for which the problem has no solution.</p><h3 id="Question-3-10-points"><a href="#Question-3-10-points" class="headerlink" title="Question 3 (10 points)"></a>Question 3 (10 points)</h3><p>Estimate how many searches will be needed to justify time spent on presorting an array of 10^6 elements if sorting is done by mergesort and searching is done by binary search. You may assume that all searches are for elements known to be in the array. What about an array of 10^9 elements?</p><h3 id="Question-4-10-points"><a href="#Question-4-10-points" class="headerlink" title="Question 4 (10 points)"></a>Question 4 (10 points)</h3><p>Question 6.1.1 in The Design and Analysis of Algorithms</p><h3 id="Question-5-10-points"><a href="#Question-5-10-points" class="headerlink" title="Question 5 (10 points)"></a>Question 5 (10 points)</h3><p>Question 6.1.9 in The Design and Analysis of Algorithms</p><h3 id="Question-6-10-points"><a href="#Question-6-10-points" class="headerlink" title="Question 6 (10 points)"></a>Question 6 (10 points)</h3><p>Question 6.5.1 in The Design and Analysis of Algorithms</p>]]></content>
    
    <summary type="html">
    
      代写两个算法程序以及六个算法分析题，代码题简单，但是分析题比较繁琐。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS4750-Minimax-Tic-Tac-Toe</title>
    <link href="https://tk1307993.coding.me/CS4750-Minimax-Tic-Tac-Toe.html"/>
    <id>https://tk1307993.coding.me/CS4750-Minimax-Tic-Tac-Toe.html</id>
    <published>2019-09-15T12:25:06.000Z</published>
    <updated>2019-09-15T12:27:52.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this programming assignment, you are asked to implement programs to play a two-player game similar to tic-tac-toe: two players, X and O, take turns marking the spaces in a 4×4 grid. The player who succeeds in placing 3 of their marks consecutively in a horizontal, vertical, or diagonal row wins the game.<br>You may form a team of up to three people. The team can be different from that for the HW#2. One solution is submitted by each team electronically in Blackboard. You may use any programming language in your implementation.</p><h3 id="Part-I-Beginner"><a href="#Part-I-Beginner" class="headerlink" title="Part I. Beginner"></a>Part I. Beginner</h3><p>Implement a simple player, called Beginner, who places marks sequentially in a blank square in increasing order of row number and then column number, i.e., (1,1), (1,2), (1,3), (1,4), (2,1), (2,2), …, unless it or the opponent wins the game immediately. Its algorithm is as follows:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Beginner-Decision</span> (<span class="title">state</span>) <span class="title">returns</span> <span class="title">an</span> <span class="title">action</span></span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">the</span> player has <span class="keyword">an</span> <span class="built_in">open</span> <span class="number">2</span>-<span class="keyword">in</span>-<span class="keyword">a</span>-row</span><br><span class="line">    <span class="literal">return</span> marking <span class="keyword">the</span> position <span class="built_in">to</span> <span class="built_in">get</span> <span class="keyword">a</span> <span class="number">3</span>-<span class="keyword">in</span>-<span class="keyword">a</span>-row<span class="comment"> // "Win"</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">the</span> opponent has <span class="keyword">an</span> <span class="built_in">open</span> <span class="number">2</span>-<span class="keyword">in</span>-<span class="keyword">a</span>-row</span><br><span class="line">    <span class="literal">return</span> marking <span class="keyword">a</span> position next <span class="built_in">to</span> <span class="keyword">the</span> <span class="number">3</span>-<span class="keyword">in</span>-<span class="keyword">a</span>-row <span class="built_in">to</span> block <span class="keyword">the</span> opponent</span><br><span class="line">  <span class="literal">return</span> marking sequentially <span class="keyword">a</span> blank square <span class="keyword">in</span> increasing order <span class="keyword">of</span> row <span class="built_in">number</span> <span class="keyword">and</span> <span class="keyword">then</span> column <span class="built_in">number</span>.</span><br></pre></td></tr></table></figure></p><p>“open 2-in-a-row” means that there is a blank space at one end of the 2-in-a-row, making it possible to become a 3-in-a-row.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ul><li>a) A brief description of your implementation.</li><li>b) Step-by-step of one game played between you (human) and the player Beginner. Beginner plays first.</li><li>c) Your code with appropriate comments.</li></ul><h3 id="Part-II-Advanced"><a href="#Part-II-Advanced" class="headerlink" title="Part II. Advanced"></a>Part II. Advanced</h3><p>Implement a minimax player, called Advanced, who runs the minimax algorithm on a 2-ply game tree, i.e., looking ahead 2 moves (one move by the player and one move by the opponent). The heuristic evaluation function for cutoff nodes is<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h(n) = [# <span class="keyword">of</span> <span class="keyword">open</span> <span class="number">2</span>-<span class="keyword">in</span>-a-row <span class="keyword">for</span> me] - [# <span class="keyword">of</span> <span class="keyword">open</span> <span class="number">2</span>-<span class="keyword">in</span>-a-row <span class="keyword">for</span> opponent].</span><br></pre></td></tr></table></figure></p><p>For example, for player ‘x’, the value of the following state is<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h = (<span class="number">2</span><span class="number">-1</span>) = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>When h values are the same, the search breaks tie randomly.</p><h3 id="Submission-1"><a href="#Submission-1" class="headerlink" title="Submission"></a>Submission</h3><ul><li>a) A brief description of your algorithm and implementation.</li><li>b) Step-by-step of one game played between Beginner and Advanced. Beginner plays first. For every step played by Advanced, print the # of expanded nodes and the CPU execution time in milliseconds.</li><li>c) Same as (b) except Advanced plays first.</li></ul><h3 id="Part-III-Master"><a href="#Part-III-Master" class="headerlink" title="Part III. Master"></a>Part III. Master</h3><p>Implement a player, called Master, who runs the minimax algorithm on a 4-ply game tree, i.e., looking ahead 4 moves (2 moves by the player and 2 moves by the opponent). The heuristic evaluation function for cutoff nodes is the same as in part II.</p><h3 id="Submission-2"><a href="#Submission-2" class="headerlink" title="Submission"></a>Submission</h3><ul><li>a) Step-by-step of one game played between Advanced and Master. Advanced plays first. For every step played by Advanced and Master, show the # of expanded nodes and the CPU execution time in milliseconds.</li><li>b) Same as (b) except Master plays first.</li><li>c) Your code with appropriate comments.</li></ul><p>Your submission should be a single pdf file with file name containing your name and assignment number. For example, firstnameInitial_lastname_hw4.pdf for HW4.</p>]]></content>
    
    <summary type="html">
    
      在对弈类游戏中，Minimax算的上是经典算法。这次需要代写的作业，需要用Minimax算法编写Tic-Tac-Toe的AI部分。根据Minimax树层数的不同，游戏分为三个不同难度。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
</feed>
