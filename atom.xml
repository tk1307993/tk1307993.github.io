<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-08-13T16:06:19.939Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java代写：Spell Checker</title>
    <link href="https://tk1307993.coding.me/Spell-Checker.html"/>
    <id>https://tk1307993.coding.me/Spell-Checker.html</id>
    <published>2019-08-13T16:04:52.000Z</published>
    <updated>2019-08-13T16:06:19.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Homework-4-Programming"><a href="#Homework-4-Programming" class="headerlink" title="Homework 4 Programming"></a>Homework 4 Programming</h1><p>Please remember that to submit the assignment you will need to the Education drop down menu and select<br>assignment complete.</p><h2 id="Problem-1-Implementing-a-Spell-Checker-35-points"><a href="#Problem-1-Implementing-a-Spell-Checker-35-points" class="headerlink" title="Problem 1 - Implementing a Spell Checker - 35 points"></a>Problem 1 - Implementing a Spell Checker - 35 points</h2><p>Implement a spell-checker by using a hash table. You will create a class called <code>SpellChecker</code> in the file <code>SpellChecker.java</code> that implements the interface <code>SpellCheckerInterface.java</code>.  The object will try to check for spelling errors in an input file, referencing a provided dictionary file. The <code>SpellChecker</code> object must accept the filename of the dictionary in its constructor. There is a sample dictionary file in the Codio workspace called <code>words.txt</code>.</p><p>The constructor of the object must (itself or by calling other methods) parse the dictionary file, storing the words in a <code>HashSet</code> instance. The <code>SpellChecker</code> object will use this dictionary as a reference when checking for spelling errors in a specified input file. Please note that <strong>every word added to the <code>HashSet</code> instance must be in lower case</strong>. In addition to the constructor, you must implement two methods to complete the functionality of your <code>SpellChecker</code> object.</p><ul><li><code>public List&lt;String&gt; getIncorrectWords(String filename)</code> - This method should return a list of all words in the input file that are incorrectly spelled according to the dictionary file provided to the constructor. The String <code>filename</code> contains the name of the file to be spell-checked.</li></ul><p>We define a word as a sequence of characters with whitespace (one or more spaces and/or tabs) on either side. To check for incorrectly spelled words, you must first read the file and process it into words. Note, however, that your program must <strong>convert the file to lowercase and remove all punctuation</strong> in generating its list of words. This means that the line <code>hey!! it&#39;s nice to see you--how are you?</code> should become <code>hey, its, nice, to, see, youhow, are, you</code>. No other input processing is necessary and there are no exceptions to these rules. Punctuation is defined as any character that is not an upper or lower case alphabet, or a number (0-9). Once you split the line into words by splitting by whitespace, remove all punctuation from every word (and don’t forget to lower case each word as well).</p><p>Your output list must contain the incorrect words that remain after processing input data (e.g. <code>youhow</code> in the above example).</p><ul><li><code>public Set&lt;String&gt; getSuggestions(String word)</code> - This method should return a set of all potential suggestions for the incorrectly spelled word that is provided as input.</li></ul><p>In order to generate a suggestion for a given word, implement the following spell checking techniques, where a character is defined as one of <code>a, b, c, ..., z</code>:</p><ul><li>Add one character - add a character at every point in the string (including at the very beginning and end)</li><li>Remove one character - remove one character at a time from each position in the string</li><li>Swap adjacent characters - swap every pair of adjacent characters in the string</li></ul><p>Your method should return all possible suggestions from each one of the techniques above. Note that the use of a <code>Set</code> object maintains only unique suggestions (i.e. no duplicates).</p><p>You may choose to write a tester file, which might print out each incorrectly spelled word in an input file and its suggestions. Any tester you write will, as usual, not be graded. This is an optional step to encourage you to ensure that your code is indeed functional and correct.</p><p>We have provided you a sample test file to spell-check. This file is called <code>test.txt</code>.</p><h2 id="Problem-2-K-Best-Values-30-points"><a href="#Problem-2-K-Best-Values-30-points" class="headerlink" title="Problem 2 - K-Best Values - 30 points"></a>Problem 2 - K-Best Values - 30 points</h2><p>Find the k-best (i.e. largest) values in a set of data. Assume you are given a sequence of values, one value at a time. We do not know how many elements there are in this sequence. In fact, there could be infinitely many. Implement the class<br><code>KBestCounter&lt;T extends Comparable&lt;? super T&gt;&gt; implements KBest&lt;T&gt;</code> that keeps track of the k-largest elements seen so far in a sequence of data. The class should have two methods:</p><ul><li><p><code>public void count(T x)</code> - process the next element in the set of data. This operation must run in at worst <code>O(log k)</code> time.</p></li><li><p><code>public List&lt;T&gt; kbest()</code> - return a sorted (smallest to largest) list of the k-largest elements. This must run in at worst <code>O(k log k)</code> time. The method must not clobber the state of your class. This means that if you run this method twice in a row, it should return the same values.</p></li></ul><p>Your <code>KBestCounter.java</code> class must implement the provided interface <code>KBest.java</code>.</p><p>Use a priority queue to implement this functionality. We suggest using the built-in <code>java.util.PriorityQueue</code>.</p><p>As always, feel free to implement your own tester file to ensure proper functionality.</p>]]></content>
    
    <summary type="html">
    
      Implementing a Spell Checker
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS204-Hashing</title>
    <link href="https://tk1307993.coding.me/CS204-Hashing.html"/>
    <id>https://tk1307993.coding.me/CS204-Hashing.html</id>
    <published>2019-08-10T01:35:23.000Z</published>
    <updated>2019-08-10T02:38:24.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a program that uses hashing for the following problem. Given a natural language text, generate a table of distinct words with the number of occurrences of each word in the text. A word is defined as a series of alphanumeric characters. Note that punctuation and spaces can both (separately or together) delineate a word. There are some hyphenated words in the text; for these words there will be no space before or after the hyphen and the hyphen should be considered part of the word. Capitalized versions of a word are considered the same as the lowercase version, so feel free to change all words to either upper- or lowercase. Plural possessives and contractions should remain and be counted as a unique word (such as can’t or widows’).</p><p>You must use the provided input file, which contains the first chapter of Tolkien’s “The Hobbit” found on herePreview the documentView in a new window.</p><p>Your resulting program will be an interactive one allowing the user to type in a word (that may or may not appear in the table) and receive the number of occurrences of that word in the text until the user wishes to quit.</p><h3 id="The-challenge"><a href="#The-challenge" class="headerlink" title="The challenge"></a>The challenge</h3><p>Find the combination of hash function and collision resolution that will minimize the collisions. A collision is defined as an attempt to store a new word in a location already occupied by another word. Consequently, it is possible for a new word to collide more than once before it is finally stored. To qualify for full credit on the assignment, you must have fewer than 625 collisions and your table size must be appropriate for the number of words (see below) and the collision resolution used. Your instructor was able to reach 514 collisions simply using a version of one of the hash functions discussed in class and linear probe. The student(s) with the least collisions and proper table size will receive 5 bonus points.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>There are 663 unique words in the file (using the above definition of a unique word). There are 1976 words in total.</p><h3 id="Program-description"><a href="#Program-description" class="headerlink" title="Program description"></a>Program description</h3><p>Your program should hash the values from the file and then print (neatly formatted) the number of collisions, number of unique words and total number of words to the standard output (screen) before allowing the user to input a word to see the number of times it appeared. The user should be able to input as many words as desired before choosing to quit.</p><h3 id="Suggestions-amp-Notes"><a href="#Suggestions-amp-Notes" class="headerlink" title="Suggestions &amp; Notes"></a>Suggestions &amp; Notes</h3><p>Reading in one word at a time from the file, create a function that pre-processes a word, changing capital letters to lowercase and removing any quotation marks or other unnecessary punctuation that may have been read from the file. Then send the pre-processed string into your hash function.</p><p>When counting collisions, do not count additional instances of a word. So you will want to keep a “temporary” collision count for a word until you know if the word is already in the table.</p><p>Note that the table size must be “reasonable” and depends upon the number of entries expected and the collision resolution used. Using a larger table than required by these factors (simply to reduce collisions) will mean a deduction. The final load factor must be between 0.5 and 0.7.</p><p>Get your program up and running by using one of the hash functions discussed in class and a simple collision resolution (such as linear probe). Make sure you are pre-processing your words correctly, etc. before attempting to minimize the collisions.</p>]]></content>
    
    <summary type="html">
    
      用Python代写一个Hashing的程序，对自然语言进行统计排序，由于是自然语言，存在大量的标点符号，以及大小写的处理。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS168-Chat</title>
    <link href="https://tk1307993.coding.me/CS168-Chat.html"/>
    <id>https://tk1307993.coding.me/CS168-Chat.html</id>
    <published>2019-08-03T01:35:23.000Z</published>
    <updated>2019-08-03T01:39:24.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Chat"><a href="#Chat" class="headerlink" title="Chat"></a>Chat</h3><p>In this assignment, you’ll build a simple application that connects users over a network: a chat server. Similar to chat programs like Slack and IRC, your finished chat server will allow users to converse in different channels. Users can create and join channels; once a user is in a particular channel, all messages that she sends will be relayed to all other users in that channel.<br>This assignment (and the rest of the assignments in this class) should be implemented in Python 2. This assignment will introduce you to the socket programming API.</p><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>There’s a demo of the finished project available here.</p><p>If you have questions, first take a look at the FAQ section. If your question isn’t answered there, post to Piazza.</p><p>The Python Socket Programming HOWTO is a useful introduction to socket programming.</p><p>We’ve provided two files to help you test your code:</p><p>client_split_messages.py is intended to help you ensure your server is correctly buffering messages, and is described in more detail below.</p><p>simple_test.py tests a basic scenario where two clients communicate in a simple channel. simple_test.py represents only a small fraction of the points that we’ll test for when we grade your assignment, and is intended only to help you verify the basic format of your client’s output.</p><h3 id="What-are-sockets"><a href="#What-are-sockets" class="headerlink" title="What are sockets?"></a>What are sockets?</h3><p>A socket is an endpoint of a connection between two programs running across a network. Each socket is associated with a particular port number. Sockets are an abstraction provided by operating systems: programs create sockets, read from those sockets, and write to those sockets. When a program writes to a socket, the operating system sends data out a particular port; similarly, with the operating system receives data on a port, that data can be read from the socket corresponding to that port.</p><p>In Python, you can create a socket and connect to a remote endpoint by using the socket library as follows:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">socket</span></span><br><span class="line"><span class="comment"># The socket constructor accepts a few arguments; the defaults are fine for this class.</span></span><br><span class="line">client_socket = <span class="built_in">socket</span>.<span class="built_in">socket</span>()</span><br><span class="line">client_socket.connect((<span class="string">"1.2.3.4"</span>, <span class="number">5678</span>))</span><br><span class="line">client_socket.sendall(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><p>The example above created a socket and connected it to port 5678 at IP address 1.2.3.4. Then, it sent a “Hello World” message to the server at 1.2.3.4:5678.</p><p>The example above created a client socket that was connected to exactly one remote endpoint. When you create a server, you’ll typically want to allow multiple remote clients to connect, and you don’t usually know the address of those clients when the socket is created. As a result, server sockets work differently:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server_socket = socket.socket()</span><br><span class="line">server_socket.bind((<span class="string">"1.2.3.4"</span>, <span class="number">5678</span>))</span><br><span class="line">server_socket.<span class="section">listen</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>After creating the socket, rather than connecting to a particular remote destination, the code above bound the socket to a particular IP address and port, which essentially tells the operating system to associate the given IP address and port with the socket. Finally, the listen call listens for connections made to the socket. When a new client connects to the socket, the socket library will create a new socket to use to communicate with that client, so that the server socket can continue to be used to wait for inbound connections from other clients:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(new_socket, address)</span> = server_socket.accept<span class="comment">()</span></span><br></pre></td></tr></table></figure></p><p>This call blocks until a client connects (using a connect() call, as in the example above), and then returns a newly created socket, new_socket, that can be used to send and receive data to and from the client. For example, the call</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="keyword">new</span><span class="type">_socket</span>.recv(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p>will block until there is data to receive from the client, and will return up to 1024 bytes of data.<br>You’ll need to do some reading to understand how all of these API calls work. In particular, be careful when using send and recv! send, for example, will not necessarily send all of the data passed into it. The Python Socket Programming HOWTO will likely be a useful resource.</p><h4 id="Part-0-to-be-completed-in-section"><a href="#Part-0-to-be-completed-in-section" class="headerlink" title="Part 0 (to be completed in section)"></a>Part 0 (to be completed in section)</h4><p>The first part of the assignment will help you get started with the socket programming API and introduce you to basic client-server interaction. This part of the assignment will not be graded, and you’ll complete it.</p><p>For this part of the assignment, you’ll write a simple client and server. The client will send a single message from stdin to the server and then disconnect. The server should print messages it receives to stdout. If multiple clients connect to the server, the server should handle them sequentially (i.e., it should print the complete message from one client and close that connection before handling the next client).</p><p>The server should accept one command line argument, stating the port that the server should use:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python basic_server<span class="selector-class">.py</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure></p><p>The client should accept two command line arguments: the hostname (or IP address) of the server to connect to, and the server port:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python basic_client.py localhost 12345</span></span><br></pre></td></tr></table></figure></p><p>Your server should be reachable from any IP address associated with the machine (see the FAQ).</p><h4 id="Blocking-sockets"><a href="#Blocking-sockets" class="headerlink" title="Blocking sockets"></a>Blocking sockets</h4><p>In this part of the assignment, it’s fine to use blocking sockets. “Blocking” means that a socket call may not return for a while, until the call completes. Cases when socket calls won’t complete immediately include:</p><ul><li>send: if the socket’s internal buffer is full so no data can be written</li><li>recv: if the internal buffer is empty, so there’s no data to read (e.g., if the client has paused sending)</li><li>accept: if these are no clients currently trying to connect</li></ul><h4 id="Example-use"><a href="#Example-use" class="headerlink" title="Example use"></a>Example use</h4><p>Here’s an example of how your client and server should work. Suppose two different clients connected sequentially:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> basic_client.<span class="keyword">py</span> localhost <span class="number">12345</span></span><br><span class="line">I <span class="keyword">am</span> <span class="keyword">a</span> student in CS168. This class <span class="keyword">is</span> awesome!</span><br><span class="line">$ <span class="keyword">python</span> basic_client.<span class="keyword">py</span> localhost <span class="number">12345</span></span><br><span class="line">Why <span class="keyword">is</span> Shenker <span class="keyword">so</span> <span class="keyword">bad</span> at drawing?</span><br></pre></td></tr></table></figure></p><p>If a server had been started on port 12345 before the client was run, it should have printed output as follows:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> basic_server.<span class="keyword">py</span> <span class="number">12345</span></span><br><span class="line">I <span class="keyword">am</span> <span class="keyword">a</span> student in CS168. This class <span class="keyword">is</span> awesome!</span><br><span class="line">Why <span class="keyword">is</span> Shenker <span class="keyword">so</span> <span class="keyword">bad</span> at drawing?</span><br></pre></td></tr></table></figure></p><h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>In the remainder of the assignment, you’ll build on your basic client and server to create a chat server with different channels that clients can communicate on. For a demo of how your server should behave, watch the video here.</p><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>We’ve provided a utils.py file that has error messages that you should use. These are intended to make your life easier, and also to enable testing. Be sure you use these messages; otherwise, your code will fail the tests!</p><p>Non-blocking sockets<br>You’ll need to use non-blocking sockets for this part of the assignment, because both your client and server need to receive data from multiple sources, in an unknown order. Consider what would happen if your client used blocking sockets, as in part 0, with a call like:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">message_from_server</span> = client_socket.recv(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>Now suppose that the server doesn’t send any messages for a while, but while the client is blocked waiting on the recv call to return, the user types some data into stdin. The client should read the data from stdin and send it to the server – but the client is stuck blocked waiting on data from the server socket! To address this problem, you can use non-blocking sockets.</p><p>To use non-blocking sockets, you’ll need to use the select call in the select library. For more about how to use select and a very relevant example, take a look at this page. While you are required to use non-blocking sockets for reading data and accepting connections, it’s fine to use blocking sockets for sending messages (since the messages you’re sending are short and you don’t need to handle sending a large number of messages in quick succession, send and sendall should not block for long periods of time).</p>]]></content>
    
    <summary type="html">
    
      Python版直接用socket包就好，也不需要像C语言一样处理大量的I/O异常，也算是比较省事的。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CPSC4660-Database-Management-Systems</title>
    <link href="https://tk1307993.coding.me/CPSC4660-Database-Management-Systems.html"/>
    <id>https://tk1307993.coding.me/CPSC4660-Database-Management-Systems.html</id>
    <published>2019-08-03T01:35:23.000Z</published>
    <updated>2019-08-05T13:23:31.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>Briefly describe (in your own words) each of the 7 RAID level, including one improvement that each RAID level makes over the previous levels.</p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><ol><li>Briefly describe one advantage and disadvantage of using fixed-length records in a file</li><li>Briefly describe one advantage and disadvantage of using variable-length records in a file</li></ol><h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h3><p>Construct a B+-tree for the following set of key values. Assume that a node size of 4 pointers (i.e. 3 keys) is used. (If you want to be considered for part marks in the even of a mistake, you should show some of the intermediate steps).<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">35</span>,<span class="number">39</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h3><p>Starting with the resulting B+-tree created from Question 3, show the resulting B+-tree after each of the following operations are performed.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Insert <span class="number">17</span></span><br><span class="line">Insert <span class="number">18</span></span><br><span class="line">Insert <span class="number">16</span></span><br><span class="line">Delete <span class="number">31</span></span><br><span class="line">Delete <span class="number">24</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h3><p>Construct an extendible Hashing Structure for the following set of key values. Assume that a bucket size of 3 entries, and the hashing function h(x) = x mod 8, are used. (If you want to be considered for part marks in the event of a mistake, you should show some of the intermediate steps).<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">35</span>,<span class="number">39</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-6"><a href="#Question-6" class="headerlink" title="Question 6"></a>Question 6</h3><p>Starting with the resulting extendible hashing structure from Question 5, show the resulting structure after each of the following operations are performed.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Delete <span class="number">19</span></span><br><span class="line">Delete <span class="number">39</span></span><br><span class="line">Insert <span class="number">9</span></span><br><span class="line">Insert <span class="number">28</span></span><br></pre></td></tr></table></figure></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>这次作业前面两个问题主要涉及理论，后面四个问主要涉及B+树的编写。</p>]]></content>
    
    <summary type="html">
    
      主要是使用一个数据库系统(SQL语言)。这次作业由于是第一次，偏基础，主要是一些理论的东西，以及写一个B+树，难度不大。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CP164-Stacks</title>
    <link href="https://tk1307993.coding.me/CP164-Stacks.html"/>
    <id>https://tk1307993.coding.me/CP164-Stacks.html</id>
    <published>2019-08-02T02:25:25.000Z</published>
    <updated>2019-08-02T02:28:52.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Using-Versus-Extending-an-ADT"><a href="#Using-Versus-Extending-an-ADT" class="headerlink" title="Using Versus Extending an ADT"></a>Using Versus Extending an ADT</h3><p>Note: In this and future labs we make a distinction between using an ADT and extending an ADT. You must be clear on this distinction:</p><h3 id="Using-an-ADT"><a href="#Using-an-ADT" class="headerlink" title="Using an ADT"></a>Using an ADT</h3><p>When asked to use an ADT write a program that is implementation independent, i.e. the program uses only ADT methods (such as those for a stack) and works for either the array or linked implementation of a data structure. Do not change any code in the ADT implementation files such as stack_array.py.</p><h3 id="Extending-an-ADT"><a href="#Extending-an-ADT" class="headerlink" title="Extending an ADT"></a>Extending an ADT</h3><p>When asked to extend an ADT you are going to add new methods to an ADT, meaning that you are going to add code to one or both of the array or linked implementation of a data structure, such as stack_array.py.</p><h3 id="The-Stack-ADT-Abstract-Data-Type"><a href="#The-Stack-ADT-Abstract-Data-Type" class="headerlink" title="The Stack ADT (Abstract Data Type)"></a>The Stack ADT (Abstract Data Type)</h3><p>A stack is a data structure that follows LIFO (Last In, First Out) rules. Data is added to the top of a stack and removed from the top of a stack. The Stack ADT provides methods for manipulating data in a stack.<br>A reminder of some important points of ADT use are:</p><ul><li>No matter what the underlying implementation of the stack programs should access a stack only through these methods.</li><li>As a corollary to the first point, the stack can be implemented in any number of ways so long as any given implementation follows the ADT function requirements. The implementation must invisible to the program using the Stack ADT.</li><li>A stack may store any type of data, although all the data it stores should be of the same type.</li></ul><p>The following code imports a stack class and the Food class then initializes a stack:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> stack_array <span class="keyword">import</span> Stack</span><br><span class="line"><span class="keyword">from</span> food <span class="keyword">import</span> Food</span><br><span class="line"></span><br><span class="line">s = Stack()</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></p><h3 id="Project-References"><a href="#Project-References" class="headerlink" title="Project References"></a>Project References</h3><p>As we work through the term we will be creating a number of different data structures and adding more functionality to the Food library already written. Making sure that each new project has the latest version of a data structure or Food library is difficult to do if we are reduced to copying and pasting our pydev modules into each new project. Fortunately, Eclipse provides a much better mechanism to reference code. Setting up Project References allows you to link one Pydev project to another, and to use the code from one project in another with the import and from … import * statements already shown. Nothing needs to be changed in your source code.</p><p>To make a reference from one project to another in Eclipse, right click on a project name in the Navigator pane. From the resulting pop-up menu click on Properties and then on Project References in the resulting dialog box.</p><p>Click on the check box of all projects that you wish to reference from the current project. In this example the project album is already selected, and the project data_structures will be added as a reference. Once this is done all of the classes in both album and data_structures will be available through import statements.</p><p>A few things to keep in mind when using project references:</p><ul><li>All referenced projects must be open when attempting to run a program.</li><li>Submit all referenced projects as part of your Eclipse archive (.zip) file when submitting exercises or the markers will not be able to run your programs. You may select multiple projects to include in an Eclipse archive file.</li><li>Do not use the same Pydev module names in two different referenced projects or Eclipse will not know which one an import statement is supposed to be referring to.</li><li>Project references go one way only. If the project stacks references the project data_structures, then data_structures should not reference stacks. Circular references are a very bad idea.</li><li>Upon occasion referenced projects may become ‘out of sync’ with the project that references them. To fix this, right-click on the project and choose Refresh to update Eclipse from the file system.</li></ul><h3 id="Array-based-Stacks"><a href="#Array-based-Stacks" class="headerlink" title="Array-based Stacks"></a>Array-based Stacks</h3><p>The file stack_array.py is a text file containing the basic outline of the array-based Stack class. Copy this code into the Pydev module stack_array.py in your login_data_structures project (where login is your Network login). Thus, a student with the Network login barn4520 should name their projects barn4520_Food and barn4520_data_structures.) The Lab Instructor will walk you through this library and discuss its inner workings.</p><h3 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h3><p>(If you were unable to complete Lab 1 correctly, you may use these files: food.py, food_utilities.py, and foods.txt as the basis for your lab. These files will not be available until after the labs for the previous week are completed.)</p><p>For the appropriate tasks you may download and use the Food class definition in food.py from Lab 1.</p><p>For all of your data structures (stacks, queues, BSTs, etc.), put your code into libraries in your Pydev project login_data_structures.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的是一个关于Stack的Lab作业，由于是Lab作业，工作量并不大，都是基本的Stack操作。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CIS304-Bank-Account-Application</title>
    <link href="https://tk1307993.coding.me/CIS304-Bank-Account-Application.html"/>
    <id>https://tk1307993.coding.me/CIS304-Bank-Account-Application.html</id>
    <published>2019-07-27T02:34:26.000Z</published>
    <updated>2019-07-27T02:37:58.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-to-turn-in"><a href="#What-to-turn-in" class="headerlink" title="What to turn in"></a>What to turn in</h3><p>Use Export Project in NetBeans to export your project to a zip file, name it YourLastName_FirstName_project.zip. Send the file as a single attachment through Blackboard. The subject of this email is YourLastName_FirstName_project.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Write your name as a comment line at the very beginning of each .java program: 1 point deducted for each file without your name at top.</p><p>Besides this documentation, I also provide you a text file, accounts.txt (described below). You should download this text file into the directory of your Netbeans project for your programs. Make sure when accessing this text file programmatically, your program just uses the file name without explicitly providing a path (so called relative path). For instance,</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">File</span> accountFile = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"accounts.txt"</span>);</span><br></pre></td></tr></table></figure><p>For more information about the absolute path, refer to chapter 18 lecture slides. Failing to use the relative path loses 4 points.</p><h3 id="Suggestions"><a href="#Suggestions" class="headerlink" title="Suggestions"></a>Suggestions</h3><ol><li>Start early and start from simple – this is VERY important. For example, begin from the week when the project is available. As the first step, you construct the GUI but not implement functions for button clicks.</li><li>For the give function buttons, you may start to implement the Exit function first, and then the functions of Deposit and Withdraw buttons.</li><li>Always keep a copy of your working code before you implement more requirements.</li></ol><h3 id="Requirements-in-details"><a href="#Requirements-in-details" class="headerlink" title="Requirements in details"></a>Requirements in details</h3><h4 id="GUI-in-general"><a href="#GUI-in-general" class="headerlink" title="GUI in general"></a>GUI in general</h4><p>Once the program starts, it reads all account information from accounts.txt (each row in the file is a account record and is in the format of<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accountNumber<span class="tag">&lt;&gt;</span>openDate<span class="tag">&lt;&gt;</span>customerName<span class="tag">&lt;&gt;</span>balance</span><br></pre></td></tr></table></figure></p><p>The openDate is in the format of year/month/day.) It then fills a JComboBox with all account numbers and shows other GUI controls as in Fig. 1. Your program must be able to “read” the file of this format programmatically because when I test your project, the file content (not the format) will be changed.</p><p>When you select an item (account number) from the JComboBox, the corresponding values for openDate, customerName, and balance will be shown in the three read-only text fields, and the Deposit, Withdraw, and Transfer To buttons become enabled, see Fig. 2.</p><h4 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h4><p>Clicking this button to close the frame and exit the program.</p><p>Instead of using mouse to click the button, pressing Alt + x will also trigger the Exit button.</p><h4 id="Deposit"><a href="#Deposit" class="headerlink" title="Deposit"></a>Deposit</h4><p>(After selecting an account number from the JComboBox), clicking the Deposit button will popup a window as shown in Fig. 3 asking you to enter a deposit amount for the selected account. Hint: this dialog window is generated by JOptionPane.showInputDialog().</p><p>If you enter a non-negative number, such as 100, the amount will be deposited to the account. See Fig 4 - the balanced is adjusted accordingly. The accounts.txt file should also be updated accordingly as well.</p><p>If you clicking Cancel in Fig. 3, nothing will happen to this account.</p><p>If an invalid deposit amount is entered in Fig. 3, such as -100 or $100, you will see an error message as shown in Fig 5.</p><h4 id="Withdraw"><a href="#Withdraw" class="headerlink" title="Withdraw"></a>Withdraw</h4><p>(After selecting an account from the JComboBox), clicking the Withdraw button will popup a window as shown in Fig. 6 asking you to enter a withdrawal amount for the selected account.</p><p>If you enter a non-negative number, such as 100, and if the account balance is sufficient, the withdrawal will be made from the account successfully. See Fig. 7, the balanced is adjusted. The accounts.txt file should also be updated accordingly as well.</p><p>If you clicking Cancel in Fig. 6, nothing will occur to this account.</p><p>If an invalid withdrawal amount is entered in Fig. 6, such as -100 or $100, you will see an error message as shown in Fig 8.</p><p>If a withdrawal amount is greater than the balance, you show an error message and stop the withdrawal.</p><h4 id="Transfer-To"><a href="#Transfer-To" class="headerlink" title="Transfer To"></a>Transfer To</h4><p>(After selecting an account from the JComboBox), clicking the Transfer To button will popup a window as shown in Fig. 10 asking you to enter a beneficiary account number.</p><p>If a valid account number (any number existing in the JComboBox) is entered, after click OK button, a window like Fig. 11 pops up asking for amount to transfer.</p><p>If a valid amount is entered, and the balance is not less than this amount and sometimes the sum of this transfer amount and a transfer fee, the transfer will be succeeded as shown in Fig. 12 and 13. The transfer fee is only applied to account with the balance less than $10000 which is specified in AccountConstants interface (more about AccountConstants see end of this document).</p><p>If an invalid beneficiary account number (i.e., a number which does not exist in the account number JComboBox) is entered in Fig. 10, Fig. 14 shows the error message.</p><p>If the balance is not sufficient for the transfer amount, Fig. 15 shows the error message.</p><p>If the balance is not sufficient to cover both transfer amount and transfer fee (when such a fee applies), Fig. 16 shows the error message.</p>]]></content>
    
    <summary type="html">
    
      用Java Swing作为GUI，从文件中读取信息并显示，实现逻辑，整体控件不多，很基础的作业。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Linux Network" scheme="https://tk1307993.coding.me/tags/Linux-Network/"/>
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CNT5106C-Peer-to-Peer-Network</title>
    <link href="https://tk1307993.coding.me/CNT5106C-Peer-to-Peer-Network.html"/>
    <id>https://tk1307993.coding.me/CNT5106C-Peer-to-Peer-Network.html</id>
    <published>2019-07-23T13:16:52.000Z</published>
    <updated>2019-07-23T13:52:16.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This project creates a peer-to-peer network for file downloading. It resembles some features of Bit-torrent, but much simplified. There are two pieces of software – peer and file owner.</p><p>The file owner has a file, and it breaks the file into chunks of 100KB, each stored as a separate file. The minimum size of the file is 5 chunks. The file owner listens on a TCP port. It should be designed as a server that can run multiple threads to serve multiple clients simultaneously.</p><p>Each peer should be able to connect to the file owner to download some chunks. It then should have two threads of control, one acting as a server that uploads the local chunks to another peer (referred to as upload neighbor), and the other acting as a client that downloads chunks from a third peer (referred to as download neighbor). So each peer has two neighbors, one of which will get chunks from this peer and the other will send chunks to this peer. You can arbitrarily decide on the neighboring relationship as long as the network is connected — there is a direct path from any peer to any other peer. The neighboring relationship may be encoded through input parameters (see below).</p><ol><li>Start the file owner process, giving a listening port</li><li>Start five peer processes, one at a time, giving the file owner’s listening port, the peer’s listening port, and its download neighbor’s listening port.</li><li>Each peer connects to the server’s listening port. The latter creates a new thread to download one or several file chunks to the peer, while its main thread goes back to listening for new peers.</li><li>After receiving chunk(s) from the file owner, the peer stores them as separate file(s) and creates a summary file, listing the IDs of the chunks it has.</li><li>The peer then proceeds with two new threads, with one thread listening to its upload neighbor to which it will upload file chunks, and the other thread connecting to its download neighbor.</li><li>The peer requests for the chunk ID list from the download neighbor, compare with its own to find the missing ones, and download those from the neighbor. At the mean time, it sends its own chunk ID list to its upload neighbor, and upon request uploads chunks to the neighbor.</li><li>After a peer has all file chunks, it combines them for a single file.</li><li>A peer should output its activity to its console whenever it receives a chunk, sends a chunk, receives a chunk ID list, sends out a chunk ID list, requests for chunks, or receives such a request.</li></ol><h3 id="Other-Information"><a href="#Other-Information" class="headerlink" title="Other Information"></a>Other Information</h3><p>Programming Environment</p><p>Programming language: Java, C, C++, C#<br>Operating System: Windows or Linux<br>Programming Tool: Jcreator, Kawa, Eclipse, Netbeans … whatever you like.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>If you use Java, you will need to submit the following files: server.java, client.java, server.class, client.class, README.txt in a zipped directory, e.g., project1.rar. Please make sure to include server.class and client.class in the submission.</p>]]></content>
    
    <summary type="html">
    
      用C语言编写一个P2P网络程序，从服务器上下载文件，注意处理好网络异常即可。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Linux Network" scheme="https://tk1307993.coding.me/tags/Linux-Network/"/>
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CT010-Students-Car-Park-Registration-System</title>
    <link href="https://tk1307993.coding.me/CT010-Students-Car-Park-Registration-System.html"/>
    <id>https://tk1307993.coding.me/CT010-Students-Car-Park-Registration-System.html</id>
    <published>2019-07-21T13:16:52.000Z</published>
    <updated>2019-07-21T00:53:09.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The management of APU has completed the construction of a three story car park where students may park their cars. The car park can accommodate a total of 45 cars, where each level will have 15 parking spaces. In order to facilitate the management of the car park, and enable students to rent parking spaces, a system is needed to handle the registration of students for each available car park for each semester. A student, once registered may park his or her car at the car park for duration of 120 days. The system would be used by the parking administration office to register students who wishes to park at the car park. The users should be able to insert, update, delete, read the following information about the students, parking spaces as well as user details.</p><h3 id="System-Requirement"><a href="#System-Requirement" class="headerlink" title="System Requirement"></a>System Requirement</h3><ol><li><p>The system must require user to enter his or her ID and an assigned password before using the system. Upon login, the system shall display the user’s actual name on the system’s user interface.</p></li><li><p>The system must have the following functionalities:</p><ul><li>New Registration where students who wish to park their car at the car park is registered by the system. Once registered, a parking bay is assigned by the system depending on the availability of parking bays. If all the parking bays are already assigned, then the system shall indicate to the user its status.</li><li>Cancel (Delete) a registration where a student who do not wish to park at the car park anymore. The parking bay occupied then will be released, and the student’s record will be deleted from the system.</li><li>Update a student’s information such as Car Number, Contact Number and E-mail address. Other student’s information such as StudentID, FirstName and LastName should not be available for editing. To facilitate the update process, a Search for the student’s information using the StudentID will be required.</li></ul></li></ol><p>The applications can be developed using structure programming or object-oriented approach. Data may be stored in collections i.e. array of objects or into data files</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>This is a group assignment. Each group should consist of 2 – 3 members only. Upon submission of your assignment, you would be required to present your assignment at a date and time specified by your module lecturer.</p><p>Each team member is required to contribute towards all sections of the assignment, present and explain his or her contribution of the work done. Each team member should also be able to answer questions posed with regards to the project and / or subject matter.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You are required to submit:</p><p>A softcopy of the program coded in Python – submitted on a CD. The program should include the following:</p><ul><li>Basic programming concepts such as displaying and reading of inputs, displaying of outputs, declaration of variables and assignment of values, comments – to explain various parts of the program, etc.</li><li>Using selection control structures and iteration structures and arrays</li><li>Object-oriented concepts such as the use of classes / objects / inheritance / constructors</li><li>Documentation of the system, that incorporates basic documentation standards such as header and footer, page numbering and which includes</li><li>Cover page</li><li>Table of contents</li><li>Workload matrix to indicate the contribution of each individual for each required component (shown in %age form) and signed off by each team member</li><li>Design of the program – using use case diagram, use case description, class diagram, IPO (input, process, output) chart, pseudocode or flowcharts – which adheres to the basic requirements listed above</li><li>Test plan</li><li>Sample outputs when the program is executed with some explanation of the outputs / sections of the program<br>References</li><li>The documentation should be comb-bound with the CD attached.</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个停车场的小应用，结合数据库实现增删改查，纯体力作业。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE214-Restaurants-Menu</title>
    <link href="https://tk1307993.coding.me/CSE214-Restaurants-Menu.html"/>
    <id>https://tk1307993.coding.me/CSE214-Restaurants-Menu.html</id>
    <published>2019-07-15T13:16:52.000Z</published>
    <updated>2019-07-15T13:20:00.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you will write a system to keep track of a restaurant’s menu and the orders placed at the restaurant. A menu consists of up to 50 items, each of which has a name, description, and price. You will implement a class called Menu to store the menu. A driver class will be used to interact with a Menu (add/remove items, change name/description/price, etc.) and build up an “order” of items from the menu (like a shopping cart).</p><p>Write a fully-documented class named MenuItem which contains the item’s name (String), description (String), and price (double). You should provide accessor and mutator methods for each variable, as well as a constructor for the class. The mutator method for the price variable should throw an exception if the new price is nonpositive.</p><p>Write a fully-documented class named Menu which stores a list of items in an array and provides an interface to interact with this list. Note that although arrays in Java are indexed starting with 0, the items in a Menu will be indexed starting with 1. A Menu can hold up to 50 items at a time, so use the final variable MAX_ITEMS = 50. The class will be based on the following ADT specification:</p><h4 id="public-class-Menu"><a href="#public-class-Menu" class="headerlink" title="public class Menu"></a>public class Menu</h4><p>The Menu class implements an abstract data type for a list of menu items supporting some common operations on such lists.<br>Constructor for Menu<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Menu()</span><br><span class="line">Construct an<span class="built_in"> instance </span>of the Menu class with <span class="literal">no</span> MenuItem objects <span class="keyword">in</span> it.</span><br><span class="line">Postcondition:</span><br><span class="line">This Menu has been initialized <span class="keyword">to</span> an empty list of MenuItems.</span><br></pre></td></tr></table></figure></p><p>clone<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Object clone()</span><br><span class="line">Generate <span class="keyword">a</span> copy <span class="keyword">of</span> this Menu.</span><br><span class="line">Returns: </span><br><span class="line">The <span class="literal">return</span> <span class="built_in">value</span> is <span class="keyword">a</span> copy <span class="keyword">of</span> this Menu. Subsequent changes <span class="built_in">to</span> <span class="keyword">the</span> copy will <span class="keyword">not</span> affect <span class="keyword">the</span> original, nor vice versa. Note that <span class="keyword">the</span> <span class="literal">return</span> <span class="built_in">value</span> must be typecast <span class="built_in">to</span> <span class="keyword">an</span> Menu <span class="keyword">before</span> <span class="keyword">it</span> can be used.</span><br></pre></td></tr></table></figure></p><p>equals<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals (Object obj)</span><br><span class="line">Compare this Menu <span class="built_in">to</span> another object <span class="keyword">for</span> equality.</span><br><span class="line">Parameters:</span><br><span class="line">obj - <span class="keyword">an</span> object <span class="built_in">to</span> which this Menu is compared</span><br><span class="line">Returns:</span><br><span class="line">A <span class="literal">return</span> <span class="built_in">value</span> <span class="keyword">of</span> <span class="literal">true</span> indicates that obj refers <span class="built_in">to</span> <span class="keyword">a</span> Menu object <span class="keyword">with</span> <span class="keyword">the</span> same MenuItems <span class="keyword">in</span> <span class="keyword">the</span> same order <span class="keyword">as</span> this Menu. Otherwise, <span class="keyword">the</span> <span class="literal">return</span> <span class="built_in">value</span> is <span class="literal">false</span>.</span><br><span class="line">Note:</span><br><span class="line">If obj is <span class="literal">null</span> <span class="keyword">or</span> <span class="keyword">it</span> is <span class="keyword">not</span> <span class="keyword">a</span> Menu object, <span class="keyword">then</span> <span class="keyword">the</span> <span class="literal">return</span> <span class="built_in">value</span> is <span class="literal">false</span>.</span><br><span class="line">Note:</span><br><span class="line">When comparing equality between <span class="literal">two</span> MenuItem objects, you must verify that their names, descriptions, <span class="keyword">and</span> prices are all <span class="keyword">the</span> same. Using <span class="keyword">the</span> == operator will simply check <span class="built_in">to</span> see <span class="keyword">if</span> <span class="keyword">the</span> <span class="literal">two</span> variables refer <span class="built_in">to</span> <span class="keyword">the</span> same Menu object, which does <span class="keyword">not</span> take <span class="keyword">into</span> consideration that <span class="literal">two</span> different Menu objects can actually represent <span class="keyword">the</span> same <span class="keyword">item</span>. To solve this problem, you can either check that <span class="keyword">each</span> <span class="keyword">of</span> <span class="keyword">the</span> properties <span class="keyword">of</span> <span class="keyword">the</span> <span class="literal">two</span> objects are <span class="keyword">the</span> same (name, description, price) inside <span class="keyword">of</span> this method, <span class="keyword">or</span> you may simplify this <span class="built_in">process</span> <span class="keyword">by</span> implementing <span class="keyword">an</span> equals method (similar <span class="built_in">to</span> this <span class="literal">one</span>) <span class="keyword">for</span> <span class="keyword">the</span> MenuItem class.</span><br></pre></td></tr></table></figure></p><p>size<br><figure class="highlight plain"><figcaption><span>int size()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Determines the number of items currently in this Menu.</span><br><span class="line">Preconditions:</span><br><span class="line">This Menu object has been instantiated.</span><br><span class="line">Returns:</span><br><span class="line">The number of MenuItems in this Menu.</span><br></pre></td></tr></table></figure></p><p>addItem<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void addItem(MenuItem <span class="keyword">item</span>, int position)</span><br><span class="line">Parameters:</span><br><span class="line"><span class="keyword">item</span> - <span class="keyword">the</span> <span class="built_in">new</span> MenuItem object <span class="built_in">to</span> <span class="built_in">add</span> <span class="built_in">to</span> this Menu </span><br><span class="line">position - <span class="keyword">the</span> position <span class="keyword">in</span> <span class="keyword">the</span> Menu where <span class="keyword">item</span> will be inserted </span><br><span class="line">Preconditions:</span><br><span class="line">This Menu object has been instantiated <span class="keyword">and</span> <span class="number">1</span> &lt;= position &lt;= items_currently\<span class="title">_in</span>\<span class="title">_list</span> + <span class="number">1.</span> The <span class="built_in">number</span> <span class="keyword">of</span> MenuItem objects <span class="keyword">in</span> this Menu is less than MAX\_ITEMS.</span><br><span class="line">Postcondition:</span><br><span class="line">The <span class="built_in">new</span> MenuItem is now stored <span class="keyword">at</span> <span class="keyword">the</span> desired position <span class="keyword">in</span> <span class="keyword">the</span> Menu. All MenuItems that were originally <span class="keyword">in</span> positions greater than <span class="keyword">or</span> equal <span class="built_in">to</span> position are moved back <span class="literal">one</span> position. (Ex: If there are <span class="number">5</span> MenuItems <span class="keyword">in</span> <span class="keyword">an</span> Menu, positions <span class="number">1</span><span class="number">-5</span>, <span class="keyword">and</span> you insert <span class="keyword">a</span> <span class="built_in">new</span> <span class="keyword">item</span> <span class="keyword">at</span> position <span class="number">4</span>, <span class="keyword">the</span> <span class="built_in">new</span> ite will now be <span class="keyword">at</span> position <span class="number">4</span>, <span class="keyword">the</span> <span class="keyword">item</span> that was <span class="keyword">at</span> position <span class="number">4</span> will be moved <span class="built_in">to</span> position <span class="number">5</span>, <span class="keyword">and</span> <span class="keyword">the</span> <span class="keyword">item</span> that was <span class="keyword">at</span> position <span class="number">5</span> will be moved <span class="built_in">to</span> position <span class="number">6</span>). </span><br><span class="line">Throws:</span><br><span class="line">IllegalArgumentException</span><br><span class="line">Indicates that position is <span class="keyword">not</span> <span class="keyword">within</span> <span class="keyword">the</span> valid range.</span><br><span class="line">FullListException</span><br><span class="line">Indicates that there is no more room inside <span class="keyword">of</span> <span class="keyword">the</span> Menu <span class="built_in">to</span> store <span class="keyword">the</span> <span class="built_in">new</span> MenuItem object.</span><br><span class="line">Note <span class="number">1</span>:</span><br><span class="line">position refers <span class="built_in">to</span> <span class="keyword">the</span> position <span class="keyword">in</span> <span class="keyword">the</span> Menu <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">the</span> position inside <span class="keyword">the</span> array. </span><br><span class="line">Note <span class="number">2</span>:</span><br><span class="line">Inserting <span class="keyword">an</span> <span class="keyword">item</span> <span class="built_in">to</span> position (items_currently_in_list + <span class="number">1</span>) is effectively <span class="keyword">the</span> same <span class="keyword">as</span> <span class="keyword">a</span></span><br></pre></td></tr></table></figure></p><p>Write a fully documented class named MenuOperations that is based on the following specification:<br>public class MenuOperations<br>The MenuOperations Java application tests data structure classes designed above and the operations defined on them.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args)</span><br></pre></td></tr></table></figure><p>The main method runs a menu driven application which first creates an empty Menu, and then prompts the user for a command selecting the operation. Once an operation is selected, the program prompts for any additional information required to perform the operation, and then actually performs the operation. The operations and additional information required are listed below. To store the items in the current order, you can either use an array or a separate instance of the Menu class.<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Add Item:               A  &lt;Name&gt; &lt;Description&gt; &lt;Price&gt; &lt;Position&gt; (<span class="built_in">add</span> <span class="keyword">the</span> <span class="keyword">item</span> <span class="built_in">to</span> <span class="keyword">the</span> menu)</span><br><span class="line">Get Item:               G  &lt;Position&gt; (Print out <span class="keyword">the</span> name, description, <span class="keyword">and</span> price <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">item</span> <span class="keyword">at</span> <span class="keyword">the</span> specified position <span class="keyword">in</span> <span class="keyword">the</span> menu)</span><br><span class="line">Remove Item:            R  &lt;Name&gt; (Remove <span class="keyword">the</span> <span class="keyword">item</span> <span class="keyword">with</span> <span class="keyword">the</span> given name <span class="keyword">in</span> <span class="keyword">the</span> menu)</span><br><span class="line">Print All Items:        P  (print <span class="keyword">the</span> list <span class="keyword">of</span> all <span class="keyword">items</span> <span class="keyword">on</span> <span class="title">the</span> <span class="title">menu</span>)</span><br><span class="line">Size:                   S  (print <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">items</span> <span class="keyword">on</span> <span class="title">the</span> <span class="title">menu</span>)</span><br><span class="line">Update description:     D  &lt;Name&gt; &lt;New description&gt; (update <span class="keyword">the</span> description <span class="keyword">of</span> <span class="keyword">the</span> named <span class="keyword">item</span>)</span><br><span class="line">Update price:           C  &lt;Name&gt; &lt;New price&gt; (update <span class="keyword">the</span> price <span class="keyword">of</span> <span class="keyword">the</span> named <span class="keyword">item</span>) </span><br><span class="line">Add <span class="built_in">to</span> order:           O  &lt;Position&gt; (Add <span class="keyword">the</span> <span class="keyword">item</span> <span class="keyword">at</span> <span class="keyword">the</span> specified position <span class="keyword">in</span> <span class="keyword">the</span> menu <span class="built_in">to</span> <span class="keyword">the</span> order)</span><br><span class="line">Remove <span class="built_in">from</span> order:      I  &lt;Position&gt; (Remove <span class="keyword">the</span> <span class="keyword">item</span> <span class="keyword">at</span> <span class="keyword">the</span> specified position <span class="keyword">in</span> <span class="keyword">the</span> order)</span><br><span class="line">View order:             V  (print <span class="keyword">the</span> <span class="keyword">items</span> <span class="keyword">in</span> <span class="keyword">the</span> current order)</span><br><span class="line">Quit:                   Q  (terminate <span class="keyword">the</span> program gracefully)</span><br></pre></td></tr></table></figure></p><p>You will also need classes to handle the exceptions thrown (see class specifications above for the exception classes you need).</p><p>Note: You may include additional methods in any class as necessary or as you find convenient.</p><h3 id="HINTS"><a href="#HINTS" class="headerlink" title="HINTS:"></a>HINTS:</h3><p>Remember that the position parameter to all of the methods listed in the Menu class refers to the player at a given item within a Menu (starting at position 1) and not the position inside of the array (which starts at position 0). There are two ways that you can handle this issue:</p><ul><li>Store item 1 in array position 0, item 2 in array position 1, and so on and so forth. Inside each method, subtract one from the position given by the parameter to find the appropriate position within the array.</li><li>Define your array such that it is of size MAX_ITEMS + 1 instead of MAX_ITEMS. Store item 1 in array position 1, item 2 in array position 2, and so on and so forth. Position 0 of the array will not be used.</li></ul><h3 id="SAMPLE-INPUT-OUTPUT"><a href="#SAMPLE-INPUT-OUTPUT" class="headerlink" title="SAMPLE INPUT/OUTPUT"></a>SAMPLE INPUT/OUTPUT</h3><p>Output shown in black. User input shown in red. Comments shown in green.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">Main menu:</span><br><span class="line"></span><br><span class="line">A) Add Item</span><br><span class="line">G) Get Item</span><br><span class="line">R) Remove Item</span><br><span class="line">P) Print All Items</span><br><span class="line">S) Size</span><br><span class="line">D) <span class="keyword">Update</span> description</span><br><span class="line">C) <span class="keyword">Update</span> price</span><br><span class="line">O) <span class="keyword">Add</span> <span class="keyword">to</span> <span class="keyword">order</span></span><br><span class="line">I) Remove <span class="keyword">from</span> <span class="keyword">order</span></span><br><span class="line">V) <span class="keyword">View</span> <span class="keyword">order</span></span><br><span class="line">Q) Quit</span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: A</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">name</span>: Chicken Parmesan</span><br><span class="line"></span><br><span class="line">Enter the description: Breaded chicken, tomato sauce, <span class="keyword">and</span> cheese</span><br><span class="line"></span><br><span class="line">Enter the price: <span class="number">9.50</span></span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">position</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Added <span class="string">"Chicken Parmesan: Breaded chicken, tomato sauce, and cheese"</span> <span class="keyword">for</span> $<span class="number">9.50</span> <span class="keyword">at</span> <span class="keyword">position</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: A</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">name</span>: Hot Dog</span><br><span class="line"></span><br><span class="line">Enter the description: Beef sausage <span class="keyword">in</span> a bun <span class="keyword">with</span> ketchup</span><br><span class="line"></span><br><span class="line">Enter the price: <span class="number">4.50</span></span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">position</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Added <span class="string">"Hot Dog: Beef sausage in a bun with ketchup"</span> <span class="keyword">for</span> $<span class="number">4.50</span> <span class="keyword">at</span> <span class="keyword">position</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: P</span><br><span class="line"></span><br><span class="line">MENU:</span><br><span class="line"></span><br><span class="line">#    <span class="keyword">Name</span>                Description                                        Price</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>    Hot Dog             Beef sausage <span class="keyword">in</span> a bun <span class="keyword">with</span> ketchup                 $<span class="number">4.50</span></span><br><span class="line"><span class="number">2</span>    Chicken Parmesan    Breaded chicken, tomato sauce, <span class="keyword">and</span> cheese          $<span class="number">9.50</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: C</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">name</span> <span class="keyword">of</span> the item: Chicken Parmesan</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">new</span> price: <span class="number">8.50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Changed</span> the price <span class="keyword">of</span> <span class="string">"Chicken Parmesan"</span> <span class="keyword">to</span> $<span class="number">8.50</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: P</span><br><span class="line"></span><br><span class="line">MENU:</span><br><span class="line"></span><br><span class="line">#    <span class="keyword">Name</span>                Description                                        Price</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>    Hot Dog             Beef sausage <span class="keyword">in</span> a bun <span class="keyword">with</span> ketchup                 $<span class="number">4.50</span></span><br><span class="line"><span class="number">2</span>    Chicken Parmesan    Breaded chicken, tomato sauce, <span class="keyword">and</span> cheese          $<span class="number">8.50</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: S</span><br><span class="line"></span><br><span class="line">There <span class="keyword">are</span> <span class="number">2</span> items <span class="keyword">in</span> the menu</span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: O</span><br><span class="line"></span><br><span class="line">Enter <span class="keyword">position</span> <span class="keyword">of</span> item <span class="keyword">to</span> <span class="keyword">add</span> <span class="keyword">to</span> <span class="keyword">order</span>: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Added <span class="string">"Chicken Parmesan"</span> <span class="keyword">to</span> <span class="keyword">order</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: V</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span>:</span><br><span class="line"></span><br><span class="line">#    <span class="keyword">Name</span>                Description                                        Price</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>    Chicken Parmesan    Breaded chicken, tomato sauce, <span class="keyword">and</span> cheese          $<span class="number">8.50</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: G</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">position</span>: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">#    <span class="keyword">Name</span>                Description                                        Price</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>    Chicken Parmesan    Breaded chicken, tomato sauce, <span class="keyword">and</span> cheese          $<span class="number">8.50</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: R</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">Name</span>: Chicken Parmesan</span><br><span class="line"></span><br><span class="line">Removed <span class="string">"Chicken Parmesan"</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: D</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">position</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">new</span> description: Beef sausage <span class="keyword">in</span> a bun <span class="keyword">with</span> ketchup <span class="keyword">and</span> mustard</span><br><span class="line"></span><br><span class="line"><span class="keyword">New</span> description set.</span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: P</span><br><span class="line"></span><br><span class="line">MENU:</span><br><span class="line"></span><br><span class="line">#    <span class="keyword">Name</span>                Description                                        Price</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>    Hot Dog             Beef sausage <span class="keyword">in</span> a bun <span class="keyword">with</span> ketchup <span class="keyword">and</span> mustard     $<span class="number">4.50</span></span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: I</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">position</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Removed <span class="string">"Chicken Parmesan"</span> <span class="keyword">from</span> order.</span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: V</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span>:</span><br><span class="line"></span><br><span class="line">#    <span class="keyword">Name</span>                Description                                        Price</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">// Examples <span class="keyword">of</span> <span class="keyword">errors</span>:</span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: L</span><br><span class="line"></span><br><span class="line"><span class="keyword">No</span> such operation</span><br><span class="line"></span><br><span class="line">// Menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span> <span class="keyword">input</span>/<span class="keyword">output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> an operation: R</span><br><span class="line"></span><br><span class="line">Enter the <span class="keyword">position</span>: <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">No</span> item <span class="keyword">in</span> <span class="keyword">position</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      基础Java作业代写，实现一个类似ArrayList/Vector的ADT，然后实现一个餐馆菜单应用即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS116-Accumulative-Recursion</title>
    <link href="https://tk1307993.coding.me/CS116-Accumulative-Recursion.html"/>
    <id>https://tk1307993.coding.me/CS116-Accumulative-Recursion.html</id>
    <published>2019-07-15T13:16:52.000Z</published>
    <updated>2019-07-18T12:36:51.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-Guidelines"><a href="#Assignment-Guidelines" class="headerlink" title="Assignment Guidelines"></a>Assignment Guidelines</h3><p>This assignment covers material in Module 05.</p><p>Questions 1 and 2 must use accumulative recursion. Questions 3 and 4 can use any form of recursion.</p><h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h3><p>In the game Racko, players attempt to build a strictly increasing sequence of cards (in which a number is less than the number that comes after it). At the end of the game, five points are awarded for each number in the increasing sequence that starts with the first card in the list. Note that any further increasing sequences in the list do not earn any points. For example, there are 20 points awarded for the values 5,10,12,16,15,43, because it begins with the strictly increasing sequence 5,10,12,16.<br>Use accumulative recursion to complete the Python function racko_points, that consumes seq, a list of distinct integers between 1 and 60, inclusive, and produces the score for seq.<br>For example,<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">racko_points([]) =&gt; <span class="number">0</span></span><br><span class="line">racko_points([<span class="number">9</span>,<span class="number">2</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">60</span>]) =&gt; <span class="number">5</span></span><br><span class="line">racko_points([<span class="number">5</span>,<span class="number">10</span>,<span class="number">48</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">17</span>,<span class="number">40</span>,<span class="number">60</span>]) =&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure></p><p>Note that you cannot reorder seq. Determine the number of earned points for the seq in the order given.</p><h3 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h3><p>Consider Xtreme Racko, a variation of Racko® (as described in Question 1) that allows a player to score points for each number in their longest increasing sequence, regardless of where that sequence begins. Use accumulative recursion to complete the Python function xtreme_racko_points, that consumes seq, a list of distinct numbers between 1 and 60, inclusive, and produces the score for seq.<br>For example,<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xtreme_racko_points([]) =&gt; <span class="number">0</span></span><br><span class="line">xtreme_racko_points([<span class="number">5</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">40</span>,<span class="number">60</span>]) =&gt; <span class="number">20</span></span><br><span class="line">xtreme_racko_points([<span class="number">5</span>,<span class="number">50</span>,<span class="number">46</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">60</span>]) =&gt; <span class="number">15</span></span><br><span class="line">xtreme_racko_points([<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>]) =&gt; <span class="number">5</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Hint: You may find it helpful to use more than one accumulator for this question.</p></blockquote><h3 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h3><p>Write a Python function histogram that consumes marks, a list of integer marks between 0 and 100,</p><p>inclusive. The function produces None, and prints a histogram for marks. The histogram consists of one row for each distinct mark. The i th row has the form:</p><p>vvv: row where vvv is the i th smallest value (right justified over 3 places) and row is a string containing k copies of the string ‘X’, where k is the number of times vvv occurs in marks. That is, the first row contains information about the smallest value in marks, the second row contains information about the second smalles distinct value in marks, and so on. The consumed list may not be mutated. If marks is empty, nothing is printed.</p><p>For example, calling histogram([77,78,77,90,0,88,84,83,88,88,77,76,92,100,100]) prints<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span>: X</span><br><span class="line"><span class="attribute">76</span>: X</span><br><span class="line"><span class="attribute">77</span>: XXX</span><br><span class="line"><span class="attribute">78</span>: X</span><br><span class="line"><span class="attribute">83</span>: X</span><br><span class="line"><span class="attribute">84</span>: X</span><br><span class="line"><span class="attribute">88</span>: XXX</span><br><span class="line"><span class="attribute">90</span>: X</span><br><span class="line"><span class="attribute">92</span>: X</span><br><span class="line"><span class="attribute">100</span>: XX</span><br></pre></td></tr></table></figure></p><p>The mark before the ‘:’ can be right justified using the rjust string method. There must be exactly one space after the colon, and no spaces after the string of ‘X’ values. No blank lines are printed.</p><h3 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h3><p>A palindrome is a string that is the same forwards and backwards. For example, “madam” and “hannah” are palindromes, but “abcc b a” and “abcdba” are not.<br>Write a Python function generate_palindromes that consumes a natural number n and produces a list (in alphabetical order) of all the palindromes of length n consisting of a combination of the characters ‘X’ and ‘Y’. For example:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">generate_palindromes</span><span class="params">(<span class="number">0</span>)</span></span> =&gt; [<span class="string">''</span>]</span><br><span class="line"><span class="function"><span class="title">generate_palindromes</span><span class="params">(<span class="number">1</span>)</span></span> =&gt; [<span class="string">'X'</span>, <span class="string">'Y'</span>]</span><br><span class="line"><span class="function"><span class="title">generate_palindromes</span><span class="params">(<span class="number">4</span>)</span></span> =&gt; [<span class="string">'XXXX'</span>, <span class="string">'XYYX'</span>, <span class="string">'YXXY'</span>, <span class="string">'YYYY'</span>]</span><br><span class="line"><span class="function"><span class="title">generate_palindromes</span><span class="params">(<span class="number">5</span>)</span></span> =&gt; [<span class="string">"XXXXX"</span>,<span class="string">"XXYXX"</span>,<span class="string">"XYXYX"</span>,<span class="string">"XYYYX"</span>,<span class="string">"YXXXY"</span>,<span class="string">"YXYXY"</span>,<span class="string">"YYXYY"</span>,<span class="string">"YYYYY"</span>]</span><br></pre></td></tr></table></figure></p><p>Notes:</p><ul><li>The order of the produced list is important. You may use sort or sorted, as appropropriate.</li><li>Think carefully about this problem before you start coding it. There is a short, somewhat elegant solution, but you must really think about what subproblem solution would assist you with finding the set of palindromes you need. (Hint: the solution of n-1 is unlikely to be helpful when solving n.)</li></ul>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业全部需要使用递归，最后一个问属于烧脑型的，五重递归。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSC110-Cellular-Automaton</title>
    <link href="https://tk1307993.coding.me/CSC110-Cellular-Automaton.html"/>
    <id>https://tk1307993.coding.me/CSC110-Cellular-Automaton.html</id>
    <published>2019-07-11T01:19:35.000Z</published>
    <updated>2019-07-11T11:45:28.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Program-Specification"><a href="#Program-Specification" class="headerlink" title="Program Specification"></a>Program Specification</h3><p>In this program you will simulate a simple, one-dimensional cellular automaton. You will implement it using a list, where each element of the list represents 1 cell. Each cell has a state (or value) of dead or alive. You can represent these two states however you’d like (0/1, True/False or any other pairs of data).</p><p>What will this automaton do? It changes. I will refer to a change in the automaton as one step. In one step, all the cells have an opportunity to change (some will, some won’t). Going from left to right in the automaton, the new state of a cell is based on the old state of that current cell and based on the old state of the cells to the left and right.<br>Here are the rules:</p><ul><li>The new state of cell[j] will be alive If the old states of cell[j-1], cell[j], and cell[j+1] were all the same (either all alive or all dead),</li><li>Otherwise, the new state of cell[j] will be dead.</li></ul><p>Consequently, your program has to keep track of old states and new states while the automaton is going through one step. Remember, even though you’ve determined the new state of cell[j], the program still needs to know its old state when it becomes the neighbor of the next cell over.</p><p>What about the edge cells: cell[0] and cell[len(cell) - 1]? If we need to check the cell to the left and right that means using indices that are beyond the boundary of the list! Our solution is for your algorithm to assume that there are neighbors there, and that they are always dead. You should not store these values in the list (in otherwords, don’t make your list length 2 larger than it needs to be). Instead, your algorithm should handle these end cells separately.</p><p>Here is an example with a 6 cell automaton and running 4 steps. I’m going to use D for dead and A for alive so it’s easier to see. This automaton initially has all ALIVE cells:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AAAAAA <span class="comment"># initial state</span></span><br><span class="line">DAAAAD <span class="comment"># after step 1. Notice that the edge cells changed to dead.</span></span><br><span class="line">DDAADD <span class="comment"># after step 2</span></span><br><span class="line"><span class="keyword">ADDDDA </span><span class="comment"># after step 3. Make sure you understand why the ends became alive.</span></span><br><span class="line">DDAADD <span class="comment"># after step 4</span></span><br></pre></td></tr></table></figure><blockquote><p>REQUIREMENT: The only list method you may use for this assignment is .append() Do not use any other list library methods to solve this problem. Do not turn the list into a string or other data type either. I want you to work with a list object and come up with all the algorithms yourself.</p></blockquote><h3 id="User-Input"><a href="#User-Input" class="headerlink" title="User Input"></a>User Input</h3><p>There are 2 pieces of information that your program needs from the user:</p><ol><li>The name of the file with the starting values of the automaton. You can read more about the file format below.</li><li>The number of steps to run. This must be a positive value.<br>Your program must handle invalid input for both of these: filename for a file that doesn’t exist; a non-positive number as well as an invalid type. If either input is invalid, display a helpful error message and prompt again.</li></ol><h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><p>For increased readability, if a cell’s state is alive, print the ‘+’ character. If a cell’s state is dead, print the space character, ‘ ‘. Print only these characters; don’t just call the print() function on the list. The program should not display commas or the surrounding list brackets [ ]. Also, do not print any blank lines between the displays. Print nothing else on the lines besides the state of the automaton. Print one complete step per line.</p><p>I recommend you change the font used by IDLE so these 2 characters have the same width:</p><ol><li>Under the Options Menu, choose Configure IDLE (on the MAC,choose Preferences under the IDLE menu)</li><li>Choose a font such as Courier New, Lucida Console, or Lucida Sans Typewriter (fixed-width fonts). This will change the font in both the shell window and the editor window.</li><li>You may also want to select bold so that the display patterns are easy to see.</li></ol><h3 id="File-Format"><a href="#File-Format" class="headerlink" title="File Format"></a>File Format</h3><p>The text file will contain 4 lines. The first 3 lines will have either the word alive or dead, specifying a pattern. The 4th line is an integer, indicating how many times to repeat this pattern. For example:<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ALIVE</span></span><br><span class="line"><span class="built_in">ALIVE</span></span><br><span class="line"><span class="built_in">ALIVE</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>Your program needs to read this data in and use it to intialize the automaton. For example, based on this file, the automaton will have a length of 60 cells.</p><p>You can use this example to create a text file, or create your own pattern.</p><h3 id="Documentation-and-Other-Style-Issues"><a href="#Documentation-and-Other-Style-Issues" class="headerlink" title="Documentation and Other Style Issues"></a>Documentation and Other Style Issues</h3><p>You should follow all of the commenting guidelines covered in the commenting guidelines.</p><h3 id="Written-Report"><a href="#Written-Report" class="headerlink" title="Written Report"></a>Written Report</h3><p>Please type up the answers to the following questions and include as a comment at the bottom of your .py file:</p><ol><li>How did you go about starting this assignment?</li><li>During development, where did you get stuck, if at all, and how did you get unstuck?</li><li>How did you test your program? Does your program meet the homework specification? If not, in what ways does it fall short?</li><li>What did you learn from this assignment? What would you do differently next time?</li></ol>]]></content>
    
    <summary type="html">
    
      基础作业，练习List的使用方法，完成一个Cellular Automaton的小程序，自动画图。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：SENG201-Traffic-Engineering-Application-Part2</title>
    <link href="https://tk1307993.coding.me/SENG201-Traffic-Engineering-Application-Part2.html"/>
    <id>https://tk1307993.coding.me/SENG201-Traffic-Engineering-Application-Part2.html</id>
    <published>2019-07-08T01:19:35.000Z</published>
    <updated>2019-07-08T01:22:19.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Some-simplifying-assumptions"><a href="#Some-simplifying-assumptions" class="headerlink" title="Some simplifying assumptions"></a>Some simplifying assumptions</h3><p>We will make a few assumptions in order to make the problem simpler.</p><ul><li>All intersections involve one north-south rood meeting an east-west road.</li><li>Signal faces are oriented to the north, 4 south, east or west and are located at the north-west, north-east, south-west or south-east corners of intersections. No overhead signal faces need be considered.</li><li>Semi-actuated intersections need not be considered. If necessary, we can always add a SemiActuatedPhasePlan class later to cope with these.</li><li>Signal faces contain 3 lights: one of each colour and all of the same shape.</li><li>For “round” signal faces, green lights are always followed by yellow lights which are followed in turn by red lights in each cycle. We need not consider other sequences — such as those in countries where another yellow interval occurs between red and green.</li><li>Change intervals and all-red intervals are treated as separate phases.</li><li>Only passive detectors are used. These can report, when asked, whether they have seen any vehicles pass over them.</li><li>No phases are optional.</li></ul><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>You should be able to begin the following activities already and you will find them helpful preparation for the next part which will be available soom.</p><ul><li>Make sure you read the description of the way intersections work and that you understand it fully.</li><li>Observe some real intersections in action. You can start this right away. Identify the signal faces, traffic streams and phases.</li><li>For the active phase plan, draw up a table listing the phases and the state of each stream in the phase.</li><li>Note which signal faces are associated with each traffic stream. Remember that signal faces might shared between streams.</li><li>Using Smarties TM, Pebbles TM or other tools, construct a diagram such as that<br>shown in Figure 5 to show the lights displayed in the signal faces in each phase.</li><li>Time some phases. Do you think your intersection is unactuated or fully-actuated?</li><li>Do you think it has more than one phase plan? For example, is there any difference between rush hour and off peak plans?</li></ul><h3 id="Our-toolkit"><a href="#Our-toolkit" class="headerlink" title="Our toolkit"></a>Our toolkit</h3><p>Figure 6 shows a very simple intersection monitor — an instance of IntersectionMonitor. Near the top is a panel showing the intersection’s signal faces, together with their locations and orientations.</p><p>The monitor displays a “row” for each phase — the active phase is highlighted. As well as the phase description, there is some information about each stream and a colour chip showing the state of each stream (remember that signal faces can be shared between streams) in the corresponding phase.</p><p>A transcript provides a log of the activity at the intersection. Each entry has a time stamp (traffic.misc.TimeStamp) and the transcript can be saved in a file for subsequent analysis.</p><p>Given an Intersection, an IntersectionMonitor can display information about its state. The traffic package contains classes (such as TrafficStream which can be used to assemble an intersection.</p><p>Intersections may also be constructed by reading intersection descriptions from a file. Figure 7 shows the description file corresponding to the intersection of Figure 6.</p><ul><li>The file contains a number of tags, such as SignalFaces — valid tags are found in traffic.Tags.</li><li>Lines beginning with // are treated as comments and empty lines are ignored.</li><li>Within a tag body each line contains one or more fields. The fields are separated by tabs (which are shown underlined in Figure 7). Why tabs? The idea is to make it easy to use a Scanner to parse the content of the line. Using commas as separators seems appealing but ultimately the hassle of escaping commas inside field content is frustrating.</li></ul><h3 id="Next-steps"><a href="#Next-steps" class="headerlink" title="Next steps"></a>Next steps</h3><p>Now that you have completed the activities, you are ready to start working with intersection data.</p><ul><li>Obtain a copy of the intersection monitor demonstrated in class — from the Learn assessment page where you found this document.</li><li>Run it and familiarise yourself with the way it displays information about elements such as phases, streams and signal faces.</li><li>The File menu contains an item to run a working demo, plus one to read files, such as the one in Firgure 7, in the format described.</li><li>The Intersection menu can be used to start and stop the intersection’s phase plan cycle. The signal faces will change to reflect the current phase.</li><li>Information about the changing states of the intersection appears in the transcript pane. The Transcript menu incldes an item which allows the transcript content to be saved for later analysis.</li><li>Write an intersection file for each intersection you oberved as desribed and check that it is correct by loading and running it.</li></ul><h3 id="Using-the-resources-provided"><a href="#Using-the-resources-provided" class="headerlink" title="Using the resources provided"></a>Using the resources provided</h3><ul><li>You will find the javadoc in the api folder.</li><li>Create an Eclipse project (e.g. myassignment).</li><li>Create a package traffic.diy in the src directory. This is where the code you will write/modify goes.</li><li>Add the Java source files from the skeleton folder to the package you created. These contain the sources for classes MyIntersectionMonitor,ModelIntersection and MyIntersectionLoader.</li><li>In the Project — Properties dialog, add the JAR file traffic-library-1.2.jar to the build path (using the Add External JARs button).</li><li>You should now be able to run the application (there’s a main method in MyIntersectionMonitor.</li></ul><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>We’ll update you on the exact details of your submission soon.</p>]]></content>
    
    <summary type="html">
    
      交通灯的应用的第二部分的代写，这部分就是按照要求和给的示例程序来写码了。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：SENG201-Traffic-Engineering-Application-Part1</title>
    <link href="https://tk1307993.coding.me/SENG201-Traffic-Engineering-Application-Part1.html"/>
    <id>https://tk1307993.coding.me/SENG201-Traffic-Engineering-Application-Part1.html</id>
    <published>2019-06-29T00:04:03.000Z</published>
    <updated>2019-06-29T00:07:29.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment you are going to use a Java toolkit for use in traffic engineering applications. As well as writing some code yourself, you will also modify or use code written by others. Like all good Java software, the various classes you write may be used by a variety of clients such as graphical simulation software packages for modelling traffic flows under various conditions or by the software that controls the city’s network of traffic lights.</p><p>There’s quite a lot of reading here — don’t be discouraged! Once you have a good understanding of the way the various aspects of the topic fit together, you will find writing your part a lot easier. We’ll be releasing material in several parts: the focus of this part is domain knowledge and analysis — no Java coding is involved.</p><p>This assignment is not just a programming exercise: it is an opportunity for you to demonstrate a range of software engineering skills. These might include analysis, modelling, design, testing and documentation as well as coding. It is typical in software engineering projects for the domain to be one you may not be expert in, and for requirements to be vague, incomplete or contradictory — we’ll also exercise our communication skills!</p><h3 id="How-intersections-work"><a href="#How-intersections-work" class="headerlink" title="How intersections work"></a>How intersections work</h3><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>We all spend a considerable part of our lives travelling on our country’s roads. As city dwellers 1 , most of us spend much of our travelling time at intersections. As you complete this assignment, you will get to think more deeply about intersections and learn a little 2 about how they are controlled. We hope your future journeys will be much more interesting as a result.</p><p>To begin with, we need to gather some terminology and definitions. Intersections — places where roads meet or cross — come in many different shapes and sizes (geometries). Figure 1 on the following page shows the two most common geometries — the familiar ‘T’ and ‘+’ intersections.</p><p>There are many variations on these basic geometries. The roads may not meet at right angles or there may be more than two intersecting roads.</p><p>The simplest kind of intersections are uncontrolled and vehicles move through the intersection in accordance with the basic road rules governing right of way. Uncontrolled intersections are now quite rare in urban areas and are only suitable for low traffic volume locations. The next level of sophistication involves the use of signs to reinforce the rules (as on an intersection with Give Way signs at all approaches) or to override them (as in the case of Stop signs on a minor road where it joins a major one).</p><p>Other options include the use of roundabouts (also known as traffic islands or rotary intersections) and “free turn” lanes to increase traffic flow while relying on basic road rules. We will not consider these further in this assignment.</p><p>We will only be considering controlled intersections where electronic signalling devices — traffic lights — are used to enforce a plan for giving the right of way in turn to vehicles approaching the intersection from different directions.</p><h4 id="Traffic-streams"><a href="#Traffic-streams" class="headerlink" title="Traffic streams"></a>Traffic streams</h4><p>We can describe what happens at an intersection in terms of a number of traffic streams. The traffic approaching an intersection along a particular road may be regarded conceptually as being made up of several separate streams. Whenever we approach an intersection we have (usually!) already selected a traffic stream that fits our intended movement. Examples might be “I’m in the right turn lane” or “I’m in the straight ahead or left turn lane”. Figure 2 on the next page shows six common streams seen at intersections — see how many you can spot on your way home. These 6 streams are for traffic approaching from one particular direction. The streams for traffic approaching from other directions are simply those shown in Figure 2 on the following page rotated by the appropriate amount.</p><p>Many streets are divided into a number of parallel lanes by road markings and sometimes physical features such as median strips. Lane markings are usually designed so that they correspond to particular traffic streams (e.g. north-bound through traffic AND west-bound left turning traffic). Detectors embedded in the road are unable to tell whether vehicles are intending to continue straight through or make turns. In this case the stream is regarded as consisting of the combination of the possible options. Detectors are considered further in later sections.</p><p>For example, traffic approaching the intersection of Hoare Street and Dahl Drive from the south (see Figure 1) could consist of up to three traffic streams: through traffic continuing north on Dahl Drive, left-turning traffic continuing west on Hoare Street and right-turning traffic continuing east on Hoare Street. These could be accommodated in different ways depending on the number of lanes available at the intersection: by having three separate traffic streams (types (a), (b) and (c) in Figure 2 on the next page); by having two traffic streams (types (c) and (d)) or (types (b) and (e)); by having one traffic stream (type (f)).</p><p>Sometimes particular potential traffic streams are not available — such as a turn onto a one-way street or continuing straight ahead at a ‘T’ junction — at an intersection.</p><h4 id="Traffic-lights"><a href="#Traffic-lights" class="headerlink" title="Traffic lights"></a>Traffic lights</h4><p>At a controlled intersection, there are a number of signal heads mounted on poles or suspended above the roadway. Each signal head has a number of signal faces, each consisting of a number of individual lights. Each light has a single colour and may be on or off 3 . The lights are arranged in groups. For simplicity, we will assume that these are always groups of three, in practice other configurations (such as a single green right turn arrow light) occur. Some examples are shown in Figure 3.</p><p>The most common signal face configuration consists of red, amber &amp; green circular lights controlled so that only one member of the group is on at any time (e.g. when the green light is on, the yellow and red lights in the same group are off). Another very common configuration is a group of three (red, amber and green) arrow lights: these are usually controlled so that at most one light is on at any time.</p><p>Variations include through arrows in red, amber &amp; green as well as bus, tram, pedestrian and cycle lane signals.</p><p>Each signal face is positioned so that is is clearly visible to approaching vehicles in the relevant traffic stream(s). Each traffic stream may have several signal faces. Three is the usual number — check for yourself! Figure 1 on the preceding page shows the signal faces visible to the south-bound traffic streams approaching the intersection of Dahl Drive and Hoare Street from the north.</p><p>Each face has a location relative to the intersection centre and an orientation indicating the direction it is facing. The locations of the signal faces in Figure 1 on the previous page are NE, SW and SE. All faces for a particular stream will usually face the same direction — all three face north in this case.</p><p>Signal faces can be shared between traffic streams. In practice, a “through and left” stream (type (d) in Figure 2) and a “through and right” stream (type (e)) would probably share a signal face for controlling through traffic movement. Figure 3(b) shows a signal face which can control types (c), (d) and (f) depending on the states of the round lights ((green, yellow or red) and right arrow (green, yellow, red, off).</p><h4 id="Phases-amp-phase-plans"><a href="#Phases-amp-phase-plans" class="headerlink" title="Phases &amp; phase plans"></a>Phases &amp; phase plans</h4><p>Each controlled intersection has a cycle consisting of a number of phases. The intersection has a phase plan which specifies the order of the individual phases. Each phase is carried out in turn until the cycle is complete, at which time the cycle then begins again. You may have noticed that some intersections may have more than one phase plan. For example, a “rush hour” plan might include protected right turns and shorter phases while an “off peak” plan might omit protected turns and have longer phases.</p><p>In any particular phase the intersection’s lights are switched into a pattern allowing one or more traffic streams to proceed (by giving them green lights) and preventing others from moving (by giving them red lights). For example, one phase might permit both north-bound and south-bound through traffic on Dahl Drive; another might permit north-bound and south- bound through traffic on Dahl Drive as well as left-turning traffic onto Hoare Street.</p><p>Figure 4 on the next page shows one possible cycle for the intersection of Dahl Drive and Hoare Street. The cycle consists of four phases. Each phase involves two traffic streams from the basic set shown in Figure 2 on the preceding page.</p><ol><li>The appropriate combination of red and green lights is set to permit north-bound and south-bound through traffic on Dahl Drive as well as left turns onto Hoare Street. No right turns are allowed in this phase. No traffic on Hoare Street is permitted to move in this phase.</li><li>Now the appropriate lights are changed to stop the north and south bound through traffic and traffic turning left onto Hoare Street. In addition, further light changes permit right turns from Dahl Drive onto Hoare Street. Traffic on Hoare Street is still not permitted to move in this phase.</li><li>Now it is the turn of the traffic which has been waiting on Hoare Street. The appropriate lights are changed to prevent right turns onto Hoare Street and to prevent any traffic on Dahl Drive from moving. East-bound and west-bound traffic on Hoare Street is permitted as well as left turns onto Dahl Drive.</li><li>Finally, all streams are stopped except for cycle length, is fixed in advance. The phase right turns from Hoare Street onto Dahl plan may depend on factors such as time Drive.</li></ol><p>At the end of phase 4 the cycle begins again.</p><p>Four-phase intersections are quite common — see how many can you spot on your way home. A 2-phase intersection has a very simple plan but you may also encounter many more complex phase plans.</p><p>Now let’s consider the details of the light changing process as one phase ends and another begins. The transition between phases is not immediate — there is a change interval which includes the yellow interval where amber lights are displayed to allow traffic already committed to crossing the intersection to be cleared and an all red interval where red lights are set to prevent any further incoming traffic from the traffic streams active in the phase and to provide a safety margin 4 . Only when the all red interval has elapsed can the next phase be permitted to begin allowing further traffic movement. Typical yellow intervals are 3–4 seconds long and typical all-red intervals are about 1 second. Is this consistent with your observations?</p><p>For simplicity, we will treat change intervals and all-red intervals as separate phases in this assignment.</p><h4 id="Controlling-intersections"><a href="#Controlling-intersections" class="headerlink" title="Controlling intersections"></a>Controlling intersections</h4><p>Many intersections have detectors buried beneath the road surface in order to detect the approach of vehicles in the corresponding lanes (and hence traffic streams). Some cycle lanes also feature detectors. Detectors come in two types. Modern (active) detectors notify the intersection controlling software when a vehicle arrives. The intersection may then decide to switch to a phase which will service the corresponding traffic stream. Older style (passive) detectors record vehicle arrivals but the intersection must poll them to interrogate them about the data they have recorded. Polling involves asking each detector in turn if it has detected any vehicles.</p><p>Controlled intersections can be classified into three major groups according to the way they (via their phase plans) use information provided by detectors.</p><p>The ultimate in sophistication is linking intersections into zones with the same cycle lengths. This enables platoons of vehicles to travel through a sequence of intersections without being stopped. You may have noticed this technique used on the one-way street system around Christchurch.</p><h4 id="A-local-example"><a href="#A-local-example" class="headerlink" title="A local example"></a>A local example</h4><p>Figure 5 shows an example of how we’ll think about intersections. It shows the intersection of Clyde &amp; Creyke Roads with Kotare 5 Street — this is at the north-east corner of the block containing the campus so (as we did) you can observe it for yourself.</p><p>Traffic entering from each direction sees signal faces consisting of 3 round lights. Traffic arriving from the north also sees a signal face consisting of 3 right arrow lights (see Figure 3(b). Overhead lights are ignored, as is the “free turn” for traffic turning left from Creyke Road into Clyde Road.</p><p>The active phase plan consists of seven phases. In the first phase all traffic arriving from the east and west may proceed (i.e. traffic streams of type (f) in Figure 2), with right-turning vehicles giving way as usual, while traffic arriving from the north or south must wait. In Figure 5 the state of each signal face is indicated by the corresponding colours 6 . For example, the black “lights” indicate that the arrows are all off in phases 6 and 7.</p>]]></content>
    
    <summary type="html">
    
      代写一个交通灯的应用的第一部分，需要使用给定的Java库，工程性质的领域应用作业，第一部分主要是介绍领域背景。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS141-Task-Manager</title>
    <link href="https://tk1307993.coding.me/CS141-Task-Manager.html"/>
    <id>https://tk1307993.coding.me/CS141-Task-Manager.html</id>
    <published>2019-06-23T03:03:51.000Z</published>
    <updated>2019-06-23T03:06:01.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a menu driven program for keeping track of tasks. This requires using an array or using an ArrayList object (either one is okay). The main class will be called TaskManager and the list of tasks will be in this class. Each individual task will be an object of the type Task. This is a separate class (in a separate file) which you create. See Task class below for more details.</p><p>If your using the array rather than the ArrayList, you will need to create it to some fixed size. Use 200 and then keep track of how many actual tasks are in the list using a class level in variable (‘listSize’).</p><h3 id="Task-class"><a href="#Task-class" class="headerlink" title="Task class"></a>Task class</h3><p>Tasks have fields of name, description, due date and a list of tags. These are to be created in the Task class. Make them private and then create a set of public methods to access and change the values of them. You will need methods to add or delete a tag. You can create a constructor that takes the name, description and due date values (tags are more difficult as you may have anywhere from 0 to 20 of them so do these using the add tag method) OR you can just use a default (no parameters) constructor and use setter methods to add values to the class.</p><p>The name, description and tags are strings that can have spaces in them. The due date consists of a month, day and year. These can be stored as three int’s OR you can create another class called TaskDate and store them there. The advantage of having a TaskDate class is that you can also put any comparison and print methods for the date in this class.</p><p>Don’t put any methods that require you to work with the entire array inside the Task class. Put these inside the main TaskManager class (along with the array and count). Remember that the Task class only works on the fields of one task, not all tasks.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The following methods should be in your main class:</p><h4 id="addTask"><a href="#addTask" class="headerlink" title="addTask"></a>addTask</h4><p>Asks the user for the name, description and due date (ask for month, day and year) and any number of tags (up to 20 if your using an array for tags). Then create a Task object and put it into the array (or ArrayList). Check to make sure the task’s name has not already been used as you will be using the name to distinguish between tasks. If there is a duplicate, allow the user to re­enter a name. So in the main class you should have a separate findTask method that takes a task name and passes back either the Task object or an index into the array of the Task object that matches the name.</p><h4 id="printAllTasks"><a href="#printAllTasks" class="headerlink" title="printAllTasks"></a>printAllTasks</h4><p>Prints out all the tasks nicely including the tag lists for each task. It would be more convenient to have a method in the Task class that prints out one task. Then in the main class you only need to use a for loop to call each Task object’s print method.</p><h4 id="printTasksByDateRange"><a href="#printTasksByDateRange" class="headerlink" title="printTasksByDateRange"></a>printTasksByDateRange</h4><p>Ask for a begin date and end date and print the tasks between the two dates inclusively. It should not print any tasks if the begin date is later than the end date. You’ll need a method for comparing dates. This might be a good candidate for the Task class (or DueDate class) as you would only need to pass in as parameters one date and compare it with the fields in the Task class. Pass back a 1 for the passed in date being later, 0 for it being equal and 1 if the passed in date is earlier.</p><h4 id="printTodaysSchedule"><a href="#printTodaysSchedule" class="headerlink" title="printTodaysSchedule"></a>printTodaysSchedule</h4><p>A schedule for today consists of printing all past due tasks, then all of today’s task and then all future tasks in that order. In order to do the comparison, the program needs the current data. You can ask the user for this when the program starts up (do this before going into the while loop and keep the current date as a class level variable). Optionally, you can import the java.util.Calendar class to get the current month, day and year but it’s more complicated than just asking the user for the current date.</p><h4 id="deleteTask"><a href="#deleteTask" class="headerlink" title="deleteTask"></a>deleteTask</h4><p>Ask the user for a name. Find the task with the name. If the name is not there, print an error message and return to the main menu. Else, delete task from the list. For an array, you may have to move the tasks after the deleted task to fill in the ‘hole’ in the array. For ArrayList, you don’t need to do this; just use ‘remove’ method.</p><h4 id="modifyTask"><a href="#modifyTask" class="headerlink" title="modifyTask"></a>modifyTask</h4><p>Ask the user for a name. Find the task with the name. If the name is not there, print an error message and return to the main menu. Else, print another submenu of possible fields to change: name, description, due date and add or delete tags (see output). Then allow the user to pick a field and change just that attribute in that task. You get point deducted if you force the user to re-enter all information for a task rather than for one field.</p><h4 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h4><p>Quit should also be a choice in the menu. This should print a goodbye message and quit the program.</p><p>Although not necessary, I would suggest putting 3 or 4 tasks into the list when starting up the program. This way you don’t have to re-create a set of tasks every time you run the program. This makes debugging go much faster.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>You must create and use a Task class; the TaskDate class is optional. You must have the above methods in your program; these go in the TaskManager class. All method listed should be called and work properly.</p><p>There should only one array in the main TaskManager class. This should hold Task objects. The Task class also has an array of String objects for hold tags for each task. You will get points off if you have any other arrays in your code.</p><p>The fields in your Task class must be private. So you need methods for ‘setting’ and ‘getting’ the fields in your class. These methods should be public. Also, allow the user to add or delete tags in the tag list (no need for a modify for tags) using public methods for this (like addTag and deleteTag which takes a String tag and either adds to the list of tags or finds and deletes from the list of tags).</p>]]></content>
    
    <summary type="html">
    
      基础作业，用Java实现一个带菜单的Task Manager，用ArrayList就好。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCE315-5-by-5-Tic-Tac-Toe</title>
    <link href="https://tk1307993.coding.me/CSCE315-5-by-5-Tic-Tac-Toe.html"/>
    <id>https://tk1307993.coding.me/CSCE315-5-by-5-Tic-Tac-Toe.html</id>
    <published>2019-06-15T12:48:47.000Z</published>
    <updated>2019-06-15T12:53:03.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Your team has been assigned to write an Android video game for “5-Toe,” a 5 by 5 tic-tac-toe game. (Note: You do not have to have an Android phone, since this will be done on an emulator.) The human user plays against the computer, which uses an AI search to choose its moves, either minimax with alpha-beta pruning or A*.</p><p>The usual rules of tic-tac-toe apply: X (which is the computer) goes first, players take turns, and the game ends when one player wins by filling 5 squares in a row, column, or diagonal, or when all squares are filled (a tie, commonly referred to as “the cat got the game”).</p><p>When the game starts, the user selects the level of difficulty: easy, medium, or hard, and which AI to play against, minimax or A*. Then the computer places an X in the center (hard), in a corner (medium), or on an edge but not a corner (easy level). The square selected should be different each time the same level is selected; either cycle through the choices or pick a square at random. Each time the user clicks a square, place an O there and check for end of game. If the game is not over, run the chosen AI algorithm, display an X, and check for end of game.</p><ul><li>No more than one statement per line.</li><li>No function longer than 24 lines (one terminal window).</li><li>No line longer than 80 characters.</li><li>For the minimax search with alpha-beta pruning you may need some way of limiting the depth to avoid running out of memory or time. (The computer should move in 5 seconds or less.) The utility function X wants to maximize could be something like<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">5</span> X<span class="symbol">'s</span> - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">5</span> O<span class="symbol">'s</span>) * <span class="number">16</span> ^ <span class="number">4</span> +</span><br><span class="line">    (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">4</span> X<span class="symbol">'s</span> <span class="keyword">and</span> a blank - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">4</span> O<span class="symbol">'s</span> <span class="keyword">and</span> a blank) * <span class="number">16</span> ^ <span class="number">3</span> +</span><br><span class="line">    (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">3</span> X<span class="symbol">'s</span> <span class="keyword">and</span> <span class="number">2</span> blanks - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">3</span> O<span class="symbol">'s</span> <span class="keyword">and</span> <span class="number">2</span> blanks) * <span class="number">16</span> ^ <span class="number">2</span> +</span><br><span class="line">    (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">2</span> X<span class="symbol">'s</span> <span class="keyword">and</span> <span class="number">3</span> blanks - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">2</span> O<span class="symbol">'s</span> <span class="keyword">and</span> <span class="number">3</span> blanks) * <span class="number">16</span> +</span><br><span class="line">    (# <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">1</span> X <span class="keyword">and</span> <span class="number">4</span> blanks - # <span class="keyword">of</span> lines <span class="keyword">with</span> <span class="number">1</span> O <span class="keyword">and</span> <span class="number">4</span> blanks) </span><br><span class="line">since there are <span class="number">12</span> winning lines (rows, columns, <span class="keyword">and</span> diagonals) <span class="keyword">and</span> <span class="number">16</span> &gt; <span class="number">12</span>. O’s utility <span class="keyword">function</span> <span class="title">would</span> then be -f, so f + (-f) = 0, a zero-sum game.</span><br></pre></td></tr></table></figure></li></ul><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><p>For A* you need to devise a heuristic function h(n) which comes as close as possible to the number of additional moves required to win without exceeding the actual number required. If a win cannot be guaranteed no matter how O moves, then h(n) is the estimated number of additional moves to tie, without exceeding the actual number of moves required. If neither a win nor a tie can be guaranteed for X, then h(n) is the estimated number of additional moves till the game ends with O winning.</p><p>Here are some ideas to get you started on A*:</p><ol><li>For each move, start A<em> over by using the current board state as the initial A</em> state. Generate the successor states (legal X moves) as possible values of n and calculate f(n) = g(n) + h(n). This makes g(n) always 1, since it takes 1 move to get from the initial state to n.</li><li>If there are 4 X’s and a blank in 2 rows, columns, or diagonals, and there are no lines with 4 O’s and a blank, then you can win in 2 more moves guaranteed, namely, O moves and then X wins, so h is 2.</li><li>If there are 3 X’s and 2 blanks in a row, column, or diagonal, then it will take at least 4 more moves. However, you must also consider how close O is to winning and whether blocking O is more urgent. For example<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="code"> X | X |   |   | X</span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   | X |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code"> O | O |   | O | O</span></span><br></pre></td></tr></table></figure></li></ol><p>will end in a tie (assuming both players make the best move), so h would be 17 (the number of blanks). Thus you need to consider not only the squares which need X’s to make 5 in a row, but also the squares which need X’s to block O’s moves; some squares may do both.</p><p>If a node (board state) n would allow O to win in 1 move, then assign a “too big” value to h(n), e.g., 25, to insure that A* will not move to state n unless X cannot win or tie.</p><p>There are numerous 3 by 3 tic-tac-toe Android apps on the Internet, which you can use for ideas if you cite them. However, if you are going to make your million with this game :-), you should not use any code or code ideas from others or you could be liable for copyright infringement and spend all your profits on lawyers and fines :-(. Note that some of these claim to use AI but really don’t!</p><p>This is a team project, with three or four students per team. (Teams of four will have an additional task.) Your assigned team should immediately meet and exchange all contact information and schedule at least one meeting per day. Choose a clever team name (but keep it clean :-)), discuss your strengths in Android, Java, C++, threads, GUI’s, XML, learning new IDE’s quickly, debugging, report writing, etc., and elect a team leader to coordinate the project.</p><p>Choose one person to have the primary responsibility for each of these tasks (although you will need to help the other two on their tasks as well):</p><ol><li>Choose a free Android emulator (Android Studio recommended, but you might want to look at MIT’s “invention machine”) and install it where all team members can use it. Write an XML GUI and the main part of the game in the Android subset of Java and find out how to call a C++ function from it.</li><li>Write a minimax search with alpha-beta pruning in C++ and interface it to the main Java program.</li><li>Write an A* search in C++ and interface it to the main Java program.</li><li>(Team of four only) A clever way to get more time for the AI search is to use the human’s “think time” (which doesn’t count against the 5-second limit for the computer to move) in a separate thread. In other words, as soon as the computer places an X, the second thread immediately starts searching ahead. Then when the human “finally” enters a move, the 5-second clock starts, the main thread tells the second thread to take O’s move and only continue searching that subtree. If the search has not completed in 4.5 seconds, tell the second thread to stop when the current ply is finished, then make the best move and start the second thread over searching ahead.</li></ol><p>Follow the Agile methodolgy as described in the slides, including:</p><ul><li>a master burn-down list of remaining tasks and estimated time for each task</li><li>at least 2 “weekly” meetings to assign tasks from the burn-down list</li><li>at least 10 “daily” scrums (15-minute meetings) to report progress and problems and update the burn-down list items and time still needed</li><li>a graph of projected and actual burn-down rate<br>If the game is complete then consider adding sound (like a meow for a tie), color, motion, blinking screen for “You beat the computer!!!”, etc.</li></ul><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Create a team project 3 repository on github and grant access to the instructor and the TA in addition to your team members.</p><p>Identify all the tasks in the project that you can and post that to your repository as the initial project task burn-down list, with the estimated number of days for each task. Add new items you discover are needed and delete items when they are finished.</p><p>Each team must maintain a development log (wiki page in github titled “Development Log”) updated by the team members. This log will be graded. There is no designated format, except that you need to time stamp, write down the name, and write a brief description of the activity, as in Project 2. We will check your daily progress.</p><p>Major routines should include unit testing. Demo in the lab may be required.</p><h3 id="Test-session-log"><a href="#Test-session-log" class="headerlink" title="Test session log"></a>Test session log</h3><p>This is a human-readable transcript of at least two complete games, one using minimax and one using A*, showing the board in graphical form, the number of nodes expanded, and the time required (user plus system) to calculate the AI move. For example,<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="code"> Game begins</span></span><br><span class="line"><span class="code"> Difficulty: Easy</span></span><br><span class="line"><span class="code"> AI algorithm: A*</span></span><br><span class="line"></span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code"> X |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line"></span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code"> X |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   | O |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line"></span><br><span class="line">345678 nodes expanded in 4.321 seconds</span><br><span class="line"><span class="code"> X |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code"> X |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   | O |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   | </span></span><br><span class="line">-------------------</span><br><span class="line"><span class="code">   |   |   |   |</span></span><br></pre></td></tr></table></figure></p><p>and so on.</p><h3 id="Post-production-notes"><a href="#Post-production-notes" class="headerlink" title="Post production notes"></a>Post production notes</h3><p>This is a wiki page with changes you had to make to your design and why, difficulties, solutions, lessons learned, etc.</p><p>Final printed report should include the three preceding items and a printout of all source code. Use the “Download ZIP” feature in github and upload the resulting zip file of all source code (team leader only). For the wiki documents we will check the github repository.</p><p>The report must include the consensus individual work load distribution (percentage, must add up to 100%). Include this in the “Post production notes”. Formula for individual score calculation is as follows: individual score = min(sqrt(your percentage <em> number of team members / 100) </em> team_score,110). For example, if you are on a team of 4 and your team agrees your contribution was 20% and your team score was 85, your individual score is min(sqrt(20 / 25) <em> 85, 110) = 76. Note that 25% is the baseline (equal contribution by all four members). If your contribution was 30% and your team score was 85, your individual score is min(sqrt(30 / 25) </em> 85 ,110) = 93.</p>]]></content>
    
    <summary type="html">
    
      代写一个包含AI的5x5的Tic-Tac-Toe游戏，相比基础的3x3的Tic-Tac-Toe，这次这个作业不仅增加了棋盘尺寸，还需要用A*算法来实现AI，UI需要在Android模拟器上显示。总体来说属于偏难的作业类型。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：FIT9131-My-Library</title>
    <link href="https://tk1307993.coding.me/FIT9131-My-Library.html"/>
    <id>https://tk1307993.coding.me/FIT9131-My-Library.html</id>
    <published>2019-06-06T01:50:50.000Z</published>
    <updated>2019-06-06T01:53:27.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>For this assignment you are required to write a program, My Library, that simulates a very small library of electronic books. This section specifies the required functionality of this program.</p><p>Even though this program is functionally very different from the program you wrote in Assignment 1, you should be able to re-use much of your previous code here - if you have designed the classes/logic in your previous program properly. This is one of the major benefits of an object-oriented program - the ability to re-use classes.</p><p>My Library should provide the following features:</p><ul><li>maintains a list (using a Java Collection class) of Borrower objects<br>each Borrower object represents a person who is allowed to borrow some books from the library</li><li>maintains a fixed list of exactly 10 books</li><li>each book is implemented using a String, which consists of the book’s title and the author</li><li>each book can be borrowed by different borrowers at the same time</li><li>(HD level) maintains a fixed list of unlimited Book objects</li><li>each Book object represents a single (electronic) book which can be borrowed by different borrowers at the same time</li><li>a book has a rating (children/adult), which limits its availability to a borrower based on his age</li><li>allows each borrower to borrow up to 2 books at any one time</li><li>lists the details of an existing borrower and the books he has currently borrowed</li><li>produces a report of all borrowers</li><li>allows a borrower to borrow/return a book</li><li>loads a list of borrowers from a text file</li><li>a sample data file will be provided to you – your program must be able to read the data from this file</li><li>(HD level) loads a list of books from a text file</li><li>a sample data file will be provided to you – your program must be able to read the data from this file</li><li>saves the list of current borrowers (with the borrowed books) to a text file</li></ul><p>You are to demonstrate the following programming techniques in your program:</p><ul><li>reading/writing data from/to text files</li><li>using appropriate Java Collection class or classes to store data</li><li>using code to manipulate the data in the collection(s)</li><li>performing simple searches, filtered by some given criteria</li><li>using program constructs such as repetitions &amp; selections</li><li>using appropriate classes to represent the various objects in the program</li></ul><p>There will be a description of the “HD level” features later in this document.</p><p>You are also required to produce a partial Test Strategy for your program.</p><h3 id="Program-Logic"><a href="#Program-Logic" class="headerlink" title="Program Logic"></a>Program Logic</h3><p>When the program starts, it should automatically load a text file called “borrowers.txt” which contains details of all borrowers currently stored in the system. The actual format of this text file is described later in this document. The data loaded should be stored in some appropriate data structures. No other reading from (or writing to) file is required while the program is in operation, until the user chooses to exit, at which point the program saves all the in-memory data back to the same text file (borrowers.txt).</p><p>In other words, all the file I/O operations are performed automatically by the program, once at the start and once at the end, and require no interactions with the user.</p><p>When the program is running, it should repeatedly display a menu with at these options (non-HD level), such as:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the My Library</span><br><span class="line">====================</span><br><span class="line">(1) Register New Borrower</span><br><span class="line">(2) Manage Borrower</span><br><span class="line">(3) List All Borrowers</span><br><span class="line">(4) Display Help</span><br><span class="line">(5) Exit Library</span><br><span class="line">Choose an option:</span><br></pre></td></tr></table></figure></p><h3 id="Program-Design"><a href="#Program-Design" class="headerlink" title="Program Design"></a>Program Design</h3><p>Your program must demonstrate your understanding of the object-oriented concepts and general programming constructs presented in FIT9131. You must use appropriate data structures to store the various objects (list of borrowers, list of books (HD-level), etc) in the program.</p><p>You must be able to justify the choice of the data structures during your interview. You must document any additional assumptions you made.</p><p>Appropriate validations of values for fields and local variables should also be implemented. You should not allow an object of a class to be initialized/set to an invalid state.</p><p>Discuss with your tutor what classes are appropriate, and how they interact with each other. The main requirements are: (1) the borrowers (and for the HD level, the books) must be implemented as objects, and they must be stored in some appropriate Java collections, and (2) the list of books within each borrower object must also be stored in some appropriate Java collections.</p><p>Your program must deal with invalid values entered by the user in a sensible manner. For instance, if a user enters “abc” when a number is expected, your program should not crash.</p><p>All on-screen input/output should be formatted in a user-friendly manner. Sensible error messages should be displayed whenever appropriate (eg. entering a duplicate borrower ID, entering a number outside the allowable valid range, etc).</p><h3 id="Test-Strategy"><a href="#Test-Strategy" class="headerlink" title="Test Strategy"></a>Test Strategy</h3><p>For this assignment, you are required to produce and submit a partial Test Strategy for the program.</p><p>Your Test Strategy will be only for one class - the Borrower class.</p><p>There is no need to produce Test Strategy for any other classes you have used in your program.</p><p>You must provide a Test Plan, plus detailed sets of Test Data, Expected Results and Actual Results for the Borrower class.</p>]]></content>
    
    <summary type="html">
    
      用Java基础类实现一个图书馆的小应用，可以借书、还书、管理书等等，属于很基础但是有一定工程量的程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CUDA代写：CME213-Heat-Diffusion-Equation</title>
    <link href="https://tk1307993.coding.me/CME213-Heat-Diffusion-Equation.html"/>
    <id>https://tk1307993.coding.me/CME213-Heat-Diffusion-Equation.html</id>
    <published>2019-06-06T01:50:50.000Z</published>
    <updated>2019-06-09T02:57:13.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This assignment builds on the previous assignment’s theme of examining memory access patterns. You will implement a finite difference solver for the 2D heat diffusion equation in different ways to examine the performance characteristics of the different implementations.</p><h3 id="Background-on-the-heat-diffusion-PDE"><a href="#Background-on-the-heat-diffusion-PDE" class="headerlink" title="Background on the heat diffusion PDE"></a>Background on the heat diffusion PDE</h3><p>To solve this PDE, we are going to discretize both the temporal and the spatial derivatives. To do this, we define a two-dimensional grid G(i, j), 1 ≤ i ≤ n(x), 1 ≤ j ≤ n(y), where we denote by n(x) (resp. n(y) ) the number of points on the x-axis (resp. y-axis). At each time-step, we will evaluate the temperature and its derivatives at these gridpoints.</p><p>While we will consistently use a first order discretization scheme for the temporal derivative, we will use 2nd, 4th or 8th order discretization of the spatial derivative.</p><p>If we denote by T(i, j) the temperature at time t at point (i, j) of the grid, the 2nd order spatial discretization scheme can be written.</p><p>The C(x) (xfcl in the code) and C(y) (yfcl in the code) constants are called Courant numbers. They depend on the temporal discretization step, as well as the spatial discretization step. To ensure the stability of the discretization scheme, they have to be less than a maximum value given by the Courant-Friedrichs-Lewy condition. You do not have to worry about this, because the starter code already takes care of picking the temporal discretization step as to maximize the Courant numbers while ensuring stability.</p><p>The starter code also contains host and device functions named stencil which contain the coefficients that go into the update equation. Therefore, you do not need to figure out how to implement the different order updates. You only need to understand how this function works and pass in the arguments correctly.</p><h3 id="Boundary-conditions"><a href="#Boundary-conditions" class="headerlink" title="Boundary conditions"></a>Boundary conditions</h3><p>The starter code contains the functions that will update the boundary conditions for you (see file BC.h, in particular the function gpuUpdateBCsOnly) and the points that are in the border (which has a size of order / 2). This way, you do not have to worry about the size of the stencil as you approach the wall.</p><h3 id="Various-implementations"><a href="#Various-implementations" class="headerlink" title="Various implementations"></a>Various implementations</h3><p>In this programming assignment, we are going to implement 2 different kernels (and you can do a third one for extra credit):</p><ul><li><p>Global (function gpuStencil): this kernel will use global memory and each thread will update exactly one point of the mesh. You should use a 2D grid with n(x) × n(y) threads total.</p></li><li><p>Block (function gpuStencilLoop): this kernel will also use global memory. Each thread will update numYPerStep points of the mesh (these points form a vertical line). You should also use a 2D grid with n(x) × n(y) / numYPerStep threads total.</p></li><li><p>(Extra Credit) Shared (function gpuShared): this kernel will use shared memory. A group of threads must load a piece of the mesh in shared memory and then compute the new values of the temperatures on the mesh. Each thread will load and update several elements.<br>Parameter file</p></li></ul><p>The parameters used in the computation are read from the file params.in. You will need to modify some parameters (see description of the starter code) in this file to answer some of the questions. But this file will be not be submitted through the submission script.</p><p>Here is a list of parameters that are used in the order they appear in the file:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> nx_, ny_;    // <span class="keyword">number</span> of grid points <span class="keyword">in</span> each <span class="keyword">dimension</span></span><br><span class="line"><span class="keyword">double</span> lx_, ly_; // extent of physical domain <span class="keyword">in</span> each <span class="keyword">dimension</span></span><br><span class="line"><span class="built_in">int</span> iters_;      // <span class="keyword">number</span> of iterations to <span class="keyword">do</span></span><br><span class="line"><span class="built_in">int</span> order_;      // order of discretization</span><br></pre></td></tr></table></figure></p><h3 id="Start-code"><a href="#Start-code" class="headerlink" title="Start code"></a>Start code</h3><p>The starter code is composed of the following files:</p><ul><li>main.cu — This is the CUDA driver file. Do not modify this file.</li><li>gpuStencil.cu — This is the file containing the kernels. You will need to modify this file.</li><li>Makefile — make will build the binary. make clean will remove build files as well as debug output. Do not modify this file.</li><li>params.in — This file contains a basic set of parameters. For debugging, performance testing, and to answer the questions, you will need to modify this file. The only parameters you should modify are nx, ny (line 1) and order (line 4). This file however will not get submitted through the script.</li><li>simParams.h and simParams.cpp — These files contain the data structure necessary to handle the parameters of the problem. Do not modify these files.</li><li>Grid.h and Grid.cu — These files contain the data structure that models the grid used to solve the PDE. Do not modify this file.</li><li>BC.h — This file contains the class boundary_conditions that will allow us to update the boundary conditions during the simulation. Do not modify this file.</li><li>hw3.sh — This script is used to submit jobs to the queue</li></ul><blockquote><p>Note The files in the starter code contain some additional information about the implementation in the form of comments. Additionally, the CPU implementation should provide a clearer picture of the method and should aid your GPU work.</p></blockquote><h5 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h5><p>(30 points) Implement the function gpuStencil that runs the solver using global memory. You must also fill in the function gpuComputation. The difference (in terms of the norms) between your implementation and the reference to should be in the expected range.</p><h5 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h5><p>(35 points) Implement the function gpuStencilLoop that runs the solver using global memory but where each thread computes several points on the grid. You must also fill in the function gpuComputationLoop.<br>The difference (in terms of the norms) between your implementation and the reference to should be in the expected range.</p><h5 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h5><p>(15 points) Plot the bandwidth (GB/s) as a function of the grid size (in units of MegaPoints) for the following grid sizes: 256×256; 512×512; 1024×1024; 2048×2048; 4096×4096.<br>You must have 2 plots (or 3 plots if you choose to do the extra credit) as follows:</p><ol><li>For order = 4, plot the bandwidth for the 2 (or 3) different algorithms.</li><li>For the block implementation, plot the bandwidth for the 3 different orders.</li><li>If you implemented the shared algorithm, plot the bandwidth for the 3 different orders.</li></ol><h5 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h5><p>(20 points) Which kernel (global, block or shared) and which order gives the best performance (your answer may depend on the grid size)? Explain the performance results you got in Question 3.</p><h5 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h5><p>(20 points Extra Credit) Implement the function gpuShared that runs the solver using shared memory. You should also fill in the function gpuComputationShared. Note that you have to answer the questions related to.<br>Total number of points: 100 (+20 Extra credit)</p>]]></content>
    
    <summary type="html">
    
      用CUDA编写程序来计算热扩散方程，背景挺吓人的，不过工作量只是实现几个GPU的函数。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="CUDA" scheme="https://tk1307993.coding.me/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>JavaFX代写：CSE2100-Cosmic-Wimpout</title>
    <link href="https://tk1307993.coding.me/CSE2100-Cosmic-Wimpout.html"/>
    <id>https://tk1307993.coding.me/CSE2100-Cosmic-Wimpout.html</id>
    <published>2019-06-01T01:19:30.000Z</published>
    <updated>2019-06-01T01:21:38.208Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>For this project, you will implement a JavaFX-based two-player (human vs. computer) version of the dice game called Cosmic Wimpout. You will need to use many or all of the techniques covered in class this semester, like arrays, classes, inheritance and polymorphism, and GUI programming.</p><p>Cosmic Wimpout is played with five six-sided dice. Four of these dice have the following values printed on their faces: 10, 2, 3, 4, 5, 6. The fifth die is called the “Sun” die, and has the image of a star (the “Flaming Sun”) in place of the 3. Thus, its faces have the values 10, 2, *(sun), 4, 5, and 6. The sun is treated as a wild value; that is, it may be substituted for any other face value. During a player’s turn, he rolls all five of these dice.</p><p>Play follows the official rules:</p><ol><li>The players agree on a game goal, usually 300 or 500 points (this is known as the Winning Total). The first player to exceed this score wins the game.</li><li>Each player rolls one of the regular dice (not the “Sun” die). The player who rolls the highest face value goes first (10 beats 6). If a tie occurs, the tied players roll again.<br>When it becomes a player’s turn, he begins by rolling all five dice, and counts up the score for that roll:</li><li>Five matching faces are called a Freight Train. A Freight Train is worth a number of points equal to 100 times the face showing on any one die. For example, a Freight Train consisting of five 4’s is worth 400 points.</li><li>If a player rolls five sixes, he automatically wins the game.</li><li>Too Many Points: Rolling five 10’s (a Supernova) automatically knocks a player out of the game.<br>Three matching faces on the same throw are called a flash, and are worth 10 points times the face value. For example, three 5’s are worth 50 points.</li><li>If the “Flaming Sun” comes up, it can be used to form the third value in a flash, or it can be treated as a 5 or a 10 for the purposes of scoring. If a Flaming Sun is rolled along with a pair of any other values, the Flaming Sun MUST be used to form a flash.<br>5’s and 10’s that do not form part of a flash are worth 5 or 10 points, respectively.</li><li>If a player rolls something other than numbers (5 or 10), flashes, or a Freight Train, he is said to have wimped out, and loses his turn. He does not gain any points for that turn.</li><li>If a player rolls anything that will earn him points during a turn (a 5 or 10 on one or more dice, or a flash, or a freight train), he may set aside those dice and re-roll the remaining dice to accumulate more points. He may continue to re-roll and accumulate points until he either wimps out (losing all points for the turn) or chooses to stop voluntarily.</li><li>A player officially enters the game when he gets 35 or more points on his first roll. Until a player enters the game, he does not accumulate any points from rolling the dice. Your program should announce when each player enters the game.<br>You May Not Want To But You Must: If a player scores with all five dice, he must continue his turn and roll all five dice again. He continues to accumulate points until he either wimps out or scores with four or fewer dice.</li><li>The Futtless Rule: All flashes must be cleared. To clear a flash (three of a kind), a player must re-roll all non-scoring dice. If one or more of the re-rolled dice match the dice that make up the flash, the player must repeat the re-roll until none of them match the flash value.</li><li>The current player may voluntarily end his turn whenever he rolls and does not wimp out, except when he has fewer than 35 points or is subject to the “You May Not Want To But You Must” rule or the Futtless Rule. When a player ends his turn without wimping out, he adds his accumulated points to his total.<br>12。 Last Licks: When a player reaches the Winning Total, each of the other players receives one last roll, which they must use to attempt to catch up in terms of points.</li></ol><p>Your program should use JavaFX to present an appealing user interface for the game (focus on implementing a text-based version of the game first, then add the GUI at the end).</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>A player rolls<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">10</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>The 5 and 10 are scoring dice, so they are set aside (for a total of 15 points so far). The player chooses to re-roll the remaining three dice, obtaining:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">10</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>(Note that this does not create a flash, since three 10s were not rolled at the same time)<br>Now the player chooses to stop (he has not wimped out, since he rolled at least one scoring die), and take his 35 points for the turn.<br>Suppose the current player rolls<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">3</span> <span class="number">5</span> * <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>This creates a flash worth 50 points (the Flaming Sun counts as the third 5 for the purposes of the flash). This flash must be cleared, so the player re-rolls the 3 and 4, getting:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>Since the 5 duplicates the flash that was just rolled, both dice must be re-rolled:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>This clears the flash (since the player didn’t roll a 5 this time), but 3 is a non-scoring value (remember that only 5 and 10 count as scoring values outside of a flash or freight train). As a result, the player has wimped out, and will not earn any points for this turn.</p><h3 id="Grading-Rubric"><a href="#Grading-Rubric" class="headerlink" title="Grading Rubric"></a>Grading Rubric</h3><p>This program is worth a total of 40 points, broken down as follows:</p><ul><li>Game correctly plays one turn by the human player - 10 points</li><li>Game correctly plays one turn by the computer - 10 points</li><li>Game correctly plays to completion - 10 points</li><li>Graphical User Interface - 10 points</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个和电脑玩的骰子游戏，用JavaFX做界面。游戏叫Cosmic Wimpout，玩法倒是挺新颖的。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Java" scheme="https://tk1307993.coding.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#代写：COMP5348-Video-Store</title>
    <link href="https://tk1307993.coding.me/COMP5348-Video-Store.html"/>
    <id>https://tk1307993.coding.me/COMP5348-Video-Store.html</id>
    <published>2019-05-28T12:33:41.000Z</published>
    <updated>2019-05-28T12:36:15.935Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Enterprise applications usually need to integrate with a number of legacy or third party systems to fulfill business requirements. In this assignment, your task is to provide a suitable integration solution to integrate the VideoStore application with the 3 other applications shown in Figure 1. Integration with these 3 applications is required in order to support the following workflow for submitting orders:</p><p>When an order is placed, the video store application should:</p><ul><li>Request a transfer of funds from the customer’s account to VideoStore’s account using the services provided by the Bank Application.</li><li>If the transfer is successful, the video store requests delivery for the purchased items from DeliverCo. DeliveryCo notifies the video store when delivery is complete. Further:</li><li>The customer is notified via email (using the EmailService) when a delivery is submitted to DeliveryCo, AND when DeliveryCo claims that the delivery is complete.</li><li>The stock levels for an ordered media item should also be updated if an order is successfully submitted.</li></ul><p>If the transfer fails, the customer is notified via email (using the EmailService) that there is a problem with their credit, and that the purchase order cannot proceed.</p><p>The four applications are currently integrated through synchronous point to point calls, and most of the workflow described above can be seen in VideoStore.Business.Components/OrderProvider::SubmitOrder().The solution is setup with a customer account username: “Customer” and password: “Customer”. We suggest you use this account for your testing. The current integration solution is functional, but isn’t ideal in addressing quality attributes like availability and reliability. In lectures and tutorials you looked at technologies including asynchronous messaging, message oriented middleware and web services. You will need to modify the integration solution provided and improve its availability and fault-tolerance. You need to take the following into account:</p><ol><li>How are the availability and reliability quality attributes improved? You need to show message diagrams for various cases of subsystem failure (eg What happens if the VideoStore is up and the Bank component is down?).</li><li>Apart from availability and reliability, how are the other quality attributes mentioned in the first lecture affected by your design? System architects need to make trade-offs between different quality attributes (eg: tolerating more failures vs improved performance when there are no failures), and this is acceptable as long as the architect can correctly justify their choices.</li></ol><p>You will need to consider how your solution handles failure conditions (not just the one above but also any other failure conditions you can identify). You can assume that the delivery company will eventually be successful in delivering any orders they receive but that their system may go down. In your submission you will need to include a report which describes your integration solution and answers questions 1, and 2, giving specific scenarios that illustrate how your integration solution improves availability and fault tolerance, and how your solution affects other quality attributes.</p><h3 id="Group-Formation"><a href="#Group-Formation" class="headerlink" title="Group Formation"></a>Group Formation</h3><p>Each group should contain 3 students. In exceptional cases (with lecturer’s permission in advance) a group may have 4 students, but such a group may be required to take on additional work.</p><p>A group is formed when the students involved each join it through the sign-up sheet on the eLearning site for comp5348. Once someone joins a group, they can see the Assignment itself.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>A zipped file containing source code for your application and a readme file explaining how to run your application.</p><p>A description of how your code works focusing on message exchanges between your components and showing how you will handle the unavailability of various systems. You should justify trade-offs that you made. That is, your report must include answers to questions 1 and 2 from the assignment description.</p><p>A copy of the Academic Honesty cover sheet (group work version) signed by all members of the group Submit deliverables 1 and 2 through eLearning, and hand in deliverable 3 in person at the lab.</p><h3 id="Some-Q-amp-A"><a href="#Some-Q-amp-A" class="headerlink" title="Some Q &amp; A"></a>Some Q &amp; A</h3><blockquote><p>Q1) How do I run the 4 applications and the VideoStore web-client?</p></blockquote><p>A1) a) Create the Videos, Bank, and Deliveries databases along with their associated tables.<br>b) Start each of the applications by right clicking on the following projects, and then clicking on Debug &gt; Start New Instance : Bank.Process; DeliveryCo.Process; EmailService.Process; VideoStore.Process. You can then also start the VideoStore web client by right clicking on VideoStore.WebClient and then clicking on Debug &gt; Start New Instance. Remember to login with the username “Customer” and the password “Customer” (both without the quotes).</p><blockquote><p> Q2) Do I need to modify the EmailService so that it actually sends emails?</p></blockquote><p>A2) No, the EmailProvider simply needs to print out that a message was sent to a certain address for this assignment (which is the current implementation).</p><blockquote><p>Q3) The debugger stops when I try to place an order when the Customer has insufficient funds; or when I place an order for a media item with insufficient stock. How can I observe the application functionality without the debugger stopping in these situations?</p></blockquote><p>A3) Before placing your order you can “Detach” the debugger (Debugger &gt; Detach All) to observe the overall functionality in the question’s scenarios without being interrupted by the debugger.</p>]]></content>
    
    <summary type="html">
    
      需求是一堆User Story加上几张软件UML图，业务逻辑得靠现有的代码去推敲。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>C#代写：CIS501-Instant-Messaging-App</title>
    <link href="https://tk1307993.coding.me/CIS501-Instant-Messaging-App.html"/>
    <id>https://tk1307993.coding.me/CIS501-Instant-Messaging-App.html</id>
    <published>2019-05-25T10:43:34.000Z</published>
    <updated>2019-05-25T10:46:26.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this project, you are to design and implement an Instant Messaging App (IM App) using the Model View Controller architecture design with delegates. The IM App consists of a front-end (Client) and a back-end (Server) component.</p><p>The IM App builds on the WebSocket Chat Client/Server Apps exercises that we did in class on with some additional functionality as listed bellow:</p><ul><li>Users can log in/out from the Server; logging in requires a name and password, which are managed in the Server and must be persisted across running sessions by serializing the account objects as a JSON string stored in a file.</li><li>Once logged in, users can manage their contact list by adding and removing contact entries.</li><li>At the client side, the contact list shows each contact’s status (online/offline). This status is dynamically updated as the users in the list log in/out from the server.</li><li>A user X, while online, can establish a 2-way chat session with another user (with online status) in X’s contact list. Conversations are not recorded/saved in the Server.</li><li>While user X is chatting with user Y, any of them can add a third user Z (also online) to have a group chat.</li><li>Similar to the class exercise, the Client and Server Apps communicate via a WebSocket connection. Moreover, each chat message should be time-stamped and the client GUI should indicate who sends the message in the chat window.</li></ul><h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><p>As you might have experienced when using some IM app, there are many IM features that can be provided. Bellow are the minimal use cases that your solution must provide.</p><p>Log in/Sign in. A user A launches the Client app (C) and enters a name (n) and password (p) to log into the Server (S). Server S can respond to C in two ways:</p><p>Login is successful – if p matches what is in n’s account record, or if n is a new name, in this case, S creates a new account with name n and password p.</p><p>Login is unsuccessful – if p does not match the information in n’s account records.</p><p>Server-Client Synch. After a successful login, Server S communicates A’s contact list to client C (empty if n is a new name), and let other online users, that have A in their contact lost, know that A is now online, (the other user’s contact list displays A as online). A can use client C to do any of the following:</p><p>Add a new contact. A enters contact name (e.g. b). If an account exists in server S with name b, server S adds b to A’s contact list (persisted), and let client A know so it can update/display A’s contact list appropriately. Otherwise, (if b does not exists), server S notifies client C (and thus A) that b does not exists.</p><p>Remove an existing contact (e.g. C). A selects the contact c from A’s contact list, confirms/cancels the removal of the contact. If confirmed, server S removes c from A’s contact list (persisted, and let client A know). If cancelled, nothing should happen.</p><p>Chat with a contact (or more) (e.g. D) that is online. Client A opens a chat window where A can send messages to D (and vice versa). Server S sends both clients (e.g. A and D) the contact list that both have in common.</p><p>Either A or D add a third client E to the chat (E is common to A and D). Server S sends E the chat history for that particular session.</p><p>Log out. Server S notifies other online users that have A in their contact list that A is now offline (the other user’s client displays A status accordingly).</p><p>Note that the above description left out some details; for example, when A is chatting with D And somehow D goes offline, should A’s client close the chat window? In such unspecified cases, you are given the degree of freedom to creatively decide how your solution should behave.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><p>In this phase, you are to write use case realizations, create class and state diagrams for your server and client apps. The goal of your architecture design is to increase/benefit coupling and cohesion, and non functional requirements like. Here is the list of artifact expected in your design:</p><p>Elaborate a detailed Use Case Realization for the Use Cases “Add a new contact” and “Log out”.</p><p>Class Diagrams for your solution that follows the MVC architecture with interfaces, delegates, and patterns as appropriate. Note that your class diagram should include classes (whose objects will be de/serialized) for client/server communication. You can submit your diagrams as PDF files generated form a computer program (e.g. Visio), or scanned if you create nice and CLEAR drawings.<br>State Diagrams for the controllers in your MVC.</p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>In this phase, you are to implement the client and the server apps that fulfill all the functional requirements described in the Use Cases. If you have made some revisions on your diagrams, submit the revised class and state diagrams along with your implementation.</p><h4 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h4><p>Design<br>Your submissions should consist of PDF documents named TeamN-FP-DesignName.PDF, where N is your team number, and DesignName can be “UCR” for use case realization, “CD” for class diagram, or “SD” for state diagram.</p><h4 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h4><p>VS projects, C# code, and other files should be submitted using your GitHub account. Each team member must upload to GitHub his or her team solution.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业是用C#来写一个Server/Client架构的IM通信工具，本质上就是一个网络编程加业务逻辑堆叠的产物。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="MVC" scheme="https://tk1307993.coding.me/tags/MVC/"/>
    
  </entry>
  
</feed>
