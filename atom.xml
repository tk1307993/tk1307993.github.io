<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2020-08-26T10:04:10.231Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python代写：DE2-Software-Information-System</title>
    <link href="https://tk1307993.coding.me/DE2-Software-Information-System.html"/>
    <id>https://tk1307993.coding.me/DE2-Software-Information-System.html</id>
    <published>2020-08-26T03:32:12.000Z</published>
    <updated>2020-08-26T10:04:10.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Individual-assignment-brief"><a href="#Individual-assignment-brief" class="headerlink" title="Individual assignment brief"></a>Individual assignment brief</h3><h4 id="Individual-assignment-description"><a href="#Individual-assignment-description" class="headerlink" title="Individual assignment description"></a>Individual assignment description</h4><p>The individual assignment for Computing 2 is intended to test your ability to create a complete software solution from scratch based on an initial specification.</p><p>Your task is to design and implement a complete software information system, capable of storing and processing information about a particular topic (domain). The topic for each individual assignment will be chosen by each student and can be anything, such as: books in a library, movies in a cinema, products in a shop, etc. Each student must have a unique topic, i.e. there can be no duplicate topics!</p><p>Please read carefully the initial requirements specification given below for the software information system you need to build. You will need to expand and adapt these to the particular topic you have chosen. To be successful at this assignment, you need to follow the best practices in software systems design and software project management and to implement all necessary modules of the system.</p><h4 id="Requirements-specification"><a href="#Requirements-specification" class="headerlink" title="Requirements specification"></a>Requirements specification</h4><p>This is the initial requirements specification for the software information system:</p><ol><li>Provide a way to input new data in the system (e.g. register new books).</li><li>Provide a storage back-end using one or more of the data structures we studied in Computing 2 (e.g. binary search trees, hash tables, etc.).</li><li>Provide a way to save the data from memory into an external file.</li><li>Provide a way to load the data from an external file into memory.</li><li>Provide an interface for visualization of the data (could be just printed on the console).</li><li>Provide a way to search through the data by inputting a key.</li><li>Provide a way to sort the data by some key.</li><li>Provide a way to organize the data in a suitable way (e.g. group the data in categories, genres, etc.)</li><li>Provide a way to calculate statistics on the data, such as calculating mean values, finding min and max values, etc.</li><li>Provide data verification and user fool-proofing, e.g. by detecting wrong input and asking to re-enter the input, rather than crashing with an error.</li></ol><h4 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h4><p>This individual assignment accounts for 30% of the final grade for Computing 2.</p><p>It is due in Week 11;</p>]]></content>
    
    <summary type="html">
    
      代写一个信息系统，需要用到数据结构中的binary search tree, hash tables等等。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS1070-Game-of-Life</title>
    <link href="https://tk1307993.coding.me/CS1070-Game-of-Life.html"/>
    <id>https://tk1307993.coding.me/CS1070-Game-of-Life.html</id>
    <published>2020-08-23T03:32:12.000Z</published>
    <updated>2020-08-23T00:44:47.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Design the Game of Life (Chapter 7, Programming Project13) using classes. You will look up the rules of the game from the textbook, but ALL implementation detail listed here MUST be followed.</p><p>Use SFML for your Graphical User Interface. const int MAX = 80; This is the size of the grid.</p><p>You will need a Grid class:</p><p>private member variable: A two dimensional array (MAX byMAX) of integers that will be used to store the live cells.</p><p>You will need at least the following functions:</p><ul><li>Grid() Constructor that will initialize your private member variable.</li><li>SetAlive(i, j) and Kill(i, j) that will be used as mutators for the class.</li><li>IsAlive(i, j) is a boolean function that will tell you if a cell is alive or dead.</li><li>CountNeighbors(i, j) is an integer function that will tell you the number of alive cells for a given cell.</li><li>PopulateRandom(r) is a function that will add r live cells to your grid in random locations.</li><li>Clear() Will clear the grid.</li><li>Save(char leName[]) will save the current conguration of the grid into a text le.</li><li>Load(char leName[]) will load the saved conguration from a text le.</li><li>Step() is a function that will generate the next generation on the grid.</li><li>Show() will print the grid on the screen.</li></ul><p>The user will be given the following options to control the program:</p><ul><li>Clear: To clear the grid</li><li>Random: to place 50 random live cells on the grid</li><li>Step: To generate the next generation.</li><li>Go: To generate generation after generation without stopping for input.</li><li>Save: To Save current conguration.</li><li>Load: To load a saved conguration.</li></ul><p>A text panel on the right side of the grid will give information about the number of live cells, the number of generations since the start of the program, name of the e the conguration is being saved, etc.</p><p>Once you have implemented these features, you might want to start working on giving the user the ability to turn individual cells on and off and other features like speed, user selectable le names, etc.</p><h3 id="You-will-submit"><a href="#You-will-submit" class="headerlink" title="You will submit"></a>You will submit</h3><ul><li>FULLY COMMENTED code.</li><li>a header le named notes.h that explains in detail the features of your program and how they were implemented. What things you had to consider. What math, physics you had to use. Everything a reviewer should know when they are looking at your program. This is not an easy task and is very time consuming. Do not rush this!</li><li>a video (screen capture) where you play your project. Talk about what it does. Once again, go over the challenges you had to overcome and how you did that. After a person listens to your video, they should have a feeling they understand your program.</li></ul><p>Upload the link to Youtube and paste the link in the assignment page. You can try to upload a copy to Canvas, but I don’t promise this will work.</p>]]></content>
    
    <summary type="html">
    
      使用三方库SFML作为GUI，代写Game of Life这个游戏。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS112-Analytical-Problems</title>
    <link href="https://tk1307993.coding.me/CS112-Analytical-Problems.html"/>
    <id>https://tk1307993.coding.me/CS112-Analytical-Problems.html</id>
    <published>2020-08-21T03:32:12.000Z</published>
    <updated>2020-08-21T01:27:20.930Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This homework has two parts: in Part A you will write up answers to analytical problems related to the lectures in the past week, both to confirm and extend your understanding of the abstract principles discussed; in Part B you will write code to implement this understanding, and to practice your Java coding skills. I suggest you read this whole assignment carefully and for Part B, it is definitely worth thinking about your solution for a bit before launching Dr. Java and beginning to type. In addition to the requirements for the Java problems, you must observe the following requirements (for all homework submitted in this course):</p><ul><li>All programs should be literate, i.e., easily understandable by a human (say, your grader) and follow the Java Style Guidelines for CS112 posted on the class web site;</li><li>All files for this homework should be submitted using WebSubmit, following the instructions on the class web site;</li><li>You may not use data structure libraries such as ArrayList, since we are learning to write Java from the ground up and you must learn how these libraries are built; however, you are free to use (unless specifically directed otherwise) the basic libraries String, Character, Scanner, and Math;</li><li>You may freely use code from the class web site, the textbook, or lecture (unless specifically directed otherwise) as long as you cite the source in your comments; but you may NEVER use code from the web or other students’ programs—this will be considered plagiarism and penalized accordingly.</li></ul><h3 id="Part-A-Analytical-Problems"><a href="#Part-A-Analytical-Problems" class="headerlink" title="Part A: Analytical Problems"></a>Part A: Analytical Problems</h3><p>In these questions we will first explore the binary heap data structure, and then consider the general problem of hashing by considering the two basic paradigms, using a simple hash function. In the first one, involving separate chaining, we will make this realistic by stored (key, value) pairs; the hash function is applied to the key alone, but the entire pair is stored in the node. For the second, involving linear probing, we will simply store the key in the array slot.</p><p>Write your solutions in a file hw11.txt, hw11.pdf, hw11.rtf, etc. and submit by the due date and time.</p><ol><li><p>Insert the following sequence of keys into an intially empty 2-3 tree. You should write all the trees down as you do the transformations (this is what would be expected on an exam) but for the purposes of grading this exercise you can just draw the final tree that results.</p></li><li><p>Consider the following 2-3 tree:<br>Suppose we count ONLY comparisons between two keys, and NOT checks to see if the key exists, or checks to see if a pointer is null. (i) How many comparisons would necessary to find the key 10? (ii) How about 140? (iii) How about 60? (iv) Which key(s) occurring at leaf nodes would require a minimum number of comparisons? State which and how many comparisons. (v) Which key(s) would require a maximum number of comparisons? State which and how many comparisons. (vi) What is the average number of comparisons to find the keys in this tree (count for all and then divide by the size of the tree).</p></li><li><p>Insert the following keys into a binary heap, showing the structure of the tree (draw them sides as in the homeworks, or some other way) and the contents of the array A at the indicated points. At the end, give the values of the indicated variables.</p></li><li><p>Let us consider using a hash table for a symbol table storing (key, value) pairs, where the key is used as input to the hash function. Insert the following key-value pairs into a hash table implemented with the technique of separate chaining with an array H of size 7. For each insertion, use the hash function hash(x) = (3 * x % 7) on the key part and store the pair in the bucket at H[ hash(key )]. Assume nodes are defined as class Node{ int key; String value; Node next; }.</p></li></ol><ul><li>A. Show the hash table after all insertions are performed. What is the worst-case lookup time (in the number of comparisons), and what is the average-case lookup (average the number of comparisons over all keys in the table)?</li><li>B. Perform the following operations on the table from (a) and show the table that would result</li><li>C. What is the worst-case lookup and what is the average-case lookup for keys in the table that resulted from part (b)?</li><li>D. Give a sequence of keys (just the keys, not pairs) that would all hash to the same location for a table of size 7, creating a worst-case hash table (i.e., start with an empty table, and create a linked list worst-case table).</li><li>E. If we insert M keys into a hash table with N buckets, creating a worst-case table, what is the worst case time for looking up a key? Express in terms of N and M, using Theta(…) notation.</li><li>F. If we insert M keys into a hash table with N buckets, suppose the hash table arranges itself in the best possible way, what is the worst-case lookup? Express in terms of N and M, using Theta(…) notation.</li></ul><ol start="5"><li>Suppose now we have a hash table L using the strategy of linear probing, which just stores integer keys (not key-value pairs). The size of the array is N = 11 and the hash function is hash(k) = 3*k%11. Consider the following series of insertions.</li></ol><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><p>We will be grading this using a grading client that builds an ArticleTable as in the main method of your MiniGoogle, and then calls phraseSearch(…) for various test cases.</p><p>You should develop your code as an interactive program which uses Minipedia as a basis to create the program MiniGoogle, and make sure that it performs as you expect.</p>]]></content>
    
    <summary type="html">
    
      代写Java数据结构作业，作业分为两部分，上半部分的理论知识以及下半部分的编程设计。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP10001-Finding-Primes</title>
    <link href="https://tk1307993.coding.me/COMP10001-Finding-Primes.html"/>
    <id>https://tk1307993.coding.me/COMP10001-Finding-Primes.html</id>
    <published>2020-08-16T03:32:12.000Z</published>
    <updated>2020-08-16T02:16:36.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>In lectures we have discussed that the best way to learn computer programming and problem solving is to get hands on and solve problems. In the labs you have investigated creating user defined modules, data validation, and the list data structure. The following problems require you to apply the define, design, implement and test approach to problem solving.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><ol><li>This assignment is individual work. Groups and sharing are not permitted.</li><li>All source code submitted as part of this assignment must contain a statement of authorship or a grade of 0 will be awarded for the entire problem.</li><li>You will be submitting several source code files as well as an assignment report.</li><li>Your assignment report must contain a title page which includes the title of the assignment, your name, student number, your professor’s name, the date, and a statement of authorship.</li><li>Each problem requires evidence of the DDIT approach: an IPO chart, pseudocode or flow chart and testing traces. You may include pseudocode in your Python solutions as comments but you should make a copy of this in your report as well, do not use a screen shot.</li><li>Each implementation must use the style rules defined in labs 1-3.</li><li>For testing your code and for generating your debug traces from implementation testing you may find it convenient to use the command line technique demonstrated in Lab 01.</li></ol><h3 id="Problem-1-Finding-Primes"><a href="#Problem-1-Finding-Primes" class="headerlink" title="Problem 1: Finding Primes"></a>Problem 1: Finding Primes</h3><h4 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h4><p>An ancient algorithm for finding prime numbers is called the Sieve of Eratosthenes. You start with a list of numbers, pick the first and cross out all the multiples of that number in your list. If you start your list at 2 then your first step is to cross out 4, 6, 8, … Then you would pick 3 and cross out 9, 15, … Notice that 6 and 12 were already crossed out because they’re multiples of 2. You then pick 5 because 4 was already crossed out … the first number you cross out is 25! Everything else was already crossed out when you checked 2 or 3. Once you have gone over your entire list whatever numbers remain are prime numbers. After your program creates the list of prime numbers print it out.</p><p>Table 1 shows the values for all primes lower than 30. First we created a list of all numbers from 1-30. Then we eliminated all the ones divisible by 2, shown in green. Next we eliminated all the ones divisible by 3 shown in orange - notice that 12, 18, and 30 were previously eliminated. Next we eliminated anything left that was divisible by 5: only 25 was still in the list. The final list is [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29].</p><ol><li>Ask the user to input a number larger than 2. Validate the input according to the slides definition of data validation. Call this validated number n.</li><li>Create a list of consecutive integers from 2 through n: (2, 3, 4, …, n).</li><li>Create a variable called current that will initially be set to 2.</li><li>For each element in the list, go through the list you created one element at a time. If an element is a multiple of current remove it from the list.</li><li>After you have eliminated all the multiples of current from your list update current to the value of the next highest element of the list.</li><li>While current is less than n repeat steps 4 and 5.</li></ol><p>Note: This problem is difficult to work through if you try to work through it entirely in your head. If you use the techniques that have been presented in this course you can solve this problem. To successfully complete this task consider whether you should use 2 for loops nested inside one another. Take the basic algorithm and try writing out a trace. Simple solutions exist that are less than 20 lines long but it’s ok if yours is longer.</p><p>Your solution to this problem must be accompanied by an IPO chart, a flow chart, and trace information for a value other than 10. The trace must match YOUR flow chart.</p><h4 id="Grading-Scheme-and-Other-Requirements"><a href="#Grading-Scheme-and-Other-Requirements" class="headerlink" title="Grading Scheme and Other Requirements"></a>Grading Scheme and Other Requirements</h4><p>To be eligible for grading your solution must be named primes.py and must contain a statement of authorship.</p><h3 id="Problem-2-Ordering-at-McThoseguys"><a href="#Problem-2-Ordering-at-McThoseguys" class="headerlink" title="Problem 2: Ordering at McThoseguys"></a>Problem 2: Ordering at McThoseguys</h3><h4 id="Problem-Statement-1"><a href="#Problem-Statement-1" class="headerlink" title="Problem Statement"></a>Problem Statement</h4><p>For this problem you should create a definition, a design, testing evidence, and implementation for each module you are asked to create. If you attempt to solve this problem without first creating a flow chart then you should expect great difficulty.<br>The local fast food restaurant, McThoseguys, has started using a computerized order input system for food order taking. You have the job of creating the system which when run asks for the person’s name, greets them and then allows them to pick from several options. Before greeting the person by name the system needs to check if the name that was entered is on the “dirty name” list. If it is on the list then instead of greeting the person ask them to re-enter their name until they enter something that is not on the “dirty name” list. The “dirty name” list is defined below.</p><p>In order to build their meal the user has to make several choices. The choices should be presented as a menu in order to minimize the amount of typing the user has to do. See the sample output in section 4.2 for the formatting. First the user will pick their sandwich wrapper. Next they have a protein selection. After choosing a protein they can pick toppings. Finally they may pick a sandwich sauce. Note that they should be allowed to pick only 1 wrapper, 1 protein, [1-3] toppings which may include repeats, for example choosing cheese two times means double cheese and is allowed, and and 0 or 1 sauce.</p><ul><li>McThoseguys’ list of dirty names is: mud, dirt, dust, booger, diaper</li><li>Sneaky users will try to use capitalization to avoid matches, check the names case insensitively</li><li>Make sure that the dirty names do not appear within the given name; Muddy Mike is not allowed</li><li>The available wrappers are sesame seed bun or soft tortilla shell</li><li>The available protein choices are chicken, beef, or tofu</li><li>The available toppings are tomato, lettuce, pickles, cheese, and onions</li><li>The available sauces are ketchup, mayonaise, and McCalorie Secret Sauce</li></ul><p>Your solution must create a menu module which accepts a list of choices and the minimum and maximum number of choices allowed as parameters and returns a list to your main program. For example you might choose to create the module as def menuModule( choiceList, minimumChoices, maximumChoices) or in some other manner. Your module must not contain any logic or values from the rest of the problem, for example you may not code in questions that refer to toppings or sauces, the module must be completely generic and would work equally well if I started asking the user for car parts. The module should label each menu option with a single character, of your choice, and loop until the required number of acceptable choices has been input. You must validate that the choices input are correct and display an error message for any incorrect choices. After the user has completed their order you should confirm it by displaying the choices to the user along with a simple yes/no prompt, which you will test as a case insensitive string. You do NOT need to repeat the program if they choose “no”.</p><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>Name selection sample:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What <span class="keyword">is</span> your <span class="built_in">name</span>? Joe Dirt</span><br><span class="line">I'm sorry, <span class="keyword">that</span> <span class="built_in">name</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">at</span> McThoseguys.</span><br><span class="line">What <span class="keyword">is</span> your <span class="built_in">name</span>? Filthy McMuddy</span><br><span class="line">I'm sorry, <span class="keyword">that</span> <span class="built_in">name</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">at</span> McThoseguys.</span><br><span class="line">What <span class="keyword">is</span> your <span class="built_in">name</span>? There are those who call <span class="keyword">me</span> ... Tim</span><br><span class="line">Hello There are those who call <span class="keyword">me</span> ... Tim, welcome <span class="keyword">to</span> McThoseguys!</span><br></pre></td></tr></table></figure></p><p>Choosing a wrapper without error sample:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">What would you like <span class="keyword">as</span> your sandwich wrapper?</span><br><span class="line">[<span class="meta">1</span>]sesame seed bun</span><br><span class="line">[<span class="meta">2</span>]soft tortilla shell</span><br><span class="line"></span><br><span class="line">What <span class="keyword">is</span> your choice? <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>Choosing a protein with error sample:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">What would you like <span class="keyword">as</span> your protein choice?</span><br><span class="line">[<span class="meta">1</span>]chicken</span><br><span class="line">[<span class="meta">2</span>]beef</span><br><span class="line">[<span class="meta">3</span>]tofu</span><br><span class="line"></span><br><span class="line">What <span class="keyword">is</span> your choice? <span class="number">4</span></span><br><span class="line">I<span class="string">'m sorry, that isn'</span>t a valid choice, please <span class="keyword">try</span> again.</span><br><span class="line">[<span class="meta">1</span>]chicken</span><br><span class="line">[<span class="meta">2</span>]beef</span><br><span class="line">[<span class="meta">3</span>]tofu</span><br><span class="line"></span><br><span class="line">What <span class="keyword">is</span> your choice? <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>Choosing double onions as toppings sample:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">What would you like as your topping choice (pick <span class="number">1</span><span class="number">-3</span> items)?</span><br><span class="line">[<span class="number">1</span>]tomato</span><br><span class="line">[<span class="number">2</span>]lettuce</span><br><span class="line">[<span class="number">3</span>]pickles</span><br><span class="line">[<span class="number">4</span>]cheese</span><br><span class="line">[<span class="number">5</span>]onions</span><br><span class="line"></span><br><span class="line">What is your choice or enter q to quit? q</span><br><span class="line">I'm sorry, you must choose at least <span class="number">1</span> option(s).</span><br><span class="line">[<span class="number">1</span>]tomato</span><br><span class="line">[<span class="number">2</span>]lettuce</span><br><span class="line">[<span class="number">3</span>]pickles</span><br><span class="line">[<span class="number">4</span>]cheese</span><br><span class="line">[<span class="number">5</span>]onions</span><br><span class="line"></span><br><span class="line">What is your choice or enter q to quit? <span class="number">5</span></span><br><span class="line">[<span class="number">1</span>]tomato</span><br><span class="line">[<span class="number">2</span>]lettuce</span><br><span class="line">[<span class="number">3</span>]pickles</span><br><span class="line">[<span class="number">4</span>]cheese</span><br><span class="line">[<span class="number">5</span>]onions</span><br><span class="line"></span><br><span class="line">What is your choice or enter q to quit? <span class="number">5</span></span><br><span class="line">[<span class="number">1</span>]tomato</span><br><span class="line">[<span class="number">2</span>]lettuce</span><br><span class="line">[<span class="number">3</span>]pickles</span><br><span class="line">[<span class="number">4</span>]cheese</span><br><span class="line">[<span class="number">5</span>]onions</span><br><span class="line"></span><br><span class="line">What is your choice or enter q to quit? q</span><br></pre></td></tr></table></figure></p><p>Choosing “no sauce” sample:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What would you like as a sauce?</span><br><span class="line">[1]ketchup</span><br><span class="line">[2]mayonaise</span><br><span class="line">[3]McCalorie<span class="built_in"> Secret </span>Sauce</span><br><span class="line"></span><br><span class="line">What is your choice <span class="keyword">or</span> enter q <span class="keyword">to</span> quit? q</span><br></pre></td></tr></table></figure></p><p>Different user confirmation samples:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">There</span> <span class="string">are</span> <span class="string">those</span> <span class="string">who</span> <span class="string">call</span> <span class="string">me</span> <span class="string">...</span> <span class="string">Tim,</span> <span class="string">you</span> <span class="string">have</span> <span class="string">chosen</span> <span class="string">a</span> <span class="string">chicken</span> <span class="string">sandwich</span> <span class="string">on</span> <span class="string">a</span> <span class="string">soft</span> <span class="string">tortilla</span> <span class="string">shell,</span> <span class="string">with</span> <span class="string">onions,</span> <span class="string">onions,</span> <span class="string">and</span> <span class="literal">no</span> <span class="string">sauce.</span></span><br><span class="line"></span><br><span class="line"><span class="string">Is</span> <span class="string">this</span> <span class="string">correct,</span> <span class="literal">yes</span> <span class="string">or</span> <span class="literal">no</span><span class="string">?</span> <span class="literal">no</span></span><br><span class="line"><span class="string">Sorry,</span> <span class="string">let's</span> <span class="string">try</span> <span class="string">again</span> <span class="string">from</span> <span class="string">scratch.</span></span><br><span class="line"></span><br><span class="line"><span class="string">There</span> <span class="string">are</span> <span class="string">those</span> <span class="string">who</span> <span class="string">call</span> <span class="string">me</span> <span class="string">...</span> <span class="string">Tim,</span> <span class="string">you</span> <span class="string">have</span> <span class="string">chosen</span> <span class="string">a</span> <span class="string">chicken</span> <span class="string">sandwich</span> <span class="string">on</span> <span class="string">a</span> <span class="string">soft</span> <span class="string">tortilla</span> <span class="string">shell,</span> <span class="string">with</span> <span class="string">onions,</span> <span class="string">onions,</span> <span class="string">and</span> <span class="literal">no</span> <span class="string">sauce.</span></span><br><span class="line"></span><br><span class="line"><span class="string">Is</span> <span class="string">this</span> <span class="string">correct,</span> <span class="literal">yes</span> <span class="string">or</span> <span class="literal">no</span><span class="string">?</span> <span class="string">maybe</span></span><br><span class="line"><span class="string">Please</span> <span class="string">enter</span> <span class="literal">yes</span> <span class="string">or</span> <span class="literal">no</span>.</span><br><span class="line"></span><br><span class="line"><span class="string">There</span> <span class="string">are</span> <span class="string">those</span> <span class="string">who</span> <span class="string">call</span> <span class="string">me</span> <span class="string">...</span> <span class="string">Tim,</span> <span class="string">you</span> <span class="string">have</span> <span class="string">chosen</span> <span class="string">a</span> <span class="string">chicken</span> <span class="string">sandwich</span> <span class="string">on</span> <span class="string">a</span> <span class="string">soft</span> <span class="string">tortilla</span> <span class="string">shell,</span> <span class="string">with</span> <span class="string">onions,</span> <span class="string">onions,</span> <span class="string">and</span> <span class="literal">no</span> <span class="string">sauce.</span></span><br><span class="line"></span><br><span class="line"><span class="string">Is</span> <span class="string">this</span> <span class="string">correct,</span> <span class="literal">yes</span> <span class="string">or</span> <span class="literal">no</span><span class="string">?</span> <span class="literal">yEs</span></span><br><span class="line"><span class="string">Thank</span> <span class="string">you</span> <span class="string">for</span> <span class="string">shopping</span> <span class="string">at</span> <span class="string">McThoseguys!</span> <span class="string">Enjoy</span> <span class="string">your</span> <span class="string">food!</span></span><br></pre></td></tr></table></figure></p><h3 id="Grading-Scheme-and-Other-Requirements-1"><a href="#Grading-Scheme-and-Other-Requirements-1" class="headerlink" title="Grading Scheme and Other Requirements"></a>Grading Scheme and Other Requirements</h3><p>To be eligible for grading your solution must be named mcThoseguys.py and must contain a statement of authorship.</p>]]></content>
    
    <summary type="html">
    
      代写Python基础作业，写一个程序来对质数进行查找。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CEGEG082-Point-in-Polygon</title>
    <link href="https://tk1307993.coding.me/CEGEG082-Point-in-Polygon.html"/>
    <id>https://tk1307993.coding.me/CEGEG082-Point-in-Polygon.html</id>
    <published>2020-08-10T03:32:12.000Z</published>
    <updated>2020-08-10T02:42:17.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-Coursework-Point-in-Polygon"><a href="#Python-Coursework-Point-in-Polygon" class="headerlink" title="Python Coursework: Point in Polygon"></a>Python Coursework: Point in Polygon</h3><p>In this coursework you will apply your programming knowledge to the practical problem of determining whether a point lies inside or outside a polygon, which is a fundamental operation of a GISystem. Your work will build upon the point, polygon and geometry examples that were introduced in the practical sessions and assignments. The point in polygon (PIP) problem is illustrated in figure 1. In the picture, the green area represents a polygon. The red points lie outside the polygon and the blue points lie inside. Visually, this is easy to see, however, it is not so straightforward to determine this computationally.<br>The procedure for PIP that you will use involves two steps:</p><ol><li>Test if the point is inside the minimum bounding rectangle of the polygon.</li><li>If it is, use a PIP algorithm to test whether the point is inside the polygon.<br>These steps are introduced in turn in the following sections.</li></ol><h3 id="Minimum-bounding-rectangle"><a href="#Minimum-bounding-rectangle" class="headerlink" title="Minimum bounding rectangle"></a>Minimum bounding rectangle</h3><p>PIP is a computationally intensive operation. Therefore, it is common to first get the minimum bounding rectangle (MBR, alternatively minimum bounding box) of a polygon and test whether the point lies inside this rectangle. For the purposes of this assignment, the MBR can be found by simply taking the minimum and maximum x and y coordinates of a polygon (a smaller rectangle may be found by rotating the coordinate system). If a given point lies outside this rectangle, then it is definitely outside the polygon and there is no need to proceed to the full PIP algorithm. This is shown graphically in figure 2, where the red box is the MBR.</p><p>It can be seen that the MBR correctly identifies the red point as outside the polygon, but incorrectly identifies one of the blue points as inside. Therefore, it is necessary to use a more sophisticated algorithm to determine whether the blue points do indeed lie inside the polygon.</p><h3 id="The-point-in-polygon-algorithm"><a href="#The-point-in-polygon-algorithm" class="headerlink" title="The point in polygon algorithm"></a>The point in polygon algorithm</h3><p>There are two commonly used PIP algorithms; the ray casting algorithm and the winding number algorithm. The ray casting algorithm is introduced here as it is conceptually simpler, but you are free to use the winding number algorithm in your submission if you wish.</p><h3 id="The-ray-casting-algorithm"><a href="#The-ray-casting-algorithm" class="headerlink" title="The ray casting algorithm"></a>The ray casting algorithm</h3><p>The ray casting algorithm involves drawing a straight line in any direction from the test point, and counting how many times it crosses the boundary of the polygon. If the line crosses the boundary an odd number of times then the point lies inside the polygon. If the line crosses the boundary an even number of times then the point lies outside the polygon. This is depicted graphically in figure 3.</p><h3 id="Special-case"><a href="#Special-case" class="headerlink" title="Special case"></a>Special case</h3><p>There is a situation where the ray casting algorithm may produce inconsistent results. If the ray passes through a vertex (point) on the polygon boundary, it will count as crossing the boundary twice. The problem with this is shown graphically in figure 4.<br>The top ray passes through the vertex and two crosses are counted. However, the ray continues inside the polygon, and when it passes out again, the algorithm wrongly identifies the point as inside. The bottom ray, again, passes through the vertex and two crosses are counted, however, it continues outside the polygon and the point is correctly identified as outside.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>To complete this coursework, you will build on the point, polygon and geometry classes that you created in the fourth Python tutorial. Your task is to create a Python script that does the following:</p><ol><li>Reads in a list of x, y coordinates from a .csv file and creates a polygon object from them.</li><li>Creates a point object for testing.</li><li>Tests whether the point is inside the polygon and returns “Inside” or “Outside”.</li><li>Plots the point and polygon in a plot window.</li></ol><p>Your control flow for step three may be something like this (note that this is pseudocode and is not intended to be run in Python):<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> point is <span class="keyword">not</span> <span class="keyword">in</span> MBR:  # Test <span class="keyword">if</span> the point is inside the MBR</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"Outside"</span> # <span class="builtin-name">Print</span> outside <span class="keyword">if</span> <span class="literal">True</span></span><br><span class="line">elif point is <span class="keyword">in</span> polygon: # Test <span class="keyword">if</span> point is inside polygon using the ray casting algorithm</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"Inside"</span> # <span class="builtin-name">Print</span> inside <span class="keyword">if</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"Outside"</span> # <span class="builtin-name">Print</span> outside <span class="keyword">if</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>You will get additional marks if you make your code object oriented. As an example, you may notice from the pseudocode above that the PIP operation involves checking the MBR and then running the ray casting algorithm in separate steps. Although the MBR is used in the PIP operation, it may have other uses outside PIP, and therefore should be accessible without running the PIP operation directly. Similarly, there may be other uses for the ray casting algorithm other than PIP. You should try and implement this kind of thinking throughout your code as much as possible.</p><p>There is a wealth of information on how to implement the PIP algorithm online. You are free to adapt code from online sources to work with your data and classes. If you do, any code you use should be referenced in the comments of your code with a URL and author and date (if available). Do not simply copy and paste code verbatim.</p>]]></content>
    
    <summary type="html">
    
      代写Graphics相关算法，判断二维平面上的点，是否属于某个Polygon中。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSC2023-Truck-Loading-Problem</title>
    <link href="https://tk1307993.coding.me/CSC2023-Truck-Loading-Problem.html"/>
    <id>https://tk1307993.coding.me/CSC2023-Truck-Loading-Problem.html</id>
    <published>2020-08-08T03:32:12.000Z</published>
    <updated>2020-08-08T01:12:11.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Aim"><a href="#Aim" class="headerlink" title="Aim"></a>Aim</h3><ul><li>To assess student ability to develop new algorithms following the principles of a chosen Algorithm Design Technique.</li><li>To strengthen student understanding of the Greedy technique for designing algorithms.</li><li>To provide experience of evaluating and comparing different algorithms.</li></ul><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p>Consider the following variation of the Bin Packing Problem, called the Truck Loading Problem (TLP).<br>We have an unlimited supply of two dimensional trucks, each truck having a width of W and a height of H. We also have n two dimensional boxes, with widths w1,w2,…,wn and heights h1,h2,…,hn. The problem is to load these boxes onto possibly smallest number of trucks under the following rules:</p><ul><li>A. A box is placed either at the bottom of a truck (starting a new pile), or on top of another box of equal or greater width.</li><li>B. At most one box is placed directly on top of any box.</li><li>C. The total height of any pile of boxes does not exceed H.</li><li>D. The number of boxes placed in a truck cannot exceed L (where L is given).<br>Moreover, it is not allowed to rotate boxes, the sides of the boxes must be parallel to the sides of the trucks, and once a box has been placed inside a truck it cannot be moved.</li></ul><h3 id="Tasks-to-be-implemented-in-the-Java-programming-language"><a href="#Tasks-to-be-implemented-in-the-Java-programming-language" class="headerlink" title="Tasks (to be implemented in the Java programming language)"></a>Tasks (to be implemented in the Java programming language)</h3><p>(1) Design and document using pseudo code the following two Greedy algorithms for solving TLP:</p><ul><li>NFTLP: based on next fit on-line strategy for solving Bin Packing Problem.</li><li>FFTLP: based on first fit on-line strategy for solving Bin Packing Problem.<br>This strategy attempts to select the first bin which currently has sufficient space to pack an item.</li></ul><p>(2) Design and implement data structures representing all the boxes and trucks, and provide output functions for displaying the contents of your data structures.</p><p>(3) Devise and implement methods for generating suitable sequences of integers which can then be used for measuring performance of the two algorithms. The test data should represent sequences of boxes (all test data for performance analysis must be generated within your program).</p><p>(4) Implement the two algorithms (NFTLP and FFTLP).</p><p>(5) Implement two ways of measuring the performance of the two algorithms, one based on timing their runs and the other on counting the number of trucks used for loading the boxes. Carry out measurements and comment on the results you obtained. For example, you might conclude that NFTLP is on average 25% faster than FFTLP, but it needs 20% more trucks.</p><h3 id="Marking-Scheme"><a href="#Marking-Scheme" class="headerlink" title="Marking Scheme"></a>Marking Scheme</h3><p>The completed assignment must be submitted to NESS in a single .zip file.<br>Your submission should include the following:</p><ul><li>A short report, giving a description of the implementation, testing and measurements made. This does not need to be a Maintenance Manual, but should explain the overall organisation of the program, the pseudo code for the proposed algorithms, and the description of data structures used.</li><li>The tabulated results with graphical summaries of the overall comparisons.</li><li>Comments on the results that you have obtained.</li><li>Source code.</li></ul>]]></content>
    
    <summary type="html">
    
      代写Greedy Algorithm，也就是贪心算法，解决货车最大装载的问题。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CSCI1200-Word-Frequency-Maps</title>
    <link href="https://tk1307993.coding.me/CSCI1200-Word-Frequency-Maps.html"/>
    <id>https://tk1307993.coding.me/CSCI1200-Word-Frequency-Maps.html</id>
    <published>2020-08-06T03:32:12.000Z</published>
    <updated>2020-08-06T03:36:01.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this homework assignment, we will analyze the frequency and sequencing of words in sentences in samples of English text. Then we will generate new sequences of strings that mimic these statistics and present these sequences as computer-generated text. The key idea is that if particular words often appear together in the sample text, then it is likely that stringing together these common pairs of words will form plausible phrases or sentences. This statistical model is called a Markov chain. By using STL’s associative container (map) we can make this system efficient and elegant. Please carefully read the entire assignment before beginning your implementation.</p><p>As an example, let’s consider the text of the Brothers Grimm fairy tale Hansel and Gretel, available from Project Gutenberg <a href="http://www.gutenberg.org/" target="_blank" rel="noopener">http://www.gutenberg.org/</a>. In this text (translated from the original German to English), the word “could” appears 5 times. 2 of those times it is immediately followed by “not” and the other 3 times it is followed by “be”, “get”, and “no” (once each). If we start a phrase or sentence with the word “could”, a good guess for the second word is “not”. The statistics of the word “not” tell us it appears 26 times. 3 of those times it is followed by “find” (more often than any other word), so we choose “find” as our third word. Then we look up the statistics for “find”, etc. This process yields a plausible phrase “could not find the forest”, which in fact does not appear in the original text!</p><p>This general strategy has been used to generate plausible (but often nonsensical) sentences. Here’s a famous example written by Mark V. Shaney (a computer program written by Bruce Ellis):<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"I spent an interesting evening recently with a grain of salt."</span></span><br></pre></td></tr></table></figure></p><h4 id="Using-an-STL-map-to-Store-the-Word-Frequency-amp-Sequencing"><a href="#Using-an-STL-map-to-Store-the-Word-Frequency-amp-Sequencing" class="headerlink" title="Using an STL map to Store the Word Frequency &amp; Sequencing"></a>Using an STL map to Store the Word Frequency &amp; Sequencing</h4><p>As we process the sample text we’ll keep track of all the words we have seen, and for each word we’ll keep track of all the words that immediately followed that word, and the number of times each pair of words appeared together. We will use maps to store this information.</p><p>The picture at the right represents the map structure created when the text below is read into the data variable using the LoadSampleText function.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">see spot <span class="keyword">run</span><span class="bash"></span></span><br><span class="line"><span class="bash">see jane</span></span><br><span class="line"><span class="bash">see jane run</span></span><br></pre></td></tr></table></figure></p><p>What is the type of the data variable suggested by this example and diagram? Hint: there are two maps!</p><p>How will you process and store the long sequence of words from the sample text into this structure? Note:<br>We treat the input as one big run-on sentence. We provide some code that will help you parse large input files (like the plain text books available from Project Gutenberg) and ignore punctuation and capitalization.</p><h4 id="Next-Word-Prediction"><a href="#Next-Word-Prediction" class="headerlink" title="Next Word Prediction"></a>Next Word Prediction</h4><p>Once the sample text is stored into the data variable, your next task will be to implement the NextWord function. Given the last word in the current sequence, this function will use the statistics in data to select the next word for the sequence. Your function should work in two different modes: 1) selecting the most frequently observed next word or 2) selecting at random with the probabilities observed in the sample text. So using the second mode to chose the word after “could”, we will select “not” with 2/5 = 40% probability, and “be”, “get”, and “no” with 1/5 = 20% probability each.</p><h4 id="Input-Output-amp-Basic-Functionality"><a href="#Input-Output-amp-Basic-Functionality" class="headerlink" title="Input/Output &amp; Basic Functionality"></a>Input/Output &amp; Basic Functionality</h4><p>Your program should not expect any command line arguments, and will read from std::cin and write to std::cout, but you will probably find it helpful to redirect the input (&amp; output) to trick your program into reading from &amp; writing to files (see the course webpage under “Other Information”). Each line of input data begins with a keyword signaling one of four commands.</p><h4 id="load-hansel-and-gretel-txt-2-ignore-punctuation"><a href="#load-hansel-and-gretel-txt-2-ignore-punctuation" class="headerlink" title="load hansel and gretel.txt 2 ignore punctuation"></a>load hansel and gretel.txt 2 ignore punctuation</h4><p>This command loads the sample text from the specified file and stores the sequence and frequency information into the data variable map structure. The integer parameter specifies the window width over which sequencing data should be collected (to begin the assignment use window=2, but more on this later). The last parameter indicates how punctuation (and capitalization) should be handled. Implementing special parsing of punctuation and using punctuation in your word selection and output is extra credit.</p><h4 id="print-“could”"><a href="#print-“could”" class="headerlink" title="print “could”"></a>print “could”</h4><p>With this command, we query the statistics in the data variable, to learn what words were observed to follow the specified word (or phrase). The word (or phrase) will be in double quotes (allowing us to have multiple words). We provide code to help you parse this input. This query on the Hansel and Gretel data produces this output (to cout).<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">could</span> <span class="params">(<span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">could</span> <span class="title">be</span> <span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">could</span> <span class="title">get</span> <span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">could</span> <span class="title">no</span> <span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">could</span> <span class="title">not</span> <span class="params">(<span class="number">2</span>)</span></span></span><br></pre></td></tr></table></figure></p><h4 id="generate-“could”-4-most-common"><a href="#generate-“could”-4-most-common" class="headerlink" title="generate “could” 4 most common"></a>generate “could” 4 most common</h4><p>This is the more interesting command. Here we are requesting to add 4 more words to the initial word (or phrase) by selecting the highest frequency follow-on word. This command will output the phrase “could not find the forest” with the Hansel and Gretel database.</p><h4 id="generate-“could”-10-random"><a href="#generate-“could”-10-random" class="headerlink" title="generate “could” 10 random"></a>generate “could” 10 random</h4><p>And similarly, this command generates 10 words to follow “could”, but using a random draw from the observed word sequence frequencies.</p><h4 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h4><p>This command closes the program.</p><p>These commands may be entered directly from std::cin during an interactive data querying and play session, or drawn in from a file using file redirection. We encourage you to use the MersenneTwister (mtrand.h &amp; mtrand.cpp) code to generate good random numbers. To see if your program matches our output exactly (except for the randomness of course!), you may use the command line UNIX library program diff (available for Linux, MacOSX, and Cygwin), which takes two files as arguments and outputs the differences between them. WinDiff is another option for Windows users. Please see a TA or the instructor in office hours if you have a question about these programs.</p><h4 id="Expanding-the-Sequencing-Window-or-Context"><a href="#Expanding-the-Sequencing-Window-or-Context" class="headerlink" title="Expanding the Sequencing Window or Context"></a>Expanding the Sequencing Window or Context</h4><p>So far, our examples have considered only the last word in the current sequence when selecting the next word, but in fact we can usually create more realistic phrases and sentences by expanding the context or window of the sequencing probabilities. Specifically when generating the third word, let’s not just consider the second word, but let’s consider both the first and the second word. For the Hansel and Gretel input, the 2 word sequence “could not” appears just twice, followed by “get” and “see” (once each). This suggests that one of these words is perhaps a better choice for the third word than the earlier example’s selection of “find”. (Note: when we have a tie for the most frequently appearing next word, we will chose the first alphabetically, in this case “get”.) Similarly, to generate the fourth word, using window = 3, we start with the sequence “not get” and discover that the only time this subphrase appears in the sample text it is followed by “out”. Let’s expand our data map type diagram accordingly.</p><p>Note: Other data structure designs for this application are possible, but please follow the diagram below for this assignment to ensure you get plenty of practice with STL map.</p><p>However, there are tradeoffs to using a much larger window or context.<br>First of all, the map data structure will require more memory. Furthermore, if the context is too large, the technique can “overfit” the data. If only one passage of the text matches the query sequence over the large window, then the computer will not have any choices when generating the sequence, and the output will just be a copy of a single passage of the sample text.</p><p>For the core homework assignment, first implement the 2 word window shown in the first diagram. When that is working, move to the 3 word window in the diagram on the right. For full credit on the homework, your code should work with window=2 and window=3. For extra credit, extend your solution to work for any window size. Warning: this extension is not straightforward. You may add components to this diagram for your implementation, but the overall structure and arrangement of data should keep the same spirit.</p><h4 id="Performance-amp-Order-Notation"><a href="#Performance-amp-Order-Notation" class="headerlink" title="Performance &amp; Order Notation"></a>Performance &amp; Order Notation</h4><p>Consider the performance of each of the commands outlined above. Let n be the total number of words in the sample text file, let m be the number of unique words in the file, let w be the width of the sequencing window, and let p be the average number of words observed in the sample to follow a particular word. How much memory will the map data structure require, in terms of n, m, w, and p (order notation for memory use)? What is the order notation for performance (running time) of each of the commands? Write these answers in your README.txt file.</p><p>You are not explicitly required to create any new classes when completing this assignment, but please do so if it will improve your program design. We expect you to use const and pass by reference/alias as appropriate throughout your assignment. We have provided a partial implementation of the main program to get you started. You may use none, a little, or all of this, as you choose, but we strongly urge you to examine it carefully.</p><h3 id="Extra-Credit"><a href="#Extra-Credit" class="headerlink" title="Extra Credit"></a>Extra Credit</h3><p>There are many options for extra credit on this assignment. (As usual though, the total number of points awarded to extra credit work will be small.) You may brainstorm and implement an extension for punctuation data. In particular, recognizing the end of a sentence (a period or question mark), might improve the readability of your phrases and sentences. If your implementation supports the use of any window size, summarize the results of your testing with different window sizes. What feels like the “right” window size for a particular dataset? Be sure to make up your own test cases too. Project Gutenberg is an excellent resource. Report your performance statistics on your largest test cases. Obviously, you won’t be able to submit large datasets (due to the hw submission size), but describe them in your README.txt and cut &amp; paste any interesting “philosophical” statements your program generates.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构作业，使用STL库，编写程序分析英文中单词的词频。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CIT325-Authentification-Server</title>
    <link href="https://tk1307993.coding.me/CIT325-Authentification-Server.html"/>
    <id>https://tk1307993.coding.me/CIT325-Authentification-Server.html</id>
    <published>2020-06-11T00:51:12.000Z</published>
    <updated>2020-06-11T00:52:58.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><p>The goal of this lab is to develop a deeper understanding of how objects can be moved around the Internet by developing a useful, but small, system to store data on multiple computers. You will develop a graphical client that will allow you create, edit and delete student data. The data will be stored on a Student Server and login data will be stored on the Authentication Server.</p><h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>You will begin with the GUI and code used to complete the previous lab. You will add a JButton to the toolbar and a menu item under the File menu called Login. When selected or pressed:</p><ol><li>Show a dialog with userid and password fields</li><li>When the fields are populated and the dialog OK button is clicked, connects to the Authentification Server.</li><li>If the userid/password combination is valid user is allowed to login to the Student Server.</li><li>if the userid/password combination is invalid, another dialog is shown, informing the user the userid/password is invalid.<br>Once connected, the user will be able to do all functions they could do with the previous lab. Now, the system will connect to the Student Server to get the data instead of storing it locally.</li></ol><h3 id="Authentification-Server"><a href="#Authentification-Server" class="headerlink" title="Authentification Server"></a>Authentification Server</h3><p>The Authentification Server will receive a request which has a userid/password combination. It will compare these 2 fields to its own data to see if this is a valid user login. If it is valid, it will send a login OK message to the Student Server, allowing the user to begin adding, editing and changing student data.<br>The data is kept in a text file, that will need to be loaded when the server is started. The data can be read in and stored in any structure that the designer deems worthy.<br>This server is located at:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCP<span class="built_in">/IP </span>Address: 127.0.0.1</span><br><span class="line">Port: 8189</span><br></pre></td></tr></table></figure></p><h3 id="Student-Server"><a href="#Student-Server" class="headerlink" title="Student Server"></a>Student Server</h3><p>The Student Server is similar as to what was used in Lab 7 to store student data. It is basically an ArrayList of objects wrapped in a server. The 4 classes are: Student, Undergrad, Graduate, NonDegree and are the same design as they were in Lab 7.<br>In Lab 7, the arraylist was part of the GUI object. Now, the arraylist is wrapped in a server and the object must be passed back and forth each time the user, via the GUI, wants to compete a transaction.<br>This server is located at:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCP<span class="built_in">/IP </span>Address: 127.0.0.1</span><br><span class="line">Port: 8190</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      用Java代写一个Authentification Server，包含GUI与交互。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Swing" scheme="https://tk1307993.coding.me/tags/Swing/"/>
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>ECE244-Binary-Search-Trees</title>
    <link href="https://tk1307993.coding.me/ECE244-Binary-Search-Trees.html"/>
    <id>https://tk1307993.coding.me/ECE244-Binary-Search-Trees.html</id>
    <published>2020-06-03T01:01:03.000Z</published>
    <updated>2020-06-03T01:02:17.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The objectives of this assignment are to provide you with more practice on the use of the various C++ concepts/constructs introduced in the lectures so far, including classes, dynamic memory allocation, pointers, I/O, and dynamic data structures. This will be done in the context of implementing a binary search tree class.</p><h3 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h3><p>In this assignment, you will implement a simple database to store and retrieve data. You are creating a simple “domain name server” - a database that can rapidly look up string names, such as <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a>, and return a 32-bit integer that is the Internet Protocol (IP) address corresponding to that “domain name”. This is the function performed by the domain name servers that allow you to type in easy to remember website names and have your web browser automatically go to the correct IP address (computer) to retrieve the web data.</p><p>You will implement three classes: DBentry, TreeNode and TreeDB. The DBentry class will be used to create objects that hold an entry of the database. Each entry has a key (a string, corresponding to the name of the internet domain) and some data (a 32-bit integer that gives the IP address and a boolean flag that indicates whether the computer at that IP address is active or not). The TreeDB and TreeNode classes will be used to create a binary search tree database of DBentry objects. TreeDB represents the entire binary tree, while each TreeNode represents a single node in the tree.</p><p>In a real domain names server, we would have to rapidly search billions of domain names (strings) as we looked for the IP address corresponding to a name. The fact that a binary search tree can find entries in large datasets very efficiently, and can also add new entries efficiently, makes it a very appropriate data structure for this application.</p><h3 id="Command-and-Output-Specification"><a href="#Command-and-Output-Specification" class="headerlink" title="Command and Output Specification"></a>Command and Output Specification</h3><p>Your database will be exercised by a simple parser. Whenever the parser expects the user to enter a command, it should prompt the user for input by outputting a greater than sign followed by a space:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in"> user </span>input would appear here</span><br></pre></td></tr></table></figure></p><p>The parser reads commands from cin, calls the appropriate TreeDB and DBentry functions, and sends the appropriate output to cout. Each command consists of an operation, followed by zero or more arguments. The command and the arguments are separated by white spaces, and will always appear on the same line. You parser should process commands until the end-of-file (eof) is encountered. You may assume that all the input is syntactically correct - your program will not be tested with invalid commands, the wrong number of arguments, or misspelt arguments. The only error messages you need to generate are those listed below. The commands and their parameters are:<br>insert name IPaddress status<br>This command creates a new entry with name (a string) as the key and IPaddress (a non-negative integer) and status (active or inactive) as specified. You may assume that the name, IPaddress, and active arguments are separated by spaces and that there are no spaces within an argument. The new entry is then inserted into the database. If there already exists an entry with the same key, the error message “Error: entry already exists” is printed to cout. Otherwise “Success” is printed.</p><p>find name<br>This command finds the entry with the key name in the database, and prints its contents to cout as name : IPaddress : status. Name and IPaddress are printed as a string and an unsigned integer, respectively, while status is either active or inactive. Between values a space, colon and space should be printed.<br>If no such entry exists, the error message “Error: entry does not exist” is printed to cout.</p><p>remove name<br>This command deletes the entry with the key name from the database. If no such entry exists, the error message “Error: entry does not exist” is printed to cout. Otherwise “Success” is printed.</p><p>printall<br>This command prints all the entries in the database, sorted in ascending order of keys, one entry per line.</p><p>printprobes name<br>This command finds the entry with the key name in the database.<br>If no such entry exists, the error message “Error: entry does not exist” is printed to cout. Otherwise, the number of probes (DBentries examined during the tree search) is printed to cout.</p><p>removeall<br>This command deletes all the entries in the database, returning it to the empty state. When done, “Success” is printed.</p><p>countactive<br>This command counts the number of entries in the database that are active and prints this count to cout.</p><p>updatestatus name status<br>This command updates the status of the entry with the given name; status must be either active or inactive. If no entry with name exists, the error message “Error: entry does not exist” is printed to cout.<br>Otherwise “Success” is printed.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构中的Binary Search Tree，很常见的一类作业，补充实现class中的方法即可。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>EE312-Little-Toy-Programming-Language</title>
    <link href="https://tk1307993.coding.me/EE312-Little-Toy-Programming-Language.html"/>
    <id>https://tk1307993.coding.me/EE312-Little-Toy-Programming-Language.html</id>
    <published>2020-05-29T02:44:46.000Z</published>
    <updated>2020-05-29T00:49:38.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p>For our final project we will write our own little toy programming language. The language will have functions, loops, conditional statements, arithmetic and will even support recursion. For Phase B of the project, we’re introducing real program statements (well, I suppose “real” here is a relative term). In addition to output and assignment statements from Phase A, we’ll have conditional statements (if), loops (do) and functions (defun and call). We’ll also introduce the concept of statement blocks, since loops, functions and conditions have “bodies” consisting of a sequence of statements (i.e., a block).</p><h3 id="The-Blip-do-statement"><a href="#The-Blip-do-statement" class="headerlink" title="The Blip do statement"></a>The Blip do statement</h3><p>While if statements are conceptually easier than loops, it’s perhaps best to start with the do construct. At the very least, the do statement is more straightforward to parse than an if.</p><p>As you can see, the syntax consists of the do keyword followed by a loop condition expression, followed by a block of statements followed by the od keyword. As always in Blip, the spacing, indenting and new lines are all irrelevant. Please note that the block of statements can consist of zero or more statements. In Blip, a do loop with zero statements in the block is always silly (an infinite loop with no output). However, technically that is a legal loop.</p><p>The semantics of a do statement in Blip are essentially the same as a while loop in C. First evaluate the expression. If the expression is true (i.e., any integer value other than 0), then execute the block of statements. Then re-evaluate the expression and continue repeating the block of statements until the expression evaluates to false.</p><h3 id="Parsing-the-do-statement"><a href="#Parsing-the-do-statement" class="headerlink" title="Parsing the do statement"></a>Parsing the do statement</h3><p>Parsing do loops in Blip is not incredibly hard. Once you recognize the do keyword, you know the next thing in the input will be an expression, so that’s easy (about the same as an output statement in Blip). The challenge comes when you start parsing the block of statements. Depending on how you wrote your parser during Phase A, you may have no problems at all with the statement block, but if your code is highly structured, you might find it a pain in the neck to deal with the od. The issue is that by the time you realize that the next token is an od, you’ve already read the token (duh). But, if the token is not od, then that token is the first token in a regular statement, by which time you may wish that you hadn’t already read it. To help with this situation, the Input.cpp file now has a function “peek_next_token”, which returns a C string representing the next token in the stream. To first approximation, peek_next_token works a lot like the sequence read_next_token(); next_token(). However, peek_next_token does not actually remove the token from the input stream. So, after you have “peeked” at the token, you still have to actually read the token to remove it. I used peek_next_token a lot in my solution. Some of you will find it useful, some of you will have no idea what it’s supposed to be for. If it doesn’t appear really, really useful to you, then your code probably doesn’t benefit from it - it will be obvious how to use this function if it’s useful to you. And if it’s not useful, please don’t feel obligated to use it.</p><h3 id="Delaying-and-Repeating-execution"><a href="#Delaying-and-Repeating-execution" class="headerlink" title="Delaying and Repeating execution"></a>Delaying and Repeating execution</h3><p>The big change from Phase A to Phase B is that when you implement Phase B you’re forced to parse and save Blip statements. In Phase A, you could parse, execute and throw away each statement as you executed it. Statements could only be executed once, so there was no need to save them. However, in Phase B we have loops that force us to repeatedly execute the same statement(s). Obviously, the statements appear only once in the input stream even though we’re executing them repeatedly in the loop. So, you’re forced to save those statements somehow and then re-execute them later. We strongly recommend that you use a parse tree to store your statements. In fact, we recommend that you use a parse tree to store ALL your statements, even those statements that are not inside a loop. Read/parse with one (recursive) function, and then execute with another (recursive) function. If you used a parse tree in Phase A, you’re probably in good shape to extend that parse tree for Phase B. Please note that you will probably have two different types of parse trees: trees of statements and trees of expressions. A do statement is a perfect example. The condition for the do is an expression. If you have an expression parse tree, that’s a great way to store that expression. The body of the loop is a block (hint, a vector) of statements. Each of those statements can be any Blip statement, including do or if statements! So, a vector of statement parse trees is the right way to store the body of a do loop.</p><h3 id="If-statements"><a href="#If-statements" class="headerlink" title="If statements"></a>If statements</h3><p>Once you’ve figured out how to do a loop (no pun intended), if statements are pretty easy.</p><p>Where, as before, expr is an expression and there is a block of statements in between the start of the if and the end of the if. Note that the end of the if is marked with “fi” (if spelled backwards). The semantics of a basic if statement is the same as in C. If expr evaluates to any integer other than zero, then all the statements in the body are executed. If expr evaluates to 0, then none of the statements in the body are executed.</p><h3 id="The-else-statement"><a href="#The-else-statement" class="headerlink" title="The else statement"></a>The else statement</h3><p>Just as in C, if statements can have an optional else attached.</p><p>The semantics of an if-then-else in Blip are just like those in C. If expr evaluates to true then execute all the statements inside the first statement block, but none of the statements in the else block. If expr evaluates to false, then evaluate none of the statements in the first block, but evaluate all the statements in the else block. Please keep in mind that the else construct will not appear on every if statement.</p><h3 id="And-that’s-all-there-is-for-Project-8"><a href="#And-that’s-all-there-is-for-Project-8" class="headerlink" title="And that’s all there is for Project 8"></a>And that’s all there is for Project 8</h3><p>The rest of this document describes additions to Blip. Please note that the effort implied by the requirements below (i.e., how much time it takes to finish everything) is outside the bounds of what’s reasonable for a programming project. So, it really is extra credit, and I would not expect very many (if any) students to undertake the entire project. With that caveat, we will test the following requirements, including the quality of your solution (e.g., testing for memory leaks) and assign up to five additional extra credit points for extraordinarily good solutions.</p><h3 id="Functions-oh-my"><a href="#Functions-oh-my" class="headerlink" title="Functions (oh my)"></a>Functions (oh my)</h3><p>The complicated part of Phase B starts with functions. Adding functions to Blip means adding three new commands, two statements and one expression type. But the hard part of functions is implementing their semantics. We suggested you approach functions as follows.</p><p>Implement basic functions with no parameters. These functions, when called, always run to the end of their function bodies - i.e., the return statement will always be the last line in the function.</p><p>Implement functions with parameters. Note that parameters require that you have a new “local” scope for your variables, so if there’s a variable “x” defined and then there’s a parameter “x”, the parameter and the original variable are different. We’ll approximate the rules that C uses for variable scoping. Once you implement parameters, implementing local variables are relatively easy.</p><p>Implement return statements that happen in the middle of your function. A return statement can appear anywhere inside a function (or even anywhere inside the main program), including inside loops or if statements. When the return statement is executed, the function immediately stops executing and control returns to the calling function.</p><p>You can actually swap the order you implement #2 and #3 above, depending on how you’re feeling. I just strongly recommend that you do #1 to completion, and then pick either #2 or #3 to work on next. Don’t try to do 2 and 3 simultaneously - build the project incrementally!</p><h3 id="Basic-Functions-and-defun-nufed"><a href="#Basic-Functions-and-defun-nufed" class="headerlink" title="Basic Functions and defun/nufed"></a>Basic Functions and defun/nufed</h3><p>A function can be defined anywhere, at any time. In fact, we can nest functions in functions in Blip (you can’t do that in C). When you define a function (with the defun keyword), you create a list of statements (the function body) that are not executed yet, but will be executed when the function is called (with the call expression).</p><p>In this example, a new function called “sayHello” is created. The function has zero parameters (there is nothing between the params and smarap markers), and one statement (there is one statement between the parameter list and the nufed marker). When this function is parsed, you should build a parse tree for it. As a hint, since my implementation always parses and then executes statements, my defun statements are also both parsed and executed. However, “executing” a defun statement does not execute the body. Rather executing a defun statement simply adds the function to the symbol table once my defun has been executed, the symbol “sayHello” is bound to the function. There are many other ways to implement the semantics, but however you do it, you must not execute the body of the function until it is actually called.</p><h3 id="Call-expressions"><a href="#Call-expressions" class="headerlink" title="Call expressions"></a>Call expressions</h3><p>The only way to invoke a function in Blip is to use a call expression. This is actually similar to what C does. However, in Blip, every function has a return value. If you don’t include a return statement in your Blip function, then the value 0 must be returned by that function (when it ends). Most importantly, the return value cannot be ignored by the caller - C allows the function return values to be ignored. So, calling the sayHello function requires that we do something with the returned value (zero for that example since there’s no explicit return statement).</p><p>Here I’ve used a var statement. I have a bogus variable “not_used” and I’m initializing this variable to the value returned by sayHello. I use this technique extensively in my Blip programs to simulate “void” functions. Anyway, since Blip functions always return a value and since that value can never be ignored, our task to execute them is relatively easy. We have a new expression type “call”. The call expression invokes the function using the arguments from the argument list and then evaluates to the value returned by the function.</p><h3 id="Params-and-variable-scoping"><a href="#Params-and-variable-scoping" class="headerlink" title="Params and variable scoping"></a>Params and variable scoping</h3><p>Blip functions can have an arbitrary number of parameters. The parameter list is marked with params/smarap in the defun statement. The corresponding set of arguments is marked with args/sgra. Just like in C, the first argument is bound to the first parameter, the second argument is bound to the second parameter and so forth. The first step in implementing parameters is to modify your call expression so that, when it is executed, each of the arguments is evaluated and the value is assigned to a variable with the name of the parameter.</p><p>There are many possible implementations of variable scoping. You’re free to choose any implementation strategy that you would like. However, my personal favorite involves using multiple symbol tables. When the parameter x comes into existence, it is placed into its own symbol table - the local variables for function fun. When the function returns, its local-variable symbol table is completely erased. However you decide to implement local variables, the correct behavior in Blip is defined as follows</p><h3 id="Early-return-statements"><a href="#Early-return-statements" class="headerlink" title="Early return statements"></a>Early return statements</h3><p>Blip function can have multiple return statements. If there are zero return statements, then the function returns the value 0. Otherwise, the first return statement that is executed supplies the returned value. Additionally, as soon as a function executes a return statement, the function must immediately stop executing and return control to its caller. To make things consistent, return statements can also appear in the “main program” (i.e., the Blip statements that appear outside of any functions constitute the main program). The first of these return statements that are executed forces the Blip program to immediately stop.</p><p>How you go about implementing the return statement depends entirely on how you structured your program - how you execute statements and functions. I have no specific advice. There are no fancy data structures or complex semantics to worry about. Please do keep in mind that we prefer clean and well-designed code over sloppy code and that your style is part of your grade for this project.</p>]]></content>
    
    <summary type="html">
    
      代写一个精简版的interpreter，可以解析functions, loops, conditional statements, arithmetic和recursion等。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Compiler" scheme="https://tk1307993.coding.me/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>CS3014-Responsive-Web-Design</title>
    <link href="https://tk1307993.coding.me/CS3014-Responsive-Web-Design.html"/>
    <id>https://tk1307993.coding.me/CS3014-Responsive-Web-Design.html</id>
    <published>2020-05-23T02:44:46.000Z</published>
    <updated>2020-05-23T02:48:09.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><ul><li>Become familiar with the AJAX and JSON technologies</li><li>Use a combination of HTML5, CSS, Bootstrap, jQuery, AngularJS and PHP</li><li>Get hands-on experience in Google Cloud App Engine or Amazon Web Services</li><li>Get hands-on experience on how to use Bootstrap to enhance the user experience</li><li>Provide an interface to perform congress search using Sunlight Congress APIs</li></ul><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><h4 id="AJAX-and-JSON"><a href="#AJAX-and-JSON" class="headerlink" title="AJAX and JSON"></a>AJAX and JSON</h4><p>Ajax (short for Asynchronous JavaScript and XML) is a mechanism which enables the communication between the client and the server without the need for a post-back or a complete page refresh. It can also be defined as a method of exchanging data with a server, and updating some parts of a web page without reloading the entire page.</p><p>In this exercise, you have to use the AJAX component provided in JQuery.</p><p>JSON, short for JavaScript Object Notation, is a lightweight data interchange format. Its main application is in AJAX web application programming, where it serves as an alternative to the use of the XML format for data exchange between client and server.</p><h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><p>Bootstrap is a free collection of tools for creating responsive websites and web applications. It contains HTML and CSS-based design templates for typography, forms, buttons, navigation and other interface components, as well as optional JavaScript extensions. To learn more details about Bootstrap please refer to the lecture material on Responsive Web Design (RWD).</p><h4 id="Sunlight-Congress-API"><a href="#Sunlight-Congress-API" class="headerlink" title="Sunlight Congress API"></a>Sunlight Congress API</h4><p>The Sunlight Congress API is a live JSON API for the people and work of Congress, provided by the Sunlight Foundation. With the API you can:</p><ul><li>Look up members of Congress by location or by zip code.</li><li>Obtain the official Twitter, YouTube, and Facebook accounts.</li><li>Look up the daily work of Congress: bills, amendments, nominations.</li><li><p>Get the live activity of Congress: past and future votes, floor activity, heari ngs.<br>In order to make requests to Sunlight Congress API, you need to get an API key:</p></li><li><p>Go to <a href="http://sunlightfoundation.com/api/" target="_blank" rel="noopener">http://sunlightfoundation.com/api/</a></p></li><li>Click on “Get a key!”</li><li>Fill the sign up form</li><li>You will get a confirm email. Click on the link in the email.<br>Then login at the Sunlight Foundation website and go to your “Profile Settings”. You will see your API key string right above you name.</li></ul><p>For information about the Sunlight Congress API, please go to: <a href="https://sunlightlabs.github.io/congress/" target="_blank" rel="noopener">https://sunlightlabs.github.io/congress/</a></p><h4 id="Amazon-Web-Services-AWS"><a href="#Amazon-Web-Services-AWS" class="headerlink" title="Amazon Web Services (AWS)"></a>Amazon Web Services (AWS)</h4><p>AWS is Amazon’s implementation of cloud computing. AWS includes Amazon Elastic Compute Cloud (EC2), which delivers scalable, pay-as-you-go compute capacity in the cloud, and AWS Elastic Beanstalk, an even easier way to quickly deploy and manage applications in the AWS cloud. You can simply upload your application, and Elastic Beanstalk automatically handles the deployment details of capacity provisioning, load balancing, auto-scaling, and application health monitoring. Elastic Beanstalk is built using familiar software stacks such as the Apache HTTP Server, PHP, and Python, Passenger for Ruby, IIS 7.5 for .NET, and Apache Tomcat for Java.</p><p>The Amazon Web Services homepage is available at: <a href="http://aws.amazon.com/" target="_blank" rel="noopener">http://aws.amazon.com/</a></p><h4 id="Google-App-Engine-GAE"><a href="#Google-App-Engine-GAE" class="headerlink" title="Google App Engine (GAE)"></a>Google App Engine (GAE)</h4><p>Google App Engine applications are easy to create, easy to maintain, and easy to scale as your traffic and data storage needs change. With App Engine, there are no servers to maintain. You simply upload your application and it’s ready to go. App Engine applications automatically scale based on incoming traffic. Load balancing, micro services, authorization, SQL and noSQL databases, memcache, traffic splitting, logging, search, versioning, roll out and roll backs, and security scanning are all supported natively and are highly customizable.</p><p>To learn more about GAE support for PHP visit the page: <a href="https://cloud.google.com/appengine/docs/php/" target="_blank" rel="noopener">https://cloud.google.com/appengine/docs/php/</a></p><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>Similar to homework 6, in this exercise you will create a webpage that allows users to search for congress information using the Sunlight Congress API.</p><p>The difference being, in this homework you will create a PHP script to return a JSON formatted data stream to the front-end. The client parses the JSON data and renders it in a nicer-looking, responsive UI (using Bootstrap).</p><p>A user first opens a page as shown below in Figure 1. The page includes a navigation bar at the left and the legislators’ information table at the right.</p><p>Once the user opens this page, all of the legislators’ information data is loaded using the AJAX component in JQuery. The AJAX-JQuery code calls your PHP script. The webpage must then use JavaScript to extract data from the JSON response and display the results on the same webpage. Description of how to display the results is given in the Hints section.</p><h4 id="Page-Header"><a href="#Page-Header" class="headerlink" title="Page Header"></a>Page Header</h4><p>At the top of the webpage, there is a page header which contains a stack icon at left and an image link in the center.</p><h4 id="Navigation-Bar"><a href="#Navigation-Bar" class="headerlink" title="Navigation Bar"></a>Navigation Bar</h4><p>The navigation bar should contain 4 items (Legislators, Bills, Committees and Favorites), each item starts with an icon, followed by the text.</p><p>When the user clicks on an item in this navigation bar, the corresponding content should be loaded. For example, when the user clicks on Legislators, the legislators’ information table should be loaded to the content part.</p><h3 id="FAQ’s"><a href="#FAQ’s" class="headerlink" title="FAQ’s"></a>FAQ’s</h3><p>Q1. Which server should I use, where would server be hosted?</p><p>You can use either host it in Google App Engine or Amazon Web Services. While grading we just need to see the data.</p><p>Q2. Can I use any other way to store data?</p><p>You are allowed only to use browsers local storage. No other way of storing data like cookies, session storage is allowed.</p><p>Q3. How long should the local storage be persistent?</p><p>The local storage data should be persistent until the browser is closed. Even if the page is refreshed, the local storage data should not be deleted.</p><p>Q4. Is it required to use Bootstrap Carousel?</p><p>Yes. It is mandatory to use bootstrap carousel.</p><p>Q5. Facing issues with Cross Origin Request?</p><p>There are several ways to avoid cross origin issues. You can use CORS. If you like to use $.ajax() you can use datatype: jsonp with callback function appended with the URL.Q6. If there is a scroll issue in iPhone or iPad? Use the following style to the parent or body tag -webkit-overflow-scrolling: touch;</p>]]></content>
    
    <summary type="html">
    
      代写一个完整的大型网站，主题不限。技术方面需要使用HTML5, CSS, Bootstrap, jQuery, AngularJS和PHP，最终部署到AWS上，并且可供公网访问。
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>CS314-Multi-Threaded-Program</title>
    <link href="https://tk1307993.coding.me/CS314-Multi-Threaded-Program.html"/>
    <id>https://tk1307993.coding.me/CS314-Multi-Threaded-Program.html</id>
    <published>2020-05-16T01:45:24.000Z</published>
    <updated>2020-05-16T01:47:43.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>In this lab we will create a simple multi-threaded program that merges two files. The usage of the program is:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./merge <span class="tag">&lt;<span class="name">fi161</span>&gt;</span> <span class="tag">&lt;<span class="name">file2</span>&gt;</span> <span class="tag">&lt;<span class="name">mergedfife</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>The program will create 2 threads, one for file1 and one for file2. Each thread will read a line from the file (use getline()) and write it to the merged file in the following format:</p><p>filename: line_number: line_of_text<br>Here is an example of what the merged file should look like:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">tami@cs:0~]./merge roses.txt knock.txt merged.txt</span></span><br><span class="line"><span class="section">tami@cs:0~]cat merged.txt</span></span><br><span class="line"><span class="section">roses.txt: 1: Roses are red.</span></span><br><span class="line"><span class="section">knock.txt: 1: Knock, knock!</span></span><br><span class="line"><span class="section">roses.txt: 2: Violets are blue.</span></span><br><span class="line"><span class="section">knock.txt: 2: Who's there?</span></span><br><span class="line"><span class="section">roses.txt: 3: O/S is hard.</span></span><br><span class="line"><span class="section">knock.txt: 3: Art.</span></span><br><span class="line"><span class="section">roses.txt: 4: This is so true!</span></span><br><span class="line"><span class="section">knock.txt: 4: Art who?</span></span><br><span class="line"><span class="section">knock.txt: 5: R2-D2.</span></span><br></pre></td></tr></table></figure></p><p>Please notice how the threads alternate in sequence until the end of a file is reached. In the example above, roses.txt has 4 lines and knock.txt has 5 lines (merged.txt thus has 9 lines). The threads and the program will terminate when it is complete. You may not use sleep(), busy waiting, or IPC to synchronise the threads and instead, must use semaphores.</p><p>Please note that NOTHING is output to the monitor. When the program functions correctly, a merged file (as displayed above) is created and nothing is printed to stdout.</p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>Please ensure that the following requirements are met:</p><p>Your code must exist in your home directory on Bash in a file named<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$HOME</span><span class="regexp">/lab8/m</span>erge.c</span><br></pre></td></tr></table></figure></p><p>The file specified in item 1 must compile to create an executable that properly merges two files of any length. The command to compile the program is:<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -Wextra -Werror -pthread -o <span class="keyword">merge</span> <span class="keyword">merge</span>.c</span><br></pre></td></tr></table></figure></p><ul><li>Your program must perform reasonable error checking. It should be as robust as possible and detect all errors.</li><li>You must use threads and semaphores to accomplish the task.</li><li>Your code must be well formatted, attractive, readable, and maintainable. Good programming practice requires that your code is properly formatted and commented at all times, not just when it is “done” and submitted for marking.</li></ul><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Please create your own test files to thoroughly test your program on a Wide variety of different input conditions. The C code you write must adhere to good programming practices. It must be indented, contain suitable comments, use preprocessor directives, and have intuitive variable names. Code that merely works and does not follow good practice DOES NOT meet the requirements. Marking and help during office hours Will only be performed on code that executes on Bash.</p>]]></content>
    
    <summary type="html">
    
      使用threads和semaphores，代写多线程程序，进行数据处理。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CS314-Parallel-Computation</title>
    <link href="https://tk1307993.coding.me/CS314-Parallel-Computation.html"/>
    <id>https://tk1307993.coding.me/CS314-Parallel-Computation.html</id>
    <published>2020-05-12T10:16:28.000Z</published>
    <updated>2020-05-12T10:18:08.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>In this lab we will create a multi-process program that uses a mutually exclusive shared variable to perform parallel computation. The usage of the program is<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./average <span class="tag">&lt;<span class="name">fileflame</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>where filename is the name of a 1000 line long input file, with each line containing a 9 digit number (plus a newline). There is no leading whitespace before any value. The file is therefore 10001 characters long (10 chars per line times 1000 lines plus an EOF marker). You may assume the file is correctly formatted and do not have to error check for invalid data. An example file is provided on the course web page.</p><p>Your program will spawn 5 processes. Each process will (simultaneously) read a different 200 lines from the input file and compute the sum of these 200 lines. The processes then add the sum to a variable in shared memory (as well as printing it to the screen) and terminate. The parent process (of all 5 children) waits until the 5 children have completed and divides the stored value by 1000 to compute an average. The average is then printed to the screen with 2 decimal places of precision.</p><p>Here is an example of use:<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tami@<span class="symbol">cs:0</span>~]./<span class="built_in">average</span> testdata.txt</span><br><span class="line">Child <span class="number">1</span> <span class="built_in">sum</span> is <span class="number">47606451980</span></span><br><span class="line">Child <span class="number">2</span> <span class="built_in">sum</span> is <span class="number">48722283695</span></span><br><span class="line">Child <span class="number">3</span> <span class="built_in">sum</span> is <span class="number">46980337615</span></span><br><span class="line">Child <span class="number">4</span> <span class="built_in">sum</span> is <span class="number">49206486425</span></span><br><span class="line">Child <span class="number">5</span> <span class="built_in">sum</span> is <span class="number">47751953548</span></span><br><span class="line"><span class="built_in">Average</span> <span class="number">381648245485.22</span></span><br></pre></td></tr></table></figure></p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>Please ensure that the following requirements are met:</p><ul><li><p>Your code must exist in your home directory on Bash in a file named $HOME/lab7/average.c and must compile to create an executable. The compilation command will be</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc <span class="params">-Wall</span> <span class="params">-Wextra</span> <span class="params">-Werror</span> <span class="params">-o</span> <span class="keyword">average</span> <span class="keyword">average</span>.c</span><br></pre></td></tr></table></figure></li><li><p>Your program must perform error checking on the file name and command line parameters.</p></li><li>You must have a total of 6 processes (not threads). Do not use sleep() to synchronise your processes and instead, use wait(), synchronous system calls, or semaphores.</li><li>You must have a single variable in shared memory to hold the five sums and you must use the 5 child processes to add to that variable.</li><li>To function correctly, the shared variable must be a mutually exclusive resource and protected with a semaphore.</li><li>Your code must be well formatted, attractive, readable, and maintainable. Changing the number of lines in the file or number of processes used should be trivial.</li><li>The C code you write must adhere to good programming practices. It should be indented, contain suitable comments, use preprocessor directives, and have intuitive variable names. Code that merely works and does not follow good practice DOES NOT meet the requirements. Marking and help during office hours will only be performed on code that executes on Bash.</li></ul><h4 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h4><p>Begin by writing a program that reads the command line arguments, forks off the correct number of processes, and has each process print out its PID and exit. Then, add shared memory and a semaphore to make the shared memory a mutually exclusive resource. Have each process print a constant value into the shared memory just to ensure that it is being used correctly. Get the parent process to wait for the five child processes and then divide the value to compute an average. Finish off by adding code to the children to read the correct part of the file and add the values. As you are only storing a sum, you do not need to store the file’s contents in memory.</p><p>Test your program on data other than the sample data. To do that, you may have to write a program to generate data files (and compute the average of the values).</p><p>Please be aware that the values in the sample output are incorrect. The purpose of the sample output is to demonstrate the format and use of the program, not to give you values that you must duplicate. All source code must be written from scratch.</p>]]></content>
    
    <summary type="html">
    
      代写并行算法小作业，对数据进行并发处理。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CS112-Yet-Another-Calculator</title>
    <link href="https://tk1307993.coding.me/CS112-Yet-Another-Calculator.html"/>
    <id>https://tk1307993.coding.me/CS112-Yet-Another-Calculator.html</id>
    <published>2020-05-06T11:42:49.000Z</published>
    <updated>2020-05-06T11:46:06.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This consists of just one problem as a Part B. In addition to the requirements for the Java problems, you must observe the following requirements (for all homework submitted in this course):</p><ul><li>All programs should be literate, i.e., easily understandable by a human (say, your grader) and follow the Java Style Guidelines for CS112 posted on the class web site;</li><li>All files for this homework should be submitted using WebSubmit, following the instructions on the class web site;</li><li>You may not use data structure libraries such as ArrayList, since we are learning to write Java from the ground up and you must learn how these libraries are built; however, you are free to use (unless specifically directed otherwise) the basic libraries String, Character, Scanner, and Math; for this assignment, you may also use Double.parseDouble(….);</li><li>You may freely use code from the class web site, the textbook, or lecture (unless specifically directed otherwise) as long as you cite the source in your comments; but you may NEVER use code from the web or other students’ programs—this will be considered plagiarism and penalized accordingly.</li></ul><h3 id="Problem-B-1-YAC-Yet-Another-Calculator"><a href="#Problem-B-1-YAC-Yet-Another-Calculator" class="headerlink" title="Problem B.1: YAC (Yet Another Calculator)"></a>Problem B.1: YAC (Yet Another Calculator)</h3><p>This problem will be an exercise in hierarchical linked lists and in recursive evaluation of arithmetic expressions. There is not all that much coding to do (my solution added less than 50 lines of code to the template), but you will need to understand how to represent expressions using hierarchical or nested linked lists. As I explained in lecture, this is how Python and many other interpreted languages represent programs, and it is an important way to think about representing data and algorithms.</p><p>The primary data structure will be hierarchical linked lists, as described in lecture on Tuesday 10/25. As explained at that time on the board, an expression will consist of three different kinds of nodes, for operators (*, +, -, and /), positive numbers (doubles), and expressions (nested, fully-parenthesized expressions). For example, an infix expression such as<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( ( 3<span class="selector-class">.4</span> + 0<span class="selector-class">.0</span> ) * ( 1<span class="selector-class">.2</span> <span class="selector-tag">-</span> 2<span class="selector-class">.3</span> ) )</span><br></pre></td></tr></table></figure></p><p>which can equivalently be represented in prefix form as<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*( +( 3<span class="selector-class">.4</span>, 0<span class="selector-class">.0</span> ), <span class="selector-tag">-</span>( 1<span class="selector-class">.2</span>, 2<span class="selector-class">.3</span> ) )</span><br></pre></td></tr></table></figure></p><h3 id="Representing-Arithmetic-Expressions-by-Hierarchical-Linked-Lists"><a href="#Representing-Arithmetic-Expressions-by-Hierarchical-Linked-Lists" class="headerlink" title="Representing Arithmetic Expressions by Hierarchical Linked Lists"></a>Representing Arithmetic Expressions by Hierarchical Linked Lists</h3><p>There are three different kinds of nodes in such a hierarchical list, all represented by different configurations of Node objects:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">privatestaticclassNode&#123;</span><br><span class="line">    <span class="keyword">String</span> <span class="keyword">op</span>;</span><br><span class="line">double num;</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">exp</span>;</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">next</span>;</span><br><span class="line"></span><br><span class="line">      ..... constructors <span class="keyword">and</span> toString() ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Operator Nodes represent one of the four arithmetic operators *, +, -, or / and have an op field storing the operator as a String.</p><p>Note that the num field, a double, has to have some value, and since it is meaningless in this kind of node, we give it the default value 0.0; similarly, the exp field is not used, and is assigned null. The next field, as we show below, will point to null when the operator is pushed on the Ops stack and point to the two operands of the operator when it is part of an expression.</p><p>Expression Nodes are placeholders for expressions, and have default values for op and num, and a pointer to an operator node which starts a subexpression.</p><p>Therefore, it is easy to tell which kind of node is being represented:</p><ul><li>Operator nodes have a non-empty String in the op field, a 0.0 in the num field, and a null pointer in the exp field;<br>Number nodes have an empty String in the op field, a double value in the num field (could, of course, be 0.0), and a null pointer in the exp field; and</li><li>Expression nodes have a non-null pointer in the exp field.<br>Each of these nodes may have a next field which is null or non-null, depending on context (see below for examples).</li></ul><h3 id="Evaluating-Hierarchical-Lists"><a href="#Evaluating-Hierarchical-Lists" class="headerlink" title="Evaluating Hierarchical Lists"></a>Evaluating Hierarchical Lists</h3><p>You must also write a method eval( … ) which takes a pointer to a hierarchical linked list, and returns a double which is the result of the expression represented by the hierarchical list. This method must be recursive, does not use a stack, and is actually fairly simple if you understand the recursive structure of the lists:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">eval(Node e) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> e <span class="keyword">is</span> a <span class="built_in">number</span></span><br><span class="line"><span class="built_in">        return</span> <span class="keyword">the</span> <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> e <span class="keyword">is</span> an expression (<span class="keyword">the</span> <span class="keyword">first</span> node <span class="keyword">is</span> an operator)</span><br><span class="line">        evaluate <span class="keyword">the</span> subexpressions recursively <span class="keyword">and</span> <span class="literal">return</span></span><br><span class="line">        <span class="keyword">the</span> <span class="literal">result</span> <span class="keyword">of</span> applying <span class="keyword">the</span> operator <span class="keyword">to</span> <span class="keyword">the</span> values <span class="keyword">of</span> <span class="keyword">the</span> subexpressions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      这次的作业需要使用链表结构，代写一个计算器应用程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CSE214-Classroom</title>
    <link href="https://tk1307993.coding.me/CSE214-Classroom.html"/>
    <id>https://tk1307993.coding.me/CSE214-Classroom.html</id>
    <published>2020-04-27T07:12:26.000Z</published>
    <updated>2020-04-27T07:14:46.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>After many years of dealing with incomplete and inaccurate information about the classrooms on campus, the faculty of Stony Brook have decided to band together to create a system that will allow them to quickly reference the facilities present in each room, and search for rooms that fulfil certain criteria. In order to have fast access to their large database of rooms and buildings, they have decided to hire you to build a room information system that is based on hash maps. You will be modelling the hash maps on the physical structure of campus, with one hash map relating each building’s name to its content hashmap. The content hashmap will relate the room number to a classroom object containing all the relevant features of the room. You must be able to add and remove buildings from the campus, as well as add and remove classrooms from each building, and edit classrooms to reflect changes.</p><p>Additionally, you must implement a search function that will either search a building or the whole campus for classes fulfilling certain criteria. For this assignment, you may use sequential search (however, if the search involves only one building you definitely shouldn’t search the whole campus).</p><p>Finally, as the monkeys in the basement sometimes take a break from using the treadmill power turbine generators, the power occasionally goes out and system must be shut down and then restarted without losing data. You must use Java Serialization to achieve this.</p><p>NOTE: All exceptions explicitly thrown in Required Classes except for IllegalArgumentException are custom exceptions that need to be made by you.</p><h3 id="Required-Classes"><a href="#Required-Classes" class="headerlink" title="Required Classes"></a>Required Classes</h3><h4 id="Classroom"><a href="#Classroom" class="headerlink" title="Classroom"></a>Classroom</h4><p>Write a fully documented class named Classroom that contains four private data fields: boolean hasWhiteboard, boolean hasChalkboard, int numSeats, and String[] AVEquipmentList. This class will be used to represent a classroom within Stony Brook.</p><p>This class must implement the Serializable interface.</p><p>private boolean hasWhiteboard<br>This field is true if the classroom has a whiteboard, false otherwise.<br>private boolean hasChalkboard<br>This field is true if the classroom has a chalkboard, false otherwise.<br>private int numSeats<br>This field holds the number of seats the classroom has.<br>private String[] AVEquipmentList<br>This field holds the names of the AV Equipment that are supported in the room.<br>OPTIONAL: You can use List as the data type, whichever is easier.<br>Getter and Setter methods for the above four member variables.</p><h4 id="Building-or-Building-HashMap"><a href="#Building-or-Building-HashMap" class="headerlink" title="Building or Building HashMap"></a>Building or Building HashMap</h4><p>The database of Classrooms will be stored in a HashMap. Use the room number of the classrooms as the key for the HashMap. In this assignment, you must use the HashMap/HashTable implementation provided by the Java API. You may use inheritance if you wish.</p><p>This class should also implement the Serializable. interface.</p><p>public void addClassroom(int roomNumber, Classroom classroom)<br>This method adds a Classroom into the Building using the specified room number as the key.<br>Throws an IllegalArgumentException if the given roomNumber = null or if the room number is already in the Building.<br>public Classroom getClassroom(int roomNumber)<br>Retrieves the Classroom from the table having the indicated room number. If the requested room number does not exist in the Building, return null.<br>public void removeClassroom(int roomNumber)<br>This method removes a classroom from the Building.<br>Throws an IllegalArgumentException if the given roomNumber = null or if it doesn’t exist in the building.</p><h4 id="Campus-or-Campus-HashMap"><a href="#Campus-or-Campus-HashMap" class="headerlink" title="Campus or Campus HashMap"></a>Campus or Campus HashMap</h4><p>Write a fully-documented class named Campus. The database of Buildings will be stored in a HashMap. Use the name of the Building objects as the key for hashing. In this assignment, like the Building class, you may provide your own implementation for the School class, or you may use the HashTable (or HashMap) implementation provided by the Java API.</p><p>Just as the above classes, this class should implement the Serializable interface.</p><p>public void addBuilding(String buildingName, Building building)<br>This method adds a Building into the Campus using the specified building name as the key.<br>Throws an IllegalArgumentException if the given buildingName = null or if the building name is already in the Campus.<br>public Building getBuilding(String buildingName)<br>Retrieves the Building from the table having the indicated building name. If the requested building name does not exist in the Campus, return null.<br>public void removeBuilding(String buildingName)<br>This method removes a Building from the Campus.<br>Throws an IllegalArgumentException if the given buildingName = null or if the building name is not in the Campus.</p><h4 id="RoomLookup"><a href="#RoomLookup" class="headerlink" title="RoomLookup"></a>RoomLookup</h4><p>This is the driver class that shows the user the menu detailed in UI Required Functions. It must have a public static main(String[] args), but you can add extra methods to help you organize each part of the menu.</p><h4 id="General-Recommendations"><a href="#General-Recommendations" class="headerlink" title="General Recommendations"></a>General Recommendations</h4><p>You might want to implement a toString() method for classes to make debugging and printing easier. You do not have to do this, but it will help you.<br>You can feel free to add any extra methods and variables as you see fit (public and private).</p><h4 id="Serializable-Interface"><a href="#Serializable-Interface" class="headerlink" title="Serializable Interface"></a>Serializable Interface</h4><p>You will also work with the idea of persistence. This means that our program should save all data from session to session. When we terminate a program, normally the data will be lost. We will preserve this data by using Serializable Java API and binary object files. All your classes should simply implement the java.io.Serializable interface.</p><p>Example: (note - class names here intentionally are different than the homework description above)</p><p>Example: A StorageTable class contains information for all Storage objects saved in the electronic database. You would want to preserve this data, so you can load this data the next time you run your program. You would do the following:</p><p>Modify the StorageTable so that it implements the Serializable interface. Also, the Storage class should also make this implementation. No other changes are necessary.<br>In your application that contains the StorageTable, you can include code that will save that class’s data into a file so it can be read in again later. To do this, you need to create an ObjectOutputStream to send the data to, and then use the writeObject method to send the data to the stream, which is stored in the specified file.</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StorageTable storage = <span class="keyword">new</span> <span class="type">StorageTable</span>(<span class="comment">/*Constructor Parameters*/</span>);</span><br><span class="line"><span class="comment">// missing code here adds Storage objects to the table.</span></span><br><span class="line"></span><br><span class="line">FileOutputStream file = <span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">"storage.obj"</span>);</span><br><span class="line">ObjectOutputStream outStream = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(file);</span><br><span class="line"><span class="comment">// the following line will save the object in the file</span></span><br><span class="line">outStream.writeObject(storage);</span><br><span class="line">outStream.close();</span><br></pre></td></tr></table></figure><p>When the same application (or another application) runs again, you can initialize the member using the serialized data saved from step 2 so you don’t have to recreate the object from scratch. To do this, you need to create an ObjectInputStream to read the data from, and then use the readObject method to read the hash from the stream.<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream file = new FileInputStream(<span class="string">"storage.obj"</span>)<span class="comment">;</span></span><br><span class="line">ObjectInputStream inStream = new ObjectInputStream(file)<span class="comment">;</span></span><br><span class="line">StorageTable storage<span class="comment">;</span></span><br><span class="line"><span class="attribute">storage</span> = (StorageTable) inStream.readObject()<span class="comment">;</span></span><br><span class="line">inStream.close()<span class="comment">;</span></span><br><span class="line">// missing code here can use StorageTable constructed previously</span><br></pre></td></tr></table></figure></p><p>Note: If you change any data fields or structure of the serialized class, old saved objects will become incompatible.</p>]]></content>
    
    <summary type="html">
    
      代写资产录入软件，能够对学校Classroom的资产进行管理。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CIT591-Philadelphia-Bike-Share-Data-and-Jeopardy</title>
    <link href="https://tk1307993.coding.me/CIT591-Philadelphia-Bike-Share-Data-and-Jeopardy.html"/>
    <id>https://tk1307993.coding.me/CIT591-Philadelphia-Bike-Share-Data-and-Jeopardy.html</id>
    <published>2020-04-19T09:23:31.000Z</published>
    <updated>2020-04-19T03:26:51.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1-Philadelphia-Bike-Share-Data-and-Jeopardy"><a href="#Part-1-Philadelphia-Bike-Share-Data-and-Jeopardy" class="headerlink" title="Part 1 - Philadelphia Bike Share Data and Jeopardy"></a>Part 1 - Philadelphia Bike Share Data and Jeopardy</h3><p>Analyzing Data from the Internet: Real-world data sets are becoming increasingly available for a large variety of domains. E.g., <a href="http://www.data.gov" target="_blank" rel="noopener">www.data.gov</a> has datasets ranging from education and agriculture to manufacturing and energy. <a href="https://www.opendataphilly.org/" target="_blank" rel="noopener">https://www.opendataphilly.org/</a> provides a lot of datasets for the Philadelphia region.</p><p>For this assignment, we will use the Indego Bike Share Data on bike rentals and trips in Philadelphia. You<br>can download the datasets and read more about what’s available here <a href="https://www.rideindego.com/about/data/" target="_blank" rel="noopener">https://www.rideindego.com/about/data/</a>. In particular, you’ll need to download and use the following two files:</p><ol><li>Trip Data for the third quarter of 2016</li><li>Station Table</li></ol><p>You’ll write a program in Java to read and analyze this information Once you have a basic program that can read in the data files, use it to answer the following questions. Describe in detail the algorithm you used for each question and the answers in your readme.txt file.</p><ol><li>How many Walk-Up trips were there in 2016?</li><li>How many stations that had a Go-Live Date in 2015 are still Active?</li><li>What percentage of trips started in Rittenhouse Square?</li><li>What percentage of trips made by Indego30 riders are round trips?</li><li>What is the ID of the bike that has traveled the most in terms of duration?</li><li>On 8/3/16 at 7:00am, how many bikes were being used?</li><li>Print all the trip information for the longest trip by distance. To make things easier (and not worry about spherical geometry), we’ll assume that the latitude and longitude are points in 2-d space and use Euclidean distance.</li><li>Print the list of trip ids of all trips that involved a station which was the only station to go live on its respective go-live date.</li><li>Wild card - come up with an interesting question. List the question and find the answer to it.</li></ol><p>Software Design: An important part of this homework is designing your classes and methods. Using the “Nouns and Verbs” approach and keeping good design principles in mind, create CRCs. This should be done before you start implementing your code in Java and you need to submit the original CRCs as part of the submission.</p><p>When you start implementing your code, it’s perfectly fine to go back and change the design, if needed.</p><p>You should explain what you changed and why in the readme.txt file.</p><p>Note: For the italicized parts in the above, your code should be able to deal with any similar input (e.g., from a user). This should not be hard coded.</p><h3 id="Part-2-Extra-Credit"><a href="#Part-2-Extra-Credit" class="headerlink" title="Part 2 - Extra Credit"></a>Part 2 - Extra Credit</h3><p>In addition to the questions above, answer the following questions:</p><ol><li>Stations can be located using the longitude and latitude coordinates provided in the dataset. We can define “closeness” as follows: Two stations are considered close to each other if the average difference between their longitudes and latitudes, i.e., (difference longitude + difference latitude) / 2, is less than 0.02 points. Find all pairs of stations that are considered close to each other.</li><li>What is the least popular end station?</li><li>Wild card - come up with an interesting question. List the question and find the answer to it.<br>As before, for the EC part, you cannot have any help from the TAs/instructor.</li></ol><h3 id="Submission-Instructions"><a href="#Submission-Instructions" class="headerlink" title="Submission Instructions"></a>Submission Instructions</h3><p>We recommend submitting the theory part electronically also. However, you can turn in a physical copy at the start of class, if you prefer. Please do not print out the Java source.</p><p>In addition to the theory writeup, you should also submit a text file titled readme.txt. That is, write in plain English and instructions for using your software. You should also include explanations/rationale for why you chose to design your code the way you did and whether you deviated from your original design and why. The readme.txt file is also an opportunity for you to get partial credit when certain requirements of the assignment are not met. Think of the readme as a combination of instructions for the user and a chance for you to get partial credit.</p><p>Please create a folder called YOUR_PENNKEY. Places all your files inside this - theory writeup, the Java files, the CRCs, the readme.txt file, the ec.txt file. Zip up this folder. It will thus be called YOUR_PENNKEY.zip. So, e.g., my homework submission would be swapneel.zip. Please submit this zip file via canvas.</p>]]></content>
    
    <summary type="html">
    
      根据作业提供的Trip data，编写程序分析数据，最后回答关于数据的十几个问题即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS201-Information-Retrieval</title>
    <link href="https://tk1307993.coding.me/CS201-Information-Retrieval.html"/>
    <id>https://tk1307993.coding.me/CS201-Information-Retrieval.html</id>
    <published>2020-04-16T09:23:31.000Z</published>
    <updated>2020-04-16T03:19:24.119Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><ul><li>Translate written descriptions of behavior into code.</li><li>Practice representing state in a class.</li><li>Practice interacting with the Map, Set, and List abstractions.</li><li>Test code using unit tests.</li></ul><h3 id="Downloading-and-importing-the-starter-code"><a href="#Downloading-and-importing-the-starter-code" class="headerlink" title="Downloading and importing the starter code"></a>Downloading and importing the starter code</h3><p>As in previous assignments, download and save (but do not decompress) the provided archive file containing the starter code. Then import it into Eclipse in the same way; you should end up with a information-retrieval- project in the “Project Explorer”.</p><h3 id="Search-engine-behavior"><a href="#Search-engine-behavior" class="headerlink" title="Search engine behavior"></a>Search engine behavior</h3><p>For the purposes of this assignment, a search engine is a stateful object that “knows about” a set of documents and supports various queries on those documents and their contents.</p><p>Documents are identified by a unique ID and consist of a sequence of terms. Terms are (always) the lowercase version of words; operations on the search engine and documents are should therefore be case-insensitive. Documents are added one-by-one to the search engine.</p><p>The search engine function as an index. That is, given a term, the search engine can return the set of documents (that it knows about) that contain that term.</p><p>The search engine can also find a list of documents (again, from among the set it knows about) relevant to a given term, ordered from most-relevant to least-relevant. It does so using a specific version of the tf-idf statistic, which sounds intimidating but is actually fairly straightforward to calculate - so long as you have the data structures to support doing so.</p><h3 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do"></a>What to do</h3><p>The SearchEngine needs to keep track of the documents for two things: to do index lookups of terms, returning a set of documents (in indexLookup), and to compute the two components of the tf-idf statistics (in termFrequency and inverseD). You can hold this state with whatever data structures you like, but my suggestions follow.</p><p>I suggest you get addDocument and indexLooku working first. To support the index, a straightforward mapping of terms to DocumentIDs will work. (To be clear: a Map). It turns out you don’t need to create this structure; you can use the one you’ll make to support tf-idf instead, but creating this Map might be a good warmup. In any case, declare the structure(s) as instance variables, create the empty structure(s) you’ll use in the constructor, fill it/them in addDocument, and examine it/them in indexLookup. When turning the document itself into terms, use the same approach as in Assignment 05: String.split using “\W+“, and remember toLowercase the result.</p><p>termFrequency requires that you compute the number of times a given term appears in a given document. This suggests you should have a data structure that keeps track of the count of terms per document: a Map. But this frequency-counting structure is per-document; you need to keep track of each document’s counts. So overall, I suggest a Map. The outer map goes from DocumentIds to the inner frequency-counting structure. You’ll have to update addDocument to populate and update these structures. Be sure to get clear in your head the different times you’ll use get, put, containsKey, and getOrDefault.</p><p>Once you have the structure described above, inverseDocumentFrequenc is fairly straightforward. Be sure to read the javadoc comment above the method for the exact equation the tests are expecting. Use Math.log to compute the logarithm (not Math.log10 or Math.log2).</p><p>Use these two methods to compute a given document-term pair’s tfIdf.</p><p>Finally, implement relevanceLookup, which returns a list of all documents containing a given term, sorted from largest tf-idf to smallest. You’ll probably need to implement TfIdfComparator., but note that no tests test the comparator directly, so if you have another method in mind to sort the list, go ahead. If you do implement it, make sure it returns a value that will result in the list being sorted largest-to-smallest, and mind the tie-breaker requirement.</p>]]></content>
    
    <summary type="html">
    
      用TF-IDF算法，结合数据结构的Map, Set和List，代写一个信息检索系统。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CSE214-Decision-Tree-Classifier</title>
    <link href="https://tk1307993.coding.me/CSE214-Decision-Tree-Classifier.html"/>
    <id>https://tk1307993.coding.me/CSE214-Decision-Tree-Classifier.html</id>
    <published>2020-04-10T09:23:31.000Z</published>
    <updated>2020-04-10T09:51:43.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>In this homework you will be implementing a decision tree classifier. A decision tree classifier is used in rule-based machine learning to classify data based on a predefined set of attributes. In our case, we will be classifying text based on the terms it contains (or does not contain). Decision trees can be used for real-life applications ranging from answering FAQs to classifying a piece of data.<br>In order to be able to make decisions using the decision tree classifier, we must first build the decision tree. Your program will be able to import existing decision trees from text files, and edit them in the program. Additionally, it will have to read input text and classify it based on the decision tree, printing the decisions that were made in order to reach the final verdict.<br>NOTE: All exceptions explicitly thrown in Required Classes except for IllegalArgumentException are custom exceptions that need to be made by you.</p><h3 id="Required-Classes"><a href="#Required-Classes" class="headerlink" title="Required Classes"></a>Required Classes</h3><h4 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h4><p>private String[] keywords<br>This field holds the message only if it is a leaf, otherwise this is a list of words to trigger going down this path.<br>These keywords are joined as if OR’ed together:<br>Example: {“Fat”; “Orange”}: if text contains Fat or text contains Orange, then go down “yes” path, otherwise “no” path.<br>private TreeNode left<br>private TreeNode right<br>These two fields hold the left and right subtrees respectively.<br>You should have getters/setters for the three fields above.<br>public Boolean isLeaf():<br>function that returns true if the node is a leaf and its left and right subtrees are null, otherwise false.<br>Preconditions: This node is initialized<br>Postconditions: The tree remains unchanged<br>TreeNavigator<br>private TreeNode root<br>A reference to the root TreeNode of this tree.<br>private TreeNode cursor<br>A reference to the currently selected TreeNode in the tree.<br>The cursor should select the root node by default.<br>public static TreeNavigator buildTree(String treeFile)<br>Reads in a text file describing a TreeNavigator. See sample input for an example.<br>Preconditions: treeFile is a non-null, non-empty String that points to a file that exists that is readable and valid.<br>Returns a new TreeNavigator generated by the passed in text file.<br>public String classify(String text)<br>Classifies the text with the given tree and returns the classification as a String.<br>public String getPath()<br>Gets the current path of the cursor. For example, if cursor referred to a TreeNode at position “Garfield” in the example below, this method should return “NOT red, NOT coyote,wolf, IS cat, IS orange, DECISION: Garfield”<br>Note the comma above: This is how you can show multiple keywords.<br>public void resetCursor()<br>Resets the cursor to the root node.<br>Postconditions: Cursor references root node. Cursor contents are printed.<br>public void cursorLeft()<br>Moves cursor to its left child.<br>Postconditions: Cursor contents are printed.<br>public void cursorRight()<br>Moves cursor to its right child.<br>Postconditions: Cursor contents are printed.<br>public TreeNode getCursor()<br>This gets the Cursor so you can modify the keywords or the Left or the Right child links.<br>Precondition: Cursor is not null (return null if it is null)<br>Postcondition: Cursor is returned to the caller.<br>public void editCursor(String text)<br>Sets the keywords for the current cursor.</p><h4 id="DecisionTreeClassifier-Driver"><a href="#DecisionTreeClassifier-Driver" class="headerlink" title="DecisionTreeClassifier (Driver)"></a>DecisionTreeClassifier (Driver)</h4><p>public static void main (String args[])<br>This will drive the program and present a menu like shown below.<br>You can and should write helper functions for each menu option if not already present in the TreeNavigator.<br>General Recommendations<br>You might want to implement a toString() method for classes to make debugging and printing easier. You do not have to do this, but it will help you.<br>You can feel free to add any extra methods and variables as you see fit (public and private).</p><p>Text file format<br>The input file will be formatted like the following example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>;;Red;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span>;Coyote,Wolf;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span>;Cat;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-0</span>;snoopy;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span>;fat,orange;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-0</span>;tom;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span>;garfield;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span>;big,bad,evil,mean;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-0</span>;Wolf Blitzer;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span>;ACME;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span><span class="number">-0</span>;Big Bad Wolf;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span><span class="number">-1</span>;Wile E. Coyote;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span>;Dog;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span>;plumber;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span><span class="number">-0</span>;Little Red Riding Hood;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span><span class="number">-1</span>;Mario;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-1</span>;Clifford;leaf</span><br></pre></td></tr></table></figure></p><h3 id="UI-Required-Functions"><a href="#UI-Required-Functions" class="headerlink" title="UI Required Functions"></a>UI Required Functions</h3><p>Menu:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Classify (<span class="name">Sentence</span>)</span><br><span class="line">Path (<span class="name">Sentence</span>)</span><br><span class="line">Import (<span class="name">file</span>)</span><br><span class="line">Cursor To Root (<span class="name">print</span> cursor)</span><br><span class="line">Cursor Left (<span class="name">print</span> cursor)</span><br><span class="line">Cursor right (<span class="name">print</span> cursor)</span><br><span class="line">Edit Cursor (<span class="name">print</span> cursor)</span><br><span class="line">Add Left Child (<span class="name">doesn</span>’<span class="literal">t</span> move cursor)</span><br><span class="line">Add Right Child (<span class="name">doesn</span>’<span class="literal">t</span> move cursor)</span><br></pre></td></tr></table></figure></p><h3 id="Sample-IO"><a href="#Sample-IO" class="headerlink" title="Sample IO"></a>Sample IO</h3><h4 id="Example-1-Working-with-the-following-tree"><a href="#Example-1-Working-with-the-following-tree" class="headerlink" title="Example 1 - Working with the following tree:"></a>Example 1 - Working with the following tree:</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the DecisionTree Classifier</span><br><span class="line">Menu:</span><br><span class="line">        I)Import a tree from a file</span><br><span class="line">        E)Edit current tree</span><br><span class="line">        C)Classify a Description</span><br><span class="line">        P)<span class="keyword">Show</span> decision <span class="keyword">path</span> <span class="keyword">for</span> a Description</span><br><span class="line">        Q) Quit.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: E</span><br><span class="line"><span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: tree <span class="keyword">is</span> <span class="keyword">empty</span> Root node <span class="keyword">is</span> <span class="keyword">initialized</span> <span class="keyword">with</span> this value.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:</span><br><span class="line">        E)Edit Keywords</span><br><span class="line">        C)<span class="keyword">Add</span> Children Children <span class="keyword">are</span> automatically <span class="keyword">leaves</span>, can be edited later.</span><br><span class="line">        D)<span class="keyword">Delete</span> Children, <span class="keyword">and</span> Make Leaf Ask <span class="keyword">user</span> <span class="keyword">for</span> <span class="keyword">new</span> <span class="keyword">value</span> <span class="keyword">for</span> keyword(<span class="keyword">only</span> one, <span class="keyword">no</span> commas).</span><br><span class="line">        N)<span class="keyword">Cursor</span> <span class="keyword">to</span> <span class="keyword">No</span> <span class="keyword">Child</span></span><br><span class="line">        Y)<span class="keyword">Cursor</span> <span class="keyword">to</span> Yes <span class="keyword">Child</span></span><br><span class="line">        R)<span class="keyword">Cursor</span> <span class="keyword">to</span> Root</span><br><span class="line">        P)<span class="keyword">Cursor</span> <span class="keyword">to</span> <span class="keyword">Parent</span> Extra credit. May <span class="keyword">not</span> <span class="keyword">use</span> <span class="keyword">parent</span> <span class="keyword">reference</span> <span class="keyword">for</span> extra credit.</span><br><span class="line">M)<span class="keyword">Main</span> Menu</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:smelly,dim</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: smelly, dim.</span><br><span class="line">//Edit menu <span class="keyword">not</span> shown again <span class="keyword">in</span> <span class="keyword">sample</span> IO</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: C</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: tempNo</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: tempYes</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'tempYes'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'tempNo'</span></span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: Y</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> leaf, message <span class="keyword">is</span> <span class="string">'tempYes'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: A</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: Javits</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: <span class="keyword">Old</span> CS</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'Old CS'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'Javits'</span></span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:asbestos,broken</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: smelly, dim.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:R</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: smelly, dim</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:N</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> leaf, message <span class="keyword">is</span> <span class="string">'tempNo'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:sick,food,bad,activities</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: sick,food,bad,activities.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: A</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: <span class="keyword">New</span> CS</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: SAC</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'New CS'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'Javits'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: M</span><br><span class="line">//<span class="keyword">Main</span> menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span></span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: C</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: <span class="keyword">Where</span> can I <span class="keyword">go</span> <span class="keyword">if</span> I want <span class="keyword">to</span> sit <span class="keyword">in</span> a broken chair <span class="keyword">in</span> a dim room?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: <span class="keyword">Old</span> CS</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: P</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: I would <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">get</span> sick <span class="keyword">before</span> my <span class="keyword">test</span> tomorrow. <span class="keyword">Where</span> should I eat <span class="keyword">to</span> increase my chances?</span><br><span class="line">Decision <span class="keyword">path</span>:<span class="keyword">NOT</span> smelly, dim, <span class="keyword">IS</span> sick, DECISION: SAC</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: E</span><br><span class="line"><span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: smelly, dim</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: D</span><br><span class="line">Please enter a terminal <span class="built_in">text</span> <span class="keyword">for</span> this node: Chuck Norris</span><br><span class="line"><span class="keyword">Current</span> node <span class="keyword">is</span> leaf. <span class="built_in">Text</span> <span class="keyword">is</span>: <span class="string">'Chuck Norris'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: M</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: C</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: Who can <span class="keyword">kill</span> two stones <span class="keyword">with</span> one bird?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Chuck Norris</span><br><span class="line">Please enter a menu <span class="keyword">option</span>: Q</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h4 id="Example-2-Working-with-the-following-tree"><a href="#Example-2-Working-with-the-following-tree" class="headerlink" title="Example 2 - Working with the following tree:"></a>Example 2 - Working with the following tree:</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the DecisionTree Classifier</span><br><span class="line">Menu:</span><br><span class="line">        I)Import a tree <span class="keyword">from</span> a file</span><br><span class="line">        E)Edit current tree</span><br><span class="line">        C)Classify a Description</span><br><span class="line">        P)Show decision path <span class="keyword">for</span> a Description</span><br><span class="line">        Q)Quit.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: I</span><br><span class="line">Please enter a filename: sampletree.txt</span><br><span class="line">Tree Loaded.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:P</span><br><span class="line">Please enter some <span class="keyword">text</span>:This Character <span class="keyword">is</span> an orange cat who likes lasagna.</span><br><span class="line">Decision path: <span class="keyword">NOT</span> red, <span class="keyword">NOT</span> coyote,wolf, <span class="keyword">IS</span> cat, <span class="keyword">IS</span> orange, DECISION: Garfield</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:C</span><br><span class="line">Please enter some <span class="keyword">text</span>:I<span class="comment">'m looking for a plumber, but I insist that he wears a red hat, so I know how to tell  him apart from his brother.</span></span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Mario</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:C</span><br><span class="line">Please enter some <span class="keyword">text</span>: Who <span class="keyword">is</span> the unlucky coyote who always tries <span class="keyword">to</span> use ACME products <span class="keyword">to</span> <span class="keyword">catch</span> a bird?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Wile E. Coyote</span><br><span class="line">Please enter a menu <span class="keyword">option</span>: Q</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h3 id="Extra-Credit-GUI-OR-Android-–-NOT-BOTH-–-Requirements"><a href="#Extra-Credit-GUI-OR-Android-–-NOT-BOTH-–-Requirements" class="headerlink" title="Extra Credit: GUI OR Android – NOT BOTH – Requirements"></a>Extra Credit: GUI OR Android – NOT BOTH – Requirements</h3><p>You must make a nice visualization of all the components. For example this can include a graphical representation of the tree and what each node contains, along with connecting lines to each node.<br>All the menu options should be buttons, and all inputs should be graphical (ie: in a TextField in JavaFX) for any extra credit.</p><h3 id="Extra-Credit-Child-to-Parent-can-be-done-with-or-without-a-GUI-for-credit"><a href="#Extra-Credit-Child-to-Parent-can-be-done-with-or-without-a-GUI-for-credit" class="headerlink" title="Extra Credit: Child to Parent (can be done with or without a GUI for credit)"></a>Extra Credit: Child to Parent (can be done with or without a GUI for credit)</h3><p>Implement a Cursor to Parent function as in the sample WITHOUT putting a parent reference in the TreeNode class.</p>]]></content>
    
    <summary type="html">
    
      练习ADT中Tree的用法，代写一个决策树分类器的应用程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP2370-Midpoint-Pivot-Quicksort</title>
    <link href="https://tk1307993.coding.me/COMP2370-Midpoint-Pivot-Quicksort.html"/>
    <id>https://tk1307993.coding.me/COMP2370-Midpoint-Pivot-Quicksort.html</id>
    <published>2020-04-06T05:22:17.000Z</published>
    <updated>2020-04-06T00:27:43.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Non-Reversing-Permutation"><a href="#Non-Reversing-Permutation" class="headerlink" title="Non-Reversing Permutation"></a>Non-Reversing Permutation</h3><p>The pseudocode in the textbook for RANDOMIZE-IN-PLACE (p. 126) generates a permutation of an array such that any ordering is equally likely. Write pseudocode for PERMUTE-WITHOUT-REVERSAL, which should generate any ordering with equal likelihood except for the exact reverse of the original ordering. In other words, if the original array is A = {1, 5, 3, 2, 4}, then any permutation should be possible with equal likelihood except for {4, 2, 3, 5, 1}, which should not be a possible result. Your algorithm should not use any additional storage beyond the original array and a fixed number of temporary variables (no temporary arrays). Hint: it may help to think about how to correctly implement PERMUTE-WITHOUT-IDENTITY from problem 5.3-2 in the textbook (p. 128), and think about how you might use that code as part of your implementation of PERMUTE-WITHOUT-REVERSAL.</p><h3 id="Inversions-and-Insertion-Sort"><a href="#Inversions-and-Insertion-Sort" class="headerlink" title="Inversions and Insertion-Sort"></a>Inversions and Insertion-Sort</h3><p>An array A is said to have an inversion at (i, j). Exercise 5.2-5 in the text (p. 122) asks for the expected number of inversions in an array A if the elements of the array A are a uniform random permutation. The solution of exercise 5.2-5 is provided.</p><p>Let A be an array of integers with no repeated values. The rank of an element of A is the index at which the value appears in the sorted permutation of A. For example, if A = &lt;17, 6, 10, 9&gt;, then A has inversions at (1, 2), (1, 3), (1, 4), and (3, 4), for a total of 4 inversions. The ranks of the elements 17, 6, 10, and 9 are 4, 1, 3, and 2, respectively. Suppose all permutations of the ranks of values in A are equally likely.</p><p>Use the result of Exercise 5.2-5 to give a Θ bound on the average case running time of INSERTION-SORT (p. 18) on A (for the general case, not just the example above). Be sure to describe the relationship between the number of inversions in A and the running time of INSERTION-SORT on A.</p><h3 id="Sorting-Probabilities"><a href="#Sorting-Probabilities" class="headerlink" title="Sorting Probabilities"></a>Sorting Probabilities</h3><p>For an array A (using 1-based indexing) containing the integers 1 through n in random order, in regard to sorting the integers into ascending order, answer the following (give an explanation for each answer):</p><ul><li>What is the probability before sorting that A[i] = i for all 1 ≤ i ≤ n?</li><li>For any given j such that 1 ≤ j ≤ n, what is the probability before sorting that A[j] = j?</li><li>What is the probability before sorting that A[k] ≠ k for all 1 ≤ k ≤ n?</li><li>For a given value m, where 1 ≤ m ≤ n, what is the probability before sorting that A[i] = i for all 1 ≤ i ≤ m?</li><li>If Q UICKSORT (p. 171) is used to sort A, what is the probability that the top-level call P ARTITION (A, 1, n) will result in a return value of either 1 or n?</li></ul><h3 id="Midpoint-Pivot-Quicksort"><a href="#Midpoint-Pivot-Quicksort" class="headerlink" title="Midpoint-Pivot Quicksort"></a>Midpoint-Pivot Quicksort</h3><p>Consider the pseudocode below for a version of quicksort which always picks the middle item to use as the pivot:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MID-QUICKSORT (A, <span class="selector-tag">p</span>, r)</span><br><span class="line">  <span class="keyword">if</span> <span class="selector-tag">p</span> &lt; r</span><br><span class="line">    mid = [(<span class="selector-tag">p</span> + r)/<span class="number">2</span>]</span><br><span class="line">    swap A[mid] with A[r] <span class="comment">// move middle element to pivot</span></span><br><span class="line">    <span class="selector-tag">q</span> = P ARTITION (A, <span class="selector-tag">p</span>, r)</span><br><span class="line">    MID-QUICKSORT (A, <span class="selector-tag">p</span>, <span class="selector-tag">q</span> - <span class="number">1</span>)</span><br><span class="line">    MID-QUICKSORT (A, <span class="selector-tag">q</span> + <span class="number">1</span>, r)</span><br></pre></td></tr></table></figure><p>This code uses the version of P ARTITION on p. 171 of the textbook.</p><p>Find a permutation of the five numbers 11, 22, 33, 44, 55 which generates worst-case behavior when given as input to MID-QUICKSORT; that is, a sequence such that every partition result will have 0 elements in either the low or high range. Show the input, output, and q value for every call to P ARTITION using your worst-case input.</p>]]></content>
    
    <summary type="html">
    
      代写四个算法小程序，不需要写具体编程代码，使用伪代码即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS1210-Educational-Data</title>
    <link href="https://tk1307993.coding.me/CS1210-Educational-Data.html"/>
    <id>https://tk1307993.coding.me/CS1210-Educational-Data.html</id>
    <published>2020-04-03T05:22:17.000Z</published>
    <updated>2020-04-03T05:25:10.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>For this two-part project you will be working with a medium-size dataset (about 800K records) of education statistical indicators obtained from the World Bank. The dataset consists of two file:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f308b71c<span class="number">-00</span>be<span class="number">-4519</span><span class="number">-9</span>b0c<span class="number">-0</span>d3100b75092_Data.csv</span><br><span class="line">f308b71c<span class="number">-00</span>be<span class="number">-4519</span><span class="number">-9</span>b0c<span class="number">-0</span>d3100b75092_Definition and Source.csv</span><br></pre></td></tr></table></figure></p><p>both in csv or comma-separated value format. The first file contains the data, with each record having five fields, described in the first line of this file as:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country,CountryCode,SeriesCode,<span class="number">2015</span> <span class="string">[YR2015]</span></span><br></pre></td></tr></table></figure></p><p>The next 762,000 lines contain records of this form, while the last five lines look like:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Data from database:</span> Education Statistics - All Indicators,,,,</span><br><span class="line"><span class="symbol">Last Updated:</span> <span class="number">10</span> / <span class="number">04</span> / <span class="number">2016</span>,,,,</span><br></pre></td></tr></table></figure><p>and can safely be ignored (these lines are either blank - hence the rows of commas - or contain data provenance information).<br>The second file contains information about the data contained in the first file. Each line is a record consisting of four fields, described in the first line of this file as:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code, Indicator Name, <span class="keyword">Long</span> definition, <span class="keyword">Source</span></span><br></pre></td></tr></table></figure></p><p>Each of these lines can be quite long, especially (and not surprisingly) the field called “Long definition.” Using the elipsis (“…”) to shorten the line, a sample field (the 10th line of the file to be precise) looks like:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIS<span class="selector-class">.NERA</span>.<span class="number">3</span>, <span class="string">"Adjusted..."</span>, <span class="string">"Total..."</span>, UNESCO Institute <span class="keyword">for</span> Statistics</span><br></pre></td></tr></table></figure></p><p>Aside from the textual descriptions, the most interesting field here is the first, which by design contains interesting information about the type of data represented, and which is also appears as the third field in the data file. The key idea is that records in the data file that share the same “Series Code” (or simply “Code” as its called in the definitions file file) are by definition directly comparable. So, for example, if I am interested in the adjusted net enrollment rate for females in primary school (SE.PRM.TENR.FE) across different countries or populations, I could compare all the records from the data file with this “Series Code” (there are 254 of these).</p><h3 id="Reading-Data"><a href="#Reading-Data" class="headerlink" title="Reading Data"></a>Reading Data</h3><p>Your first task is to read these data into Python and construct an appropriate representation of these records. You will write two functions to achieve this end.<br>First, write a function</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defreadDefinitions</span><span class="params">(filename)</span></span>:</span><br></pre></td></tr></table></figure><p>which opens file filename of the second type described above, that is:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code, Indicator Name, Long definition, Source</span><br><span class="line"><span class="keyword">and</span> returns <span class="keyword">a</span> dictionary D <span class="keyword">with</span> entries <span class="keyword">of</span> <span class="keyword">the</span> form:</span><br></pre></td></tr></table></figure></p><p>Code: [ Indicator Name, Long definition, Source ]<br>Reading csv files can be tricky, because it is quite possible that some fields may contain explicit commas embedded in a single field (see, e.g., the “Long definition” field). In such cases, these extraneous commas are protected by enclosing the field in quotes. For example, consider the following line taken from a hypothetical csv file representing Olympic gold medalists:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Fencing</span>, <span class="string">"Garozzo, Daniele"</span>, <span class="keyword">ITA, </span><span class="number">2016</span></span><br></pre></td></tr></table></figure></p><p>Here, the correct interpretation is a single record (or line) containing four fields (and not five) because the comma in the gold medalist’s name is not semantically equivalent to the other three commas in the line. Fortunately, because this is such a common issue, Python provides a library for reading csv files while honoring the semantics of commas embedded in quoted fields. To use the library, you must first:<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br></pre></td></tr></table></figure></p><p>You will need to read up on how to use the csv library: more information can be found here:<br><a href="https://docs.python.org/3.5/library/csv.html" target="_blank" rel="noopener">https://docs.python.org/3.5/library/csv.html</a><br>Important: do not attempt to split() the line, as I can guarantee this will fail. To be successful, you will need to use the csv library. Also, be wary of the first line in the csv file, which is a “header” and should not be included in the dictionary as data.<br>The second function you should write:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defreadData</span><span class="params">(filename)</span></span>:</span><br></pre></td></tr></table></figure><p>should open a file filename of the first type above, that is:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country, CountryCode, SeriesCode, <span class="number">2015</span> <span class="string">[YR2015]</span></span><br></pre></td></tr></table></figure></p><p>and return a tuple of two dictionaries, C and V . The first dictionary, C, should have entries of the form:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Country</span> <span class="meta">Code</span>: Country</span><br></pre></td></tr></table></figure></p><p>and therefore should look like, e.g.,<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'USA'</span>: <span class="string">'United States'</span>, <span class="string">'ITA'</span>: <span class="string">'Italy'</span>, <span class="string">'PRT'</span>: <span class="string">'Portugal'</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>while the second dictionary, V , in the tuple should have entries of the form:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Series</span> <span class="meta">Code</span>: &#123;Country <span class="meta">Code</span>: <span class="number">2015</span> [YR2015], ...&#125;</span><br></pre></td></tr></table></figure></p><p>and thus look like, e.g.,<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'UIS.LR.AG15T99.GPI'</span>: &#123;<span class="string">'ARE'</span>: <span class="string">'1.02945005893707'</span>, ...&#125;, ...&#125;</span><br></pre></td></tr></table></figure></p><p>Again, be wary of the fact that the first line in this csv file is also a “header” and should not be include in the dictionary as data, but nor should the last five lines of this file, which represent summary information and not real data.<br>In constructing the readData() function, it is important not to include entries where the corresponding value is missing (missing values in this data file are indicated by a string, ‘..’); there will be many fewer values than the 762000 rows in the data file might imply. To get to the heart of the matter, you will write a third function:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defmakeProfiles</span><span class="params">(C, V)</span></span>:</span><br></pre></td></tr></table></figure><p>which will return a dictionary, P, indexed by country code with values consisting of the number of datapoints present in V for that particular country. Thus part of P produced by your first implementation of makeProfiles() might look like:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'MAR'</span>: <span class="number">307</span>, <span class="string">'IBT'</span>: <span class="number">0</span>, <span class="string">'WSM'</span>: <span class="number">293</span>, <span class="string">'URY'</span>: <span class="number">269</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>Indicating that there is no data about ‘IBT’ present in this dataset. You will note that ‘IBT’ is defined in C as ‘IDA &amp; IBRD total’ rather than some country name; IDA and IBRD stand for International Development Association and International Bank for Reconstruction and Development, respectively, two branches of the World Bank from which these data were obtained. Given that no data is provided, your complete version of makeProfiles() should alter C to remove the entry for IBT and any other similar code that has no data associated with it. Thus the value of P produced by your final version of makeProfiles() might look like:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'SMR'</span>: <span class="number">14</span>, <span class="string">'UMC'</span>: <span class="number">28</span>, <span class="string">'ARG'</span>: <span class="number">263</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>should not contain any entries with 0 values, and should also modify C to remove those entries. If your code is like mine, final versions of both P and C should contain 241 entries.<br>Finally, you will implement a plotting function:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defplotProfile</span><span class="params">(P)</span></span>:</span><br></pre></td></tr></table></figure><p>that will reproduce the figure shown here below.<br>Note how all of the country codes are arranged alphabetically along the x axis, with the y values corresponding to the number of datapoints for that particular country code. You will need to study the matplotlib pyplot documentation:<br><a href="http://matplotlib.org/api/pyplot_api.html" target="_blank" rel="noopener">http://matplotlib.org/api/pyplot_api.html</a><br>to learn how to make your code work.<br>Once this code is complete, we’ll turn our attention to a more interesting analysis of the data.</p>]]></content>
    
    <summary type="html">
    
      练习使用Python处理数据，以及matplot库的使用。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
</feed>
