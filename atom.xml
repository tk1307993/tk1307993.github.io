<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2021-09-27T12:54:43.171Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ENGR30003-Numerical-Programming-for-Engineers</title>
    <link href="https://tk1307993.coding.me/ENGR30003-Numerical-Programming-for-Engineers.html"/>
    <id>https://tk1307993.coding.me/ENGR30003-Numerical-Programming-for-Engineers.html</id>
    <published>2021-09-27T12:51:43.000Z</published>
    <updated>2021-09-27T12:54:43.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>This project requires you to demonstrate your understanding of dynamic memory, linked lists and basic numerical computation. The key objective of this assignment is to solve a set of tasks which involve processing of flow around a flat plate.</p><h3 id="Flow-Around-a-Flat-Plate"><a href="#Flow-Around-a-Flat-Plate" class="headerlink" title="Flow Around a Flat Plate"></a>Flow Around a Flat Plate</h3><p>In the field of Fluid Mechanics, flow around a flat plate perpendicular to the flow direction is still an active area of research. With advent of high performance computing and supercomputers, it has now become possible to look at this simple case with a greater deal of accuracy. The problem consists of a flat plate that is perpendicular to the main flow direction as shown in Figure 1 (left). The blue arrows indicate the direction of the flow while the shaded object is the flat plate. This generates a wake behind the flat plate and exerts a pressure force on the plate, similar to the force you feel when you hold your hand out in a moving car. At a given instant the flow behind the flat plate is extremely complex and a snapshot of the flow domain is shown in Figure 1 (right).</p><h3 id="Working-with-the-Data"><a href="#Working-with-the-Data" class="headerlink" title="Working with the Data"></a>Working with the Data</h3><p>For this assignment, you will process the wake data from a flat plate case. The data has been provided to you in a CSV format file (flow data.csv) with the following form:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x, y, u, v</span><br><span class="line"><span class="number">10.028</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054866</span></span><br><span class="line"><span class="number">10.077</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054739</span></span><br><span class="line"><span class="number">10.126</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054612</span></span><br><span class="line"><span class="number">10.175</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054484</span></span><br><span class="line"><span class="number">10.224</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054357</span></span><br></pre></td></tr></table></figure></p><p>Each line corresponds to a point in the flow domain with coordinates (x,y). The velocities at that given point in x and y are given by u and v respectively.</p><h3 id="Processing-Tasks"><a href="#Processing-Tasks" class="headerlink" title="Processing Tasks"></a>Processing Tasks</h3><p>This assignment consists of four processing tasks which will be assessed independently. For each task you are to measure the run time it takes to complete the described task using your program (see program output below). Each of the four tasks must not require more than 60 seconds to run on dimefox. This means, in order to complete the task within this time limit, you may need to focus on the efficiency of your solution for each problem. Overall you have to write a single program, performing each of the four tasks sequentially. For each task you have to write your results to a file on the disk.</p><h3 id="Task-1-Maximum-Velocity-Difference"><a href="#Task-1-Maximum-Velocity-Difference" class="headerlink" title="Task 1: Maximum Velocity Difference"></a>Task 1: Maximum Velocity Difference</h3><p>It is sometimes helpful to understand what’s the range of velocities in the flow. For the first task, you must compute the maximum velocity difference in u and v after coordinate x = 20. Specifically, you must output first the two points in the domain where the magnitude of the u velocity difference is maximum followed by the two points in the grid where the magnitude of the v velocity difference is maximum. For each set of points, the point with the maximum of the given velocity must be first followed by the point with the minimum velocity. The output should be to the file called task1.csv and should be formatted as below. There must be no blank spaces between the values and around the commas. Each value must be written to 6 decimal places.</p><p>It is imperative that you write it out the way described above and shown below otherwise comparing your output to the solution would result in an error and you would lose marks.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y</span>, <span class="selector-tag">u</span>, <span class="selector-tag">v</span></span><br><span class="line">40<span class="selector-class">.512346</span>, <span class="selector-tag">-19</span><span class="selector-class">.595387</span>, 1<span class="selector-class">.007986</span>, <span class="selector-tag">-0</span><span class="selector-class">.001002</span></span><br><span class="line">66<span class="selector-class">.899192</span>, <span class="selector-tag">-0</span><span class="selector-class">.729056</span>, 0<span class="selector-class">.850117</span>, 0<span class="selector-class">.0005807</span></span><br><span class="line">69<span class="selector-class">.552467</span>, <span class="selector-tag">-0</span><span class="selector-class">.729056</span>, 0<span class="selector-class">.852483</span>, 0<span class="selector-class">.0004275</span></span><br><span class="line">60<span class="selector-class">.961891</span>, 0<span class="selector-class">.442134</span>, 0<span class="selector-class">.838355</span>, <span class="selector-tag">-0</span><span class="selector-class">.0006330</span></span><br></pre></td></tr></table></figure></p><p>The above is an example of what the file should look like and is not the actual solution. Also note that the data provided in flow data.csv is not in any chronological order and you must efficiently look only at points where the value of x is greater than 20. You can use file io.c to understand how to output data to a file.</p><h3 id="Task-2-Mean-Velocities-on-a-Coarser-Grid"><a href="#Task-2-Mean-Velocities-on-a-Coarser-Grid" class="headerlink" title="Task 2: Mean Velocities on a Coarser Grid"></a>Task 2: Mean Velocities on a Coarser Grid</h3><p>Each line in the file flow data.csv is a point location in the domain. These points when joined together will create a mesh (also called a grid). For this task, you will map these points onto a coarser grid, computing the new average coordinates (x,y) and the corresponding velocities (u,v). The flow domain can be thought as divided into a two dimensional grid such that each cell of the grid would contain multiple points, the number of which would depend on the cell upper and lower dimensions and the coordinates of the points. You would compute the average coordinates and velocities for each cell using the formula below for all points k within a given cell (this is for the x coordinate; same formula to be used for y, u, v).</p><p>Finally, you must output the results of the averaged values and the score to task2.csv in descending order based on the score for each cell. An example of what the output should look like is shown below. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y</span>, <span class="selector-tag">u</span>, <span class="selector-tag">v</span>, <span class="selector-tag">S</span></span><br><span class="line">20<span class="selector-class">.464390</span>, 19<span class="selector-class">.001188</span>, 1<span class="selector-class">.009472</span>, 0<span class="selector-class">.003123</span>, 3<span class="selector-class">.614885</span></span><br><span class="line">26<span class="selector-class">.493395</span>, <span class="selector-tag">-2</span><span class="selector-class">.917140</span>, 0<span class="selector-class">.950080</span>, 0<span class="selector-class">.003106</span>, 3<span class="selector-class">.564577</span></span><br><span class="line">26<span class="selector-class">.493395</span>, 2<span class="selector-class">.922365</span>, 0<span class="selector-class">.949606</span>, <span class="selector-tag">-0</span><span class="selector-class">.002937</span>, 3<span class="selector-class">.562721</span></span><br><span class="line">26<span class="selector-class">.493443</span>, 10<span class="selector-class">.961477</span>, 1<span class="selector-class">.016337</span>, 0<span class="selector-class">.001415</span>, 3<span class="selector-class">.544763</span></span><br><span class="line">26<span class="selector-class">.493443</span>, <span class="selector-tag">-11</span><span class="selector-class">.009443</span>, 1<span class="selector-class">.016268</span>, <span class="selector-tag">-0</span><span class="selector-class">.001393</span>, 3<span class="selector-class">.542255</span></span><br><span class="line">23<span class="selector-class">.490141</span>, <span class="selector-tag">-16</span><span class="selector-class">.954090</span>, 1<span class="selector-class">.010923</span>, <span class="selector-tag">-0</span><span class="selector-class">.002471</span>, 3<span class="selector-class">.489632</span></span><br><span class="line">23<span class="selector-class">.490141</span>, 16<span class="selector-class">.966158</span>, 1<span class="selector-class">.010908</span>, 0<span class="selector-class">.002496</span>, 3<span class="selector-class">.488729</span></span><br></pre></td></tr></table></figure></p><p>The size of the grid (number of cells in each direction) must be an input parameter, allowing the code to run different grid sizes. Your implementation would be checked for the grid resolution of 24 i.e. 24 cells in x and 24 cells in y. The domain extent for this coarse grid in x and y is 10 to 70 units and -20 to 20 units respectively. An example of the coarse grid is shown in Figure 2 (left). The 24 cells in x direction would span from -10 to 70 units while the 24 cells in y direction would span -20 to 20 units. Also shown is an example of a cell within this grid. As can be seen, the cell is of width x and height y and the black dots show the points in the original grid. Once you do the averaging for all these points, you will end up with one average point (shown in red).</p><h3 id="Task-3-Velocity-and-It’s-Statistics"><a href="#Task-3-Velocity-and-It’s-Statistics" class="headerlink" title="Task 3: Velocity and It’s Statistics"></a>Task 3: Velocity and It’s Statistics</h3><p>For this task, you have to compute the threshold statistics of u velocity magnitudes i.e. how many points in the domain have the magnitude of u under 0.5, under 0.6 and so on. Then you must compute the % of points under each band. An example of this is given below.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">threshold, points, percentage</span><br><span class="line"><span class="number">0.500000</span>, <span class="number">126</span>, <span class="number">11.012561</span></span><br><span class="line"><span class="number">0.600000</span>, <span class="number">256</span>, <span class="number">22.536942</span></span><br><span class="line"><span class="number">0.700000</span>, <span class="number">348</span>, <span class="number">30.613564</span></span><br><span class="line"><span class="number">0.800000</span>, <span class="number">582</span>, <span class="number">51.300236</span></span><br><span class="line"><span class="number">0.900000</span>, <span class="number">810</span>, <span class="number">71.352145</span></span><br><span class="line"><span class="number">1.000000</span>, <span class="number">902</span>, <span class="number">79.496213</span></span><br><span class="line"><span class="number">1.100000</span>, <span class="number">1136</span>, <span class="number">100.000000</span></span><br></pre></td></tr></table></figure></p><p>This example shows that there are 582 points in the domain where the magnitude of u is under 0.8. You must output the results in the same format as above to task3.csv. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown above.</p><h3 id="Task-4-Wake-Profile-Visualization"><a href="#Task-4-Wake-Profile-Visualization" class="headerlink" title="Task 4: Wake Profile Visualization"></a>Task 4: Wake Profile Visualization</h3><p>For this task, you will visualise the wake profile generated by writing the wake boundaries to a text file. To do this, you will first calculate the y coordinate of maximum u velocity. This is to be done for locations x = 10,15,20,25,30,35,40,45,50,55,60,65, i.e. you will look through all the relevant points for each specified x location to choose the maximum of u and pick the corresponding y coordinate. Since the data doesn’t contain exact x coordinates as described here, you will take the x coordinate which are closest to these these numbers. For instance, the closest number to x = 50 in the data file is x = 49.999. To pick the relevant x coordinate, you can use a bound of 0.05 about the specified location (Note that there is exactly one x coordinate that will fall inside the bound so you don’t have to worry about a tie). Output the chosen x location and the magnitude of the corresponding y coordinate in the following format to task4 1.csv. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y_h</span></span><br><span class="line">29<span class="selector-class">.980000</span>, 5<span class="selector-class">.921400</span></span><br><span class="line">49<span class="selector-class">.999001</span>, 6<span class="selector-class">.739500</span></span><br><span class="line">54<span class="selector-class">.983002</span>, 6<span class="selector-class">.956200</span></span><br></pre></td></tr></table></figure></p><p>Now that you’ve obtained the y coordinates, calculate the spacing for each location using the following formula:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spacing = ceil(10 |<span class="string">y</span>|<span class="string">)</span></span><br></pre></td></tr></table></figure></p><p>A skeleton version has been provided to you, complete with the print statements to print out the wake boundary. All you need to to do is to obtain the spacings for these 12 x locations into the array yheight where yheight[0] corresponds to the spacing for x=10. The output should be written to the file task4_2.txt.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>You need to submit your program for assessment. Submissions will not be done via the LMS; instead you will need to log in to the server dimefox and submit your files using the command submit . You can (and should) use submit both early and often to get used to the way it works, and also to check that your program compiles correctly on our test system, which has some different characteristics to the lab machines. Only the last submission will be marked. The submission server may be very slow towards the deadline as many students are submitting. Therefore, please do not wait until the last few minutes to make the first attempt of submission. If you make a submission attempt a few minutes before the deadline but the submission was completed after the deadline, your submission will be treated as a submission AFTER the deadline.</p>]]></content>
    
    <summary type="html">
    
      代写工程领域中的数值编程，解决实际的工程问题。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP10002-Text-Search</title>
    <link href="https://tk1307993.coding.me/COMP10002-Text-Search.html"/>
    <id>https://tk1307993.coding.me/COMP10002-Text-Search.html</id>
    <published>2021-09-24T00:09:55.000Z</published>
    <updated>2021-09-24T00:12:51.808Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>In this project you will demonstrate your understanding of arrays, strings, and functions. You may also use typedefs and structs if you wish - and will find the program easier to assemble if you do - but you are not required to use them in order to obtain full marks. Nor do you need to make any use of malloc() in this project.</p><h3 id="Text-Search"><a href="#Text-Search" class="headerlink" title="Text Search"></a>Text Search</h3><p>The Unix command-line tool grep provides the ability to identify the lines in a file that exactly match a pattern supplied as a command-line argument. There are also useful options in grep for the search to be case-insensitive (“-i”) and to match on whole words only (“-w”).</p><p>However there are also times when we want to perform a less precisely defined search, looking for partial matches to (possibly multiple) strings, rather than exact matches relative to one string. For example, we might be unsure of how to spell “latitude” and “longitude”, and want to be able to use “lat long” as a query to identify - in some kind of decreasing-score order - the lines in an input document that contain one or more words that start with those two strings. Similarly, we might be unsure of how to spell someone’s name, and not be bothered if a search for “alis mof” finds all of “Alistair Moffat”, “Alison Mofet”, “Alistair, plus Bob Moffat”, and so on.</p><p>In this project you will write a program that reads text from stdin, generates a “match score” for each line relative to a query supplied on the command-line, and then prints out the lines that have the highest scores - a bit like documents are scored and ranked in web search engines. But, unlike Google and Bing, you will not use an index, and instead you are encouraged (in this project) to make use of obvious approaches. Over a query of up to a five or eight words, and an input text of up to a few megabytes (which is actually quite big), your program should (and had better!) still operate in a second or so. That is, you do not need to implement the pattern search algorithms that are being discussed in class; and may use straightforward matching techniques, including any suitable functions in string.h.</p><h3 id="Input-Data"><a href="#Input-Data" class="headerlink" title="Input Data"></a>Input Data</h3><p>Input to your program will come in two parts: a query, specified on the command-line (see Section 7.11 of the textbook) as a sequence of lowercase alphanumeric strings; and a stream of text, to be (always) read from stdin. If you vary away from these interface requirements the automated testing process will fail your program!</p><p>A range of text input data will be used during the post-submission testing. As you develop your program according to the stages listed below, the output will evolve. Output examples for both the alice-eg.txt and full Alice’s Adventures in Wonderland pg11.txt file are linked from the FAQ page. You should also check your program against other queries and inputs, of course. Testing and debugging is your responsibility.</p><h3 id="Stage-1-Checking-the-Command-Line"><a href="#Stage-1-Checking-the-Command-Line" class="headerlink" title="Stage 1 - Checking the Command-Line"></a>Stage 1 - Checking the Command-Line</h3><p>In this stage you are to demonstrate that you can access the first of the two required inputs, the query from the command-line. The query itself will be provided to you via argc and argv. If argc is zero when your program is called you should print the required error message and exit; and if any character in any of the strings making up the query is not a lowercase alphabetic or numeric character, you should print that particular string and the required error message. For example:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mac</span>: ./ass1 &lt; alice-eg.txt</span><br><span class="line">S1: <span class="keyword">No</span> <span class="keyword">query</span> specified, must provide at least <span class="keyword">one</span> <span class="built_in">word</span></span><br><span class="line"><span class="keyword">mac</span>: ./ass1 lat 66 loNg 32 words &lt; alice-eg.txt</span><br><span class="line">S1: <span class="keyword">query</span> = lat 66 loNg 32 words</span><br><span class="line">S1: loNg: invalid character(s) <span class="keyword">in</span> <span class="keyword">query</span></span><br></pre></td></tr></table></figure></p><p>mac:<br>Note how each output line is prefixed by the stage number that generated it.</p><h3 id="Stage-2-Reading-the-Input"><a href="#Stage-2-Reading-the-Input" class="headerlink" title="Stage 2 - Reading the Input"></a>Stage 2 - Reading the Input</h3><p>In this next stage, you are to demonstrate that you can correctly access the text from stdin, by printing out each input line, its length in characters, and the number of words it contains. For the example query and text, the first few lines of your output should be (exactly):<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mac:</span> <span class="string">./ass1</span> <span class="string">lat</span> <span class="string">long</span> <span class="string">&lt;</span> <span class="string">alice-eg.txt</span></span><br><span class="line"><span class="attr">S1:</span> <span class="string">query</span> <span class="string">=</span> <span class="string">lat</span> <span class="string">long</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">Down,</span> <span class="string">down,</span> <span class="string">down.</span> <span class="string">Would</span> <span class="string">the</span> <span class="string">fall</span> <span class="string">NEVER</span> <span class="string">come</span> <span class="string">to</span> <span class="string">an</span> <span class="string">end!</span> <span class="string">'I wonder how</span></span><br><span class="line"><span class="string">S2: line = 1, bytes = 68, words = 14</span></span><br><span class="line"><span class="string">---</span></span><br></pre></td></tr></table></figure></p><p>and so on, see the FAQ page for the full required output. A word is defined to be a maximal length sequence of alphanumeric characters.</p><p>You may assume that no input line contains more than 1,000 characters. Note the item in the FAQ page about newline differences between PC and Unix systems. You should copy the mygetchar() function into your program and use it (and only it) when you are reading input lines.</p><h3 id="Stage-3-Scoring-Lines"><a href="#Stage-3-Scoring-Lines" class="headerlink" title="Stage 3 - Scoring Lines"></a>Stage 3 - Scoring Lines</h3><p>Each input line next needs to be given a score relative to the query. If there are q query words specified on the command-line (that is when argc = q + 1), if wi is the i th of the query words (that is, when argv[i] = wi), and if fi is the number of times that word wi is a case-insensitive prefix match against a word that appears in that input line, A prefix match occurs if every character of the query term matches at the beginning of a words in the input line. For example, “ali” is a prefix match of all of “Ali”, “Alistair”, “Alison”, and “alimentary”; and is not a prefix match of any of “alloy”, “al”, “ai”, or “malice”. Lines that have no matches against any query terms will automatically get a score of zero according to this formula. Scores are to be calculated and represented as doubles; be aware that rounding in double arithmetic might lead to your program giving slightly different values to mine in some cases. When printed to three decimal places, the values are probably going to agree, but small implementation-dependent (based primarily on the exact order the operations are carried out by the compiled program) differences in computed values are always possible.</p><p>The required output for this stage is a score per line, interleaved with the previous Stage 2 output. The FAQ shows example executions, so that you can confirm that you understand what it is that you are to compute and how it is to be output - look for the lines that commence with “S3:”. Note that log2 x can be computed via log(x)/log(2.0), with log (natural logs) available in math.h.</p><h3 id="Stage-4-Ranked-Summary-Output"><a href="#Stage-4-Ranked-Summary-Output" class="headerlink" title="Stage 4 - Ranked Summary Output"></a>Stage 4 - Ranked Summary Output</h3><p>Once you have the Stage 3 scoring regime working correctly, it is time to move on to the main goal - presenting lines in decreasing score order. Add data structures to your program that retain the (up to) five highest-scoring lines, and their scores. Then, once all of the input lines have been read, print those five lines (or up to five lines, if there are not five lines with non-zero scores) and their line numbers and scores, in decreasing score order. If the scores are tied (when doing simple comparisons on double values using == and &lt;=, don’t try and be clever), then lines should be presented in line number order.</p><p>For the test file alice-eg.txt and the three-term query “ali lat long”, the required output from this stage is:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line">S4: <span class="built_in">line</span> <span class="number">9</span>, score = <span class="number">0.668</span></span><br><span class="line"><span class="keyword">or</span> Longitude I<span class="string">'ve got to?'</span> (Alice had no idea what Latitude was, <span class="keyword">or</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line">S4: <span class="built_in">line</span> <span class="number">10</span>, score = <span class="number">0.233</span></span><br><span class="line">Longitude either, but thought they were nice grand <span class="keyword">words</span> <span class="built_in">to</span> say.)</span><br><span class="line"><span class="comment">--</span></span><br><span class="line">S4: <span class="built_in">line</span> <span class="number">4</span>, score = <span class="number">0.229</span></span><br><span class="line">thousand miles down, I think<span class="comment">--' (for, you see, Alice had learnt several</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line">S4: <span class="built_in">line</span> <span class="number">8</span>, score = <span class="number">0.226</span></span><br><span class="line"><span class="string">'--yes, that'</span>s about <span class="keyword">the</span> <span class="literal">right</span> distance<span class="comment">--but then I wonder what Latitude</span></span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure></p><p>The FAQ page shows some other example interactions with the desired program.</p><p>Note that you may not retain every input line in an array of strings, and your program may not assume some maximum number of lines in the input. You can only retain five (as a #defined value, of course) lines and their scores at any given time, plus the current line that is being processed; plus access the supplied query via argv.</p><h3 id="General-tips"><a href="#General-tips" class="headerlink" title="General tips.."></a>General tips..</h3><p>You will probably find it helpful to include a DEBUG mode in your program that prints out intermediate data and variable values. Use #if DEBUG and #endif around such blocks of code, and then #define DEBUG 1 or #define DEBUG 0 at the top. Disable the debug mode when making your final submission, but leave the debug code in place. The FAQ page has more information about this.</p><p>Finally, note that the sequence of stages described in this handout is deliberate - it represents a sensible path though to the required program. You can, of course, ignore the advice and try and write final program in a single effort, without developing it incrementally and testing it in phases. You might even get away with it, this time and at this somewhat limited scale, and develop a program that works. But in general, one of the key things that makes some people better at programming than others is the ability to see a design path through simple programs, to more comprehensive programs, to final programs, that keeps the complexity under control at all times.</p>]]></content>
    
    <summary type="html">
    
      使用基础的C语言语法，代写一个文本查询工具。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP206-Graph-Traversal-and-Dijkstras-Algorithm</title>
    <link href="https://tk1307993.coding.me/COMP206-Graph-Traversal-and-Dijkstras-Algorithm.html"/>
    <id>https://tk1307993.coding.me/COMP206-Graph-Traversal-and-Dijkstras-Algorithm.html</id>
    <published>2021-09-17T01:45:50.000Z</published>
    <updated>2021-09-17T01:48:12.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this project you will use the Graph ADT and Dijkstra’s algorithm to compute the length of the shortest path (number of nodes visited), and for extra credit the path with the fewest turns. The input graphs are actual street map of Manhattan NY and Manhattan Kansas</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The goal of this programming project is for you to master (or at least get practice on) the following tasks:</p><ul><li>Establishing a Graph ADT from a real life application</li><li>Using Dijkstra’s algorithm to find length of a path.</li><li>Inputting user origination and destination information</li><li>working with existing code</li></ul><h3 id="Helpful-code"><a href="#Helpful-code" class="headerlink" title="Helpful code"></a>Helpful code</h3><p>The main class that will call methods the Graph ADT in chapter 10 which are also provided attached to the assignment. This java project ProgProject4 provides and application that creates a graph using the books graph ADT classes. There is also a package that contains a class to execute Dijkstra’s algorithm.</p><h3 id="Project-Steps"><a href="#Project-Steps" class="headerlink" title="Project Steps"></a>Project Steps</h3><ol><li>Create a graph based upon the given street map. Each expected vertex in your graph is represented by a blue dot. The blue dots represent a traffic intersection. Your vertex should be an instance of an Intersection Class, not a String as used in most class examples. Your program should read an input file containing all information about the intersection including all streets that meet at that intersection.</li><li>Traverse through the graph and find the length, or the number of nodes , of the shortest paths for the origination to destination path.</li><li>For 5 points extra credit, find the path with the shortest number of turns. A turn is defined as a path of 3 vertices where the edge street names are not the same.<br>Hint - for fewest number of turns, store the name of the street of the edge. A turn is when a vertex on the path is reached by 2 edges with different names.</li></ol><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>When inputting an intersection, always assume street names are sorted, and only the street name (not ave or road) is provided.</p><p>Ignore One Way arrows on maps</p><p>Expected Results:</p><p>Map 1: Manhattan Kansas<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Input</span>:</span><br><span class="line"><span class="attribute">Origination</span>:   Hudson,Kimball     <span class="attribute">Destination</span>:  Claflin,Denison </span><br><span class="line"><span class="attribute">Output</span>:</span><br><span class="line">Minimum Path <span class="attribute">Length</span>: <span class="number">6</span>    Minimum <span class="attribute">Turns</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Input</span>:</span><br><span class="line"><span class="attribute">Origination</span>:   College     <span class="attribute">Destination</span>:  Claflin,NManhattan</span><br><span class="line"><span class="attribute">Output</span>:</span><br><span class="line">Minimum Path <span class="attribute">Length</span>: <span class="number">4</span>    Minimum <span class="attribute">Turns</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>Map 2: Manhattan New York<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span></span><br><span class="line"><span class="string">Origination:</span> Canal, Spring     <span class="string">Destination:</span>  Spring, Thomson </span><br><span class="line"><span class="string">Output:</span></span><br><span class="line">Minimum Path <span class="string">Length:</span> <span class="number">5</span>    Minimum <span class="string">Turns:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>Since you will be using the ProgProject4 class provided, running your program should be produce a series of input prompts for the origination and destination locations.</p>]]></content>
    
    <summary type="html">
    
      代写Dijkstra算法，对地图上的任意两点，求最短路径。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CS322-Maze-Game</title>
    <link href="https://tk1307993.coding.me/CS322-Maze-Game.html"/>
    <id>https://tk1307993.coding.me/CS322-Maze-Game.html</id>
    <published>2021-09-05T03:23:31.000Z</published>
    <updated>2021-09-05T03:26:12.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You will complete this project in 2 parts. For the final assignment (#4) you will submit a design and the first increments of the program. The increments will be starting the program, opening a file and displaying it, prompting the user and opening each file in order and displaying it. The rest will be completed for the final project.</p><p>You will create a program that will enable the user to move through a maze. The maze will contain locked doors that require keys to be opened. Guarding the maze are roving killer wombats. To escape the maze, the player must navigate through the maze, wombats, and doors until they reach a ladder. Each maze level contains one ladder that takes the player to the next level of the maze until the final level is reached. On the final level there is an exit instead of a ladder.</p><p>An evil sorceress has captured the player. Her soulless minion didn’t lock the door correctly so the player can try to escape. She uses killer wombats as the guards. Each level starts with one wombat. She knows the player has left the cell but can only summon one new wombat at a time. For every 30 steps the player takes, a new wombat will randomly appear on the current level.</p><p>There are strange marks in the dungeon (indicated by the letter ‘T’). If the player moves on to one they are randomly transported within that level of the dungeon. If they land on another ‘T’ they are transported again! J The random placement of the player is otherwise the same as for the wombats. They cannot be placed on physical objects, such as walls or doors. If the player is placed on a key he can pick it up.</p><p>Your code will implement this game as follows:</p><p>When your program starts it will prompt the user for the number of levels. The floor files will be named floor_# where # indicates which floor it holds. Your program will always start reading with the first floor.</p><p>The maze is defined by a set of text files, each of which contains a single level. Whenever the game starts or the player reaches a new level, that data must be read from the appropriate text file. The first line of each file will have two integer values which describe the number of rows and columns for that level. You must use this to create a dynamic array of that size and then read in the data for the level. Perform input validation on all characters in the file as you read them. Do not load the file and inform the user there is a problem.</p><p>The following characters or symbols describe objects in the levels:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'#'</span>- walls</span><br><span class="line"><span class="string">'D'</span>- door</span><br><span class="line"><span class="string">'L'</span>- Ladder</span><br><span class="line"><span class="string">'P'</span>- Player</span><br><span class="line"><span class="string">'W'</span>- Wombat (<span class="keyword">the</span> starting location <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">first</span> wombat)</span><br><span class="line"><span class="string">'K'</span> Key</span><br><span class="line"><span class="string">'T'</span>- Teleport square</span><br><span class="line"><span class="string">'E'</span>- Starting location <span class="keyword">for</span> <span class="keyword">each</span> level</span><br><span class="line"><span class="string">'X'</span>- Exit(<span class="literal">one</span> way out)</span><br><span class="line"><span class="string">' '</span>- <span class="literal">empty</span> <span class="literal">space</span> (blank <span class="keyword">character</span>)</span><br></pre></td></tr></table></figure></p><p>You must concatenate the file name with the new floor number. You will not use an array of filenames? HINT: This will require string streams.</p><p>You must display that level to the user. Then you will accept the following commands from the user:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'w'</span> <span class="keyword">move</span> <span class="keyword">up</span></span><br><span class="line"><span class="string">'a'</span> <span class="keyword">move</span> <span class="keyword">left</span></span><br><span class="line"><span class="string">'s'</span> <span class="keyword">move</span> down</span><br><span class="line"><span class="string">'d'</span> <span class="keyword">move</span> <span class="keyword">right</span></span><br><span class="line"><span class="string">'u'</span> use ladder</span><br><span class="line"><span class="string">'q'</span> <span class="keyword">quit</span></span><br></pre></td></tr></table></figure></p><p>Each input from the user must be validated before any action takes place. After each command, you will update the array, then print the current status of the game to the screen. Each command is one “step” which you will use to coordinate movement and summoning of the wombats.</p><p>You will update the position of the player and all wombats after every move entered by the player. The K (key) and A (apple) symbols will be removed from the maze after the player picks them up. The D (door) is removed once the player enters that space with a key. To move between floors, the player must get to the space with the ladder. On the final level the player must reach the X to exit the maze and make their escape.</p><p>The position of each Actor (Wombat or Player) will not be stored in the array. It will be stored in the Player or Wombat object. When you read in the initial floor array the ‘W’ should be changed to a blank character. When you display the floor after each move you will print the array, adding a ‘P’ or ‘W’ as appropriate for each Actor.</p><p>Movement- To move around a level the players must use the ‘w’, ‘a’. ‘s, and ‘d’ keys. Your move function should prevent them from moving through walls, or a door if they don’t have a key. If the player has a key then they can move through a door. Simply remove a key from the player and convert the D space to an empty space.</p><p>When the player gets to a ladder space they climb it with a ‘U’ command. The ‘E’ character designates where the player starts on the new level. Time (i.e. the number of steps) is reset on each new level. When the player moves from the starting space, the E must remain. If a wombat catches a player, their location must be changed to the E square. After each move, the updated maze must be displayed for the user.</p><p>When the player moves into a space that contains a key (‘K’) they pick up the key to add it to their inventory. When a player moves into a space with a teleport square (‘T’) they are randomly positioned. A player can hold no more than 3 keys. If they enter a space and cannot hold the key it remains in that space.</p><p>Wombats (10 points): The Wombats will be similar to the Player, except they move randomly. They cannot move through walls or doors. They will ignore teleport squares. If a wombat is in a square adjacent to the player, the player will be moved back to the starting space for that level. The wombats cannot move between levels. For every 30 steps the player takes, place a new wombat at a random valid location in the current level.</p><h3 id="Design-your-Program"><a href="#Design-your-Program" class="headerlink" title="Design your Program"></a>Design your Program</h3><p>As always you should sit down with pencil and paper and sketch out the design. Develop the necessary algorithms. Do a desk test, i.e. walk through your algorithms and code to look for logic errors.</p><p>Nope! No keyboard yet! Now design your incremental development. Your program should be decomposed into functional units. If not, go back to the previous paragraph. Look at the pieces and decide on the order you should use to implement and test each part. Reading the floor into your program and then moving an actor are probably good places to start. Then add a level to test using the ladder. Once you have the development you are ready!</p><p>Nope! No keyboard yet. Design and organize the directories for your project. You should have a working directory. Maybe you need a subdirectory to hold the your floor plans. Have you designed your floor plans? What is there to design? Maybe you can have a floor that allows you to test only one function or command at a time? Be careful with file names. The default first file always has the same name. If you overwrite one then you’ll need to create it again. Always have one directory to save a copy of your code as you get each increment to compile. If you’re paranoid (I know I am) maybe you have more than one stash and on different devices?</p><p>Now, you’re ready to code!</p><p>The moral is: Always plan ahead and make it as complete as you can!</p>]]></content>
    
    <summary type="html">
    
      代写一款迷宫游戏，通过命令行界面进行控制即可。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>CS9223-Programming-for-Big-Data</title>
    <link href="https://tk1307993.coding.me/CS9223-Programming-for-Big-Data.html"/>
    <id>https://tk1307993.coding.me/CS9223-Programming-for-Big-Data.html</id>
    <published>2021-09-01T01:17:15.000Z</published>
    <updated>2021-08-31T00:52:06.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>You must use Hadoop (Map/Reduce Java or Python, or Pig, with Spark as extra credit) to analyze the Yelp data challenge: <a href="https://www.yelp.com/dataset_challenge" target="_blank" rel="noopener">https://www.yelp.com/dataset_challenge</a>.</p><p>Specifically, you must provide the answers (and code) to the 5 following questions:</p><ol><li><p>Summarize the number of reviews by US city, by business category.</p></li><li><p>Rank all cities by # of stars descending, for each category</p></li><li><p>is the average rank (# stars) for businesses within 20 miles of the University of Wisconsin Madison, by type of business?<br>Center: University of Wisconsin - Madison<br>Latitude: 43 04’ 30” N, Longitude: 89 25’ 2” W<br>Decimal Degrees: Latitude: 43.0766, Longitude: -89.4125<br>The bounding box for this problem is ~20 miles, which we will loosely define as 20 minutes. So the bounding box is a square box, 40 minutes long each side (of longitude and latitude), with UWM at the center.</p></li><li><p>Rank reviewers by number of reviews. For the top 10 reviewers, show their average number of stars, by category.</p></li><li><p>For the top 10 and bottom 10 food business near UWM (in terms of stars), summarize star rating for reviews in June through December.</p></li></ol><h3 id="Grading-total-150-points"><a href="#Grading-total-150-points" class="headerlink" title="Grading (total 150 points)"></a>Grading (total 150 points)</h3><p>This assignment MUST be completed on your own. Duplicate assignments will be flagged and failed.</p><ul><li>25 points each question (1-5) = 125 points</li><li>15 points for the submission report and presentation quality</li><li>10 points for code quality</li></ul><h3 id="Extra-Points-50-extra-points"><a href="#Extra-Points-50-extra-points" class="headerlink" title="Extra Points (50 extra points)"></a>Extra Points (50 extra points)</h3><ol><li>20 points: complete the assignment in Apache Spark and review the difference in approaches (you must still complete the original exercise).</li><li>10 points: provide suitable statistical analysis of your results with R.</li><li>20 points: provide visualizations for results (distributions, graphs, maps, in R).</li></ol><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>In a single zip package, submit:</p><ul><li>report, max 10 pages.</li><li>runnable code for all questions, clearly labeled (no dataset).</li><li>results data for each question.</li></ul><h3 id="Hints-References"><a href="#Hints-References" class="headerlink" title="Hints/References"></a>Hints/References</h3><ul><li>Apache Spark: <a href="http://spark.apache.org/" target="_blank" rel="noopener">http://spark.apache.org/</a></li><li>Pig JSON loader: <a href="https://pig.apache.org/docs/r0.10.0/func.html#jsonloadstore" target="_blank" rel="noopener">https://pig.apache.org/docs/r0.10.0/func.html#jsonloadstore</a></li><li>Pig Latin: <a href="http://infolab.stanford.edu/~olston/publications/sigmod08.pdf" target="_blank" rel="noopener">http://infolab.stanford.edu/~olston/publications/sigmod08.pdf</a></li><li>R maps - leaflet: <a href="https://rstudio.github.io/leaflet/" target="_blank" rel="noopener">https://rstudio.github.io/leaflet/</a></li></ul>]]></content>
    
    <summary type="html">
    
      用Hadoop代写大数据作业，对给定的Dataset进行分析。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Hadoop Mapreduce Spark" scheme="https://tk1307993.coding.me/tags/Hadoop-Mapreduce-Spark/"/>
    
  </entry>
  
  <entry>
    <title>FIT1043-Visualising-Airport-Traffic</title>
    <link href="https://tk1307993.coding.me/FIT1043-Visualising-Airport-Traffic.html"/>
    <id>https://tk1307993.coding.me/FIT1043-Visualising-Airport-Traffic.html</id>
    <published>2021-08-31T01:17:15.000Z</published>
    <updated>2021-08-31T00:47:13.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The aim of this assignment is to investigate and visualize data. In particular, we will identify trends, gain insights from how those trends change over time.</p><p>The data we will use contains Airport traffic data and comes from the Australian Bureau of Infrastructure, Transport and Regional Economics.</p><ul><li><p>The CSV file contains 30 years worth of monthly data listing international air traffic volumes in terms of passengers, freight and mail, to and from Australian airports.</p></li><li><p>The file is available on Moodle and publicly available from data.gov.au</p></li></ul><h3 id="Hand-in-Requirements"><a href="#Hand-in-Requirements" class="headerlink" title="Hand-in Requirements"></a>Hand-in Requirements</h3><p>Please hand in a PDF file containing your answers to all the questions.</p><ul><li><p>You can use Word or other word processing software to format your submission. Just save the final copy to a PDF before submitting.</p></li><li><p>Make sure to include screenshots/images of the graphs you generate in order to justify your answers to all the questions. (You will need to use screen-capture functionality to create appropriate images.)</p></li><li><p>We would like to see the Python code you write to format the data. Please include a copy your Python code in your submission, (either submitting scripts / Jupiter notebooks, or copying the code into your report).</p></li></ul><h3 id="Python-Availability"><a href="#Python-Availability" class="headerlink" title="Python Availability"></a>Python Availability</h3><p>You will need to use Python to complete the assignment. You can do this by either:</p><p>1) running a Jupyter Notebook on a computer in the labs; or<br>2) installing Python (we recommend Anaconda) on your own machine.</p><h3 id="Assignment-Tasks"><a href="#Assignment-Tasks" class="headerlink" title="Assignment Tasks"></a>Assignment Tasks</h3><p>This assignment involves building a visualisation using Motion Chart and then answering a series of questions about the data.</p><h3 id="Visualising-Airport-Traffic"><a href="#Visualising-Airport-Traffic" class="headerlink" title="Visualising Airport Traffic"></a>Visualising Airport Traffic</h3><p>The aim of the first part of the assignment is to build a Motion Chart showing passenger, freight and mail quantities over time for four different airports in Australia (Melbourne, Sydney, Brisbane and Perth). More specifically, you should:</p><ul><li><p>Generate a Motion chart with Passengers_Total on the x-axis, Freight_Total_(tonnes) on the y-axis and where the color and size of the bubbles is given by the Mail_Total_(tonnes).</p></li><li><p>Note that the CSV file is both too big and not in the right format to visualise directly, so you will first need to aggregate the data using Python at both the ‘Year’ and ‘AustralianPort’ level. (Code to help you do this was discussed during the lectures.) You need to select only four Australian airports before the aggregation.</p></li><li><p>You can then output the data as a CSV file, which you can use in order to create the appropriate visualisation (see Activity: Motion Chart - Motion Chart in Python in Alexandria).</p></li></ul><p>Having graphed the data as a Motion Chart, answer the following questions:</p><ol><li><p>Why are the values lower in 2016 than they were in 2015?</p></li><li><p>Which city has the largest number of international air passengers traveling through it in 2015?</p></li><li><p>In which year did Brisbane have almost the same number of passenger numbers as Melbourne?</p></li><li><p>(Bonus question) Has the number of passengers travelling through Sydney airport ever decreased from one year to the next? If so, when did it happen? Any idea why that might have occurred?</p></li></ol>]]></content>
    
    <summary type="html">
    
      代写Python作业，使用Motion Chart将数据可视化。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS313-Zombiquarium</title>
    <link href="https://tk1307993.coding.me/CS313-Zombiquarium.html"/>
    <id>https://tk1307993.coding.me/CS313-Zombiquarium.html</id>
    <published>2021-08-26T01:17:15.000Z</published>
    <updated>2021-08-26T07:45:19.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This is the Software Design Description (SDD) for the Zombiquarium mini-game application. Note that this document format is based on the IEEE Standard 1016-2009 recommendation for software design.</p><h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>This document is to serve as the blueprint for the construction of the Zombiquarium application. This design will use UML class diagrams to provide complete detail regarding all packages, classes, instance variables, class variables, and method signatures needed to build the application. In addition, UML Sequence diagrams will be used to specify object interactions post-initialization of the application, meaning in response to user interactions or timed events.</p><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>Zombiquarium will be one mini-game among many to be included in the Plants vs. Zombies application. Tools for its construction should be developed with this in mind such that additional mini-games may avoid duplication of work. As such, a framework called the MiniGame Framework, will be designed and constructed along with the Zombiquarium game such that it may be used to build additional mini-games. So, this design contains design descriptions for the development of both the framework and game. Note that Java is the target language for this software design.</p><h3 id="Definitions-acronyms-and-abbreviations"><a href="#Definitions-acronyms-and-abbreviations" class="headerlink" title="Definitions, acronyms, and abbreviations"></a>Definitions, acronyms, and abbreviations</h3><p>Class Diagram - A UML document format that describes classes graphically. Specifically, it describes their instance variables, method headers, and relationships to other classes.</p><p>IEEE - Institute of Electrical and Electronics Engineers, the “world’s largest professional association for the advancement of technology”.</p><p>Framework - In an object-oriented language, a collection of classes and interfaces that collectively provide a service for building applications or additional frameworks all with a common need.</p><p>Java - A high-level programming language that uses a virtual machine layer between the Java application and the hardware to provide program portability.</p><p>Mini-Game - A standalone game that is a subset of a larger game application, typically sharing the primary game theme with that parent game application.</p><p>Mini Game Framework - The software framework to be developed in tandem with the Zombiquarium game such that additional mini-games can easily be constructed. Note that in the Zombiquarium SRS this was sometimes called the “Mini Zombie Game Framework”, but has been renamed the “Mini Game Framework”, since it’s not Zombie-specific.</p><p>Plants vs. Zombies - The PopCap Games game that is the parent application of our Zombiquarium mini-game. Note that Zombiquarium is to be distributed as part of that program.</p><p>Sequence Diagram - A UML document format that specifies how object methods interact with one another.</p><p>Sprite - a renderable, and sometimes movable or clickable image in the game. Each Sun, Zombie, and Brain will be its own Sprite, as will GUI controls.</p><p>SpriteType - a type of Sprite, meaning all the artwork and states corresponding to a category of sprite. We do this because all the suns share artwork, so we will load all their artwork into a common Sprite Type, but each Sprite has its own position and velocity, so each will be its own Sprite that knows what Sprite Type it belongs to.</p><p>UML - Unified Modeling Language, a standard set of document formats for designing software graphically.</p><p>Zombie - An undead creature, meaning something that has died and then come back to life. These beings are typically slow moving and love to eat brains.</p><p>Zombiquarium - The title of the mini-game described by this document. Again, note that this game will be distributed as part of the Plants vs. Zombies application.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>This Software Design Description document provides a working design for the Zombiquarium software application as described in the Zombiquarium Software Requirements Specification. Note that all parties in the implementation stage must agree upon all connections between components before proceeding with the implementation stage. Section 2 of this document will provide the Package-Level Viewpoint, specifying the packages and frameworks to be designed. Section 3 will provide the Class-Level Viewpoint, using UML Class Diagrams to specify how the classes should be constructed. Section 4 will provide the Method-Level System Viewpoint, describing how methods will interact with one another. Section 5 provides deployment information like file structures and formats to use. Section 6 provides a Table of Contents, an Index, and References. Note that all UML Diagrams in this document were created using the VioletUML editor.</p><h3 id="Package-Level-Design-Viewpoint"><a href="#Package-Level-Design-Viewpoint" class="headerlink" title="Package-Level Design Viewpoint"></a>Package-Level Design Viewpoint</h3><p>As mentioned, this design will encompass both the Zombiquarium game application and the Mini-Game Framework to be used in its construction. In building both we will heavily rely on the Java API to provide services. Following are descriptions of the components to be built, as well as how the Java API will be used to build them.</p><h3 id="Zombiquarium-and-Mini-Game-overview"><a href="#Zombiquarium-and-Mini-Game-overview" class="headerlink" title="Zombiquarium and Mini Game overview"></a>Zombiquarium and Mini Game overview</h3><p>The Zombiquarium and MiniGame framework will be designed and developed in tandem. Figure 2.1 specifies all the components to be developed and places all classes in home packages.</p><h3 id="Java-API-Usage"><a href="#Java-API-Usage" class="headerlink" title="Java API Usage"></a>Java API Usage</h3><p>Both the framework and the mini-game application will be developed using the Java programming languages. As such, this design will make use of the classes specified in Figure 2.2.</p><h3 id="Class-Level-Design-Viewpoint"><a href="#Class-Level-Design-Viewpoint" class="headerlink" title="Class-Level Design Viewpoint"></a>Class-Level Design Viewpoint</h3><p>As mentioned, this design will encompass both the Zombiquarium game application and the Mini-Game Framework. The following UML Class Diagrams reflect this. Note that due to the complexity of the project, we present the class designs using a series of diagrams going from overview diagrams down to detailed ones.</p><h3 id="Method-Level-Design-Viewpoint"><a href="#Method-Level-Design-Viewpoint" class="headerlink" title="Method-Level Design Viewpoint"></a>Method-Level Design Viewpoint</h3><p>Now that the general architecture of the classes has been determined, it is time to specify how data will flow through the system. The following UML Sequence Diagrams describe the methods called within the code to be developed in order to provide the appropriate event responses.</p><h3 id="File-Structure-and-Formats"><a href="#File-Structure-and-Formats" class="headerlink" title="File Structure and Formats"></a>File Structure and Formats</h3><p>Note that the Mini Game Framework will be provided inside MiniGameFramework.jar, a Java ARchive file that will encapsulate the entire framework. This should be imported into the necessary project for the Zombiquarium application and will be included in the deployment of a single, executable JAR file titled Zombiquarium.jar. Note that all necessary data and art files must accompany this program. Figure 5.1 specifies the necessary file structure the launched application should use. Note that all necessary images should of course go in the image directory.</p><p>The ZombiquariumGameData.txt provides the file and state names for all sprite states in the game. The file is a raw text file that can be used to describe M Sprite Types, each with their own N states as follows:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NumSpriteTypes</span><br><span class="line">SpriteType_1<span class="string">|NumStatesFor_1</span></span><br><span class="line">SpriteType_1STATE_1<span class="string">|SpriteType_1STATE_1_FileNameAndPath</span></span><br><span class="line">SpriteType_1STATE_N1<span class="string">|SpriteType_1STATE_N1_FileNameAndPath</span></span><br><span class="line">SpriteType_M<span class="string">|NumStatesFor_M</span></span><br><span class="line">SpriteType_MSTATE_1<span class="string">|SpriteType_MSTATE_1_FileNameAndPath</span></span><br><span class="line">SpriteType_MSTATE_N2<span class="string">|SpriteType_MSTATE_N2_FileNameAndPath</span></span><br></pre></td></tr></table></figure></p><h3 id="Supporting-Information"><a href="#Supporting-Information" class="headerlink" title="Supporting Information"></a>Supporting Information</h3><p>Note that this document should serve as a reference for those implementing the code, so we’ll provide a table of contents to help quickly find important sections.</p>]]></content>
    
    <summary type="html">
    
      代写游戏Zombiquarium，对软件设计方法论进行实践。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>CS206-Stacks-Queues-and-Binary-Search-Trees-with-Duplicates</title>
    <link href="https://tk1307993.coding.me/CS206-Stacks-Queues-and-Binary-Search-Trees-with-Duplicates.html"/>
    <id>https://tk1307993.coding.me/CS206-Stacks-Queues-and-Binary-Search-Trees-with-Duplicates.html</id>
    <published>2021-08-20T01:17:15.000Z</published>
    <updated>2021-08-20T01:19:49.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>In this assignment you will implement data structures that provide an implementation for four abstract data types: A double-ended singly linked list, a stack, a queue, and a binary search tree that allows duplicates. Along the way you will get more experience with implementing Java interfaces, writing JUnit test cases, and using the Adapter design pattern.</p><h3 id="Part-1-Double-Ended-Singly-Linked-List"><a href="#Part-1-Double-Ended-Singly-Linked-List" class="headerlink" title="Part 1 - Double Ended Singly Linked List"></a>Part 1 - Double Ended Singly Linked List</h3><h4 id="DoubleEndedLLTester"><a href="#DoubleEndedLLTester" class="headerlink" title="DoubleEndedLLTester"></a>DoubleEndedLLTester</h4><p>Create DoubleEndedLLTester.java to test all public methods in DoubleEndedLL.java class, which implements DoubleEndedLLInterface. You must have at least one test for every method, but for some methods it is better to create multiple tests for separate conditions. For example, removing from an empty list should have a separate test from removing from a non-empty one.</p><p>You do not need to completely write your DoubleEndedLLTester before starting to define DoubleEndedLL. In fact, it is recommended that you use an iterative test-driven development process: write some tests in DoubleEndedLLTester, implement the functionality in DoubleEndedLL, test your implementation with DoubleEndedLLTester, write more tests, etc.</p><h4 id="DoubleEndedLL"><a href="#DoubleEndedLL" class="headerlink" title="DoubleEndedLL"></a>DoubleEndedLL</h4><p>Read the documentation in the source code file for the DoubleEndedLLInterface. You will be creating DoubleEndedLL.java class to implement this interface. Think of the “implements” as a contract - it is your responsibility to ensure all of the methods in the interface are present and functional in your class. For method headers, you may simply copy over the appropriate comments from the interface file. However, you must still comment the constructor and any other methods not present in the interface.</p><p>DoubleEndedLL must be a Generic class that implements a singly-linked list with a head and tail reference, using an inner class Node. You may find it helpful to copy over your Node class from PA1 and modify it for this assignment. The only public methods you may have are the no-arg constructor and the interface methods.</p><p>Files to Submit</p><ol><li>DoubleEndedLLTester.java</li><li>DoubleEndedLL.java</li></ol><h4 id="Part-2-Implementing-Stacks-and-Queues"><a href="#Part-2-Implementing-Stacks-and-Queues" class="headerlink" title="Part 2 - Implementing Stacks and Queues"></a>Part 2 - Implementing Stacks and Queues</h4><p>Now that DoubleEndedLL is fully built and tested, use it to implement a Stack and a Queue. Both MyStack and MyQueue are generic classes that implement Stack_QueueInterface, however their functionality will differ.</p><p>In order to get full credit for this section, you must use the Adaptive Design Pattern to implement these classes. To do that, create an instance variable of type DoubleEndedLLInterface (instantiated to a DoubleEndedLL) and use it to perform all of the necessary class methods. If these classes are complicated, you are overthinking the problem.</p><p>As is often the case when the Adapter pattern is used, if the adapted class (DoubleEndedLL in this case) is thoroughly tested and debugged, the adapting class shouldn’t need much testing because almost all of the work is being handled by delegation to the adapted class’s methods. We provide you with a few simple tests (MyStackTester.java and MyQueueTester.java) which should be sufficient but you are welcome to write your own tests as well.</p><h4 id="MyStack"><a href="#MyStack" class="headerlink" title="MyStack"></a>MyStack</h4><p>Stacks are first-in last-out data structures, which you will implement using your internal DoubleEndedLL object by mapping the appropriate methods to your MyStack class methods. One choice of mappings is better than another. You must choose the most efficient mapping. In HW3.txt, indicate what methods were chosen to perform stack operations efficiently and why. You must mention every method in the MyStack class.</p><p>MyQueue<br>Queues are first-in first-out data structures, which you will implement using your internal DoubleEndedLL object by mapping the appropriate methods to your MyQueue class methods. One choice of mappings is better than another. You must choose the most efficient mapping. In HW3.txt, indicate what methods were chosen to perform stack operations efficiently and why. You must mention every method in the MyQueue class.</p><p>Files to Submit</p><ol><li>MyStack.java</li><li>MyQueue.java</li><li>HW3.txt</li></ol><h4 id="Part-3-Duplicate-Key-BST"><a href="#Part-3-Duplicate-Key-BST" class="headerlink" title="Part 3 - Duplicate Key BST"></a>Part 3 - Duplicate Key BST</h4><p>Most often it is assumed that a binary search tree does not contain duplicate keys. However, sometimes we need to deal with problems that contain duplicates. For example, a database of car services might contain one record for each service for every car; so if a car got serviced twice, there will be two records with the same key (car’s VIN) and different dates (service dates). To accomplish this, we might use a data structure called a “BST with duplicates”, or BSTDup.</p><p>Your node class might look something like this:<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> class BSTDupNode &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">key</span>;</span><br><span class="line">  <span class="keyword">private</span> ArrayList&lt;T&gt; elements;</span><br><span class="line">  <span class="keyword">private</span> BSTDupNode left;</span><br><span class="line">  <span class="keyword">private</span> BSTDupNode right;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constructor</span></span><br><span class="line">  <span class="keyword">public</span> BSTDupNode(<span class="built_in">int</span> <span class="built_in">key</span>, T elem, BSTDupNode left, BSTDupNode right) &#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">key</span> = <span class="built_in">key</span>;</span><br><span class="line">    elements = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    elements.<span class="built_in">add</span>(elem);</span><br><span class="line">    <span class="keyword">this</span>.left = left;</span><br><span class="line">    <span class="keyword">this</span>.right = right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Think about what other methods you might need...</span></span><br><span class="line"><span class="comment">   * accessors (data, key, left, right)</span></span><br><span class="line"><span class="comment">   * mutators (add/remove data, updates children)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The image on the left is an example of just the tree structure, and each node displays only the key. The image on the right is an example of how your BST would actually be used, in this case to store the names of sweets. For your implementation, nodes will contain an ArrayList of elements, rather than a single one. That allows the BST structure to be preserved, while still allowing duplicate keys.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构，包括Stacks，Queues，以及Binary Search Trees.
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Java代写CSCI112-Connect4</title>
    <link href="https://tk1307993.coding.me/CSCI112-Connect4.html"/>
    <id>https://tk1307993.coding.me/CSCI112-Connect4.html</id>
    <published>2021-08-04T02:56:11.000Z</published>
    <updated>2021-08-03T03:09:47.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this project you will help determine the best moves for an abbreviated game of Connect4. The program will analyze the best starting position to make a move. Due to processing times our Connect4 board will be 4 x 4, versus the actual 7x7 board of the game.</p><p>The program will explore making its first move in each of the four columns. The first action will be to make a move in one of the four columns. The program will then pass the Board, and the next player to a Play method. The Play method will analyze the board and call itself up to 4 times, representing the possible number of next moves. At times the Play method may call itself less than four times due to the condition that a column is full. The Play method will return a 1 if the game is won by the first player, -1 if won by the second player, and zero, if that moves leads to a tie. Hence Play (board, clr) gives you the Net wins for first player, given the board position represented by board, and the next move is to be taken by clr.</p><p>A game is won if 4 discs of the same color appear in a column, row or diagonal.</p><h3 id="Helpful-code"><a href="#Helpful-code" class="headerlink" title="Helpful code"></a>Helpful code</h3><p>Code is provided to do the same type of logic as this problem, except with a Tic Tac Toe Board. In the Tic Tac Toe game, after the first move, there are 8 possible moves by the second player. In Connect4, with our abridged board, there are always a maximum of 4 next moves. Also in the Tic Tac Toe game the next move can be anywhere on the Board, while in Connect4, only the bottom of an open column can be chosen for the next move.</p><h3 id="Tic-Tac-Toe-Program-Logic"><a href="#Tic-Tac-Toe-Program-Logic" class="headerlink" title="Tic Tac Toe Program Logic"></a>Tic Tac Toe Program Logic</h3><p>The logic of the program provided prints out information for X making the first move in one of the three spaces of a diagonal. In the Main method, within a loop iterating through the 3 diagonal spaces, the program makes a first move and then calls Play , passing the current board state, and next player.</p><p>Within Play, the method first checks to see if the current board has a winning position for either player. If so, 1(X) or -1(O) is returned. Also a non-winning full board is checked. If the board is full, with no winner, then zero is returned. The CheckBoard method does this analysis of the board.</p><p>If the board is not a complete game, CheckBoard returns 3. This result prompts Play to recursively call itself with all possible moves for the current player. The current board array is copied to another array. to ensure future executions of the method do not alter the current board.</p><h3 id="Expected-Results"><a href="#Expected-Results" class="headerlink" title="Expected Results"></a>Expected Results</h3><p>It is advised to make your Connect4 program also work on a 3 by 3 matrix. This is easier to test with, since the 4x4 does take more processing. If you run a 3x3 Connect4 game , these are the results you should achieve:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NetWins <span class="keyword">for</span> column <span class="number">0</span>:  <span class="number">112</span></span><br><span class="line">Number of recursion <span class="keyword">call</span><span class="variable">s:</span> <span class="number">1087</span></span><br><span class="line">Red Win<span class="variable">s:224</span>   Blue Win<span class="variable">s:</span> <span class="number">112</span></span><br><span class="line">******************</span><br><span class="line">NetWins <span class="keyword">for</span> column <span class="number">1</span>:  <span class="number">6</span></span><br><span class="line">Number of recursion <span class="keyword">call</span><span class="variable">s:</span> <span class="number">1103</span></span><br><span class="line">Red Win<span class="variable">s:168</span>   Blue Win<span class="variable">s:</span> <span class="number">162</span></span><br><span class="line">******************</span><br><span class="line">NetWins <span class="keyword">for</span> column <span class="number">2</span>:  <span class="number">112</span></span><br><span class="line">Number of recursion <span class="keyword">call</span><span class="variable">s:</span> <span class="number">1087</span></span><br><span class="line">Red Win<span class="variable">s:224</span>   Blue Win<span class="variable">s:</span> <span class="number">112</span></span><br><span class="line">******************</span><br></pre></td></tr></table></figure></p><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>The zipped java project file, which contains all your source code, input files and Eclipse related projects, is to be submitted You may include more than one test file to indicate your program is working.</p><h3 id="Working-on-This-Assignment"><a href="#Working-on-This-Assignment" class="headerlink" title="Working on This Assignment"></a>Working on This Assignment</h3><p>You should modularize your design so that you can test it regularly. Make sure that at all times you have a working program. You can implement methods that perform one task at a time. This way, if you run out of time, at least parts of your program will be functioning properly.</p><h3 id="Final-step-optional"><a href="#Final-step-optional" class="headerlink" title="Final step (optional)"></a>Final step (optional)</h3><p>When considering the next possible moves, if the player can win, have that player only make that move. For example, if all four columns have an opening, but moving in column 3 wins the game, only recursively call moving in column 3.</p>]]></content>
    
    <summary type="html">
    
      代写游戏Connect4，一款消除类游戏。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：INFO1156-Text-To-Html</title>
    <link href="https://tk1307993.coding.me/INFO1156-Text-To-Html.html"/>
    <id>https://tk1307993.coding.me/INFO1156-Text-To-Html.html</id>
    <published>2021-08-03T02:56:11.000Z</published>
    <updated>2021-08-03T02:59:07.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h3><p>Start with the following code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span> </span>&#123;</span><br><span class="line">  <span class="function">ifstream <span class="title">infile</span><span class="params">( argv[<span class="number">1</span>] )</span></span>;</span><br><span class="line">  <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( infile.get( ch ) ) &#123;</span><br><span class="line">    <span class="built_in">cout</span>.put( ch );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create a C++ application that converts an old-style text file into a format more appropriate for use in a computer, smart-phone, or e-book reader. Specially, this program converts an UTF-8 text file (for example, PlatoTest.txt) to an xhtml 1.0 file (for example, PlatoTest.html) containing the same textual content as the original UTF-8 text file.</p><p>Note: If the input file has three newlines in a row, the output file should have only two <br> tags replacing the three newlines. Overall, the number of break tags is always one less than the number of consecutiveor singlenewlines.</p><p>The executable file must be named: txt2html.exe</p><p>The program will operate as a command-line utility (not a console input program).</p><h3 id="An-Example-Convert-PlatoTest-txt-to-PlatoTest-html"><a href="#An-Example-Convert-PlatoTest-txt-to-PlatoTest-html" class="headerlink" title="An Example - Convert PlatoTest.txt to PlatoTest.html"></a>An Example - Convert PlatoTest.txt to PlatoTest.html</h3><p>Below is an UTF-8 text file named “PlatoTest.txt”. Note that represents an <enter> in the text.<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">The Project Gutenberg EBook <span class="keyword">of</span> The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">This eBook is <span class="keyword">for</span> <span class="keyword">the</span> use <span class="keyword">of</span> anyone anywhere <span class="keyword">at</span> no cost <span class="keyword">and</span> <span class="keyword">with</span> almost no restrictions whatsoever. You may copy <span class="keyword">it</span>, give <span class="keyword">it</span> away <span class="keyword">or</span> re-use <span class="keyword">it</span> under <span class="keyword">the</span> terms <span class="keyword">of</span> <span class="keyword">the</span> Project Gutenberg License included <span class="keyword">with</span> this eBook <span class="keyword">or</span> online <span class="keyword">at</span> www.gutenberg.org</span><br><span class="line">Title: The Republic</span><br><span class="line">Author: Plato</span><br></pre></td></tr></table></figure></enter></p><p>The UTF-8 text file should convert to the html file named “PlatoTest.html” with the following source code:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span> xml:lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta <span class="keyword">http</span>-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">&lt;title&gt;PlatoTest&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">The Project Gutenberg EBook <span class="keyword">of</span> The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">This eBook is <span class="keyword">for</span> <span class="keyword">the</span> use <span class="keyword">of</span> anyone anywhere <span class="keyword">at</span> no cost <span class="keyword">and</span> <span class="keyword">with</span> almost no restrictions whatsoever. You may copy <span class="keyword">it</span>, give <span class="keyword">it</span> away <span class="keyword">or</span> re-use <span class="keyword">it</span> under <span class="keyword">the</span> terms <span class="keyword">of</span> <span class="keyword">the</span> Project Gutenberg License included <span class="keyword">with</span> this eBook <span class="keyword">or</span> online <span class="keyword">at</span> www.gutenberg.org</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">Title: The Republic</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">Author: Plato</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>This example would be run from the command prompt by typing:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> PlatoTest<span class="selector-class">.txt</span> PlatoTest.html</span><br></pre></td></tr></table></figure></p><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p>If the user provides an optional command line parameter “-r”, print the report (described in the next section) to the console:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">-r</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> PlatoTest<span class="selector-class">.txt</span> PlatoTest<span class="selector-class">.html</span> -r</span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> PlatoTest<span class="selector-class">.txt</span> -r PlatoTest.html</span><br></pre></td></tr></table></figure></p><h3 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h3><p>Provided the “-r” switch your program will display to the console a report that displays:</p><ul><li>The number of complete lines read from the input file.</li><li>The number of paragraphs (indicated by <br> tags)</li></ul><h3 id="Additional-Examples"><a href="#Additional-Examples" class="headerlink" title="Additional Examples"></a>Additional Examples</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> -r <span class="string">"War and Peace.txt"</span></span><br></pre></td></tr></table></figure><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> <span class="string">"War and Peace.txt"</span> -r</span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> <span class="string">"War and Peace.txt"</span> W&amp;P<span class="selector-class">.html</span> -r</span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> War&amp;Peace<span class="selector-class">.txt</span> -r War&amp;Peace.html</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      用C++代写一个文本转HTML的工具。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS134-Tutor-Scheduling</title>
    <link href="https://tk1307993.coding.me/CS134-Tutor-Scheduling-1.html"/>
    <id>https://tk1307993.coding.me/CS134-Tutor-Scheduling-1.html</id>
    <published>2021-07-06T23:58:59.000Z</published>
    <updated>2021-07-07T00:01:04.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>In this project you will help determine the best of times for tutoring services for a class based upon student availability. The input to the program will be the information provided by the student, including the student ID, days of the week, and hours the student can attend tutoring. The output is a list days and time periods that will maximize the numbers of students who can attend at least 1 hour of tutoring. Make sure you look at the examples to understand the goal. The goal is not to pick the days and times noted by the most students, but rather dates and times that serve the maximum number of different students.</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The goal of this programming project is for you to master (or at least get practice on) the following tasks:</p><ul><li>working with balanced expressions</li><li>reading data from input files</li><li>using the provided Stack class</li><li>writing classes</li><li>working with existing code</li></ul><h3 id="Input-Dataset"><a href="#Input-Dataset" class="headerlink" title="Input Dataset"></a>Input Dataset</h3><ul><li>( ) are the symbols surrounding student data</li><li>&lt; &gt; are the symbols surrounding day of the week data</li><li style="list-style: none"><input type="checkbox"> are the symbols surrounding the time period.</li></ul><p>For example:</p><p>(A Smith <m [0900][1000][1100]=""> <h [1400]=""> ) ( S Jones <t [2100][1800]="">) means A Smith can go to tutoring on Mondays from 9-11, and Thursday 2-3, and S Jones can go on Tuesday from 6-7 and 9-10. Note the period order is not significant. There are no implied ranges.</t></h></m></p><p>Assume the only tutoring days are M,T,W,H,F and the hours are from 0900 to 2100, hence the last hour is 2100 (9PM – 10 PM). Also assume there are no spaces or line breaks in the input, and that every student will have a unique name.</p><h3 id="Program-Logic"><a href="#Program-Logic" class="headerlink" title="Program Logic"></a>Program Logic</h3><p>This two-dimensional array can be used to store the various students who can come for tutoring in that time period.</p><p>The first part of your program should read the input ,data validate its format, and populate the array. You must use a Stack as to interpret the Expression. Your program should prompt the user for which test dataset to run. The user should enter 1 for test dataset 1, ..up to n (depending on the number you provide.</p><p>The second part should analyze the array to pick 3 time slots that covers the most different students.</p><p>For example, in the abbreviated schedule below,Thursday at 1200, Wednesday at 0900 and Friday at 1000 would cover the most (in this case all) students. Each cell represents the students who can attend tutoring at that time period.</p><p>Your program should do the following:</p><ol><li>Read the student data from one input file. There will be many records, each giving information about one or more students.</li><li>Throw Exceptions for ill formed expressions. However after reading an ill-formed expression, read the next record from the file.</li><li>Use a stack to interpret the data input</li><li>Store the student information in the 2 dimensional array</li><li>Interpret the array to find the best 3 slots to cover the most students.</li></ol><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>The zipped java project file, which contains all your source code, input files and Eclipse related projects, is to be submitted You may include more than one test file to indicate your program is working.</p><p>You are responsible for making sample test cases (at least 3) as well as running the sets provided.</p>]]></content>
    
    <summary type="html">
    
      代写日程表应用，练习Stack的用法。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS217-Union-Find</title>
    <link href="https://tk1307993.coding.me/CS217-Union-Find.html"/>
    <id>https://tk1307993.coding.me/CS217-Union-Find.html</id>
    <published>2021-06-27T04:11:07.000Z</published>
    <updated>2021-06-27T04:13:25.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Read-the-instructions-carefully-before-writing-any-code"><a href="#Read-the-instructions-carefully-before-writing-any-code" class="headerlink" title="Read the instructions carefully before writing any code!!"></a>Read the instructions carefully before writing any code!!</h3><p>In this phase of the assignment, you will:</p><ul><li>Implement your proposed solution to the problem</li><li>Implement a data structure designed specifically for this application (called a “union find” or “disjoint set”)</li><li>Show that both solutions solve this problem</li><li>Compare the running times of the two data structures on a pathological case</li></ul><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>Create an interface for the ADT described in phase 1. We’re not going to include listMembers, so don’t include it in your interface!</p><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>Write a class that implements that interface using the strategy you came up with in phase 1. It should be generic because we’ll be testing with Strings (the stated problem in phase 1), and Integers (for testing timings in the pathological case)</p><h3 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h3><p>Write a “union find” data structure that implements the same interface as your solution. The Union find works as follows:</p><p>The union find data structure is a “forest” data structure (a bunch of trees). A node stores a value, its “rank,” and its parent. The rank is essentially the height of the subtree rooted at that node.</p><p>Each element in your data structure (in our example problem, an element is a student’s name), will have an associated node. You’ll need to be able to efficiently retrieve an element’s node; think about how you might achieve this.</p><p>The ADT operations can be implemented via the following pseudocode:</p><p>MakeSet(T data): create a node containing data. It will be its own parent and will have rank 0.</p><p>CombineGroup(T a, T b): Compute repA = find(a), repB = find(b). If repA and repB are the same, then a and b are already in the same set and you don’t need to do anything. Otherwise, assume repA lower rank than repB. set repA’s parent to be repB (if repB has lower rank, do the opposite). If the ranks are equal, increase the rank of whichever node is the new parent. For example, if repA and repB both have rank 2, you could set repA’s parent to be repB, and repB’s new rank would be 3 (repA’s rank doesn’t change).</p><p>Find(T data): You probably want to implement this using a helper method that takes and returns a node:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="keyword">Node</span><span class="title">&lt;T</span>&gt; findNode(<span class="keyword">Node</span><span class="title">&lt;T</span>&gt; n):</span><br></pre></td></tr></table></figure></p><p>if n.parent == n, then n is the representative of its group, so return it<br>otherwise: set n.parent to findNode(n.parent) and then return n’s new parent.</p><p>This method “flattens” all the nodes in the tree on the path from n to the root (its representative), and make any subsequent find operations super fast. After calling find, n and all of its ancestors will be connected directly to the root!</p><p>GetGroup(T data): this method can be implemented using a traversal</p><h3 id="Part-3-1"><a href="#Part-3-1" class="headerlink" title="Part 3"></a>Part 3</h3><p>Write a function called groupStudents that takes the interface you defined as a parameter. This will allow you to call the function with either YOUR implementation OR the UnionFind data structure. This function should load the input file, use the data structure to compute and then print the list of students in each group. Note: there is no operation in the ADT that gives you the list of groups, so you’ll have to figure out how you can use the supported operations to do so.</p><p>Here is a sample input file: sampleInput.txt</p><h3 id="Part-4"><a href="#Part-4" class="headerlink" title="Part 4"></a>Part 4</h3><p>Compare the two implementations for the pathological case described below. In this example, all of the elements will be combined into a single group as slowly as possible.</p><p>The elements will be the integers from 0 to n.</p><p>Combine the groups as follows until there is a single group</p><p>First combine 0 and 1, 2 and 3, 4 and 5, etc, so you have n/2 groups with 2 elements each</p><p>Then combine 0 and 2, 4 and 6, 8 and 10, etc. You’ll have n/4 groups with 4 elements each repeat this process until everything is in a single group.</p><p>This test case will require lots and lots of unions with groups of equal size, which will be the worst case for either implementation for the ADT.</p><p>Time this testcase for various values of n, for both implementations and report your results.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构作业，按要求实现各类ADT.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS134-Tutor-Scheduling</title>
    <link href="https://tk1307993.coding.me/CS134-Tutor-Scheduling.html"/>
    <id>https://tk1307993.coding.me/CS134-Tutor-Scheduling.html</id>
    <published>2021-02-25T06:41:14.000Z</published>
    <updated>2021-02-25T08:26:01.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>In this project you will help determine the best of times for tutoring services for a class based upon student availability. The input to the program will be the information provided by the student, including the student ID, days of the week, and hours the student can attend tutoring. The output is a list days and time periods that will maximize the numbers of students who can attend at least 1 hour of tutoring. Make sure you look at the examples to understand the goal. The goal is not to pick the days and times noted by the most students, but rather dates and times that serve the maximum number of different students.</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The goal of this programming project is for you to master (or at least get practice on) the following tasks:</p><ul><li>working with balanced expressions</li><li>reading data from input files</li><li>using the provided Stack class</li><li>writing classes</li><li>working with existing code</li></ul><h3 id="Input-Dataset"><a href="#Input-Dataset" class="headerlink" title="Input Dataset"></a>Input Dataset</h3><p>( ) are the symbols surrounding student data</p><p>&lt; &gt; are the symbols surrounding day of the week data</p><p>[ ] are the symbols surrounding the time period.</p><p>For example:</p><p>(A Smith <m [0900][1000][1100]=""> <h [1400]=""> ) ( S Jones <t [2100][1800]="">) means A Smith can go to tutoring on Mondays from 9-11, and Thursday 2-3, and S Jones can go on Tuesday from 6-7 and 9-10. Note the period order is not significant. There are no implied ranges.</t></h></m></p><p>Assume the only tutoring days are M,T,W,H,F and the hours are from 0900 to 2100, hence the last hour is 2100 (9PM – 10 PM). Also assume there are no spaces or line breaks in the input, and that every student will have a unique name.</p><h3 id="Program-Logic"><a href="#Program-Logic" class="headerlink" title="Program Logic"></a>Program Logic</h3><p>This two-dimensional array can be used to store the various students who can come for tutoring in that time period.</p><p>The first part of your program should read the input ,data validate its format, and populate the array. You must use a Stack as to interpret the Expression. Your program should prompt the user for which test dataset to run. The user should enter 1 for test dataset 1, ..up to n (depending on the number you provide.</p><p>The second part should analyze the array to pick 3 time slots that covers the most different students.</p><p>For example, in the abbreviated schedule below,Thursday at 1200, Wednesday at 0900 and Friday at 1000 would cover the most (in this case all) students. Each cell represents the students who can attend tutoring at that time period.</p><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>The zipped java project file, which contains all your source code, input files and Eclipse related projects, is to be submitted You may include more than one test file to indicate your program is working.</p><p>You are responsible for making sample test cases (at least 3) as well as running the sets provided.</p>]]></content>
    
    <summary type="html">
    
      代写日程表应用，练习Stack的用法。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS142-Name-Sorter</title>
    <link href="https://tk1307993.coding.me/CS142-Name-Sorter.html"/>
    <id>https://tk1307993.coding.me/CS142-Name-Sorter.html</id>
    <published>2021-02-18T06:41:14.000Z</published>
    <updated>2021-02-18T03:12:12.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>If we have a list of names, it is sometimes nice to see them in sorted order by first (given) name, and other times by last (surname). So let’s write a program which will read in a text file of names, turning each line into Name objects, putting those into an array sorting the array by the selected field, and writing the reservations to the screen, and if desired, back out to a text file.</p><p>In order to do this, we will need to create three new classes:</p><h3 id="NameSort"><a href="#NameSort" class="headerlink" title="NameSort"></a>NameSort</h3><p>Contains main(). This should be a GUI based program. It can be created using Swing (possibly using the Mattisse builder built into NetBeans) or using JavaFX or JavaFXM with Scene Builder.</p><p>The program starts with no file selected, with a label listing the file as none. There should be a menu option to open a file. This should bring up a file chooser. If the file does not exist or is not readable, a message should pop up saying so. If the file can be, it should be opened, and the contents of the file should be added into an ArrayList<name>, one line per name. First, trim the String. If there are no spaces, treat everything as the last name. If there are any spaces, the token after the last space is the last name (with everything else as the first name). Trim both Strings. The program should immediately close the file, and create a new array of type Name whose size is the number of names from the file (minus any duplicates, if you are doing the extra credit). The ArrayList should be copied into the array.</name></p><p>The program should then sort the array using the Optimized quicksort version described in class, a method which you have defined in the Sorts class. It will sort by first or last name depending on which RadioButton is selected. The sorted names should be written out to the TextArea.</p><p>A File/save menu option should save the sorted array as a text file which has the same name as the text file read in, except that it has had any extension removed and ends in “_fn.txt” or “_ln.txt”, depending on which way it is sorted.</p><h4 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h4><p>Implements Serializable, Cloneable and Comparable</p><p>Should have the following private instance variables:</p><ul><li>a String to hold a first name</li><li><p>a String to hold a last name<br>Should have the following private static variable:</p></li><li><p>a static String to keep track of which field is the selected field for sorting and printing.<br>Should have at least the following methods:</p></li><li><p>a constructor with two String parameters (first and last name) have the last name be the default selected field.</p></li><li>A static mutator for the selected field.</li><li>the overriding methods:</li><li>toString – returns a String in the format “Last, First” if last is the selected field; “First Last” otherwise.<br>equals - first and last name must be equal in order to return a true</li><li>compareTo – compares first name, then last name if first is the selected field; last name, then first name otherwise. returns -1 if the current object comes before, 0 if equal, 1 if it comes after. Utilizes the compareToIgnoreCase method of the String properties. throws a ClassCastException if the two objects are not both Names.</li><li>Clone - returns a copy of the name.</li></ul><h4 id="Sorts"><a href="#Sorts" class="headerlink" title="Sorts"></a>Sorts</h4><p>Must contain at least the methods public static void</p><p>quickSort(Comparable[] array)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array which merely calls quickSort(array, 0, array.length - 1) (see below)</p><p>public static void quickSort(Comparable[] array, int from, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array which implements the Optimized quick sort algorithm as presented in class, utilizing the following methods:</p><p>public static void insertionSort(Comparable[] array, int from, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array</p><p>private static int partition(Comparable[] array, int from, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array which sets a midpoint, calls sortFirstMiddleLast, moves data around the pivot value, and returns the pivot index</p><p>private static void swap(Comparable[] array, int from, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array</p><p>private static void sortFirstMiddleLast(Comparable[] array, int from, int mid, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array</p><p>Points Possible: 100<br>A sample executable jar is located on Canvas</p>]]></content>
    
    <summary type="html">
    
      代写排序算法，需要用Swing或者JavaFX实现界面。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP9021-Polygons</title>
    <link href="https://tk1307993.coding.me/COMP9021-Polygons.html"/>
    <id>https://tk1307993.coding.me/COMP9021-Polygons.html</id>
    <published>2021-01-21T06:41:14.000Z</published>
    <updated>2021-01-21T06:44:59.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="General-presentation"><a href="#General-presentation" class="headerlink" title="General presentation"></a>General presentation</h3><p>You will design and implement a program that will</p><ul><li>extract and analyse the various characteristics of (simple) polygons, their contours being coded and stored in a file, and</li><li>either display those characteristics: perimeter, area, convexity, number of rotations that keep the polygon invariant, and depth (the length of the longest chain of enclosing polygons)</li><li>or output some Latex code, to be stored in a file, from which a pictorial representation of the polygons can be produced, coloured in a way which is proportional to their area.</li></ul><p>Call encoding any 2-dimensional grid of size between between 2 2 and 50 50 (both dimensions can be dierent) all of whose elements are either 0 or 1.</p><p>Call neighbour of a member m of an encoding any of the at most eight members of the grid whose value is 1 and each of both indexes diers from m’s corresponding index by at most 1. Given a particular encoding, we inductively define for all natural numbers d the set of polygons of depth d (for this encoding) as follows. Let a natural number d be given, and suppose that for all d0 &lt; d, the set of polygons of depth d0 has been defined. Change in the encoding all 1’s that determine those polygons to 0. Then the set of polygons of depth d is defined as the set of polygons which can be obtained from that encoding by connecting 1’s with some of their neighbours in such a way that we obtain a maximal polygon (that is, a polygon which is not included in any other polygon obtained from that encoding by connecting 1’s with some of their neighbours).</p><h3 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h3><p>The assignment is worth 10 marks. the automarking script will allocate 30 seconds to each run of your program.</p><p>Late assignments will be penalised: the mark for a late submission will be the minimum of the awarded mark and 10 minus the number of full and partial days that have elapsed from the due date.</p><p>The outputs of your programs should be exactly as indicated.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="First-example"><a href="#First-example" class="headerlink" title="First example"></a>First example</h4><p>Given a file named polys_1.txt whose contents is<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br></pre></td></tr></table></figure></p><p>your program when run as python3 polygons.py –file polys_1.txt should output<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Polygon</span> <span class="number">1</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">78.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">384.16</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">0</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">2</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">75.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">353.44</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">1</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">3</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">72.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">324.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">2</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">4</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">68.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">295.84</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">3</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">5</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">65.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">268.96</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">4</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">6</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">62.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">243.36</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">5</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">7</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">59.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">219.04</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">6</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">8</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">56.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">196.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">7</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">9</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">52.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">174.24</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">8</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">10</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">49.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">153.76</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">9</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">11</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">46.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">134.56</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">10</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">12</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">43.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">116.64</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">11</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">13</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">40.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">100.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">12</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">14</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">36.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">84.64</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">13</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">15</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">33.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">70.56</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">14</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">16</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">30.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">57.76</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">15</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">17</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">27.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">46.24</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">16</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">18</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">24.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">36.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">17</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">19</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">20.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">27.04</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">18</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">20</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">17.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">19.36</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">19</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">21</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">14.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">12.96</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">20</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">22</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">11.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">7.84</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">21</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">23</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">8.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">4.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">22</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">24</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">4.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">1.44</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">23</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">25</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">1.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">0.16</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">24</span></span><br></pre></td></tr></table></figure></p><p>and when run as python3 polygons.py -print –file polys_1.txt should produce some output saved in a file named polys_1.tex, which can be given as argument to pdflatex to produce a file named polys_1.pdf that views as follows.</p><h3 id="Detailed-description"><a href="#Detailed-description" class="headerlink" title="Detailed description"></a>Detailed description</h3><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>The input is expected to consist of ydim lines of xdim 0’s and 1’s, where xdim and ydim are at least equal to 2 and at most equal to 50, with possibly lines consisting of spaces only that will be ignored and with possibly spaces anywhere on the lines with digits. If n is the xth digit of the yth line with digits, with 0 &lt; x &lt; xdim and 0 &lt; y &lt; ydim, then n is to be associated with a point situated x <em> 0.4 cm to the right and y </em> 0.4 cm below an origin.</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>The program should be run as either<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> polygons.<span class="keyword">py</span> --<span class="keyword">file</span> filename.txt</span><br></pre></td></tr></table></figure></p><p>or as<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> polygons.<span class="keyword">py</span> -<span class="keyword">print</span> --<span class="keyword">file</span> filename.txt</span><br></pre></td></tr></table></figure></p><p>(where filename.txt is the name of a file that stores the input). You can study the program ascii_art.py from Lecture 7 to find out how this can be done.</p><p>If the input is incorrect, that is, does not satisfy the conditions spelled out in the previous section, then the program should print out a single line that reads<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Incorrect <span class="selector-tag">input</span>.</span><br></pre></td></tr></table></figure></p><p>and immediately exit.</p><h4 id="When-the-program-is-run-without-print-as-command-line-argument"><a href="#When-the-program-is-run-without-print-as-command-line-argument" class="headerlink" title="When the program is run without -print as command-line argument"></a>When the program is run without -print as command-line argument</h4><p>If the input is correct, then the program should output a first line that reads one of<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot <span class="keyword">get</span> polygons <span class="keyword">as</span> expected.</span><br></pre></td></tr></table></figure></p><p>in case it is not possible to use all 1’s in the input and make them the contours of polygons of depth d, for any natural number d, as defined in the general presentation.</p><p>Otherwise, the program should output a first line that reads<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Polygon</span> <span class="keyword">N</span>:</span><br></pre></td></tr></table></figure></p><p>with N an appropriate integer at least equal to 1 to refer to the N’th polygon listed in the order of polygons with highest point from smallest value of y to largest value of y, and for a given value of y, from smallest value of x to largest value of x, a second line that reads one of<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Perimeter: <span class="keyword">a</span> + b*<span class="built_in">sqrt</span>(<span class="number">.32</span>)</span><br><span class="line">Perimeter: <span class="keyword">a</span></span><br><span class="line">Perimeter: b*<span class="built_in">sqrt</span>(<span class="number">.32</span>)</span><br></pre></td></tr></table></figure></p><p>with a an appropriate strictly positive floating point number with 1 digit after the decimal point and b an appropriate strictly positive integer, a third line that reads<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Area:</span> a</span><br></pre></td></tr></table></figure></p><p>with a an appropriate floating point number with 2 digits after the decimal point, a fourth line that reads one of<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Convex:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">Convex:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      代写一个绘图程序，根据文本文件中的内容，根据算法生成对应的图形。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS440-Decision-Making-Under-Uncertainty-and-Learning</title>
    <link href="https://tk1307993.coding.me/CS440-Decision-Making-Under-Uncertainty-and-Learning.html"/>
    <id>https://tk1307993.coding.me/CS440-Decision-Making-Under-Uncertainty-and-Learning.html</id>
    <published>2020-12-29T01:23:21.000Z</published>
    <updated>2020-12-29T00:46:45.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>Consider the specification of a Markov Decision Process according to the following figure. Code your own implementation of Value Iteration and compute the optimal policy as well as the optimum utilities for this challenge.</p><p>Indicate the original utilities you used in order to start the process. Provide at least 5 intermediate results (in terms of optimum utilities and policies) depending on the number of iterations needed for convergence as well as the final results. Describe your implementation and your convergence criterion. Report computation time and number of iterations.</p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><p>Consider the criteria for accepting graduate students at the hypothetical Univ. of Excellence. Each candidate is evaluated according to four attributes:</p><ol><li>the grade point average (GPA)</li><li>the quality of the undergraduate degree</li><li>the publication record</li><li>the strength of the recommendation letters</li></ol><p>To simplify our example, let us discretize and limit the possible values of each attribute: Possible GPA scores are 4.0, 3.6, and 3.3; universities are categorized as rank_1, rank_2, and rank_3; publication record is a binary attribute - either the applicant has published previously or not; and recommendation letters are similarly binary, they are either good or normal. Finally, the candidates are classified into two classes: accepted, or P (for ‘positive’) and rejected, or N (for ‘negative’). Figure 2 provides an example of one possible decision tree determining acceptance.</p><p>An applicant doesn’t know this decision tree, but does have the data regarding twelve of last year’s applicants as in Table 1.</p><ul><li>a) Does the provided tree correctly categorize the provided examples?</li><li>b) The applicant uses the decision tree algorithm shown in class (with the information gain computations for selecting split variables) to induce the decision tree employed by U. of E. officials. What tree will the algorithm come up with? Show the computations involved, in addition to the decision tree itself. [Hint: The information content of the examples before choosing any split variable is.<br>You have to find the attribute that has the highest information gain, where attribute A divides the examples into subsets, and p and n represent the number of positive and negative examples in subset.</li><li>c) Is the tree that you got in part b) equivalent to the tree provided here (i.e., do the two trees classify every application in the same way)? If the answer is yes, explain whether this is a coincidence or not. If the answer is no, give an example of a data case that will be classified differently by the two trees.</li></ul><h3 id="Question-3-Consider-building-an-SVM-for-the-following-two-class-training-data"><a href="#Question-3-Consider-building-an-SVM-for-the-following-two-class-training-data" class="headerlink" title="Question 3: Consider building an SVM for the following two-class training data:"></a>Question 3: Consider building an SVM for the following two-class training data:</h3><p>Positive class:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">3</span>]^T , [<span class="number">0</span> <span class="number">2</span>]^T , [<span class="number">0</span> <span class="number">1</span>]^T , [<span class="number">0</span> <span class="number">0</span>]^T</span><br></pre></td></tr></table></figure></p><p>Negative class:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">5</span>]^T , [<span class="number">1</span> <span class="number">6</span>]^T , [<span class="number">3</span> <span class="number">3</span>]^T</span><br></pre></td></tr></table></figure></p><h3 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h3><p>Consider the chart below:</p><p>(a) Notice that for the above graph there is a perfect linear separator for the two input classes.<br>Therefore, a single perceptron should be able to learn this classification task perfectly. Your task is to replicate the learning process, starting with a random perceptron with weights, where the weight 0 corresponds to the constant offset. For the inputs, just estimate their coordinates from the chart.<br>Start by adding the perceptron’s initial line of separation to the chart. Compute then how many samples are misclassified? Then, select an arbitrary misclassified sample and describe the computation of the weight update (you can choose = 1 or any other value; if you like you can experiment a bit to find a value that leads to efficient learning).<br>Illustrate the perceptron’s new line of division in the same chart or a different one, and give the number of misclassified samples. Repeat this process four more times so that you have a total of six lines (or fewer if your perceptron achieves perfect classification earlier).<br>You can generate the computations and/or graphs either by hand or by writing a simple computer program. If you write a program, please attach a printout, and let the program run until the perceptron achieves perfect classification (after how many steps?).</p><p>(b) If your perceptron did not reach perfect classification, determine a set of weights that would achieve perfect classification, and draw the separating line for those weights.</p><p>(c) Now assume that less information were available about the samples. For instance, consider we only know the value for 1 for each sample, which means that our perceptron has only two weights to classify the input as best as possible, i.e., it has weights 0 and 1 , where 0 is once again the weight for the constant offset 0 = 1. Draw a diagram that visualizes this one-dimensional classification task, and determine weights for a perceptron that does the task as best as possible (minimum error, i.e., minimum proportion of misclassified samples). Where does it separate the input space, and what is its error?</p><h3 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h3><p>Consider the more difficult classification problem shown in the chart below:</p><p>(a) As you certainly noticed, a single perceptron cannot do this classification task perfectly. Determine the minimum error that a single perceptron can reach, and show the dividing line in the input space for such a perceptron.</p><p>(b) Clearly, we need a multi-layer perceptron to do this task perfectly. Develop such a system of connected perceptrons and write it down, together with the required weights for each unit. Illustrate the dividing lines for these perceptrons in a copy of the chart above.</p>]]></content>
    
    <summary type="html">
    
      代写AI作业，完成五个关于决策的子问题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>C代写：COMP20005-Path-Planning-1</title>
    <link href="https://tk1307993.coding.me/COMP20005-Path-Planning-1.html"/>
    <id>https://tk1307993.coding.me/COMP20005-Path-Planning-1.html</id>
    <published>2020-12-24T01:23:21.000Z</published>
    <updated>2020-12-24T01:26:08.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>In this project you will demonstrate your understanding of structures and arrays of structures, and will develop a computational solution for a non-trivial problem. You are also expected to make extensive use of functions; and to demonstrate that you have adopted a clear and elegant programming style. You will find it difficult to create a working solution unless you plan your program carefully in advance, and develop it incrementally.</p><h3 id="Path-Planning"><a href="#Path-Planning" class="headerlink" title="Path Planning"></a>Path Planning</h3><p>Path planning is required in many situations, including satnav software and autonomous robot control. As one specific example, the item “pickers” employed in Amazon’s warehouses (soon to be opened in Australia) follow instructions that specify their routing through the warehouse as they assemble each order, with the route determined in advance so as to minimize walking time (or riding time, the warehouses are big). The pickers might also be robotic devices, controlled by wireless network from a central routeplanner. Your task in this project is to develop a program that compares and evaluates such routings, based on a pool of incoming orders that must be picked, packaged, and despatched.</p><p>In particular, we will assume that the bins form a two-dimensional grid, and are laid out in a regular pattern of straight-line corridors to allow easy navigation. Each bin is labeled with coordinates; to keep it simple in this project, we will assume that each location is specified by a numeric bin number to indicate a row, and an alphabetic column number. For example, bin 3a is the third one in the first column (corridor). The bins on both sides of each corridor have the same address, and rows are counted from one (Amazon doesn’t like the number zero) and columns from the letter “a”.</p><p>Figure 1: Example warehouse layout in which there are eight rows of bins and eight corridors to access them. Pickers enter the warehouse at the marked entry location; then must follow the directions permitted by the arrows; and finally leave the warehouse via the marked exit location.</p><p>Figure 1 illustrates such an arrangement, with (in the example) eight rows of bins, and eight corridors to access them. Warehouses will always have the general rectangular “shape” that is depicted, including a single entry point and a single exit point in the top row; but might have different numbers of corridors, and different numbers of bins per row. In general you may assume that there will be at most 99 bins per corridor, and at most 26 corridors (that is, the maximum corridor label is “z”). You may also assume that the number of corridors will be even, so that the exit is opposite an “up” corridor, as shown. Finally, to avoid collisions between trolleys (remember, this might be automated, and the pickers might be robots), each pathway is one-way.</p><p>Note that a very large number of simplifying assumptions are being made in this layout: that there is no third dimension (height) associated with the bin addresses (clearly unlikely to be true); that pickers can always move without being blocked by other pickers accessing the same corridor (clearly unlikely to be true); and that there are no “shortcut” links between the long straight corridors (like there are at IKEA if you know where to look for them); and so on. Nor will we pay any attention to how items get in to the bins. That part of it is someone else’s problem, working the night shift.</p><h4 id="Stage-1-Designing-Structures-Reading-and-Printing-marks-up-to-6-20"><a href="#Stage-1-Designing-Structures-Reading-and-Printing-marks-up-to-6-20" class="headerlink" title="Stage 1 - Designing Structures, Reading and Printing (marks up to 6/20)"></a>Stage 1 - Designing Structures, Reading and Printing (marks up to 6/20)</h4><p>Orders to the warehouse are generated via a web e-store interface that captures a customer id and a list of items that make up that order; then another program (still not the one we are writing here) determines the location of the item(s) being purchased in terms of row number and corridor number and rewrites the order to a file in text format. That file is then the input to the program you must write. For example, the following describes an order for five items requested by a customer:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2010161</span> <span class="number">5</span></span><br><span class="line">    <span class="number">123</span> <span class="number">1</span>a  <span class="number">876</span> <span class="number">2</span>a  <span class="number">654</span> <span class="number">5</span>d  <span class="number">751</span> <span class="number">3</span>b  <span class="number">431</span> <span class="number">2</span>b</span><br></pre></td></tr></table></figure></p><p>In this example, customer 2010161 has ordered 5 items, with item 123 located in bin number 1a, and so on. Each input file contains multiple such customer orders.</p><p>Write a set of typedef and struct declarations to model the situation described; and write suitable functions to read an input file into these internal structures. For input file data1.txt, which covers a total of six customer’s orders and 26 items purchased, and includes as its first order the five-item purchase shown above, the required output (showing the first and last customer orders in full) is:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stage 1</span><br><span class="line">------</span><br><span class="line">  orders:   6</span><br><span class="line">  items :  26</span><br><span class="line"> <span class="built_in"> customer </span>2010161,  5 items, bins:  1a  2a  5d  3b  2b</span><br><span class="line"> <span class="built_in"> customer </span>1856512,  7 items, bins:  4f  3g  2f  8g  6h  2h  1g</span><br></pre></td></tr></table></figure></p><p>You are expected to use struct types for all data storage, including ones that contain arrays as components. To keep your program space requirements compact, you should assume that each input file contains orders from at most 100 customers, and that each customer purchases at most 10 items in any order. In a real e-store these limits would be much higher, of course.</p><h4 id="Stage-2-Sorting-Into-“Pick”-Order-marks-up-to-12-20"><a href="#Stage-2-Sorting-Into-“Pick”-Order-marks-up-to-12-20" class="headerlink" title="Stage 2 - Sorting Into “Pick” Order (marks up to 12/20)"></a>Stage 2 - Sorting Into “Pick” Order (marks up to 12/20)</h4><p>Given the corridor arrangements shown in Figure 1, pickers cannot backtrack - they can only visit each corridor once, and must pick the required items in the correct sequence. In particular, in the odd-lettered corridors “a” and “c” and so on, the bins must be visited in increasing numeric order, whereas in corridors “b” and “d” and so on, the bins must be visited in decreasing numeric order.</p><p>Add functionality to your program so that each of the customer orders is sorted into pick order. For example, the required additional output from this stage for file data1.txt also shows the first and last customer orders, after they have been sorted:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stage 2</span><br><span class="line">------</span><br><span class="line"> <span class="built_in"> customer </span>2010161,  5 items, bins:  1a  2a  3b  2b  5d</span><br><span class="line"> <span class="built_in"> customer </span>1856512,  7 items, bins:  4f  2f  1g  3g  8g  6h  2h</span><br></pre></td></tr></table></figure></p><h4 id="Stage-3-Calculating-Pick-Times-marks-up-to-16-20"><a href="#Stage-3-Calculating-Pick-Times-marks-up-to-16-20" class="headerlink" title="Stage 3 - Calculating Pick Times (marks up to 16/20)"></a>Stage 3 - Calculating Pick Times (marks up to 16/20)</h4><p>The efficiency of the warehouse is determined by the average time required to pick one order. Time, in turn, is proportional to the total travel distance involved. If we suppose that distance between corridor centers is 6.4 metres, then in the arrangement shown in Figure 1 the total horizontal distance traveled from entry point to exit point is always 7 * 6.4 = 44.8 metres, because backtracking is not possible.</p><p>To this must be added the vertical (both down and up) distances traveled. Suppose that the distance between bin centers is 3.8 metres, and that the paths at top and bottom of the warehouse are the same width as a single bin. Then, to pick an item from bin 1a requires a total vertical travel distance of (1 + 2 <em> 9) </em> 3.8 = 72.2 metres, because the whole of corridor “a” must be traversed “downward”, and then a whole “upward” corridor must also be traveled; because the top pathway is also one bin wide (and half of that top pathway is covered on entry, and half on exit); and because traveling a whole corridor is equivalent to moving past 9 bins. The four-item order 1a 2a 3b 1b has the same total distance of 44.8 + 72.2 = 117.0 metres.</p><h4 id="Stage-4-Reducing-the-Cost-marks-up-to-20-20"><a href="#Stage-4-Reducing-the-Cost-marks-up-to-20-20" class="headerlink" title="Stage 4 - Reducing the Cost (marks up to 20/20)"></a>Stage 4 - Reducing the Cost (marks up to 20/20)</h4><p>Having a picker working on only one order at a time is clearly inefficient, and the Amazon management is interested in modeling the possible cost savings that would arise if pickers were able to simultaneously pick for two orders, provided that they are never required to carry more than 10 items at any given time. For example, in data1.txt, the first two orders could be given to one picker, and the 3rd and 4th orders also assigned to a second picker. The last two orders in that input file are too big to be combined with each other, and so require a picker each. That is, one simple strategy to reduce costs is to check consecutive pairs of orders, and if their total item count is less than or equal to 10, hand both to the same picker:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stage 4</span><br><span class="line">------</span><br><span class="line"><span class="code">  pickers required: 4</span></span><br><span class="line"><span class="code">  average distance per order over  6 orders: 174.9 metres</span></span><br></pre></td></tr></table></figure></p><h3 id="The-boring-stuff…"><a href="#The-boring-stuff…" class="headerlink" title="The boring stuff…"></a>The boring stuff…</h3><p>This project is worth 20% of your final mark. A rubric explaining the marking expectations will be provided on the FAQ page.</p><p>You need to submit your program for assessment; detailed instructions on how to do that will be posted on the LMS once submissions are opened. Submission will not be done via the LMS; instead you will need to log in to a Unix server and submit your files to a software system known as submit. You can (and should) use submit both early and often - to get used to the way it works, and also to check that your program compiles correctly on our test system, which has some different characteristics to the lab machines. Failure to follow this simple advice is highly likely to result in tears. Only the last submission that you make before the deadline will be marked.</p>]]></content>
    
    <summary type="html">
    
      代写一个类似Amazon的仓库机器人寻址程序，需要最短距离取到货物。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CIS3490-Convex-Hull</title>
    <link href="https://tk1307993.coding.me/CIS3490-Convex-Hull.html"/>
    <id>https://tk1307993.coding.me/CIS3490-Convex-Hull.html</id>
    <published>2020-09-28T02:26:23.000Z</published>
    <updated>2020-09-28T02:29:16.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In the following questions, express the algorithms in the pseudocode we use in lectures (in the textbook), and implement your algorithms in the C programming language.</p><h3 id="Algorithm-1"><a href="#Algorithm-1" class="headerlink" title="Algorithm 1"></a>Algorithm 1</h3><p>A[0..n 1] is an array of n distinct numbers. A pair of array members (A[i], A[j]) is called an inversion if A[i] &gt; A[j] for i &lt; j.</p><ul><li>Design a brute force algorithm to count the number of inversions in an array, analyze the number of executions of the basic operation, and determine the efficiency class.</li><li>Design a divide-and-conquer algorithm of Θ(n log n) to count the number of inversions in an array, create a recurrence to analyze the number of executions of the basic operation, and determine the efficiency class. Use the Master Theorem to verify the efficiency class in your analysis result.</li><li>Implement the two algorithms, and test them by using data_1.txt, which includes 50,000 integers. Your programs are required to display execution time. Please compare the differences in execution time and theoretical analysis.</li></ul><h3 id="Algorithm-2"><a href="#Algorithm-2" class="headerlink" title="Algorithm 2"></a>Algorithm 2</h3><p>The convex hull of a set of S is the smallest convex set containing S. (You can find more about the convex hull problem on pages 109-113 in the textbook.) It is assumed that not all the points in S are on a straight line.</p><ul><li>Design a brute force algorithm to solve the convex-hull problem and analyze its efficiency.</li><li>Design a divide-and-conquer algorithm of Θ(n log n) to solve the convex-hull problem, create a recurrence to analyze the number of executions of the basic operation, and determine the efficiency class. Use the Master Theorem to verify the efficiency class in your analysis result.</li><li>Implement the two algorithms and test them using data_2.txt, which includes 30,000 points (pairs of x-y coordinates). Your programs are required to display execution time. Please compare the differences in execution time and theoretical analysis.</li></ul><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p>Please submit your design and analysis (i.e. 1.1, 1.2, 2.1, 2.2) in hard-copies to the instructor after the Monday class, and submit your code to Moodle.</p>]]></content>
    
    <summary type="html">
    
      用C语言实现下述的算法，并且需要提供对应的pseudocode.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Programming Fundamentals" scheme="https://tk1307993.coding.me/tags/Programming-Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS246-Streaming-and-Memory-Management</title>
    <link href="https://tk1307993.coding.me/CS246-Streaming-and-Memory-Management.html"/>
    <id>https://tk1307993.coding.me/CS246-Streaming-and-Memory-Management.html</id>
    <published>2020-09-23T03:03:37.000Z</published>
    <updated>2020-09-23T11:14:50.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Note: You must use the C++ I/O streaming and memory management facilities on this assignment. Moreover, the only standard headers you may #include are iostream, fstream, sstream, iomanip, string, and utility. Marmoset will be programmed to reject submissions that violate these restrictions.</p><p>Note: Each question on this assignment asks you to write a C++ program, and the programs you write on this assignment each span multiple files. Moreover, each question asks you to submit a Makefile for building your program. For these reasons, we strongly recommend that you develop your solution for each question in a separate directory. Just remember that, for each question, you should be in that directory when you create your zip file, so that your zip file does not contain any extra directory structure.</p><p>Note: Questions on this assignment will be hand-marked to ensure that you are writing highquality code, and to ensure that your solutions employ the programming techniques mandated by each question.</p><p>Note: You are not permitted to ask any public questions on Piazza about what the programs that make up the assignment are supposed to do. A major part of this assignment involves designing test cases, and questions that ask what the programs should do in one case or another will give away potential test cases to the rest of the class. Instead, we will provide compiled executables, suitable for running on linux.student.cs, that you can use to check intended behaviour. Questions found in violation of this rule will be marked private or deleted; repeat offences could be subject to discipline.</p><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><p>In this exercise, you will write a C++ class (implemented as a struct) to control a simple robotic drone exploring some terrain. Your drone starts at coordinates (0,0), facing north.<br>Use the following structure definition for coordinates:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Position</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> ew, ns;</span><br><span class="line">  Position( <span class="keyword">int</span> ew = <span class="number">0</span>, <span class="keyword">int</span> ns = <span class="number">0</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>The east-west direction is the first component of a position, and the north-south direction is the second. Your Drone class must be properly initialized via a constructor, and must provide the following methods:<br>|  Method   | Description  |<br>|  —-  | —-  |<br>| void forward()  | Move the drone one unit forward. |<br>| void backward()  | Moves the drone one unit backward. |</p><p>For simplicity, you may assume that the drone will never visit more than 50 positions before running out of fuel or otherwise breaking down.</p><p>Implement the specified operations for the Drone. (Some starter code has been provided for you in the file drone.h, along with a sample executable.) You may not change the contents of drone.h other than by adding your instance variables and comments i.e. the interface must stay exactly the same.</p><p>The test harness a3q1.cc is provided with which you may interact with your drone for testing purposes. The test harness is not robust and you are not to devise tests for it, just for the Drone class. Do not change this file.</p><ul><li>(a) Due on Due Date 1: Design the test suite suiteq1.txt for this program and zip the suite into a3q1a.zip.</li><li>(b) Due on Due Date 2: Implement this in C++ and place the files Makefile, a3q1.cc, drone.h and drone.cc in the zip file, a3q1b.zip. Your Makefile must create an executable named drone. Note that the executable name is case-sensitive.</li></ul><h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2"></a>Exercise 2</h3><p>The standard Unix tool make is used to automate the separate compilation process. When you ask make to build a program, it only rebuilds those parts of the program whose source has changed, and any parts of the program that depend on those parts etc. In order to accomplish this, we tell make (via a Makefile) which parts of the program depend on which other parts of the program. Make then uses the Unix “last modified” timestamps of the files to decide when a file is older than a file it depends on, and thus needs to be rebuilt. In this problem, you will simulate the dependency-tracking functionality of make. We provide a test harness (main.cc) that accepts the following commands:</p><ul><li>target: source indicates that the file called target depends on the file called source</li><li>touch file indicates that the file called file has been updated. Your program will respond with file updated at time n where n is a number whose significance is explained below</li><li>make file indicates that the file called file should be rebuilt from the files it depends on. Your program will respond with the names of all targets that must be rebuilt in order to rebuild file.</li></ul><p>A target should be rebuilt whenever any target it depends on is newer than the target itself.</p><p>In order to track ages of files, you will maintain a virtual “clock” (just an int) that “ticks” every time you issue the touch command (successful or not). When a target is rebuilt, its lastmodified time should be set to the current clock time. Every target starts with a last-modified time of 0. For example:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>: b</span><br><span class="line">touch b</span><br><span class="line">touch b</span><br><span class="line">touch b</span><br></pre></td></tr></table></figure></p><p>will produce the output (on stdout)<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">b</span> updated at <span class="selector-tag">time</span> <span class="number">1</span></span><br><span class="line"><span class="selector-tag">b</span> updated at <span class="selector-tag">time</span> <span class="number">2</span></span><br><span class="line"><span class="selector-tag">b</span> updated at <span class="selector-tag">time</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>It is not valid to directly update a target that depends on other targets. If you do, your program should issue an error message on stdout, as illustrated below:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>: b</span><br><span class="line">touch a</span><br><span class="line">(Output:)</span><br><span class="line">Cannot update non-leaf object</span><br></pre></td></tr></table></figure></p><p>When you issue the make file (build) command, the program should rebuild any files within the dependency graph of file that are older than the files they depend on. For example:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>: b</span><br><span class="line"><span class="selector-tag">a</span>: c</span><br><span class="line"><span class="selector-tag">b</span>: d</span><br><span class="line">c: e</span><br><span class="line">touch e</span><br><span class="line">make a</span><br></pre></td></tr></table></figure></p><p>will produce the output<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e updated <span class="keyword">at</span> <span class="built_in">time</span> <span class="number">1</span></span><br><span class="line">Building c</span><br><span class="line">Building <span class="keyword">a</span></span><br></pre></td></tr></table></figure></p><p>because file c depends on e, and a depends on c. Note that b is not rebuilt. The order in which the Building messages appear is not important.</p><p>A file may depend on at most 10 other files. If you attempt to give a file an 11th dependency, issue the error message</p>]]></content>
    
    <summary type="html">
    
      代写C++基础练习题，练习内存分配、I/O处理等的使用方法，属于比较基础的C++作业。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS350-System-Calls</title>
    <link href="https://tk1307993.coding.me/CS350-System-Calls.html"/>
    <id>https://tk1307993.coding.me/CS350-System-Calls.html</id>
    <published>2020-09-20T00:06:52.000Z</published>
    <updated>2020-09-20T00:48:49.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you are asked to implement several OS/161 process-related system calls. Before you start implementing system calls, you should review and understand those parts of the OS/161 kernel that you will be modifying.</p><h3 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h3><p>This section gives a brief overview of some parts of the kernel that you should become familiar with.</p><h4 id="kern-syscall"><a href="#kern-syscall" class="headerlink" title="kern/syscall"></a>kern/syscall</h4><p>This directory contains the files that are responsible for loading and running user-level programs, as well as basic and stub implementations of a few system call handlers.</p><ol><li>proc syscalls.c: This file is intended to hold the handlers for process-related system calls, including the calls that you are implementing for this assignment. Currently, it contains a partial implementation of a handler for exit() and stub handlers for getpid() and waitpid().</li><li>runprogram.c: This file contains the implementation of the kernel’s runprogram command, which can be invoked from the kernel menu. The runprogram command is used to launch the first process run by the kernel. Typically, this process will be the ancestor of all other processes in the system.</li></ol><h4 id="kern-arch-mips"><a href="#kern-arch-mips" class="headerlink" title="kern/arch/mips/"></a>kern/arch/mips/</h4><p>This directory contains machine-specific code for basic kernel functions, such as handling system calls, exceptions and interrupts, context switches, and virtual memory.</p><ol><li>locore/trap.c: This file contains the function mips trap(), which is the first kernel C function that is called after an exception, system call, or interrupt returns control to the kernel. (mips trap() gets called by the assembly language exception handler.)</li><li>syscall/syscall.c: This file contains the system call dispatcher function, called syscall(). This function, which is invoked by mips trap() determines which kind of system call has occured, and calls the appropriate handler for that type of system call. As provided to you, syscall() will properly invoke the handlers for a few system calls. However, you will need to modify this function to invoke your handler for fork(). In this file, you will also find a stub function called enter forked process(). This is intended to be the function that is used to cause a newly-forked process to switch to user-mode for the first time. When you implement enter forked process(), you will want to call mips usermode() (from locore/trap.c) to actually cause the switch from kernel mode to user mode.</li></ol><h4 id="kern-include"><a href="#kern-include" class="headerlink" title="kern/include"></a>kern/include</h4><p>The kern/include directory contains the include files that the kernel needs. The kern subdirectory contains include files that are visible not only to the operating system itself, but also to user-level programs. (Think about why it’s named “kern” and where the files end up when installed.)</p><h4 id="kern-vm"><a href="#kern-vm" class="headerlink" title="kern/vm"></a>kern/vm</h4><p>The kern/vm directory contains the machine-independent part of the kernel’s virtual memory implementation. Although you do not need to modify the virtual memory implementation for this assignment, some functions implemented here are relevant to the assignment.</p><ol><li>copyinout.c: This file contains functions, such as copyin() and copyout for moving data between kernel space and user space. See the partial implementations of the handlers for the write() and waitpid() system calls for examples of how these functions can be used.</li></ol><h4 id="In-user"><a href="#In-user" class="headerlink" title="In user"></a>In user</h4><p>The user directory contains all of the user level applications, which can be used to test OS/161. Don’t forget that the user level applications are built and installed separately from the kernel. All of the user programs can be built by running bmake and then bmake install in the top-level diretory (os161-1.99).</p><h3 id="Implementation-Requirements"><a href="#Implementation-Requirements" class="headerlink" title="Implementation Requirements"></a>Implementation Requirements</h3><p>All code changes for this assignment should be enclosed in #if OPT A2 statements. For example:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OPT_A2</span></span><br><span class="line">  <span class="comment">// code you created or modified for ASST2 goes here</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="comment">// old (pre-A2) version of the code goes here,</span></span><br><span class="line">  <span class="comment">// and is ignored by the compiler when you compile ASST2</span></span><br><span class="line">  <span class="comment">// the ''else'' part is optional and can be left</span></span><br><span class="line">  <span class="comment">// out if you are just inserting new code for ASST2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* OPT_A2 */</span></span></span><br></pre></td></tr></table></figure></p><p>For this to work, you must add #include “opt-A2.h” at the top of any file for which you make changes for this assignment.<br>If in Assignment 1 you wrapped any new code with #if OPT A1, it will also be included in your build when you compile for Assignment 2.</p><p>For this assignment, you are expected to implement the following OS/161 system calls:</p><ul><li>fork</li><li>getpid</li><li>waitpid</li><li>exit</li></ul><p>fork enables multiprogramming and makes OS/161 much more useful. exit and waitpid are closely related to each other, since exit allows the terminating process to specify an exit status code, and waitpid allows another process to obtain that code. You are not required to implement the WAIT ANY, WAIT MYPGRP, WNOHANG, and WUNTRACED flags for waitpid() - see kern/include/kern/wait.h.</p><p>To help get you started, there is a partially-implemented handler for exit already in place, as well as stub implementatations of handlers for getpid and waitpid. You will need to complete the implementations of these handlers, and also create and implement a handler for fork. There is a man (manual) page for each OS/161 system call. These manual pages describe the expected behaviour of the system calls. The system call man pages are located in the OS/161 source tree under os161-1.99/man/syscall. They are also available on-line through the course web page.</p><p>Your system call implementations should correctly and gracefully handle error conditions, and properly return the error codes as described on the man pages. This is because application programs, including those used to test your kernel for this assignment, depend on the behaviour of the system calls as specified in the man pages. Under no circumstances should an incorrect system call parameter cause your kernel to crash.</p><p>Integer codes for system calls are listed in kern/include/kern/syscall.h. The file user/include/unistd.h contains the user-level function prototypes for OS/161 system calls. These describe how a system call is made from within a user-level application. The file kern/include/syscall.h contains the kernel’s prototypes for its internal system call handling functions. You will find prototypes for the handlers for waitpid, exit and getpid there. Don’t forget to add a prototype for your new fork() handler function to this file.</p><h3 id="Process-IDs"><a href="#Process-IDs" class="headerlink" title="Process IDs"></a>Process IDs</h3><p>A PID, or process ID, is a unique number that identifies a process. You should carefully review the manual pages for fork, exit, and waitpid to understand how PIDs are expected to work.</p><p>For the purposes of this assignment, you should ensure that a process can use waitpid to obtain the exit status of any of its children, and that a process may not use waitpid to obtain the exit status of any other processes. In the terminology used on the waitpid manual page, you should assume that a process is “interested” in its children, but is not interested in any other processes.</p><h3 id="Silence-is-Golden"><a href="#Silence-is-Golden" class="headerlink" title="Silence is Golden"></a>Silence is Golden</h3><p>Your final, submitted kernel should not produce any output other than the normal boot and shutdown messages and the kernel menu prompt. We enourage you to use the DEBUG mechanism to generate kernel debugging output while you are testing your work, but make sure that all such debugging messages are turned off in the version of the kernel that you submit.</p><p>If your kernel produces lots of spurious output, it is more difficult for us to review the output produced by the user-level programs that we test with. If your kernel produces output other than the normal boot and shutdown messages, your assignment may be penalized.</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>The kernel’s runprogram command, which was described in Section 1.1, will allow you launch a process to run a user-level application program. This is handy for testing that your system calls work. Without making any modifications to the base OS/161 code, you should be able to run the testbin/palin user program, which is a simple palindrome tester. testbin/palin uses only write to the console and exit, both of which are partially implemented in the OS/161 base code.</p><p>OS/161 includes a number of application programs that you can use. The user/bin and user/sbin directories contain a number of standard utility programs, such as a command shell. In addition, the user/testbin and user/uw-testbin directories contain a variety of programs that can be used to conduct some simple tests of your OS/161 kernel. The A2 hints (on-line) will identify some specific programs that we will be using to test your submission. Any of these programs can be launched directly from the kernel using the runprogram command.</p><h3 id="Configuring-and-Building"><a href="#Configuring-and-Building" class="headerlink" title="Configuring and Building"></a>Configuring and Building</h3><p>Before you do any coding for Assignment 2a, you will need to reconfigure your kernel for this assignment. Follow the same procedure that you used to configure for Assignment 1, but use the Assignment 2 configuration file instead.</p><p>Generally, you should not have to rebuild those applications every time you build a new kernel. However, there are certain header files, e.g, in kern/include/kern that are used by the kernel and by the user-level application programs. In the unlikely event that you make changes to these files, you must rebuild the user-level code.</p><p>It is always OK to rebuild the user-level applications. If you are getting any weird, unexpected behaviour from those applications, it is a good idea to rebuild them just to be on the safe side.</p><p>More importantly, make sure to completely recompile your kernel and user-level programs just before you submit the assignment. A common problem is not noticing that an erroneous change in header files that are shared between the kernel and user programs prevents the user programs from compiling. If we cannot compile the user-level applications, we cannot test your code!</p>]]></content>
    
    <summary type="html">
    
      完成提供的Kernel中System Call的实现。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
</feed>
