<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2023-03-23T02:57:55.912Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EE450-Student-Performance-Analysis-System</title>
    <link href="https://tk1307993.coding.me/EE450-Student-Performance-Analysis-System.html"/>
    <id>https://tk1307993.coding.me/EE450-Student-Performance-Analysis-System.html</id>
    <published>2023-03-23T02:55:50.000Z</published>
    <updated>2023-03-23T02:57:55.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>The objective of project is to familiarize you with UNIX socket programming. It is an individual assignment and no collaborations are allowed. If you have any doubts/questions email the TA your questions, come by TA’s office hours, or ask during the weekly discussion session. You can ask TAs any question about the content of the project, but TAs have the right to reject your request for debugging.</p><p>Problem Statement<br>In this part of the project, you will implement client-server socket programming using TCP. In a Student Performance Analysis system of a university, a client (student) would like to ask the Main server which Backend server that a department is associated with. A client sends a department name to the Main server and the Main server will search in its database and reply to the client with a Backend server ID.</p><p>The detailed operations to be performed by all the parties are described with the help of Figure 1. There are in total 3 communication endpoints, which are run in 3 individual terminal windows:</p><p>Client 1 and Client 2: represent two different users, send queries to main server<br>Main server: store information, search, send responses to clients<br>You are highly encouraged to use Beej’s Guide to Network Programming to complete this assignment. You can use code from Beej’s Guide as a starting point (remember to mention any code you take directly from other sources like Beej’s Guide in the README and your comments).</p><p>The full process can be roughly divided into three phases, and their communication and computation steps are as follows:</p><p>Bootup<br>[Computation]: Main server read the file list.txt and store the information.<br>[Communication]: Main server process wait for client processes to connect.<br>[Computation]: Two clients run and ask the user to input a department name.<br>Query<br>[Communication]: Each client then establishes a TCP connection to the Main server and sends their queries (the department name) to the Main server.<br>A client can terminate itself only after it receives a reply from the server (in the Reply phase).<br>Main server may be connected to both clients at the same time.<br>[Computation]: Once the Main server receives the queries, it decodes the queries and searches in the list with the received department name, obtaining the corresponding Backend server ID.<br>Reply<br>[Communication]: Main server prepares a reply message and sends the result to the appropriate client.<br>[Communication]: Clients receive the reply message from Main server and display it. Clients should keep active for further inputted queries, until the program is manually killed (Ctrl-C).<br>The format of list.txt is as follows.</p><p><backend server id></backend></p><p><department name>,<department name>,<department name></department></department></department></p><p><backend server id></backend></p><p><department name>,<department name><br>…<br>Example list.txt:</department></department></p><p>1<br>ECE,CS,Physics<br>2<br>Art,Cinema<br>3<br>Accounting,Business<br>…<br>Assumptions on the list.txt file:</p><p>Department names are letters. The length of a department name can vary from 1 letter to at most 20 letters. It may contain both capital and lowercase letters but does not contain any white spaces.<br>Backend server IDs are non-negative integer numbers.<br>There are at most 10 Backend server IDs in total.<br>There is no additional empty line(s) at the beginning or the end of the file. That is, the whole list.txt do not contain any empty lines.<br>For simplicity, there is no overlap of department names among different Backend servers.<br>For a given Backend server, there may be repeated department names.<br>list.txt will not be empty.<br>A Backend server will store at least one department names, and at most 100 department names.<br>An example list.txt is provided for you as a reference. Other list.txt will be used for grading, so you are advised to prepare your own files for testing purposes.</p><p>Source Code Files<br>Your implementation should include the source code files described below:</p><p>servermain: You must name your code file: servermain.c or servermain.cc or servermain.cpp (all small letters). Also, you must name the corresponding header file (if you have one; it is not mandatory) servermain.h (all small letters).<br>client: The name for this piece of code must be client.c or client.cc or client.cpp (all small letters) and the header file (if you have one; it is not mandatory) must be called client.h (all small letters). There should be only one client file!!!<br>Note: Your compilation should generate separate executable files for each of the components listed above.</p><p>Detailed Explanation<br>Phase 1 – Bootup<br>Main server program first boots up in this phase.</p><p>./servermain<br>While booting up, the servers must display a boot up message on the terminal. The format of the boot up message for Main server is given in the on-screen message table at the end of the document. As the boot up message indicates, Main server must listen on the appropriate port for incoming packets/connections.</p><p>As described in the previous section, the main server needs to read the text file and store the information. There are many ways to store the information, such as dictionary, array, vector, etc. You need to decide which format to use based on the requirement of the problem. You can use any format if it can give you correct results.</p><p>Once the main server programs have booted up, two client programs run. Each client displays a boot up message as indicated in the onscreen messages table. Note that the client code takes no input argument from the command line. The format for running the client code is:</p><p>./client<br>After running it, it should display messages to ask the user to enter a query department name (e.g., implement using std::cin):</p><p>./client<br>Client is up and running.<br>Enter Department Name:<br>For example, if the client 1 is booted up and asks for Backend server ID for department ECE, then the terminal displays like this:</p><p>./client<br>Client is up and running.<br>Enter Department Name: ECE<br>Main server has its unique port number specified in “PORT NUMBER ALLOCATION” section with the source and destination IP address as localhost/127.0.0.1. Clients use dynamic ports.</p><p>Clients and Main server are required to print out on-screen messages after executing each action as described in the “ON SCREEN MESSAGES” section. These messages will help with grading if the process did not execute successfully. Missing some of the on-screen messages might result in misinterpretation that your process failed to complete. Please follow the exact format when printing the on-screen messages.</p><p>Phase 2 – Query<br>After booting up, Clients establish TCP connections with Main server. After successfully establishing the connection, Clients send the input department name to Main server. Once this is sent, Clients should print a message in a specific format. Repeat the same steps for Client 2.</p><p>Main server then receives requests from two Clients. If the department name is not found, the Main server will print out a message (see the “On Screen Messages” section) and return to standby.</p><p>For a server to receive requests from several clients at the same time, the function fork() should be used for the creation of a new process. fork() function is used for creating a new process, which is called child process, which runs concurrently with the process that makes the fork() call (parent process).</p><p>For a TCP server, when an application is listening for stream-oriented connections from other hosts, it is notified of such events and must initialize the connection using accept(). After the connection with the client is successfully established, the accept() function returns a non-zero descriptor for a socket called the child socket. The server can then fork off a process using fork() function to handle connection on the new socket and go back to wait on the original socket. Note that the socket that was originally created, that is the parent socket, is going to be used only to listen to the client requests, and it is not going to be used for computation or communication between client and Main server. Child sockets that are created for a parent socket have the identical well-known port number and IP address at the server side, but each child socket is created for a specific client. Through using the child socket with the help of fork(), the server can handle the two clients without closing any one of the connections.</p><p>Once the Main server receives the queries, it decodes the queries and searches in the list with the received department name, finding the corresponding backend server ID.</p><p>Phase 3 – Reply<br>At the end of Phase 2, the Main server should have the result ready. The result is the Backend server ID that the department is associated with. The result should be sent back to the corresponding client using TCP. The client will print out the backend server ID and then print out the messages for a new request as follows:</p><p>…<br>Department ECE is associated with backend server 1.<br>—–Start a new query—-Enter Department Name:<br>See the ON SCREEN MESSAGES table for an example output table.</p><p>Port Number Allocation<br>The ports to be used by the client and the servers are specified in the following table:</p><p>Process    Dynamic Ports    Static Ports<br>Main Server        TCP(with client): 33xxx<br>Client 1    TCP<br>Client 2    TCP<br>NOTE: xxx is the last 3 digits of your USC ID. For example, if the last 3 digits of your USC ID are “319”, you should use the port: 33319 for the Main Server, etc. Port number of all processes print port number of their own.</p><p>Assumptions<br>You must start the processes in this order: Main-server, Client 1, and Client 2.<br>list.txt is created before your program starts.<br>If you need to have more code files than the ones that are mentioned here, please use meaningful names and all small letters and mention them all in your README file.<br>You can use code snippets from Beej’s guide to network programming in your project. However, you need to mark the copied part in your code and mention in README.<br>When you run your code, if you get the message “port already in use” or “address already in use”, please first check to see if you have a zombie process (see following). If you do not have such zombie processes or if you still get this message after terminating all zombie processes, try changing the static TCP port number corresponding to this error message (all port numbers below 1024 are reserved and must not be used). If you must change the port number, please do mention it in your README file and provide reasons for it.<br>You may create zombie processes while testing your codes, please make sure you kill them every time you want to run your code. To see a list of all zombie processes, try this command:<br>ps -aux | grep developer<br>Identify the zombie processes and their process number and kill them by typing at the command-line:</p><p>kill -9 <process number><br>Requirements<br>Do not hardcode the TCP port numbers that are to be obtained dynamically. Refer to Table 1 to see which ports are statically defined and which ones are dynamically assigned. Use getsockname() function to retrieve the locally bound port number wherever ports are assigned dynamically as shown below.<br>The host name must be hard coded as localhost (127.0.0.1) in all codes.<br>Your client should keep running and ask to enter a new request after displaying the previous result, until the TAs manually terminate it by Ctrl+C. The backend servers and the Main server should keep running and be waiting for another request until the TAs terminate them by Ctrl+C. If they terminate before that, you will lose some points for it.<br>All the naming conventions and the on-screen messages must conform to the previously mentioned rules.<br>You are not allowed to pass any parameter or value or string or character as a commandline argument.<br>All the on-screen messages must conform exactly to the project description. You should not add anymore on-screen messages. If you need to do so for the debugging purposes, you must comment out all the extra messages before you submit your project.<br>Using fork() to create a child process when a new TCP connection is accepted is mandatory and everyone should support it. This is useful when different clients are trying to connect to the same server simultaneously.<br>Please do remember to close the socket and tear down the connection once you are done using that socket.<br>Programming Platform and Environment<br>All your submitted code MUST work well on the provided virtual machine Ubuntu.<br>All submissions will only be graded on the provided Ubuntu. TA won’t make any updates or changes to the virtual machine. It’s your responsibility to make sure your code works well on the provided Ubuntu. “It works well on my machine” is not an excuse and we don’t care.<br>Your submission MUST have a Makefile. Please follow the requirements in the following “Submission Rules” section.<br>Programming Languages and Compilers<br>You must use only C/C++ on UNIX as well as UNIX Socket programming commands and functions. Here are the pointers for Beej’s Guide to C Programming and Network Programming (socket programming): <a href="http://www.beej.us/guide/bgnet/" target="_blank" rel="noopener">http://www.beej.us/guide/bgnet/</a> (If you are new to socket programming please do study this tutorial carefully as soon as possible and before starting the project) <a href="http://www.beej.us/guide/bgc/" target="_blank" rel="noopener">http://www.beej.us/guide/bgc/</a></process></p><p>You can use a Unix text editor like emacs or gedit to type your code and then use compilers such as g++ (for C++) and gcc (for C) that are already installed on Ubuntu to compile your code. You must use the following commands and switches to compile yourfile.c or yourfile.cpp. It will make an executable by the name of “yourfileoutput”.</p><p>gcc -o yourfileoutput yourfile.c<br>g++ -o yourfileoutput yourfile.cpp<br>Do NOT forget the mandatory naming conventions mentioned before!<br>Also, inside your code you may need to include these header files in addition to any other header file you used:</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p><p>#include &lt;stdio.h&gt;</p><p>#include &lt;stdlib.h&gt;</p><p>#include &lt;unistd.h&gt;</p><p>#include &lt;errno.h&gt;</p><p>#include &lt;string.h&gt;</p><p>#include &lt;netdb.h&gt;</p><p>#include &lt;sys/types.h&gt;</p><p>#include &lt;netinet/in.h&gt;</p><p>#include &lt;sys/socket.h&gt;</p><p>#include &lt;arpa/inet.h&gt;</p><p>#include &lt;sys/wait.h&gt;<br>Submission Rules<br>Along with your code files, include a README file and a Makefile. Submissions without README and Makefile will be subject to a serious penalty.</p><p>In the README file write:</p><p>Your Full Name as given in the class list.<br>Your Student ID.<br>Your platform (Ubuntu version).<br>What you have done in the assignment.<br>What your code files are and what each one of them does. (Please do not repeat the project description, just name your code files, and briefly mention what they do).<br>The format of all the messages exchanged.<br>Any idiosyncrasy of your project. It should say under what conditions the project fails, if any.<br>Reused Code: Did you use code from anywhere for your project? If not, say so. If so, say what functions and where they’re from. (Also identify this with a comment in the source code.)<br>About the Makefile<br>Makefile Tutorial:<br><a href="https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html" target="_blank" rel="noopener">https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html</a></p><p>TA will first compile all codes using make all. TA will then open 3 different terminal windows. On one terminal, start Main Server using commands ./servermain. Remember that main server should always be on once started. On the other two terminals, start the client as ./client. TA will check the outputs for multiple queries. The terminals should display the messages specified above.</p><p>Please follow these rules to submit your assignment:</p><p>Compress all your files including the README file into a single “tar ball” and call it: ee450_yourUSCusername.tar.gz (all small letters) e.g. your filename may be ee450_nanantha.tar.gz. Please make sure that your name matches the one in the class list.<br>Do NOT include anything not required in your tar.gz file, for example data file list.txt. Do NOT use subfolders. Any compressed format other than .tar.gz will NOT be graded!<br>Upload “ee450_yourUSCusername.tar.gz” to Blackboard -&gt; Assignments. After the file is submitted, you must click on the “submit” button to actually submit it. If you do not click on “submit”, the file will not be submitted.<br>Blackboard will keep a history of all your submissions. If you make multiple submissions, we will grade your latest valid submission. Submission after the deadline is considered as invalid.<br>Please consider all kinds of possible technical issues and do expect a huge traffic on the Blackboard website very close to the deadline which may render your submission or even access to Blackboard unsuccessful.<br>Please DO NOT wait till the last 5 minutes to upload and submit because some technical issues might happen, and you will miss the deadline. And a kind suggestion, if you still get some bugs one hour before the deadline, please make a submission first to make sure you will get some points for your hard work!<br>After submitting, please confirm your submission by downloading and compiling it on your machine. If the outcome is not what you expected, try to resubmit, and confirm again. We will only grade what you submitted even though it’s corrupted.<br>You have sufficient time to work on this project and submit it in time hence there is absolutely zero tolerance for late submissions! Do NOT assume that there will be a late submission penalty or a grace period. If you submit your project late (no matter for what reason or excuse or even technical issues), you simply receive a zero for the project.<br>Grading Criteria<br>Notice: We will only grade what is already done by the program instead of what will be done. For example, the TCP connection is established, and data is sent to the Main Server. But the result is not received by the Main server (no on-screen message) because Main server got some errors. Then you will lose some points for phase 1 even though it might work well.</p><p>Your project grade will depend on the following:</p><p>Correct functionality, i.e. how well your programs fulfill the requirements of the assignment, especially the communications through TCP sockets.<br>Inline comments in your code. This is important as this will help in understanding what you have done.<br>Whether your programs work as you say they would in the README file.<br>Whether your programs print out the appropriate error messages and results.<br>If your submitted codes do not even compile, you will receive 10 out of 100 for the project.<br>If your submitted codes compile using make but when executed, produce runtime errors without performing any tasks of the project, you will receive 15 out of 100.<br>If you forget to include the README file or Makefile in the project tar-ball that you submitted, you will lose 15 points for each missing file (plus you need to send the file to the TA in order for your project to be graded.)<br>If you add subfolders or compress files in the wrong way, you will lose 2 points each.<br>If your data file path is not the same as the code files, you will lose 5 points.<br>Do not submit datafile (three .txt files) used for test, otherwise, you will lose 10 points.<br>If your code does not correctly assign the TCP port numbers (in any phase), you will lose 10 points each.<br>Detailed points assignments for each functionality will be posted after finishing grading.<br>The minimum grade for an on-time submitted project is 10 out of 100, the submission includes a working Makefile and a README.<br>There are no points for the effort or the time you spend working on the project or reading the tutorial. If you spend plenty of time on this project and it doesn’t even compile, you will receive only 10 out of 100.<br>Your code will not be altered in any way for grading purposes and however it will be tested with different inputs. Your designated TA runs your project as is, according to the project description and your README file and then checks whether it works correctly or not. If your README is not consistent with the project description, we will follow the project description.<br>Final Words<br>Start on this project early. Hard deadline is strictly enforced. No grace periods. No grace days. No exceptions.<br>In view of what is a recurring complaint near the end of a project, we want to make it clear that the target platform on which the project is supposed to run is the provided Ubuntu (16.04/22.04). It is strongly recommended that students develop their code on this virtual machine. In case students wish to develop their programs on their personal machines, possibly running other operating systems, they are expected to deal with technical and incompatibility issues (on their own) to ensure that the final project compiles and runs on the requested virtual machine. If you do development on your own machine, please leave at least three days to make it work on Ubuntu. It might take much longer than you expect because of some incompatibility issues.<br>Check Blackboard (Discussion Board &amp; Announcement) regularly for additional requirements and latest updates about the project guidelines. Any project changes announced on Blackboard are final and overwrites the respective description mentioned in this document.</p>]]></content>
    
    <summary type="html">
    
      和往年一样，使用Socket编程，完成多个Server/Client, 实现一个Student Performance Analysis System.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>CSCI561-Path-Planning-For-Skier</title>
    <link href="https://tk1307993.coding.me/CSCI561-Path-Planning-For-Skier.html"/>
    <id>https://tk1307993.coding.me/CSCI561-Path-Planning-For-Skier.html</id>
    <published>2023-03-16T03:17:43.000Z</published>
    <updated>2023-03-16T03:19:29.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h3><p>This is a programming assignment. You will be provided sample inputs and outputs (see below). Please understand that the goal of the samples is to check that you can correctly parse the problem definitions and generate a correctly formatted output. The samples are very simple and it should not be assumed that if your program works on the samples it will work on all test cases. There will be more complex test cases and it is your task to make sure that your program will work correctly on any valid input. You are encouraged to try your own test cases to check how your program would behave in some complex special case that you might think of. Since each homework is checked via an automated A.I. script, your output should match the specified format exactly. Failure to do so will most certainly cost some points. The output format is simple and examples are provided below. You should upload and test your code on vocareum.com, and you will also submit it there. You may use any of the programming languages provided by vocareum.com.</p><p>Grading<br>Your code will be tested as follows: Your program should not require any command-line argument. It should read a text file called “input.txt” in the current directory that contains a problem definition. It should write a file “output.txt” with your solution to the same current directory. Format for input.txt and output.txt is specified below. End-of-line character is LF (since vocareum is a Unix system and follows the Unix convention).</p><p>The grading A.I. script will, 50 times:</p><p>Create an input.txt file, delete any old output.txt file.<br>Run your code.<br>Check correctness of your program’s output.txt file.<br>If your outputs for all 50 test cases are correct, you get 100 points.<br>If one or more test case fails, you get 100 - 2xN points where N is the number of failed test cases.<br>Note that if your code does not compile, or somehow fails to load and parse input.txt, or writes an incorrectly formatted output.txt, or no output.txt at all, or OuTpUt.TxT, you will get zero points. Anything you write to stdout or stderr will be ignored and is ok to leave in the code you submit (but it will likely slow you down). Please test your program with the provided sample files to avoid any problem.</p><h3 id="Project-description"><a href="#Project-description" class="headerlink" title="Project description"></a>Project description</h3><p>In this project, we look at the problem of path planning in a different way just to give you the opportunity to deepen your understanding of search algorithms and modify search techniques to fit the criteria of a realistic problem. To give you a context for how search algorithms can be utilized, we invite you to a Ski Resort. However, this is not a ski resort for the faint of heart. In this resort, there are no carved-out slopes and skiers must plan their own path to the lodge at the bottom of the mountain. The terrain is treacherous and the success of reaching the lodge depends on the level of the skier. We are invited to develop an algorithm to find the optimal path to reach our destination (and to a cup of hot cocoa) based on a particular objective.</p><p>The input of our program includes a topographical map of the mountain resort, plus some information about where our skier starts their journey, the position of the lodge and some other quantities that control the quality of the solution. The mountain can be imagined as a surface in a 3-dimensional space, and a popular way to represent it is by using a mesh-grid. The E value assigned to each cell represents the elevation of that location or whether it contains a tree we need to navigate around. At each cell, the skier can move to one of 8 possible neighbor cells: North, North-East, East, South-East, South, South-West, West, and North-West. Actions are assumed to be deterministic and error-free (the skier will always end up at the intended neighbor cell).</p><p>The skier cannot go over trees that are high enough to not have been covered with snow, nor go up a slope unless they have enough speed or stamina. Therefore, the value E in each cell can advise us on whether we can take that route (in case of tree and hills) or how much stamina moving into that cell will cost the skier if they move into it.</p><h3 id="Search-for-the-optimal-paths"><a href="#Search-for-the-optimal-paths" class="headerlink" title="Search for the optimal paths"></a>Search for the optimal paths</h3><p>Our task is to lead the skier from their start position to the ski lodge, where they can celebrate a good ski day with a cup of hot chocolate. If we had a very advanced skier that can go across any land without a problem, usually the shortest geometrical path is defined as the optimal path; however, since our skiers might be at different levels (we will define this as stamina), our objective is to avoid high trees as well as very steep areas, unless we have gained some momentum first. Thus, we want to minimize the path from A to B under those constraints. Our goal is, roughly, finding the shortest path among the safe paths. What defines the safety of a path is whether there are trees we can’t cross and the elevation of the cells along that path.</p><h3 id="Problem-definition-details"><a href="#Problem-definition-details" class="headerlink" title="Problem definition details"></a>Problem definition details</h3><p>You will write a program that will take an input file that describes the land, the starting point, potential lodges we can relax in, and some other characteristics for our skier. For each lodge location, you should find the optimal (shortest) safe path from the starting point to that target lodge. A path is composed of a sequence of elementary moves. Each elementary move consists of moving the skier from their current position to one of its 8 neighbors. To find the solution you will use the following algorithms:</p><p>Breadth-first search (BFS)<br>Uniform-cost search (UCS)<br>A<em> search (A</em>).<br>Your algorithm should return an optimal path, that is, with shortest possible journey cost. Journey cost is further described below and is not equal to geometric path length. If an optimal path cannot be found, your algorithm should return “FAIL” as further described below.</p><h3 id="Terrain-map"><a href="#Terrain-map" class="headerlink" title="Terrain map"></a>Terrain map</h3><p>We assume a terrain map for the mountain is specified as follows:</p><p>A matrix with H rows (where H is a strictly positive integer) and W columns (W is also a strictly positive integer) will be given, with a value E (an integer number, to avoid rounding problems) specified in every cell of the WxH map. If E is a negative integer, this means there is a tree of height |E| in that cell. If E is a positive integer, the value represents the elevation of that cell. For example:<br>10 20 -30<br>12 13 40<br>is a map with W=3 columns and H=2 rows, and each cell contains an E value (in arbitrary units). By convention, we will use North (N), East (E), South (S), West (W) as shown above to describe motions from one cell to another. In the above example, elevation E in the North-West (NW) corner of the map is 10, and it is 40 in the South-East (SE) corner, which means our skier will spend more stamina to move into the SE corner than the NW corner.</p><p>Every skier will have a stamina value S that determines whether they can climb up certain elevations. A move from E = 20 to E = 40 is only allowed if a skier’s stamina is higher than or equal to 40 - 20 = 20. Important Note: Stamina remains as a constant value.</p><p>Notice that there is a tree of height 30 in the NE corner. If a cell contains a tree, there are a few factors that determine whether a move into that cell is allowed:</p><p>If your current E is higher than or equal to tree height |E|, you are allowed to move into the cell. In this case, we imagine the tree is covered with snow of height |E|. Therefore, if our tree is height 30 as above, it would be allowed to move into that cell from the cell with elevation 40, but not from others.<br>If your current E is lower than the tree height |E|, a move into that cell is not allowed from your current cell. Note that your stamina (or momentum) does not change whether a move like this is allowed.<br>To help us distinguish between your three algorithm implementations, you must follow the following conventions for computing operational path length:</p><p>Breadth-first search (BFS)<br>In BFS, each move from one cell to any of its 8 neighbors counts for a unit path cost of 1. You do not need to worry about the elevation levels or about the fact that moving diagonally (e.g., NorthEast) is actually a bit longer than moving along the North to South or East to West directions. However, you still need to make sure the move is allowed by checking how steep the move is (depends on the skier’s stamina) or whether a tree is involved. Therefore, any allowed move from one cell to an adjacent cell costs 1.</p><p>Uniform-cost search (UCS)<br>When running UCS, you should compute unit path costs in 2D. Assume that cells’ center coordinates projected to the 2D ground plane are spaced by a 2D distance of 10 North-South and East-West. That is, a North or South or East or West move from a cell to one of its 4-connected neighbors incurs a unit path cost of 10, while a diagonal move to a neighbor incurs a unit path cost of 14 as an approximation to 10 when running UCS. You still need to make sure the move is allowed, in the same way you did for BFS.</p><p>A<em> search (A</em>).<br>When running A*, you will have modified rules for allowed moves AND you should compute an approximate integer unit path cost for each move according to how the elevation of the terrain changes. We will explain these rules using elevations Ecurr (current cell elevation), Enext (potential next cell elevation), and Eprev (previous cell elevation), as well as stamina S (given as input) and momentum M (defined below).</p><p>Allowed moves for A<em>: For running A</em>, we modify whether a move is allowed by considering momentum (M), that is whether we gained some speed by going down in elevation in our most recent move. If we are currently at a cell with Ecurr, whether we are allowed to go into a cell Enext is determined by whether our momentum M going from Eprev to Ecurr can assist us.</p><p>That is, when we are going down from Eprev to Ecurr and then up from Ecurr to Enext, momentum M is &gt; 0 and will possibly assist us in reaching cells with higher Enext elevations. If the next move is going up in elevation (Enext &gt; Ecurr), a move will only be allowed if (Enext &lt;= Ecurr + S + M). For BFS/UCS, this rule was (Enext &lt;= Ecurr + S). M = 0 initially at the starting position. Note how in all cases other than going down from Eprev to Ecurr and then up from Ecurr to Enext, momentum M is 0 according to the above definition. Note that momentum does not accumulate across multiple moves. Only the latest Eprev to Ecurr are considered when computing M.</p><p>If a tree is involved, the rules to determine whether a move is allowed do not change from the BFS/UCS cases. If you are allowed to move into a cell with a tree, it acts as land with elevation |E| from then on.</p><p>Path cost for A<em>: You should also compute an approximate integer unit path cost for each move for A</em>, which is now approximately 3D. The cost of a move is computed by considering both the horizontal move distance as in the UCS case (unit cost of 10 when moving North to South or East to West, and unit cost of 14 when moving diagonally) and the change in elevation levels of the land. The cost C for the move is hence defined as follows:</p><p>C = (Horizontal Move Distance) + (Elevation Change Cost)<br>Thus, intuitively, the elevation change cost is how much we are going uphill, possibly minus how much momentum we have from going downhill on the previous move.</p><p>Examples:</p><p>If our previous cell was Eprev = 20 and our current cell is Ecurr = 8, we have M = 12. If our stamina is 30, we are allowed to go into a cell with Enext up to Ecurr + M + S = 8 + 12 + 30 = 50. Assume we choose a cell with Enext = 25. If we’re moving diagonally, our path cost becomes: 14 (Move Distance) + (25 - 8 - 12 = 5) (Elevation Change Cost) = 19.</p><p>If our previous cell was Eprev = 20 and our current cell is Ecurr = 25, we have M = 0. If our stamina is 15, we are allowed to go into, for example, a cell with Enext = 35 (since 35 - 25 [ 0 + 15). If we’re moving South, our path cost becomes: 10 (Move Distance) + (35 - 25) (Elevation Change Cost) = 20.</p><p>If our current cell is Ecurr = 40 and our next cell is Enext = 15, the move is allowed since we are going downhill. If we’re moving East, our path cost becomes: 10 (Move Distance) + (0) (Elevation Change Cost) = 10.</p><p>If our previous cell was Eprev = 12 and our current cell is Ecurr = -5, we have M = 7, since we treat tree cells as |E| elevation once we move into them. If our stamina is 5, we can go into, for example, a cell with Enext = 30 (since 30 - 12 [ 7 + 5). If we’re moving SW, our path cost becomes: 14 (Move Distance) + (30 - 5 - 7) (Elevation Change Cost) = 32.</p><p>Remember: In addition to computing the path cost, you also need to design an admissible heuristic for A* for this problem.</p><p>Input: The file input.txt in the current directory of your program will be formatted as follows:</p><p>First line: Instruction of which algorithm to use, as a string: BFS, UCS or A*<br>Second line: Two strictly positive 32-bit integers separated by one space character, for “W H” the number of columns (width) and rows (height), in cells, of the map.<br>Third line: Two positive 32-bit integers separated by one space character, for “X Y” the coordinates (in cells) of the starting position for our skier. 0 X W-1 and 0 Y H-1 (that is, we use 0-based indexing into the map; X increases when moving East and Y increases when moving South; (0,0) is the North West corner of the map). Starting point remains the same for each of the N lodge sites below and will never contain a tree.<br>Fourth line: Positive 32-bit integer number for the stamina S of the skier which determines how advanced our skier is. S will be used to compute allowed moves if we’re moving into a non-tree cell.<br>Fifth line: Strictly positive 32-bit integer N, the number of lodges on the mountain.<br>Next N lines: Two positive 32-bit integers separated by one space character, for “X Y” the coordinates (in cells) of each lodge site. 0 X W-1 and 0 Y H-1 (that is, we again use 0-based indexing into the map). These N target lodge sites are not related to each other, so you will run your search algorithm on each lodge site and write the result to the output as specified below. We will never give you a lodge site that is the same as the starting point. They will never contain a tree.<br>Next H lines: W 32-bit integer numbers separated by any numbers of spaces for the M values of each of the W cells in each row of the map. Each number can represent the following cases:<br>E &gt;= 0, snowy mountain slope with elevation E<br>E &lt; 0, tree of height |E| that might be covered with snow depending on the elevation we approach it from<br>For example:</p><p>A*<br>8 6<br>4 4<br>5<br>2<br>2 1<br>6 3<br>-10 40 34 21 42 37 18   7<br>-20 10  5 27 -6  5  2   0<br>-30  8 17 -3 -4 -1  0   4<br>-25 -4 12 14 -1  9  6   9<br>-15 -9 46  6 25 11 31 -21<br>-5  -6 -3 -7  0 25 53 -42<br>In this example, on an 8-cells-wide by 6-cells-high grid, we start at location (4, 4) highlighted in green above, where (0, 0) is the North West corner of the map. The maximum stamina that the skier has is 5 (in arbitrary units which are the same as for the E values of the map). We have 2 possible lodge sites, at locations (2, 1) and (6, 3), both highlighted in red above. The map of the land is then given as six lines in the file, with eight E values in each line, separated by spaces. The negative values are trees.</p><p>Output: The file output.txt which your program creates in the current directory should be formatted as follows:</p><p>N lines: Report the paths in the same order as the lodge sites were given in the input.txt file. Write out one line per target lodge. Each line should contain a sequence of X,Y pairs of coordinates of cells visited by the skier to travel from the starting point to the corresponding lodge for that line. Only use a single comma and no space to separate X,Y and a single space to separate successive X,Y entries. If no solution was found (lodge was unreachable by the skier from the given starting point), write a single word FAIL in the corresponding line. Our skier needs a rescue in this case.<br>For example, output.txt may contain:</p><p>4,4 3,3 2,2 2,1<br>4,4 5,3 6,3<br>Here the first line is a sequence of five X,Y locations which trace the path from the starting point (4,4) to the first settling site (1,1). Note how both the starting location and the settling site location are included in the path. The second line is a sequence of three X,Y locations which trace the path from the starting point (4,4) to the second possible settling site (6,3).</p><p>With the starting point shown in green, the lodge sites in red, and each traversed cell in between in yellow. Note how one could have thought of a perhaps shorter path: 4,4 4,3 3,2 2,1 (general lower |E| values). But this was not allowed, since once we get to position 4,3 we are blocked by the tree in 3,2.</p><p>Notes and hints<br>Please name your program “homework.xxx” where ‘xxx’ is the extension for the programming language you choose (“py” for python, “cpp” for C++11, and “java” for Java).<br>Likely (but no guarantee) we will create 15 BFS, 15 UCS, and 20 A* text cases.<br>Your program will be killed after some time if it appears stuck on a given test case, to allow us to grade the whole class in a reasonable amount of time. We will make sure that the time limit for a given test case is at least 10x longer than it takes for the reference algorithm written by the TA to solve that test case correctly.<br>There is no limit on input size, number of target lodges, etc. other than specified above (32-bit integers, etc.). However, you can assume that all test cases will take [ 30 secs to run on a regular laptop.<br>If several optimal solutions exist, any of them will count as correct.<br>Actual test cases used for grading will be significantly more complex than the 3 examples shown below (e.g., that could have 500x500 maps or bigger). The examples below are mostly to make sure you can correctly parse the inputs and produce correctly formatted outputs.<br>Example 1<br>For this input.txt:</p><p>BFS<br>2 2<br>0 0<br>5<br>1<br>1 1<br>0   -10<br>-10 -20<br>the only possible correct output.txt is:</p><p>FAIL<br>Example 2<br>For this input.txt:</p><p>UCS<br>5 3<br>0 0<br>5<br>1<br>4 1<br>1 5   1  -1 -2<br>6 2   4  10  3<br>9 8 -10 -20 40<br>one possible correct output.txt is:</p><p>0,0 1,0 2,0 3,0 4,1<br>Example 3<br>For this input.txt:</p><p>A*<br>5 4<br>0 1<br>3<br>1<br>4 3<br>20 2 1 -2 -10<br>-8 1 10 2 -20<br>9 -1 4 15  11<br>6 -5 1  1  -1<br>one possible correct output.txt is:</p><p>0,1 1,1 2,2 3,3 4,3</p>]]></content>
    
    <summary type="html">
    
      使用BFS, UCS和A*，解决滑雪最短路径问题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>COMP420-Fork</title>
    <link href="https://tk1307993.coding.me/COMP420-Fork.html"/>
    <id>https://tk1307993.coding.me/COMP420-Fork.html</id>
    <published>2023-03-11T01:39:33.000Z</published>
    <updated>2023-03-11T01:41:17.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You are given a base code. You can compile the code and execute the solver by typing ./flow <puzzlename>. You are going to have to program your solver in the file search.c. Look at the file and implement the missing part in the function called game_dijkstra_search. Once you implement the search algorithm, gProject Deliverables<br>Your project deliverables are to be posted to CUNY Blackboard using the Project 1 link.</puzzlename></p><p>1) Only one source code file as follows with filename format showing your last name and student id: MYLASTNAME_MYSTUDENTID.c<br>a) At top of the file: your full name and student id in comments, for example: // MYFIRSTNAME MYLASTNAME MYSTUDENTID<br>b) In-line code comments no fewer than every 5 lines of code which describe your algorithmic steps in plain English language.<br>That is, I do not want to see literal syntax transcriptions of the code.<br>2) An MS Word or PDF document with a write-up of your software design and an explanation of the issues encountered and resolved. (1 page)<br>The write-up is essay style with no bullet points nor itemized lists nor source code nor pseudo-code listings.<br>Filename format is MYLASTNAME_MYSTUDENTID.doc (or pdf). You are to use Times New Roman Font with font size = 11 and 1.5 line spacing.<br>3) Text file of program output (text files only, that is, no graphics files from copying screen output) according to output format in<br>Project Instructions further below for your program execution. I will provide sample input files and sample program execution commands on CUNY Blackboard for which program output is to be submitted.<br>4) Please please ensure that your program will compile and link using the GNU C compiler. I will compile and link your source code to generate an executable file using the following command:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gcc</span> <span class="selector-tag">MYLASTNAME_MYSTUDENTID</span><span class="selector-class">.c</span> <span class="selector-tag">-o</span> <span class="selector-tag">MYLASTNAME_MYSTUDENTID</span><span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure><h3 id="Project-Specification"><a href="#Project-Specification" class="headerlink" title="Project Specification"></a>Project Specification</h3><p>In your first project you will design and implement a program that, when executed, has both a parent process and a child process. You use the fork() system call to create a child process. The exec() system call is NOT to be used in this project. The parent and child utilize only two IPC resources between them: one POSIX message queue and one ordinary pipe.<br>Your program execution and command line arguments follows this syntax to provide counts for each input given on the command line:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./MYLASTNAME_MYSTUDENTID.exe</span> [OPTION]<span class="string">...</span> BUFFER_SIZE [INPUT FILE]<span class="string">...</span></span><br></pre></td></tr></table></figure></p><p>The OPTIONS are the following. If none are specified on the command line then -ncb is used by default.</p><p>-n prints the newline count for each input<br>-c prints the word counts for each input<br>-b prints the character counts for each input<br>-m prints the maximum line length for each input<br>BUFFER_SIZE is a number between 32 and 256 inclusively and must be specified.</p><p>[INPUT FILE] contains a list of input files. If no input file is specified, then myinpfile.txt is used.</p><h3 id="Project-Instructions"><a href="#Project-Instructions" class="headerlink" title="Project Instructions"></a>Project Instructions</h3><p>Your program source code must be provided in the C programming language.<br>Your program must use the POSIX system file I/O and process management system calls which were discussed in lectures and reading assignments as well as those for POSIX message queues and ordinary pipes.<br>You are NOT permitted to use any C standard I/O library functions nor string library functions.<br>Only the child process will read the input as given by [INPUT FILE]. The child will write the input file contents in chunks as indicated by BUFFER_SIZE to the pipe. The parent will read this content from the pipe in chunks as indicated by BUFFER_SIZE.<br>The parent process will compute the counts as indicated by [OPTION] for each input file separately from any other input file.<br>The parent process will send each count (as indicated by [OPTION]) for each input file as its own POSIX message into the POSIX message queue. Therefore, as an example, if -ncbm is indicated with three input files on the command line, the parent process will send at least 4 * 3 = 12 messages into the POSIX message queue.<br>The child process will receive the messages from (6) above in the POSIX message queue and will write the following to standard output in the following format according to each [OPTION] requested for each input file [INPUT FILE] where NEWLINE_COUNT indicates the newline count, WORD_COUNT is the word count, CHAR_COUNT is the character count, and MAX_LINE is the maximum line length.<br>After all input files have been processed and the standard output in (7) has been generated, the parent and child processes will terminate. The parent will print its last output to standard output as follows:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Parent:</span> Terminating.\n</span><br></pre></td></tr></table></figure><p>Similarly, The child will print its last output to standard output as follows:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Child:</span> Terminating.\n</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      使用Fork系统调用，完成父子进程创建。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP9012-Flow-Puzzle</title>
    <link href="https://tk1307993.coding.me/COMP9012-Flow-Puzzle.html"/>
    <id>https://tk1307993.coding.me/COMP9012-Flow-Puzzle.html</id>
    <published>2023-03-08T00:27:24.000Z</published>
    <updated>2023-03-08T00:29:49.978Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You are given a base code. You can compile the code and execute the solver by typing ./flow <puzzlename>. You are going to have to program your solver in the file search.c. Look at the file and implement the missing part in the function called game_dijkstra_search. Once you implement the search algorithm, go to the file called extensions.c and implement the function called game_check_deadends</puzzlename></p><p>You are given the structure of a node in node.<em>files, and also a priority queue queues.</em> implementation. Look into the engine.<em> and utils.</em> files to know about the functions you can call to perform the search.</p><p>In your final submission, you are free to change any file, but make sure the command line options remain the same.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>In order to execute your solver use the following command:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./flow [<span class="keyword">options</span>] <span class="symbol">&lt;puzzleName1&gt;</span> ... <span class="symbol">&lt;puzzleNameN&gt;</span></span><br></pre></td></tr></table></figure></p><p>for example:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/flow puzzles/</span>regular_5x5_01.txt</span><br></pre></td></tr></table></figure></p><p>Will run the solver for the regular 5 by 5 puzzle, and report if the search was successful, the number of nodes generated and the time taken. if you use flag -q (quiet) it will report the solutions more concisely. This option can be useful if you want to run several puzzles at once and study their performance.</p><p>If you append the option -A it will animate the solution found. If you append the option -d it will use the dead-end detection mechanism that you implemented. Feel free to explore the impact of the other options, specifically the ordering in which the colors are explored.</p><p>By default, the color that has fewer free neighbors (most constrained), is the one that is going to be considered first.</p><p>All the options can be found if you use option -h:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">./flow</span> -h</span><br><span class="line">usage: flow_solver [ OPTIONS ] BOARD1.txt</span><br><span class="line">BOARD2.txt [ <span class="string">...</span> ] ]</span><br><span class="line"></span><br><span class="line">Display options:</span><br><span class="line">  -q, <span class="params">--quiet</span>             Reduce output</span><br><span class="line">  -d, <span class="params">--diagnostics</span>       Print diagnostics when search unsuccessful</span><br><span class="line">  -A, <span class="params">--animation</span>         Animate solution</span><br><span class="line">  -F, <span class="params">--fast</span>              Speed up animation 4x</span><br><span class="line">  -C, <span class="params">--color</span>             Force use of ANSI color</span><br><span class="line">  -S, <span class="params">--svg</span>               Output final state to SVG</span><br><span class="line"></span><br><span class="line">Node evaluation options:</span><br><span class="line">  -d, <span class="params">--deadends</span>          dead-end checking</span><br><span class="line"></span><br><span class="line">Color ordering options:</span><br><span class="line">  -r, <span class="params">--randomize</span>         Shuffle order of colors before solving</span><br><span class="line">  -c, <span class="params">--constrained</span>       Disable order by most constrained</span><br><span class="line"></span><br><span class="line">Search options:</span><br><span class="line">  -n, <span class="params">--max-nodes</span> N       Restrict storage to N nodes</span><br><span class="line">  -m, <span class="params">--max-storage</span> N     Restrict storage to N MB <span class="params">(default 1024)</span></span><br><span class="line"></span><br><span class="line">Help:</span><br><span class="line">  -h, <span class="params">--help</span>              See this <span class="keyword">help</span> text</span><br></pre></td></tr></table></figure><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>Your solver will print the following information if option -q is used:</p><p>Puzzle Name<br>SearchFlag (see utils.c, line 65-68 to understand the flags)<br>Total Search Time, in seconds<br>Number of generated nodes<br>A final Summary<br>For example, the output of your solver ./flow -q ../puzzles/regular_* could be:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">../puzzles/regular_5x5_01.txt s <span class="number">0.000</span> <span class="number">18</span></span><br><span class="line">../puzzles/regular_6x6_01.txt s <span class="number">0.000</span> <span class="number">283</span></span><br><span class="line">../puzzles/regular_7x7_01.txt s <span class="number">0.002</span> <span class="number">3</span>,<span class="number">317</span></span><br><span class="line">../puzzles/regular_8x8_01.txt s <span class="number">0.284</span> <span class="number">409</span>,<span class="number">726</span></span><br><span class="line">../puzzles/regular_9x9_01.txt s <span class="number">0.417</span> <span class="number">587</span>,<span class="number">332</span></span><br><span class="line"><span class="number">5</span> total s <span class="number">0.704</span> <span class="number">1</span>,<span class="number">000</span>,<span class="number">676</span></span><br></pre></td></tr></table></figure></p><p>These numbers depend on your implementation of the search, the ordering you use, and whether you prune dead-ends. If we use dead-end pruning ./flow -q -d ../puzzles/regular_* we get the following results<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">../puzzles/regular_5x5_01.txt s <span class="number">0.000</span> <span class="number">17</span></span><br><span class="line">../puzzles/regular_6x6_01.txt s <span class="number">0.000</span> <span class="number">254</span></span><br><span class="line">../puzzles/regular_7x7_01.txt s <span class="number">0.001</span> <span class="number">2</span>,<span class="number">198</span></span><br><span class="line">../puzzles/regular_8x8_01.txt s <span class="number">0.137</span> <span class="number">182</span>,<span class="number">136</span></span><br><span class="line">../puzzles/regular_9x9_01.txt s <span class="number">0.210</span> <span class="number">279</span>,<span class="number">287</span></span><br></pre></td></tr></table></figure></p><p>5 total s 0.349 463,892<br>Remember that in order to get full marks, your solver has to solve at least the regular puzzles.</p><h3 id="Deliverables-1"><a href="#Deliverables-1" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Deliverable 1 - Dijkstra Solver source code<br>You are expected to hand in the source code for your solver, written in C. Obviously, your source code is expected to compile and execute flawlessly using the following makefile command:</p><p>Remember to compile using the optimization flag gcc -O3 for doing your experiments, it will run twice as quickly as compiling with the debugging flag gcc -g (see Makefile). The provided Makefile compiles with the optimization flag by default, and with the debugging flag if you type make debug=1. For the submission, please do not remove the -g option from your Makefile, as our scripts need this flag for testing. Your program must not be compiled under any flags that prevent it from working under gdb or valgrind.</p><p>Your implementation should be able to solve the regular puzzles provided. To solve the extreme puzzles, you’ll need further enhancements that go beyond the time for this assignment, but feel free to challenge yourself if you finish early and explore how you would solve the extreme puzzles.</p><h3 id="Deliverable-2-Experimentation"><a href="#Deliverable-2-Experimentation" class="headerlink" title="Deliverable 2 - Experimentation"></a>Deliverable 2 - Experimentation</h3><p>Besides handing in the solver source code, you’re required to provide a table reporting at least the execution time and number of generated nodes with and without dead-end detection. Include in the table only the puzzles that your solver finds a solution to.</p><p>Plot figures, where the x-axis can be the number of free cells at the start, or the size of the grid, and the y-axis is either the number of generated states or solution time.</p><p>Explain your results using your figures and tables. Which complexity growth does your data show? What’s the computational benefit of the dead-end detection, does it decrease the growth rate? Answer concisely.</p><p>If you decide to implement any further optimization beyond the instructions of the assignment, or change the default arguments such as allowed memory or color ordering, please discuss their impact on the experimentation section as well.</p><p>Please include your Username, Student ID and Full Name in your Document.</p><p>My recommendation is that you generate the plots using any standard Python visualization library. See for example Seaborn or Matplotlib. Otherwise, there’s always the old-school excel/open-office/google-sheets method.</p>]]></content>
    
    <summary type="html">
    
      实现程序Flow, 在规定时间内得到Puzzle的解，算法使用改进过的Dijkstra.
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CAB403-Car-Park-Management-System-and-Simulator</title>
    <link href="https://tk1307993.coding.me/CAB403-Car-Park-Management-System-and-Simulator.html"/>
    <id>https://tk1307993.coding.me/CAB403-Car-Park-Management-System-and-Simulator.html</id>
    <published>2023-03-01T06:38:48.000Z</published>
    <updated>2023-03-01T06:41:41.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Your task is to develop and submit three pieces of software relating to a car park management system:</p><p>A car park management system, henceforth referred to as the ‘manager’ - software that takes care of the automated aspects of running a car park, interacting with license plate readers, boom gates and electronic displays to ensure smooth operation and accurate reporting of the car park.<br>A car park simulator, henceforth referred to as the ‘simulator’ - software that simulates all of the aforementioned pieces of hardware such that the manager can be tested without physical access to the actual car park systems. This also includes simulating the movement of vehicles around the car park.<br>A fire alarm system for the car park, henceforth known as the ‘fire alarm system’ software that interacts with temperature sensors within the car park and follows required procedures if a fire is detected. This component is regarded as a safety critical system, and while a functioning one has already been implemented (firealarm.c, available via Blackboard), your task is to assess it, write a report on its suitability as a safety-critical software component, and if necessary, fix or rewrite it.<br>These three pieces of software are all separate programs. They must be written in standard C (no other programming languages are permitted) and be compilable and runnable on the provided MX Linux virtual machine as-is. You will need to make use of the POSIX threads library (pthreads), POSIX shared memory and other libraries that you have used in the CAB403 practical classes to complete this assignment.</p><p>To simulate the interactions between the manager and the physical hardware present in the car park, a shared memory segment is used by the three programs to communicate- for example, the manager will check the status of the license plate recognition (LPR) sensors and control boom gates and digital signs by accessing this segment. A detailed description of the structure of this shared memory segment is available in the section titled ‘Shared memory’.</p><h3 id="What-you-need-to-submit"><a href="#What-you-need-to-submit" class="headerlink" title="What you need to submit"></a>What you need to submit</h3><p>You are required to submit, via Blackboard, a .zip archive (you can create these in MX Linux either by selecting the files in the GUI, right-clicking and choosing ‘Compress’, or by using the command line program ‘zip’) consisting of the following:</p><p>The C source code (may consist of .c and .h files) of your manager, simulator and fire alarm systems.<br>A Makefile which will automatically build the above three programs upon typing<br>‘make’ using the warning flags -Wall -Wextra -Werror, to ensure that all errors are enabled and that warnings are treated as errors and do not permit compilation (note that the provided firealarm.c will not compile under these conditions due to warnings)<br>Other files needed by your system (e.g. plates.txt)<br>A report (in .docx or .pdf format - MX Linux comes with LibreOffice Writer which can be used to create this) consisting of the following information:<br>The names and student numbers of everyone in your team<br>A statement of completeness describing how much of the assignment has been completed and any issues (e.g. known bugs)<br>A statement of contribution detailing what each member of your team contributed to the project<br>An assessment of the safety-critical fire alarm system component. This in turn will consist of:<br>Identification of safety-critical standards that the provided firealarm.c fails (e.g..from NASA’s The Power of 10, ISO 26262-6:2018, MISRA C)<br>Description of the approach you have taken to fix the problems (e.g. editing firealarm.c, completely rewriting it etc.)<br>Potential safety-critical concerns and reservations of your new implementation (for example, some safety-critical software guidelines cannot be followed perfectly - list these and how you have mitigated the concerns they pose.)<br>You are also required to submit a video demonstration, which should be no longer than 5 minutes in length, demonstrating your system in action. You can either upload a video file as part of your submission to Blackboard or upload it to e.g. YouTube and submit a link.</p><h3 id="Car-park-structure"><a href="#Car-park-structure" class="headerlink" title="Car park structure"></a>Car park structure</h3><p>The simulator and manager work with an abstract model of a multi-level car park with 1-5 entrances, 1-5 exits and 1-5 levels, each of which can contain some maximum number of vehicles. For the purposes of this exercise, we will assume a car park of 5 entrances, 5 exits and 5 levels, with a capacity of 20 vehicles per level; however, you are required to include constants / preprocessor #defines to allow these to be easily configured. This way the client will be able to easily recompile the software to work with different car park configurations.</p><p>Cars seeking to gain entry to the car park queue up at one of the entrances. Once a car appears at the front of the queue, its license plate will be read by an LPR. The manager will then look that car up in its internal list of vehicles with permission to enter the park, and if this is granted, it will display the number referring to the level of the car park that the car should park at on the digital sign above the entrance and raise the boom gate. Each level of the car park also has an LPR detecting cars when they enter and exit. This is used to determine where cars are within the car park for the purpose of ensuring incoming cars are only directed towards levels where there is free space available. Cars seeking to leave the car park will head to one of the exits. Once they are detected by an exit LPR, the boom gate at the exit will open, allowing the car to leave.</p><p>It is assumed that, in this abstract model of a car park, none of the entrances or exits have any special affinity with each other or with the different levels of the car park, from a location / proximity perspective. They are simply used to allow more cars to enter/exit the car park at a time.</p><p>The roles of the manager:</p><p>Monitor the status of the LPR sensors and keep track of where each car is in the car park<br>Tell the boom gates when to open and when to close (the boom gates are a simple piece of hardware that can only be told to open or close, so the job of automatically closing the boom gates after they have been open for a little while is up to the manager)<br>Control what is displayed on the information signs at each entrance<br>As the manager knows where each car is, it is the manager’s job to ensure that there is room in the car park before allowing new vehicles in (number of cars [ number of levels * the number of cars per level). The manager also needs to keep track of how full the individual levels are and direct new cars to a level that is not fully occupied<br>Keep track of how long each car has been in the parking lot and produce a bill once the car leaves.<br>Display the current status of the parking lot on a frequently-updating screen, showing how full each level is, the current status of the boom gates, signs, temperature sensors and alarms, as well as how much revenue the car park has brought in so far.<br>The roles of the fire alarm system:</p><p>Monitor the status of temperature sensors on each car park level<br>When a fire is detected, activate alarms on every car park level, open all boom gates and display an evacuation message on the information signs<br>The roles of the simulator:</p><p>Simulate cars:<br>A simulated car receives a random license plate (sometimes on the list, sometimes not) and queues up at a random entrance to the car park, triggering an LPR when it reaches the front of the queue.<br>After triggering the LPR, the simulated car will watch the digital sign. If the sign contains a number, it will keep note of that number (the level where the car has been instructed to park) and then wait for the boom gate to open. If the sign contains any other character, the simulated car will just leave the queue and drive off, disappearing from the simulation.<br>After the boom gate opens, the car will drive to the level it was instructed to drive to, triggering the level LPR in the process.<br>The car will then park for a random amount of time.<br>After the car has finished parking, it will leave, setting off the level LPR again. It will then drive towards a random exit. Upon reaching that exit, it will set off the exit LPR and wait for the boom gate to open. Once the boom gate is open, it will leave the car park and disappear from the simulation.<br>Simulate boom gates:<br>Boom gates take a certain amount of time to open and close. Once the manager has instructed a closed boom gate to open or an open boom gate to close, the simulator’s job is to wait for a small amount of time before putting the boom gate into the open/closed state.<br>Simulate temperature:<br>Each level of the car park has a temperature sensor, sending back the current temperature (in degrees celsius). The simulator will frequently update these values with reasonable random values. The simulator should also be able to simulate a fire by generating higher values, in order to test / demonstrate the fire alarm system.</p><h3 id="Timings"><a href="#Timings" class="headerlink" title="Timings"></a>Timings</h3><p>Things take a long time to happen in a real car park - cars take a substantial amount of time to actually move around, gates take a while to open and so forth. For the purpose of this exercise, and to make running simulations less time consuming, the simulator and manager operate within an accelerated timescale, with delays measured in milliseconds. This means that it only takes a small amount of time for the car park to be occupied by many cars. You will need to use an appropriate high resolution sleep function (usleep() or nanosleep()) in order to invoke the appropriate delays. It is suggested that you create your own function that sleeps for a certain number of milliseconds. You can then, for example, apply a multiplier to the sleep duration calculated within that function in order to experiment with different timescales (for the purposes of debugging.) Your submitted code should use the timings indicated below (or similar timings), however.</p><p>Note that many of these delays will happen simultaneously - for example, the time that is spent by a simulated car moving around only delays the progress of that particular car, not other cars etc. For this reason it is highly recommended that pthreads is used, which will greatly simplify the work required to implement the simulator and manager.</p><h3 id="Simulator-timings"><a href="#Simulator-timings" class="headerlink" title="Simulator timings"></a>Simulator timings</h3><p>Every 1-100ms*, a new car will be generated by the simulator with a random license plate, and will start moving towards a random entrance.<br>Note that when a range is listed, this means the simulator needs to generate a random number in that range (e.g. between 1 and 100 inclusively) and then wait for that length of time. Note that we are not marking you based on the statistical correctness of your choice of random number generator - the stdlib.h rand() function is fine, for example (but keep in mind that you should protect calls to rand() with a mutex as rand() accesses a global variable containing the current random seed.).</p><p>Once a car reaches the front of the queue, it will wait 2ms before triggering the entrance LPR.<br>Boom gates take 10ms to fully open and 10ms to fully close.<br>After the boom gate is open, the car takes another 10ms to drive its parking space (triggering the level LPR for the first time).<br>Once parked, the car will wait 100-10000ms before departing the level (and triggering the level LPR for the second time).<br>It then takes the car a further 10ms to drive to a random exit and trigger the exit LPR.<br>Every 1-5ms, the temperature on each level will change to a random value</p><h3 id="Manager-timings"><a href="#Manager-timings" class="headerlink" title="Manager timings"></a>Manager timings</h3><p>After a boom gate has been fully opened, it will start to close 20ms later. Cars entering the car park will just drive in if the boom gate is fully open after they have been directed to a level (however, if the car arrives just as the boom gate starts to close, it will have to wait for the boom gate to fully close, then fully open again.)<br>Cars are billed based on how long they spend in the car park (see the Billing section for more information.)</p><h3 id="Fire-alarm-timings"><a href="#Fire-alarm-timings" class="headerlink" title="Fire alarm timings"></a>Fire alarm timings</h3><p>The fire alarm system will collect temperature readings every 2ms for the purpose of determining if a fire has occurred<br>Once the fire alarm system is active, the character ‘E’ will be displayed on every digital sign in the parking lot. 20ms later, they will all show ‘V’, then ‘A’, ‘C’, ‘U’, ‘A’, ‘T’, ‘E’, ‘ ‘, then looping back to the first E again.</p><h3 id="Permitted-vehicle-identification"><a href="#Permitted-vehicle-identification" class="headerlink" title="Permitted vehicle identification"></a>Permitted vehicle identification</h3><p>When the manager is run, it will read a file in the current directory called plates.txt - this file will contain the license plates of permitted vehicles, one per line, like this:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">029</span>MZH</span><br><span class="line"><span class="number">088</span>FSB</span><br><span class="line"><span class="number">174</span>JJD</span><br><span class="line"><span class="number">376</span>DDS</span><br><span class="line"><span class="number">451</span>HLR</span><br><span class="line"><span class="number">481</span>WPQ</span><br><span class="line"><span class="number">549</span>QHD</span><br><span class="line"><span class="number">594</span>QVK</span><br><span class="line"><span class="number">688</span>QHN</span><br><span class="line"><span class="number">931</span>KQD</span><br></pre></td></tr></table></figure><p>(A longer example plates.txt file is available on Blackboard.)</p><p>Whenever a vehicle triggers an entrance LPR, its license plate should be checked against the contents of this file. For performance / scalability reasons, the license plates need to be read into a hash table, which will then be checked when new vehicles show up. Using the hash table exercise from Practical 3 as a base is recommended, although not required.</p><p>If a vehicle shows up with a license plate not in plates.txt, the digital sign will display the character ‘X’ and the boom gate will not open for that vehicle.</p><p>In the simulator, cars should be generated with a random license plate. To ensure a good mix of permitted and not permitted cars, 50% of the time a new car should be generated with a random valid license plate (that is not currently in use by a car being simulated) and 50% of the time it should be generated with a random license plate not on the list. Once a car leaves the simulation, its license plate becomes available for reuse.</p><h3 id="Billing"><a href="#Billing" class="headerlink" title="Billing"></a>Billing</h3><p>Cars are billed at a rate of 5 cents for every millisecond they spend in the car park (that is, the total amount of time between the car showing up at the entrance LPR and the exit LPR). This is tracked per car and the amount of time, shown in dollars and cents, is written next to the car’s license plate into a file when the car leaves (note that cars that are turned away at the entrance attract no such fee - the fee is only for cars that are accepted into the car park.) The manager writes these, line at a time, to a file named billing.txt, each time a car leaves the car park. The billing.txt file will be created by the manager if it does not already exist, and must be opened in append mode, which means that future lines will be written to the end of the file if the file already exists (this will avoid the accidental overwriting of old billing records). Here is an example billing file:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">029</span>MZH $<span class="number">8.25</span></span><br><span class="line"><span class="number">088</span>FSB $<span class="number">20.80</span></span><br><span class="line"><span class="number">174</span>JJD $<span class="number">14.95</span></span><br><span class="line"><span class="number">376</span>DDS $<span class="number">32.50</span></span><br><span class="line"><span class="number">451</span>HLR $<span class="number">11.00</span></span><br></pre></td></tr></table></figure></p><h3 id="Fire-detection"><a href="#Fire-detection" class="headerlink" title="Fire detection"></a>Fire detection</h3><p>The fire alarm system utilises temperature sensors to determine if a fire has occurred. Each temperature sensor (there is one on each level) returns a signed 16-bit integer containing the current temperature it is picking up. Because of the potential for noise and incorrect values being generated by the temperature sensor, the fire alarm system will smooth the data in the following way:</p><p>For each temperature sensor, the monitor will store the temperature value read from that sensor every 2 milliseconds. Out of the 5 most recent temperature readings, the median temperature will be recorded as the ‘smoothed’ reading for that sensor.<br>The 30 most recent smoothed temperatures are then analysed (before 30 smoothed temperatures have been read, the fire alarm system cannot use this sensor to detect the presence of a fire.<br>The fire alarm system then uses two approaches to determine the presence of a fire- fixed temperature and rate of rise. If either of these approaches detects a fire, the alarm is triggered.</p><h3 id="Fixed-temperature-fire-detection"><a href="#Fixed-temperature-fire-detection" class="headerlink" title="Fixed temperature fire detection"></a>Fixed temperature fire detection</h3><p>Out of the 30 most recent smoothed temperatures produced by a sensor, if 90% of them are 58C or higher, the temperature is considered high enough that there must be a fire.</p><h3 id="Rate-of-rise-fire-detection"><a href="#Rate-of-rise-fire-detection" class="headerlink" title="Rate-of-rise fire detection"></a>Rate-of-rise fire detection</h3><p>Out of the 30 most recent smoothed temperatures produced by a sensor, if the most recent temperature is 8C (or more) hotter than the 30th most recent temperature, the temperature is considered to be growing at a fast enough rate that there must be a fire.</p><p>For testing and demonstration purposes, your simulator should have the ability to generate both of these scenarios, to ensure that both successfully trigger the alarm.</p><h3 id="Shared-memory"><a href="#Shared-memory" class="headerlink" title="Shared memory"></a>Shared memory</h3><p>The three processes communicate via a shared memory segment named PARKING (all caps). The PARKING segment is 2920 bytes in size. The simulator needs to create this segment when it is first started (the segment may already exist from a previous run, in which case the simulator creates it again, overwriting the old one. The manager and fire alarm system both open the existing PARKING segment when they are started (and will print an error message and exit if it is not present.) The segment contains space for 5 parking lot entrances, 5 exits and 5 levels.</p><h3 id="Inter-process-communication"><a href="#Inter-process-communication" class="headerlink" title="Inter-process communication"></a>Inter-process communication</h3><p>Most of the values in the shared memory structure are accompanied by a mutex and a condition variable. These must be initialised by the simulator when the shared memory segment is created. Note that these mutexes and condition variables are accessed by different processes, which means they need to be process shared. By default, mutexes and condition variables are PTHREAD_PROCESS_PRIVATE, which means pthread_mutexattr_setpshared() and pthread_condattr_setpshared() need to be used to make these PTHREAD_PROCESS_SHARED, which will allow them to work correctly across multiple processes.</p><p>Mutexes are used to protect the integrity of shared data. The normal approach before accessing most values in the shared memory structure is to lock the associated mutex, read/write the value, then unlock the associated mutex.</p><p>Condition variables are used to allow threads to wait for a particular value to change in order to avoid busywaiting. Busywaiting must be avoided in this assignment where possible for a description of busywaiting, see Appendix B. When changing a value, the associated condition variable should be broadcast to, allowing threads that are waiting on that value to wake up and check it.</p><p>The process for waiting on a particular shared memory variable is usually the following:</p><p>The thread that is waiting on a value (e.g. for a boom gate to switch to its ‘open’ state) first acquires the mutex associated with that value.<br>The thread then waits on the associated condition variable, passing the mutex as the second parameter. This will also unlock the mutex while the thread is waiting.<br>Once the value has been changed and the condition variable broadcast to, the thread will wake up, re-acquire the mutex and check the value again, before making a decision about whether to continue waiting or not.<br>Finally, the thread will unlock the mutex and continue.<br>The temperature sensors and alarms are not protected by mutexes. Writes to them need to be atomic and the ‘volatile’ keyword in C should be used to ensure that reads and writes reflect the true contents of the shared memory segment.</p><h3 id="Shared-memory-structure"><a href="#Shared-memory-structure" class="headerlink" title="Shared memory structure"></a>Shared memory structure</h3><p>Bytes 0-1439 contain space for 5 entrances, each 288 bytes large. Each entrance consists of the following:</p><p>A license plate recognition sensor (96 bytes, at bytes 0-95)<br>A boom gate (96 bytes, at bytes 96-191)<br>An information sign (96 bytes, at bytes 192-287)<br>(Definitions for each of these appear later in this document, as some are reused in different areas.)</p><p>Bytes 1440-2399 contain space for 5 exits, each 192 bytes large. Each exit consists of the following:</p><p>A license plate recognition sensor (96 bytes, at bytes 0-95)<br>A boom gate (96 bytes, at bytes 96-191)<br>Bytes 2400-2919 contain space for 5 levels, each 104 bytes large. Each level consists of the following:</p><p>A license plate recognition sensor (96 bytes, at bytes 0-95)<br>A temperature sensor (2 bytes, at bytes 96-97)<br>An alarm (1 byte, at byte 98)<br>Padding (5 bytes, at bytes 99-103), not used for anything<br>Each license plate recognition (LPR) sensor is 96 bytes large and consists of the following:</p><p>A pthread_mutex_t mutex lock (40 bytes, at bytes 0-39)<br>A pthread_cond_t condition variable (48 bytes, at bytes 40-87)<br>A license plate, 6 characters long (6 bytes, at bytes 88-93)<br>Padding (2 bytes, at bytes 94-95), not used for anything<br>Vehicles pass in front of the various LPR sensors at different times depending on where the LPR is located:</p><p>The LPR at the entrance will detect a vehicle approaching the boom gate<br>The LPR at the exit will detect a vehicle approaching the exit boom gate<br>The LPR on each level of the parking lot will detect any vehicle entering or exiting that level.<br>It can be assumed that, in a normal case, a vehicle will appear on LPRs 4 times- once at an entrance, twice on the floor the vehicle parks on, and once when exiting the parking lot. When a vehicle passes an LPR, the vehicle’s license plate is written to the 6 character license plate field in that LPR and the LPR’s condition variable is signalled. The mutex is used to protect the license plate data against concurrent access.</p><p>Each boom gate is 96 bytes large and consists of the following:</p><p>A pthread_mutex_t mutex lock (40 bytes, at bytes 0-39)<br>A pthread_cond_t condition variable (48 bytes, at bytes 40-87)<br>The boom gate’s status, 1 character long (1 byte, at byte 88)<br>Padding (7 bytes, at bytes 89-95), not used for anything<br>There are 4 acceptable values for the boom gate’s status:</p><p>‘C’ - Closed. This is the default value every gate should start in.<br>‘O’ - Open. Vehicles can only pass through the gate while it is open.<br>‘R’ - Raising. Boom gate is currently in the process of being raised. To open the boom gate, the manager sets the gate’s status character to ‘R’ and signals the condition variable. The simulator will then set the status character to ‘O’ after 10 milliseconds.<br>‘L’ - Lowering. Boom gate is currently in the process of being lowered. To close the boom gate, the manager sets the gate’s status character to ‘L’ and signals the condition variable. The simulator will then set the status character to ‘C’ after 10 milliseconds.<br>Note that the only acceptable status changes are as follows: C -&gt; R, R -&gt; O, O -&gt; L, L -&gt; C. Only the manager can change the boom gate’s status from C to R or O to L and only the simulator can change the boom gate’s status from R to O or L to C. Any other status changes are in error.</p><p>An information sign is 96 bytes large and consists of the following:</p><p>A pthread_mutex_t mutex lock (40 bytes, at bytes 0-39)<br>A pthread_cond_t condition variable (48 bytes, at bytes 40-87)<br>The information sign’s display, 1 character long (1 byte, at byte 88)<br>Padding (7 bytes, at bytes 89-95), not used for anything<br>The information sign is very basic and only has room to display a single character. It is used to show information to drivers at various points:</p><p>When the driver pulls up in front of the entrance boom gate and triggers the LPR, the sign will show a character between ‘1’ and ‘5’ to indicate which floor the driver should park on.<br>If the driver is unable to access the car park due to not being in the access file, the sign will show the character ‘X’.<br>If the driver is unable to access the car park due to it being full, the sign will show the character ‘F’.<br>In the case of a fire, the information sign will cycle through the characters ‘E’ ‘V’ ‘A’ ‘C’ ‘U’ ‘A’ ‘T’ ‘E’ ‘ ‘, spending 20ms on each character and then looping back to the first ‘E’ after displaying the space character..<br>To show a new message on the sign, the display character is set and the condition variable broadcast to (to inform any processes waiting for the sign to change.)</p><p>The per-level temperature sensor is 2 bytes long and consists of a signed 16-bit integer representing the current temperature (in degrees celsius) detected on that floor. Note that the temperature sensors are not expected to be perfect and may occasionally contain incorrect values. This will be written to by the simulator and read by the fire alarm system (note that there is no mutex protecting this value).</p><p>The per-level alarm is 1 byte long and simply contains a value of 0 or 1 depending on whether the alarm is on or not (default is 0). Again, no mutex protects this value.</p><p>Some additional notes about the shared memory segment’s layout:</p><p>The size of the mutex (40 bytes) and condition variable (48 bytes) are platform-dependent. The values that have been given are for the MX Linux virtual machine where we will be testing your code. You are free to develop the code on the platform of your choice, but just make sure to keep in mind where your code will be run.<br>You can directly address the variables via their memory address (e.g. (pthread_mutex_t *)(ptr + 96) to get a pointer to the mutex for the boom gate for Entrance #1), but it may be better to create a struct with the same fields to assist with layout.<br>Appendix A contains the locations of every variable in the shared memory segment, which you might find useful as a reference<br>Unusual behaviour of vehicles<br>When a vehicle shows up at the entrance and is permitted entry, it is shown a level number and it is expected that the vehicle will go and park on that level. However, in reality, once the vehicle is inside the car park it can drive wherever it wants to go, including to a different level, or directly to the exit. A vehicle can even move between levels. For this reason, LPRs on each level are present, detecting a vehicle accessing other levels. Potential unusual activity of vehicles does need to be taken into account by the manager when determining how to assign vehicles to levels. This needs to happen in the following way:</p><p>The car park keeps track of both the number of vehicles assigned to each level and the level that each vehicle is currently assigned to<br>When a vehicle is directed by the digital sign to a level, that vehicle will be assigned to that level. Hence, if two vehicles arrive, one after another, they will not both be directed to a level that only has space for one more vehicle.<br>However, if the vehicle is detected moving into another level by one of the per-level LPRs, it will then be counted as being assigned to that level if there is room on that level. That is, if a vehicle was directed towards level 1, it would initially count towards level 1’s capacity. However, if that vehicle is then spotted by level 2’s LPR, if level 2 has room for it, it will be subtracted from level 1’s capacity and then added to level<br>Status display<br>When the manager program is run, the terminal it is run in should display a (text mode) screen showing the current status of the car park. The exact layout and formatting is up to you, but the following information is expected to be presented:</p><p>Current state of each LPR, boom gate and digital sign<br>Current state of each temperature sensor<br>Number of vehicles and maximum capacity on each level<br>Total billing revenue recorded by the manager thus far<br>The way the information is presented also has some requirements:</p><p>The display should update frequently (e.g. every 50ms)<br>To prevent visual fatigue from trying to process rapidly scrolling text, all the above information should be able to fit into a single screen. In addition, before printing out the current status, the screen should be cleared (e.g. with system(“clear”)), again, to prevent scrolling.</p><h3 id="Video-demonstration"><a href="#Video-demonstration" class="headerlink" title="Video demonstration"></a>Video demonstration</h3><p>You need to produce a short video demonstration showing your software in action, with most of the focus being on the manager program, given that its status display should be able to show you what is going on. You will want to demonstrate ordinary operation, as well as exceptional situations such as a spike in temperatures indicating the presence of a fire (and the response of the fire alarm system.)</p><p>Two examples programs that can be used to record a video fairly easily are Zoom and OBS Studio. With Zoom you can start up a meeting by yourself (or with other members of your team), share your screen, start recording the meeting and then demonstrate it that way.</p><p>The video is your way of demonstrating how your software is supposed to work, as well as showing that you’ve implemented the functionality you are required to. As a general rule, if you want to receive marks for a certain component in your software, you need to demonstrate it in the video.</p>]]></content>
    
    <summary type="html">
    
      完成小组任务的一部分，开发和提交与停车场管理系统(Car Park Management System)相关的三个软件。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>PSY4219-Gaussians-Filter</title>
    <link href="https://tk1307993.coding.me/PSY4219-Gaussians-Filter.html"/>
    <id>https://tk1307993.coding.me/PSY4219-Gaussians-Filter.html</id>
    <published>2023-02-25T01:28:13.000Z</published>
    <updated>2023-02-25T01:30:12.942Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Guidelines"><a href="#Project-Guidelines" class="headerlink" title="Project Guidelines"></a>Project Guidelines</h3><p>All user interaction should taRequirement<br>You can do this assignment in a Python .py file or in a Jupyter Notebook. Recall that if you run into problems with code in a Jupyter Notebook, the best thing would be to try to debug that code in PyCharm (even if you want to copy it back to a Jupyter Notebook).</p><h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><p>For this question, perform some basic operations on an image that I have loaded onto Brightspace (nashville.jpg).</p><p>(a) Read in nashville.jpg, display it, and convert it from RGB to grayscale using the following formula to convert from red, green, and blue values to grayscale intensity:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">intensity</span> <span class="string">=</span> <span class="number">0.2989</span><span class="string">*red</span> <span class="string">+</span> <span class="number">0.5870</span><span class="string">*green</span> <span class="string">+</span> <span class="number">0.1140</span><span class="meta">*blue</span></span><br></pre></td></tr></table></figure></p><p>Save the image as a jpg file called nashvillegray.jpg, read it back in, and display it. You will use this grayscale version in the remaining parts below.</p><p>(b) Create a scrambled version of the grayscale image nashvillegray.jpg. Imagine dividing the image into an 8x8 grid. Create a scrambled version of the image where each of the sections in the 8x8 grid is randomly shuffled (a permutation). An example of the grayscale version and one possible scrambled version is shown below. We discussed a way to accomplish this scrambling in class.</p><p>Your code should read in the image into a numpy array. Create a function that takes this numpy array as an argument and takes the number of ways to slice the image (for example 8 to create an 8x8 grid) and returns a numpy array containing the scrambled image. Your code should display the scrambled image. Aside from using a built in permutation function and other non-image-processing functions in Python, the scrambling of the image should be done by your code (in other words, do not search for any built-in image/signal processing functions or existing packages that might do this scrambling for). Please try to write your code so that you can change the “8” in the 8x8 grid to some other value, like a 4x4 grid, or a 64x64 grid; you can assume that the number is chosen to equally divide the image size. Save the resulting scrambled image to a jpg file.</p><p>(c) Add “noise” to an image (in this case nashvillegray.jpg). Your code should read in the image into a numpy array, that numpy array should be passed to a function that adds the noise, with the noise specified by other arguments passed to the function.<br>The noise should be normally distributed with mean 0 and standard deviation sigma. This “noise” is added to the intensity (brightness) of each pixel in the image. This kind of noise is what sometimes called “salt and pepper noise”, whereby the intensity of each image pixel is jiggled up or down by a normally distributed random number.</p><p>When you add noise, allow for two options (as an optional argument in your function): one version where added noise that would cause a pixel value to go above 255 is capped at 255 go below 0 is capped at 0, and another version where noise is allowed to jump from 255 to 0 or from 0 to 255 when you cast as an uint8. Your code should show what happens (displaying two images) to illustrate the two ways of manipulating noise (and capping vs. rolling over at the extremes).</p><p>Your function should return a numpy array as uint8.</p><p>For each version, create one image and save it with a low but perceptible level of noise and create another image and save it with a relatively high level of noise; you will be saving four images.</p><h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><p>We talked about using the Laplacian of Gaussians filter to find edges in images. For this question, I would like you to explore the Laplacian, the Gaussian, and the Laplacian of Gaussians (LoG). This question uses the convolution computations we talked about in class and illustrated in the posted Jupyter Notebooks from class.</p><p>For this assignment, read in and use nashvillegray.jpg from above, but your code should work for any image that is read in.</p><p>Use this Laplacian filter:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">L = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">24</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure></p><p>Use this Gaussian filter:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">G = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">26</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">26</span>, <span class="number">41</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">26</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])/<span class="number">273</span></span><br></pre></td></tr></table></figure></p><p>Note that this Gaussian filter is larger than some of the examples shown in class (and in the Jupyter notebook) because here we are using a higher-resolution image. Using a 3x3 Gaussian would produce nearly-imperceptible blur.</p><p>(a) Confirm (in code) that convolution is commutative, using the Laplacian and Gaussian filters, within a reasonable small epsilon [ .000001. Use the epsilon value in some way to support your demonstration (in other words, do not simply print out the resulting convolutions to inspect by eye - show it somehow).</p><p>(b) Confirm that you understand the computations that underlie convolution. Pick a single pixel location (i,j) somewhere in the grayscale image of the Nashville skyline (nashvillegray.jpg) that is sufficiently far away from the edges of the image to avoid dealing with edge effects. First, calculate the convolution of the Laplacian with the image at this pixel location without using the signal.convolve2d() function, i.e., just following the equations for computing the convolution at a particular pixel location (i,j). Confirm that the value you get with your “hand-coded” convolution calculation matches that using the built-in signal.convolve2d function at the same pixel location (i,j) within some epsilon.</p><p>Note that your code will need to work with other filters (not just the Laplacian) so make sure it’s general (not hard-coded). Recall that the convolution requires a particular way of doing its calculations that makes it different from a cross-correlation; don’t just rely on getting the same answer for your code and the signal.convolve2d function; make sure your code does the correct calculations.</p><p>(c) Create a new filter, called LoG, which is the convolution of the Laplacian with the Gaussian. I do not want you to use the LoG filter I defined in class, but create one by actually convolving the Laplacian with the Gaussian (above) in code. You can use signal.convolve2d() function for this.</p><p>(d) Convolve the image with the Laplacian alone, the Gaussian alone, and the Laplacian of Gaussians. You can use the signal.convolve2d() function for this.</p><p>Make a 1x4 subplot. Display the original and the results of the convolutions using imshow().</p><p>Recall that the Laplacian and Laplacian of Gaussians (LoG) produces an “image” of second derivatives. That means that it will contain both positive and negative values (you can confirm that by looking at the numpy arrays resulting from the convolution). You will want to play around with ways to visualize the Laplacian and LoG. If you just display it directly, it might be hard to see the results of the filtering. For example, you could set a criterion (a step function) so that values greater than the criterion are white and those less than the criterion are black (recall that the Laplacian detects “edges” in an image). Make sure you manipulate the Laplacian and Laplacian of Gaussian images the same way.</p>]]></content>
    
    <summary type="html">
    
      实现Gaussian Filter, Laplacian filter等图像处理中的经典算子。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Image Processing" scheme="https://tk1307993.coding.me/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>CS212-Hangman</title>
    <link href="https://tk1307993.coding.me/CS212-Hangman.html"/>
    <id>https://tk1307993.coding.me/CS212-Hangman.html</id>
    <published>2023-02-21T00:54:24.000Z</published>
    <updated>2023-02-21T00:55:29.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Guidelines"><a href="#Project-Guidelines" class="headerlink" title="Project Guidelines"></a>Project Guidelines</h3><p>All user interaction should take place through GUI (input and output)<br>User should be allowed to choose a text file using a file selector to take word list<br>A word should be randomly selected using the parsed list<br>Your GUI should have some visual hangman, an area with the placeholder for the word and also track wrong letter guesses<br>Prevent guessing a word of wrong length or a non-alphabetic character (make them guess again without penalty)<br>After finishing the game prompt, the user on whether or not they want to continue</p><h3 id="Game-Rules"><a href="#Game-Rules" class="headerlink" title="Game Rules"></a>Game Rules</h3><p>The user gets six tries to make guesses (head, 2 arms, body, 2 legs)<br>Each guess the user can either guess a single character or a word.<br>A wrong guess uses a try and causes a part of the hangman to appear</p><h3 id="Rubric"><a href="#Rubric" class="headerlink" title="Rubric"></a>Rubric</h3><p>Commenting and Naming - Commenting and proper naming of variables and objects shows me that you know what you are doing and more importantly it makes your code readable which is vital to being a professional programmer working with other programmers.<br>Proper Implementation of Game - This will assess your implementation of the game, how well you implement the rules in your program<br>GUI implementation - How well designed is your GUI? How well do you integrate JOptionPane and elements in your main window?<br>Other Logic - Logic for choosing a random word, parsing text file etc<br>Aesthetic - How good does your UI look, any creativity will also be noticed here</p><h3 id="Instant-0"><a href="#Instant-0" class="headerlink" title="Instant 0"></a>Instant 0</h3><p>Program does not compile<br>Program has no GUI<br>Program does not follow first four points under guidelines (should follow all points but the first four are the most important</p><p>Attached with this document is an example exe of a hangman game along with a sample text file you can use for testing, Note the txt file must be in the same directory as the exe for the game to work. The example given is just an example, the word file for testing will be similar format but not the same size, and also this program is purely command line and has some features that are not required by you</p>]]></content>
    
    <summary type="html">
    
      使用Swing完成Hangman小游戏。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS6300-Textprocessor</title>
    <link href="https://tk1307993.coding.me/CS6300-Textprocessor.html"/>
    <id>https://tk1307993.coding.me/CS6300-Textprocessor.html</id>
    <published>2023-02-16T01:06:52.000Z</published>
    <updated>2023-02-16T01:11:19.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Goals"><a href="#Project-Goals" class="headerlink" title="Project Goals"></a>Project Goals</h3><p>In this project, you will be developing a simple Java application (textprocessor) using an agile, test-driven process involving multiple deliverables. While you will receive one grade for the entire project, each deliverable must be completed by its own due date, and all deliverables will contribute to the overall project grade.</p><h3 id="Specification-of-the-textprocessor-Utility"><a href="#Specification-of-the-textprocessor-Utility" class="headerlink" title="Specification of the textprocessor Utility"></a>Specification of the textprocessor Utility</h3><p>textprocessor is a command-line utility written in Java with the following specification.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>textprocessor allows for simple text manipulation of the contents of a file.</p><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>textprocessor [OPTIONS] FILE</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Program textprocessor performs basic text transformations on lines of text from an input FILE. Unless the -o option (see below) is specified, the program writes transformed text to stdout and errors/usage messages to stderr. The FILE parameter is required and must be the last parameter. OPTIONS may be zero or more of the following and may occur in an order:</p><p>-o output_file_name<br>The program writes the output to output_file_name with transformed text instead of writing to stdout. If output_file_name already exists, the program shall result in an error.<br>-i<br>Used with the -r flag and -k flag ONLY; the search of -r or -k becomes case-insensitive.<br>-k substring<br>Keep only the lines containing substring. The search for substring is case-sensitive, unless option -i is set. This option must be mutually exclusive with -r below.<br>-r old new<br>Replaces the first instance of string old in each line with string new. The search for old is case-sensitive, unless option -i is set. This option must be mutually exclusive with -k above.<br>-s suffix<br>Adds the string suffix at the end of each line.<br>-n padding<br>Add a line number followed by a single space to the beginning of each line, where padding is an integer in the inclusive range of 1 to 9 specifying the minimum padding of the line number field. If the number of digits in the line number is less than the specified padding, zeros are left padded until the minimum padding is reached. If the number of digits in the line number is greater than the specified padding, the line number is never truncated. Line numbering should start at 1. This option must be mutually exclusive with -w below.<br>-w<br>Removes all whitespace from lines. For this assignment, whitespace will count as any spaces, “ “, or tabs, “\t”, in the input file. It must be mutually exclusive with -n above.</p><h3 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES"></a>NOTES</h3><p>While the last command-line parameter provided is always treated as the filename, OPTIONS flags can be provided in an order and shall be applied as follows:<br>Options -o/-i shall be processed first, as the determine global parameters of the computation.<br>Options -k, -r, -n, -w , and -s, shall be processed in this order. That is: (1) if -k is present, then the file content is filtered based on the specified parameter, using a case insensitive search if -i is present; (2) if -r is present, then replacements are performed based on the option parameters, using a case insensitive search if -i is present; (3) if -n is present, then a line number is applied; (4) if -w is present, then whitespace from the line is removed; (5) if -s is present, then a suffix shall be applied.<br>To keep this application simple, all errors shall result in display of the standard usage message.<br>Specifying option -i without having specified option -r or -k shall result in an error.<br>Specifying option -k with an empty string as the substring parameter should keep all input lines.<br>Specifying option -r with an empty string as the old parameter or option -s with an empty string as the suffix parameter shall result in an error.<br>Specifying options -r and -k simultaneously shall result in an error.<br>Specifying option -n with a non-integer value or an integer out of range shall result in an error.<br>Specifying options -n and -w simultaneously shall result in an error.<br>If options are repeated, only their last occurrence is applied.<br>All program option parameters are required, resulting in an error if omitted.<br>You shall assume that the command line parameter strings will not contain newline characters (\r, \n, and so on), as the behavior of the program would be platform dependent and may result in errors during grading. Therefore, there should be no test cases using these values as option parameters.<br>An empty input file shall produce an empty output file.<br>The last line of a non-empty input file must be newline terminated. Otherwise, the program shall generate an error.</p><h3 id="EXAMPLES-OF-USAGE"><a href="#EXAMPLES-OF-USAGE" class="headerlink" title="EXAMPLES OF USAGE"></a>EXAMPLES OF USAGE</h3><p>Example 1<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -o <span class="keyword">sample</span>.txt <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">the</span> input <span class="built_in">file</span>.</span><br></pre></td></tr></table></figure></p><p>output sample.txt:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">the</span> input <span class="built_in">file</span>.</span><br></pre></td></tr></table></figure></p><p>stdout: nothing sent to stdout<br>stderr: nothing sent to stderr</p><p>Example 2<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -r 02 <span class="keyword">two</span> <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Some</span> words are: <span class="string">"one"</span>, <span class="string">"02"</span>, <span class="keyword">and</span> <span class="string">"three"</span></span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Some</span> words are: <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="keyword">and</span> <span class="string">"three"</span></span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 3<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -i -r the A <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The <span class="built_in">file</span></span><br><span class="line"><span class="keyword">the</span> <span class="built_in">file</span></span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A <span class="built_in">file</span></span><br><span class="line">A <span class="built_in">file</span></span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 4<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -s er <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> cool</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> cooler</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 5<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textprocessor -k Java <span class="keyword">FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java <span class="keyword">is</span> one of the &lt;blank&gt; programming languages.</span><br><span class="line">Java <span class="keyword">is</span> a programming language.</span><br><span class="line">Programming languages are neat, an example of one <span class="keyword">is</span> Java.</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout:<br><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java <span class="keyword">is</span> a programming language.</span><br><span class="line">Programming languages are neat, an example of one <span class="keyword">is</span> Java.</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 6<br>textprocessor -r Question Exclamation -o text -s ! -w FILE<br>input FILE:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This Sentence Ends In <span class="keyword">A</span> Question Mark?</span><br></pre></td></tr></table></figure></p><p>output text:<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThisSentenceEndsInAExclamationMark?!</span><br></pre></td></tr></table></figure></p><p>stdout: nothing sent to stdout<br>stderr: nothing sent to stderr</p><p>Example 7<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">textprocessor</span> <span class="string">-n</span> <span class="number">8</span> <span class="string">-n</span> <span class="number">2</span> <span class="string">-s</span> <span class="comment">## -s ! FILE</span></span><br></pre></td></tr></table></figure></p><p>input FILE:</p><p>I wish this line had a line number..<br>I also wish that..<br>output file: output file not created<br>stdout:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">01 </span>I wish this <span class="keyword">line</span> had a <span class="keyword">line</span> number..!</span><br><span class="line"><span class="symbol">02 </span>I also wish that..!</span><br></pre></td></tr></table></figure></p><p>stderr: nothing sent to stderr</p><p>Example 8<br>textprocessor<br>input FILE:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Today is January <span class="number">65</span>, <span class="number">2298.</span></span><br><span class="line">Yesterday was December <span class="number">0</span>, <span class="number">3000.</span></span><br><span class="line">Tomorrow we will time travel again.</span><br></pre></td></tr></table></figure></p><p>output file: output file not created<br>stdout: nothing sent to stdout<br>stderr:<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: textprocessor [ -o filename | <span class="type">-i</span> | <span class="type">-k</span> substring | <span class="type">-r</span> old new | <span class="type">-n</span> padding | <span class="type">-w</span> | <span class="type">-s</span> suffix ] FILE</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      实现一个Textprocessor并通过测试，注意命令参数的逻辑顺序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CP5638-Small-Website</title>
    <link href="https://tk1307993.coding.me/CP5638-Small-Website.html"/>
    <id>https://tk1307993.coding.me/CP5638-Small-Website.html</id>
    <published>2023-02-13T01:59:07.000Z</published>
    <updated>2023-02-13T02:00:48.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>This assignment involves two parts, to be implemented as Web pages and submitted as described below.</p><p>Project Plan<br>Small Website<br>Your (fictional) client for the assignment has provided an introductory email containing a description of their goals and some text content for the site they would like you to develop.<br>Your task is to turn this into a clear useful plan and a small functional website.</p><h3 id="Project-Plan"><a href="#Project-Plan" class="headerlink" title="Project Plan"></a>Project Plan</h3><p>Write your project plan so that it is a useful working document to guide your development. Carefully consider the description provided by the client to inform your planning. Complete the plan by editing the plan.html template file provided inside the “Assessment 1 folder”, which contains the following required sections:</p><h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><p>Concisely state what the goal (purpose) of the website is. Note that the mission must be to improve something in a measurable way. To “provide information about something” is not a good mission, since you cannot see a measurable improvement. Why is the site needed? How does it benefit the client? Be clear and specific. Good mission statements are usually only a few sentences and contain no unnecessary information.</p><h3 id="Success-Evaluation"><a href="#Success-Evaluation" class="headerlink" title="Success Evaluation"></a>Success Evaluation</h3><p>Describe the process(es) by which the site success will be evaluated. Note that “hits” only counts people (or robots) visiting your website, which says nothing about whether the site has achieved its mission. How do you know that the site does what the client wanted? Measure the mission you stated above.</p><h3 id="Target-Audience"><a href="#Target-Audience" class="headerlink" title="Target Audience"></a>Target Audience</h3><p>Describe two (2) things clearly and specifically:</p><p>the target audience that your site is intended for (be specific; you can’t aim for everyone)<br>how you will intentionally design the site to cater to this group (as distinct from another, different target audience).</p><h3 id="Site-Flowchart"><a href="#Site-Flowchart" class="headerlink" title="Site Flowchart"></a>Site Flowchart</h3><p>Create a site flowchart to show the hierarchy of pages in the site and their relationships.<br>Each page should be represented by one box.<br>The order of boxes is the order these links should appear on the site.<br>If you do not have a preferred drawing program for flowcharts, use <a href="https://app.diagrams.net/" target="_blank" rel="noopener">https://app.diagrams.net/</a>.<br>Save your flowchart as a PNG file (normally the best file format for plain, straight-lined diagrams like this) and insert the image in your plan file under this heading.</p><p>plan.html is the template file provided for your documentation, which you must use.</p><p>DO NOT change the file name or the formatting.<br>DO NOT edit it in Word just save it and edit it as an HTML file (in Visual Studio Code, PHPStorm, Notepad++, etc.).<br>Each section has a heading and a spot () for its content. Add your name in the [title] before submitting.<br>Your website SHOULD NOT link to the plan.<br>There is no set word limit for your plan, but be clear, concise, and complete. DO NOT be long.</p><h3 id="Small-Website"><a href="#Small-Website" class="headerlink" title="Small Website"></a>Small Website</h3><p>Design and develop a small website for the client. Use your project planning (goal, target audience, flowchart) to inform and guide your design.</p><p>Use all the text content provided by the client (but NOT the description about goals that they have provided for you, the developer).<br>Edit the text content, which comes “as is” from the client, to make it suitable for the website. You are welcome and encouraged to write some amount of additional text to benefit the site, as appropriate. But don’t just make stuff up that might not be true.<br>Think about the information architecture (organisation) and decide what content should go on what pages to best achieve the site goals.<br>You must develop the site from scratch yourself. You may NOT use existing templates or frameworks (including Bootstrap or similar).<br>Although it is up to you exactly what goes in the site and how/where, you should have at least the following elements:</p><p>HTML Pages - name your home page file index.html<br>Navigation - links between pages and to the external sites provided (no broken links).<br>CSS - you should use an external style sheet for most/all styling.<br>Images - make appropriate use of the images for your site (consider editing, resizing, cropping, compression, etc.).</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit a zip file of your work (not including temporary files/documents) to LearnJCU. Ensure you include every file required for your website as well as plan.html.</p>]]></content>
    
    <summary type="html">
    
      制定项目计划，完成一个小型的个人网站。
    
    </summary>
    
      <category term="HTML" scheme="https://tk1307993.coding.me/categories/HTML/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP3320-Category-Partition</title>
    <link href="https://tk1307993.coding.me/COMP3320-Category-Partition.html"/>
    <id>https://tk1307993.coding.me/COMP3320-Category-Partition.html</id>
    <published>2023-02-01T00:39:33.000Z</published>
    <updated>2023-02-01T00:41:20.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this individual assignment, you must generate between 60 and 100 test-case specifications (i.e., generated test frames) for a simplified version of the copy utility, whose specs are provided below, using the category-partition method that we saw in class.</p><p>Make sure, when defining your test specifications, to suitably cover the domain of the application under test. Finally, make sure to suitably use constraints (rather than eliminating choices) to keep the number of test frames within the specified thresholds.</p><h3 id="Concise-Specification-of-the-copy-Utility"><a href="#Concise-Specification-of-the-copy-Utility" class="headerlink" title="Concise Specification of the copy Utility"></a>Concise Specification of the copy Utility</h3><p>NAME:<br>cp - copy files and directories<br>SYNOPSIS<br>Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.<br>cp [OPTION]… SOURCE… DIRECTORY<br>where OPT can be zero or more of<br>-b<br>-f<br>-r<br>-v<br>COMMAND-LINE ARGUMENTS AND OPTIONS<br>source: directory or file to be copied.<br>directory: location to copy to.<br>-b: (backup) - make a backup of each existing destination file<br>-f: (force) - if an existing destination file cannot be opened, remove it and try again<br>-r: (recursive) - copy directories recursively<br>-v: (verbose) explain what is being done</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>As stated above, in defining your categories and choices, you should make sure to suitably cover the domain of the application under test. This also includes possibly erroneous inputs. Just to give you an example, if you had to test a calculator, you may want to cover the case of a division by zero.<br>You are only required to specify test inputs for the application, but you do not have to also specify the expected outcome for such inputs. It is therefore OK if you don’t know how the system would behave for a specific input. Using the same calculator example, you could test the case of a division by zero even if you do not know how exactly the calculator would behave for that input.</p><h3 id="Tools-and-Useful-Files"><a href="#Tools-and-Useful-Files" class="headerlink" title="Tools and Useful Files"></a>Tools and Useful Files</h3><p>You will use the TSLgenerator tool to generate test frames starting from a TSL file, just like we did in the demo. A version of the TSLgenerator tool for Linux, Mac OS X, and Windows (two versions), together with a user manual, are available at:</p><p>TSLgenerator-manual.txt<br>TSLgenerator.linux<br>TSLgenerator-mac<br>TSLgenerator-win32.exe<br>TSLgenerator-win64.exe<br>Important: These are command-line tools, which means that you have to run them from the command line, as I did in my demo, rather than by clicking on them. Also, on Linux and<br>Mac systems, you may need to change the permissions of the files to make them executable using the chmod utility. To run the tool on a Mac, for instance, you should do the following, from a terminal:</p><p>chmod +x TSLgenerator-mac<br>./TSLgenerator-mac <command line arguments><br>Finally, if you are running a modern version of Windows (&gt; XP), you may want to try the TSLgenerator-win64.exe version of the tool. It hasn’t been tested thoroughly, but it should work better on these versions than the TSLgenerator-win32.exe version. If you encounter issues, please post a public question on Piazza and consider running the tool on a different platform (if you have the option to do so).</p><p>We are also providing file split-example.txt, the TSL file for the example we saw in the lesson, for your reference.</p><p>Also, the demo example for your benefit.</p><h3 id="How-To-Submit"><a href="#How-To-Submit" class="headerlink" title="How To Submit"></a>How To Submit</h3><p>Create a directory “Assignment6” in your personal GitHub repo.<br>Add to this new directory two text files:<br>catpart.txt: the TSL file you created.<br>catpart.txt.tsl: the test specifications generated by the TSLgenerator tool when run on your TSL file.<br>Commit and push your files to GitHub.<br>Submit on Blackboard the commit ID for your submission.</p>]]></content>
    
    <summary type="html">
    
      使用TSLgenerator工具生成60-100个测试用例，练习三方工具的使用
    
    </summary>
    
      <category term="Other" scheme="https://tk1307993.coding.me/categories/Other/"/>
    
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CMPSC311-LFU-Cache</title>
    <link href="https://tk1307993.coding.me/CMPSC311-LFU-Cache.html"/>
    <id>https://tk1307993.coding.me/CMPSC311-LFU-Cache.html</id>
    <published>2023-01-24T00:50:32.000Z</published>
    <updated>2023-01-24T00:52:21.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>Select any tool that proviRequirement<br>You just completed implementing mdadm and it is working. The software engineers who plan to build secure crypto wallet on top of your storage system have been torturing your storage system by throwing at it all sorts of I/O patterns, and they have been unable to find any inconsistency in your implementation. This is great, because now you have a working system, even though it may not be performant. As professor John Ousterhout of Stanford says, “the best performance improvement is the transition from nonworking state to working state”. The software engineers are happy that your storage system is working correctly, but now they want you to make it fast as well. To this end, you are going to implement a block cache in mdadm.</p><p>Caching is one of the oldest tricks in the book for reducing request latency by saving often used data in a faster (and smaller) storage medium than your main storage medium. Since we covered caching extensively in the class, we are skipping its details in this document. You must watch the lecture to understand what caching is, and how the least-frequency used (LFU) algorithm that you are going to implement in this assignment works. Specifically, you will be implementing a look-aside cache with writethrough write policy.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>In general, caches store key and value pairs in a fast storage medium. For example, in a CPU cache, the key is the memory address, and the value is the data that lives at that address. When the CPU wants to access data at some memory address, it first checks to see if that address appears as a key in the cache; if it does, the CPU reads the corresponding data from the cache directly, without going to memory because reading data from memory is slow.</p><p>In a browser cache, the key is the URL of an image, and the value is the image file. When you visit a web site, the browser fetches the HTML file from the web server, parses the HTML file and finds the URLs for the images appearing on the web page. Before making another trip to retrieve the images from the web server, it first checks its cache to see if the URL appears as a key in the cache, and if it does, the browser reads the image from local disk, which is much faster than reading it over the network from a web server.</p><p>In this assignment you will implement a block cache for mdadm. In the case of mdadm, the key will be the tuple consisting of disk number and block number that identifies a specific block in JBOD, and the value will be the contents of the block. When the users of mdadm system issue mdadm_read call, your implementation of mdadm_read will first look if the block corresponding to the address specified by the user is in the cache, and if it is, then the block will be copied from the cache without issuing a slow JBOD_READ_BLOCK call to JBOD. If the block is not in the cache, then you will read it from JBOD and insert it to the cache, so that if a user asks for the block again, you can serve it faster from the cache.</p><h3 id="Cache-Implementation"><a href="#Cache-Implementation" class="headerlink" title="Cache Implementation"></a>Cache Implementation</h3><p>Typically, a cache is an integral part of a storage system and it is not accessible to the users of the storage system. However, to make the testing easy, in this assignment we are going to implement cache as a separate module, and then integrate it to mdadm_read and mdadm_write calls.<br>Please take a look at cache.h file. Each entry in your cache is the following struct.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">bool</span> valid;</span><br><span class="line">  <span class="keyword">int</span> disk_num;</span><br><span class="line">  <span class="keyword">int</span> block_num;</span><br><span class="line">  <span class="keyword">uint8_t</span> block[JBOD_BLOCK_SIZE];</span><br><span class="line">  <span class="keyword">int</span> num_accesses;</span><br><span class="line">&#125; <span class="keyword">cache_entry_t</span>;</span><br></pre></td></tr></table></figure><p>The valid field indicates whether the cache entry is valid. The disk_num and block_num fields identify the block that this cache entry is holding and the block field holds the data for the corresponding block. The num_accesses field stores total number of time this cache block was accessedeither written or read.<br>The file cache.c contains the following predefined variables.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">cache_entry_t</span> *cache = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cache_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num_queries = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num_hits = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>Now let’s go over the functions declared in cache.h that you will implement and describe how the above variables relate to these functions. You must look at cache.h for more information about each function.</p><p>int cache_create(int num_entries); Dynamically allocate space for num_entries cache entries and should store the address in the cache global variable. It should also set cache_size to num_entries, since that describes the size of the cache and will also be used by other functions. Calling this function twice without an intervening cache_destroy call (see below) should fail. The num_entries argument can be 2 at minimum and 4096 at maximum.<br>int cache_destroy(void); Free the dynamically allocated space for cache, and should set cache to NULL, and cache_size to zero. Calling this function twice without an intervening cache_create() call should fail.<br>int cache_lookup(int disk_num, int block_num, uint8_t <em>buf); Lookup the block identified by disk_num and block_num in the cache. If found, copy the block into buf, which can- not be NULL. This function must increment num_queries global variable every time it performs a lookup. If the lookup is successful, this function should also increment num_hits global variable; it should also increment num_accesses field of the corresponding entry, to indicate that the entry was used for one more time. We are going to use num_queries and num_hits variables to compute your cache’s hit ratio.<br>int cache_insert(int disk_num, int block_num, uint8_t </em>buf); Insert the block identified by disk_num and block_num into the cache and copy bufwhich cannot be NULL to the corresponding cache entry. Insertion should never fail: if the cache is full, then an entry should be overwritten according to the LFU policy using data from this insert operation. This function should also assign num_accesses of this cache entry to 1.<br>void cache_update(int disk_num, int block_num, const uint8_t *buf); If the entry exists in cache, updates its block content with the new data in buf. Should also update the num_accesses by 1 if successful.<br>bool cache_enabled(void); Returns true if cache is enabled. This will be useful when integrat- ing the cache to your mdadm_read and mdadm_write functions.</p><h3 id="Strategy-for-Implementation"><a href="#Strategy-for-Implementation" class="headerlink" title="Strategy for Implementation"></a>Strategy for Implementation</h3><p>The tester now includes new tests for your cache implementation. You should first aim to implement functions in cache.c and pass all the tester unit tests. Once you pass the tests, you should incorporate your cache into your mdadm_read and mdadm_write functions you need to implement caching in mdadm_write as well, because we are going to use write-through caching policy, as described in the class. Once you do that, make sure that you still pass all the tests.</p><p>Next, try your implementation on the trace files and see if it improves the performance. To evaluate the performance, we have introduced a new cost is a metric into JBOD for measuring the effectiveness of your cache, which is calculated based on the number of operations executed. Each JBOD operation has a different cost, and by effective caching, you reduce the number of read operations, thereby reducing your cost. Now, the tester also takes a cache size when used with a workload file, and prints the cost and hit rate at the end. The cost is computed internally by JBOD, whereas the hit rate is printed by cache_print_hit_rate function in cache.c. The value it prints is based on num_queries and num_hits variables that you should increment.</p><p>Here’s how the results look like with the reference implementation. First, we run the tester on random input file:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost:</span> <span class="number">40408900</span></span><br><span class="line"><span class="attr">num_hits:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="string">-nan%</span></span><br></pre></td></tr></table></figure></p><p>The cost is 40408900, and the hit rate is undefined because we have not enabled cache. Next, we rerun the tester and specify a cache size of 1024 entries, using -s option:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">-s</span> <span class="number">1024</span></span><br><span class="line"><span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost: 37060800 num_hits:</span> <span class="number">11679</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">49081</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="number">23.8</span><span class="string">%</span></span><br></pre></td></tr></table></figure></p><p>As you can see, the cache is working, given that we have non-zero hit rate, and as a result, the cost is now reduced. Let’s try it one more time with the maximum cache size:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">./tester</span> <span class="string">-w</span> <span class="string">traces/random-input</span> <span class="string">-s</span> <span class="number">4096</span></span><br><span class="line"><span class="string">&gt;x</span></span><br><span class="line"><span class="attr">Cost: 27625200 num_hits:</span> <span class="number">44985</span><span class="string">,</span> <span class="attr">num_queries:</span> <span class="number">49081</span></span><br><span class="line"><span class="attr">Hit rate:</span> <span class="number">91.7</span><span class="string">%</span></span><br><span class="line"><span class="string">$</span> <span class="string">diff</span> <span class="string">-u</span> <span class="string">x</span> <span class="string">traces/random-expected-output</span></span><br><span class="line"><span class="string">$</span></span><br></pre></td></tr></table></figure></p><p>Once again, we significantly reduced the cost using a larger cache. We also make sure that introducing caching does not violate correctness by comparing the outputs. If introducing a cache violates correctness of your mdadm implementation, you will get a zero grade for the corresponding trace file.</p>]]></content>
    
    <summary type="html">
    
      完善之前的Mdadm文件系统，增加LFU算法的Cache.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP3032-Heap-Allocator</title>
    <link href="https://tk1307993.coding.me/COMP3032-Heap-Allocator.html"/>
    <id>https://tk1307993.coding.me/COMP3032-Heap-Allocator.html</id>
    <published>2023-01-16T04:18:30.000Z</published>
    <updated>2023-01-16T04:20:12.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you will write a heap allocator - implement a version of malloc and free. This assignment is standalone and does not require you to work with any of the SOS code. However, you must work in the XUbuntu virtual machine for some of the provided code to run.</p><p>Download the mymalloc.c file to get started. It has some helper functions and placeholders for the two functions you will implement in this assignment. You can (and should) write other helper functions as necessary.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The my_malloc function will be used to request memory from the heap. It is a user level function (not part of the kernel). The function returns a logical (virtual) address. The my_free function is used to return a block of memory to the allocator. The function takes as argument an address (one returned by my_malloc). To understand how each function is required to behave, keep reading.</p><p>Note that this program runs in your virtual machine’s Linux environment, which is a 64-bit operating system. As such, addresses in this assignment are 64-bit. In the images below, only the lower 32 bits of an address are shown.</p><h3 id="Buddy-allocator"><a href="#Buddy-allocator" class="headerlink" title="Buddy allocator"></a>Buddy allocator</h3><p>The memory allocator you will implement is based on the Buddy algorithm. In this algorithm, the allocator keeps track of memory blocks of size 2^0, 2^1, 2^2, , 2^MAX_ORDER bytes inside the heap (the part of memory area in the logical address space of a process right after the program code and data). It does this using MAX_ORDER+1 different linked lists. A memory block of size 2n bytes is called an order n block, and the corresponding linked list is called the order n free list. The free_list_start pointers array holds the address of the first memory block of various sizes.</p><p>For example, consider the free_list_start[3] pointer. This pointer will point to an address where a memory block of 23 bytes (8 bytes) is available. The first four bytes of that memory block will have information on whether another order 3 block is present. If yes, then the start address of that block will be stored here; otherwise NULL (the C macro) will be stored. This process will repeat as long as there are order 3 blocks present, thereby resulting in a linked list. The blocks must always be arranged in ascending order of their start addresses. See picture below for an illustration.</p><p>When a program begins, all free_list_start pointers are set to NULL, since the heap begins at size zero. During memory allocation, my_malloc can use the grow_heap function to request the operating system to allocate some space (4096 bytes for each call) in the heap. More details on when this should be done is given later.</p><p>Another rule that the Buddy allocator enforces: the start address of an order k block of memory will always have to be a multiple of 2k. For example, in the picture, the order 3 memory blocks starting at 0x82541008 and the one at 0x82541010 together form a contiguous memory area of 16 bytes; however, they together do not form an order 4 memory block since 0x82541008 is not a multiple of 24.</p><h3 id="Implementing-my-malloc"><a href="#Implementing-my-malloc" class="headerlink" title="Implementing my_malloc"></a>Implementing my_malloc</h3><p>The first step in my_malloc is to increase the amount of needed memory by 4 bytes (reason coming up). Therefore, the amount of memory bytes allocated to serve a request is always at least (size+4). The Buddy allocator always allocates memory in size of powers of 2. Therefore, we need to determine the smallest n such that an order n block can serve the request. This can be calculated as<br>The allocation algorithm for the Buddy allocator then proceeds as follows.</p><p>If free_list_start[n] is not NULL, delete the first order n memory block from the list.<br>Store n in the first 4 bytes of that block, and return (4 + start address of the block).<br>Otherwise, move to the free list of the next higher order and check if it is NULL. Keep doing this until you find one that is not NULL. In case you reach the maximum order (MAX_ORDER) and the free list there is still empty, then you can call grow_heap to receive a 4KB (212 bytes, order 12) memory block. Add this block to the order 12 free list and continue.<br>Lets say free_list_start[p] is not NULL. Of course, p&gt;n.<br>a. delete the first order p memory block from the list; say the start address of that block is s.<br>b. add two order (p-1) memory blocks to the order (p-1) free list. The first of the two blocks will begin at address s and the second one will begin at address (s + 2^p-1). Remember, the list must be kept in ascending order of the start addresses.<br>Essentially, you have split a larger chunk of memory into two smaller ones of equal sizes.</p><p>Repeat from step 1.<br>As an example, the following figures show the before and after versions of few of the free lists (order 3, 4, 5) when my_malloc(4) is called. Note that the way the implementation is sought here implies that each my_malloc call should not be for more than 4092 bytes. There are ways to handle this, but is not needed in this assignment.</p><h3 id="Implementing-my-free"><a href="#Implementing-my-free" class="headerlink" title="Implementing my_free"></a>Implementing my_free</h3><p>The first step in my_free is to determine how much memory is to be freed. The function takes as input a memory address returned by my_malloc in an earlier call. Since my_malloc stores the order of the memory block allocated, we can use it to determine how much memory is being returned. If p is the start address of the returned area of memory, then the 4 bytes beginning at f=(p-4) has the order (say n). Therefore, we need to insert back an order n memory block beginning at address f into the order n free list. The deallocation algorithm is as follows.</p><p>Add the order n block starting at f to the order n free list. Remember, the list must be kept in ascending order of the start addresses.<br>If n &lt; MAX_ORDER, check whether<br>a. the added block and the next (or previous) block in the list together represent a contiguous memory region, and<br>b. the smaller of the two start addresses of the two blocks is a multiple of 2n+1.<br>If any of the above two conditions is not true, return; otherwise, continue.<br>The two blocks can be merged and entered into a higher order list.<br>a. let f = the smaller of the start addresses of the two blocks.<br>b. remove the two blocks from the order n free list.<br>c. let n = n + 1.<br>d. Repeat from step 1 with the updated n and f values.<br>Therefore, the my_free function returns memory blocks to the free lists, and coalesces contiguous blocks to higher order blocks whenever possible. Note that my_free does not return memory back to the operating system (decrement the heap top). As a program calls my_malloc and my_free, the same heap region gets allocated in different sizes over the life of the program. Since the two functions are running in user space, this reduces the number of system calls that user programs will have to make to request heap memory. The following figure shows an example of my_free.</p><h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>Download the mymalloc.c file from the assignment page. The file has the grow_heap function and some helper functions to print the free lists and return values. Your objective is to complete the implementation of the my_malloc and my_free functions as per the specifications. The main function is for testing purposes only; what you write in this function will be discarded before grading. The output generated by the provided main function is given in the last page. Some interesting cases that you should test:</p><p>malloc such that no splitting is necessary<br>malloc such that splitting will be necessary; check the case when splitting initiates multiple levels down<br>free such that merging happens with the next block in the list<br>free such that merging happens with the previous block in the list<br>malloc and free such that merging does not happen<br>malloc and free such that merging propagates down more than one level<br>other interesting pointer related errors!!</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit in Canvas the modified mymalloc.c file, and a README file containing any information you feel the GTA should know before grading your program. Comment your program well (include your name).</p>]]></content>
    
    <summary type="html">
    
      编写Heap allocator, 实现malloc和free函数
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="OS" scheme="https://tk1307993.coding.me/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>COMP20003-Python-Libraries</title>
    <link href="https://tk1307993.coding.me/COMP20003-Python-Libraries.html"/>
    <id>https://tk1307993.coding.me/COMP20003-Python-Libraries.html</id>
    <published>2023-01-13T01:10:12.000Z</published>
    <updated>2023-01-13T01:12:51.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Coursework 3 (CW3), the final assessment component this semester, consists of 3 parts: Part A, B and C. It contributes to 80% of your final marks.Using Python libraries: Math &amp; Random<br>Write a program that uses different Python libraries in different subroutines:</p><ol><li>Calculate the area of a circle with the math library. The program asks the user for the radius of the circle and then calculates the surface area of the circle. Use the pi value (pi) found in the math library and the power calculation function pow. Finally, print the area rounded to 2 decimals.</li><li>Guessing a random number with the random library. The program selects a random number between 0-1000 with the randint function of the random library. After that, the program asks the user for a guess and tells whether the searched number is larger or smaller until the user guesses the number correctly. When the user guesses the number, the program also informs how many tries the user needed to find the correct number<br>You should use pseudo-random numbers. To make testing the program possible, set the seed number before the number is drawn with the random.seed(1) command.<br>See the example run below for more detailed operation of the program.</li></ol><p>Example run:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">This program uses libraries <span class="keyword">to</span> solve tasks.</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line">1) Calculate the<span class="built_in"> area </span>of the circle</span><br><span class="line">2) Guess the number</span><br><span class="line">0) Stop</span><br><span class="line">Your choice:</span><br><span class="line">1</span><br><span class="line">Enter the<span class="built_in"> radius </span>of the circle as an integer:</span><br><span class="line">7</span><br><span class="line">With a<span class="built_in"> radius </span>of 7, the<span class="built_in"> area </span>of the circle is 153.94.</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line">1) Calculate the<span class="built_in"> area </span>of the circle</span><br><span class="line">2) Guess the number</span><br><span class="line">0) Stop</span><br><span class="line">Your choice:</span><br><span class="line">2</span><br><span class="line">Guess the integer drawn by the program.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">500</span><br><span class="line">The requested number is lower.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">250</span><br><span class="line">The requested number is lower.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">125</span><br><span class="line">The requested number is higher.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">187</span><br><span class="line">The requested number is lower.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">140</span><br><span class="line">The requested number is lower.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">132</span><br><span class="line">The requested number is higher.</span><br><span class="line">Enter an integer between 0 <span class="keyword">and</span> 1000:</span><br><span class="line">137</span><br><span class="line">Correct! You used 7 tries <span class="keyword">to</span> guess the correct integer<span class="built_in">..</span></span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line">1) Calculate the<span class="built_in"> area </span>of the circle</span><br><span class="line">2) Guess the number</span><br><span class="line">0) Stop</span><br><span class="line">Your choice:</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><h3 id="Creating-amp-Using-your-own-library"><a href="#Creating-amp-Using-your-own-library" class="headerlink" title="Creating &amp; Using your own library"></a>Creating &amp; Using your own library</h3><p>Write a Python program that converts temperatures between Fahrenheit, Kelvin and Celsius temperature scales. For example, 0 degrees Celcius is 273.15 degrees in Kelvin. There are simple formulas for all these conversions (see e.g., Wikipedia).</p><p>Program each temperature conversion into its own subroutine, which receives the temperature to be converted as a parameter and returns a floating-point result as a return value. Put these conversion functions in your own file as a subprogram library and add the library’s version number as a fixed value, now 1.0.</p><p>Make another file that contains the main program. In this task, it is the menu and the associated selection structure, as shown in the example run below. The user starts by selecting the desired conversion and gives the temperature to be converted as an integer. After this, the main program calls a library function to perform this conversion and prints the result on the screen rounded to two decimals.</p><p>With libraries, it is essential that the interface and functionality are understood correctly. In this program each function receives an integer as a parameter and returns a floating-point number after conversion without rounding it. Since it is a temperature conversion library, the library only contains conversion functions and a number telling the version of the library (fixed value). In this task, the main program and the menu form the user interface of the program and are therefore in another file.</p><p>In this task, the name of the file containing the library needs to be L08T2Library.py and the file containing the main program is main.py. Submit them both to CodeGrade submission box and only after you have uploaded them both, click “Submit”.</p><p>Example run:<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Using version <span class="number">1.0</span> of the temperature conversion library.</span><br><span class="line">What temperature conversion <span class="keyword">do</span> you want to do?</span><br><span class="line"><span class="number">1</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">2</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">3</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">4</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">5</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">6</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">0</span>) Stop</span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Enter the starting temperature:</span><br><span class="line">-<span class="number">20</span></span><br><span class="line">Temperature <span class="built_in">in</span> degrees Fahrenheit: -<span class="number">4.0</span></span><br><span class="line">What temperature conversion <span class="keyword">do</span> you want to do?</span><br><span class="line"><span class="number">1</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">2</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">3</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">4</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">5</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">6</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">0</span>) Stop</span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">5</span></span><br><span class="line">Enter the starting temperature:</span><br><span class="line"><span class="number">100</span></span><br><span class="line">Temperature <span class="built_in">in</span> degrees Celsius: -<span class="number">173.15</span></span><br><span class="line">What temperature conversion <span class="keyword">do</span> you want to do?</span><br><span class="line"><span class="number">1</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">2</span>) C<span class="function"><span class="title">elsius</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">3</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Kelvin</span><br><span class="line"><span class="number">4</span>) F<span class="function"><span class="title">ahrenheit</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">5</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Celsius</span><br><span class="line"><span class="number">6</span>) K<span class="function"><span class="title">elvin</span>-&gt;</span>Fahrenheit</span><br><span class="line"><span class="number">0</span>) Stop</span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="Using-Python-libraries-datetime"><a href="#Using-Python-libraries-datetime" class="headerlink" title="Using Python libraries, datetime"></a>Using Python libraries, datetime</h3><p>We will continue practicing the use of datetime library. The program is menu-based, see the example runs below. The selected operation should call a function doing the required task.</p><p>The tasks are the following:</p><p>Instance variables of the datetime object. The program asks the user for the date and time as a string in the format dd.mm.yyyy hh:mm and converts the string into a datetime object. From this object, it is easy to use instance variables: date, month, year, hour, minute to print them to the screen according to the example run.</p><p>Calculation of the length of the period. The program asks the user for date of birth in the format dd.mm.yyyy and calculates how old he/she was on the beginning of this year, that is, on January 1, 2022, and prints the answer in days. By using timedelta objects you can deal with periods of time.</p><p>Printing the names of the days of the week. With the strftime function, you can print the information contained in the datetime object in a versatile way. Use this function to print the names of the days of the week on the screen.</p><p>Start by creating a datetime object using Monday’s date (any Monday’s date will do).<br>After that, go through all the days of one week with the repeat structure and move to the next day by using timedelta. Please note that the language settings in the computer settings may affect the language of the printout, but in CodeGrade the days of the week are printed in English with the strftime function.<br>Printing the names of the months of one year as abbreviations. The task is to print the names of the 12 months correctly. Note that the transition must always fall on the next month, but not necessarily on the same day. The names of the months should be printed as abbreviations.</p><p>See the example run below for more detailed operation of the program and the programming manual describes the most important functions of the datetime module. Implement each of the above functions as its own subroutine, typically less than 10 lines per subroutine.</p><p>Example run:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">This program uses the datetime library to deal <span class="keyword">with</span> time.</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Enter the <span class="built_in">date</span> <span class="keyword">and</span> <span class="built_in">time</span> <span class="keyword">in</span> the <span class="keyword">format</span> <span class="string">'dd.mm.yyyy hh:mm'</span>:</span><br><span class="line"><span class="number">24.12</span><span class="number">.2021</span> <span class="number">18</span>:<span class="number">45</span></span><br><span class="line">You gave <span class="keyword">year</span> <span class="number">2021</span></span><br><span class="line">You gave <span class="keyword">month</span> <span class="number">12</span></span><br><span class="line">You gave <span class="keyword">day</span> <span class="number">24</span></span><br><span class="line">You gave <span class="keyword">hour</span> <span class="number">18</span></span><br><span class="line">You gave <span class="keyword">minute</span> <span class="number">45</span></span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">Enter your birthday <span class="keyword">as</span> dd.mm.yyyy:</span><br><span class="line"><span class="number">07.07</span><span class="number">.1977</span></span><br><span class="line"><span class="keyword">On</span> January <span class="number">1</span>, <span class="number">2022</span>, you were <span class="number">16249</span> <span class="keyword">days</span> old.</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Monday</span><br><span class="line">Tuesday</span><br><span class="line">Wednesday</span><br><span class="line">Thursday</span><br><span class="line">Friday</span><br><span class="line">Saturday</span><br><span class="line">Sunday</span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">4</span></span><br><span class="line">Jan</span><br><span class="line">Feb</span><br><span class="line">Mar</span><br><span class="line">Apr</span><br><span class="line">May</span><br><span class="line">Jun</span><br><span class="line">Jul</span><br><span class="line">Aug</span><br><span class="line">Sep</span><br><span class="line"><span class="keyword">Oct</span></span><br><span class="line">Nov</span><br><span class="line"><span class="built_in">Dec</span></span><br><span class="line">What <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">do</span>:</span><br><span class="line"><span class="number">1</span>) Identify the components <span class="keyword">of</span> a <span class="built_in">time</span> <span class="keyword">object</span></span><br><span class="line"><span class="number">2</span>) Calculate age <span class="keyword">in</span> <span class="keyword">days</span></span><br><span class="line"><span class="number">3</span>) Print the <span class="keyword">days</span> <span class="keyword">of</span> the <span class="keyword">week</span></span><br><span class="line"><span class="number">4</span>) Print the <span class="keyword">months</span></span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Your choice:</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="Python-module-fraction"><a href="#Python-module-fraction" class="headerlink" title="Python module fraction"></a>Python module fraction</h3><p>This exercise deals with fraction package. The task is to demonstrate how mathematical operations work on fractions. Write a program that ask the numerator and the denominator of two fractions. The program also asks an integer as an exponent. The program forms fractions from the given numerators and denominators and performs the usual mathematical operations according to the example below:</p><p>Example run:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Give</span> <span class="string">the</span> <span class="string">first</span> <span class="string">fraction.</span></span><br><span class="line"><span class="string">Give</span> <span class="string">numerator</span> <span class="string">(top):</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="string">Give</span> <span class="string">denominator</span> <span class="string">(bottom):</span></span><br><span class="line"><span class="number">37</span></span><br><span class="line"><span class="string">Give</span> <span class="string">the</span> <span class="string">second</span> <span class="string">fraction.</span></span><br><span class="line"><span class="string">Give</span> <span class="string">numerator</span> <span class="string">(top):</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="string">Give</span> <span class="string">denominator</span> <span class="string">(bottom):</span></span><br><span class="line"><span class="number">41</span></span><br><span class="line"><span class="attr">Give an exponent:</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="attr">Sum:</span> <span class="number">26</span><span class="string">/37</span> <span class="string">+</span> <span class="number">17</span><span class="string">/41</span> <span class="string">=</span> <span class="number">1695</span><span class="string">/1517</span></span><br><span class="line"><span class="attr">Subtract:</span> <span class="number">26</span><span class="string">/37</span> <span class="bullet">-</span> <span class="number">17</span><span class="string">/41</span> <span class="string">=</span> <span class="number">437</span><span class="string">/1517</span></span><br><span class="line"><span class="attr">Multiply:</span> <span class="string">(26/37)</span> <span class="string">*</span> <span class="string">(17/41)</span> <span class="string">=</span> <span class="number">442</span><span class="string">/1517</span></span><br><span class="line"><span class="attr">Divide:</span> <span class="string">(26/37)</span> <span class="string">/</span> <span class="string">(17/41)</span> <span class="string">=</span> <span class="number">1066</span><span class="string">/629</span></span><br><span class="line"><span class="attr">Power:</span> <span class="string">(26/37)**3</span> <span class="string">=</span> <span class="number">17576</span><span class="string">/50653</span></span><br></pre></td></tr></table></figure></p><h3 id="Python-module-JSON-and-lists"><a href="#Python-module-JSON-and-lists" class="headerlink" title="Python module JSON and lists"></a>Python module JSON and lists</h3><p>In this exercise we have a file containing statistics of inhabitants of Helsinki between the years 1900-1961. The data has been fetched from public Finnish open data set, available at: <a href="https://www.avoindata.fi/data/en_GB/dataset/helsingin-historialliset-tilastot" target="_blank" rel="noopener">https://www.avoindata.fi/data/en_GB/dataset/helsingin-historialliset-tilastot</a><br>The name of the file is helsinki_stats.json and it is available in Moodle.</p><p>The file content displays the inhabitants by year, age-group and gender. The age groups in use are 20-24, 25-29, 30-34 and 35-39 years. The JSON-format is widely used data format and it is a common way to transfer data between web-programs. You will see this format in many places across the internet.</p><p>Your goal is to:</p><p>read the .json file (you can use the familiar open() -function) and convert the text into a json format. Use the json-library of Python to do this (read more from <a href="https://docs.python.org/3/library/json.html" target="_blank" rel="noopener">https://docs.python.org/3/library/json.html</a>)<br>Allow the user to calculate the total number of inhabitants by gender for the whole period 1900-1961.<br>Allow the user to search for the number of inhabitants by a given year. Helsinki hosted the world Olympics in 1952, how many people lived in the city back then?<br>Allow the user to search for inhabitants by age cohorts and starting year. For example, calculate the total number of inhabitants of ages 30-34 from year 1950 until the year 1961<br>Some helpers for the task:</p><p>Please, open the file and check its contents to get a good understanding of the contents<br>Once you read the data into a json-format, you can access the data in a similar way as using list of words.<br>You can access the actual data with json_stats[“data”]. You need to use a loop to go through the entries and process them json_stats[“data”][0]points to the first row in the data, which is<br>{“key”: [“1900”, “0”, “4”], “values”: [“7501”]}<br>To compare the year, you could compare the value json_stats[“data”][0][“key”][0], if it matches with the year 1900 (yes it does)<br>To read the value of this data row, use json_stats[“data”][0][ “values”][0]<br>This may look confusing, but you have all the skills to master this task! Remember, this is what real-life data may look like.</p><p>Clarifications for the file:<br>data[“key”]is a list that contains 3 values. [0]= year, [1]= gender, [2]= age group</p><p>Year options are: 1900-1961 [Notice that there are some years missing]<br>Gender options are: 0 = male, 1 = female<br>Age group options are: 4 = 20-24, 5 = 25-29, 6 = 30-34, 7 = 35-39<br>Note: All numbers in the text file are actual strings. Remember int-string conversions!</p><p>Example runs:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Welcome to history data analyzer.</span><br><span class="line">Enter the file to open: helsinki_stats.json</span><br><span class="line">File read successfully, ready for analysis.</span><br><span class="line">What would you like to <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="keyword">Select</span> your gender (<span class="number">0</span>=male, <span class="number">1</span>=female):</span><br><span class="line"><span class="number">0</span></span><br><span class="line">There were a total <span class="keyword">of</span> <span class="number">1086873</span> males <span class="keyword">in</span> Helsinki <span class="keyword">between</span> <span class="keyword">years</span> <span class="number">1900</span><span class="number">-1961</span></span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="keyword">Select</span> your gender (<span class="number">0</span>=male, <span class="number">1</span>=female):</span><br><span class="line"><span class="number">1</span></span><br><span class="line">There were a total <span class="keyword">of</span> <span class="number">1410942</span> females <span class="keyword">in</span> Helsinki <span class="keyword">between</span> <span class="keyword">years</span> <span class="number">1900</span><span class="number">-1961</span></span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Bye!</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">Welcome <span class="keyword">to</span> history <span class="keyword">data</span> analyzer.</span><br><span class="line">Enter the <span class="keyword">file</span> <span class="keyword">to</span> <span class="keyword">open</span>: helsinki_stats.json</span><br><span class="line"><span class="keyword">File</span> <span class="keyword">read</span> successfully, ready <span class="keyword">for</span> analysis.</span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">Please enter <span class="keyword">year</span> <span class="keyword">for</span> <span class="keyword">search</span> (<span class="number">1900</span><span class="number">-1961</span>):</span><br><span class="line"><span class="number">1952</span></span><br><span class="line">There were a total <span class="keyword">of</span> <span class="number">124263</span> inhabitants <span class="keyword">in</span> Helsinki <span class="keyword">on</span> <span class="keyword">year</span> <span class="number">1952</span></span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Bye!</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">Welcome <span class="keyword">to</span> history <span class="keyword">data</span> analyzer.</span><br><span class="line">Enter the <span class="keyword">file</span> <span class="keyword">to</span> <span class="keyword">open</span>: helsinki_stats.json</span><br><span class="line"><span class="keyword">File</span> <span class="keyword">read</span> successfully, ready <span class="keyword">for</span> analysis.</span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Please enter <span class="keyword">year</span> <span class="keyword">for</span> <span class="keyword">search</span> (<span class="number">1900</span><span class="number">-1961</span>):</span><br><span class="line"><span class="number">1950</span></span><br><span class="line"><span class="keyword">Select</span> age cohort (<span class="number">4</span>=<span class="number">20</span><span class="number">-24</span>, <span class="number">5</span>=<span class="number">25</span><span class="number">-29</span>, <span class="number">6</span>=<span class="number">30</span><span class="number">-34</span>, <span class="number">7</span>=<span class="number">35</span><span class="number">-39</span>):</span><br><span class="line"><span class="number">6</span></span><br><span class="line">There were a total <span class="keyword">of</span> <span class="number">410839</span> inhabitants <span class="keyword">of</span> ages <span class="number">30</span><span class="number">-34</span> <span class="keyword">between</span> the <span class="keyword">years</span> <span class="number">1950</span> <span class="keyword">and</span></span><br><span class="line"><span class="number">1961</span></span><br><span class="line">What would you <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">do</span>?</span><br><span class="line"><span class="number">1</span>) Calculate total amount <span class="keyword">of</span> inhabitants <span class="keyword">by</span> gender</span><br><span class="line"><span class="number">2</span>) Calculate inhabitants <span class="keyword">on</span> a given <span class="keyword">year</span></span><br><span class="line"><span class="number">3</span>) Calculate inhabitants <span class="keyword">after</span> given <span class="keyword">year</span> <span class="keyword">by</span> age cohort</span><br><span class="line"><span class="number">0</span>) <span class="keyword">Stop</span></span><br><span class="line">Make your choice:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Bye!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      完成使用Python库函数的五个基础练习题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CPT204-Union-Find</title>
    <link href="https://tk1307993.coding.me/CPT204-Union-Find.html"/>
    <id>https://tk1307993.coding.me/CPT204-Union-Find.html</id>
    <published>2023-01-05T03:34:03.000Z</published>
    <updated>2023-01-05T06:36:26.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Coursework 3 (CW3), the final assessment component this semester, consists of 3 parts: Part A, B and C. It contributes to 80% of your final marks.</p><p>In Part A, you will implement a data structure called Union Find with Path Compression. You will then use this data structure to solve a problem called Connect Coins in Part B . Finally, in Part C (300 marks), you will have to solve three problems of various data structures, problem-solving and object-oriented techniques that are derived from Lecture and Lab 1 - 13.</p><p>Submit all your answers for parts A, B, and C to Learning Mall for grading on the Submission Day.</p><h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><p>The rest of the task sheet will describe all the three parts and the Submission Day in detail.</p><h3 id="Part-A-Union-Find-with-Path-Compression"><a href="#Part-A-Union-Find-with-Path-Compression" class="headerlink" title="Part A - Union Find with Path Compression"></a>Part A - Union Find with Path Compression</h3><p>Recall that in Lecture 9 and Lab 9, we have constructed a Union Find data structure called Weighted Quick Union, and achieved O(log N) time for union, find and isSameGroup operations. It turns out that we can do even better, to get almost constant time for both operations!</p><p>In part A, you are to improve your Lab 9: Weighted Quick Union data structure with<br>Path Compression.</p><h3 id="Idea-of-Path-Compression"><a href="#Idea-of-Path-Compression" class="headerlink" title="Idea of Path Compression"></a>Idea of Path Compression</h3><p>Consider the connectivity tree below. It is one of the possible valid trees of 16 items in a Weighted Quick Union data structure, resulting from some series of operations.</p><p>Now imagine you call isSameGroup(10, 11) . That will involve finding the root of 10 and 11, and will be preceded by finding the parent of the elements in blue.</p><p>The key idea is this: since we have found the root of the elements in blue while climbing the tree, whose root is 0, we want to change and set the parents of those blue elements directly to the root.</p><p>Notice that this changes nothing about which group each element belongs to. They are still in the tree where 0 is the root.</p><p>The additional cost of this path compression operation to isSameGroup is still in the same order of growth, but now the future operations that require finding the root will be faster! We are going to use the same path compression idea on the other operations as well.</p><p>Note that this path compression results in amortized running time on N operations of union/ isSameGroup/ size of O((N)), where is the inverse Ackermann function, of which the value, for practical purposes, is always less than 5.</p><h3 id="Part-A-Weighted-Quick-Union-with-Path-Compression"><a href="#Part-A-Weighted-Quick-Union-with-Path-Compression" class="headerlink" title="Part A: Weighted Quick Union with Path Compression"></a>Part A: Weighted Quick Union with Path Compression</h3><p>In part A, your task is to complete an implementation of the Union Find data structure using Weighted Quick Union of Lab 9 with Path Compression.<br>You will have to implement the following methods to complete the data structure:<br>public UnionFind(int N) creates a Union Find data structure with N elements: 0 through N-1. Initially, each element is in its own group.<br>public void validate(int p) checks whether p is a valid element. It throws an IllegalArgumentException if p is not a valid index.<br>public int sizeOf(int p) returns the size of the group the element p belongs to.<br>public int find(int p) returns the group identity number which is the root of the tree element p belongs to. Assume p is a valid element. The path compression operation is applied in this method to reduce the finding root’s running time.<br>Note that now, the given method public boolean isSameGroup(int p, int q) is then implemented by simply calling validate on p and q, and then checking whether find(p) is the same as find(q).<br>public void union(int p, int q) connects two elements p and q together, by combining the groups containing them, connecting the root of the smaller size tree to the root of the larger size tree. If the sizes of the trees are equal, break the tie by connecting p’s root to q’s root. It throws an IllegalArgumentException if p or q is not a valid index.<br>The total marks of all the implementations in part A is 100 points, for passing all the test cases.</p><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><p>The following advice may be found useful in implementing Part A:</p><p>Use the same Automated Regression Unit Testing and Integration Testing strategy that you have been using in Lab 9. Note that with the use of the Path Compression strategy, the output may be different from the result in Lab 9.<br>Add more test cases, and create a good suite of test cases and practice the Partitioning/Boundary, Black-box/White-box, and Coverage testing.<br>Debug with the help of Java Visualizer plugin in IntelliJ IDEA.<br>You may define your own private helper methods. Include them in each of your submissions.<br>Do not define your own instance variables. They are not going to be used in the hidden test cases and may cause unpredictable errors in the grading system.</p><h3 id="Part-B-Connect-Coins"><a href="#Part-B-Connect-Coins" class="headerlink" title="Part B - Connect Coins"></a>Part B - Connect Coins</h3><p>In part B, you are going to use the data structure you have developed in part A to solve an interesting computational problem efficiently in a simple game. The game involves connecting gold coins in a 2-Dimensional space.</p><p>Connect Coins Problem<br>What’s better than gold coins? More gold coins! In your game, a number of gold coins are placed on a 2-D space. The players can place a new gold coin by specifying a series of 2-D coordinates.<br>We say that two coins are connected if the coins are next to each other in one of the 4 directions: left, right, up or down.</p><p>Consider a particular step in that game, when a player wants to place a new coin. We are interested in finding out where to place the new coin so that the resulting connected coins are as many as possible.</p><h3 id="2-D-Space-and-Coins-Representation"><a href="#2-D-Space-and-Coins-Representation" class="headerlink" title="2-D Space and Coins Representation"></a>2-D Space and Coins Representation</h3><p>We represent the 2-D space as a 2-D boolean array of true (T) and false (F) values called boolean[][] ccMatrix.</p><p>A T in a coordinate indicates that there is a coin at that position in the 2-D space, while an F indicates an empty space.</p><p>The location of the new coin that would maximally connect the coins is specified by a 2-element integer array int[] representing the coordinates in [row, column] format.</p><p>The number of newly connected coins will be returned as an int.</p><h3 id="Part-B-Connect-Coins-Task"><a href="#Part-B-Connect-Coins-Task" class="headerlink" title="Part B: Connect Coins Task"></a>Part B: Connect Coins Task</h3><p>In part B, your task is to complete a skeleton code of the ConnectCoins class in order to figure out where to place a coin to maximally connect them, and how many coins can be maximally connected.</p><p>You will have to implement the following methods to complete the class:</p><p>public ConnectCoins(boolean[][] ccMatrix). Each ConnectCoins instance is bound to a single 2-D space, which is passed in through its constructor. You may assume this space is valid, i.e., there is at least one empty coordinate to place a new coin.<br>public int[] placeMaxConnCoins(). The method returns a 2-element integer array that represents the coordinate in [row, column] so that a coin that is placed in that coordinate will give the maximum number of newly connected coins. If there are multiple possible such placements, return the upper-leftmost coordinate.<br>public int maxConnCoins(). The method returns the maximum number of newly connected coins after placing a new coin.<br>The total marks of all the implementations in part B is 100 points, for passing all the test cases.</p><h3 id="Additional-Notes"><a href="#Additional-Notes" class="headerlink" title="Additional Notes"></a>Additional Notes</h3><p>Here are some additional notes:</p><p>The correct implementation of the Union Find data structure will be provided in the automatic grader system for you readily to use.<br>You have to use the Union Find data structure in your implementation and computation. Failing to do so will result in 0 marks.<br>The number of rows and columns in the 2-D space will be in the range [1, 1000]. In particular, it means that the smallest valid array is 1-by-1.</p><h3 id="Advice-1"><a href="#Advice-1" class="headerlink" title="Advice"></a>Advice</h3><p>The following advice may be found useful in implementing Part B:</p><p>Use the Automated Regression Unit Testing with your correct Weighted Union Find (without Path Compression) of Lab 9, that is guaranteed correct, if you have not completely finished Part A.<br>Add more test cases, and create a good suite of test cases and practice the Partitioning/Boundary, Black-box/White-box, and Coverage testing.<br>Debug with the help of Java Visualizer plugin in IntelliJ IDEA.<br>You may define your own private helper methods. Include them in each of your submissions.<br>Do not define your own instance variables. They are not going to be used in the hidden test cases and may cause unpredictable errors in the grading system.</p><h3 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h3><p>In part C, you are going to solve 3 questions, closely related to the works you have done throughout the semester in Lab 1 - Lab 13. Note that you could still access the course materials similar to an open-book exam setting.</p><p>Relative to the programming questions in the Lab Exercises, there will be 2 easy and 1 hard coding questions. There are multiple possible candidate questions for each question with the same difficulty, you will be given one of them randomly.</p><p>While the specific questions are not going to be revealed here, the range of topics will be given below. You can also practice by reviewing all your works in Lab 1 - Lab 13.</p><h3 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h3><p>List, ArrayList, MyList, SLList, DLList, ARList<br>Deque, LLDeque, ARDeque<br>Map, HashMap, HAMap<br>Set, ARSet, HASet<br>MinPQ, ARBinHeap<br>Union Find, Quick Find, Quick Union, Weighted Quick Union<br>Generic Data Structure of the above and their subclasses</p><p>Object-oriented Features and Problem-solving Techniques<br>Empty Constructor, Default Constructor, Copy Constructor, Deep Copy<br>Iterative, Recursive, Recursion with Helper Method<br>Mutates, Not Mutate, Immutable<br>Resizing Array, Table Doubling/Halving<br>Checked/Unchecked Exception, Assertion<br>Iterator, Iterable, Enhanced For Loop, ToString<br>Interface, ADT, Interface Inheritance, Implementation Inheritance, Casting<br>Static/Dynamic Type, Dynamic Method Selection, Overloading, Overriding<br>Equality, Higher Order Functions, Comparator, Comparable, HashCode</p>]]></content>
    
    <summary type="html">
    
      数据结构大作业，完成Union Find结构，并解决Connect Coins问题，然后再解决三个数据结构问题。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CSE565-Analyzing-Code-Coverage</title>
    <link href="https://tk1307993.coding.me/CSE565-Analyzing-Code-Coverage.html"/>
    <id>https://tk1307993.coding.me/CSE565-Analyzing-Code-Coverage.html</id>
    <published>2022-12-31T01:09:25.000Z</published>
    <updated>2022-12-31T01:10:48.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>Select any tool that provides statement and decision code coverage. Utilizing the VendingMachine.java code given to you, develop a set of test cases for your code based on the following requirements:</p><p>Takes in an integer input<br>Allows users to select between three products: Candy (20 cents), Coke (25 cents), Coffee (45 cents)<br>Returns the selected product and any remaining change<br>If there is not enough money to buy the product, displays the amount necessary to buy the product and other products to purchase.<br>Execute the program with your test cases and observe the code coverage of your test cases.<br>The goal is to reach 100% in statement and 90% in decision coverage.</p><h3 id="Please-submit-the-following"><a href="#Please-submit-the-following" class="headerlink" title="Please submit the following:"></a>Please submit the following:</h3><p>Description of the tool used and the types of coverage it provides<br>Set of test cases<br>Screenshot showing the coverage achieved for the test cases developed<br>Your evaluation of the tool’s usefulness</p><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>Select any static source code analysis tool. The StaticAnalysis.java code given to you contains two different data flow anomalies. Execute the tool on StaticAnalysis.java and identify what the two data flow anomalies are. The inputs are:</p><p>the weight of the package as an integer<br>the length of the package as an integer<br>the type of product as a String</p><h3 id="Please-submit-the-following-1"><a href="#Please-submit-the-following-1" class="headerlink" title="Please submit the following"></a>Please submit the following</h3><p>Description of the tool used and the types of analysis it provides<br>Description of the two data flow anomalies<br>Screenshot showing the analysis performed<br>Your evaluation of the tool’s usefulness</p><h3 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h3><p>Your assignment will be scored based on the following criterion:</p><h4 id="Part-1-1"><a href="#Part-1-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>Description of the tool used and the types of coverage it provides<br>Set of test cases<br>Screenshot showing the coverage achieved for the test cases developed<br>Evaluation of the tool’s usefulness</p><h4 id="Part-2-1"><a href="#Part-2-1" class="headerlink" title="Part 2"></a>Part 2</h4><p>Description of the tool used and the types of analysis it provides<br>Description of the two date flow anomalies<br>Screenshot showing the analysis performed<br>Evaluation of the tool’s usefulness</p>]]></content>
    
    <summary type="html">
    
      任意选择一款包含覆盖率测试的测试工具，对提供的文件编写测试用例进行测试，满足Code coverage要求。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS427-Shared-Memory</title>
    <link href="https://tk1307993.coding.me/CS427-Shared-Memory.html"/>
    <id>https://tk1307993.coding.me/CS427-Shared-Memory.html</id>
    <published>2022-12-27T01:04:25.000Z</published>
    <updated>2022-12-27T01:05:37.123Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a program whose main routine obtains one parameter n from the user, i.e. passed to your program when it was invoked from the shell. Your program shall then create a shared memory and a child process. The shared memory shall have a size of BUF_SZ*sizeof(long int), where BUF_SZ is defined as 6 using a macro, e.g. “#define BUF_SZ 6“.</p><p>The child process should obtain the value of n (you actually have multiple options for doing that) and create a sequence of length n, whose elements are of type long int, and implements the equation z = y! (i.e. the factorial) where y is the index of the element, for example, the fourth element (index 3) shall have a value of 3! = 3x2x1 = 6, whereas the first element (index 0) shall have a value of 0!=1 . If n=4, then the sequence shall be 1, 1, 2 and 6.</p><p>The child process shall create the elements, one at a time, and wait for a random interval of time (0 to 2.999 seconds) between generating elements of the sequence. As soon as an element is generated, the child places the element in the shared memory by organizing it as described below.</p><p>The parent process shall NOT wait for the child to exit but instead shall print an element as soon as it arrives into the shared buffer (again, in a manner similar to slides 25-28 of lecture 5)</p><p>Hint: Use fflush() to ensure printf’s are printed immediately into the screen.</p><ul><li>Repeat this, except that now you do not create a shared memory, but rather use an ordinary pipe to pass the sequence instead.</li><li>Repeat this, except that now you do not create a shared memory or a child process, but use a child thread instead. By definition, The parent and child threads already share their memory spaces.</li></ul>]]></content>
    
    <summary type="html">
    
      分别使用Shared Memory, Pipe以及Thread解决同样的问题。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>COMP2560-Devices-as-Files</title>
    <link href="https://tk1307993.coding.me/COMP2560-Devices-as-Files.html"/>
    <id>https://tk1307993.coding.me/COMP2560-Devices-as-Files.html</id>
    <published>2022-12-22T02:19:46.000Z</published>
    <updated>2022-12-22T02:21:35.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The main objective of this lab will be to learn how to UNIX handles devices as files. For the sake of this lab, whenever we refer to a file that is a device, we say special file. Otherwise, it is a normal file like an image file or program file.</p><h3 id="Step-1-UNIX-Devices-as-Special-Files"><a href="#Step-1-UNIX-Devices-as-Special-Files" class="headerlink" title="Step 1. UNIX Devices as Special Files"></a>Step 1. UNIX Devices as Special Files</h3><p>UNIX’s kernel at its high-level of File System (File Manager) defines file as an abstract entity to read from or write to. File could be part of a hard disk drive that stores your C program main.c, another part of the hard disk drive that stores your program executable main, or the whole hard disk drive. UNIX’s kernel at its File System assumes all other hardware devices are also files. The differences between the devices are handled by another part of the kernel, Device Manager. So, like your files in your home directory, devices are also files at /dev directory.</p><p>As seen, we have cpu (processor) and mem (memory), which are the two essential parts of any computer system.</p><p>School’s computer system is a multiprocessor system; that is, it has multiple cpus. So, you can go inside the /dev/cpu and see how many cpus exist:</p><p>Let’s go into the first cpu.</p><p>Amazingly, devices are managed like files and directories that are directly connected to the devices. You may be tempted to open them as normal files using vi:</p><p>You see that vi is not able to read from cpu/0/cpuid like a normal file. Let’s try it for memory device.</p><p>Is this because devices are not files and what we say is incorrect, or vi program is not able to read from these special files? We’ll answer this shortly.</p><p>What are other files? What is the file for mouse, keyboard, monitor, sound, mic, hard disk drives, etc?</p><p>Important parts of a computer system are storage devices. Depending on the type of storage, the file name for the device is either start with hd or sd followed by a letter that distinguishes multiple hard disk storages. For instance, sda is the first hard disk, sdb is the second, and so on. Also, each hard disk storage can have different partitions, which are identified by a number. For instance, sda1 is the first partition of the first hard disk storage.</p><p>As you can see, the School’s system has one hard disk storage with 3 partitions.</p><p>Who select these names for devices? Are there any standards? Can I rename the file of a device? For instance, can I change the /dev/mem to /dev/memory?</p><h3 id="Step-2-Standard-File-Descriptors"><a href="#Step-2-Standard-File-Descriptors" class="headerlink" title="Step 2. Standard File Descriptors"></a>Step 2. Standard File Descriptors</h3><p>There are three files that look like they are devices, but they are not. They are file descriptors (numbers) that are connected to either a normal file or a special file (device):</p><p>Traditionally, /dev/fd/0 or /dev/stdin was connected to keyboard device, meaning that reading from keyboard file (device) was the same as reading from /dev/fd/0 or /dev/stdin file descriptors. /dev/fd/1 or /dev/stdout was connected to printing device or monitor, meaning that writing to printer file (device) was the same as writing to /dev/fd/1 or /dev/stdout file descriptors; likewise, for /dev/fd/2 and /dev/stderr to print out errors. Why not use special files’ names directly for keyboard or printer instead of working with these numbers? Very good question!</p><p>Working with special files (device) requires somebody to be next to the School’s computer system. For instance, if you want to read from the keyboard from its assigned special file.</p><p>Somebody should be in the School’s server room and press any keys in the keyboard device attached to the School’s computer system. This is not convenient for us when we connect remotely to a computer system.</p><p>Therefore, by default, UNIX-based/like operating system developers came up with the idea of standardizing the input and output for programs regardless of where or what the actual device is. So, they fixed these three file descriptors that can be connected to any special file (device) or normal file. For the program, it does not matter.</p><p>The program reads from 0 and writes to 1. If error, the program writes to 2.</p><p>You may connect 0 and 1 and 2, all to a normal file (how?). Then your program reads input from the file and writes output and errors, if any, to the same file.</p><p>But how do we run our program, like the one in Lab03, at School’s computer system that reads input and writes outputs? This is handled by either kernel or shell, who attach standard file descriptors to a virtual terminal device called tty (TeleTYpewriter) with a unique number for a user connected to the computer system. This virtual device is the window with the black background that shows you the shell command prompt.</p><p>You can see your virtual terminal device number by using the tty command:</p><p>This is the device your program reads from or writes to, not the keyboard or monitor at the School’s server room or at your home!</p><p>When your program, like in Lab03, asks an input value, it reads from 0 which is connected to your tty. So, when you type numbers or characters by your keyboard attached to your computer at home, it goes to your tty, and then it forwards them to your program. Can you explain what happens when your program writes outputs and you see it in your monitor?</p><h3 id="Step-3-Read-Write-to-Devices-as-Files-via-Shell"><a href="#Step-3-Read-Write-to-Devices-as-Files-via-Shell" class="headerlink" title="Step 3. Read/Write to Devices as Files via Shell"></a>Step 3. Read/Write to Devices as Files via Shell</h3><p>vi is a program to open normal files that are stored in storage devices. But it cannot open special files (devices) and simply raise an error. However, UNIX, which claims that devices are files, must provide the same system calls to work with devices the same way as files. In the next step, we’ll see UNIX fulfills its promise. Not only that, now we see that its shell also provides a built-in command cat (concatenate)to do the operations on devices and files in the same way.</p><p>To read from a normal file or a special file (device), you can simply use cat followed by the name of the file/device.</p><p>As seen, we do not have enough permission to read from some devices. But we have permission to access our assigned virtual terminal device tty. Let’s find our unique tty again:</p><p>Then, read from it.</p><p>As seen, it is empty initially. You can put some data to it by typing and pressing enter:<br>You see that the cat reads from the tty and shows it to us. You can continue to send more info to the tty and cat reads them and show them to you. You can exit cat by CTRL+C.</p><p>I used cat on my first hard disk storage on my own computer system, and here is the output:</p><p>Technically, cat opens the special file (device) sda1, reads the content and writes them into 1 which is connected to tty, and you can see the content of my hard disk drive.</p><p>Let’s write to a device. You can use cat with ] operator that connects 1 to a device instead of your tty. Then, you are able to input data and it writes them to that device:</p><p>As seen, you are not able to write to memory due to lack of enough permission.</p><p>However, you can write to your tty.</p><p>You see the same effect as when you read from tty. Can you explain what is happening?</p><p>I don’t dare to write on my hard disk storage by cat! But I can write to my sound device, whose file is /dev/dsp.</p><p>I have to exit cat to hear my sound device. If you do it on your sound card, you will hear nothing but a loud noise! This is because the sound device needs audio signals and cannot read my sentences in English. To send an audio signal to my sound device:</p><p>I record my voice in a file test.wav<br>I send the content of this file to the sound device cat can connect two files/devices by reading from one file or device (source) and write it into the second file or device (target). For example,<br>Which reads from the file test.c and writes it to your tty device. Now, I want to send my test.wav to my sound device:</p><p>Great! Please note that we cannot do this on the School’s computer system due to lack of permission. You can try it yourself if you have UNIX-base/like OS or UNIX emulator software (e.g., Cygwin 1 on Windows.)</p><h3 id="Step-4-Read-Write-to-Devices-as-Files-via-System-Calls"><a href="#Step-4-Read-Write-to-Devices-as-Files-via-System-Calls" class="headerlink" title="Step 4. Read/Write to Devices as Files via System Calls"></a>Step 4. Read/Write to Devices as Files via System Calls</h3><p>Now that we know how devices and files are treated the same in UNIX, let’s open a device and read from or write to it like a normal file in a C program. Due to our lack of enough permission on the School’s computer system, we use the virtual terminal device tty in our example. First, we need to know the tty number that assigned to our terminal:</p><p>Now, /dev/pts/9 is our read and write device. First, we need to open it and have a file descriptor to the device.</p><p>The open system call is in the file control header (fcntl.h):</p><p>Then, we need to read from it using the file descriptor at hand. The read system call is in UNIX standard header (unistd.h):</p><p>There are two tasks for your submission:</p><p>Our example in step 4 never stops. Add lines of code such that when the user writes END, it exits the while loop, safely closes the device, and returns.</p><p>Instead of printing what we read from the device to output (the terminal device itself), write them into a normal file, named log.txt.<br>You are not allowed to use any library routines, no stdio.h! Only system calls in fcntl.h and unistd.h. The sample code for step 4 has been attached in a zip file named lab06_hfani.zip.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You will prepare and submit the program in one single zip file lab06_uwinid.zip containing the following items:</p><p>lab06_uwinid.zip<br>tty.c =&gt; built with no error<br>log.txt =&gt; the output of the program<br>results.pdf/jpg/png =&gt; the image snapshot of the program run<br>(Optional) readme.txt<br>Files Naming and Formats<br>Please follow the naming convention as you lose marks otherwise. Instead of uwinid, use your own account name.</p>]]></content>
    
    <summary type="html">
    
      学习如何将Linux Device作为文件进行处理。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CSE383-PHP</title>
    <link href="https://tk1307993.coding.me/CSE383-PHP.html"/>
    <id>https://tk1307993.coding.me/CSE383-PHP.html</id>
    <published>2022-12-19T02:27:18.000Z</published>
    <updated>2022-12-19T02:29:00.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>The objective of this exercise is to:</p><ol><li>Understand database queries</li><li>Understand the php programming construct</li><li>Write php rest interface</li></ol><h3 id="Part-1-Update-the-lookup-table"><a href="#Part-1-Update-the-lookup-table" class="headerlink" title="Part #1: Update the lookup table"></a>Part #1: Update the lookup table</h3><p>Exercise<br>Using phpliteadmin as in the previous lab.<br>Update the table so that the value field is now a text (string) field<br>Copy the “Query used to create this table” from the phpliteadmin</p><h3 id="Part-2-Update-the-setLookup-rest-method"><a href="#Part-2-Update-the-setLookup-rest-method" class="headerlink" title="Part #2: Update the setLookup rest method"></a>Part #2: Update the setLookup rest method</h3><p>Exercise<br>Edit the file final.class.php in /var/www/html.<br>Remove the check for value to be a numeric field Test.<br>Verify the data was entered correctly by looking in phpliteadmin</p><h3 id="Part-3-Create-the-getLookup-rest-method"><a href="#Part-3-Create-the-getLookup-rest-method" class="headerlink" title="Part #3: Create the getLookup rest method"></a>Part #3: Create the getLookup rest method</h3><p>Exercise<br>Edit the file final.class.php in /var/www/html.</p><p>Create the getLookup rest interface<br>You only need to create the function<br>I suggest copying and pasting the setLookup routine as a starting point<br>Arguments (update the function arguments)<br>date = date field<br>Returned value<br>All elements of file that match the requested date<br>SQL<br>Call GET_SQL (same calling sequence as EXEC_SQL, but it returns an array of results, keyed by field names)<br>Query<br>Reminder. Do NOT copy/paste from word with smartquotes into php (will not work out well)<br>Make sure you build up the command using the exact same concept as EXEC_SQL in setTemp (but using GET_SQL instead), same argument concept. (every ? needs an appropriate variable to fill it in)<br>Update the return message with appropriate words for both good and error situations</p><h3 id="Reminder"><a href="#Reminder" class="headerlink" title="Reminder"></a>Reminder</h3><p>You can look for php errors in the following<br>If your call to the php doesn’t work or shows a 500 server error, you have a php error.</p><p>Check the piece of code you just edited: final.class.php<br>a. php final.class.php<br>b. if good - should give NO response<br>c. if a response - it’s an error<br>Check the web server output<br>a. sudo tail /var/log/httpd/error.log</p>]]></content>
    
    <summary type="html">
    
      使用PHP, 练习Database的调用方法
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>COMP4173-Randomized-Response</title>
    <link href="https://tk1307993.coding.me/COMP4173-Randomized-Response.html"/>
    <id>https://tk1307993.coding.me/COMP4173-Randomized-Response.html</id>
    <published>2022-12-13T03:04:32.000Z</published>
    <updated>2022-12-13T03:05:46.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Randomized-response"><a href="#Randomized-response" class="headerlink" title="Randomized response"></a>Randomized response</h3><p>(a) The simplest version of randomized response involves flipping a single fair coin (50% probability of heads and 50% probability of tails). Suppose an individual is asked a potentially incriminating question, and flips a coin before answering. If the coin comes up tails, he answers truthfully, otherwise he answers “yes”. Is this mechanism differentially private? If so, what epsilon value does it achieve? Carefully justify your answer.</p><h3 id="Privacy-preserving-synthetic-data"><a href="#Privacy-preserving-synthetic-data" class="headerlink" title="Privacy-preserving synthetic data"></a>Privacy-preserving synthetic data</h3><p>In this problem, you will take on the role of a data owner who owns two sensitive datasets, called hw_compas and hw_fake, and is preparing to release differentially private synthetic versions of these datasets.</p><p>The first dataset, hw_compas is a subset of the dataset released by ProPublica as part of their COMPAS investigation. The hw_compas dataset has attributes age, sex, score, and race, with the following domains of values: age is an integer between 18 and 96, sex is one of ‘Male’ or ‘Female’, score is an integer between -1 and 10, race is one of ‘Other’, ‘Caucasian’, ‘African-American’, ‘Hispanic’, ‘Asian’, or ‘Native American’.</p><p>The second dataset, hw_fake, is a synthetically generated dataset. We call this dataset “fake” rather than “synthetic” because you will be using it as input to a privacy-preserving data generator. We will use the term “synthetic” to refer to privacy-preserving datasets that are produced as output of a data generator.</p><p>We generated the hw_fake dataset by sampling from the following Bayesian network:</p><p>In this Bayesian network, parent_1, parent_2, child_1, and child_2 are random variables. Each of these variables takes on one of three values {0, 1, 2}.</p><p>Variables parent_1 and parent_2 take on each of the possible values with an equal probability. Values are assigned to these random variables independently.<br>Variables child_1 and child_2 take on the value of one of their parents. Which parent’s value the child takes on is chosen with an equal probability.<br>To start, use the Data Synthesizer library to generate 4 synthetic datasets for each sensitive dataset hw_compas and hw_fake (8 synthetic datasets in total), each of size N=10,000, using the following settings:</p><p>A: random mode<br>B: independent attribute mode with epsilon = 0.1.<br>C: correlated attribute mode with epsilon = 0.1, with Bayesian network degree k=1<br>D: correlated attribute mode with epsilon = 0.1, with Bayesian network degree k=2<br>For guidance, you can use the HW2_Template here. We have provided the code to generate the 4 synthetic datasets for you. Please make sure to duplicate this file rather than write your code directly here.</p><p>(a) Execute the following queries on synthetic datasets and compare the results to those on the corresponding real datasets:</p><p>Q1 (hw_compas only): Execute basic statistical queries over synthetic datasets.<br>The hw_compas has numerical attributes age and score. Calculate the median, mean, min, max of age and score for the synthetic datasets generated with settings A, B, C, and D (described above). Compare to the ground truth values, as computed over hw_compas. Present results in a table. Discuss the accuracy of the different methods in your report. Which methods are accurate and which are less accurate? If there are substantial differences in accuracy between methods - explain these differences.<br>Q2 (hw_compas only): Compare how well random mode (A) and independent attribute mode (B) replicate the original distribution.<br>Plot the distributions of values of age and sex attributes in hw_compas and in synthetic datasets generated under settings A and B. Compare the histograms visually and explain the results in your report.<br>Next, compute cumulative measures that quantify the difference between the probability distributions over age and sex in hw_compas vs. in privacy-preserving synthetic data.<br>To do so, use the Two-sample Kolmogorov-Smirnov test (KS test) for the numerical attribute and Kullback-Leibler divergence (KL-divergence) for the categorical attribute, using provided functions ks_test and kl_test. Discuss the relative difference in performance under A and B in your report.<br>Q3 (hw_fake only): Compare the accuracy of correlated attribute mode with k=1 (C) and with k=2 (D).<br>Display the pairwise mutual information matrix by heatmaps, showing mutual information between all pairs of attributes, in hw_fake and in two synthetic datasets (generated under C and D). Discuss your observations in your report, noting how well / how badly mutual information is preserved in synthetic data.<br>(b) (hw_compas only): Study the variability in the mean and median of age for synthetic datasets generated under settings A, B, and C.</p><p>To do this, fix epsilon = 0.1, and generate 10 synthetic datasets (by specifying different seeds).</p><p>Calculate the mean and median of age for each of the 10 datasets. Plot the 10 median values and the 10 mean values using a box-and-whiskers plot. Compare these metrics to the ground truth median and mean from the real data. Carefully explain your observations: which mode gives more accurate results and why? In which cases do we see more or less variability?</p><p>Specifically for the box-and-whiskers plots, we expect to see two subplots: one for the mean and one for the median, with the three settings (A, B and C) along the X-axis and age on the Y-axis. You should include these plots in your report.</p><p>(c) (hw_compas only): Study how well statistical properties of the data are preserved as a function of the privacy budget, epsilon. To see robust results, execute your experiment with 10 different synthetic datasets (with different seeds) for each value of epsilon, for each data generation setting (B, C, and D). Specifically, you should:</p><p>Compute the KL-divergence over the attribute race in hw_compas. For each setting (B, C, and D), vary epsilon from 0.02 to 0.1 in increments of 0.02. Specifically, the epsilons are [0.02, 0.04, 0.06, 0.08, 1]. In total, you should generate 3<em>10</em>6 synthetic datasets and calculate the KL-divergence for race in each dataset. Create three box-and-whiskers plots, one for each setting (B, C, D). Each plot should have epsilon on the X-axis and KL-divergence on the Y-axis. Discuss your findings in the report and include your plots.</p>]]></content>
    
    <summary type="html">
    
      使用Kolmogorov–Smirnov Test分析数据。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS203-Proxy-Server</title>
    <link href="https://tk1307993.coding.me/CS203-Proxy-Server.html"/>
    <id>https://tk1307993.coding.me/CS203-Proxy-Server.html</id>
    <published>2022-12-03T09:06:51.000Z</published>
    <updated>2022-12-03T09:08:03.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>For this assignment, you must implement an Internet resource retriever to act as a client and to make requests to a server, including the basic Web server you have implemented. The basic Web server’s task is to deliver resources to the client. The client requests a particular resource by writing an HTTP GET (or similar) request. On receiving a legitimate request in the form of a URL path, the server should return the contents of the corresponding file so that the client can read the response from the server via the proxy server. When networking facilities are available, the basic Web server (or any other server) can be executed on one machine and the client can be executed on another to make requests to the server. When networking facilities are not available, both the basic Web server and the client may be executed on the same machine. The client may refer to the server host by the standard name localhost.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>Tutor-marked Exercise (TME) 1 requires that you develop three programs: one for a client, one for a basic Web server, and one for a proxy server.</p><p>A proxy server is a special-purpose HTTP server; it is the core application for this project. The proxy server has two socket connections. It “listens” for communication from clients through one and launches requests to specific Web servers through the other. In this exercise you should use a thread in the proxy server so that it is able to send and receive messages simultaneously to and from the server/client.</p><p>A basic Web server can deal with requests for resources from a client. It is necessary to have a Web server return messages to a client such as 404 - not found; 403 - bad request; etc., as appropriate. If the resource requested is available, which means that the resource can be found on the disk of the Web server, the Web server needs to read the resource and write the data to the socket. For example, a Web server may find an HTML file or a JPEG (image) file on its disk and transfer the data to the socket.</p><p>The client basically needs access to the function that allows the user to input the resource URL that identifies the resource s/he wants to access. However, the client has to access the resource by sending a request to the proxy server, and then the client must receive the resource from the proxy server. No matter what kind of data the client receives, the client only needs to print it on the screen. Note that where the response from a server is an HTML file, a typical Web browser will render it according to HTML semantics. This functionality is not considered in this exercise.</p><p>Note: Your tutor may use resource URLs other than those for the basic Web server (e.g., Java tutorial Web pages and public FTP files).</p><p>To test your basic Web server’s function you can simply use an HTML file named testfile.html and a JPG file name testfile.jpg with Microsoft Internet Explorer or Mozilla Firefox. After you are completely certain that your basic Web server works properly, you can use <a href="http://127.0.0.1/testfile.html" target="_blank" rel="noopener">http://127.0.0.1/testfile.html</a> or <a href="http://localhost/testfile.jpg" target="_blank" rel="noopener">http://localhost/testfile.jpg</a> with your client to test whether your proxy works. Finally, try to use <a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a> or <a href="ftp://ftp.us.dell.com/readme.txt" target="_blank" rel="noopener">ftp://ftp.us.dell.com/readme.txt</a> within your client to test whether your proxy works properly.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Your assignment must be zipped into one file and uploaded using the Assignment Drop Box feature of Moodle. The file must include</p><p>all source files.<br>a complete test plan.<br>Before you submit your TME, please review Tutor-marked Exercise Requirements for full details of TME requirements and to review the marking scheme. Please contact your tutor if you have any questions.</p><p>Note: Your tutor will not accept TMEs by email.</p><h3 id="Submitting-your-assignments"><a href="#Submitting-your-assignments" class="headerlink" title="Submitting your assignments"></a>Submitting your assignments</h3><p>Use the Add submission OR Edit submission button below to upload your completed assignment file(s).<br>Remember to click the Save changes button after uploading files<br>The maximum upload file size is 501MB<br>You can upload a maximum of 1 files<br>Remember to click the Submit assignment button after you upload your assignment file(s), enter your online text or record your audio file.</p>]]></content>
    
    <summary type="html">
    
      实现一个代理服务器，用于代理HTTP请求以及FTP请求。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
</feed>
