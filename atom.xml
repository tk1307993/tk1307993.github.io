<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2020-01-18T00:52:41.803Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSE6242-HadoopSparkPigandAzure</title>
    <link href="https://tk1307993.coding.me/CSE6242-HadoopSparkPigandAzure.html"/>
    <id>https://tk1307993.coding.me/CSE6242-HadoopSparkPigandAzure.html</id>
    <published>2020-01-18T00:49:00.000Z</published>
    <updated>2020-01-18T00:52:41.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task-1-Analyzing-a-Graph-with-Hadoop-Java"><a href="#Task-1-Analyzing-a-Graph-with-Hadoop-Java" class="headerlink" title="Task 1: Analyzing a Graph with Hadoop/Java"></a>Task 1: Analyzing a Graph with Hadoop/Java</h3><h4 id="Writing-your-first-simple-Hadoop-program"><a href="#Writing-your-first-simple-Hadoop-program" class="headerlink" title="Writing your first simple Hadoop program"></a>Writing your first simple Hadoop program</h4><p>Imagine that your boss gives you a large dataset which contains an entire email communication network from a popular social network site. The network is organized as a directed graph where each node represents an email address and the edge between two nodes (e.g., Address A and Address B) has a weight stating how many times A wrote to B. The boss is very interested in finding out the people most frequently contacted by others. Your task is to write a MapReduce program in Java to report the largest weight among all the weighted inbound edges for each node in the graph.</p><p>First, go over the Hadoop word count tutorial to get familiar with Hadoop and some Java basics. You will be able to complete this task with only some knowledge about Java. You should have already loaded two graph files into HDFS and loaded into your HDFS file system in your vm. Each file stores a list of edges as tab-separated-values. Each line represents a single edge consisting of three columns: (source node ID, target node ID, edge weight), each of which is separated by a tab (\t). Node IDs are positive integers, and weights are also positive integers. Edges are ordered randomly.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src  tgt  weight</span><br><span class="line"><span class="number">117</span>  <span class="number">51</span>   <span class="number">1</span></span><br><span class="line"><span class="number">194</span>  <span class="number">51</span>   <span class="number">1</span></span><br><span class="line"><span class="number">299</span>  <span class="number">51</span>   <span class="number">3</span></span><br><span class="line"><span class="number">230</span>  <span class="number">151</span>  <span class="number">51</span></span><br><span class="line"><span class="number">194</span>  <span class="number">151</span>  <span class="number">79</span></span><br><span class="line"><span class="number">51</span>   <span class="number">130</span>  <span class="number">10</span></span><br></pre></td></tr></table></figure><p>Your code should accept two arguments upon running. The first argument (​args[0]) will be a path for the input graph file on HDFS (e.g., /user/cse6242/graph1.tsv), and the second argument (​args[1]) will be a path for output directory on HDFS (e.g., /user/cse6242/task1output1). The default output mechanism of Hadoop will create multiple files on the output directory such as part-00000, part-00001, which will be merged and downloaded to a local directory by the supplied run script. Please use the run scripts for your convenience.</p><p>The format of the output should be such that each line represents a node ID and the largest weight among all its inbound edges. The ID and the largest weight must be separated by a tab (\t). Lines do not need be sorted. The following example result is computed based on the toy graph above. Please exclude nodes that do not have incoming edges (e.g., those email addresses that never get contacted by anybody).</p><p>For the toy graph above, the output is as follows.<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">51 </span>  <span class="number">3</span></span><br><span class="line"><span class="symbol">151 </span> <span class="number">79</span></span><br><span class="line"><span class="symbol">130 </span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>Test your program on graph1.tsv and graph2.tsv. To demonstrate how your MapReduce procedure works, ​use the inline example above, trace the input and output of your map and reduce functions. That is, given the above graph as the input, describe the input and output of your map and reduce function(s) and how the functions transform/process the data (provide examples whenever appropriate). Write down your answers in ​description.pdf​. You are welcome to explain your answers using a combination of text and images.</p><h4 id="Designing-a-MapReduce-algorithm-and-thinking-in-MapReduce"><a href="#Designing-a-MapReduce-algorithm-and-thinking-in-MapReduce" class="headerlink" title="Designing a MapReduce algorithm (and thinking in MapReduce)"></a>Designing a MapReduce algorithm (and thinking in MapReduce)</h4><p>Design a MapReduce algorithm that accomplishes the following task: for each node i in a directed graph G, find that node’s in neighbors’ in neighbors​. Node u is considered to be an in neighbor of node v if there is a directed edge pointing from node u to node v. In other words, your task is find every “2-hop” neighbor of every node i in the graph G, where such a neighbor is connected by at least one directed path of length 2 that reaches node i.</p><blockquote><p>NOTE: You only need to submit pseudo code, a brief explanation of your algorithm, and trace of input and output of your map and reduce functions for the graph given below. No coding is required​.</p></blockquote><h3 id="Task-2-Analyzing-a-Large-Graph-with-Spark-Scala"><a href="#Task-2-Analyzing-a-Large-Graph-with-Spark-Scala" class="headerlink" title="Task 2: Analyzing a Large Graph with Spark/Scala"></a>Task 2: Analyzing a Large Graph with Spark/Scala</h3><p>Please go over this ​Spark word count tutorial​ to get more background about Spark/Scala.</p><h4 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h4><p>Your task is to calculate the gross accumulated node weights for each node in graph1.tsv and graph2.tsv from edge weights using Spark and Scala. Assume the graph to be a representation of a network flow where each edge represents the number of items flowing from source to target. The gross accumulated node weight for a node is now defined as the number of items produced/consumed by the node.</p><p>When loading the edges, parse the edge weights using the ​toInt method and filter out (ignore) all edges whose edge weights equal 1 i.e., only consider edges whose edge weights do not equal 1.</p><p>Your Scala program should handle the same two arguments as in Task 1 for input and output from the console, and should generate the same formatted output file on the supplied output directory (tab-separated-file). Please note that the default Spark saveastextfile method uses a saving format that is different from Hadoop’s, so you need to format the result before saving to file (Tip: use map and mkString). The result doesn’t need to be sorted.</p><h3 id="Task-3-Analyzing-Large-Amount-of-Data-with-Pig-on-AWS"><a href="#Task-3-Analyzing-Large-Amount-of-Data-with-Pig-on-AWS" class="headerlink" title="Task 3: Analyzing Large Amount of Data with Pig on AWS"></a>Task 3: Analyzing Large Amount of Data with Pig on AWS</h3><p>You will try out PIG (​<a href="http://pig.apache.org​" target="_blank" rel="noopener">http://pig.apache.org​</a>) for processing n-gram data on Amazon Web Services (AWS). This is a fairly simple task, and in practice you may be able to tackle this using commodity computers (e.g., consumer-grade laptops or desktops). However, we would like you to use this exercise to learn and solve it using distributed computing on Amazon EC2, and gain experience (very helpful for your future career in research or industry), so you are prepared to tackle more complex problems.</p><p>The services you will primarily be using are Amazon S3 storage, Amazon Elastic Cloud Computing (EC2) virtual servers in the cloud, and Amazon Elastic MapReduce (EMR) managed Hadoop framework.</p><p>This task will ideally​ use up​ only a very small fraction of your $100 credit​. AWS allows you to use up to 20 instances in total (that means 1 master instance and up to 19 core instances) without filling out a “limit request form”. For this assignment, you should not exceed this quota of 20 instances​. You can learn about these instance types, their specs, and pricing at Instance Types​.</p><p>Please read the AWS Setup Guidelines provided to set up your AWS account. In this task, you will use subsets of the Google books n-grams dataset (full dataset for reference), on which you will perform some analysis. An ‘n -gram’ is a phrase with n words; the full n-gram dataset lists n-grams present in the books on books.google.com along with some statistics.</p><p>You will perform your analysis on two custom datasets, extracted from the Google books bigrams (2-grams), that we have prepared for you: a small one and a large one. To help you evaluate the correctness of your output, we have uploaded the output for the small dataset on T-Square (the link is here​ ).</p><blockquote><p>VERY IMPORTANT​ : Both these datasets are in the US-Standard (US-East) region. Using machines in other regions for computation would incur data transfer charges. Hence, set your region to US East (N. Virginia) in the beginning (not Oregon which is the default). This is extremely important otherwise your code may not work and you may be charged extra.</p></blockquote><h4 id="Goal-1"><a href="#Goal-1" class="headerlink" title="Goal"></a>Goal</h4><p>For each unique bigram, compute its average number of appearances per book, with at least 50 occurrences for each recorded year. For the above example, the results will be:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I am       (<span class="number">342</span> + <span class="number">211</span>) / (<span class="number">90</span> + <span class="number">10</span>) = <span class="number">5.53</span></span><br><span class="line">very cool  (<span class="number">500</span> + <span class="number">3210</span> + <span class="number">9994</span>) / (<span class="number">10</span> + <span class="number">1000</span> + <span class="number">3020</span>) = <span class="number">3.40049628</span></span><br></pre></td></tr></table></figure></p><p>Output the 10 bigrams having the highest average number of appearances per book along with their corresponding averages, in tab-separated format​, sorted in descending order, with at least 50 occurrences for each recorded year. If multiple bigrams have the same average, order them alphabetically. For the example above, the output will be:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">I</span> <span class="selector-tag">am</span>       5<span class="selector-class">.53</span></span><br><span class="line"><span class="selector-tag">very</span> <span class="selector-tag">cool</span>  3<span class="selector-class">.40049628</span></span><br></pre></td></tr></table></figure></p><p>You will solve this problem by writing a PIG script on Amazon EC2 and save the output.</p><p>You can use the interactive PIG shell provided by EMR to perform this task from the command line (grunt). In this case, you can copy the commands you used for this task into a single file to have the PIG script and the output from the command line into a separate file. Please see this for how to use PIG shell. Also, you can upload the script and create a task on your cluster.</p><h3 id="Task-4-Analyzing-a-Large-Graph-using-Hadoop-service-onMicrosoft-Azure"><a href="#Task-4-Analyzing-a-Large-Graph-using-Hadoop-service-onMicrosoft-Azure" class="headerlink" title="Task 4: Analyzing a Large Graph using Hadoop service onMicrosoft Azure"></a>Task 4: Analyzing a Large Graph using Hadoop service onMicrosoft Azure</h3><h4 id="Goal-2"><a href="#Goal-2" class="headerlink" title="Goal"></a>Goal</h4><p>Your task is to write a MapReduce program to calculate the degree distribution of a graph. Note that this task shares some similarities with Task 1 (e.g., both are analyzing graphs). Task 1 can be completed using your own computer. This task is to be completed using Azure. We recommend that you first complete Task 1.</p><p>You will use data files small.tsv(~75MB) and large.tsv(~3GB), for this question. Each file stores a list of edges as tab-separated-values. Each line represents a single edge consisting of two columns: (Node A, Node B), each of which is separated by a tab. Node IDs are positive integers and the rows are already sorted by Node A.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src  tgt</span><br><span class="line"><span class="number">51</span>   <span class="number">130</span></span><br><span class="line"><span class="number">51</span>   <span class="number">194</span></span><br><span class="line"><span class="number">51</span>   <span class="number">299</span></span><br><span class="line"><span class="number">130</span>  <span class="number">200</span></span><br><span class="line"><span class="number">151</span>  <span class="number">230</span></span><br><span class="line"><span class="number">151</span>  <span class="number">194</span></span><br></pre></td></tr></table></figure></p><p>Your code should accept two arguments upon running. The first argument (args[0]) will be a path for the input graph file, and the second argument (args[1]) will be a path for output directory. The default output mechanism of Hadoop will create multiple files on the output directory such as part-00000, part-00001, which will have to be merged and downloaded to a local directory.</p><p>The format of the output should be as follows. Each line represents the degree and its frequency. The degree and the frequency of the degree must be separated by a tab(\t), and lines don’t have to be sorted. The following example result is computed based on the toy graph above.</p><blockquote><p>Hint​: One way of doing it is using mapreduce procedure twice. First for finding the degree of each node and second for calculating the frequency of each degree. You will have to make appropriate changes in the skeleton code for this.</p></blockquote>]]></content>
    
    <summary type="html">
    
      代写四个关于大数据的作业，涉及到Hadoop, Spark和Pig的使用，最后需要在AWS和Azure上搭建环境进行计算。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/tags/Hadoop/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
      <category term="Pig" scheme="https://tk1307993.coding.me/tags/Pig/"/>
    
      <category term="Spark" scheme="https://tk1307993.coding.me/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>CS104-Rational-Problem</title>
    <link href="https://tk1307993.coding.me/CS104-Rational-Problem.html"/>
    <id>https://tk1307993.coding.me/CS104-Rational-Problem.html</id>
    <published>2020-01-14T10:58:08.000Z</published>
    <updated>2020-01-14T11:00:20.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Rational-Numbers"><a href="#Rational-Numbers" class="headerlink" title="Rational Numbers"></a>Rational Numbers</h3><p>Let p and q be integers, with q being non-zero integer. A rational number n is a number which can be expressed as the following:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">n</span> = p/q</span><br></pre></td></tr></table></figure></p><p>It should be noted that any integer can be expressed as a rational number, since the integer q may be equal to 1.</p><p>As an example the double value in C++ 0.95 can be expressed as the following rational number:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span>/<span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>Arithmetic operations can be performed on rational numbers. For instance two rational numbers can be added, subtracted from, multiplied and divided. When adding and subtracting two rational numbers, the denominators first need to be reduced to a common denominator. As an example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>/<span class="number">4</span> + <span class="number">1</span>/<span class="number">6</span> = (<span class="number">15</span>+<span class="number">2</span>)/<span class="number">12</span> = <span class="number">17</span>/<span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>When multiplying two rational numbers, the numerators and the denominators are multiplied separately. Using integers a, b, c, and d as an example:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">a/b</span>) * (<span class="name">c/d</span>) = ac/bd</span><br></pre></td></tr></table></figure></p><p>When dividing two rational numbers, the second rational number is first inverted (known as its reciprocal) and then is multiplied with the first rational number like above:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(a/b)</span> ÷ <span class="comment">(c/d)</span> = <span class="comment">(a/b)</span> * <span class="comment">(d/c)</span> = ad/bc</span><br></pre></td></tr></table></figure></p><p>It should be noted that rational numbers can be expressed in “simplest form” as well, for instance given the following rational number:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>/<span class="number">15</span></span><br></pre></td></tr></table></figure></p><p>If both the numerator and the denominator are each divided by 5, we obtain the following reduced rational number:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>/<span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>For this assignment, you are to write a C++ program which will read in rational numbers using the following convention (as an example):<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">50 </span>/ <span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>If in the code two integers n1 and d1 were used, after reading in the above from cin n1 would be set to 50 and n2 would be set to 12. (As a hint you can read the forward slash (/) into any arbitrary char data type.)</p><p>Your program will prompt the user for two rational numbers. Your program will then display the following menu for the user:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>ADDITION</span><br><span class="line"><span class="bullet">2. </span>SUBTRACTION</span><br><span class="line"><span class="bullet">3. </span>MULTIPLICATION</span><br><span class="line"><span class="bullet">4. </span>DIVISION</span><br></pre></td></tr></table></figure></p><p>If the user presses (1), the two rational numbers are added together. If the user presses (2) the two rational numbers are subtracted from each other. If the user presses (3) the two rational numbers are multiplied together. If the user presses (4) the two numbers are divided. After the answer is shown to the user, the user is prompted if he/she would like to run the program again.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>To receive full credit for this assignment, the following conditions must be met:</p><ul><li>If a user enters a zero value for either denominator, your program will loop until the user enters the rational number correctly.</li><li>If the user enters an incorrect menu selection (correct values are 1, 2, 3 and 4), your program will loop until a correct value is entered.</li><li>The program will loop as many times necessary until the user decides to quit.</li><li>The output of each operation is a rational number expressed in reduced lowest terms. To express this, the greatest common divisor (GCD) must be obtained from the numerator and the denominator. The following C++ code can be used to calculate the GCD (which can be used to divide both the numerator and the denominator to reduce the number):<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">gcd</span>, p, q;</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span>=<span class="number">1</span>; <span class="built_in">i</span>&lt;=p &amp;&amp; <span class="built_in">i</span>&lt;=q; <span class="built_in">i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">if ((p%i == <span class="number">0</span>) &amp;&amp; (q%i == <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">  gcd=i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">THIS PROGRAM PERFORMS ARITHMETIC OPERATIONS ON RATIONAL NUMBERS.</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br><span class="line">Please enter the first rational number: 1 / 2</span><br><span class="line">Please enter the second rational number: 1 / 6</span><br><span class="line">OPERATIONS</span><br><span class="line">(1) ADDITION</span><br><span class="line">(2) SUBTRACTION</span><br><span class="line">(3) MULTIPLICATION</span><br><span class="line">(4) DIVISION</span><br><span class="line">Please select an operation (1, 2, 3 or 4): 4</span><br><span class="line">1 / 2 % 1 / 6 = 3 / 1</span><br><span class="line">Would you like to run this program again? N</span><br></pre></td></tr></table></figure><p>Save your solution in a file named rational.cpp.</p>]]></content>
    
    <summary type="html">
    
      基础的C++代写，实现一个加减乘除的计算器，注意输出格式即可。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC401-Index-Random-and-Dictionary</title>
    <link href="https://tk1307993.coding.me/CSC401-Index-Random-and-Dictionary.html"/>
    <id>https://tk1307993.coding.me/CSC401-Index-Random-and-Dictionary.html</id>
    <published>2020-01-10T00:30:46.000Z</published>
    <updated>2020-01-10T00:32:49.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this assignment is to assess your understanding of</p><ol><li>Dictionary</li><li>Tuple</li><li>Set</li><li>Random Module</li></ol><p>Next week, we will discuss functions and the role of functions in programming (section 7.1) and how encapsulation is implemented (namespaces, local, global variables, section 7.2) and exceptions (section 7.3) and recursion, Chapter 10. You notice what we are skipping Chapters 8 and 9, some of that material you will see later in Java.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ul><li>Include your full name as a comment on the first line of your Python program.</li><li>As we did in class, code all the problems in one Python file (.py). Each problems will consist of 1 or 2 modules (def). Identify each problem with comment like #Problem 1, Problem 2, etc.</li><li>Submit (upload) to the dropbox one file labeled as YourName_HW6.py</li></ul><h3 id="Problam"><a href="#Problam" class="headerlink" title="Problam"></a>Problam</h3><h4 id="Indexing-problem"><a href="#Indexing-problem" class="headerlink" title="Indexing problem"></a>Indexing problem</h4><p>At the end of books, there usually is an index that lists the pages where a certain word appears. In this problem, you will create an index for a text but, instead of the page number, you will use the line numbers. You are to implement the function index (fname, letter) that takes as input the name of the text file and the first letter of the words for which you are to create the line number index. For each word that begins with ‘letter’, you are to print the corresponding line numbers. You should</p><ol><li>open and read the file only once; use readline()</li><li>Remove all punctuation from the text</li><li>For each word that begins with the specified letter, find all the line numbers in which the letter appears.</li><li>Print the total number of lines in the text and the number of words that begin with the specified letter.</li></ol><p>Use a dictionary to store results {word: list of line number(s)}. For each word, a line number should be listed only once, for example, ‘the’ appears 3 time on line 250; 250 should not be listed 3 times, only once. In the output, the line numbers should be separated by commas, but they are not printed as lists (no brackets). The words in the output should be in alphabetical order, i.e. a - z.</p><h4 id="Random-problem"><a href="#Random-problem" class="headerlink" title="Random problem"></a>Random problem</h4><p>Craps is a dice-based game played in many casinos. The game starts with the player throwing a pair of standard, six-sided dice. If the player rolls a total of 7 or 11, the player wins. If the player rolls a total of 2, 3 or 12, the player loses. For all other roll values, the player will repeatedly roll the pair of dice until either she rolls the initial value again (in which case she wins) or 7 (in which case she loses. Write a function craps() that takes no arguments, simulates one game of craps, and returns ‘I win’ if the player won and ‘I lost’ if the player lost. Consider implementing a second function if the player does not win or lose on the initial roll.</p><h4 id="Dictionary-problem"><a href="#Dictionary-problem" class="headerlink" title="Dictionary problem"></a>Dictionary problem</h4><p>Implement a function STUDENT() which allows the user to enter the 7-digit student ID. The program will keep prompting the user for a last name and first name. If the student does not have a student ID on record, the program will then ask for the student ID, and store that information. If the student already has a student ID, the program will display it, and ask for confirmation whether a new studentID should be assigned (and, if so allows the new studentID to be entered). When the user hits the return key, the program prints a report listing all students with their studentID. Your report does not have to be in alphabetical order, however, if you do want to make it alphabetical, you can use sorted on the keys() of your dictionary.</p>]]></content>
    
    <summary type="html">
    
      代写三个基础的Python问题，一个是索引问题，另一个是随机问题，最后一个是字典问题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC2542-Search</title>
    <link href="https://tk1307993.coding.me/CSC2542-Search.html"/>
    <id>https://tk1307993.coding.me/CSC2542-Search.html</id>
    <published>2020-01-07T01:25:24.000Z</published>
    <updated>2020-01-07T01:28:29.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The goal of this assignment is to give you experience running and experimenting with heuristic search code. There are three main components. The first is on tiebreaking in A<em> , the second is on tiebreaking in WA</em> and GBFS, and the third is on re-expansions in WA* and GBFS.</p><p>For this assignment, you are provided with C++ code for generic best-first search and A*, as well as for code for working with the map pathfinding and the 3 × 4 sliding tile puzzle domains. You are strongly encourage to use this code, though you are free to complete the experiments in whatever language you so choose. If you choose to use your own code, you will need to use the following input files, which have been provided (see the framework documentation for information on the format of these files):</p><ul><li>“starcraft bgh.map” is a file representation of a map to run experiments on.</li><li>“starcraft bgh.probs” is a file containing a list of pathfinding problems for the map given by “starcraft bgh.map.”</li><li>“3x4 puzzle.probs” is a list of start states for experiments on the 3 × 4 sliding tile puzzle domain.</li></ul><p>All sections have both an experimental and theoretical component. For the theoretical component, feel free to use any of the theorems or lemmas we have already discussed in class.</p><p>Finally, note that different authors sometimes define a count of the number of node expansions slightly differently. For this assignment, we will count the number of node expansions as the number of times a node is taken off the open list, or equivalently, the number of calls to the goal test function that are performed.</p><h3 id="Tiebreaking-in-A"><a href="#Tiebreaking-in-A" class="headerlink" title="Tiebreaking in A*"></a>Tiebreaking in A*</h3><p>The first part of this assignment is on the importance of tiebreaking in A<em>. By default, A</em> compares nodes according to the evaluation f(n) = g(n) + h(n), called the f-value, and no other criteria. Ties are then dealt with arbitrarily (usually just by their ordering in the comparison). In the rest of this document, we refer to this as the Default tiebreaking rule. For the following experiments, we also define the following two different methods, each of which you will have to implement:</p><ul><li>If there is a tie in the f-value between two nodes, the node with the lower value of g(n) (i.e. the g-cost) is considered “best. We call this tiebreaking rule, Low-G tiebreaking.</li><li>If there is a tie in the f-cost between two nodes, the node with the higher g-cost is considered best. We call this tiebreaking rule, High-G tiebreaking.</li></ul><p>You are now required to complete the following tasks:</p><ol><li><p>Create an empty grid map of size 20 × 20. This means there are no obstacles. Set the map to be 4-connected, which means that in any location, the agent can only move in the 4 cardinal directions (i.e., north, east, south, and west) provided there is no obstacle in the way or they are prevented from moving in a given direction because they are at the boundary of the map. Consider the task of finding a path from location (1,10) and to location (11, 10). Run A* with each of the three different tiebreaking rules on this problem (Default, Low-G, and High-G). In at most two sentences, describe how the different tiebreaking rules compare in terms of nodes expanded.</p></li><li><p>Run the same experiment as in 1(a), except this time set the goal state to location (6, 15). In at most three sentences, describe how the results compare to those seen in the experiment in 1(a).</p></li><li><p>Notice that because there are no obstacles the Manhattan distance heuristic provides perfect estimates on the empty 20 × 20 grid map that you constructed. Also notice that the optimal solution cost to the tasks in questions 1(a) and 1(b) are the same. In no more than four sentences, explain why the relative performance of Low-G and High-G tiebreaking differs between these two problems, and what these experiments suggest about the best way to do tiebreaking when using A*.</p></li><li><p>Run A* with each of the three different tiebreaking rules on the 100 pathfinding problems given in file “starcraft bgh.probs” on the map given in file “starcraft bgh.map”. Make a table that shows the average number of nodes expanded when using each rule, the median number of nodes expanded, and the percentage of problems for which each tiebreaking rule is the best. In at most two sentences, describe if the results are consistent with the conclusions you made in question 1(c).</p></li><li><p>Let α and β be two instances of A<em> that are identical aside from their tiebreaking policy, and both use the same consistent heuristic. Prove that if some node n is expanded by α before a goal is found, while β does not expand n before a goal is found, then f(n) = C</em>.</p></li></ol><h3 id="Tiebreaking-in-WA-and-GBFS"><a href="#Tiebreaking-in-WA-and-GBFS" class="headerlink" title="Tiebreaking in WA* and GBFS"></a>Tiebreaking in WA* and GBFS</h3><p>The second part of this assignment is on the importance of tiebreaking in WA<em> and GBFS. If you are using the provided code, this means you must extend the given best-first search code to create instances of WA</em> and GBFS.</p><ol><li><p>Repeat the experiments in questions 1(a) and 1(b) with WA<em> (use weights 2 and 5) and GBFS. In no more than 5 sentences, explain if the same trends hold as with A</em>, and why or why not.</p></li><li><p>Consider the set of 100 3 × 4 sliding tile puzzle problems given. Run WA<em> using weights 1, 2, 5, 10, and 100, and GBFS, each using the three different tiebreaking strategies to solve these problems. Make a table that shows the average number of node expansions, the median number of node expansions, and the percentage of problems for which each tiebreaking rule runs the fastest (per weight). Make a second table that shows the average solution cost, the median solution cost, and the percentage of problems for which each tiebreaking rule finds the best solution. In at most 4 sentences, describe what these experiments suggest is the best way to do tiebreaking in WA</em> and GBFS.</p></li><li><p>Even after applying the High-G and Low-G tiebreaking rules, there may still be ties. Add to your implementation the ability to break these remaining ties randomly. Take the problem from the 15-puzzle test set with the largest optimal solution cost, and solve it 100 times each with WA* with weights 1, 2, 5, 10, and GBFS. Use the best tiebreaking strategy seen in the above experiments for each algorithm. Show the average, median, and variance in terms of number of node expansions for each algorithm and weight. What is the general trend?</p></li><li><p>Let T(x, y) be a boolean function that returns true if node x is less than or equal to y and false otherwise (i.e., T is a tiebreaking rule). Consider any problem with a finite number of states. Let α be an instance of WA* that uses T to tiebreak, and let β be an instance of GBFS that uses the same heuristic as α, Low-G tiebreaking, and T to resolve any remaining ties. Prove that on any problem with a finite state-space, there exists a constant W such that if α uses a weight w ≥ W , then α and β will expand the exact same set of nodes in the exact same order until a solution is found.</p></li></ol><h3 id="Re-expansions-in-WA-and-GBFS"><a href="#Re-expansions-in-WA-and-GBFS" class="headerlink" title="Re-expansions in WA* and GBFS"></a>Re-expansions in WA* and GBFS</h3><p>The third part of the assignment is on the impact of re-expansions in WA<em> and GBFS. For this part of the assignment, you will have to modify the code, so that it has the option to not reopen nodes when a lower-cost path is found to a state. For clarity, we refer to a WA</em> or GBFS that does reopen nodes as rWA<em> and rGBFS, respectively, and a WA</em> or GBFS that does not reopen nodes as nrWA* and nrGBFS, respectively.</p><ol><li><p>Run nrGBFS and nrWA* with weights 2, 5, and 10, on the 100 15-puzzle problems and create a table that shows the average and median number of node expansions, and the average and median solution costs. For each algorithm, use the best tiebreaking rule as seen in 2(b). In at most three sentences, describe how the results compare to those seen in question 2(b).</p></li><li><p>Using the results from the runs in 3(a) and 2(b), make a table that shows, for each weight, the percentage of problems for which rWA<em> expanded fewer nodes than nrWA</em> (as well as vice versa and ties), and the percentage of problems for which rWA<em> found solutions of lower cost than nrWA</em> (as well as vice versa and ties). Construct a similar table for rGBFS and nrGBFS.</p></li><li><p>Run rWA* with weights, 2, 5, and 10 on the 100 pathfinding problems given for map “starcraft bgh.map”. Make a table that shows the average number of nodes expanded (including reexpansions), the average number of unique state expansions (i.e., the average number of states expanded at least once), the median number of node expansions, and the median number of unique state expansions.</p></li><li><p>Run nrGBFS and nrWA* with weights 2, 5, and 10 on the 100 pathfinding problems given for map “starcraft bgh.map”. Make a table that shows the average number of nodes expanded and the median number of node expansions. How do the results compare with those seen in question 3(c)?</p></li><li><p>Prove that if the heuristic nrWA<em> using weight w &gt;= 1 is using a consistent heuristic, then any solution it finds will have a cost of no more than w·C</em>.</p></li></ol>]]></content>
    
    <summary type="html">
    
      用C++代写几个经典的搜索算法，包括BFS, A*, WA*和GBFS.
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CS120-Art-Show</title>
    <link href="https://tk1307993.coding.me/CS120-Art-Show.html"/>
    <id>https://tk1307993.coding.me/CS120-Art-Show.html</id>
    <published>2020-01-03T02:02:04.000Z</published>
    <updated>2020-01-03T02:04:57.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a Python program that creates a photo collage of modified images. The entire collage must be created entirely using only Python – no Photoshop, etc. allowed. (The only allowable use of Photoshop, etc. is to reduce the original resolution of a high resolution image to start with.) You should have a single function make all of this happen–all of the effects and compositing must occur from a single function named collage(). IT IS COMPLETELY ACCEPTABLE AND EXPECTED FOR collage() TO USE OTHER FUNCTIONS! I will setMediaPath() to your folder, execute collage(), and expect to see your collage get generated. For full credit, your completed collage must satisfy the following requirements:</p><ol><li>Start with a blank canvas that is 700 pixels wide by 515 pixels tall or 515 pixels wide by 700 pixels tall.</li><li>Any number of different images may be placed on the blank starting canvas, but you must include the same image at least five times: once in its original form, and at least four more times modified in any way you want using at least four different modifications.</li><li>Each of the four image modifications required above must alter the original image’s appearance in some noticeable way. At least one of the modification algorithms must be created or significantly modified by you, and not copied from another resource. Possible image modifications include, but are not limited to:<ul><li>Grayscale</li><li>Crop</li><li>Lighten/darken</li><li>Negative</li><li>Scale</li><li>Sepia tone/cyanotype</li><li>Blend</li><li>Rotate/mirror</li><li>Line drawing/edge detection</li><li>Shift colors</li><li>Posterize</li><li>Added lines or shapes</li></ul></li><li>Develop a chromakey-like function to “sign” your collage by using a file containing your signature on a white background. Change corresponding pixels in your collage to a contrasting color when it detects the non-white pixels of your signature.</li><li>The program should not prompt for any input, but rather have all files specified in your code. You should make use of the getMediaPath() function.</li><li>The final collage that your program creates should be appropriate for all ages to view.</li><li>All beginning images used in your collage must satisfy at least one of the following:<ul><li>The image is owned by you, or you have documented permission from the copyright holder to use it.</li><li>The image is included in the “JPG Images.zip” file provided in the CS 120 area of Blackboard.</li><li>The image is available royalty-free in the public domain.</li></ul></li></ol><p>Your code should be hierarchically decomposed and use descriptive function and variable names. Additionally, make sure to include reasonable documentation comments throughout your code as you feel appropriate. At a minimum, include comments at the start of the code that includes your name and date. Additional comments should be included in your code similar to those used by the authors in the text book. Your code should be formatted similar to the text book authors’ examples. Include a reflection paper along with your submitted files. See Blackboard for a description of its content.</p><p>Completed projects may be posted online by the instructor (with attribution to you, unless you wish to remain anonymous) so that others can view your creations. Additionally, your completed project will be entered into a CS 120 Art Show. Details about the art show will be provided separately.</p><h3 id="TO-SUBMIT-YOUR-WORK-FOR-GRADING"><a href="#TO-SUBMIT-YOUR-WORK-FOR-GRADING" class="headerlink" title="TO SUBMIT YOUR WORK FOR GRADING"></a>TO SUBMIT YOUR WORK FOR GRADING</h3><p>Even if you feel your project is incomplete, turn in something before the due date and time. Whatever you turn in will be worth a few points! To submit your project, do the following.</p><ol><li>Place ALL of your files for the project into a single folder named project2. Don’t forget the image files and reflection paper, etc. Compress (zip) this folder, creating project2.zip.</li><li>Log into Blackboard and enter the CS 120 part of the site. Go to the Projects area by using the “Projects” navigation button on the left side of the screen. Inside the Projects area, click on the “Project 2” link.</li><li>Find the “Assignment Submission” section. Click on the “Browse my Computer” button and locate your project2.zip compressed (zipped) file you created in step 1 above.</li><li>Once you have attached your file, click on the “Submit” button in section 4 “Submit”, at the bottom right of the submission page. You should then receive a confirmation of your submission on your screen.</li></ol>]]></content>
    
    <summary type="html">
    
      用Python的图形库，画出要求的图形即可，其余部分可自由发挥。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COS30018-Electric-Car-Charge-Scheduling-System</title>
    <link href="https://tk1307993.coding.me/COS30018-Electric-Car-Charge-Scheduling-System.html"/>
    <id>https://tk1307993.coding.me/COS30018-Electric-Car-Charge-Scheduling-System.html</id>
    <published>2019-12-30T02:18:57.000Z</published>
    <updated>2019-12-30T02:21:09.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal-of-the-assignment"><a href="#Goal-of-the-assignment" class="headerlink" title="Goal of the assignment"></a>Goal of the assignment</h3><p>The goal of this assignment is to implement and demonstrate a simple intelligent scheduling system for the coordinated charging of a number of plug-in electric cars in a precinct/neighbourhood.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Design and implement a simple intelligent system for coordinated scheduling of a number of plug-in electric cars in a precinct/neighbourhood, in such a way that all the cars are efficiently and fairly charged according to the different time preferences of the individual owners, the car charging constraints and the maximum electricity load constraints.</p><p>An electric car charge scheduling system should involve agents with the following roles:</p><ol><li>Master scheduling agent<ol><li>Collects requirements and preferences from other agents (i.e. from car agents)</li><li>Produces a coordinated schedule for all the cars (can use e.g. KBR, GA, ACO or other intelligent search/optimisation/reaoning techniques from the unit)</li><li>Sends the individual schedules to car agents</li></ol></li><li>Car agents (at least 6 agents)<ol start="2"><li>Send the requirements and preferences to the master scheduling agent</li><li>Receives the individual schedule</li></ol></li><li>Car scheduling agents (at least 3 – instead of a master agent) (optional)<ol start="3"><li>Exchange the requirements and preferences with other agents</li><li>Collaboratively produce a schedule for all the cars (e.g. iteratively exchange individual schedules and improve/alter them until all the individual schedules are valid)</li></ol></li></ol><p>The master scheduling agent assists the households in a neighbourhood with producing a schedule for the coordinated charging of all plug-in electric cars in such a way that all the cars are efficiently (e.g. shortest overall time, etc) and fairly (e.g. similar waiting time for individual cars, user preferences satisfied to a similar level, etc) charged according to the different time preferences of individual owners (e.g. earliest time to start charging, latest time for a car to be fully charged, etc), car charging constraints (e.g. minimum time and min/max energy for a charge in multi-step charging) and the maximum electricity load constraints (e.g. maximum total load at any time). The car agents send their requirements and preferences to the master scheduling agent and are notified about their individualschedules produced by the master scheduling agent. Optionally, each charging station can have a car scheduling agent that interact with each other to produce schedules for individual cars (that satisfy all the local and global preference/constraints). The agents can exchange their preferences and individually schedule charging their cars. Alternatively, they can iteratively exchange individual schedules and improve/alter them until all individual schedules are valid.</p><h3 id="Assumptions-and-options-can’s-and-or’s"><a href="#Assumptions-and-options-can’s-and-or’s" class="headerlink" title="Assumptions and options (can’s and or’s)"></a>Assumptions and options (can’s and or’s)</h3><ul><li>The master scheduling agent (or car scheduling agents) can use any search/optimisation technique from the unit (e.g. KBR, genetic algorithm, ant colony, etc) or combination of them</li><li>The car scheduling agents can also use negotiation or other distributed mechanism (e.g. KBR, auction, CNP etc)</li><li>Provide GUI for the user input, parameter settings and visualisation (and a config file for the defaults)-</li><li>Use and compare different approaches/techniques (e.g. KBR vs ACO vs GA) (optional)</li><li>For agent communication any interaction protocols can used such as FIPA predefined (e.g. CNP, iterated CNP), nested or newly specified; any standard content language is ok; display the massage exchanged between the agents (e.g. sniffer agent)</li><li>Try to demonstrate the system with a well designed and realistic example</li><li>Be creative but keep it simple!!!</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个电动车充电调度系统，实现一个prototype的demo即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CS413-Market-Information</title>
    <link href="https://tk1307993.coding.me/CS413-Market-Information.html"/>
    <id>https://tk1307993.coding.me/CS413-Market-Information.html</id>
    <published>2019-12-26T02:07:10.000Z</published>
    <updated>2019-12-26T02:11:57.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Goal of this project: reading/writing csv files, plotting a chart, creating some calculations (daily return, monthly return) from the data, using data structure</p><ul><li>Unzip the file markedata.zip</li><li>You will find 19 csv files with information about stocks (for the Part I)</li><li>You will find 3 csv files with information about exchange (BARX, EDGX, NYSE) (for the Part 2)</li></ul><h3 id="Part-I-Reading-a-CSV-file-containing-Market-Information"><a href="#Part-I-Reading-a-CSV-file-containing-Market-Information" class="headerlink" title="Part I: Reading a CSV file containing Market Information"></a>Part I: Reading a CSV file containing Market Information</h3><p>Load the content of these files into the following data structure:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">market_data[<span class="string">'Symbol'</span>] = &#123;<span class="string">'Open'</span>:[], <span class="string">'High'</span>:[], <span class="string">'Low'</span>:[], <span class="string">'Close'</span>:[], <span class="string">'Volume'</span>:[], <span class="string">'Adjusted'</span>:[], <span class="string">'Date'</span>:[]&#125;</span><br></pre></td></tr></table></figure><p>Since you have to handle many symbols, market_data should be a dictionary of dictionary.</p><p>Every values of this dictionary of dictionary will be a list of number or float or date.</p><h4 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h4><p>Create this dictionary</p><h4 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h4><p>Create a new key in this dictionary being a list of values representing the moving average for 10 days.<br>It means that market_data will be:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">market_data[<span class="string">'Symbol'</span>] = &#123;<span class="string">'Open'</span>:[], <span class="string">'High'</span>:[], <span class="string">'Low'</span>:[], <span class="string">'Close'</span>:[], <span class="string">'Volume'</span>:[], <span class="string">'Adjusted'</span>:[], <span class="string">'Date'</span>:[], <span class="string">'MA_10'</span>:[]&#125;</span><br></pre></td></tr></table></figure><p>Since it is a moving average, there are some parts without values; you will just use None as a value. All the different lists should have the same length.</p><h4 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h4><p>You will create another key in this dictionary containing the daily return for every day (the first day shouldn’t have any return)</p><p>You will calculate the return using the adjusted price (the adjusted price taking into account split and dividends)</p><h4 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h4><p>You will create:</p><ul><li>A function ‘maximum_return’, which will return the best return across all the symbols. The return should contain the return and the date associated</li><li>A function ‘minimum_return’, which will return the best return across all the symbols. The return should contain the return and the date associated</li><li>A function ‘best_return_for_one_month’, which will return the best return across all the symbols for a 1-month period. The return should contain the return and the month/year</li></ul><h4 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h4><p>Plot a chart for MSFT, NVDA, GOOGL representing the daily market price.<br>You will use the library the library matplot.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">matplotlib</span></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">matplotlib</span><span class="selector-class">.pyplot</span> <span class="selector-tag">as</span> <span class="selector-tag">plt</span></span><br><span class="line"><span class="selector-tag">plt</span><span class="selector-class">.plot</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="selector-tag">plt</span><span class="selector-class">.ylabel</span>(<span class="string">'some numbers'</span>)</span><br><span class="line"><span class="selector-tag">plt</span><span class="selector-class">.show</span>()</span><br></pre></td></tr></table></figure></p><h3 id="Creating-an-order-book"><a href="#Creating-an-order-book" class="headerlink" title="Creating an order book"></a>Creating an order book</h3><p>You are creating an order book builder for your trading system. The book builder will have as an input a list of files with the same format. Each exchange will have a given file. During this exercise, you will take 3 venues (3 files) as input: ARCA, EDGX, NYSE.</p><p>You will need to read the three files at the same time (to make it deterministic, you will always read ARCA first then EDGX second).</p><p>An order book is defined as the following on wiki:</p><p>A book builder is a component of a trading system sorting the orders from different exchanges by price and by side. It is a critical component: Primary source of market information for trading models.</p><p>In this assignment, you will read the files and get the orders coming from the different exchanges.</p><p>You will create a class capable to handle the market data coming one by one and build a book for each side. In this part I, you will just need to handle one symbol for 3 different exchanges. But in the following part, you will have a book for different symbols, therefore it is important to have your book handling many symbols.</p><h4 id="Task-1-1"><a href="#Task-1-1" class="headerlink" title="Task 1"></a>Task 1</h4><p>You will create the class book_builder having for functions: process_tick (tick), this function will update the book ‘bid’ ‘offer’ with the input tick top_of_book(), this function will return the top of the book for bid and offer</p><h4 id="Task-2-1"><a href="#Task-2-1" class="headerlink" title="Task 2"></a>Task 2</h4><p>You will create the functions:</p><ul><li>getBestBid returning the best bid (price, volume, venue)</li><li>getBestOffer returning the best bid (price, volume, venue)</li></ul><h4 id="Task-3-1"><a href="#Task-3-1" class="headerlink" title="Task 3"></a>Task 3</h4><p>You will create the function:</p><ul><li>getBidVolumeBetween(price1, price2) returning the total volume between price1 and price2 for bids.</li><li>getOfferVolumeBetween(price1, price2) returning the total volume between price1 and price2 for offers</li></ul>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业分为两个部分，第一部分是关于读写一份Market Information的程序，第二部分是关于Order book的程序。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS218-Shark</title>
    <link href="https://tk1307993.coding.me/CS218-Shark.html"/>
    <id>https://tk1307993.coding.me/CS218-Shark.html</id>
    <published>2019-12-23T08:17:18.000Z</published>
    <updated>2019-12-23T08:29:10.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview-of-the-Assignment"><a href="#Overview-of-the-Assignment" class="headerlink" title="Overview of the Assignment"></a>Overview of the Assignment</h3><p>Fish Game: Create a fish game along the line of a classic game Shark! Shark!(<a href="http://www.youtube.com/watch?v=HiHTZ8wZ_Hc&amp;feature=related)" target="_blank" rel="noopener">http://www.youtube.com/watch?v=HiHTZ8wZ_Hc&amp;feature=related)</a>.</p><p>In the classic game above, you start as a baby fish, growing by eating smaller fishes, and staying alive by dodging larger fishes.</p><p>In this assignment, we will create a fish game that is similar to but not exactly the same as this classic game – please always follow our requirements as specified below when they are different. You may use as much of your code from Assignment 2 as you need. Before you start, take some time to plan your design.</p><p>This assignment is different from the last two and will require you think through things in advance. Use Inheritance, polymorphism, key-based interactions, ArrayList, and your knowledge of objects to write the code.</p><h3 id="General-Requirements-amp-Learning-Objectives"><a href="#General-Requirements-amp-Learning-Objectives" class="headerlink" title="General Requirements&amp; Learning Objectives"></a>General Requirements&amp; Learning Objectives</h3><h4 id="Learning-objectives"><a href="#Learning-objectives" class="headerlink" title="Learning objectives"></a>Learning objectives</h4><ul><li>Create application using inheritance and polymorphism;</li><li>Create key-based interactions;</li><li>Use ArrayList to store and remove objects;</li><li>Create dynamic text messages;</li><li>Create simple Graphical User Interface (GUI) using GUI library</li></ul><h4 id="Programming-Requirements"><a href="#Programming-Requirements" class="headerlink" title="Programming Requirements"></a>Programming Requirements</h4><p>First of all, this assignment must be done using Java System Library (e.g. using Graphics2D for drawing). You will get 0 if you use Processing library (e.g. using PApplet for drawing) or any other 3rd party libraries.</p><p>This assignment has two iterative steps: Milestone: initial UML design and code for drawing the fishes and Pond, and Final Deliverable: updated UML design and code for fishing For the UML design document, you are graded on completeness and correctness, and for the code on completeness and visual style.</p><p>For the UML design document, you are graded on completeness and correctness, and for the code on completeness and visual style.</p><h3 id="MilestoneCode-Design-Inheritance-and-Drawing-Fishes-and-Sea"><a href="#MilestoneCode-Design-Inheritance-and-Drawing-Fishes-and-Sea" class="headerlink" title="MilestoneCode: Design Inheritance and Drawing Fishes and Sea"></a>MilestoneCode: Design Inheritance and Drawing Fishes and Sea</h3><h4 id="UML-Design"><a href="#UML-Design" class="headerlink" title="UML Design"></a>UML Design</h4><p>Draw the initial UML that should include at least three classes to represent a general fish and two types of enemy fish: shark and herbivore fish (i.e. weed eating only). The enemy fishes must extend (i.e. be the subclasses of) the general fish, and meet the following requirements:</p><p>First of all, you need to design your classes by following strict Encapsulation for fields (except for constants), and provide public methods only when it’s absolutely necessary. When working with inheritance, you are allowed to relax access control of superclass’ fields from private to protected so as to facilitate subclasses to access some of these fields directly. As with public methods, you should relax access as such only when it is absolutely necessary.</p><h3 id="About-the-general-fish"><a href="#About-the-general-fish" class="headerlink" title="About the general fish"></a>About the general fish</h3><p>a) The general fish class should hold properties common to both player fish and enemy fish, such as position (along x &amp; y), velocity (along x and y), angle for rotation, etc.</p><p>b) The general fish should also have some methods that could be either used directly or overridden by its subclasses, such as drawFish(Graphics2D g2), detectCollision(), detectOffScreen(), etc.</p><p>c) Please note the whole purpose to have the general fish class is to use it as the superclass for player fish and enemy fish, you shouldn’t instantiate any object of it.</p><h3 id="About-the-enemy-fishes"><a href="#About-the-enemy-fishes" class="headerlink" title="About the enemy fishes"></a>About the enemy fishes</h3><p>d) For the herbivore fish, you can basically use the fish that you have created in Assignment 2 with modifications. For instance, you need to redesign the code structure to accommodate inheritance, so that it will make use of the fields and methods of the general fish while declaring its own fields such as field for body color.</p><p>e) It must override at least drawFish(Graphics2D g2) method of the general fish, to allow it to draw enemy fish using the color held in the field of body color f) For the shark, you need to redesign a new fish that is visually in the form of shark, which must has tail that is visually obvious. Beyond inheriting the common properties of the general fish, the fish must have the capability to eat other types of fish, including the herbivore fish and player fish (included in the final deliverable)</p><p>g) A shark can eat other fishes only when it is facing them and close to their mouth (i.e. in head-on position), so you need to have a method to check on this.</p><p>h) Design FishPanel class and aggregate an ArrayList of general fish. Then add as field a Timer object.</p><p>i) Create FishApp class as a subclass of JFrame, and associate it with the FishPanel class.</p><p>j) The UML diagram must follow the UML notations for class and encapsulation. Also the names of the class, fields and methods must follow the naming convention with appropriate upper- or lower case for the initial and CamelCase thereafter.</p><p>(Please note the structure of your code must match your UML design. Otherwise you will lose credit for the UML design)</p><h3 id="Coding-per-the-design"><a href="#Coding-per-the-design" class="headerlink" title="Coding per the design:"></a>Coding per the design:</h3><p>a) you should use the whole display window to represent the sea, leaving no margins for any of the sides.</p><p>b) You must use an ArrayList of general fish to hold the enemy fishes, among which two of them should be sharks and the rest herbivore fish.</p><p>c) The sharks initially should be in uniform color and size (it should be equal to or slightly larger than the upper bound of herbivore fishes’ sizes), while the herbivore fishes must be in randomized colors and sizes.</p><p>d) An herbivore fish is eaten by a shark when they go head-on (i.e. face to face with mouths being close) and grow itself proportionally to the size of the fish eaten. Otherwise they bounce off from each other.</p><p>e) Herbivore fishes must bounce off each other when they collide and NO eating happen among themselves.</p><p>f) The enemy fishes must move left and right in the sea, with wavy (up and down) movement based on the sin or cos function.</p><p>g) When an enemy fish fully goes off the screen or when it is killed, it must be destroyed (i.e. removed from the ArrayList).</p><p>h) Enemy fishes should be respawned at a steady interval for up to a maximum of 10 including no more than 8 herbivore fishes and no more than 2 sharks on the screen (you should spawn one fish for each interval, and use a random function call to give 80% of chance to herbivore fishes and 20% chance to shark). Respawned fishes should move in randomly from either left or right side of the window.</p><h3 id="Final-deliverable-Fish-Game"><a href="#Final-deliverable-Fish-Game" class="headerlink" title="Final deliverable: Fish Game"></a>Final deliverable: Fish Game</h3><h4 id="Update-the-UML-design-to-include"><a href="#Update-the-UML-design-to-include" class="headerlink" title="Update the UML design to include"></a>Update the UML design to include</h4><p>a) Class for player fish (avatar), which is a subclass of general fish as well, and must include at least two unique visual features (e.g. dots, stripes etc.) as represented by geom objects so that it will be easy to distinguish it from those herbivore fishes.</p><p>b) The player fish must override at least the drawFish(Graphics2D g2) method of general fish to draw it differently.</p><p>c) An inner class (you can download the membership notation from Canvas|Resource and used it in the UML to indicate the nested relationship), which extends KeyAdaptor class for key interaction per the features for gameplay below.</p><p>d) GUI features as outlined below.</p><p>(Please note the structure of your code must match your UML design. Otherwise you will lose credit for the UML design)</p><h4 id="Coding-per-the-design-1"><a href="#Coding-per-the-design-1" class="headerlink" title="Coding per the design"></a>Coding per the design</h4><p>About the player fish.</p><p>a) The movement of the player fish must be controlled by key inputs.</p><p>b) The player fish would grow by eating an herbivore fish smaller than itself, and the growth must be proportional to the size of the fish eaten.</p><p>c) If it however tries to eat an herbivore fish that is greater than itself, it will be killed, and before it runs out of its lives it respawns at a location within the screen, which meets the digit-based requirements as specified.</p><p>d) Eating can happen ONLY when the player fish and an enemy fish go in head-on position as outline in the milestone part.</p><p>e) Whenever eating happens (no matter player fish eats enemy fish or vice verse), certain bubbles or traces should be displayed as per the digit-based requirements as specified.</p><p>f) Player fish can kill a shark by touching its tail 4 times before it moves out of the screen. If however it touches on the shark any part other than the tail, it will be killed instantly.</p><p>g) When a shark is touched by its tail it must flash with a different color to demonstrate the effect, and when it is killed, it must change its shape in certain way to show that it is dead while sinking to the bottom of the sea (refer to Shark! Shark! for example but you can have your own appropriate form)</p><h3 id="About-Style"><a href="#About-Style" class="headerlink" title="About Style"></a>About Style</h3><p>As always, visual Design Matters! Grades will partially depend on how the game looks, including sea design with appropriate, animated decoration objects, animated fish features for enemy fishes and player fish, the HUD (e.g. using fish images rather number to show number of lives, and nicely designed score board). Beyond this, there are some specific requirements as follows based on your student number.</p>]]></content>
    
    <summary type="html">
    
      代写一个类似大鱼吃小鱼的游戏，小鱼不停的吃比他体积小的鱼，最终成长成大鱼后，和鲨鱼一战。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>CS1921-Text-Editor</title>
    <link href="https://tk1307993.coding.me/CS1921-Text-Editor.html"/>
    <id>https://tk1307993.coding.me/CS1921-Text-Editor.html</id>
    <published>2019-12-21T01:23:00.000Z</published>
    <updated>2019-12-21T01:26:25.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Aims"><a href="#Aims" class="headerlink" title="Aims"></a>Aims</h3><p>This exercise aims to give you practice in dealing with dynamic data structures, specifically linked lists. The goal is to complete the implementation of a medium-sized program that can do simple text editing.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>The assignment is to write a simple line-based text editor called lite (which stands for line text editor). The editor lite stores lines of text in a linked list: each line of text is stored in a node of the linked list. If there are n lines of text, they are numbered from 1 to n for the user. At every point in time the editor has a current line number (which is an index between 1 and n). When lite is started up, the current line number is 1. The line-based commands allow the user to print lines, to delete the current line, to insert and append lines before or after the current line and to go-to a particular line. There are also file-oriented commands that enable the user to save changes and quit the editor, to force an exit or to change the name of the file. Note that lite does not contain a search command or contain any way of changing text apart from deleting ‘old’ lines and appending and inserting new lines.</p><p>The main objectives of this assignment are:</p><ul><li>use and manipulate dynamic data structures (like linked lists) to solve a complex problem</li><li>learn how to implement a linked list data structure and functions for maintaining the data structure</li><li>gain experience with implementing a more comprehensive functionality for editing text files</li><li>write a properly documented C program that adheres to the course Style Guide</li></ul><p>NOTE: You should think carefully about the appropriate data structures and algorithms to use in your program. Before starting to write any code it is important that you fully understand the problem and determine the data structures that you will require and the algorithms to use. It is highly recommended that you start coding only after you have spent some time on these considerations. In particular, you must not make any assumptions about the number of lines in a text file; this means that you must use dynamically-allocated linked-list data structure to manage a text file.</p><h3 id="What-the-editor-should-do"><a href="#What-the-editor-should-do" class="headerlink" title="What the editor should do"></a>What the editor should do</h3><p>A file name is the only optional argument to the lite command. So you execute lite either by:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">prompt$</span><span class="bash"> ./lite</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">prompt$</span><span class="bash"> ./lite filename</span></span><br></pre></td></tr></table></figure></p><p>where filename is a file name that may or may not exist. If there are more arguments, then the usage error message from lite is:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: ./lite <span class="string">[filename]</span></span><br></pre></td></tr></table></figure></p><p>The square brackets indicate that filename is optional.</p><h3 id="Examples-of-Use"><a href="#Examples-of-Use" class="headerlink" title="Examples of Use"></a>Examples of Use</h3><p>When lite is waiting for user input it uses the prompt ‘?’. When text is printed, each line is preceded by its line number. The current line number is indicated by an arrow.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>The user can start up the editor without a file name, print the help command and then quit.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite</span><br><span class="line">? h</span><br><span class="line">Commands are (in upper <span class="built_in">or</span> lower case):</span><br><span class="line">        q:      <span class="keyword">quit</span></span><br><span class="line">        <span class="variable">s:</span>      save</span><br><span class="line">        <span class="keyword">x</span>:      force <span class="keyword">exit</span></span><br><span class="line">        <span class="keyword">f</span> <span class="symbol">&lt;filename&gt;</span>: the <span class="keyword">file</span> <span class="keyword">is</span> called <span class="symbol">&lt;filename&gt;</span></span><br><span class="line">        h:      <span class="keyword">print</span> this <span class="keyword">help</span> message</span><br><span class="line">        d:      <span class="keyword">delete</span> current <span class="built_in">line</span></span><br><span class="line">        <span class="variable">a:</span>      <span class="keyword">append</span> after current <span class="built_in">line</span>, terminated by <span class="string">'.'</span></span><br><span class="line">        i:      <span class="keyword">insert</span> before current <span class="built_in">line</span>, terminated by <span class="string">'.'</span></span><br><span class="line">        <span class="keyword">p</span>:      <span class="keyword">print</span> <span class="keyword">all</span> lines</span><br><span class="line">        .:      <span class="keyword">print</span> current <span class="built_in">line</span></span><br><span class="line">        +:      increment <span class="built_in">line</span> <span class="built_in">and</span> <span class="keyword">print</span></span><br><span class="line">        <span class="symbol">&lt;return&gt;</span>: same <span class="keyword">as</span> <span class="string">'+'</span></span><br><span class="line">        -:      decrement <span class="built_in">line</span> <span class="built_in">and</span> <span class="keyword">print</span></span><br><span class="line">        <span class="keyword">number</span>: <span class="keyword">make</span> <span class="string">'number'</span> the current <span class="built_in">line</span></span><br><span class="line">? q</span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>In the next example, if the file Mackellar.txt contains the text<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">I love a sunburnt country,</span><br><span class="line">A land <span class="keyword">of</span> sweeping plains,</span><br><span class="line"><span class="keyword">Of</span> ragged mountain ranges,</span><br><span class="line"><span class="keyword">Of</span> droughts <span class="keyword">and</span> flooding rains.</span><br><span class="line">I love her <span class="keyword">far</span> horizons,</span><br><span class="line">I love her jewel-sea,</span><br><span class="line">Her beauty <span class="keyword">and</span> her terror -</span><br><span class="line">The wide brown land <span class="keyword">for</span> me!</span><br></pre></td></tr></table></figure></p><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>In the next example, the user steps down an existing C program to a particular line, deletes the line and inserts a new line.<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite hw.c</span><br><span class="line">Existing file <span class="string">"hw.c"</span></span><br><span class="line">? p</span><br><span class="line">---&gt;   <span class="number">1</span>: <span class="meta">#<span class="meta-keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">2</span>: <span class="meta">#<span class="meta-keyword">define</span> NUMBER <span class="number">10</span></span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">3</span>: <span class="keyword">int</span> main(void) &#123;</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">4</span>:    <span class="keyword">int</span> i<span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">5</span>:    <span class="keyword">for</span> (i=<span class="number">0</span><span class="comment">; i&lt;NUMBER; i++) &#123;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">6</span>:       printf(<span class="string">"hello, world!\n"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">7</span>:    &#125;</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">8</span>:    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">9</span>: &#125;</span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">2</span>: <span class="meta">#<span class="meta-keyword">define</span> NUMBER <span class="number">10</span></span></span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">3</span>: <span class="keyword">int</span> main(void) &#123;</span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">4</span>:    <span class="keyword">int</span> i<span class="comment">;</span></span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">5</span>:    <span class="keyword">for</span> (i=<span class="number">0</span><span class="comment">; i&lt;NUMBER; i++) &#123;</span></span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">6</span>:       printf(<span class="string">"hello, world!\n"</span>)<span class="comment">;</span></span><br><span class="line">? d</span><br><span class="line">---&gt;   <span class="number">6</span>:    &#125;</span><br><span class="line">? i</span><br><span class="line">      printf(<span class="string">"goodbye, world!\n"</span>)<span class="comment">;</span></span><br><span class="line">.</span><br><span class="line">? p</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">1</span>: <span class="meta">#<span class="meta-keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">2</span>: <span class="meta">#<span class="meta-keyword">define</span> NUMBER <span class="number">10</span></span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">3</span>: <span class="keyword">int</span> main(void) &#123;</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">4</span>:    <span class="keyword">int</span> i<span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">5</span>:    <span class="keyword">for</span> (i=<span class="number">0</span><span class="comment">; i&lt;NUMBER; i++) &#123;</span></span><br><span class="line">---&gt;   <span class="number">6</span>:       printf(<span class="string">"goodbye, world!\n"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">7</span>:    &#125;</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">8</span>:    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">9</span>: &#125;</span><br><span class="line">? s</span><br><span class="line">Saving file <span class="string">"hw.c"</span></span><br><span class="line">? q</span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><p>Note that it would have been faster, of course, to have typed in the line number, 6, rather than step down line by line.</p><h4 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h4><p>In the final example, the user starts the editor up, does a print to check that there is no text, inserts a poem from Banjo Paterson, does another print, sets the file name to Banjo.txt, saves the text and quits.<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite</span><br><span class="line">? p</span><br><span class="line">Empty <span class="built_in">file</span></span><br><span class="line">? i</span><br><span class="line">A land <span class="keyword">of</span> sombre, silent hills, <span class="keyword">where</span> mountain cattle go</span><br><span class="line">By twisted tracks, <span class="keyword">on</span> sidelings steep, <span class="keyword">where</span> giant gumtrees grow</span><br><span class="line">And <span class="keyword">the</span> wind replies, <span class="keyword">in</span> <span class="keyword">the</span> river oaks, <span class="keyword">to</span> <span class="keyword">the</span> song <span class="keyword">of</span> <span class="keyword">the</span> stream <span class="keyword">below</span>. </span><br><span class="line">.</span><br><span class="line">? p</span><br><span class="line">Line   <span class="number">1</span>: A land <span class="keyword">of</span> sombre, silent hills, <span class="keyword">where</span> mountain cattle go</span><br><span class="line">Line   <span class="number">2</span>: By twisted tracks, <span class="keyword">on</span> sidelings steep, <span class="keyword">where</span> giant gumtrees grow</span><br><span class="line"><span class="comment">---&gt;   3: And the wind replies, in the river oaks, to the song of the stream below. </span></span><br><span class="line">? f Banjo.txt</span><br><span class="line">Creating <span class="built_in">file</span> <span class="string">"Banjo.txt"</span></span><br><span class="line">? s</span><br><span class="line">Saving <span class="built_in">file</span> <span class="string">"Banjo.txt"</span></span><br><span class="line">? q</span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><h4 id="Example-5"><a href="#Example-5" class="headerlink" title="Example 5"></a>Example 5</h4><p>Note that a quit is not possible if the user has changed the file in any way. For example:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite</span><br><span class="line">? <span class="built_in">i</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">.</span><br><span class="line">? <span class="built_in">s</span></span><br><span class="line"><span class="keyword">No</span> filename. <span class="keyword">Use</span> '-f &lt;name&gt;' command</span><br><span class="line">? <span class="built_in">q</span></span><br><span class="line">Cannot quit <span class="keyword">as</span> <span class="keyword">file</span> has changed. <span class="keyword">Use</span> 'x' to force <span class="keyword">exit</span></span><br><span class="line">? f FRED.txt</span><br><span class="line">Creating <span class="keyword">file</span> <span class="string">"FRED.txt"</span></span><br><span class="line">? <span class="built_in">s</span></span><br><span class="line">Saving <span class="keyword">file</span> <span class="string">"FRED.txt"</span></span><br><span class="line">? <span class="built_in">q</span></span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><p>In this example, the user could have instead used an ‘x’ command to leave the editor without saving.</p><h4 id="Example-6"><a href="#Example-6" class="headerlink" title="Example 6"></a>Example 6</h4><p>You cannot step beyond the last line or the first line in the buffer:<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite Mackellar.txt</span><br><span class="line">Existing <span class="keyword">file</span> <span class="string">"Mackellar.txt"</span></span><br><span class="line">? p</span><br><span class="line"><span class="comment">---&gt;   1: I love a sunburnt country,</span></span><br><span class="line"><span class="literal">Line</span>   <span class="number">2</span>: A land <span class="keyword">of</span> sweeping plains,</span><br><span class="line"><span class="literal">Line</span>   <span class="number">3</span>: <span class="keyword">Of</span> ragged mountain ranges,</span><br><span class="line"><span class="literal">Line</span>   <span class="number">4</span>: <span class="keyword">Of</span> droughts <span class="keyword">and</span> flooding rains.</span><br><span class="line"><span class="literal">Line</span>   <span class="number">5</span>: I love her far horizons,</span><br><span class="line"><span class="literal">Line</span>   <span class="number">6</span>: I love her jewel-sea,</span><br><span class="line"><span class="literal">Line</span>   <span class="number">7</span>: Her beauty <span class="keyword">and</span> her terror -</span><br><span class="line"><span class="literal">Line</span>   <span class="number">8</span>: The wide brown land <span class="keyword">for</span> me!</span><br><span class="line"><span class="literal">Line</span>   <span class="number">9</span>: </span><br><span class="line"><span class="literal">Line</span>  <span class="number">10</span>: <span class="string">"My Country"</span></span><br><span class="line"><span class="literal">Line</span>  <span class="number">11</span>: Poem by Dorothea Mackellar</span><br><span class="line"><span class="literal">Line</span>  <span class="number">12</span>: (<span class="number">1885</span><span class="comment">--1968)</span></span><br><span class="line">? <span class="number">123</span></span><br><span class="line"><span class="literal">Line</span> number does <span class="keyword">not</span> exist: command ignored</span><br><span class="line">? -</span><br><span class="line"><span class="comment">---&gt;   1:I love a sunburnt country,</span></span><br><span class="line">? -</span><br><span class="line"><span class="comment">---&gt;   1:I love a sunburnt country,</span></span><br><span class="line">? -</span><br><span class="line"><span class="comment">---&gt;   1:I love a sunburnt country,</span></span><br><span class="line">? <span class="number">12</span></span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? </span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? +</span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? +</span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? +</span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? q</span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><h3 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h3><p>Do not try to write the whole program at once. Break the development into pieces of functionality and implement the easiest first.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>You may use fixed-length arrays to read a line of text from stdin:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define LINELENGTH  1000  // max length of a line</span></span><br><span class="line"><span class="keyword">and</span> <span class="built_in">to</span> <span class="built_in">read</span> <span class="keyword">a</span> filename <span class="keyword">or</span> <span class="keyword">an</span> editor <span class="keyword">command</span>:</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FNAMELENGTH 100   <span class="comment">// max length of a file name</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMDLENGTH   102   <span class="comment">// max length of a command (e.g.'f' + ' ' + filename)</span></span></span><br></pre></td></tr></table></figure><p>However, you should use the heap to store the lines in the linked list. The nodes in the linked list, each storing one line of text, may be quite simple:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">node</span> &#123;</span></span><br><span class="line">   <span class="keyword">char</span> *data;         <span class="comment">// a line of text</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Line;</span><br></pre></td></tr></table></figure><p>but you may place more data in this data structure if you wish.</p>]]></content>
    
    <summary type="html">
    
      代写实现一个文本编辑器，用单链表实现。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>COMP225-ProcessManager-Scanner</title>
    <link href="https://tk1307993.coding.me/COMP225-ProcessManager-Scanner.html"/>
    <id>https://tk1307993.coding.me/COMP225-ProcessManager-Scanner.html</id>
    <published>2019-12-18T02:33:45.000Z</published>
    <updated>2019-12-18T02:36:15.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The main objectives of this assignment are:</p><ul><li>to practise software project management (Agile);</li><li>to gain experience in using version control systems (git);</li><li>to gain experience in reading code documentation;</li><li>to gain experience in writing code documentation;</li><li>to gain experience in designing unit and integration tests.</li></ul><p>Note This assignment specification aims to provide as complete a description of this assessment task as possible. However, as with any specification, there will always be things we should have said that we have left out and areas in which we could have done a better job of explanation. As a result, you are strongly encouraged to ask any questions of clarification you might have, either by raising them during a lecture or by posting them on the iLearn discussion forum devoted to this assignment.</p><h3 id="The-Specification"><a href="#The-Specification" class="headerlink" title="The Specification"></a>The Specification</h3><p>In Assignment 1, You have developed a small library, in Java. This library contains a class, ProcessManager, that provides an interface to perform simple interactions 1 other programs, typically shell scripts, not necessarily written in Java. The objective of Assignment 2 is to extend the functionalities of the ProcessManager class to more complex interactions.</p><p>For this assignment, you may have to look some concepts up (e.g. regular expressions, prompt) as part of a self learning practice. The emphasis in this task is on:</p><ul><li>understanding the problem to be solved and writing a formal specification;</li><li>understanding what Java libraries offer and how to use them;</li><li>documenting your code so that other developers can use it;</li><li>writing tests for your code;</li><li>developing the software as a Agile project;</li></ul><h3 id="Sprint-4"><a href="#Sprint-4" class="headerlink" title="Sprint 4"></a>Sprint 4</h3><p>Useful Concept for this sprint: Scanner (Java)</p><p>In this sprint, you have to implement a send and an expect method in the</p><p>ProcessManager class (the interfaces of the methods are provided in Program 1).</p><h3 id="Program-1-Expect-method"><a href="#Program-1-Expect-method" class="headerlink" title="Program 1: Expect method"></a>Program 1: Expect method</h3><p>The send method specification is simple:</p><ul><li>the argument is a String s,</li><li>the send method should send s to the process managed by the instance of the ProcessManager.</li><li>it should return true if the string could be sent, or false if a problem occurred while sending s. The expect method specification is as follows:</li><li>the arguments are a timeout (duration) and a prompt which is given as a regular expression (Pattern in Java);</li><li>the method returns:</li><li>the string w if the process managed by the instance of the ProcessManager produces w followed by the prompt on its output channel before the timeout;</li><li>throw a timeout exception otherwise.</li></ul><p>A simple use case of expect in a Java program on a Unix system is:</p><ul><li>you spawn a process that is going to ‘ssh’ to a remote machine.</li><li>the process should return a prompt which is the string “password” (a simple regular expression);</li><li>when you have seen the prompt on the output channel, you can send your password (string) and the next prompt you should expect is the terminal prompt on the target machine.</li><li>if the prompt does not appear on the output channel, an error occured.</li><li>In this sprint, you have to implement the expect and send methods and write some tests to ensure that the methods do what they are supposed to do. In this sprint you may assume that expect is called only once and then the process terminates. You will need to import the following package in the ProcessManager.java file.</li></ul><p>After that you have to make sure that the expect method can be used many times in an instance of a ProcessManager. The previous use case can be extended.</p><p>You have to modify, if needed, your implementations of expect and send to be able to interact with a managed process in a way similar to the scenario described above.</p><p>You also have to write some tests to ensure that your implementation does what it is supposed to do. We strongly encourage you to split the work as follows: one group member is in charge of writing the tests and if needed refine the specification; the other member adapts the implementations of expect and send to make sure the tests pass.</p>]]></content>
    
    <summary type="html">
    
      接着之前的管理进程的library继续实现功能，这次需要实现拉起进程的功能。此外这门课其实考察的不是代码，而是熟悉整个软件开发流程。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CMPT310-Artificial-Intelligence-Survey</title>
    <link href="https://tk1307993.coding.me/CMPT310-Artificial-Intelligence-Survey.html"/>
    <id>https://tk1307993.coding.me/CMPT310-Artificial-Intelligence-Survey.html</id>
    <published>2019-12-15T04:28:40.000Z</published>
    <updated>2019-12-15T04:30:30.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This assignment deals with an offline navigation problem. In the general case, search would be on a directed, labelled graph. Here we make a number of simplifying assumptions. An agent is given an n × n grid, with co-ordinates in the range 0,…,n - 1. For the most part, each position (i, j) is connected to its immediate neighbours; i.e. to (i, j + 1), (i, j − 1), (i + 1, j), and (i − 1, j), provided no index goes outside the grid’s boundary. However, some connections are blocked, and a path will have to go around them. Your program is to take a pair of points, say (s(x), s(y)) and (g(x) , g(y)), and find a shortest path from the first point to the second.</p><p>There are two parts to the assignment. For both parts, assume that you are give the scenario as in the figure: The grid is 18 × 18, with co-ordinates running from (0, 0) to (17, 17). There are two obstacles, and the following co-ordinate points are inaccessible:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">7</span>, <span class="number">5</span>), (<span class="number">7</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">7</span>), (<span class="number">7</span>, <span class="number">8</span>), (<span class="number">7</span>, <span class="number">9</span>) and</span><br><span class="line">(<span class="number">10</span>, <span class="number">13</span>), (<span class="number">11</span>, <span class="number">13</span>), (<span class="number">12</span>, <span class="number">13</span>), (<span class="number">13</span>, <span class="number">13</span>), (<span class="number">14</span>, <span class="number">13</span>), (<span class="number">15</span>, <span class="number">13</span>), (<span class="number">15</span>, <span class="number">12</span>).</span><br></pre></td></tr></table></figure></p><p>So, for example, a path cannot go through (7, 5). You do not need to handle arbitrary board configurations, so it’s ok to hard code the example in your program.</p><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>For this part, ignore the letters “a”-“d” in the figure. Write a program that determines the shortest path between any two points. While you can chose your language for the assignment, it must be one of the ones commonly used in the School – i.e. C/C++, Python, or Java. Justify your choice of search strategy. Make sure that you test you program with start point (0, 0) and goal (17, 17); carry out any other testing that you feel is necessary to illustrate that your program does what it’s supposed to do.</p><p>Your program should output:</p><ul><li>The length of the shortest path.</li><li>The shortest path.</li><li>The total number of nodes placed on the fringe (frontier).</li><li>Anything else you think may be helpful.<h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3>In this part you want to find a path that is not necessarily optimal, but uses a search that is expected to be more efficient. (So here we’re going to trade off optimality for speed.)</li></ul><p>A common scheme to improve search in such a setting is to choose a number of “landmarks”, and precompute the paths between adjacent landmarks. The landmark graph then becomes another, higher-level representation for the search. Then the general search algorithm could be something like:</p><ul><li>Find the shortest path from the start position to the nearest landmark</li><li>Find the shortest path from the goal position to the nearest landmark</li><li>Add in the precomputed path between the two landmarks.</li></ul><p>However, you need to be careful, since it may be more efficient to go directly between the start and goal states, rather than going through any landmarks.</p><p>In the figure, landmarks are at the points labelled “a”, “b”, “c”, and “d”, at (5, 12), (12, 12), (5, 5), and (12, 5). Since there are only 4 landmarks, the shortest path between all landmarks (there are 6 of them) can be precomputed. You can do this by hand, or you can use your program in Part 1 to find them. Again in your testing you should find a path from (0, 0) to (17, 17), and you should output:</p><ul><li>The length of the shortest path.</li><li>The shortest path (although you do not need to output the path between landmarks).</li><li>The number of nodes on the fringe.</li><li>Anything else you think may be helpful.</li></ul><p>Please fully comment and document your programs, and discuss the heuristics used along with any other interesting features of your programs. As well, include a README file that describes how to run your programs.</p>]]></content>
    
    <summary type="html">
    
      代写AI的经典最小路径的问题，算法用A*即可快速求出最小路径。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CSE1100-WordLink</title>
    <link href="https://tk1307993.coding.me/CSE1100-WordLink.html"/>
    <id>https://tk1307993.coding.me/CSE1100-WordLink.html</id>
    <published>2019-12-13T01:30:28.000Z</published>
    <updated>2019-12-13T01:33:22.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The aim of this assignment is to practise analysing a problem in an object-oriented manner, and designing and implementing an object-oriented solution.</p><p>Problem Description<br>WordLink is an English vocabulary game for two players. Players are required to present English words in turns, and the first character of the word must be the same as the last character of the previous word. For example, while player A and player B are playing the game, if A presents the word “grass”, then B has to give a word starting with ‘s’ which is the last character of “grass”. If B presents “sunny”, then A needs to supply a word starting with ‘y’. A word cannot be used twice in one game. The game can continue until one of the players loses. There are four scenarios in which a player loses the game.</p><ol><li>the player cannot find a word to continue the game.</li><li>the player has presented a word which starts with a different character.</li><li>the player has supplied a repeated word.</li><li>the spelling of the word is incorrect<br>In any case, if one player is lost, then the other player wins the game. A number of examples of the game are listed as below.</li></ol><p>Example 1:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Player A) <span class="string">"grass"</span> – (Player <span class="keyword">B) </span><span class="string">"sunny"</span> – (A) <span class="string">"yellow"</span> – (<span class="keyword">B) </span><span class="string">"world"</span> – (A) <span class="string">"dog"</span> – (<span class="keyword">B) </span><span class="string">"grass"</span></span><br><span class="line"><span class="symbol">The</span> game is ended <span class="keyword">and </span>Player A wins.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Player A) <span class="string">"grass"</span> – (Player <span class="keyword">B) </span><span class="string">"sunny"</span> – (A) <span class="string">"yellow"</span> – (<span class="keyword">B) </span><span class="string">"world"</span> – (A) <span class="string">"dog"</span> – (<span class="keyword">B) </span><span class="string">"out"</span></span><br><span class="line"><span class="symbol">The</span> game is ended <span class="keyword">and </span>Player A wins.</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Player A) <span class="string">"grass"</span> – (Player <span class="keyword">B) </span><span class="string">"sunny"</span> – (A) <span class="string">"yellow"</span> – (<span class="keyword">B) </span><span class="string">"world"</span> – (A) <span class="string">"doog"</span></span><br><span class="line"><span class="symbol">The</span> game is ended <span class="keyword">and </span>Player <span class="keyword">B </span>wins.</span><br></pre></td></tr></table></figure></p><p>In this assignment, you are required to build a program that plays WordLink with a kindergarten pupil. The pupil is player A and your program acts as player B.</p><p>A text file ( dictionary.txt ) containing a set of English words will be provided. You can assume that dictionary.txt contains all English words that a kindergarten pupil may know. Words to be used in playing the game must be selected from the set.</p><p>Each game should start by letting player A enter a word. Your program then needs to validate the word (ie. if the word is included in dictionary.txt ). If the word is invalid, then the game is terminated and your program (player B) wins; otherwise your program needs to search the dictionary to find and enter a proper word. Your program will then let player A to type a word to continue the game. This can go back and forth a number of times till either your program or player A wins.</p><h3 id="Functional-and-Non-functional-Requirements"><a href="#Functional-and-Non-functional-Requirements" class="headerlink" title="Functional and Non-functional Requirements"></a>Functional and Non-functional Requirements</h3><p>Your program must satisfy the following functional and non-functional requirements.</p><h3 id="Menu-Driven"><a href="#Menu-Driven" class="headerlink" title="Menu Driven"></a>Menu Driven</h3><p>The program should be menu driven. It displays the menu displayed as Figure 1 at the start, and waits for the player to choose a function.<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WordLink</span><br><span class="line">A. set the difficulty level</span><br><span class="line">B. display the dictionary</span><br><span class="line">C. insert a word to the dictionary</span><br><span class="line">D. play the game</span><br><span class="line">E. <span class="keyword">exit</span></span><br><span class="line">Select a <span class="keyword">function</span> from the menu :</span><br></pre></td></tr></table></figure></p><p>If A is selected, it allows the player to set a difficulty level.<br>If B is selected, it displays all words in the dictionary.<br>If C is selected, it inserts a new word into the dictionary.<br>If D is selected, it starts playing the game.<br>If E is selected, it saves all changes to dictionary.txt, and terminates the program execution.</p><h3 id="Set-the-difficulty-level"><a href="#Set-the-difficulty-level" class="headerlink" title="Set the difficulty level"></a>Set the difficulty level</h3><p>Your program should provide two difficulty levels for the games - level 1 and level 2. For the player, level 2 is more difficult than level 1. This is because all words in dictionary.txt can be selected for playing at level 2, while level 1 games only use those level 1 words in the text file. At the start of your program execution, the difficulty level is 1 by default.</p><p>If the player chooses to set the difficulty level, your program should prompt the player and wait for an integer (1 or 2) input. The difficulty level is then set up.</p><h3 id="Display-the-dictionary"><a href="#Display-the-dictionary" class="headerlink" title="Display the dictionary"></a>Display the dictionary</h3><p>If this function is selected, your program displays on the monitor all words in the dictionary (including those being added). It displays words level by level with lower level at the front. Within each level, words are displayed alphabetically in an ascending order. They should be displayed 7 words in a line and 5 lines for a screen. The player can press any key to display the next screen.</p><h3 id="Insert-a-word-to-the-dictionary"><a href="#Insert-a-word-to-the-dictionary" class="headerlink" title="Insert a word to the dictionary"></a>Insert a word to the dictionary</h3><p>The player can insert a new word into the dictionary. To insert a new word, the player needs to provide the word and the difficulty level. Your program must check to ensure the absence of the word before adding. If the word is existing, then insertion cannot be done and the player should be informed.</p><h3 id="Play-the-game"><a href="#Play-the-game" class="headerlink" title="Play the game"></a>Play the game</h3><p>A game starts by your program prompting the player to enter a word. After a word is entered, your program checks if the word exists in the dictionary. If it isn’t, then the player loses and the game is over. If it is, then your program searches the dictionary and selects the first proper word to continue the game. For instance, if “sad”, “sat”, “saw”, “say”, “sea”, “see”, “she”, “shy”, “sun” are all available for selection, your program chooses the first word which is “sad”.</p><h3 id="The-dictionary"><a href="#The-dictionary" class="headerlink" title="The dictionary"></a>The dictionary</h3><p>After your program is started, it should read from dictionary.txt to create the dictionary. The dictionary in your program must be an array of linked lists shown in Figure 3. Each node represents a word and its level. Words must be sorted alphabetically in an ascending order on the linked list. If a new word is added, then the word with its level must be inserted to the linked list at a proper position.</p><h3 id="Bonus-Task"><a href="#Bonus-Task" class="headerlink" title="Bonus Task"></a>Bonus Task</h3><p>Instead of only being able to play against the computer, add a menu option for a two-player game and implement its functionality.</p><h3 id="Code-Segments"><a href="#Code-Segments" class="headerlink" title="Code Segments"></a>Code Segments</h3><p>Below are code segments that must be included in your program.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DictionaryNode</span> &#123;</span><br><span class="line"><span class="comment">//object of the class represents a single word</span></span><br><span class="line">  <span class="keyword">protected</span> String word; <span class="comment">// word to be stored</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> level; <span class="comment">// level of the word</span></span><br><span class="line">  <span class="keyword">private</span> DictionaryNode next;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DictionaryNode</span>(<span class="params">String _word, <span class="keyword">int</span> _level</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//add your implementation for the constructor</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//add any other attributes or methods if needed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListOfNodes</span> &#123;</span><br><span class="line"><span class="comment">//object of the class represents a linked list of words starting</span></span><br><span class="line"><span class="comment">//with a specific character.</span></span><br><span class="line">  <span class="keyword">private</span> DictionaryNode head = <span class="literal">null</span>; <span class="comment">//head of the linked list</span></span><br><span class="line">  <span class="comment">//add any other attributes or methods if needed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dictionary</span> &#123;</span><br><span class="line"><span class="comment">//object of the class represents the whole dictionery</span></span><br><span class="line">  <span class="keyword">private</span> ListOfNodes[] data;</span><br><span class="line">  <span class="comment">//add any other attributes or methods if needed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Program-Development"><a href="#Program-Development" class="headerlink" title="Program Development"></a>Program Development</h3><p>The following is a suggested breakdown for completing this assignment:</p><h4 id="Task-1-Creating-the-Menu"><a href="#Task-1-Creating-the-Menu" class="headerlink" title="Task 1 Creating the Menu"></a>Task 1 Creating the Menu</h4><p>Create the menu display, collect user’s input and write a method stub for each menu option. Ensure that the correct function is called.</p><h4 id="Task-2-File-Handling"><a href="#Task-2-File-Handling" class="headerlink" title="Task 2 File Handling"></a>Task 2 File Handling</h4><p>In Task 2, you need to consider all issues related to reading the text file (dictionary.txt) to obtain words and their levels. You can simply display contents read from the text file to ensure file reading is correctly conducted.</p><h4 id="Task-3-Defining-Classes"><a href="#Task-3-Defining-Classes" class="headerlink" title="Task 3 Defining Classes"></a>Task 3 Defining Classes</h4><p>In this task, implement major classes for the assignment. This includes the necessary menu and interactions with the player for choosing options etc.</p><h4 id="Task-4-Linked-Lists"><a href="#Task-4-Linked-Lists" class="headerlink" title="Task 4 Linked Lists"></a>Task 4 Linked Lists</h4><p>Implement classes required for linked lists and dictionary. Implement methods (such as insertInOrder, search etc) which are operations associated with the list and any other methods. Thoroughly test your linked list before integrating it into your program.</p>]]></content>
    
    <summary type="html">
    
      代写WordLink这个小游戏。游戏类似成语接龙，只不过换成了使用给定字典中的英文单词接龙。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>CS32555-Star-Car-Rental</title>
    <link href="https://tk1307993.coding.me/CS32555-Star-Car-Rental.html"/>
    <id>https://tk1307993.coding.me/CS32555-Star-Car-Rental.html</id>
    <published>2019-12-11T01:04:23.000Z</published>
    <updated>2019-12-11T01:06:23.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Star Car Rental is an all-Australian, family business and has been since the beginning. It is owned and managed by two generations of the same family. For 50 years it has maintained the low cost formula to provide the clients cheap, but reliable, new hire cars. It has a fleet of around 2,500 new cars available from different offices in different cities. The offices are conveniently located but are set up to keep costs low so it can pass the savings on to the customers. A management group was appointed to develop an up-to-date car rental system and customer service billing system. Your group has won the tender to provide the software component of a computerised car rental and customer service billing system.</p><h3 id="System-Description"><a href="#System-Description" class="headerlink" title="System Description"></a>System Description</h3><p>The customer can get car hire details and request the quotation for a car though phone or internet. After obtaining the quote, the user can proceed with the car booking by supplying credit card details. These details will then be validated and the application will be mailed or emailed after the confirmation of the car rental arrangement to the customer’s chosen mail or email address accordingly. Customers should be able to request a quote for renting a car. To facilitate this they should be able to enter the pick-up and drop-off locations they require, the pick-up and drop-off dates and their age in order to obtain a list of available car types based on those search criteria.</p><p>The search results include details of vehicle types, prices for telephone booking, and prices for online booking. From the displayed search results, the customer should be able to request more detailed information about a particular vehicle type, including vehicle makes and models in the chosen type, the seating capacity, and the luggage capacity. From the displayed search results, the customer should also be able to request the quote for renting a chosen vehicle type. Also from the displayed search results, the customer should also be able to proceed with booking a car. After selecting this option, the customer will be able to check that the details for the rental transaction are correct. Prior to making the booking, the customer will be able to select from a few options including a request for an excess reduction for an additional fee, a protection waiver against cancellation, entry of a promotional code as well as avail special offers.</p><p>The customer will need to be given other important information such as age restrictions, fuel conditions and any other general restrictions, as well as any information on insurance details and pick-up instructions. Still prior to making the booking, the customer will need to enter personal information (such as name, address, telephone number and e-mail address) as well as payment information (credit card details). When processing the booking request, the system will check the completeness and correctness of the customer’s data entry (in particular, the credit card information). After successful validation of entered data, the system will confirm the booking with a rental confirmation number. As an additional confirmation of the booking, an e-mail will be sent to the customer’s e-mail address. To view, change or cancel a car booking, the customer will need the rental number and last name on the booking.</p><p>The company rents cars on basis of car model and standard rate (daily, weekly, weekend, additional kilometre charge). The first 200 km are included in charges for every vehicle. All the cars are four door models with air conditioning and automatic transmission. The categories are:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  Economy (E)       Toyota Yaris <span class="literal">or</span> similar</span><br><span class="line"><span class="number">2.</span>  Star (B)          Toyota Corolla <span class="literal">or</span> similar</span><br><span class="line"><span class="number">3.</span>  Midsize (M)       Holden Cruze <span class="literal">or</span> similar</span><br><span class="line"><span class="number">4.</span>  <span class="literal">Full</span> Size (F)     Toyota Aurion <span class="literal">or</span> similar</span><br><span class="line"><span class="number">5.</span>  Passenger Van(V)  Hyundai iMax <span class="literal">or</span> similar</span><br><span class="line"><span class="number">6.</span>  SUV(S)            Toyota RAV4 <span class="literal">or</span> similar</span><br></pre></td></tr></table></figure></p><p>A weekend is defined from 6:00 PM Friday to 9:00 AM Monday. Any time over one week is computed by prorating the weekly rate.</p><p>Whenever a customer comes to pick up car, he/she has to sign the rental agreement. A rental agreement consists of an agreement number, the customer’s name, type of rate (daily, weekend or weekly), car identification (license number), car price category. It also includes the date, time, and mileage when car leaves and the expected date and time of return. The customer renting the car may not be the driver, and there could be many drivers. For each driver, the following information needs to be captured: full name, birth date, driver’s license number, and state of issue of driver’s license. Information about the third party who may be paying the bill also needs to be captured.</p><p>Returning a car consists of dropping it off. Also the vehicle is rented with a full tank of petrol, and the customer is responsible for refuelling the vehicle. When a vehicle is returned, an amount for petrol is added if the tank is not full. The date, time and mileage when the car is returned are recorded. The car must be inspected for damage. If the collision damage waiver is not accepted at the time of rental, the cost of repair is added to the bill. The car is also inspected to determine the need of minor maintenance. If maintenance is needed, the car is not cleaned up and returned to the rental lot. Instead, it is sent to the shop for needed repairs and maintenance. If the car passes inspection, it is sent to a car wash and then placed on the lot, ready to be rented again.</p><p>A bill is given to the customer if the customer is present. Otherwise, it is mailed to the customer. Often this customer is a third-party payer, such as an insurance company. Payment is made by either cash or credit card. The damage waiver is $8.99 per day. If the customer accepts this, there is no charge for physical damage to the vehicle. If the customer declines this, an insurance policy with a $1000.00 deductible applies to body damage. The deposit is either paid in cash or charged to the credit card. A $1000.00 deposit is collected at time of rental. It is either cash or a charged to the credit card. Late returns incur a penalty. There is a two-hour grace period on a daily and weekend rental. There is a four-hour grace period on a weekly rental. After that another day is charged. A weekly rental turned in early will be computed as a daily rental unless the weekly rate is still cheaper. Star Car Rental also has special offers every week in terms of free vehicle upgrade, great one way deals as well as $50 off on rentals of three weekend days.</p><h3 id="Deadlines-and-deliverables"><a href="#Deadlines-and-deliverables" class="headerlink" title="Deadlines and deliverables"></a>Deadlines and deliverables</h3><p>The items to hand in, the date to hand them in, and the marks for each part, are shown below. The estimated workload for all parts, for each person on the team, is about 36-50 hours. The actual workload may vary by a factor of three due to individual variation.</p><h3 id="Use-Case-Diagram"><a href="#Use-Case-Diagram" class="headerlink" title="Use Case Diagram"></a>Use Case Diagram</h3><p>Identify all the use cases mentioned in the system description and draw a use case diagram, with all use case relationships. It has an expected workload of 8 hours for each group member. There can be approximately 15-20 use cases selected from this system description.</p><h3 id="Use-Case-Descriptions"><a href="#Use-Case-Descriptions" class="headerlink" title="Use Case Descriptions"></a>Use Case Descriptions</h3><p>Describe 3 use cases using the format described in the lecture notes, showing all details for each use case; describe any included or extended tasks that are required by the stated use cases. It has an expected workload of 3 hours for each group member. Each use case should require at most 3 pages of text, and some may take less than one page.</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>Design a design class diagram which shows, for each class in the system, the class name and attributes, plus the class associations, multiplicities and operations. Include any inheritance relations. It has an expected workload of 10 hours for each group member.</p><h3 id="Sequence-Diagram"><a href="#Sequence-Diagram" class="headerlink" title="Sequence Diagram"></a>Sequence Diagram</h3><p>Draw 3 sequence diagram which show all messages (method calls) between classes, including any parameters, and any value returned from a method call. It shows all selection, iteration, and object creation and / or destruction. It has an expected workload of 5 hours for each group member.</p><h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><p>Write Java code for 3 methods (getters, setters and constructors will not be considered as methods for Assignment marking) of any one class or different classes in the class diagram. It has an expected workload of 10 hours for each group member.</p><h3 id="Dialog-Design"><a href="#Dialog-Design" class="headerlink" title="Dialog Design"></a>Dialog Design</h3><p>Each group has to design dialog for only three use cases. The dialog design consists of two parts:</p><ul><li>A set of screen layouts, that define the data input to and displayed on each screen.</li><li>The transitions between the screens. The diagram shows a set of screen icons, the transitions between them, and the user action that creates each transition.</li></ul><h3 id="Entity-Relationship-Diagram"><a href="#Entity-Relationship-Diagram" class="headerlink" title="Entity Relationship Diagram"></a>Entity Relationship Diagram</h3><p>Draw an Entity-Relationship diagram, which shows appropriate entities, relationships and cardinalities. It has an expected workload of 5 hour for each group member.</p>]]></content>
    
    <summary type="html">
    
      代写一个Java的租车应用程序大作业，最终程序需要带GUI界面，工作量不小。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="MVC" scheme="https://tk1307993.coding.me/tags/MVC/"/>
    
      <category term="Swing" scheme="https://tk1307993.coding.me/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>INFO1105-Prefix-Map</title>
    <link href="https://tk1307993.coding.me/INFO1105-Prefix-Map.html"/>
    <id>https://tk1307993.coding.me/INFO1105-Prefix-Map.html</id>
    <published>2019-12-05T11:28:36.000Z</published>
    <updated>2019-12-05T11:31:28.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>In this assignment each student (individually) will write a class that could form part of a collection library. The intended domain of application is in bioinformatics, where parts of someone’s DNA can be represented as strings where each character is one of A, C, G and T; for example “GATTACA”. The collection consists of keys, each of which is a string that represents a DNA sequence, and each key has an associated value (which is a string that gives some textual information about the sequence, such as its discoverer).</p><p>The code you write must implement a particular interface that we have defined, called PrefixMap. The code that you write must be built according to a particular data structure, called a Trie, that we describe below in more detail.</p><h3 id="The-PrefixMap-interface"><a href="#The-PrefixMap-interface" class="headerlink" title="The PrefixMap interface"></a>The PrefixMap interface</h3><p>The PrefixMap interface has some methods inspired by the usual Map ADT, with some additional methods used to group and select keys based on their prefixes. The interface restricts the set of keys so that each is a string built from the alphabet of four characters A, C, G and T.<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface PrefixMap &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * How many keys are stored in the map</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Get the value corresponding to the key (or null if the key is not found)</span></span><br><span class="line"><span class="comment">   * if the key contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the key is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Insert the value into the data structure, using the given key. If the key</span></span><br><span class="line"><span class="comment">   * already existed, replace and return the old value (otherwise return null)</span></span><br><span class="line"><span class="comment">   * if the key contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the key or value is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span> put(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Remove the value corresponding to the given key from the data structure,</span></span><br><span class="line"><span class="comment">   * if it exists. Return the old value, or null if no value was found.</span></span><br><span class="line"><span class="comment">   * if the key contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the key is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span> remove(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * return the number of keys which start with the given prefix if the prefix</span></span><br><span class="line"><span class="comment">   * contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the prefix is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> countKeysMatchingPrefix(<span class="keyword">String</span> prefix);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * return the collection of keys which start with the given prefix if the</span></span><br><span class="line"><span class="comment">   * prefix contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the prefix is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> List &lt;<span class="keyword">String</span>&gt; getKeysMatchingPrefix(<span class="keyword">String</span> prefix);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Return the number of unique prefixes</span></span><br><span class="line"><span class="comment">   * e.g. if the tree stores keys GAT, GATTC, GATTACA, this method will return 8</span></span><br><span class="line"><span class="comment">   * because the prefixes are G, GA, GAT, GATT, GATTC, GATTA, GATTAC, GATTACA</span></span><br><span class="line"><span class="comment">   * In an uncompressed trie, this is the number of trie nodes, excluding the root</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> countPrefixes();</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Return the sum of the lengths of all keys</span></span><br><span class="line"><span class="comment">   * e.g. if the tree stores keys GAT, GATTC, GATTACA, this method will return 15</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> sumKeyLengths();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Trie-Data-Structure"><a href="#Trie-Data-Structure" class="headerlink" title="Trie Data Structure"></a>Trie Data Structure</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>A Trie (also sometimes called a Prefix Tree), is a type of search tree where instead of storing the keys in each node, instead the path to reach that node defines the key. In data sets where keys often share a common prefix this can be an efficient way to store them, as those common prefixes are only represented once instead of many times. The Trie structure was described in lecture in week 10. In this assignment you will implement a variation of the Trie structure for the case where the keys are made up of only 4 possible characters (A, C, G and T) and the values are arbitrary strings. Thus each Node can have only 4 possible children (one where the next character is A, one where the next character is C, etc), and so we can define a Node class where there is an array of length 4 to hold the references to children Nodes. When we do this, we do not store the character in the Node, instead the character is found by looking at which child of the parent this Node is. Each Node can also hold a value, if the sequence of characters used to reach that position is one of the keys.</p><p>The diagram below shows the data structure storing the following key-value pairs: (G, Suzy), (GAC, Bill), (GAT, Kate), (CG, Fred), (CT, Jane). Notice how the path to the node containing Kate goes from the root to its the third child (corresponding to the character G), then from that node to its first child (corresponding to A), and from that node to its fourth child (T).</p><p>In this assignment you will write the code for a class Assignment which implements the PrefixMap interface, using a Prefix Tree. The full skeleton code for the assignment is<br>available for download on the resources section of Ed.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>You must produce a class called Assignment that is suitable to be in a collection library. It must implement the PrefixMap interface exactly as we have defined that. Your class should contain an appropriate private nested class Node that represents the Node objects in the Trie.</p><p>You are advised to use recursion when writing the methods, but this is not a requirement.</p><h4 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h4><p>You must write a short report:</p><ul><li><p>For each of the interface methods, describe the algorithm used, state the running time of this algorithm in big-Oh notation, and give a brief argument justifying that this cost is correct. You should express the costs in terms of n (the number of key-value pairs in the collection), m (the length in characters of the argument key or prefix), and k (the number of keys that start with the given prefix).</p></li><li><p>Describe how you tested your code. List the test cases you wrote, stating briefly the purpose of each test.</p></li></ul><h4 id="Analysis-of-runtime"><a href="#Analysis-of-runtime" class="headerlink" title="Analysis of runtime"></a>Analysis of runtime</h4><p>This is based on your report. Note that you can gain these marks even if you don’t write any code, as long as you analyse algorithms that you describe which operate on the Trie.</p><ul><li>Pass level: You state the correct big-Oh for majority of public methods, when each is implemented from the algorithm as you described it.</li><li>Distinction level: As for Pass, and also you provide convincing and valid arguments in most cases.</li></ul>]]></content>
    
    <summary type="html">
    
      代写数据结构里面Prefix Map，也就是Trie的实现。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>COMP3023-Kakuro</title>
    <link href="https://tk1307993.coding.me/COMP3023-Kakuro.html"/>
    <id>https://tk1307993.coding.me/COMP3023-Kakuro.html</id>
    <published>2019-12-01T02:19:11.000Z</published>
    <updated>2019-12-01T02:22:56.150Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Submission-details"><a href="#Submission-details" class="headerlink" title="Submission details"></a>Submission details</h3><p>This is a small group project. While the best group size is 4, I will allow groups of 2 or 4, though a group of 4 will be expected to do more to get a high mark. You should attempt to form the groups yourself – please do so by the end of Week 9 of semester and let me know your group members. I will, over the weekend before Monday of Week 10, organise those not in a group into groups, and send emails out to the different group members.</p><p>Eventual assignment submission will be by groups. Ensure only one person does the submission of the assignment per group. The organisation of the marking is difficult enough with groups without having multiple submissions per group to look out for.</p><p>You should ensure all group member’s names and email addresses are part the code files and document files that you submit.</p><p>You should submit:</p><ol><li><p>The Qt project and all associated files. This must include the .pro project file, any .ui form files, and all the .h and .cpp files. Zip these up together.</p></li><li><p>A document stating clearly the features that you have implemented, along with a few screen shots to illustrate these features. If a feature is partially implemented or have problems, please indicate this.</p></li><li><p>Any example Kakuro input files that your program can read.</p></li><li><p>A short document (I don’t want to use the term ‘user manual’ as some of you will interpret this as a formal document) that describes how to use the program. Don’t make this a big part of what you do – enough so that I can easily start up and know how to play with your application. The screen shots you used in the ‘features implemented’ document above can likely be re-used here.</p></li><li><p>For a bonus of up to 5% of the assignment marks (but can’t take your mark above 100%), a video (produced by your phone for example) where you demonstrate the features of your working assignment.</p></li></ol><p>Your assignment will be marked primarily on what works, rather than the details of the code. This is not a User Interface class, so for the advanced features that you implement, while a nice user interface may receive a slightly higher mark (within the grade ranges), you are just starting with using Qt, and using the UI components well is something that develops with experience.</p><h3 id="Overview-of-Kakuro"><a href="#Overview-of-Kakuro" class="headerlink" title="Overview of Kakuro"></a>Overview of Kakuro</h3><p>Kakuro puzzles are similar to crosswords, but instead of letters the digits (from 1 to 9) are used. Instead of clues going across and down, you are given the sum of the values across or down. There is the constraint that the digits 1 to 9 can only be used once in any ‘word’ going across or down. The board’s squares need to be filled in with these digits in order to sum up to the specified numbers. Below is an example Kakuro problem with a 13x13 grid (effectively a 12x12 problem as you need an extra row at the top, and a column at the left, in which to put ‘down’ or ‘across’ clues.</p><p>At any point you can use the down or across clues to deduce some values in the puzzle, and then use these values to help deduce other values.</p><p>For example, in the bottom middle there is the section shown to the right. For the column with sum of 4, the two values have to be 1 and 3 (as 2 and 2 not allowed). The 3 has to be at the top, as if it is at the bottom, then as the bottom ‘across’ adds to 8, the left value will be 5. But then the ‘down’ that sums to 16 does not have a solution, as you can’t have 5+ (value from 1 to 9) that sums to 16. This means that you have to have 3, 1 in the ‘down’ that sums to 4, and 9, 7 in the column that adds to 16: as shown on the<br>left.</p><p>You can try the puzzle online at <a href="http://www.kakuros.com" target="_blank" rel="noopener">www.kakuros.com</a>, which provides an interactive web page to help you play Kakuro.</p><h3 id="The-Assignment"><a href="#The-Assignment" class="headerlink" title="The Assignment"></a>The Assignment</h3><p>In this assignment I would like you to use Qt to develop a program with a graphical user interface to help the user solve Kakuro problems.</p><p>A minimal program that will give you at least a P1 grade should:</p><p>Display the grid for a Kakuro problem – you program should at least display a 13x13 grid, but you can allow the program to display a range of sizes – smaller and possibly larger.</p><ol><li>Allow the user to initialise the Kakuro puzzle. This could be done, for example, by:<ol><li>Reading the information from a text file. Possible formats for the text file will be discussed in a lecture.</li><li>Selecting a cell with the mouse and setting up the problem interactively.</li><li>Generating a random problem (this is one of the possible extensions for a higher grade)</li></ol></li><li>Allow the user to select a grid location and ask that the possible values be determined and displayed in the grid location. Note that if there is only one possible value, you should not make this the grid location’s final value – the user needs to do this (but see extensions below).</li><li>Allow the user to select a value from the possible values displayed in a grid location as the final value. When this occurs, the other grid locations where you have asked for the possible values to be displayed should all be updated to use this additional information.<br>For particularly good implementations of 3 and 4 you can receive a small number of additional marks.</li></ol><p>For a higher grade you need to do more. Below are some possible extensions you can do to your ‘P1’ level program, along with some examples of sensible combinations of extensions that will get you a HD grade.</p><h3 id="Possible-Extensions-to-obtain-a-higher-grade"><a href="#Possible-Extensions-to-obtain-a-higher-grade" class="headerlink" title="Possible Extensions to obtain a higher grade"></a>Possible Extensions to obtain a higher grade</h3><ol><li><p>Highlight cells where there is only one possible value. How you highlight the cell is up to you.</p></li><li><p>Provide an option to calculate and display the possible values for every grid location where the value is not yet specified.</p></li><li><p>Determine if a solution can’t be found using the current values set in the grid - for example by conflicting requirements for down or across values or sums. For example, a ‘down’ clue may require a particular grid location to have a value of (say) 2, but the ‘across’ set of values already has a 2 in it. This means that a wrong choice was made by the user previously.</p></li><li><p>Keep track of changes to the grid values, and allow the user to ‘back-track’ if they have made an error.</p></li><li><p>Keep track of the operations requested by the user to the grid locations, and allow the user to ‘replay’ the way the solution was found (for example, using time delay between ‘steps’, or to use a key or button to ‘step’ forward in the replay. The way you do this is up to you. You will get additional marks for an easy to follow replay of the steps taken.</p></li><li><p>If you do option 5 above, try to automate the finding of a solution. This is not trivial as sometimes you need to consider the possible values of multiple grid positions to determine the correct value of a grid position. You may be able to do a partial automation - do what you can and then let the user set a grid position’s value before continuing on. You should be able to step through the automated solution. This is a hard extension - you can get a good mark for this part for a reasonable attempt.</p></li><li><p>Save a puzzle at any point, along with the information about the steps taken, so that can reload the puzzle and either backtrack or continue from the current set of values.</p></li><li><p>Generate random Kakuro puzzles - generate a random (but reasonable) puzzle ‘boards’, then generate a random ‘solution’ (fill the board consistently with digits 1 to 9), and then generate the appropriate down and across clues.</p></li></ol><p>You can obtain a HD by implementing:</p><ul><li>Extensions 1, 2, 3, 4, or:</li><li>Extensions 4, 5, 6, or:</li><li>Extensions 4, 5, 7, or:</li><li>Extension 1 and 8, or:</li><li>Suggesting an alternative set of extensions to the course coordinator and obtaining approval for this being the goal for achieving a HD.</li></ul><p>Generally, you will need 3 or 4 extensions to get a HD, depending on how hard the extensions are. For reasonably sized extensions, each working extension takes you up a grade (C, D, HD). Some easy extensions (such as 1 and 2 above) are too small to take you up a whole grade, so in the first suggested set of extensions above, 1 and 2 together take you to a Credit grade. Some extensions are difficult, and a reasonable attempt will get you the additional grade. An example of this is extension 6.</p>]]></content>
    
    <summary type="html">
    
      代写一个叫Kakuro的游戏，GUI部分需要用QT来实现。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="QT" scheme="https://tk1307993.coding.me/tags/QT/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Java-Iterator</title>
    <link href="https://tk1307993.coding.me/Java-Iterator.html"/>
    <id>https://tk1307993.coding.me/Java-Iterator.html</id>
    <published>2019-11-28T00:41:33.000Z</published>
    <updated>2019-11-28T00:42:48.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Assignment-6"><a href="#Assignment-6" class="headerlink" title="Assignment 6"></a>Assignment 6</h1><p>In this assignment, you will create three classes that implement the <code>Iterator&lt;&gt;</code> interface in specialized ways.</p><p>Read through the code provided. You should recognize the interfaces Position, Driver, and Vehicle and their implementations PositionImpl, DriverImpl, and VehicleImpl from Assignment 3. These classes are complete and you should not have to modify them in any way to complete this assignment.</p><h1 id="Novice-10-points"><a href="#Novice-10-points" class="headerlink" title="Novice (10 points)"></a>Novice (10 points)</h1><p>Create a class called <code>ProximityIterator</code> that implements the interface <code>Iterator&lt;Driver&gt;</code>. The constructor for the class should be declared as:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ProximityIterator(Iterable&lt;Driver&gt; driver_pool, <span class="keyword">Position</span> client_position, <span class="built_in">int</span> proximity_limit)</span><br></pre></td></tr></table></figure><p>A ProximityIterator should iterate through all of the Driver objects in the collection that have a Manhattan distance to the provided <code>client_position</code> that is less than or equal to <code>proximity_limit</code>. If <code>next()</code> is called but there is no next eligible driver, throw a <code>NoSuchElementException</code>.</p><p>Tips:</p><ul><li>In your constructor, use the <code>iterator</code> method of the provided driver_pool to create an iterator for all of the Driver objects in the collection. Store this iterator in an instance field.</li><li>Use an instance field to store the next driver that matches the proximity limit. Initialize this to null in your constructor</li><li>To implement hasNext(), first see if you already found the next appropriate driver by checking your next driver field (i.e., testing to see if it is not null). If you already found the next driver, just return true. If not, retrieve drivers from your driver pool iterator until you either find the next appropriate driver or you run out of drivers. If you find an appropriate driver, store it in your next driver instance field and return true. If the pool runs out of drivers, then return false.</li><li>To implement next(), first call hasNext(). If false, throw a NoSuchElementException. If true, then you know that the next eligible driver must be in your next driver instance field. Copy this to a local variable. Reset your next driver field to be null so that you don’t keep returning the same driver. Now return the value of the local variable that you copied the next driver to.</li></ul><h1 id="Adept-5-points"><a href="#Adept-5-points" class="headerlink" title="Adept (5 points)"></a>Adept (5 points)</h1><p>Create a class called <code>ExpandingProximityIterator</code> that implements the interface <code>Iterator&lt;Driver&gt;</code>. The constructor for ths class should be declared as:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ExpandingProximityIterator(Iterable&lt;Driver&gt; driver_pool, <span class="keyword">Position</span> client_position, <span class="built_in">int</span> expansion_step)</span><br></pre></td></tr></table></figure><p>An ExpandingProximityIterator should first iterate through all of the Driver objects in the collect that have a Manhattan distance to the provided <code>client_position</code> that is less than or equal to 1. After all such drivers have been exhausted, the iterator should start at the beginning of the pool and iterate through drivers that have a distance that is greater than one but less than or equal to 1+expansion_step. After all of these drivers have been exhausted, the iterator should start at the beginning of the pool and iterate through drivers that have a distance that is greater then 1+expansion_step but less than or equal to 1+2*expansion_step. After these have been exhausted, go through drivers that are greater than 1+2*expansion_step but less than or equal to 1+3*expansion_step. And so on and so forth until there are no drivers available whatsoever.</p><p>Tips:</p><ul><li>You will need to encapsulate <code>driver_pool</code> as an instance field because you will need to create a new iterator for the pool each time you run out of drivers for a particular “ring” size. </li><li>You will need to detect when you have run out of drivers completely so that hasNext() returns false eventually. There are a couple of different ways to do this. <ul><li>One way is to maintain a boolean flag that is set whenever a driver is encountered that is outside of the current ring while looking for the next driver. Then when you have run out of drivers at the current ring size, you can check this flag to make sure that at least one driver is still outside of the current ring and so you should keep expanding. Be sure to reset the flag each time you expand.</li><li>Another way to do this is to keep a count of the number of times next() has been successfully called. When this count is equal to the size of the driver pool, you know that every driver has been found at some ring size already and that expanding the ring won’t help (i.e., there are no more drivers).</li></ul></li></ul><h1 id="Jedi-5-points"><a href="#Jedi-5-points" class="headerlink" title="Jedi (5 points)"></a>Jedi (5 points)</h1><p>Create a class called <code>SnakeOrderAcrossPoolsIterator</code> that implements the interface <code>Iterator&lt;Driver&gt;</code>. The constructor for this class should be declared as:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public SnakeOrderAcrossPoolsIterator(<span class="built_in">List</span>&lt;<span class="built_in">Iterable</span>&lt;Driver&gt;&gt; driver_pools)</span><br></pre></td></tr></table></figure><p>The constructor to this class is given a List of iterable driver collections. This version of the iterator should retrieve the next driver from each pool in turn in “snake” order. Snake order means first going from first to last and then reversing and going from last to first. For example, let’s say there are 4 iterable collections in the driver_pools list. The first driver retrieved should come from pool 0, followed by the next driver from pool 1, then pool 2, then pool 3, then pool 3 again, then pool 2, then pool 1, then pool 0, then pool 0 again, then pool 1, and so on and so forth. The pools may have a different number of drivers in them. Once a pool runs out of drivers, it is simply skipped over. This iterator will run out of drivers once all of the pools in the list have run out.</p><p>Tips:</p><ul><li>In your constructor, use the list of driver pools provided to create a corresponding list of driver iterators for each pool and store this as an instance field. Keep track of an index into this list for which pool iterator should be used next.</li></ul>]]></content>
    
    <summary type="html">
    
      练习实现Java的迭代器
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundanmental" scheme="https://tk1307993.coding.me/tags/Fundanmental/"/>
    
  </entry>
  
  <entry>
    <title>CS177-Lab-Prep-6</title>
    <link href="https://tk1307993.coding.me/CS177-Lab-Prep-6.html"/>
    <id>https://tk1307993.coding.me/CS177-Lab-Prep-6.html</id>
    <published>2019-11-27T10:10:26.000Z</published>
    <updated>2019-11-27T10:12:55.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-Description"><a href="#Assignment-Description" class="headerlink" title="Assignment Description:"></a>Assignment Description:</h3><p>In this assignment you will write and submit the labprep6.py program. Complete and submit the file by 11:59<br>pm on the night before your lab to receive full credit.</p><h3 id="Python-Graphics-Library"><a href="#Python-Graphics-Library" class="headerlink" title="Python Graphics Library:"></a>Python Graphics Library:</h3><p>Carefully review the Graphics chapter in the Zelle text (Ch 4) covering this topic and the Python Graphics<br>library documentation found at: <a href="http://mcsp.wartburg.edu/zelle/python/graphics/graphics.pdf" target="_blank" rel="noopener">http://mcsp.wartburg.edu/zelle/python/graphics/graphics.pdf</a> before starting Lab<br>Prep 6. If you haven’t already, download the Graphics module graphics.py from Blackboard. Remember that it<br>must be in the same folder as labprep6.py</p><h3 id="Steps-For-This-Assignment"><a href="#Steps-For-This-Assignment" class="headerlink" title="Steps For This Assignment:"></a>Steps For This Assignment:</h3><ol><li>Setup your Python file labprep6.py with an appropriate comments header</li><li>Organize labprep6.py using comments for each block of planned code</li><li>In each block, write the necessary Python code to complete the task</li><li>Save, test, then upload your completed labprep6.py Python program to Blackboard</li></ol><h4 id="TO-DO-1-Setup-Your-Python-Program-File-labprep6-py"><a href="#TO-DO-1-Setup-Your-Python-Program-File-labprep6-py" class="headerlink" title="TO DO #1: Setup Your Python Program File labprep6.py"></a>TO DO #1: Setup Your Python Program File labprep6.py</h4><p>In Python, the # sign indicates a comment, which documents and organizes your code. Python does not<br>execute these commented lines; they are used to make the program easier to understand. In the Python IDLE<br>editor, open a new program window. At the top of the file, create a program header by typing in the following<br>text:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CS 177 – labprep6.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;insert your name, and Purdue ID here&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Following Coding Standards and Guidelines</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;insert a description of the program here&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><h4 id="TO-DO-2-Organize-labprep6-py-with-pseudo-code-comments"><a href="#TO-DO-2-Organize-labprep6-py-with-pseudo-code-comments" class="headerlink" title="TO DO #2: Organize labprep6.py with pseudo code comments"></a>TO DO #2: Organize labprep6.py with pseudo code comments</h4><p>Plan and comment your program. By now, you should have had enough<br>practice to writing good, descriptive pseudo code comments for each<br>section and function.</p><h4 id="TO-DO-3-The-main-Function"><a href="#TO-DO-3-The-main-Function" class="headerlink" title="TO DO #3: The main() Function"></a>TO DO #3: The main() Function</h4><p>Write a Python main() function that takes no arguments and returns no<br>values. This function should create a Graphics Window, of size 500x500<br>pixels. Set the background to light grey. Create a red Square (Rectangle<br>with equal sides measuring 30) in the center of the Graphics Window.<br>An example is shown in Figure 1.</p><h4 id="TO-DO-4-Animating-the-square’s-movement"><a href="#TO-DO-4-Animating-the-square’s-movement" class="headerlink" title="TO DO #4: Animating the square’s movement"></a>TO DO #4: Animating the square’s movement</h4><p>Edit your main() function, so that it now waits for the user to click anywhere within the Graphics window.<br>Once a mouse click is detected, the red square should move from its current location to the location of the<br>mouse click.</p><p>NOTE: To earn full credit, the square should not disappear and reappear to move across the screen – it must<br>appear to move smoothly across the window to the mouse click location. An example of this animation is<br>shown with the Lab Prep 6 assignment on Blackboard.</p><p>HINT: It could be helpful to write a separate function that animates the square which will be called<br>within the main() function after a mouse click.</p><p>The user will be able to click in the Window to move the square five (5) times. After the square reaches the fifth<br>mouse click location, display a Text object in the center of the Window: “Click to Exit”. One additional<br>click closes the Graphics window and ends the program without error messages.</p><h4 id="Save-and-Submit-your-Completed-labprep6-py-File-on-Blackboard"><a href="#Save-and-Submit-your-Completed-labprep6-py-File-on-Blackboard" class="headerlink" title="Save and Submit your Completed labprep6.py File on Blackboard:"></a>Save and Submit your Completed labprep6.py File on Blackboard:</h4><p>Save your program with the file name labprep6.py, and submit it by 11:59 pm on the night before lab.</p>]]></content>
    
    <summary type="html">
    
      使用Python Graphics绘图库完成作业
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Graphics" scheme="https://tk1307993.coding.me/tags/Graphics/"/>
    
      <category term="Fundanmental" scheme="https://tk1307993.coding.me/tags/Fundanmental/"/>
    
  </entry>
  
  <entry>
    <title>IFB104-Print-Your-Own-Periodical</title>
    <link href="https://tk1307993.coding.me/IFB104-Print-Your-Own-Periodical.html"/>
    <id>https://tk1307993.coding.me/IFB104-Print-Your-Own-Periodical.html</id>
    <published>2019-11-26T03:33:32.000Z</published>
    <updated>2019-11-26T03:36:28.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>Hardcopy periodicals such as newspapers, magazines, newsletters, etc. are all in decline as people increasingly turn to online media. Nonetheless, there is still a need for people to access regularly-updated information in an easy-to-read format. Here you will develop a program that produces a customised periodical in HTML format, using data downloaded from the World-Wide Web. The program will have a Graphical User Interface that allows the user to control production of the periodical, which can then be viewed in a standard web browser. Most importantly, your publication will comprise up-to-date data sourced from online “feeds” that are updated on a regular basis. To complete this assignment you will need to: (a) download web pages in Python and use regular expressions to extract particular elements from them, (b) create an HTML file containing the extracted elements, and (c) use Tkinter to provide a simple Graphical User Interface.</p><h3 id="Illustrative-Example"><a href="#Illustrative-Example" class="headerlink" title="Illustrative Example"></a>Illustrative Example</h3><p>For the purposes of this task you have a totally free choice of what kind of periodical to produce. It could be:</p><ul><li>a newspaper</li><li>a current affairs magazine</li><li>a fashion/lifestyle magazine</li><li>a newsletter for online gamers</li><li>a sports journal</li><li>a science and technology review</li><li>etc.</li></ul><p>However, whatever theme you choose, you must be able to find at least four different online web pages that contain regularly-updated stories or articles in different categories under the overall theme. Each such story must contain a heading, a photograph, some text and a publication date. A good source for such data is Rich Site Summary (RSS) web-feed documents. The appendix below lists some such sites, but you are encouraged to find your own of personal interest.</p><p>To demonstrate the idea, we will publish our own newspaper, using data extracted from News Limited’s web site. Our demonstration program allows users to select from several categories, National News, Sports, World News, Business News, Entertainment and Technology. The program then downloads relevant data from the Web and uses it to produce an HTML document which can be read in a standard web browser.</p><p>The screenshot below shows our example solution’s GUI when it first starts.</p><p>The user is invited to select which categories of information they want included in their newspaper. In this case this is done by selecting check buttons, but other solutions are possible. Below the user has selected four news categories of interest.</p><p>When ready the user then presses the button to start “printing” the newspaper (i.e., to create an HTML file containing its contents). The system downloads current data from the web site and generates the file. The user can follow the “printing” process’s progress in the small text window.</p><p>As well as printing the latest top news items in each of the four categories, the system also generates a “masthead” which identifies the periodical.</p><p>Once the file has been created the user can open it in their preferred web browser. Alternatively, pressing the “Read” button in the GUI above will open the file in the host operating system’s default browser.</p><p>The generated document contains the masthead and the current top story in each of the selected categories. It is shown overleaf as viewed in the Firefox browser.</p><p>Above you can see the masthead with the name of the periodical, The Daily Planet in this case, and an image indicating the nature of its contents. (Our fictional newspaper’s slogan and editor are also shown, but these features are optional.)</p><p>Scrolling down in the HTML document shows the current top news item in each of the four selected categories when the program was run. Three of these are shown below, as they were when this demonstration was run. (Some of the images downloaded at this time were small “thumbnails”, hence their blurry appearance when enlarged.)</p><p>Notice that each top news item displayed above contains:</p><ol><li>the category of story;</li><li>the URL where the original data was found;</li><li>the story’s title (headline);</li><li>a photo illustrating the story;</li><li>a short summary of the story; and</li><li>the date and time the story appeared online.</li></ol><p>Most importantly, items 3 to 6 are all extracted “live” from the online web document indicated. This was done by downloading the HTML source and using regular expressions to find the necessary elements needed to construct our own version of the story. The first part of the HTML code generated by our Python program is shown below (as displayed in the Firefox browser).</p><p>Although not intended for human consumption, the generated HTML code is nonetheless laid out neatly, and with comments indicating the purpose of each part.</p><p>To compose our HTML document, Rich Site Summary (RSS) web-feed files are downloaded from the web site. RSS documents are XML files specifically intended to be machine-readable. They have a simple structure that makes it reasonably easy to extract their elements. An example of such a web document as it appears when examined in a web broswer is shown below.</p><p>This was was the source of the data used to produce our National News story shown above. To compose the corresponding page for our newspaper we extracted the latest story’s headline, story text, date and the address of the associated JPEG image. This data was then integrated into our HTML code.</p><p>We also discovered that sometimes the downloaded text contained unusual characters that are not handled properly in Python strings, most notably “smart” quotes, so we replaced these with plain characters before “printing” our newspaper.</p><h3 id="Requirements-and-marking-guide"><a href="#Requirements-and-marking-guide" class="headerlink" title="Requirements and marking guide"></a>Requirements and marking guide</h3><p>To complete this task you are required to develop an application in Python similar to that above, using the provided publisher.py template file as your starting point. Your solution must support at least the following features.</p><p>Generating a masthead<br>Your program must be able to generate an HTML file, publication.html, which begins with a ‘masthead’ identifying the nature of your periodical. When viewed in a web browser, the masthead part of the document must contain at least the following elements:</p><ul><li>The name of the periodical.</li><li>An image evocative of the periodical’s theme.</li></ul><p>The image must be sourced from online (you cannot attach image files to your solution). Since it will never change, the URL for this particular image can be “hardwired” in your Python code. The HTML source generated by your Python program must be laid out neatly.</p><h3 id="Generating-four-stories"><a href="#Generating-four-stories" class="headerlink" title="Generating four stories"></a>Generating four stories</h3><p>Your Python program must be capable of generating at least four distinct “stories” as part of your periodical. Each such story must be derived from a different online web page, and must represent the latest story in a particular category at the time when the program runs. When viewed in a web browser, each story must contain at least the following elements:</p><ul><li>the category of story,</li><li>the URL where the original data was found,</li><li>the story’s title (headline),</li><li>an image illustrating the story,</li><li>a short summary of the story, and</li><li>the date and time the story appeared online.</li></ul><p>The last four of these items must all be extracted from the online document and must all belong together (i.e., you can’t have an image from one story and the headline from another). Each of the elements must be extracted from the original document separately. It is not acceptable to simply copy large chunks of the original document’s source code. The HTML source code generated by your Python program must be laid out neatly.</p><p>The precise visual layout, colour and style of the story elements is up to you and is determined by the design of your generated HTML code. The periodical must be easy to read. No HTML markup tags or other odd characters should appear in any of the text displayed to the user.</p><p>Data on the web changes frequently, so your solution must continue to work even after the web documents you use have been updated. For this reason it is unacceptable to “hardwire” your solution to the particular text and images appearing on the web on a particular day. Instead you will need to use text searching functions and regular expressions to actively find the text and images in the document, regardless of any updates that may have occurred since you wrote your program.</p><h3 id="Code-quality-and-presentation"><a href="#Code-quality-and-presentation" class="headerlink" title="Code quality and presentation"></a>Code quality and presentation</h3><p>Your Python program code must be presented in a professional manner. See the coding guidelines in the IFB104 Code Presentation Guide (on Blackboard under Assessment) for suggestions on how to achieve this. In particular, each significant code segment must be clearly commented to say what it does, e.g., “Create the masthead”, “Extract the first headline from the web page’s source code”, etc.</p><h3 id="Extra-feature"><a href="#Extra-feature" class="headerlink" title="Extra feature"></a>Extra feature</h3><p>Part B of this assignment will require you to make a ‘last-minute extension’ to your solution. The instructions for Part B will not be released until just before the final deadline for Assignment 2.</p><p>You can add other features if you wish, as long as you meet these basic requirements. For instance, in our example above we included a button in the GUI which opened the generated HTML document in the default web browser. We also supported more than four story categories.</p><p>You must complete the task using only basic Python features and the modules already imported into the provided template. In particular, you may not import any local image files. All displayed images and story text must be downloaded from online sources each time your program is run.</p><p>However, your solution is not required to follow precisely our example shown above. Instead you are strongly encouraged to be creative in the your choices of stories to display, the design of your Graphical User Interface, and the design of your periodical.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业比较冷门，用Python来写前端的Web页面，GUI部分需要用Tkinter库来实现。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>CPSC217-Climograph</title>
    <link href="https://tk1307993.coding.me/CPSC217-Climograph.html"/>
    <id>https://tk1307993.coding.me/CPSC217-Climograph.html</id>
    <published>2019-11-24T09:07:22.000Z</published>
    <updated>2019-11-24T09:10:01.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>A climograph is a visual representation of the climate for a location. it shows temperature data using a red line, and precipitation data using blue bars. One temperature point and one precipitation bar are plotted for each month of the year. An example climograph, using climate data from Victoria, BC, is shown below.</p><p>Your program will draw a climograph using data entered by the user. It will begin by drawing the graph components such as the axes, month names and labels. Then it will read 12 precipitation values, one for each month from January to December, and draw the appropriate bars. Your program will conclude by reading 12 temperature values for January through to December and plotting the temperature data.</p><p>Each temperature value will be plotted asa red dot. A red line will connect the dot for each month to the dot for the previous month (except for January).</p><h3 id="Additional-Requirements"><a href="#Additional-Requirements" class="headerlink" title="Additional Requirements"></a>Additional Requirements</h3><p>You must make appropriate use of loops. While it is acceptable to use a long series of statements to place the month names on the graph, the numeric labels for temperatures and precipitation must be displayed using a loop. You must also use loops to read input from the user and draw the precipitation bars / temperature lines. An assignment that uses 24 distinct input statements to read the precipitation and temperature data will receive a grade of D or less, even if everything works perfectly.</p><p>Your program must leave appropriate gaps between the bars.</p><p>Your graph must include small tick marks next to the temperature and rainfall numeric labels, as shown in the sample output.</p><p>Your program should use a temperature scale that ranges from -20 to +20 degrees Celsius, and a precipitation scale that ranges from 0 to 200 millimeters. If you receive a value outside of these ranges you should still plot it - it will just appear above or below the axes.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>You will probably find the dots for the temperature data easier to plot than the bars for the precipitation data. As such, you might want to tackle the dots for temperature data first, even though it is entered after the precipitation data.</p><p>You will probably find the precipitation data easier to plot than the lines for the temperature data. As such, you might want to tackle the precipitation data before trying to draw the lines for the temperature data.</p><p>The temperature data spacing will work out nicely if you represent 1 degree Celsius by 10 pixels.</p><p>The precipitation data spacing will work out nicely if you represent 1 millimeter of precipitation by 2 pixels.</p><p>The spacing will work out nicely if you allocate 50 pixels to each month of the year.</p><p>Every time you run your program you will need to enter 24 data values. You can automate this by using a feature known as l/O redirection, which will allow your program to read the values from a file instead of from the keyboard. For example, to use the values from the file named Calgary.txt instead of reading values from the keyboard, enter the command:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">A3n2</span><span class="selector-class">.py</span> &lt; <span class="selector-tag">Calgary</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>The details of how I/O redirection works aren’t important within the scope of this course. but your ability to use it by following the pattern above will save you a significant amount of typing. Several sample data sets saved in the correct format are available on the course website. Feel free to get as much help as you need on I/O redirection from the Us or instructor.</p><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><p>This assignment will be graded on a combination of functionality and style. A base grade will be determined from the general level of functionality of the program (Does it draw the axes and labels successfully? Does it plot the precipitation data correctly? Does it plot the temperature data correctly?). The base grade will be recorded as a mark out of 12.</p><p>Style will be graded on a subtractive scale from 0 to -3. For example, an assignment which receives a base grade of 12 (A), but has several stylistic problems resulting in a -2 adjustment will receive an overall grade of 10 (3+). Fractional marks will be rounded to the closest integer.</p><h3 id="Individual-Work"><a href="#Individual-Work" class="headerlink" title="Individual Work"></a>Individual Work</h3><p>All assignments in this course are to be completed individually. Students are advised to read the guidelines for avoiding plagiarism located on the course website. Students are also advised that electronic tools may be used to detect plagiarism.</p><h3 id="late-Penalty"><a href="#late-Penalty" class="headerlink" title="late Penalty"></a>late Penalty</h3><p>Late assignments will not be accepted.</p><h3 id="Submission-Instructions"><a href="#Submission-Instructions" class="headerlink" title="Submission Instructions"></a>Submission Instructions</h3><p>Your program must be submitted both on paper and electronically. Paper submissions, consisting of a printed copy of your .py file, should be deposited in the appropriate assignment drop box on the second floor of the math sciences building. Your electronic submission should be submitted to the Assignment 2 drop box in DZL.</p>]]></content>
    
    <summary type="html">
    
      Python的画图类型作业，用给的SimpleGraphics.py库来实现，这个库基于tkinter，但是相比前者要精简许多。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CS3350-Postfix-Expression-Evaluator</title>
    <link href="https://tk1307993.coding.me/CS3350-Postfix-Expression-Evaluator.html"/>
    <id>https://tk1307993.coding.me/CS3350-Postfix-Expression-Evaluator.html</id>
    <published>2019-11-21T15:11:46.000Z</published>
    <updated>2019-11-21T15:14:37.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this homework, you will create and turn in your second program on BGUnix. Please see the documentation below for instructions on obtaining and configuring a BGUnix account.</p><p>Once you have an account, SSH in and join the class by issuing the command:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="class"><span class="keyword">class</span> -<span class="title">join</span> <span class="title">cs3350</span></span></span><br></pre></td></tr></table></figure></p><p>This should create a directory in your home directory named ‘cs3350’. All your work this semester must occur inside this directory (do not create a subdirectory unless the homework specifically requests one). Any required files will be automatically collected from this directory at the due date/time for the assignment!</p><h3 id="Program-Details"><a href="#Program-Details" class="headerlink" title="Program Details"></a>Program Details</h3><p>In this program, you will implement a postfix expression evaluator. See the book and slides for the concrete algorithm you need to implement. You must use stacks (I provide LinkedStack.h/LinkedStack.cpp/StackInterface.h/Node.h/Node.cpp files in the class lib folder!).</p><p>You must provide a hw3.cpp driver file that contains the implementation of the algorithm and a main method that instantiates runs the algorithm. The driver program should:</p><ul><li>Loops, asking the user to provide either a number (can be more than 1 digit!) or an operator (+ - / *)</li><li>Stops the loop when -1 is entered (do not add -1 to the expression!)</li><li>Evaluates the given postfix expression</li><li>Displays the final result of evaluating the postfix expression (on a line by itself - this should be the last line displayed by your program!)</li></ul><h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><p>Your code should include proper documentation/comments where appropriate. A portion of the grade is attributed directly to documentation (see the grading rubric provided on Canvas).</p><p>Functions should be proceeded by a comment block documenting the function’s purpose.</p><p>Blocks of code should contain comments describing what that block is contributing to the overall solution.</p><h3 id="What-to-Turn-In"><a href="#What-to-Turn-In" class="headerlink" title="What to Turn In"></a>What to Turn In</h3><p>The automated turn-in collection script will save these files from your class directory:</p><ul><li>hw3.cpp</li></ul><p>The script will assume the following command line to compile your homework (your code must work with this exact command line!):<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">g</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">-</span><span class="comment">std=c</span><span class="literal">+</span><span class="literal">+</span><span class="comment">11</span> <span class="literal">-</span><span class="comment">Ilib</span> <span class="comment">hw3</span><span class="string">.</span><span class="comment">cpp</span></span><br></pre></td></tr></table></figure></p><p>This assumes that LinkedStack.<em>/StackInterface.h/Node.</em> are in the lib/ directory.</p>]]></content>
    
    <summary type="html">
    
      用Stack代写一个postfix expression evaluator，将数字压入stack，读到expression时弹出即可，属于比较常规的作业。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
</feed>
