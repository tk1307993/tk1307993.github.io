<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-04-09T12:59:08.194Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java代写：COMS227-Yahtzee-Part1</title>
    <link href="https://tk1307993.coding.me/COMS227-Yahtzee-Part1.html"/>
    <id>https://tk1307993.coding.me/COMS227-Yahtzee-Part1.html</id>
    <published>2019-04-09T12:52:28.000Z</published>
    <updated>2019-04-09T12:59:08.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>For this assignment you will implement a number of classes for an implementation of a dice game based on the game Yahtzee. The purposes of this assignment are:</p><ul><li>To use interfaces and inheritance in a realistic way</li><li>To give you a chance to make some design decisions related to inheritance</li><li>To give you more practice using arrays and ArrayLists</li></ul><h3 id="Summary-of-tasks"><a href="#Summary-of-tasks" class="headerlink" title="Summary of tasks"></a>Summary of tasks</h3><p>You will implement the following classes:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">YahtzeeGame</span></span><br><span class="line"><span class="attribute">Hand</span></span><br></pre></td></tr></table></figure></p><p>plus, at a minimum, the following eight classes, all of which directly or indirectly implement the Category interface:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">AllButOneOfAKind</span></span><br><span class="line"><span class="attribute">AllButTwoOfAKind</span></span><br><span class="line"><span class="attribute">AllOfAKind</span></span><br><span class="line"><span class="attribute">Chance</span></span><br><span class="line"><span class="attribute">CountOccurrences</span></span><br><span class="line"><span class="attribute">FullHouse</span></span><br><span class="line"><span class="attribute">LargeStraight</span></span><br><span class="line"><span class="attribute">SmallStraight</span></span><br></pre></td></tr></table></figure></p><p>All of your code goes in package hw3 . In addition to the classes listed above, you will implement whatever additional classes you decide are necessary in order to exploit inheritance to facilitate code reuse. See the discussion of scoring categories below for more information.</p><p>The exact definition of each of the eight category classes listed above can be found by reading the class javadoc.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Yahtzee is normally played with five six-sided dice and a scorecard. One round consists of rolling the dice up to three times, and then filling one of the categories on the scorecard with a score. The score depends on both the criteria for the category and the actual dice values, and the player will normally choose an unfilled category so as to maximize the resulting score.</p><p>In our version of the game, the number of dice, the maximum value on the dice (i.e., the number of faces), the max number of rolls per round, and the types of categories on the scorecard, will all be configurable.</p><p>If you are not at all familiar with the game, don’t worry, it is not too complicated. Take a look at the Wikipedia page for an overview, <a href="https://en.wikipedia.org/wiki/Yahtzee" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Yahtzee</a></p><p>Note that our version of the game does not include several features described on Wikipedia or in the traditional versions of the game. In particular, we do not distinguish the “upper section” and “lower section” categories, there is no bonus for the “upper section”, there is no special bonus for a second Yahtzee, and there are no jokers.</p><p>The two key abstractions in the design are hands and scoring categories.</p><h3 id="Hands"><a href="#Hands" class="headerlink" title="Hands"></a>Hands</h3><p>A hand, represented by the Hand class that you will implement, is a basically a list of integers representing the current states of all the dice (in the traditional game there would be 5 numbers with possible values 1 through 6). However, the dice are partitioned into two lists: available dice and fixed dice. Initially, all dice are available. When the dice are “rolled”, random values in the appropriate range are generated for the available dice only; the fixed values are not modified. If the maximum number of rolls has not yet been reached, the player can choose to “keep” some of the current available dice values, which means they are moved to the fixed list so they won’t be modified by the next roll. Likewise, the player can choose to “free” any of the fixed values, so they will be re-rolled. Note that in this design, an individual die isn’t represented by a special type of object; a die value is just an integer. All methods that return arrays containing dice values must return the values in ascending order.</p><p>After the maximum number of rolls is reached, all dice are automatically moved to the fixed list and the hand can no longer be modified. A new hand must be created for the next round.</p><p>See the javadoc for details. Also note that the client normally obtains a new Hand using the method createNewHand in the YahtzeeGame class, not by calling the constructor directly. (You can see how this works by reading at the doOneTurn() method of the sample UI.)</p><p>Hand example. Suppose we display a dice group as a string by listing first the available dice and then the fixed dice in parentheses. For example, in a game with 5 dice, after the first roll we might see the values such as this:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> ()</span><br></pre></td></tr></table></figure></p><p>Depending on which scoring categories you need to fill, you might decide to keep 2, 3, and 4 (perhaps in the hope of completing a straight). Now you have<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">6</span> (<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>On the next roll, the 6 and the other 3 are then replaced by random values, but the 2, 3, and 4 you selected remain fixed. If (for example) you now roll a 2 and a 5, you would have<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">5</span> (<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>At this point you could choose to keep the 5 (to make a small straight, maybe hoping the next roll will give you a large straight). Now you have<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span>(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>In the traditional game, you get a maximum of three rolls; in that case if you (for example) rolled a 4, you’d end up with<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>That is, when you reach the maximum number of rolls, all dice are automatically fixed. Once all dice are fixed, we say the hand is complete. At this point in the game, the player chooses one of the scoring categories and uses the completed hand to fill that category.</p><h3 id="Scoring-categories"><a href="#Scoring-categories" class="headerlink" title="Scoring categories"></a>Scoring categories</h3><p>A scoring category represents one row of the score sheet. A category object stores the actual score for that category along with the hand that was used to fill the category. A given category object also contains the algorithms needed to a) determine whether a given hand satisfies the criteria defined for the category (e.g., is it a straight, or three-of-a-kind, or whatever), and b) determine what the potential score would be for a given hand, if it were used to fill that category.</p><p>There are many different possible categories, each with its own particular algorithms. For example, the traditional game has a three-of-a-kind category: a hand satisfies the category if it contains any three numbers that are the same, and it is scored by summing the values of all the dice. The traditional game also has a “large straight” category: a hand satisfies the category if it has 5 consecutive values, and it always receives a fixed score of 40.</p><p>This is where polymorphism becomes useful. The client using this code (e.g., think of the client as the text-based UI provided in the sample code) does not care about the details of what the categories are or how each category calculates its score. The client just needs to be able to invoke methods on a category to find out whether a given dice group satisfies it, what the score would be, and to inform the category when it has been selected to be filled by a given hand.</p>]]></content>
    
    <summary type="html">
    
      作业要求实现一个Yahtzee，即快艇骰子游戏。这个游戏需要了解游戏规则，考察的知识点是继承的运用。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C#代写：CIS340-Campus-Cafeteria</title>
    <link href="https://tk1307993.coding.me/CIS340-Campus-Cafeteria.html"/>
    <id>https://tk1307993.coding.me/CIS340-Campus-Cafeteria.html</id>
    <published>2019-04-07T11:48:38.000Z</published>
    <updated>2019-04-07T10:35:13.144Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Design a Campus Cafeteria application prototype complete with UML design documentation. Your application must match your delivered UML diagrams (all UML must be completed using the Astah UML tool). Your application shall take advantage of the C# programming language to provide a way to rapidly develop a working prototype.</p><p>The application will allow customers (both students &amp; non-students) to purchase meals. Non-students will pay with a card and students will have the option to use their meal plan or pay with a card (in the event they are out of meal credits). A customer will select the meal type and quantity of meals then pay. Students will need to verify their identity to use meal plan credits or select to pay with card. As an incentive, Students who maintain a GPA over 3.5 are given 1 free meal. The Campus is on a tight budget so a limited number of meals will be served for each meal type.</p><p>Your application will utilize an object-oriented design. The delivered project must contain a class called Menu, Customer, and Meal. Certain classes will only be used as a class while others will require objects to be created. The application must have the following requirements:</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ul><li>Menu class (rename program class or create a new class as shown in tutorials. “Program” will not be accepted as a Class name) doesn’t need any attributes. All data items should be declared within the Main method or other methods that are inside your Menu class code block.</li><li>Menu class will perform the following actions (can be methods)</li><li>Customer objects will contain data (all data will be instance variables)</li><li>Customer objects will perform all manipulations on the above customer data</li><li>Meal class/objects will contain data (this can be a class with only static members or used to create objects with instance members. It will depend on how you decide to design the application</li><li>Meal class/objects will perform all manipulations on the above meal data</li></ul><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p>While completing the application, document your application using UML. Create a Class Diagram for your application showing objects, attributes, methods, relationships, relationship text, and multiplicities. In the class diagram make sure to identify the following for all objects:</p><ul><li>Attributes and their data type</li><li>Methods with their defined return type and passing parameters</li><li>For all passing parameters make sure to have the parameter name and data type</li><li>Create relationships based on your code (if a class calls a method in another class there is a relationship).</li></ul>]]></content>
    
    <summary type="html">
    
      这次作业是用C#代写一个校园自助餐厅的应用，实现基本的菜单处理逻辑。UI按照所给的example，用简单的命令行即可。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1300-Working-with-real-data</title>
    <link href="https://tk1307993.coding.me/CSCI1300-Working-with-real-data.html"/>
    <id>https://tk1307993.coding.me/CSCI1300-Working-with-real-data.html</id>
    <published>2019-04-04T11:48:38.000Z</published>
    <updated>2019-04-04T09:21:20.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment you will have the opportunity to apply what you’ve learned this semester about programming to an actual problem and actual data. For this assignment we will use social media data collected during the 2014 Carlton Complex Wildfire in Eastern Washington State. This data set was part of my dissertation research on the integration of public social media communication into emergency response.</p><p>The development of information and communication technologies (ICTs) has changed how members of the public communicate and share information with each other during crisis and disaster events. Researchers in the field of crisis informatics look at social media communications for insight into how these technologies are reshaping the information space surrounding a disaster and provide new ways for the public to participate in both sharing of information and response. My research focuses on the challenges faced by emergency responders as they work to leverage these channels as part of their emergency communications plan and also the solutions being developed to support the monitoring of an often complex and unwieldy information space as events unfold.<br>I work with an innovative group of emergency responders who are part of the social media in emergency management community (SMEM) that have pioneered a new form of digital volunteerism within the emergency response community called a Virtual Operational Support Team (VOST). Members of VOST teams have a mix of social media communication skills and training in public information work and emergency response protocols. During a disaster, a VOST team extends the resources of the emergency response team on the ground coordinating public social media communications and gathering relevant situational awareness information for the incident management team.</p><p>This dataset was taken from the 2014 Carlton Complex Wildfire. The fire started on July 14th, when a lightning storm moved through the Methow Valley in Eastern Washington State. On July 17th, adverse weather conditions caused the fire to grow explosively overnight from approximately forty-nine thousand acres to over a hundred and fifty thousand acres. This rate of fire growth is somewhat unprecedented and the fires burned through the towns of Pateros and Twisp resulting in large-scale evacuations and the destruction of over 300 homes. The fire also destroyed critical infrastructure resulting in widespread power and cellular outages in many place for over a week. The data set for this fire starts on July 17th when Portland NIMO, a federal Type I team, was assigned to the fire and the NIMO VOST was activated until July 27th when the team stood down. The fire ultimately grew to 256 thousand acres making it the largest wildfire in Washington State history (eclipsed by the 2015 Okanogan Complex in the same area a year later).<br>As a researcher on CU’s Project EPIC, my role on the VOST was to provide analytical support to the public information team on the ground using data collected through the Twitter API. I developed Python scripts that expanded the links to embedded content and massaged the data in useful ways for analysis in Tableau, a data visualization tool. At the end of each day, I worked on a comprehensive summary that was forwarded to the public information team as a reference for the morning briefing the following day.</p><p>Twitter is a particularly interesting platform for analysis during a disaster because the Twitter stream can show you what is relevant in the moment across a wide variety of sources. The ability to retweet information reinforces its currency and acts as recommendation to others in a Twitterer’s network or following the conversation. In addition, the ability to embed links and media provides visibility to what is being shared across multiple social media platforms simultaneously.</p><h3 id="Data-Set-Description"><a href="#Data-Set-Description" class="headerlink" title="Data Set Description"></a>Data Set Description</h3><p>The full dataset for this fire contains over 24 thousand tweets and related information. I hava created multiple data extract files from this dataset so that you can work with information on a more manageable scale.</p><p>As part of the analysis, we coded the most commonly occurring sources of information (Twitter accounts and URL domains) using the following values:</p><h3 id="Tweet-extracts"><a href="#Tweet-extracts" class="headerlink" title="Tweet extracts"></a>Tweet extracts</h3><p>Each row in the tweet extracts is an individual tweet and contains the following columns:</p><h3 id="A-final-message"><a href="#A-final-message" class="headerlink" title="A final message"></a>A final message</h3><p>After the user selects No, and you exit your loop, you need to print another message to the user. In this message, briefly explain the easiest, hardest, and most and least enjoyable portions of this project. Then, exit the program.</p><h2 id="Implementation-Details-Technical-Requirements"><a href="#Implementation-Details-Technical-Requirements" class="headerlink" title="Implementation Details/ Technical Requirements"></a>Implementation Details/ Technical Requirements</h2><h3 id="Store-data-from-the-files-in-an-object"><a href="#Store-data-from-the-files-in-an-object" class="headerlink" title="Store data from the files in an object"></a>Store data from the files in an object</h3><p>Your program needs to have at least one class. A technical requirement of this project is that you create a class to support the functionality of the program. The class(es) you create will depend on the problem and data you are working with. For instance, if you are working with individual tweets you may need a Tweet class. If you are working geocoded tweets you may also want a Geocode class that stores the latitude /longitude data.</p><p>The first thing your program needs to do, even before displaying the welcome message, is input the data from the txt files. Data should be read in from the files and stored in the appropriate variable in your class to support what your program does. You should structure your program to read in all data only one time.</p><h3 id="Other-requirements"><a href="#Other-requirements" class="headerlink" title="Other requirements:"></a>Other requirements:</h3><ol><li>All variables in your class need to be private and accessed through public methods. For example, if one of the class variables is latitude then you will need getLatitude() and setLatitude() methods.</li><li>You need at least three objects. For example if you create a class Tweet, then you need at least three instances of Tweet in your program.</li><li>You are welcome to generate new data files to support your program’s functionality. For example, if you are working with the URL domains extract, you may want to limit your analysis to domains that occur at least 25 times. The data in these sub-extracts is sorted by count, so you can import the .csv file into Excel and delete the rows that fall below 25. You can also write a program or talk to us about the specific slice of data you are interested in.</li><li>If you store data in an array, you can create an array that is larger than you need and leave some of it unused. Look at the arrays in the AppleFarmer class for an example of what you might do for this assignment. You will need to keep track of how much ofthe array is used. The technique for doing this is the same as using the Curren tDay variable in AppleFarmer.</li><li>The easiest way to read the .csv files is to use getline() for each line in the file and then use stringstream to parse the line. 6. There are examples of how to do both of these things in notes provided on the Moodle.</li><li>When you submit your program, include all data files you used in your project directory.</li></ol>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业是处理一个真实的数据集，并按照需求所给的信息展示数据。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CSCI141-Blackout-Math</title>
    <link href="https://tk1307993.coding.me/CSCI141-Blackout-Math.html"/>
    <id>https://tk1307993.coding.me/CSCI141-Blackout-Math.html</id>
    <published>2019-03-29T13:37:17.000Z</published>
    <updated>2019-03-29T10:38:13.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ploblem"><a href="#Ploblem" class="headerlink" title="Ploblem"></a>Ploblem</h3><p>Blackout Math is a puzzle in which you are given an incorrect arithmetic equation, such as this one:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">288 </span>/ <span class="number">24</span> × <span class="number">6</span> = <span class="number">18</span> × <span class="number">13</span> × <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>To solve the puzzle, figure out which two squares must be blacked out to create a correct equation. Blacked out squares are simply skipped over when reading the new equation. Note that you can choose to black out an operation — for example, if you black out the last multiplication sign, the right side would read 18 x 138. You are not allowed to black out the equal sign!<br>In this particular instance of the puzzle, the answer is as follows:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">288 </span>/ <span class="number">4</span> × <span class="number">6</span> = <span class="number">18</span> × <span class="number">3</span> × <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>as both sides of the equation now evaluate to 432.<br>Here is another puzzle for you to try:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">168 </span>/ <span class="number">24</span> + <span class="number">8</span> = <span class="number">11</span> × <span class="number">3</span> - <span class="number">16</span></span><br></pre></td></tr></table></figure></p><p>In this project, you will develop a program that reads in Blackout Math puzzles from a file and determines their solutions.</p><h3 id="Building-your-solution"><a href="#Building-your-solution" class="headerlink" title="Building your solution"></a>Building your solution</h3><p>Once your solution is complete, it will work as follows:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Open up <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">of</span> Blackout Math puzzles</span><br><span class="line">  For <span class="keyword">each</span> puzzle:</span><br><span class="line">    For <span class="keyword">each</span> possible pair <span class="keyword">of</span> <span class="keyword">characters</span> <span class="keyword">in</span> <span class="keyword">the</span> puzzle</span><br><span class="line">      Determine <span class="keyword">the</span> <span class="keyword">string</span> that results <span class="built_in">from</span> deleting those <span class="keyword">characters</span></span><br><span class="line">      Compute <span class="keyword">the</span> <span class="built_in">value</span> <span class="keyword">of</span> <span class="keyword">each</span> side <span class="keyword">of</span> <span class="keyword">the</span> equation</span><br><span class="line">      If <span class="keyword">the</span> <span class="literal">two</span> sides have <span class="keyword">the</span> same <span class="built_in">value</span>, success!</span><br></pre></td></tr></table></figure></p><p>However, it will be easier to build your solution from the inside out — that is, first create a function that computes the value of one side of one equation, then use that to build a checker for a single puzzle, and so on. Here we will give you some hints for how to complete this process.</p><h3 id="Computing-the-value-of-an-expression"><a href="#Computing-the-value-of-an-expression" class="headerlink" title="Computing the value of an expression"></a>Computing the value of an expression</h3><p>Consider the following string: 5 × 2 + 3 – going from left to right, your program will have to check whether each character represents a digit or an operation, and keep a running total of the current value of the expression. Also note that when you come to a number, you have to remember what the last character was – knowing only that the current character is a 3 only helps if you know that you were supposed to add it to the previous value of the expression! The Python function isdigit will be helpful for this process. To get started, write a skeleton of a compute function that takes a string and goes through it character by character, converting the numbers to ints and printing “add”, “subtract”, “multiply” or “divide” for each operation as they are encountered.</p><p>Now, consider the expression 5 + 2 × 3 – if we parse this string from left to right (as we would usually process it in a loop), we will get 21, but according to the standard order of operations, we should do the multiplication first, then the addition, to get 11. In effect, when going left-to-right, we need to delay the addition until the multiplication has been completed. One way to do that is to save the addition on a stack, then pop it off the stack and execute it once the multiplication has finished. You also need to save the numbers themselves on a separate stack until they are needed. Of course, if you have multiple additions or subtractions in a row, then you need to only save the last one, so when you see a second addition or subtraction, you need to compute the result of the first before saving the result and the most recent operation.</p><p>If we have parentheses as well, this also can be easily handled with a stack, again essentially forcing the contents of the parentheses to happen first.</p><p>The pseudocode for handling order-of-operations (for just the four standard operations plus parentheses) using a pair of stacks is as follows:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Determine what <span class="keyword">the</span> next <span class="keyword">item</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">string</span> is, call this X</span><br><span class="line">If X is <span class="keyword">a</span> <span class="built_in">number</span>, push <span class="keyword">it</span> onto <span class="keyword">the</span> <span class="built_in">number</span> stack</span><br><span class="line">If X is <span class="keyword">any</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="literal">four</span> arithmetic operations:</span><br><span class="line">  While <span class="keyword">the</span> top <span class="keyword">of</span> <span class="keyword">the</span> operation stack is equal <span class="keyword">or</span> higher precedence <span class="built_in">to</span> X:</span><br><span class="line">    Pop <span class="keyword">the</span> top <span class="literal">two</span> numbers <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">number</span> stack <span class="keyword">and</span> <span class="literal">one</span> operation <span class="built_in">from</span> <span class="keyword">the</span> operation stack</span><br><span class="line">    Apply <span class="keyword">the</span> operation that you just popped, push <span class="keyword">the</span> <span class="built_in">result</span> onto <span class="keyword">the</span> <span class="built_in">number</span> stack</span><br><span class="line">  Push X onto <span class="keyword">the</span> operation stack</span><br><span class="line">If X is (, push <span class="keyword">it</span> onto <span class="keyword">the</span> operation stack</span><br><span class="line">If X is ),</span><br><span class="line">  While <span class="keyword">the</span> top <span class="keyword">of</span> <span class="keyword">the</span> operation stack is <span class="keyword">not</span> <span class="string">'('</span>:</span><br><span class="line">    Pop <span class="keyword">the</span> top <span class="literal">two</span> numbers <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">number</span> stack <span class="keyword">and</span> <span class="keyword">the</span> top operation <span class="built_in">from</span> <span class="keyword">the</span> operation stack</span><br><span class="line">    Apply <span class="keyword">the</span> operation that you just popped, push <span class="keyword">the</span> <span class="built_in">result</span> onto <span class="keyword">the</span> <span class="built_in">number</span> stack</span><br><span class="line">    Pop off <span class="keyword">the</span> (</span><br><span class="line">Once you reach <span class="keyword">the</span> <span class="function"><span class="keyword">end</span> <span class="title">of</span> <span class="title">the</span> <span class="title">input</span>, <span class="title">while</span> <span class="title">the</span> <span class="title">stacks</span> <span class="title">are</span> <span class="title">not</span> <span class="title">empty</span>:</span></span><br><span class="line">  Pop <span class="keyword">the</span> top <span class="literal">two</span> numbers <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">number</span> stack <span class="keyword">and</span> <span class="keyword">the</span> top operation <span class="built_in">from</span> <span class="keyword">the</span> operation stack</span><br><span class="line">  Apply <span class="keyword">the</span> operation that you just popped, push <span class="keyword">the</span> <span class="built_in">result</span> onto <span class="keyword">the</span> <span class="built_in">number</span> stack</span><br></pre></td></tr></table></figure></p><p>To get a feel for how and why this works, trace this pseudocode for the input 2 + 5 × (6 - 3) - 6 by noting what is in each stack after reading each character.</p><p>Finally, consider the string 5 × 12 + 3 – in this case, when you come to a number, you cannot count on it being immediately used. Instead, you have to continue building up the value of the current number until you read an operation, then you can incorporate that into the expression. Figure out what happens when the 1 is read by your function, then the 2, and finally the +. Modify your compute function to handle the case of multi-digit numbers. As above, trace the correct execution on paper and then test the code on a few different cases.</p><h3 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h3><p>In many cases in this course, we do not worry about handling errors in input as they are not critical to the problem at hand. However, in this case, we can expect “errors” to occur when parsing. This is because we will be deleting arbitrary characters from the puzzle. For example, when trying to solve our first example 288 / 24 × 6=18 × 13 × 8 we might try deleting the 6, leaving a left side of 288 / 24×. We know right away that this is not a possible solution to the puzzle, but our compute function must still handle this gracefully. Luckily, the stack-based algorithm will handle most of these cases easily – if we get to the end of the input and have anything other than one number and no operators left, there was erroneous input. Other error cases that you may discover can also be dealt with via the parsing algorithm itself.</p><h3 id="Testing-whether-an-equation-is-correct"><a href="#Testing-whether-an-equation-is-correct" class="headerlink" title="Testing whether an equation is correct"></a>Testing whether an equation is correct</h3><p>Once we can evaluate a single expression, it is simple to compute whether two sides of an equation are equal. You may find the Python functions find (with slicing) or split useful to locate the equal sign in your equation (if it still has one!). Write a function called test that takes in a string and uses your compute function to decide if the string represents the correct solution to a Blackout Math puzzle.</p><h3 id="Computing-all-possible-pairs-of-characters"><a href="#Computing-all-possible-pairs-of-characters" class="headerlink" title="Computing all possible pairs of characters"></a>Computing all possible pairs of characters</h3><p>To solve a Blackout Math puzzle, you have to find the two squares to black out, or in our case, two characters to remove from the string. For a computer, the simplest thing to do is simply to test all possible pairs of characters. Note that although the two examples in this writeup are the same length, not all Blackout Math puzzles will be.</p><p>Write a function solve that takes in a full Blackout Math puzzle as a string and loops through all possible pairs of characters. For each pair of characters, create the string that results when those two characters are removed, and use your evaluate function to see which of those represents the solution! This is a good time to make sure that your error handling works, as this loop will send many malformed equations to your evaluate function – consider how compute will report errors, and how evaluate will handle them. Remember, that the two characters that are removed COULD be on the same side of the equals sign.</p><h3 id="Using-a-binary-tree-to-compute-all-possible-solutions"><a href="#Using-a-binary-tree-to-compute-all-possible-solutions" class="headerlink" title="Using a binary tree to compute all possible solutions"></a>Using a binary tree to compute all possible solutions</h3><p>Now that you have done this for all possible combinations of two blacked out characters, you need to now do it for any arbitrary number of blacked out characters.</p><p>To do this you are required to use a binary tree. The tree will be structured such that all leaf nodes of the tree are all possible combinations of blacked out characters.</p><p>The left child of the tree will be the equation with the current character blacked out. The right child will be the equation with the current character not blacked out.</p><p>To construct the tree you will consider one character at a time in the equation. You will make two children, one with the current value blacked out and one with the value not blacked out. Each level of the tree will represent all possible combinations of a new character character being added to the statement.</p><p>Your function for making the tree will be recursive in nature, as recursion is the easiest way to process a binary tree.<br>Psuedocode for making the tree:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def makeTree( equation, <span class="built_in">value</span> ):</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">the</span> equation is <span class="literal">empty</span>, we have reached <span class="keyword">the</span> leaves <span class="keyword">of</span> this branch:</span><br><span class="line">    <span class="built_in">set</span> left <span class="keyword">and</span> <span class="literal">right</span> children <span class="built_in">to</span> None</span><br><span class="line">  otherwise:</span><br><span class="line">    we need <span class="built_in">to</span> <span class="built_in">create</span> <span class="keyword">the</span> left <span class="keyword">and</span> <span class="literal">right</span> children:</span><br><span class="line">    - left will be <span class="keyword">a</span> recursive call <span class="built_in">to</span> make tree <span class="keyword">with</span>:</span><br><span class="line">      - <span class="keyword">the</span> <span class="keyword">first</span> <span class="keyword">character</span> removed <span class="built_in">from</span> <span class="keyword">the</span> equation</span><br><span class="line">      - <span class="keyword">the</span> same <span class="built_in">value</span></span><br><span class="line">    - <span class="literal">right</span> will be <span class="keyword">a</span> recursive call <span class="built_in">to</span> make tree <span class="keyword">with</span>:</span><br><span class="line">      - <span class="keyword">the</span> equation <span class="keyword">with</span> <span class="keyword">the</span> <span class="keyword">first</span> <span class="keyword">character</span> removed</span><br><span class="line">      - <span class="keyword">the</span> <span class="keyword">first</span> <span class="keyword">character</span> <span class="keyword">of</span> <span class="keyword">the</span> equation appended <span class="built_in">to</span> <span class="keyword">the</span> <span class="built_in">value</span></span><br><span class="line">  make <span class="keyword">a</span> binary tree node <span class="keyword">with</span> <span class="keyword">the</span> left, <span class="literal">right</span>, <span class="keyword">and</span> current <span class="built_in">value</span></span><br><span class="line">  <span class="literal">return</span> <span class="keyword">the</span> binary tree node</span><br></pre></td></tr></table></figure></p><p>In the case of the tree presented above, there are no valid solutions. These trees can get large. There are actually 2 n possible leaf nodes, where n is the length of the equation. For example, the equation 3 + 2 / 5 = 5 + 3 × 2 will have 2 11 possible leaf nodes. That’s 2048 leaf nodes!</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>As you develop your solution, make sure to thoroughly test each function as well as the overall solution. For the compute function, it probably makes sense to test simple expressions first, then more complex ones (including parentheses), and finally ones that will cause errors of various kinds.</p><p>For the overall solution, you should test some different puzzles including some of your own creation (making a puzzle isn’t that hard!). Make sure that your code works for all the puzzles – but we will not test with any puzzle that does not have a solution. Note that some puzzles, such as the one given at the top of this assignment, do not rely on order of operations, so can be used for testing whether or not you have implemented that algorithm.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的Python作业是解Blackout Math问题，也就是算数挖空，类似于九宫格游戏，不过多了运算符号，而且是挖数字而不是填数字。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMPSCI230-Bouncing-Program</title>
    <link href="https://tk1307993.coding.me/COMPSCI230-Bouncing-Program.html"/>
    <id>https://tk1307993.coding.me/COMPSCI230-Bouncing-Program.html</id>
    <published>2019-03-26T13:37:17.000Z</published>
    <updated>2019-03-26T13:41:16.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction-The-Bouncing-Program"><a href="#Introduction-The-Bouncing-Program" class="headerlink" title="Introduction - The Bouncing Program"></a>Introduction - The Bouncing Program</h3><p>The application, as given, is a simple bouncing program. Different shapes move around in various paths.</p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>The user can create a new shape by clicking anywhere within the panel area of the program. The properties of the newly created shape are based on the current values saved in the appropriate UI fields (e.g. height, width etc).</p><h3 id="Selecting-deselecting-shapes"><a href="#Selecting-deselecting-shapes" class="headerlink" title="Selecting/deselecting shapes:"></a>Selecting/deselecting shapes:</h3><p>A user can select a shape by clicking anywhere on the shape. If a shape is selected, all its handles are shown. The user can change the path types/widths/heights for all selected shapes by changing the current values with the help of the tools provided at the top of the application interface. (But the shape type can’t be modified once a shape has been created.)</p><p>Clicking on a selected shape will deselect it.</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="Shape-Combo-Box"><a href="#Shape-Combo-Box" class="headerlink" title="Shape Combo Box"></a>Shape Combo Box</h3><p>The ‘Shape’ combo box sets the current shape type for new shapes. Clicking in the panel area for Shape Creation will create the selected type of the shape. A rectangle or a circle can be selected in the program.</p><h3 id="Path-Combo-Box"><a href="#Path-Combo-Box" class="headerlink" title="Path Combo Box"></a>Path Combo Box</h3><p>Users may select one of several moving paths for shapes from the ‘Path’ combo box. Selecting a new path changes the path of all currently selected shapes. Additionally, the new path becomes the current path for any new shapes that are created.</p><h3 id="Width-TextField"><a href="#Width-TextField" class="headerlink" title="Width TextField"></a>Width TextField</h3><p>Users may change the current width of new shapes and currently selected shapes by entering a valid number in the width text field and pressing “ENTER”.</p><h3 id="Height-TextField"><a href="#Height-TextField" class="headerlink" title="Height TextField"></a>Height TextField</h3><p>Users may change the current height of new shapes and currently selected shapes by entering a valid number in the height text field and pressing “ENTER”.</p><h3 id="Border-Colour-Button"><a href="#Border-Colour-Button" class="headerlink" title="Border Colour Button"></a>Border Colour Button</h3><p>Users may change the current border colour of new shapes and currently selected shapes by selecting a colour from the colour dialog box and pressing “OK”.</p><h3 id="Start-Button"><a href="#Start-Button" class="headerlink" title="Start Button"></a>Start Button</h3><p>Starts the animation.</p><h3 id="Stop-Button"><a href="#Stop-Button" class="headerlink" title="Stop Button"></a>Stop Button</h3><p>Stops the animation.</p><h3 id="Animation-Slider"><a href="#Animation-Slider" class="headerlink" title="Animation Slider"></a>Animation Slider</h3><p>Users may use the animation delay slider to adjust the speed of the animation.</p><h3 id="Popup-Menu"><a href="#Popup-Menu" class="headerlink" title="Popup Menu"></a>Popup Menu</h3><p>The application has a popup menu, which is activated by clicking the right mouse button anywhere in the panel area (on a windows machine). The popup menu contains a menu item called “Clear All” which allows the user to clear all shapes from the program.</p><h3 id="What-you-are-to-do"><a href="#What-you-are-to-do" class="headerlink" title="What you are to do"></a>What you are to do</h3><p>Firstly, become familiar with the program supplied. The files included in the program are as follows:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A2.java</span><br><span class="line">AnimationPanel.java</span><br><span class="line">MovingShape.java</span><br><span class="line">MovingRectangle.java</span><br></pre></td></tr></table></figure></p><p>Download all source files from the assignment course page. The design and implementation of the program will be covered in lectures, please refer to the relevant material. It is strongly recommended to start as early as you can and implement the parts you know as soon as they are taught in lectures.</p><p>Your assignment is divided into several stages for ease of completion. Please complete the assignment in order of the stages.</p><h3 id="Stage-1-Using-An-ArrayList-10-marks"><a href="#Stage-1-Using-An-ArrayList-10-marks" class="headerlink" title="Stage 1: Using An ArrayList (10 marks)"></a>Stage 1: Using An ArrayList (10 marks)</h3><p>In this part you are required to modify classes in A2 which enable users to store instances of shapes using an ArrayList.</p><h3 id="Stage-2-Pen-Width-5-marks"><a href="#Stage-2-Pen-Width-5-marks" class="headerlink" title="Stage 2: Pen Width (5 marks)"></a>Stage 2: Pen Width (5 marks)</h3><p>In this part you are required to modify classes in A2 which enable users to change the pen width of all the currently selected shapes and the current pen width that will be used when creating new shapes.</p><p>You are required to add a setCurrentPenWidth() method into the AnimationPanel class in order to set the pen width of all the currently selected shapes and the pen width that will be used when creating new shapes. You are also required to add a getCurrentPenWidth() method into the AnimationPanel class to return the CURRENT pen width.</p><p>You should add the set and get methods to the MovingShape class in order to set or get the pen width of shapes. You should also modify the draw method of MovingRectangle class (and all subclasses) in order to use the pen width attribute stored in the superclass to draw the shape.</p><h3 id="Stage-3-Adding-new-Shapes-25"><a href="#Stage-3-Adding-new-Shapes-25" class="headerlink" title="Stage 3: Adding new Shapes (25%)"></a>Stage 3: Adding new Shapes (25%)</h3><p>The MovingShape is an abstract class which contains two abstract methods: draw and contains. You are required to add new subclasses. You may need to implement some or all abstract methods for the new shapes. You may also need to add a private instance field to store a specific property of the new shape. You will need to think carefully on the structure of the inheritance hierarchy.</p><h3 id="Stage-3B-MovingPolygon-Class-10-marks"><a href="#Stage-3B-MovingPolygon-Class-10-marks" class="headerlink" title="Stage 3B: MovingPolygon Class (10 marks)"></a>Stage 3B: MovingPolygon Class (10 marks)</h3><p>You are required to add a new class to the bouncing program. This class should draw a polygon based on the current width, height, pen width, border colour and the bouncing path stored in the AnimationPanel. Some examples are shown in the following diagram. You can choose any one or all of them.</p><h3 id="Stage-3C-MovingRotatingSquare-Class-10-marks"><a href="#Stage-3C-MovingRotatingSquare-Class-10-marks" class="headerlink" title="Stage 3C: MovingRotatingSquare Class (10 marks)"></a>Stage 3C: MovingRotatingSquare Class (10 marks)</h3><p>You are required to add a new class to the bouncing program. This class should draw a list of rotating squares based on the current width, height, pen width, border colour and the bouncing path stored in the AnimationPanel. Some examples are shown in the following diagram.</p><p>You may need to use methods from the AffineTransform class to rotate squares.</p><h3 id="Stage-4-Adding-a-New-Path-10-marks-JumpingPath-class"><a href="#Stage-4-Adding-a-New-Path-10-marks-JumpingPath-class" class="headerlink" title="Stage 4: Adding a New Path (10 marks): JumpingPath class"></a>Stage 4: Adding a New Path (10 marks): JumpingPath class</h3><p>In this part, you are required to add a jumping path to the bouncing program.</p><p>The MovingPath is an abstract inner class which contains an abstract method. You are required to add a new subclass which extends the MovingPath. You may need to add a private instance field to store a specific property of the new path. You will need to think carefully on the structure of the inheritance hierarchy.</p><h3 id="A2-amp-MovingShape"><a href="#A2-amp-MovingShape" class="headerlink" title="A2 &amp; MovingShape"></a>A2 &amp; MovingShape</h3><p>Next, you are required to add a new ImageIcon to the ‘Path’ combo box control in the A2 class for the new type of path. You are also required to modify the setPath method in the MovingShape class which allows users to create a new subclass instance. An example is shown as below:</p><h3 id="Assessment-criteria"><a href="#Assessment-criteria" class="headerlink" title="Assessment criteria"></a>Assessment criteria</h3><ul><li>Users should be able to add a new shape which bounce off using the jumping path idea.</li><li>Users should be able to change the bouncing path of the selected shapes to the jumping path.</li></ul>]]></content>
    
    <summary type="html">
    
      这次需要代写的Java作业是完善一个UI程序，需要使用面向对象编程设计，特别是OOP中的继承和多态。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS3410-Game-Design</title>
    <link href="https://tk1307993.coding.me/CS3410-Game-Design.html"/>
    <id>https://tk1307993.coding.me/CS3410-Game-Design.html</id>
    <published>2019-03-23T07:20:29.000Z</published>
    <updated>2019-03-23T07:22:32.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><h4 id="Flexible-design-Demonstrate-flexibility-by"><a href="#Flexible-design-Demonstrate-flexibility-by" class="headerlink" title="Flexible design. Demonstrate flexibility by:"></a>Flexible design. Demonstrate flexibility by:</h4><p>Implementing at least two different versions for one or a set of features. The variation needs to be behavioural, not parametric. For example, writing a game where the user drives a car and the bitmap image of the car can be changed, or changing the probability of an event happening, will not be considered a variation that fulfills this requirement.</p><p>Showing that adding versions to the set of features is achieved by adding new code rather than by modifying existing code.</p><h4 id="Reliable-code-Demonstrate-reliability-by"><a href="#Reliable-code-Demonstrate-reliability-by" class="headerlink" title="Reliable code. Demonstrate reliability by:"></a>Reliable code. Demonstrate reliability by:</h4><p>Arguing that a significant set of features have corresponding test cases.</p><p>You demo a relatively stable version of your project and no errors occur during the demo.</p><p>You have an effective resource management policy. For example, you can use “valgrind” to check and show evidence of the effectiveness of your memory management scheme, or you can use smart pointers, if applicable.</p><h4 id="Reasonable-scope-Show-that-your-project-is-not-trivial"><a href="#Reasonable-scope-Show-that-your-project-is-not-trivial" class="headerlink" title="Reasonable scope. Show that your project is not trivial:"></a>Reasonable scope. Show that your project is not trivial:</h4><p>Describe the features of your project by describing use case stories (an example is in your textbook), or listing the features that you implemented (you can include your test lists annotated with explanations so that the test list makes sense to an outside reader).</p><p>Provide code statistics. Tools for this purpose exist. For example, you can look at: CCCC (C and C++ Code Counter, <a href="http://sourceforge.net/projects/cccc/" target="_blank" rel="noopener">http://sourceforge.net/projects/cccc/</a> ).</p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation:"></a>Implementation:</h3><p>Source code commented using doxygen.</p><p>Source code naming and formatting conventions are consistent.</p><p>Building from sources is clearly explained and appropriately managed.</p><p>Use of a version control system is absolutely necessary. Show evidence that every team member has contributed code to the project. Bitbucket, for example, has the ability to show the users who have pushed commits to the remote repository. Every member should have at least one commit used in the project.</p><h3 id="FINAL-PROJECT-REPORT-grading-scheme"><a href="#FINAL-PROJECT-REPORT-grading-scheme" class="headerlink" title="FINAL PROJECT REPORT (grading scheme)"></a>FINAL PROJECT REPORT (grading scheme)</h3><p>Provide evidence that you fulfill each of the four requirements above (10% allocated for each requirement, total 40%). Please note that claims of the type “our implementation used shared_ptr classes” or “we have written a lot of code” are only claims. They need to be followed by evidence such as reference to the source code or doxygen documentation, or code statistics. Your report need not fill many pages, but it should be to the point. Please avoid double space lines and verbose formulations.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的游戏自由发挥，游戏内容不限
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop代写：CS1003-Data-Processing-with-MapReduce</title>
    <link href="https://tk1307993.coding.me/CS1003-Data-Processing-with-MapReduce.html"/>
    <id>https://tk1307993.coding.me/CS1003-Data-Processing-with-MapReduce.html</id>
    <published>2019-03-20T13:49:54.000Z</published>
    <updated>2019-03-20T13:54:06.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Key-Competency"><a href="#Key-Competency" class="headerlink" title="Key Competency"></a>Key Competency</h3><ul><li>using MapReduce to process data</li></ul><h3 id="Necessary-Skills"><a href="#Necessary-Skills" class="headerlink" title="Necessary Skills"></a>Necessary Skills</h3><ul><li>expressing an algorithm in the MapReduce style</li><li>choosing appropriate classes and methods from the MapReduce API</li><li>testing and debugging</li><li>writing clear, tidy, consistent and understandable code</li></ul><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>The practical involves manipulating fairly large data files using the Hadoop implementation of MapReduce.</p><p>When working in the lab, it is highly recommended that you copy a small subset of these files to your local machine under /cs/scratch/username , and use them to develop and test your program. Do not use the input files directly from studres or your home folder as this will exhaust the network.</p><p>Your program should perform the following operations:</p><ul><li>Obtain the absolute paths of the input and output directories from the user. The input must be read in from files in the input directory, and must be written to files in the output directory.</li><li>Find all character level or word level n-grams for text fragments contained within files in the given input directory written in a given language, depending on the user’s input</li><li>Print the list of n-grams and their frequency to a file in the output directory, in alphabetical order</li></ul><p>Your program should deal gracefully with possible errors such as the web resource file being unavailable, or the response containing data in an unexpected format. The source code for your program should follow common style guidelines, including:</p><ol><li>formatting code neatly</li><li>consistency in name formats for methods, fields, variables</li><li>avoiding embedded “magic numbers” and string literals</li><li>minimising code duplication</li><li>avoiding long methods</li><li>using comments and informative method/variable names to make the code clear to the reader</li></ol><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>Hand in via MMS, a zip file containing the following:</p><p>Your Java source files</p><ul><li>A brief report (maximum 3 pages) explaining the decisions you made, how you tested your program, and how you solved any difficulties that you encountered. Include instructions on how to run your program and any dependencies that need resolving. You can use any software you like to write your report, but your submitted version must be in PDF format.</li><li>Also within your report:</li><li>Highlight one piece of feedback from your previous submissions, and explain how you used it to improve this submission</li><li>If you had to carry out a similar large-scale data processing task in future, would you choose Hadoop or basic file manipulation as you did in earlier practicals? Write a brief comparison of the two methods, explaining the advantages and disadvantages of each, and justify your choice.</li></ul><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><p>If you wish to experiment further, you could try any or all of the following:</p><ol><li>Give the user an option to order the n-grams by occurrence frequency. Hint: You could use the ‘Most Popular Word’ example on studres as a starting point.</li><li>Perform additional queries on the data, such as:<ol start="2"><li>a. Count all text fragments containing a given string by the user in a given language</li><li>b. Find which word occurs in the highest number of different languages</li><li>c. Any other additional statistics/queries about the data you could generate using Hadoop</li></ol></li></ol><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>Here is one possible sequence for developing your solution. It is recommended that you make a new method or class at each stage, so that you can easily go back to a previous stage if you run into problems. Please use demonstrator support in the labs whenever possible.</p><ol><li>You will need to examine the structure of the data files, to see how the text fragments and language specifications are represented.</li><li>Tackle one problem at a time, beginning with selecting all text in a particular language, which requires a mapper class but no reducer. Initially, you can use a fixed search language String in your mapper class for testing purposes.</li><li>To select only text in the required language, the difficulty is that the language is recorded in a different line from the text fragment, so will be processed in a different call to map. This can be solved using a field in the mapper object to record the most recently encountered language. The map method can then either update this field, if the current line contains a language, or check the language field value, if the current line contains a text fragment.</li><li>To test, first make a new directory and copy 10 or 20 of the data files into it—the full data set will take inconveniently long to run.</li><li>Once this works, refine your solution so that the search language is passed as a parameter. Recall that you can pass a parameter value to a mapper or reducer by calling the method.</li><li>To return text in the specified language as n-grams, you will need to also pass the user’s specified n-gram type and size as parameters, using the same methods in Step 5. Following this, it is recommended that you reuse your n-gram creation code from Practical 2 to split each String into its corresponding n-grams. Remember that, unlike Practical 2, you do not need to represent word boundaries with an underscore.</li><li>In order to output the n-gram frequencies alongside the n-grams themselves, you will need to implement a reducer class that groups duplicate n-grams and sums their total frequency. For a reminder of how to do this, review the ‘Word Count’ example on studres.</li><li>For ordering your output n-grams, recall that sorting order is specified with the setOutputKeyComparatorClass method of the JobConf class.</li></ol>]]></content>
    
    <summary type="html">
    
      这个代写的作业是使用Hadoop来处理数据，搭建Hadoop平台，分析数据，编写对应的Map函数和Reduce函数来完成。
    
    </summary>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/categories/Hadoop/"/>
    
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Operating System代写：COMP3080-File-Description</title>
    <link href="https://tk1307993.coding.me/COMP3080-File-Description.html"/>
    <id>https://tk1307993.coding.me/COMP3080-File-Description.html</id>
    <published>2019-03-17T11:48:38.000Z</published>
    <updated>2019-03-17T11:51:26.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The program you will write will accept from 0 to an arbitrary number of command line file names and produce an output structure for each identified file (or all files in the working directory if no command line file names are listed) as shown below:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FILENAME</span><br><span class="line">FILE_TYPE</span><br><span class="line">PERMISSIONS</span><br><span class="line">OWNER_NAME</span><br><span class="line">GROUP_NAME</span><br><span class="line">DATE_OF_LAST_MODIFICATION</span><br><span class="line">LINK_COUNT</span><br><span class="line">SIZE_IN_BYTES <span class="keyword">OR</span> DEV INFO</span><br><span class="line">INODE_NUMBER</span><br></pre></td></tr></table></figure></p><p>Example:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">FILENAME:</span></span><br><span class="line">alpha</span><br><span class="line"><span class="symbol">FILE_TYPE:</span></span><br><span class="line">ordinary</span><br><span class="line"><span class="symbol">PERMISSIONS:</span></span><br><span class="line">rw- r-- r--</span><br><span class="line"><span class="symbol">OWNER_NAME:</span></span><br><span class="line">jedwards</span><br><span class="line"><span class="symbol">GROUP_NAM:</span></span><br><span class="line">grad</span><br><span class="line"><span class="symbol">DATE_OF_LAST_MODIFICATION:</span></span><br><span class="line">Mar <span class="number">30</span> <span class="number">08</span>:<span class="number">11</span> <span class="number">2003</span></span><br><span class="line"><span class="symbol">LINK_COUNT:</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">SIZE_IN_BYTES:</span></span><br><span class="line"><span class="number">1345</span> (<span class="keyword">or</span> <span class="number">12</span>, <span class="number">6</span> dev info)</span><br><span class="line"><span class="symbol">INODE_NUMBER:</span></span><br><span class="line"><span class="number">347</span></span><br><span class="line">*******&lt; a blank line between entries &gt;*******</span><br></pre></td></tr></table></figure></p><p>System calls needed on a UNIX system include:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line">getdirentries(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> nbytes, <span class="keyword">long</span> *basep)</span><br></pre></td></tr></table></figure><p>which reads up to nbytes of data into buf in the form:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>   d_ino;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span>  d_reclen;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span>  d_namlen;</span><br><span class="line"><span class="keyword">char</span>            d_name[MAXNAMLEN + <span class="number">1</span>];</span><br></pre></td></tr></table></figure></p><p>see the man pages for more detail. This routine is difficult to use, so you may find the library routines opendir() and readdir() easier to use as shown in class.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">ctime</span><span class="params">(<span class="keyword">long</span> *clock)</span></span></span><br></pre></td></tr></table></figure></p><p>see the man pages for more detail. This data structure may vary somewhat from platform to platform (see the stat.h header and its #includes), but the entry names shown above are common to all Unix/Linux type platforms</p><p>The getdirentries() call requires that you use the open() system call to open a directory, and you can then use getdirentries() to extract filenames from the directory. (You may want to check out the library routines opendir() and readdir(), which will do this for you in a more friendly way.) Your program will have to work in two basic modes:</p><ul><li>if called with no arguments (as with ls) it must find the names of all the files in the current directory (including dotted files) and print information in the format shown above for each file object.</li><li>if called with a series of file names (from the command line as with ls abc xyz etc) it must print information in the format shown above for each named object in the argv [ ] vector (wildcard characters are not allowed).</li></ul><p>File types include ordinary (-), directory (d), symbolic link (l), character device (c), and block device (b). You must show sample output with each of these types. (You do not have to worry about pipe (p) and UNIX domain socket (s) types, nor do you have to print resolution names for symbolic link (l) types.) There are several additional library routines and header file macros and defined constants that can help you get this done.</p><p>If you compile your code on mercury, you will need to define a compile time symbol to work properly with NFS mounted file objects:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Bash-$</span><span class="bash">  gcc -D_FILE_OFFSET_BITS=64 -g -o <span class="built_in">stat</span> stat.c</span></span><br></pre></td></tr></table></figure></p><p>You won’t need this if you compile on cs but it will not hurt to include it either way (cs is a 64 bit Linux, while mercury is a 32 bit Linux)</p>]]></content>
    
    <summary type="html">
    
      本次需要代写的作业要求实现文件系统的高级操作，如查看文件的大小、创建时间、修改时间、用户、用户组等等meta信息。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMSW3101-Introduction-To-Python</title>
    <link href="https://tk1307993.coding.me/COMSW3101-Introduction-To-Python.html"/>
    <id>https://tk1307993.coding.me/COMSW3101-Introduction-To-Python.html</id>
    <published>2019-03-15T15:31:26.000Z</published>
    <updated>2019-03-15T15:34:31.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem-1-Decrypting-Government-Data"><a href="#Problem-1-Decrypting-Government-Data" class="headerlink" title="Problem 1 - Decrypting Government Data"></a>Problem 1 - Decrypting Government Data</h3><p>Your job is to summarize this gov data about oil consumation</p><ul><li>The format of the file is rather bizzare - note that each line has data for two months, in two different years! (Plus I had to hand edit the file to make it parseable)</li><li>Fortunately, Python is great for untangling and manipulating data.</li><li>Write a generator that reads from the given url over the network, and produces a summary line for a year’s data on each ‘next’ call</li><li>remember that urllib.request returns ‘bytes arrays’, not strings</li><li>The generator should read the lines of the oil2.txt file in a lazy fashion - it should only read 13 lines for every two years of output. Note a loop can have any number of ‘yield’ calls in it.</li><li>Ignore the monthly data, just extract the yearly info</li><li>Drop the month column</li><li>In addition to the ‘oil’ generator function, my solution had a separate helper function, ‘def makeCSV- Line(year, data):’</li></ul><h3 id="Here-is-the-first-two-years-of-data-2014-and-2013"><a href="#Here-is-the-first-two-years-of-data-2014-and-2013" class="headerlink" title="Here is the first two years of data, 2014 and 2013"></a>Here is the first two years of data, 2014 and 2013</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Year,Quantity,QuantityChange,Unknown,Unknown2,Price,PriceChange</span><br><span class="line"><span class="number">2014</span>,<span class="number">2700903</span>,<span class="number">-112867</span>,<span class="number">246409332</span>,<span class="number">-26397845</span>,<span class="number">91.23</span>,<span class="number">-5.72</span></span><br><span class="line"><span class="number">2013</span>,<span class="number">2813770</span>,<span class="number">-283638</span>,<span class="number">272807177</span>,<span class="number">-40367786</span>,<span class="number">96.95</span>,<span class="number">-4.15</span></span><br><span class="line"><span class="number">2012</span>,<span class="number">3097408</span>,<span class="number">-224509</span>,<span class="number">313174963</span>,<span class="number">-18407090</span>,<span class="number">101.11</span>,<span class="number">1.29</span></span><br><span class="line"><span class="number">2011</span>,<span class="number">3321917</span>,<span class="number">-55160</span>,<span class="number">331582053</span>,<span class="number">79421544</span>,<span class="number">99.82</span>,<span class="number">25.15</span></span><br><span class="line"><span class="number">2010</span>,<span class="number">3377077</span>,<span class="number">62290</span>,<span class="number">252160509</span>,<span class="number">63448733</span>,<span class="number">74.67</span>,<span class="number">17.74</span></span><br><span class="line"><span class="number">2009</span>,<span class="number">3314787</span>,<span class="number">-275841</span>,<span class="number">188711776</span>,<span class="number">-153200712</span>,<span class="number">56.93</span>,<span class="number">-38.29</span></span><br><span class="line"><span class="number">2008</span>,<span class="number">3590628</span>,<span class="number">-99940</span>,<span class="number">341912488</span>,<span class="number">104700835</span>,<span class="number">95.22</span>,<span class="number">30.95</span></span><br><span class="line"><span class="number">2007</span>,<span class="number">3690568</span>,<span class="number">-43658</span>,<span class="number">237211653</span>,<span class="number">20584322</span>,<span class="number">64.28</span>,<span class="number">6.26</span></span><br><span class="line"><span class="number">2006</span>,<span class="number">3734226</span>,<span class="number">-20445</span>,<span class="number">216627331</span>,<span class="number">40871990</span>,<span class="number">58.01</span>,<span class="number">11.20</span></span><br><span class="line"><span class="number">2005</span>,<span class="number">3754671</span>,<span class="number">-66308</span>,<span class="number">175755341</span>,<span class="number">44012676</span>,<span class="number">46.81</span>,<span class="number">12.33</span></span><br><span class="line"><span class="number">2004</span>,<span class="number">3820979</span>,<span class="number">144974</span>,<span class="number">131742665</span>,<span class="number">32575492</span>,<span class="number">34.48</span>,<span class="number">7.50</span></span><br><span class="line"><span class="number">2003</span>,<span class="number">3676005</span>,<span class="number">257983</span>,<span class="number">99167173</span>,<span class="number">21883842</span>,<span class="number">26.98</span>,<span class="number">4.37</span></span><br><span class="line"><span class="number">2002</span>,<span class="number">3418022</span>,<span class="number">-53045</span>,<span class="number">77283331</span>,<span class="number">2990437</span>,<span class="number">22.61</span>,<span class="number">1.21</span></span><br><span class="line"><span class="number">2001</span>,<span class="number">3471067</span>,<span class="number">71827</span>,<span class="number">74292894</span>,<span class="number">-15583539</span>,<span class="number">21.40</span>,<span class="number">-5.04</span></span><br><span class="line"><span class="number">2000</span>,<span class="number">3399240</span>,<span class="number">171148</span>,<span class="number">89876433</span>,<span class="number">38986812</span>,<span class="number">26.44</span>,<span class="number">10.68</span></span><br><span class="line"><span class="number">1999</span>,<span class="number">3228092</span>,<span class="number">-14620</span>,<span class="number">50889621</span>,<span class="number">13637399</span>,<span class="number">15.76</span>,<span class="number">4.28</span></span><br><span class="line"><span class="number">1998</span>,<span class="number">3242712</span>,<span class="number">173281</span>,<span class="number">37252222</span>,<span class="number">-16973685</span>,<span class="number">11.49</span>,<span class="number">-6.18</span></span><br><span class="line"><span class="number">1997</span>,<span class="number">3069431</span>,<span class="number">175785</span>,<span class="number">54225907</span>,<span class="number">-704950</span>,<span class="number">17.67</span>,<span class="number">-1.32</span></span><br><span class="line"><span class="number">1996</span>,<span class="number">2893646</span>,<span class="number">126333</span>,<span class="number">54930857</span>,<span class="number">11181204</span>,<span class="number">18.98</span>,<span class="number">3.17</span></span><br></pre></td></tr></table></figure><p>now that we have something that looks like a CVS file, can do all kinds of things</p><p>Input:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'/tmp/oil.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">l</span> in oil(url):</span><br><span class="line">  <span class="keyword">f</span>.<span class="keyword">write</span>(<span class="keyword">l</span> + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">o</span> = oil(url)</span><br><span class="line"><span class="keyword">ls</span> = <span class="keyword">list</span>(<span class="keyword">o</span>)</span><br><span class="line">s = <span class="string">'\n'</span>.<span class="keyword">join</span>(<span class="keyword">ls</span>)</span><br><span class="line">import pandas <span class="keyword">as</span> pd</span><br><span class="line">import io</span><br><span class="line"># we will cover StringIO <span class="keyword">next</span> week - kind of <span class="keyword">an</span> <span class="string">'in-memory'</span> <span class="keyword">file</span></span><br><span class="line">df = pd.read_csv(io.StringIO(s))</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    Year Quantity QuantityChange    Unknown   Unknown2   Price PriceChange</span><br><span class="line"><span class="number">0</span>   <span class="number">2014</span>  <span class="number">2700903</span>        <span class="number">-112867</span>  <span class="number">246409332</span>  <span class="number">-26397845</span>   <span class="number">91.23</span>       <span class="number">-5.72</span></span><br><span class="line"><span class="number">1</span>   <span class="number">2013</span>  <span class="number">2813770</span>        <span class="number">-283638</span>  <span class="number">272807177</span>  <span class="number">-40367786</span>   <span class="number">96.95</span>       <span class="number">-4.15</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2012</span>  <span class="number">3097408</span>        <span class="number">-224509</span>  <span class="number">313174963</span>  <span class="number">-18407090</span>  <span class="number">101.11</span>        <span class="number">1.29</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2011</span>  <span class="number">3321917</span>         <span class="number">-55160</span>  <span class="number">331582053</span>   <span class="number">79421544</span>   <span class="number">99.82</span>       <span class="number">25.15</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2010</span>  <span class="number">3377077</span>          <span class="number">62290</span>  <span class="number">252160509</span>   <span class="number">63448733</span>   <span class="number">74.67</span>       <span class="number">17.74</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2009</span>  <span class="number">3314787</span>        <span class="number">-275841</span>  <span class="number">188711776</span> <span class="number">-153200712</span>   <span class="number">56.93</span>      <span class="number">-38.29</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2008</span>  <span class="number">3590628</span>         <span class="number">-99940</span>  <span class="number">341912488</span>  <span class="number">104700835</span>   <span class="number">95.22</span>       <span class="number">30.95</span></span><br><span class="line"><span class="number">7</span>   <span class="number">2007</span>  <span class="number">3690568</span>         <span class="number">-43658</span>  <span class="number">237211653</span>   <span class="number">20584322</span>   <span class="number">64.28</span>        <span class="number">6.26</span></span><br><span class="line"><span class="number">8</span>   <span class="number">2006</span>  <span class="number">3734226</span>         <span class="number">-20445</span>  <span class="number">216627331</span>   <span class="number">40871990</span>   <span class="number">58.01</span>       <span class="number">11.20</span></span><br><span class="line"><span class="number">9</span>   <span class="number">2005</span>  <span class="number">3754671</span>         <span class="number">-66308</span>  <span class="number">175755341</span>   <span class="number">44012676</span>   <span class="number">46.81</span>       <span class="number">12.33</span></span><br><span class="line"><span class="number">10</span>  <span class="number">2004</span>  <span class="number">3820979</span>         <span class="number">144974</span>  <span class="number">131742665</span>   <span class="number">32575492</span>   <span class="number">34.48</span>        <span class="number">7.50</span></span><br><span class="line"><span class="number">11</span>  <span class="number">2003</span>  <span class="number">3676005</span>         <span class="number">257983</span>   <span class="number">99167173</span>   <span class="number">21883842</span>   <span class="number">26.98</span>        <span class="number">4.37</span></span><br><span class="line"><span class="number">12</span>  <span class="number">2002</span>  <span class="number">3418022</span>         <span class="number">-53045</span>   <span class="number">77283331</span>    <span class="number">2990437</span>   <span class="number">22.61</span>        <span class="number">1.21</span></span><br><span class="line"><span class="number">13</span>  <span class="number">2001</span>  <span class="number">3471067</span>          <span class="number">71827</span>   <span class="number">74292894</span>  <span class="number">-15583539</span>   <span class="number">21.40</span>       <span class="number">-5.04</span></span><br><span class="line"><span class="number">14</span>  <span class="number">2000</span>  <span class="number">3399240</span>         <span class="number">171148</span>   <span class="number">89876433</span>   <span class="number">38986812</span>   <span class="number">26.44</span>       <span class="number">10.68</span></span><br><span class="line"><span class="number">15</span>  <span class="number">1999</span>  <span class="number">3228092</span>         <span class="number">-14620</span>   <span class="number">50889621</span>   <span class="number">13637399</span>   <span class="number">15.76</span>        <span class="number">4.28</span></span><br><span class="line"><span class="number">16</span>  <span class="number">1998</span>  <span class="number">3242712</span>         <span class="number">173281</span>   <span class="number">37252222</span>  <span class="number">-16973685</span>   <span class="number">11.49</span>       <span class="number">-6.18</span></span><br><span class="line"><span class="number">17</span>  <span class="number">1997</span>  <span class="number">3069431</span>         <span class="number">175785</span>   <span class="number">54225907</span>    <span class="number">-704950</span>   <span class="number">17.67</span>       <span class="number">-1.32</span></span><br><span class="line"><span class="number">18</span>  <span class="number">1996</span>  <span class="number">2893646</span>         <span class="number">126333</span>   <span class="number">54930857</span>   <span class="number">11181204</span>   <span class="number">18.98</span>        <span class="number">3.17</span></span><br><span class="line"><span class="number">19</span>  <span class="number">1995</span>  <span class="number">2767313</span>          <span class="number">63116</span>   <span class="number">43749653</span>    <span class="number">5270236</span>   <span class="number">15.81</span>        <span class="number">1.58</span></span><br><span class="line"><span class="number">20</span>  <span class="number">1994</span>  <span class="number">2704197</span>         <span class="number">160822</span>   <span class="number">38479417</span>      <span class="number">10041</span>   <span class="number">14.23</span>       <span class="number">-0.90</span></span><br><span class="line"><span class="number">21</span>  <span class="number">1993</span>  <span class="number">2543375</span>         <span class="number">248805</span>   <span class="number">38469376</span>     <span class="number">-83679</span>   <span class="number">15.13</span>       <span class="number">-1.68</span></span><br></pre></td></tr></table></figure><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h3><ul><li>suppose we want to convert between C(Celsius) and F(Fahrenheit), using the equation 9C = 5 (F-32)</li><li>could write functions ‘c2f’ and ‘f2c’</li><li>do all computation in floating point for this problem</li></ul><h3 id="Problem-3-Hamlet"><a href="#Problem-3-Hamlet" class="headerlink" title="Problem 3 - Hamlet"></a>Problem 3 - Hamlet</h3><p>Python is very popular in ‘digital humanities’</p><p>MIT has the complete works of Shakespeare in a simple html format</p><p>You will do a simple analysis of Hamlet by reading the html file, one line at a time(usual iteration scheme) and doing pattern matching</p><p>The goal is to return a list of the linecnt, total number of ‘speeches’(look at the file format), and a dict showing the number of ‘speeches’ each character gives</p><p>Your program should read directly from the url given, but you may want to download a copy to examine the structure of the file.<br>remember that usrlib.request returns ‘byte arrays’, not strings</p><p>here’s a short sample of the file</p><h3 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem 5"></a>Problem 5</h3><p>define the <strong>mul</strong> method for polydict<br>Input:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[pd1, pd2, pd3, pd1 * pd2, pd1 * pd3, pd2 * pd3]</span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[+ <span class="number">3</span> * X ** <span class="number">2</span> + <span class="number">2</span> * X + <span class="number">1</span>,</span><br><span class="line"> + <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * x,</span><br><span class="line"> <span class="number">3</span> * X ** <span class="number">2</span> + <span class="number">2</span> * X + <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X,</span><br><span class="line"> <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X ** <span class="number">-1</span>,</span><br><span class="line"> <span class="number">15</span> * X ** <span class="number">4</span> + <span class="number">40</span> * X ** <span class="number">3</span> + <span class="number">25</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X,</span><br><span class="line"> <span class="number">15</span> * X ** <span class="number">4</span> + <span class="number">10</span> * X ** <span class="number">3</span> + <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">30</span> * X + <span class="number">20</span> * X ** <span class="number">-1</span>,</span><br><span class="line"> <span class="number">25</span> * X ** <span class="number">4</span> + <span class="number">50</span> * X ** <span class="number">3</span> + <span class="number">50</span> * X + <span class="number">100</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本次需要代写的Python作业，包含了5个算术问题需要解决。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop代写：CS698-Flight-Data-Analysis</title>
    <link href="https://tk1307993.coding.me/CS698-Flight-Data-Analysis.html"/>
    <id>https://tk1307993.coding.me/CS698-Flight-Data-Analysis.html</id>
    <published>2019-03-12T12:56:09.000Z</published>
    <updated>2019-03-12T12:59:13.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><ol><li>Form a project team of two students (including yourself).</li><li>Install Hadoop/Oozie on your AWS VMs.</li><li>Download the Airline On-time Performance data set (flight data set) from the period of October 1987 to April 2008 on the Statistical Computing website: <a href="http://stat-computing.org/dataexpo/2009/the-data.html" target="_blank" rel="noopener">http://stat-computing.org/dataexpo/2009/the-data.html</a></li><li>Design, implement, and run an Oozie workflow to find out<ul><li>a. the 3 airlines with the highest and lowest probability, respectively, for being on schedule;</li><li>b. the 3 airports with the longest and shortest average taxi time per flight (both in and out), respectively; and</li><li>c. the most common reason for flight cancellations.</li></ul></li></ol><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ol><li>Your workflow must contain at least three MapReduce jobs that run in fully distributed mode.</li><li>Run your workflow to analyze the entire data set (total 22 years from 1987 to 2008) at one time on two VMs first and then gradually increase the system scale to the maximum allowed number of VMs for at least 5 increment steps, and measure each corresponding workflow execution time.</li><li>Run your workflow to analyze the data in a progressive manner with an increment of 1 year, i.e. the first year (1987), the first 2 years (1987-1988), the first 3 years (1987-1989), …, and the total 22 years (1987-2008), on the maximum allowed number of VMs, and measure each corresponding workflow execution time.</li></ol><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ol><li>A commands.txt text file that lists all the commands you used to run your code and produce the required results in fully distributed mode</li><li>An output.txt text file that stores the final results from all the runs</li><li>The source code of your MapReduce programs (including the JAR files) and any other programs you might have developed and included in the workflow</li><li>The Oozie workflow XML file</li><li>A project report in PDF that includes:<br>a. A diagram that shows the structure of your Oozie workflow<br>b. A detailed description of the algorithm you designed to solve each of the problems<br>c. A performance measurement plot that compares the workflow execution time in response to an increasing number of VMs used for processing the entire data set (22 years) and an in-depth discussion on the observed performance comparison results<br>d. A performance measurement plot that compares the workflow execution time in response to an increasing data size (from 1 year to 22 years) and an in-depth discussion on the observed performance comparison results</li></ol>]]></content>
    
    <summary type="html">
    
      这次需要代写的是一个大数据的作业，需要在AWS上搭建Hadoop来进行计算。此外，数据集也非常大，也包含了脏数据需要处理。
    
    </summary>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/categories/Hadoop/"/>
    
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/tags/Hadoop/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>FTP代写：CS159-Socket-Programming-FTP-Server</title>
    <link href="https://tk1307993.coding.me/CS159-Socket-Programming-FTP-Server.html"/>
    <id>https://tk1307993.coding.me/CS159-Socket-Programming-FTP-Server.html</id>
    <published>2019-03-09T09:31:12.000Z</published>
    <updated>2019-03-09T09:34:46.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Your task is to create a very simple FTP server program using sockets.</p><ol><li>The server needs to be able to interpret the protocol commands, including: LIST, RETR, STOR</li><li>The client should be a standard command line FTP client application (available on your OS). The application commands that should work from the client are:<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir (<span class="built_in">or</span> <span class="keyword">ls</span>)</span><br><span class="line"><span class="built_in">get</span> <span class="symbol">&lt;filename&gt;</span></span><br><span class="line"><span class="keyword">put</span> <span class="symbol">&lt;filename&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>Assume that the files to be transferred are text only (ASCII rather than binaries). There is no need to implement text X binary modes.</p><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>This exercise makes use of the FTP protocol directly from a command line application. You have probably used FTP before, but in a transparent way (perhaps via a browser).</p><p>FTP is an acronym used with different meanings, each with its set of commands:</p><p>FTP protocol commands (e.g., USER, PASV, PORT etc)</p><p>FTP application commands, associated with a FTP client (e.g., get, put, dir etc).</p><p>When using different Operating Systems one might find that the FTP application works in different ways, even though they may be using the same FTP protocol. The commands described below should work in most OS. However different FTP clients may have incomplete implementations or use nonstandard FTP application commands.</p><p>To start the exercise:</p><ol><li>1) Open a terminal</li><li>2) Issue the command:</li></ol><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>We have seen some examples using the application called telnet to connect to servers listening to certain ports (see some examples in Chapter 2). Does that work with FTP?</p><h3 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h3><p>Understanding the difference between FTP “protocol commands” and “application commands”:</p><p>We have looked at protocol commands, such as: RETR, USER, PASS, STOR etc.</p><p>Also, there are application commands with an FTP client: get, put, ls etc</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p>Your submission has to be a single source file (server) compatible with GCC (if using other compilers to develop the assignment, make sure the final source compiles on GCC). Submit to Stream.</p><p>This assignment is worth 10 marks.</p><p>You may lose marks for late assignments.</p>]]></content>
    
    <summary type="html">
    
      这个需要代写的作业要求基于Linux Socket编程，实现一个FTP Server。需要支持常见的上传(put)、下载(get)和列表(ls)等命令。
    
    </summary>
    
      <category term="FTP" scheme="https://tk1307993.coding.me/categories/FTP/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Database代写：CS108-Web-Based-Application</title>
    <link href="https://tk1307993.coding.me/CS108-Web-Based-Application.html"/>
    <id>https://tk1307993.coding.me/CS108-Web-Based-Application.html</id>
    <published>2019-03-09T01:51:08.000Z</published>
    <updated>2019-03-09T09:35:14.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>You will develop a web-based application with a database back-end for storage and retrieval of data. Choose your own adventure: select a subject matter related to your major or personal interests.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Some recent CS108 projects have included:</p><ul><li>Interactive dictionary for English/Junta language translation</li><li>Inventory system for chemistry lab / reactive agents</li><li>Social network for a gardening club</li><li>High school basketball win/loss records &amp; standings</li><li>Fisheries information tracking endangered species</li><li>Geographic information system for archeology dig</li><li>Compact disc inventory and sales</li><li>Calorie counting database/user interface</li><li>Local artists list their works for sale (with pictures)</li><li>Car rental and return</li><li>Special of the day listing for restaurant</li></ul><h3 id="Detailed-Requirements"><a href="#Detailed-Requirements" class="headerlink" title="Detailed Requirements"></a>Detailed Requirements</h3><p>You should begin by picking a concrete but simple interaction and modeling the data and functionality to implement it. For example, in a car rental application you might show a list of cars and allow a customer to complete a rental for one car. Start small; you can always add more interactions and details after you get the first one working.</p><p>Your application will model some kind of useful function, with a web-based interface (HTML) and data storage in a relational database (MySQL). A single interaction might be sufficient for this project, but a single web page certainly is not. You should have multiple web pages with logical transitions between the pages using buttons or links.</p><p>Projects must demonstrate reading from, inserting into, and updating database tables from your web interface. Points will be awarded for the general complexity of the project, with more complex projects scoring higher than very simple projects that mimic in-class assignments. After your work is functionally complete, you should enhance the look and feel of the application as the aesthetics (colors, images and fonts) will count for a small portion of your grade.</p><h3 id="Topic-Proposal"><a href="#Topic-Proposal" class="headerlink" title="Topic Proposal"></a>Topic Proposal</h3><p>Your proposal should be brief (about 3 sentences) and describe the general subject matter (e.g., car rental), the specific interaction you will model (e.g. car selection and checkout) and the data you will require for this interaction (e.g., table of cars, table of customers, table of rentals which matches cars with customers).</p><h3 id="Data-Requirements"><a href="#Data-Requirements" class="headerlink" title="Data Requirements"></a>Data Requirements</h3><p>What kind of data will your application need to interact with? Describe the data in terms of records and fields. What attributes does each record need to have? How will you uniquely identify a record?</p><p>Make up some sample data (about 5 records) so that you can use to begin thinking about and testing the program’s interactions. You might want to use a spreadsheet program like Excel to create these records, which will also enable importing them into the database later. We will demonstrate how to create tables and records in MySQL at the scheduled lab session this week.</p><h3 id="Planning-Your-Time"><a href="#Planning-Your-Time" class="headerlink" title="Planning Your Time"></a>Planning Your Time</h3><p>You have 4 weeks to complete this project. Here are some guidelines on what you should be working on at what time:</p><h3 id="roject-Demonstration-Video"><a href="#roject-Demonstration-Video" class="headerlink" title="roject Demonstration Video"></a>roject Demonstration Video</h3><p>You will present your project by making a short (2-3 minute) video screen capture, with you narrating as you demonstrate the application. Think about this as a demonstration for a potential customer or employer. This will speed the grading, and provide you with a lasting artifact of your work, which you can demonstrate to potential employers. Your demonstration should not show any code or database records, but must demonstrate every major feature of your application.</p><p>I recommend that you write a brief outline of what you will show in which order. Then, use a screen capture tool (I suggest QuickTime player for Mac or Tiny Take for Windows or any similar program). Record your video, and post it to YouTube (a private/unlisted URL is fine).</p>]]></content>
    
    <summary type="html">
    
      这次代写的这个Web作业，题目很发散，按要求实现题目之一就好。不过这是一个需要用Python和MySQL实现的Web作业，也算比较冷门的了。
    
    </summary>
    
      <category term="Database" scheme="https://tk1307993.coding.me/categories/Database/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
      <category term="MySQL" scheme="https://tk1307993.coding.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>PHP代写：CS952-Database-And-Web-Systems-Development</title>
    <link href="https://tk1307993.coding.me/CS952-Database-And-Web-Systems-Development.html"/>
    <id>https://tk1307993.coding.me/CS952-Database-And-Web-Systems-Development.html</id>
    <published>2019-03-05T02:25:34.000Z</published>
    <updated>2019-03-05T02:28:55.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Lab-Exercises-HTML-PHP-CSS-and-JavaScript"><a href="#Lab-Exercises-HTML-PHP-CSS-and-JavaScript" class="headerlink" title="Lab Exercises: HTML, PHP, CSS and JavaScript"></a>Lab Exercises: HTML, PHP, CSS and JavaScript</h3><p>The aim of these exercises is for you to build some simple web pages and to make sure you know how to use our systems for web development. The following tasks should be done in a plain text editor and saved as .html, .php, .css, or .js files where appropriate. You should then copy these files to DEVWEB. If you use Linux or Unix, go to the DEVWEB directory then to the 2015 directory (if you do not have a 2015 directory you will have to create one). If you put a file called ex.html in that directory you can view it in your web browser from any internet connected computer.</p><p>If you use Windows on any of the Departmental machines you will find the DEVWEB folder mapped to your Q: drive.</p><p>These exercises are worth up to 10% of the overall mark for CS 952 Database and Web Systems Development.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Please note that some of the later questions ask you to build on your solutions to earlier questions. You should therefore make sure that you save your solution to each question in separate files and that you do not overwrite your earlier solutions. For example, the solution file for question one could be named q1.html, the solution files for question 2 could be named q2.html (this will be a modified version of q1.html) and q2.php, the solution files for question 3 could be named q3.html (this will be a modified version of q1.html or q2.html) and q3.php (this will be a modified version of q2.php). The files that you create for each question should be placed in a directory or folder which you should zip and upload via Myplace.</p><p>This is an individual exercise: any copying of code (except from the lecture notes or the W3Schools website) may result in disciplinary measures. No late submissions will be accepted without medical certification, this should be provided at the earliest opportunity.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://www.w3schools.com/" target="_blank" rel="noopener">http://www.w3schools.com/</a> has online tutorials for HTML, CSS, PHP and JavaScript. The tutorial on PHP includes sections on form handling and validation as well as MySQL. The tutorial on JavaScript also includes sections on form validation.</p><h3 id="Q1-HTML-Simple-form-example"><a href="#Q1-HTML-Simple-form-example" class="headerlink" title="Q1 HTML Simple form example"></a>Q1 HTML Simple form example</h3><p>Using the following script showallparameters.php as your server action (and using the POST method), code the following form using HTML forms and check the correct data is sent to the server:</p><p>The job categories are “Marketing”, “Human Resources” and “Technical Support”. Don’t worry about the right alignment of the textual labels, but after you have a simple form working you should embed it in a table so that the form entry elements are nicely aligned. Also, if you wish, add some JavaScript error correction to check that something is entered in Name, Telephone, E-mail, Gender and Days Available (this is tricky).</p><p>You may wish to use <a href="http://validator.w3.org/" target="_blank" rel="noopener">http://validator.w3.org/</a> with advanced options to make sure that your file conforms with W3 open standards.</p><h3 id="Q2-PHP"><a href="#Q2-PHP" class="headerlink" title="Q2: PHP"></a>Q2: PHP</h3><p>Write a decent handler for the form in Q1 which shows the data nicely formatted back to the user.<br>Add code to this PHP script to send a fixed email to you whenever the form is submitted. See <a href="http://uk3.php.net/function.mail" target="_blank" rel="noopener">http://uk3.php.net/function.mail</a> for mail manual and Google for examples.</p><p>Change this code so that the email contains the same information echoed back to the user.</p><h3 id="Q3-MySQL"><a href="#Q3-MySQL" class="headerlink" title="Q3: MySQL"></a>Q3: MySQL</h3><p>Design a single table database to store the values from the form in Q1.</p><p>Create this database in phpMyAdmin on devweb2015 then update your PHP from Q2 to save into the database rather than emailing you.<br>Test your submissions using your form and phpMyAdmin to view the submissions.</p><h3 id="Q4-PHP-Error-Checking"><a href="#Q4-PHP-Error-Checking" class="headerlink" title="Q4: PHP Error Checking"></a>Q4: PHP Error Checking</h3><p>Add code to the PHP in Q1..3 to check:</p><ul><li>The name is completed</li><li>The telephone number is complete</li><li>The e-mail is complete (you could try using regular expressions)</li><li>One of Male or Female is selected</li><li>At least one day is selected [tricky]</li><li>Add PHP so that if the name field is all capitals, it is changed to Title Case before storing.</li></ul><h3 id="Q5-CSS"><a href="#Q5-CSS" class="headerlink" title="Q5: CSS"></a>Q5: CSS</h3><p>Write HTML for the left-hand image on the last page.</p><p>Add CSS styling to make the page look like the right-hand image with minimal changes to the HTML (you only need add class and id statements) (NB: the band at top bottom is dark blue, rest of page has light blue background)</p><p>Create a CSS box in the middle of the page with maximum width 700 pixels and a nice water like image outside this box.</p><p>Add a horizontal navigation menu at the top of the page with sections for “accommodation”, “local information”, and “weather”.</p><h3 id="Q6-Extensions"><a href="#Q6-Extensions" class="headerlink" title="Q6: Extensions"></a>Q6: Extensions</h3><p>Recode the checks in Q4 in JavaScript. [Why would you do this?]</p><ul><li>Add two date fields to your form from Q1 for “Application Date” and “Job Start Date” then</li><li>Add JavaScript to check the fields are date formatted</li><li>Add JavaScript to check that the job start date is after the application date</li><li>Add JavaScript to copy the value of the application date to the start date if it changes, and the user hasn’t yet entered a start date</li></ul><p>If you wish you may find a public domain Calendar function in JavaScript and include this in your code to show a little calendar for the start date.</p><p>Add an administrator interface for your database in Q3 that allows the user to view all submissions and delete rows – use phpMyAdmin to create the SQL for deletion and then copy that into PHP.</p><p>Finally add a new script (PHP page) that shows a specific row of the table nicely formatted for printing as a job application and link this into the table view (i.e. have a “print me” button link).</p>]]></content>
    
    <summary type="html">
    
      这是一个Lab作业代写，需要做5个Web页面。内容比较基础，不过涵盖了HTML, PHP, CSS, JavaScript以及MySQL的使用。
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：KIT101-Sentence-Cipher</title>
    <link href="https://tk1307993.coding.me/KIT101-Sentence-Cipher.html"/>
    <id>https://tk1307993.coding.me/KIT101-Sentence-Cipher.html</id>
    <published>2019-03-01T15:40:14.000Z</published>
    <updated>2019-03-01T15:43:39.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>For as long as people have been able to write they have tried to find ways to send messages secretly by hiding the message in some way. One way of encrypting a message is to hide it inside some other text. It works as follows: you and the intended message recipient both agree on a (large) piece of source text, such as a passage from a book, which you don’t share with anyone else. You then find a character position for each letter in your (much shorter) message within the larger piece of text, and send the list of positions. Here’s an example:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Source <span class="keyword">text</span> (secret): The quick brown fox jumps over <span class="keyword">the</span> lazy dog</span><br><span class="line">Message <span class="built_in">to</span> <span class="built_in">encrypt</span>: bread</span><br><span class="line">Encrypted message: <span class="number">10</span> <span class="number">11</span> <span class="number">2</span> <span class="number">36</span> <span class="number">40</span></span><br></pre></td></tr></table></figure></p><p>Of course, we could have taken alternative positions for ‘e’ (also found at positions 28 and 33) and ‘r’ (also at 29), but in this cipher we’ll always use the first occurrence of a letter.<br>If you look closely at the secret text above you’ll notice that it contains every letter in the English alphabet, which means we can encrypt any message we want (note we’ll be restricting ourselves to messages that do not contain spaces in this assignment). While this is likely to be true of any sufficiently long piece of text, what should we do if the message contains a letter not found in the secret text? In the absence of any valid substitute, let’s use 1 to indicate that it wasn’t found. Here’s an example of that:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Source <span class="built_in">text</span> (secret): The quick brown fox jumps <span class="keyword">over</span></span><br><span class="line">Message <span class="keyword">to</span> encrypt: beak</span><br><span class="line">Encrypted message: <span class="number">10</span> <span class="number">2</span> <span class="number">1</span> <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>ecovering the original message is simply a matter of looking up the character at each indicated position in the shared secret text, replacing any lost symbols with some agreed upon alternative, like ‘_’. A worked example:<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Source <span class="keyword">text</span> (secret): Shall I <span class="keyword">compare</span> thee <span class="keyword">to</span> a summer<span class="comment">'s day? Thou art more lovely and more temperate.</span></span><br><span class="line">Received message: <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">0</span> <span class="number">11</span> <span class="number">14</span> <span class="number">2</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line">Decrypted message: sha_espeare</span><br></pre></td></tr></table></figure></p><h3 id="Your-Assignment"><a href="#Your-Assignment" class="headerlink" title="Your Assignment"></a>Your Assignment</h3><p>Your assignment will consist of a single class, with all code in the main() method. Call your class SentenceCipher (that is, the source code will be in a file called SentenceCipher.java). If you choose to use an IDE other than DrJava, ensure that your program is not defined in a package (there should be no package statement at the top of the file).</p><p>When your assignment is complete, a user running your program will be prompted to enter the shared ‘source’ text, then asked if they want to encrypt or decrypt a message. The source text may contain any mixture of characters, including punctuation and spaces. Before continuing, the source text must be converted to all lower case.</p><p>After receiving the source text from the user, they will be asked to choose one of two options:</p><ol><li>Encrypt a message</li><li>Decrypt a message</li></ol><p>Note that both options finish by displaying the amount of information loss.</p><p>The three development and testing stages defined below will step you through creating a functioning cipher tool. You do not need to follow these suggested development stages, but if you do then a testing tool will be available that can run your partiallycompleted program with lots of different inputs and indicate when it works as expected and when it does not.</p><h3 id="General-guidance"><a href="#General-guidance" class="headerlink" title="General guidance"></a>General guidance</h3><p>Use the Scanner class (import it from the java.util package) to read the user’s input.</p><p>Your program will need to declare appropriate variables for holding the source text, user’s processing choice, and (for encryption) the word to be encrypted. Several other temporary variables will be needed.</p><p>Use constants to hold sensible default values and any special values that will be used repeatedly.</p><h3 id="Example-Sessions"><a href="#Example-Sessions" class="headerlink" title="Example Sessions"></a>Example Sessions</h3><p>In these example sessions the user’s input is highlighted. All other text is produced by the program.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Sentence Cipher</span><br><span class="line">Enter source text: The quick brown fox jumps over the lazy dog</span><br><span class="line"><span class="keyword">Select</span> a cipher <span class="keyword">option</span>:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">Encrypt</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">Decrypt</span></span><br><span class="line">Choice: <span class="number">1</span></span><br><span class="line">Enter word <span class="keyword">to</span> <span class="keyword">encrypt</span>: bread</span><br><span class="line"><span class="keyword">Result</span>: <span class="number">10</span> <span class="number">11</span> <span class="number">2</span> <span class="number">36</span> <span class="number">40</span> ‐<span class="number">2</span></span><br><span class="line">Information loss (%): <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">Sentence Cipher</span><br><span class="line">Enter <span class="keyword">source</span> <span class="built_in">text</span>: The <span class="keyword">quick</span> brown fox jumps</span><br><span class="line"><span class="keyword">Select</span> a cipher <span class="keyword">option</span>:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">Encrypt</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">Decrypt</span></span><br><span class="line">Choice: <span class="number">1</span></span><br><span class="line">Enter word <span class="keyword">to</span> <span class="keyword">encrypt</span>: tea</span><br><span class="line"><span class="keyword">Result</span>: <span class="number">0</span> <span class="number">2</span> ‐<span class="number">1</span> ‐<span class="number">2</span></span><br><span class="line">Information loss (%): <span class="number">33.33333333333333</span></span><br><span class="line"></span><br><span class="line">Sentence Cipher</span><br><span class="line">Enter <span class="keyword">source</span> <span class="built_in">text</span>: The <span class="keyword">quick</span> brown fox jumps</span><br><span class="line"><span class="keyword">Select</span> a cipher <span class="keyword">option</span>:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">Encrypt</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">Decrypt</span></span><br><span class="line">Choice: <span class="number">2</span></span><br><span class="line">Enter positions (‐<span class="number">2</span> <span class="keyword">to</span> <span class="keyword">end</span>): <span class="number">0</span> <span class="number">2</span> ‐<span class="number">1</span> ‐<span class="number">2</span></span><br><span class="line"><span class="keyword">Result</span>: te_</span><br><span class="line">Information loss (%): <span class="number">33.33333333333333</span></span><br></pre></td></tr></table></figure></p><p>which is identical to if the user pressed Enter between each position (no change to your program will be necessary)</p><h3 id="Development-Stages"><a href="#Development-Stages" class="headerlink" title="Development Stages"></a>Development Stages</h3><p>The three assignment stages take you through developing: a program that can encrypt or decrypt a single character; a program that can encrypt and decrypt an entire word; and finally a program that can process an entire word and report on characters that could not be encrypted or decrypted and invalid positions given during decryption. Only the final stage directly contributes to your mark for this assignment.</p><p>Over the coming weeks you are encouraged to complete and test each of the following stages in turn. You are of course free to complete each stage more quickly or even to jump straight to the last one (if you believe you have a perfect solution).</p><h3 id="Evaluation-and-testing-prior-to-submission"><a href="#Evaluation-and-testing-prior-to-submission" class="headerlink" title="Evaluation and testing prior to submission"></a>Evaluation and testing prior to submission</h3><p>Use the supplied testing tool to run automated tests on your program. The later tests also look for the number of invalid characters and information loss and will indicate if either is not found (when expected) or appears incorrect.</p>]]></content>
    
    <summary type="html">
    
      这次作业非常基础，属于刚入门的Java编程。实现一个对Sentence的加解密算法，算法类似哈希，存在不可逆/无解的情况。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMS227-StringList</title>
    <link href="https://tk1307993.coding.me/COMS227-StringList.html"/>
    <id>https://tk1307993.coding.me/COMS227-StringList.html</id>
    <published>2019-02-26T13:01:10.000Z</published>
    <updated>2019-02-26T13:03:49.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>This is a short set of problems using interfaces. You will implement a class called StringList that uses interfaces for performing various kinds of processing on streams of text, as well as some sample classes that implement those interfaces. In all, you’ll implement six classes:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringList.java</span><br><span class="line">NonCommentLineSelector.java</span><br><span class="line">CommentRemover.java</span><br><span class="line">LetterCollecter.java</span><br><span class="line">LineNumberer.java</span><br><span class="line">LocCounter.java</span><br></pre></td></tr></table></figure></p><p>Note that the file StringListTest.java, found in the default package, will not compile until you have created stubs for the six required classes.</p><p>None of the code is very complex; the purpose is just to get you thinking about interfaces a bit.</p><p>A StringList (not surprisingly) represents a list of strings. (Most likely, in fact, you’ll use an instance variable of type ArrayListto store the strings themselves.) The interesting part is in the operations map, filter, and reduce. These are based on the four interfaces defined in the package api: Combiner, IntCombiner, Selector, and Transformation. They are all very simple and have only one method each. You can take a look at the javadoc or sample code for more details.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public StringList map(<span class="name">Transformation</span> <span class="literal">t</span>)</span><br></pre></td></tr></table></figure></p><p>Returns a new StringList obtained by invoking the given Transformation’s apply method to each string in this StringList. The apply method just takes a string and returns a (possibly different) string.<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringList filter(<span class="keyword">Selector</span> <span class="keyword">selector</span>)</span><br></pre></td></tr></table></figure></p><p>Returns a new StringList containing only the elements of this StringList for which the Selector’s select method returns true. The select method just takes a string and returns true or false.<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> reduce(Combiner combiner, <span class="keyword">String</span> initialValue)</span><br></pre></td></tr></table></figure></p><p>Returns a string resulting from a reduction operation using the given Combiner and the given initial value. A Combiner has one method, combine, that takes two strings and returns a string. The idea of a “reduction” is to initialize an accumulator variable with the given initial value, and then to iterate over the list, replacing the accumulator value with the result of combining it with the next item in the list.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduce</span><span class="params">(IntCombiner combiner, <span class="keyword">int</span> initialValue)</span></span></span><br></pre></td></tr></table></figure></p><p>Returns an integer resulting from a reduction operation using the given IntCombiner and the given initial value. Similar to the reduce operation above, but the accumulated value is an int.</p><p>The meaning of the reduce operation may not be obvious. The next section of this document includes a detailed explanation and examples. You should also look at the example StringListTest.java. found in the default package of the sample code.<br>In addition to the StringList class, you’ll implement some examples of classes that implement the interfaces in the api package so you can try things out. These are:<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonCommentLineSelector</span> <span class="keyword">implements</span> <span class="title">Selector</span></span></span><br></pre></td></tr></table></figure></p><p>The select method returns true if the given string does not have “//“ as its first nonwhitespace characters.<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentRemover</span> <span class="keyword">implements</span> <span class="title">Transformation</span></span></span><br></pre></td></tr></table></figure></p><p>The apply method returns a new string in which any text following “//“ is removed.<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocCounter</span> <span class="keyword">implements</span> <span class="title">IntCombiner</span></span></span><br></pre></td></tr></table></figure></p><p>Given an integer n and a string, the combine method returns n if the string is a comment line, a blank line, or a line whose only text, other than an end-of-line comment, is a single curly brace; otherwise the method returns n + 1. (Using a LocCounter in the reduce method has the general effect of counting “lines of code” that are actual program statements.)<br><code>`public class LetterCollector implements Combiner</code><br>Given two strings first and second, appends onto first all characters in second that don’t already occur in first. (Using a LetterCollector in the reduce method returns a string in which each character occurring in the strings appears exactly once.) Not case sensitive.</p>]]></content>
    
    <summary type="html">
    
      本次作业是要实现一个StringList，具体是要求练习掌握Interface的编程方法。程序的主干代码已经给出，按照文档补充缺失的部分即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>OS代写：COMP3080-Memory-Allocation</title>
    <link href="https://tk1307993.coding.me/COMP3080-Memory-Allocation.html"/>
    <id>https://tk1307993.coding.me/COMP3080-Memory-Allocation.html</id>
    <published>2019-02-23T05:43:35.000Z</published>
    <updated>2019-02-23T05:46:00.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The program you will write will read a file which contains memory allocation requests and memory free operations. The allocation and free operations will be made against an initially empty fixed sized free memory pool. The program must support three allocation policies:</p><ul><li>First fit linked list</li><li>Best fit linked list</li><li>Buddy system power of 2 block allocation (using a minimum allocation of 32 bytes)</li></ul><h4 id="Your-program-must"><a href="#Your-program-must" class="headerlink" title="Your program must:"></a>Your program must:</h4><ol><li>Accept three command line arguments, such that argv[1] is the policy to use, argv[2] is the total memory free pool size and argv[3] is the name of the file containing the allocation and free requests. The memory size of the total free pool for the main test cases will be 1 MByte, and 512KB. You may use other sizes in any additional experiments you attempt, but make sure you describe your configuration and results in your write-up.</li><li>Read each line of the input file in argv[3] and carry out one of the following actions:</li><li>Make a memory allocation if enough memory is available to satisfy an allocation request.</li><li>Return memory to a linked list and carry out any coalescing (buddying up) required.</li><li>Refuse the allocation only if there is not enough memory to satisfy it in any available free partition. Refused requests are remembered, so that you know to take no action when you see the corresponding free operation in the input stream. (For each alloc there is a free.)</li><li>Generate one line of output for each line of input, providing information about which request this is, how the request was handled, what the total amount of free space after the request is, and what the size of the largest free partition after the request is. Sample input and output files are shown below.</li><li>So you should submit 6 files, each containing your output for the 1MB and 512KB cases for all three algorithms, and a final summary in your write-up that provides the results of each test in a format similar to:<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">First</span> <span class="keyword">Fit</span> <span class="number">1</span>MB: <span class="keyword">Total</span> Allocations <span class="number">490</span> of <span class="number">500</span></span><br><span class="line"><span class="keyword">First</span> <span class="keyword">Fit</span> <span class="number">512</span>KB: <span class="keyword">Total</span> Allocations <span class="number">374</span> of <span class="number">500</span></span><br><span class="line">Best <span class="keyword">Fit</span> <span class="number">1</span>MB: <span class="keyword">Total</span> Allocations <span class="number">492</span> of <span class="number">500</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="INPUT-FORMAT"><a href="#INPUT-FORMAT" class="headerlink" title="INPUT FORMAT:"></a>INPUT FORMAT:</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SERIAL-NUM   REQUEST   SIZE   SERIAL-MATCH</span><br><span class="line">    <span class="number">1</span>         alloc    <span class="number">20000</span></span><br><span class="line">    <span class="number">2</span>         alloc   <span class="number">100000</span></span><br><span class="line">    <span class="number">3</span>         alloc     <span class="number">5050</span></span><br><span class="line">    <span class="number">4</span>         free                  <span class="number">2</span></span><br><span class="line">    <span class="number">5</span>         alloc    <span class="number">70500</span></span><br><span class="line">    <span class="number">6</span>         free                  <span class="number">1</span></span><br><span class="line">    <span class="number">7</span>         alloc   <span class="number">400000</span></span><br></pre></td></tr></table></figure><h3 id="OUTPUT-FORMAT"><a href="#OUTPUT-FORMAT" class="headerlink" title="OUTPUT FORMAT:"></a>OUTPUT FORMAT:</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MANAGEMENT POLICY = First Fit       POOL SIZE = <span class="number">512</span> KB</span><br><span class="line">SERIAL-NUM   REQUEST   SIZE   ALLOC-ADDR   TOTAL-FREE   LARGEST-PART</span><br><span class="line">    <span class="number">1</span>         alloc    <span class="number">20000</span>           <span class="number">0</span>     <span class="number">504288</span>        <span class="number">504288</span></span><br><span class="line">    <span class="number">2</span>         alloc   <span class="number">100000</span>       <span class="number">20000</span>     <span class="number">404288</span>        <span class="number">404288</span></span><br><span class="line">    <span class="number">3</span>         alloc     <span class="number">5050</span>      <span class="number">120000</span>     <span class="number">399238</span>        <span class="number">399238</span></span><br><span class="line">    <span class="number">4</span>         free    <span class="number">100000</span>                 <span class="number">499238</span>        <span class="number">399238</span></span><br><span class="line">    <span class="number">5</span>         alloc    <span class="number">70500</span>       <span class="number">20000</span>     <span class="number">428738</span>        <span class="number">399238</span></span><br><span class="line">    <span class="number">6</span>         free     <span class="number">20000</span>           <span class="number">0</span>     <span class="number">448738</span>        <span class="number">399238</span></span><br><span class="line">    <span class="number">7</span>         alloc   <span class="number">400000</span>          <span class="number">-1</span>     <span class="number">448738</span>        <span class="number">399238</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本次作业要求实现内存分配(Memory Allocation)的三种算法：First fit, Best fit和Buddy memory allocation.
    
    </summary>
    
      <category term="OS" scheme="https://tk1307993.coding.me/categories/OS/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS204-B-tree</title>
    <link href="https://tk1307993.coding.me/CS204-B-tree.html"/>
    <id>https://tk1307993.coding.me/CS204-B-tree.html</id>
    <published>2019-02-20T13:46:00.000Z</published>
    <updated>2019-02-20T13:48:20.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Files-to-hand-in-are"><a href="#Files-to-hand-in-are" class="headerlink" title="Files to hand in are"></a>Files to hand in are</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BTree.cpp</span><br><span class="line">InternalNode.cpp</span><br><span class="line">InernalNode.h</span><br><span class="line">LeafNode.cpp</span><br><span class="line">LeafNode.h</span><br><span class="line">authors.csv</span><br></pre></td></tr></table></figure><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BTreeDriver.cpp</span><br><span class="line">BTreeDebugDriver.cpp</span><br><span class="line">BTree.cpp</span><br><span class="line">BTree.h</span><br><span class="line">BTreeNode.cpp</span><br><span class="line">BTreeNode.h</span><br><span class="line">InternalNode.cpp</span><br><span class="line">InernalNode.h</span><br><span class="line">LeafNode.cpp</span><br><span class="line">LeafNode.h</span><br><span class="line">Makefile (uses BTreeDebugDriver<span class="selector-class">.cpp</span> to produce BTree)</span><br><span class="line">Makefile2 (uses BTreeDriver<span class="selector-class">.cpp</span> to produce BTree2)</span><br><span class="line">QueueAr.cpp</span><br><span class="line">QueueAr.h</span><br><span class="line">vector.h</span><br><span class="line">vector.cpp</span><br><span class="line">dsexceptions.h</span><br></pre></td></tr></table></figure><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Your program will read a file that contains a series of integers that it will insert into a BTree, and then print to the screen a breadth first traversal of the BTree. Your task will be to provide the implementation code for the BTree, InternalNode, and LeafNode classes. Since the insert methods for the nodes will be quite long, you should add new methods so that no method is more than 30 lines long. We will not grade on style, but the TAs and I will be of little help with poor quality code. You may only alter those files that will be handed in. The program will take three command line parameters: 1) filename; 2) M, the number of children that internal nodes have; and 3) L, the number of integers each leaf node holds. The input file will not include more than 1000 integers. Since only integers will be stored in the BTree class, I did not implement it as a template. When a node splits, the new node created will always contain at least as many entries as the remaining old node, and will contain the larger values. The output must match that shown in the sample.</p><p>There is one change in the data structure from the book’s; the internal nodes should keep track of the minimum value for every child. You will find this easier than not having the minimum for the first child.</p><p>How did I write this code so fast? I used procedural abstraction. I thought about the tasks, their subtasks, and the subtasks of those subtasks. (You should write them down.) If I could state a subtask, then I planned on writing a separate function to do just that subtask. I found that the tasks of the InternalNode class matched that of the LeafNode class, so I postponed as much work on the InternalNode class as long as possible so that I could learn from my LeafNode mistakes. I worked top down with stubs for the subtasks, and got that iteration to compile without warnings! This avoids making the same mistake repeatedly—the compiler is a very good teacher. When I could do even minimal testing, I did it. What I learned from debugging kept me from duplicating those mistakes in later code, and reminded me of issues that I had forgot about. Sometimes when I addressed a new issue in a method I discovered that I had to add a lot of code. If there is a whole lot of new code, the issue deserved its own method with an appropriate name. It is a simple matter of cutting and pasting, and keeps each method short, and understandable. By the time I was done my LeafNode class had nine methods, and no method has more than 30 lines. Once the LeafNode class worked perfectly, I copied the LeafNode class methods as InternalNode class methods, and did a search and replace from values to keys! Though there are child sibling and parent issues for the InternalNode class, the basic LeafNode code provided a great starting point. In the end my InernalNode class had 13 methods. In comparison to the first time I wrote this with long insert functions a few years ago, the debugging was much faster this time because of the small methods</p>]]></content>
    
    <summary type="html">
    
      次需要代写的作业是用C++实现一个B-tree，给了基本的框架代码，以及给定的输入和输出样式。虽然不难写，但是这种作业稍微有一个Bug，就会导致排查相当麻烦。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>PHP代写：CS306-Hotel-Reservation-System</title>
    <link href="https://tk1307993.coding.me/CS306-Hotel-Reservation-System.html"/>
    <id>https://tk1307993.coding.me/CS306-Hotel-Reservation-System.html</id>
    <published>2019-02-16T10:18:37.000Z</published>
    <updated>2019-02-16T01:16:11.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Relational database</p><p>User accounts (two roles)</p><p>Variety of user tasks</p><h3 id="Project-idea-Hotel-Research-and-Booking"><a href="#Project-idea-Hotel-Research-and-Booking" class="headerlink" title="Project idea: Hotel Research and Booking"></a>Project idea: Hotel Research and Booking</h3><p>We are going to set up a website about a hotel reservation. There are two roles accounts, hotel holder and customers’ account. The hotel holder account would be unique that allowed the hotel manager to control the status of room and manage the booking information. And the purpose of users’ accounts is going to remember the booking history, customers’ information, manage the current reservation, and get VIP points services.</p><h3 id="Two-roles-of-Project"><a href="#Two-roles-of-Project" class="headerlink" title="Two roles of Project"></a>Two roles of Project</h3><p>Customers – the users who want to book hotel on website</p><p>Hotel Holder – hotel account to check the reservations for a specific hotel</p><h3 id="Customer-User-Tasks"><a href="#Customer-User-Tasks" class="headerlink" title="Customer User Tasks"></a>Customer User Tasks</h3><ol><li>User login &amp; register</li><li>Hotel room reservation – search by criteria</li><li>User account<ol><li>1) Booking History</li><li>2) Current Booking —- Revise, Cancel, Change check-in date, etc</li><li>3) View History</li><li>4) Reset Password</li><li>5) Account information (E-mail, name, phone, etc)</li></ol></li><li>Discount information &amp; VIP System</li></ol><h3 id="Hotel-User-Tasks"><a href="#Hotel-User-Tasks" class="headerlink" title="Hotel User Tasks"></a>Hotel User Tasks</h3><p>Management Reservations</p><ol><li>After contacting, changing, canceling, and upgrading book information</li><li>Able to check customer information (phone, name, e-mail, etc)</li><li>Control the status of each hotel room</li><li>Online Chat (Optional)</li></ol><h3 id="Database"><a href="#Database" class="headerlink" title="Database:"></a>Database:</h3><ol><li>User information database (name, phone, e-mail, password, points etc)</li><li>Hotel information database (price, room type, etc)</li><li>Booking information table (user id, hotel id, reservation id, check-in data, check-out date, addition information etc)</li></ol><h3 id="Evaluation-Criteria"><a href="#Evaluation-Criteria" class="headerlink" title="Evaluation Criteria"></a>Evaluation Criteria</h3><p>This is what I’ll be looking for in your final product.</p><ul><li>Functionality: does the app allow users to perform core tasks?</li><li>Usability: is performing those tasks a smooth and easy experience?</li><li>Aesthetics: do the pages have a reasonable appearance?</li><li>MVC design: does the code follow the Model-View-Controller pattern?</li><li>Table design: are the database tables reasonably organized?</li><li>Security: does the code avoid injection vulnerabilities?</li></ul><p>Consider using Bootstrap instead of styling from scratch. It’s not required, but it could save you considerable time for more important things.</p><p>JavaScript is also not required, but it can enhance usability. Don’t plan to use it everywhere, but consider where small amounts could have a postive impact.</p>]]></content>
    
    <summary type="html">
    
      写一个完整的酒店管理系统，包括至少两个角色，Customers和Hotel Holder。
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Mysql" scheme="https://tk1307993.coding.me/tags/Mysql/"/>
    
      <category term="MVC" scheme="https://tk1307993.coding.me/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part5</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part5.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part5.html</id>
    <published>2019-02-13T10:18:37.000Z</published>
    <updated>2019-02-13T10:21:42.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="User-Accounts-amp-Basic-Security"><a href="#User-Accounts-amp-Basic-Security" class="headerlink" title="User Accounts &amp; Basic Security"></a>User Accounts &amp; Basic Security</h3><p>Now it is time to add persistence to your server by creating user accounts. The user can then login and out of the server using a password. The server must be modified to contain a shared resource which holds user account information. Additionally, the login protocol must be updated to allow for account validation, eg. passwords.</p><blockquote><p>You will replace the login protocol from Part I with the account login protocol.</p></blockquote><h3 id="Password-Criteria"><a href="#Password-Criteria" class="headerlink" title="Password Criteria"></a>Password Criteria</h3><p>Passwords must meet the following criteria to be valid:</p><ul><li>Must be at least 5 characters in length</li><li>Must contain at least 1 uppercase character</li><li>Must contain at least 1 symbol character</li><li>Must contain at least 1 number character<blockquote><p>Example: Cool320!</p></blockquote></li></ul><p>When the user types in the password, use the gctpass function so the password is not displayed as it is typed.</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>Usage updated:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">/server </span>[-hv] PORT_NUMBER MOTD [ACCOUNTS_FILE]</span><br><span class="line">-h             Displays help menu &amp; returns EXIT_SUCCESS.</span><br><span class="line">-v             Verbose <span class="builtin-name">print</span> all<span class="built_in"> incoming </span><span class="keyword">and</span> outgoing protocol verbs &amp; content.</span><br><span class="line">PORT_NUMBER   <span class="built_in"> Port </span>number <span class="keyword">to</span> listen on.</span><br><span class="line">MOTD           Message <span class="keyword">to</span> display <span class="keyword">to</span> the<span class="built_in"> client </span>when they connect.</span><br><span class="line">ACCOUNTS_FILE  File containing username <span class="keyword">and</span> password data <span class="keyword">to</span> be loaded upon execution.</span><br></pre></td></tr></table></figure></p><p>The server will request a password when a user attempts to log in. Also, it will create a new password for new users when they identify themselves upon login. There should now be two data structures central to your program: a Users list and an Accounts list. The Users list is a list of the users currently logged into the server. The Accounts list is the persistent list of users and their passwords loaded and saved to a file on the server’s execution and termination respectively. If an accounts file is provided on the command line, your server should load this file into the accounts list upon start-up. If no file is provided, the server should start with no existing accounts.</p><blockquote><p>Do not use an array for either of these data structures, it MUST be an extendable format such as a linked list within your server program.</p></blockquote><h3 id="Added-Server-Command"><a href="#Added-Server-Command" class="headerlink" title="Added Server Command"></a>Added Server Command</h3><h4 id="accts"><a href="#accts" class="headerlink" title="/accts"></a>/accts</h4><p>When /accts is typed into the server’s terminal it should dump a list of all user accounts and information. This printout should be similarly formatted to the output of the /users command.</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>To add user authentication we will modify the client program to take an additional argument for creating a new user on the server. When the optional -c argument is included, the client will attempt to create a new user on the server. If the argument is not provided, the client will attempt to login to the server as an existing user with an account.<br>Usage updated:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">/client </span>[-hcv] NAME SERVER_IP SERVER_PORT</span><br><span class="line">-h             Displays this help menu, <span class="keyword">and</span> returns EXIT_SUCCESS.</span><br><span class="line">-c             Requests <span class="keyword">to</span><span class="built_in"> server </span><span class="keyword">to</span> create a new user</span><br><span class="line">-v             Verbose <span class="builtin-name">print</span> all<span class="built_in"> incoming </span><span class="keyword">and</span> outgoing protocol verbs content.</span><br><span class="line">NAME           This is the username <span class="keyword">to</span> display when chatting.</span><br><span class="line">SERVER_IP      The ipaddress of the<span class="built_in"> server </span><span class="keyword">to</span> connect <span class="keyword">to</span>.</span><br><span class="line">SERVER_PORT    The<span class="built_in"> port </span><span class="keyword">to</span> connect <span class="keyword">to</span>.</span><br></pre></td></tr></table></figure></p><h3 id="User-Authentication-Protocol"><a href="#User-Authentication-Protocol" class="headerlink" title="User Authentication Protocol"></a>User Authentication Protocol</h3><p>The protocol for logging into the server will now additionally include user creation. We will introduce new verbs IAMNEW, HINEW, NEWPASS.</p><blockquote><p>Remember when the client prompts the user to enter their password, use the getpass function so the password is not displayed as it typed.</p></blockquote><p>Once a user account has been established with the server, on subsequent client connections the user must be validated. We will introduce new verbs AUTH, HINEW, NEWPASS.</p>]]></content>
    
    <summary type="html">
    
      这是这一系列作业的最后一部分了，这部分包括用户账户管理以及安全的实现，此外还有一些杂项和收尾工作。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part4</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part4.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part4.html</id>
    <published>2019-01-30T13:38:23.000Z</published>
    <updated>2019-01-30T13:41:46.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="User-to-User-Chats"><a href="#User-to-User-Chats" class="headerlink" title="User to User Chats"></a>User to User Chats</h3><p>In this part you will be enhancing your client to allow for communication between other clients. In order to separate individual user to user chats, you will need to implement a chat executable program which your client will execute as child processes. Using the xterm program in tandem with this chat executable you’ll be able to create a client that spawns new windows as needed to display chats. The behavior will emulate what you may be familiar with on facebook or google hangouts functionality in terms of automatically spawning new small windows dedicated for chatting as opposed to monopolizing the user’s entire view of the screen.</p><p>When a client wants to begin a chat session with another user, they type into the client window on stdin the client command /chat. This will trigger the client to send to the server a new verb, MSG. The MSG verb will be used for communication of ALL chat messages between the server and client. Let’s consider an example:</p><ol><li>Paul initiates chat using the /chat command, the message is formatted into the MSG\r\n\r\n protocol and sent to the server.<br>When the server receives the MSG verb, it sends the same message back to both the To and FROM user.</li><li>When Paul’s and Neal’s client receive the MSG\r\n\r\n back from the server, the client program will create a UNIX Domain Socket to share with the child process (for the pop-up chat window) to communicate over, then fork and execv an xterm terminal which will run your ./chat program.</li><li>The chat program is a simple program which takes input from stdin and sends to the Client program, prints on stdout messages from the client program, and handles the command /close which terminates the child process (same as closing the terminal window).</li></ol><p>This is the initial creation of all user to user chats. Once both users have an xterm chat window open for communication, the users can freely type messages to each other. Incoming messages should be proceeded by the &gt; symbol and outgoing messages by &lt; in the chat window. With each message entered in the xterm on stdin, the chat program should relay the information to the client through their Unix Domain socket. The client then converts the message into the Wolfie Protocol MSG verb and sends to the server. The below figure illustrates the steps.</p><p>A user can close a chat window at anytime using either the close button on the xterm window or by using the command /close. When the window is closed on one client it has no impact on the client who was chatting with the user. In the figure below Paul closed the chat window but Neal still has it open. When Neal types a message to Paul it is sent to the server (Step 1). The sewer will forward the message back to Paul &amp; Neal (Step 2). Since Paul has no existing window, his client creates a new window and displays the message. Neal’s client will just display the message since the xterm is already open.</p><p>Paul closed the chat window and then wants to send Neal a new message. To initiate the chat again, he would need to type /chat command in his client. This will send the MSG verb to the sewer (Step 1 in figure below). Upon the server’s response, Paul’s client would spawn a new chat window. Neal and Paul’s chat windows will then both display the</p><p>Overall, the protocol MSG verb is generic. The server has no knowledge of the chat windows open or closed. It is the client program’s responsibility to open, close, and manage the chat windows. In this way, it doesn’t matter if the xterm window is closed because every time MSG is received the client will check to see if a window already exists for communicating with theuser and if not it will fork and exec a new xterm process to become the window needed for communication. If the window does exist then the message is passed through the Unix domain socket and displayed appropriately on the chat window.</p><p>If one of the user’s disconnects from the server or does not exist, but a message is sent to this user, the server will respond with an ERR message.</p><h3 id="Added-Client-command"><a href="#Added-Client-command" class="headerlink" title="Added Client command"></a>Added Client command</h3><h4 id="chat"><a href="#chat" class="headerlink" title="/chat"></a>/chat</h4><p>The /chat command requires the name of the user to send the message to and the message to be sent. The client program will send to the server the MSG verb to communicate the message to the other user.</p><h4 id="logout"><a href="#logout" class="headerlink" title="/logout"></a>/logout</h4><p>Update the functionality of the command to now additionally close all the chat windows and all file descriptors prior to exiting the client program.</p><h3 id="Chat-Program"><a href="#Chat-Program" class="headerlink" title="Chat Program"></a>Chat Program</h3><p>Usage:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./chat UNIX_SOCKET_FD</span><br><span class="line">UNIX_SOCKET_FD          The Unix Domain <span class="keyword">File</span> Descriptor <span class="keyword">number</span>.</span><br></pre></td></tr></table></figure></p><p>When the server sends MSG verb to your client it should fork and exec xterm, which in turn will exec your chat program in a basic terminal. This will act as the interface to communicate with another user much like chats on Facebook or hangouts work. These will act as the small popups to chat in while the client remains the manager for the connection with the server. The chat program will use Unix domain sockets to communicate with the parent client process. Using socketpair() you can declare two anonymous sockets and pass the file descriptor to the chat program as an argument. You can also declare the sockets as you would normally using socket(). In either case you must use AF_UNIX as the domain.</p><p>xterm is a powerful terminal emulator as it allows for a lot of customization using command line arguments. You should study the man page for xterm to see what arguments will help make your program as easy to use as possible. To get you started, the format to fork and exec the ./chatprogram in xterm is as follows:</p><blockquote><p>Example execution string: “xterm -geometry 45x35+%d -T %s -e ./chat. %d”</p></blockquote><p>Each of the arguments have the following meaning.</p><ul><li><p>-geometry geometry: This argument allows you to set the size and location of the xterm window opened. Geometry format is described here under “geometry specifications”. However, all you really need to know is that is takes the format WIDTHxHEIGHT+XOFF+YOFF where width and height are in characters and XOFF and YOFF is in pixels. In the suggested execution string above you can see that you can omit the YOFF value and you can use sprintf to set the XOFF so the windows spawned are not stacked on one another.</p></li><li><p>-T string: With this flag you can set the title of the string to the username being communicated with so the user has a quick reference of which window is chatting with whom. Use %s format specifier to insert the username for the chat.</p></li><li><p>-e program [arguments … ]: finally there is the most important flag. -e specifies the executable to be run when the terminal opens. The arguments to the program follow immediately after as you would type them in the terminal. The execution string shows how you would pass the unix domain socket file descriptor. Use %s format specifier for the file descriptor of the Unix domain socket.</p></li></ul><p>The chat program should prompt the user for input, anything the user types in followed by pressing the enter-key should be considered a message with the exception of the /close command. The /close command simply closes the window and the Unix domain socket in the parent. There is no protocol messages that need to be exchanged with the server when this command is used. The Client forwards each MSG received to the corresponding chat window via each open chat’s Unix domain socket.</p><p>The protocol has new verbs that must be implemented to support these user features. As we have seen in the figures, the MSG verb will deliver the information of who the message is to, whom it is from, and the message being sent. Additionally, add a new verb, UOFF, which will be used to notify ALL clients connected to the server of a user logging out or disconnecting from the server.</p><h3 id="Client-crash-or-error-termlnatlon"><a href="#Client-crash-or-error-termlnatlon" class="headerlink" title="Client crash or error termlnatlon"></a>Client crash or error termlnatlon</h3><p>Crashes happen so the UOFF verb should handle both the case of a client disconnecting and of a client logging off. If someone’s chatting partner disconnects and the chat window is still open for that user, when the UOFF verb is received, the chat window should print a message that informs the user of the disconnection. The xterm window should then close on any key press. This is to prevent the user from attempting to send anything to a disconnected user. Think about how the server can handle errors when trying to pass along user messages, and accordingly turn that error into a UOFF broadcast verb to notify all clients of the user’s disconnection.</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>On the server side the communication threads must handle receiving and sending messages to the proper clients using the MSGprotocol defined in the prior figures. The server also must handle forwarding the UOFF verb to all still connected clients when a user disconnects or logs off the server.</p>]]></content>
    
    <summary type="html">
    
      这是接之前作业的第四部分，这部分主要用xterm来实现用户和用户之间的聊天协议，涉及到的知识点有domain socket, fork, exec, pipe, socketpair。此外，还需要处理network programming中常见的网络异常情况，如client crash, error termination等。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
</feed>
