<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生计算机编程数学统计作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804 微信：349583866</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="cplusplusdaixie.com/"/>
  <updated>2023-10-07T02:01:28.454Z</updated>
  <id>cplusplusdaixie.com/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R代写：STAT311_homework4</title>
    <link href="cplusplusdaixie.com/STAT311-homework4.html"/>
    <id>cplusplusdaixie.com/STAT311-homework4.html</id>
    <published>2023-10-07T02:00:07.000Z</published>
    <updated>2023-10-07T02:01:28.454Z</updated>
    
    <content type="html"><![CDATA[<p>This assignment does not use any data sets but will include a few parts of problems where you will<br>copy/paste R code with answers. Parts of a few problems are modified from McClave and Sincich,<br><em>Statistics</em> , Ninth Edition and from Mendenhall, Beaver and Beaver, <em>Introduction to Probability and<br>Statistics</em> , 13th Edition.</p><ul><li>You may handwrite or type up this assignment and submit as a pdf file. Do not use rmarkdown for<br>  this assignment.</li><li>If you handwrite your assignment, you can write down your R code with the answers in the few places<br>  where you are to show your R code.</li><li>Be sure to show work as needed. If you simply put down a numeric answer it will be marked wrong,<br>  even if the number is correct.</li><li>All requested interpretations should be in complete sentences.</li><li>Round all probabilities to four decimal points if reporting as a decimal value. Okay to report fractions.</li></ul><ol><li>A fair six-sided die is tossed, and the up face is noted. If the number is ≤ 2 the die is tossed again; if<br> the number is &gt; 2 , an unfair coin with 𝑃𝑃(𝐻𝐻)= 0 .3 is tossed. Define the events:<br> 𝐴𝐴: {A tail appears on the coin} and 𝐵𝐵: {The die is tossed only one time}<br> a) List the sample points in the sample space [Hint: there are 20 sample points].<br> b) Give the probability for each of the sample points.<br> c) Find _P_ ( _A_ ) and _P_ ( _B_ ).<br> d) Identify the sample points in _Ac_ , _Bc_ , 𝐴𝐴 ∩𝐵𝐵, and 𝐴𝐴 ∪𝐵𝐵.<br> e) Find _P_ ( _Ac_ ), _P_ ( _Bc_ ), 𝑃𝑃(𝐴𝐴∩𝐵𝐵), 𝑃𝑃(𝐴𝐴∪𝐵𝐵), _P_ ( _A_ | _B_ ), and _P_ ( _B_ | _A_ ).<br> f) Are _A_ and _B_ mutually exclusive events? Why?<br> g) Are the events _A_ and _B_ independent? Justify your answer using an equation.</li><li>A balanced six-sided die is thrown once. If a 2, 3, or 4 appears, a ball is drawn from urn 1; otherwise,<br> a ball is drawn from urn 2. Urn 1 contains 18 red and 10 white balls. Urn 2 contains 15 red, 4 white,<br> and 6 black balls.<br> a) Find the probability that a white ball is drawn.<br> b) Find the probability that urn 1 was used given that a white ball was drawn.</li><li>Eighty-three percent of all women who submit to pregnancy tests are pregnant. A new pregnancy test<br> gives a false positive result with probability 0.03 and a correct positive result with probability 0.98.<br> Define the events: _P_ : {a woman is pregnant} and _+_ : {the pregnancy test is positive}.<br> a) What is the sensitivity of this test? Explain in layperson terms what this means.<br> b) What is the specificity of this test? Explain in layperson terms what this means.<br> c) What is the false negative rate (FNR) for this test? Explain in layperson terms what this means.</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d) What <span class="keyword">is</span> the unconditional probability that <span class="keyword">this</span> test produces a positive result? Explain <span class="keyword">in</span> layperson</span><br><span class="line">terms what <span class="keyword">this</span> means.</span><br><span class="line">e) For a randomly chosen woman who receives a positive result using <span class="keyword">this</span> test, what <span class="keyword">is</span> the probability</span><br><span class="line">that she <span class="keyword">is</span> not pregnant? Interpret <span class="keyword">this</span> result.</span><br></pre></td></tr></table></figure><ol start="4"><li>Bicycle accidents in Seattle are on the rise. City officials estimate that a busy right hand turn from a<br> bike lane onto a busy arterial in the Roosevelt neighborhood has 0.7 bicycle accidents per week. Let<br> 𝑋𝑋 be the number of bicycle accidents that occur at this intersection over the next eight weeks.<br> a) What probability distribution can you use to model 𝑋𝑋?<br> b) Calculate the probability that are between two and four bicycle accidents, inclusive, occur at this<pre><code>intersection in the next eight weeks. Write out the equation you need with numbers substituted butsolve using R. Copy/paste or write your R code here, with the answer.</code></pre></li><li>During a tight job market, recruiters have noticed that graduating seniors with an intermediate<br> proficiency in a second language have a higher probability of getting a first interview following a<br> screening call when seeking their first job out of college. For students with one language, the<br> probability of getting a first interview following a screening call is 0.3, whereas for graduating seniors<br> with a second language the probability is 0.45. Let 𝑋𝑋 be the number of screening calls a graduating<br> senior with an intermediate proficiency in a second language must take up to and including getting<br> their first interview.<br> a) Name a probability distribution that you could use to find probabilities of _X_. Do not forget to<pre><code>include values of any parameters.</code></pre> b) On average, how many screening calls must a graduating senior with an intermediate proficiency<pre><code>in a second language go through before getting their first interview?</code></pre> c) What is the exact probability that a graduating senior with an intermediate proficiency in a second<pre><code>language must have at least five screening calls up to get their first interview? Write down theformula you would use with numbers substituted but use R to calculate the answer. Copy and pasteyour R code here with the answer from R.</code></pre></li><li>A psychiatrist believes that 55% of all people who visit doctors have problems that are of a<br> psychosomatic nature. She selects 25 patients at random to test her theory. Let _X_ be the number of<br> patients with psychosomatic problems out of the 25 patients.<br> a) What is the sample space for 𝑋𝑋?<br> b) What probability distribution can you use to model 𝑋𝑋? Make sure to name the distribution and<pre><code>the values of any parameters.</code></pre> c) Assuming the psychiatrist’s theory is true, what is the expected value of _X_ , the number of the 25<pre><code>patients who have psychosomatic problems?</code></pre> d) What is the standard deviation of _X_ , assuming the theory is true?<br> e) What is the exact probability that 𝑋𝑋 ≤ 4 in any given case? Write down the formula you would<pre><code>use with numbers substituted but use R to calculate the answer. Copy and paste your R code herewith the answer.</code></pre></li></ol><ol start="7"><li>A growing number of students seeking a teaching credential are choosing paid internships over<br> traditional student teaching assignments. A group of 12 candidates for four local teaching positions<br> consisted of seven candidates who had enrolled in paid internships and five who had enrolled in<br> traditional student teaching positions. We will assume that all 12 candidates are equally qualified for<br> the four open positions. Let 𝑋𝑋 be the number of internship-trained candidates that get hired for these<br> four open positions.<br> a) Name a probability distribution that you could use to find probabilities of _X_. Do not forget to<pre><code>include values of any parameters.</code></pre> b) What is the probability that three internship trained candidates are hired for the four positions.<pre><code>Write out the equation you need with numbers substituted but solve using R. Copy/paste your Rcode here, with the answer from R.</code></pre> c) What is the probability at least two of the internship-trained candidates are hired for the four<pre><code>positions. Write out the equation you need with numbers substituted but solve using R. Copy/pasteyour R code here, with the answer from R.</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      使用R语言完成
    
    </summary>
    
      <category term="R" scheme="cplusplusdaixie.com/categories/R/"/>
    
    
      <category term="R" scheme="cplusplusdaixie.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：INFO1113_COMP9003_Project</title>
    <link href="cplusplusdaixie.com/INFO1113-COMP9003-Project.html"/>
    <id>cplusplusdaixie.com/INFO1113-COMP9003-Project.html</id>
    <published>2023-10-02T02:41:01.000Z</published>
    <updated>2023-10-02T02:41:58.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="INFO1113-COMP9003-Assignment"><a href="#INFO1113-COMP9003-Assignment" class="headerlink" title="INFO1113 / COMP9003 Assignment"></a>INFO1113 / COMP9003 Assignment</h3><h4 id="Due-14-May-2023-11-59PM-AEST"><a href="#Due-14-May-2023-11-59PM-AEST" class="headerlink" title="Due: 14 May 2023 , 11:59PM AEST"></a>Due: 14 May 2023 , 11:59PM AEST</h4><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This assignment <span class="keyword">is</span> worth <span class="number">1</span> <span class="number">8</span> <span class="comment">% of your final grade.</span></span><br></pre></td></tr></table></figure><h2 id="Task-Description"><a href="#Task-Description" class="headerlink" title="Task Description"></a>Task Description</h2><p>In this assignment, you will create a game in the Java programming language using the Processing library<br>for graphics and gradle as a dependency manager. In the game, the player must be able to move chess<br>pieces on a chess board in order to play against an AI, ultimately capturing the opponent’s pieces and<br>executing a strategy to checkmate the opponent’s king.</p><p>You have been given the task of developing a prototype of the game. A full description of gameplay<br>mechanics and entities can be found below. An artist has created a simple demonstration of the game<br>and has posted it on your online forum (Ed). You can also play a similar game here.</p><p>You are encouraged to ask questions on Ed under the assignments category if you are unsure of the<br>specification – but staff members will not be able to do any coding or debugging in this assignment for<br>you. As with any assignment, make sure that your work is your own, and do not share your code or<br>solutions with other students.</p><h2 id="Working-on-your-assignment"><a href="#Working-on-your-assignment" class="headerlink" title="Working on your assignment"></a>Working on your assignment</h2><p>You have been given a scaffold which will help you get started with this assignment. You can download<br>the scaffold onto your own computer and invoke gradle build to compile and resolve dependencies. You<br>will be using the Processing library within your project to allow you to create a window and draw<br>graphics. You can access the documentation from here.</p><h2 id="Gameplay"><a href="#Gameplay" class="headerlink" title="Gameplay"></a>Gameplay</h2><p>The game contains a number of entities that will need to be implemented within your application.</p><h3 id="Board"><a href="#Board" class="headerlink" title="Board"></a>Board</h3><p>The board consists of a grid of tiles 14x14. Each tile is 48 x 48 pixels, so the total is 672 x 672 pixels.<br>However, there are 120 pixels on the right sidebar reserved for information such as timers showing the<br>number of minutes and seconds remaining on each player’s clock, and warnings or other messages for the<br>user. The window size is therefore 792x 672.</p><p>The board is arranged in a checkerboard pattern as below with alternating black and white tiles. These are<br>fixed and do not change. Pieces sit atop these tiles, and the tiles may change colour shade to indicate<br>highlights for particular reasons.</p><p>There are 4 main types of highlights:</p><ul><li>Blue – the player clicked on a piece, and it is able to move to this square.</li><li>Light red – the currently selected piece can move to this square, capturing the current piece there</li><li>Green – the player’s currently selected piece</li><li>Yellow – the last piece to move, and the square it came from</li><li>Dark red – the king on this square is currently in check, or checkmate has occurred (pieces that<br>  contribute to the checkmate are highlighted in light red)</li></ul><p>The initial piece layout is defined in a file named in the “layout” attribute of the JSON configuration file<br>described below.</p><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The<span class="built_in"> config </span>file is <span class="keyword">in</span> located <span class="keyword">in</span> config.json <span class="keyword">in</span> the root</span><br><span class="line">directory of the project. Use the<span class="built_in"> simple </span>json library <span class="keyword">to</span></span><br><span class="line">read it. Sample<span class="built_in"> config </span><span class="keyword">and</span> level files are provided <span class="keyword">in</span> the</span><br><span class="line">scaffold.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The config sample <span class="keyword">as</span> shown <span class="built_in">to</span> <span class="keyword">the</span> left, <span class="keyword">contains</span> <span class="keyword">the</span></span><br><span class="line">name <span class="keyword">of</span> <span class="keyword">the</span> layout <span class="built_in">file</span>. This is also located <span class="keyword">in</span> <span class="keyword">the</span> root</span><br><span class="line"><span class="built_in">directory</span> <span class="keyword">of</span> <span class="keyword">the</span> project. The layout <span class="built_in">file</span> will contain <span class="keyword">a</span></span><br><span class="line">grid <span class="keyword">of</span> <span class="keyword">text</span> <span class="keyword">characters</span>, where <span class="keyword">each</span> <span class="keyword">character</span></span><br><span class="line">represents <span class="keyword">the</span> piece that should be <span class="keyword">in</span> that cell.</span><br><span class="line">Uppercase <span class="keyword">characters</span> are <span class="keyword">for</span> <span class="keyword">black</span>, <span class="keyword">and</span> lowercase are</span><br><span class="line"><span class="keyword">for</span> white. See <span class="keyword">the</span> table below.</span><br></pre></td></tr></table></figure><p>Empty spaces are empty tiles. All maps used for marking will be valid, but you should write your own tests<br>for invalid maps and handle them as you see fit.</p><p>The “time_controls” section contains the amount of time to be given to player 1 and player 2 (player 2 is<br>the computer - cpu). Seconds it the total time they start with, which is consumed while they are thinking<br>about a move. The “increment” is a number in seconds added to their remaining time once they make a<br>move.</p><p>The “player_colour” property denotes the colour of the pieces of player 1 (the human player). It should<br>either have the value “white” or “black”. If player 1 is white, then player 2 is black. If player 1 is black,<br>then player 2 is white. Whoever is white has the first move, as in regular chess.</p><p>Layout file See page 5 for images of movement<br>Black White Chess piece Value Sprites Movement<br>P p Pawn 1 One space forward. Captures<br>diagonally only. If blocked, cannot<br>move.<br>R r Rook 5.25 Horizontally and vertically.</p><p>N n Knight 2 2 squares vertical, 1 horizontal, or<br>vice versa<br>B b Bishop 3.625 Diagonally in any direction.</p><p>H h Archbishop 7.5 Like Knight + Bishop</p><p>C c Camel 2 3 squares vertical, 1 horizontal, or<br>vice versa<br>G g General/Guard 5 Like Knight + King</p><p>A a Amazon 12 Like Knight + Bishop + Rook</p><p>K k King ∞ 1 space in any direction. Cannot<br>move into danger.<br>E e Chancellor 8.5 Like Knight + Rook</p><p>Q q Queen 9.5 Like Bishop + Rook</p><h3 id="Movement"><a href="#Movement" class="headerlink" title="Movement"></a>Movement</h3><p>The “piece_movement_speed” property in the config denotes how fast in pixels per frame a piece move<br>should occur. This is limited by the “max_movement_time”, a number in seconds that the movement<br>time should not exceed. If the movement would exceed this amount of time, the speed is increased to<br>ensure it doesn’t take longer. Moves occur at a constant speed, with the chess piece smoothly<br>transitioning in a straight line from its original position to its new position.</p><p>To trigger a move, the player must first select a piece by clicking on the cell it’s located in. Then, click to<br>the cell the piece should move to. If the player instead selects one of their other pieces, then that piece<br>becomes selected instead. If the player clicks on the selected piece again, or an invalid move, it becomes<br>unselected.</p><p>Normal movement of pieces is described in the table above. The king, queen, bishop, knight, rook and<br>pawn all have the same movement as in regular 8x8 chess. For the purposes of pawn movement,<br>“forward” is considered going up the board for the human player, and going down the board for the<br>computer player.</p><p>In addition, be mindful of the following special moves.</p><p>Special moves:</p><ul><li>A pawn can move two squares forward if it is located on 2nd row from the top or bottom of the<br>  board (rank 2 and rank 13), and has not moved before.</li><li>A king may perform a ‘castling’ move if it has not moved before, which allows it to move two<br>  squares horizontally in either direction so long as there is also a rook towards the direction it will<br>  move (on the same rank), and that rook hasn’t moved. When this move is performed, the rook is<br>  placed on the other side of the king, adjacent to it.</li><li>Pawn promotion: When a pawn reaches the 8th rank (ie. when it crosses the halfway point on the<br>  14x14 board), then it is promoted to a queen. It immediately turns into a queen and can be used<br>  as such in all subsequent moves</li></ul><p>Only a camel or knight move may jump over pieces (or the rook when castling), and a player may not<br>move a piece onto a cell already containing one of their own pieces. If a move causes the piece to enter a<br>tile containing one of the opponent’s pieces, the opponent’s piece is ‘captured’ and removed from the<br>board. All pieces capture on the same tiles as their regular movement, with the only exception being<br>pawns which capture diagonally forwards instead, if there is a piece there. This is the only time they are<br>allowed to move diagonally. If there is a piece directly in front of a pawn, it is blocked and cannot move to<br>the cell occupied by that piece.</p><p>Examples of possible moves for each piece are shown below.</p><p><em>Figure 1 : Archbishop movement<br>Figure 2 : Amazon movement<br>Figure 3 : Bishop movement</em></p><p><em>Figure 4 : General/Guard movement</em></p><p><em>Figure 5 : Camel movement</em> (^) <em>Figure 6 : Rook movement</em>^<br><em>Figure 7 : Knight movement<br>Figure 8 : King movement. The king cannot<br>move to squares controlled by an<br>opponent’s piece.<br>Figure 9 : Chancellor movement. The camel<br>and generals block movement in the left<br>direction, but knight moves can still jump<br>over (same for other knight combinations).<br>Figure 10 : Pawn movement. The pawn<br>can only move diagonally when<br>capturing and cannot move directly<br>forward if blocked.<br>Figure 11 : Queen movement</em></p><h3 id="Check-and-Checkmate"><a href="#Check-and-Checkmate" class="headerlink" title="Check and Checkmate"></a>Check and Checkmate</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If after a move, a king is under attack, the king is said to be in ‘check’.</span><br><span class="line">Under this circumstance, the player whose king is in<span class="built_in"> check </span>must do one</span><br><span class="line">of the following (all must already be legal moves):</span><br></pre></td></tr></table></figure><ul><li>Move their king to a safe square</li><li>Move a piece to block the attack</li><li>Capture the attacking piece</li></ul><p>This is because otherwise, the player would lose their king on the next turn, and therefore lose the game.<br>If none of these possibilities are available, then the player has been checkmated – there is no move<br>available to them that would save their king, and they have lost.</p><p>When check occurs, the king’s square is highlighted in dark red, and the message “Check!” appears in the<br>right sidebar. If a player attempts to make an otherwise legal move that doesn’t protect their king, display<br>a message on the right sidebar: “You must defend your king!”, and the highlighted cell the king is on will<br>flash 3 times with a duration of 0.5 seconds each.</p><p>A player cannot make a move that would result in their king coming under attack. This could be any of<br>either:</p><ul><li>Moving the king to a square which is under attack by the opponent</li><li>Moving a piece that is blocking an attack on their king by the opponent (this piece is said to be<br>  ‘pinned’)</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Illegal moves due to<span class="built_in"> check </span>or pins should<span class="built_in"> not </span>be highlighted as blue tiles</span><br><span class="line">when selecting a piece to potentially<span class="built_in"> move </span>it – only legal moves should be</span><br><span class="line">highlighted.</span><br></pre></td></tr></table></figure><h3 id="Computer-AI-movement"><a href="#Computer-AI-movement" class="headerlink" title="Computer AI movement"></a>Computer AI movement</h3><p>The way the computer player determines moves is up to you. It can be as simple as choosing a move<br>randomly out of all available legal moves. However, you should try and make it at least a bit intelligent.<br>For example, here is guidance on some basic rules you might want to have:</p><ul><li>Capture a piece if the piece’s value is higher than the capturing piece, and if multiple such options<br>  exist, choose the one with the highest difference</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Figure 12 : The black king is in <span class="keyword">check</span> due <span class="keyword">to</span> the white chancellor. Black</span><br><span class="line">cannot <span class="keyword">move</span> their king, their <span class="keyword">only</span> <span class="keyword">option</span> <span class="keyword">is</span> <span class="keyword">to</span> <span class="keyword">move</span> their <span class="keyword">General</span> <span class="keyword">or</span></span><br><span class="line">Amazon <span class="keyword">to</span> <span class="keyword">block</span> (assuming there <span class="keyword">is</span> <span class="keyword">no</span> piece <span class="keyword">off</span>-screen that can capture</span><br><span class="line">the white chancellor).</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Figure <span class="number">13</span> : The selected pawn is pinned <span class="keyword">by</span> <span class="keyword">the</span> archbishop, so cannot move. However</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">the</span> archbishop was <span class="literal">one</span> <span class="literal">space</span> closer <span class="built_in">to</span> <span class="keyword">it</span> diagonally, <span class="keyword">then</span> <span class="keyword">the</span> pawn would be able</span><br><span class="line"><span class="built_in">to</span> capture <span class="keyword">the</span> archbishop but <span class="keyword">not</span> move straight forward. If <span class="keyword">the</span> king was <span class="keyword">on</span> <span class="title">the</span></span><br><span class="line">square <span class="literal">one</span> <span class="literal">space</span> below where <span class="keyword">it</span> currently is, <span class="keyword">then</span> <span class="keyword">the</span> camel would be pinned <span class="keyword">by</span> <span class="keyword">the</span></span><br><span class="line">bishop.</span><br></pre></td></tr></table></figure><ul><li>If a piece is threatened to be captured by a piece of lower value (or any piece if the threatened<br>  one is undefended), move it</li><li>Prefer to only move to squares that are not under attack by a piece of lower value (or even a<br>  piece of higher or equal value if the square is undefended) – let’s call these ‘safe squares’</li><li>If possible, attack the opponent’s king or a square adjacent to it if it’s not already under attack</li><li>If possible, checkmate the opponent’s king</li><li>If all else fails, choose a random move (prefer safe squares, but it’s possible none may be<br>  available)</li></ul><h3 id="Win-and-lose-conditions"><a href="#Win-and-lose-conditions" class="headerlink" title="Win and lose conditions"></a>Win and lose conditions</h3><p>The game ends when either one player runs out of time, or their king is checkmated. Then other player<br>wins.</p><p>If the human player wins by checkmate, display a message saying “You won by checkmate” in the right<br>sidebar. If the human player wins due to the timer, display instead “You won on time”.</p><p>If the human player loses by checkmate, display a message saying “You lost by checkmate” in the right<br>sidebar. If instead the cause was the timer, display “You lost on time”.</p><p>The player can also resign the game by pressing ‘e’ on the keyboard. The game ends and the message<br>“You resigned” is displayed in the right sidebar.</p><p>When the game ends, the board remains intact and<br>frozen so that the player cannot make any moves<br>(but may restart the game with the key press ‘r’). If<br>checkmate occurred, the board should highlight the<br>king of the checkmated player in red and the pieces<br>contributing to checkmate in orange. Pieces<br>contributing to checkmate are defined as a piece that<br>is either attacking the king or one of the empty<br>squares adjacent to it, or defending a piece that the<br>king could otherwise capture. For each such square,<br>there should only be one piece highlighted.</p><p>If there are no legal moves for a player, then the<br>game is considered a draw and enters the end state.<br>Display the message “Stalemate – draw”.</p><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>Your application will need to adhere to the following specifications:</p><ul><li>The window must have dimensions 672x</li><li>The game must maintain a frame rate of 60 frames per second.</li><li>Your application must be able to compile and run on any the university lab machines (or Ubuntu<br>  VM) using gradle build &amp; gradle run. Failure to do so, will result in 0% for Final Code Submission.</li><li>Your program must not exhibit any memory leak.</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Figure <span class="number">14</span> : <span class="type">The</span> white king <span class="keyword">is</span> checkmated. The</span><br><span class="line">contributing pieces are the archbishop <span class="keyword">and</span> two pawns.</span><br></pre></td></tr></table></figure><ul><li>You must use the processing library (specifically processing.core and processing.data), you cannot<br>  use any other framework such as javafx, awt or jogl</li></ul><p>You have been provided a /resources folder which your code can access directly (please use a relative<br>path). These assets are loadable using the <em>loadImage</em> method attached to the PApplet type. Please refer<br>to the processing documentation when loading and drawing an image. You may decide to modify these<br>sprites if you wish to customise your game. You will be required to create your own sprites for any<br>extensions you want to implement.</p><h2 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h2><p>The extension is worth 2 marks maximum. For an extension, you can choose to implement one of the<br>following:</p><ul><li>New piece type with different movement and/or special behaviour</li><li>Start menu to select options without having to change the config file</li><li>More complex computer AI (specify difficulty in config?)</li><li>Option for 2-player in config (two human players)</li><li>Option for fog of war chess in config (Tiles not able to be moved to are greyed out. The only<br>  pieces of the opponent’s that are visible are those which are present on tiles available to be<br>  moved to. Game ends upon king capture.)</li><li>Sound effects</li><li>Expandable resizable board (drag corners to change game resolution)</li><li>More pawn promotion options rather than just promote to queen – user can choose while in-<br>  game</li><li>Allow pre-moves (and/or drag and drop pieces rather than just click to move)</li><li>Allow different types of new configurable pieces (combinations) within the json config file, and<br>  what their symbol would be in the layout</li><li>Multiple levels specified in the config for the purpose of solving chess puzzles / problems.</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OR, <span class="keyword">a</span> feature you come up <span class="keyword">with</span> which is <span class="keyword">of</span> <span class="keyword">a</span> similar <span class="keyword">or</span> higher level <span class="keyword">of</span> complexity (ask your tutor)</span><br></pre></td></tr></table></figure><p>Please ensure you submit a config and level layout file with the features of your extension, and ensure the<br>extension doesn’t break any of the default behaviour. Also, describe your extension functionality in the<br>report.</p><h2 id="Marking-Criteria-18"><a href="#Marking-Criteria-18" class="headerlink" title="Marking Criteria (18%)"></a>Marking Criteria (18%)</h2><p>Your final submission is due on Sunday 14 May at 11:59PM. To submit, you must upload your build.gradle<br>file and src folder to Ed. Please also include sample config and layout files that you have tested with your<br>program to ensure it works. Do NOT submit the build folder (unless you only include the build/reports/<br>folder which contains the results of your testing and code coverage). Ensure src is in the root directory<br>with the other files, and not part of a zip, then press MARK. Submit your report and UML to canvas.</p><p>A demo of your assignment will be conducted during labs in week 12 where you will demonstrate the<br>features you have created to your tutor.</p><h3 id="Final-Code-Submission-and-Demo-10"><a href="#Final-Code-Submission-and-Demo-10" class="headerlink" title="Final Code Submission and Demo (10%)"></a>Final Code Submission and Demo (10%)</h3><p>You will need to have implemented and satisfied requirements listed in this assignment. Make sure you<br>have addressed the following and any other requirements outlined previously.</p><ul><li>Window launches and shows checkerboard pattern.</li><li>Configuration file is correctly read in – timers display correctly</li><li>Map loads and pieces are displayed in correct positions</li><li>Piece colour for player and computer is correct</li><li>Pieces are controlled by mouse clicks<br>  o A piece can be selected – green highlight appears<br>  o Potential moves show in blue highlights, or red for potential captures<br>  o Clicking on a highlighted blue/red cell cause the selected piece to move to that location<br>  o Captured pieces are deleted properly</li><li>Pieces move correctly according to the table of their movement</li><li>Piece movement – is smooth and correct speed</li><li>If a move causes the opponent’s king to come under attack, display “Check!” and highlight the<br>  king’s tile in dark red.</li><li>While the king is in check, only moves to save the king are allowed:<br>  o Capture the attacking piece<br>  o Move a piece to block<br>  o Move the king to a safe square</li><li>A move that causes your own king to be in check is not allowed:<br>  o Moving the king to a square that is under attack<br>  o Moving a pinned piece that was blocking an attack on the king</li><li>Special moves: Pawn can move two squares initially, Castling, Pawn promotion to queen on the<br>  8 th rank (ie. when passing the halfway point)</li><li>Computer AI moves automatically after the player makes their move</li><li>Computer AI only makes legal moves</li><li>Game ends if either player runs out of time – message is displayed correctly</li><li>Game ends if either player is checkmated – message is displayed correctly</li><li>Pieces contributing to checkmate have their tiles highlighted in red</li><li>Player can resign if they want to by pressing ‘e’</li><li>Timer counts down and increments according to config after a move is made</li><li>Ensure that your application does not repeat large sections of logic</li><li>Ensure that your application is bug-free</li></ul><h3 id="Testcases-3"><a href="#Testcases-3" class="headerlink" title="Testcases (3%)"></a>Testcases (3%)</h3><p>During development of your code, add testcases to your project and test as much functionality as<br>possible. You will need to construct unit test cases within the src/test folder using JUnit. To test the state<br>of your entities without drawing, implement a simple loop that will update the state of each object but<br>not draw the entity.</p><p>Ensure your test cases cover over 90% of execution paths (Use jacoco in your gradle build) Ensure your<br>test cases cover common cases. Ensure your test cases cover edge cases. Each test case must contain a<br>brief comment explaining what it is testing. To generate the testing code coverage report with gradle<br>using jacoco, run “gradle test jacocoTestReport”.</p><h3 id="Design-Report-UML-and-Javadoc-3"><a href="#Design-Report-UML-and-Javadoc-3" class="headerlink" title="Design, Report, UML and Javadoc ( 3 %)"></a>Design, Report, UML and Javadoc ( 3 %)</h3><p>You will need to submit a report that elaborates on your design. This will include an explanation of any<br>object-oriented design decisions made (such as reasons for interfaces, class hierarchy, etc) and an<br>explanation of how the extension has been implemented. This should be no longer than 500 words. This<br>report will be submitted through Canvas.</p><p>You will need to submit a UML diagram in PDF form to Canvas to provide a brief graphical overview of<br>your code design and use of Object Oriented Principles such as inheritance and interfaces. Markers will<br>use this to determine whether you have appropriately used those principles to aid you in your design, as<br>well as figure out whether more should have been done. A general guideline is that markers will be<br>looking for some use of inheritance or interfaces, how extensible the code is, and penalising repeated<br>code. Note that you should not simply use a UML generator from an IDE such as Eclipse, as they typically<br>do not produce diagrams that conform to the format required. We suggest using software such as<br>LucidChart or draw.io for making your diagrams.</p><p>Your code should be clear, well commented and concise. Try to utilise OOP constructs within your<br>application and limit repetitive code. The code should follow the conventions set out by the Google Java<br>Style Guide. As part of your comments, you will need to create a Javadoc for your program. This will be<br>properly covered in week 11 but the relevant Oracle documentation can be found here.</p><p>Report, UML and OO design: 2%<br>Javadoc, comments, style and readability: 1 %</p><h3 id="Extension-2"><a href="#Extension-2" class="headerlink" title="Extension (2%)"></a>Extension (2%)</h3><p>Implement an extension as described above. Partial marks may be awarded if you choose a more limited<br>extension or it is partially completed. Please specify what extension you decided to implement within<br>your report.</p><h2 id="Suggested-Timeline"><a href="#Suggested-Timeline" class="headerlink" title="Suggested Timeline"></a>Suggested Timeline</h2><p>Here is a suggested timeline for developing the project. Note that it is released on April 3 (start of week 7 )<br>and due May 14 (end of week 1 1 ).</p><p><strong>Week 7 :</strong> Familiarise yourself with gradle and processing, utilising the processing Javadoc and week 8<br>supplementary lecture. Identify opportunities to utilise Object Oriented Design principles such as<br>inheritance and interfaces and begin to plan a design for the codebase with regards to the classes that<br>you will need to make. Make a rough UML diagram for your design that you can base your codebase from.</p><p><strong>Week 8:</strong> Begin writing the actual code for the program. Start small, for example by initially creating the<br>board layout and pieces, then gradually add more elements. At the end of the week, you should have<br>loading in the board and piece movement finished, as well as some sprite management. If confident, use<br>Test Driven Development (writing test cases at same time as writing the code). Conduct a large amount of<br>user testing to ensure the initial mechanics work as expected.</p><p><strong>Weeks 9 - 10 :</strong> Develop more gameplay features, such as check, checkmate, special moves, and the<br>computer AI. Sprite management should be streamlined at this point. You should have a fairly high code<br>coverage for your test cases at this stage. If you are noticing any questionable design decisions, such as<br>God classes or classes that are doing things they logically should not be doing, this is the time to refactor<br>your code. Think about what extension you want to make and start to implement it.</p><p><strong>Week 11 :</strong> Finish developing the remaining features for your program, notably the configuration file, and<br>timers. Additionally, finish writing your testing suite. Create the UML and Javadoc for the program. Fix any<br>remaining bugs that your code exhibits. Submit your code to Ed (by uploading the entire project and<br>pressing MARK) and submit your UML to Canvas in PDF form.</p><p><strong>Week 12:</strong> Demonstrate the completed program to your tutor during the week 12 lab. They will check each<br>criteria item has successfully been completed, and may ask you questions about how you implemented it<br>to test your understanding.</p><h2 id="Academic-Declaration"><a href="#Academic-Declaration" class="headerlink" title="Academic Declaration"></a>Academic Declaration</h2><p>By submitting this assignment you declare the following:</p><p><em>I declare that I have read and understood the University of Sydney Student Plagiarism: Coursework Policy<br>and Procedure, and except where specifically acknowledged, the work contained in this<br>assignment/project is my own work, and has not been copied from other sources or been previously<br>submitted for award or assessment.</em></p><p><em>I understand that failure to comply with the Student Plagiarism: Coursework Policy and Procedure can lead<br>to severe penalties as outlined under Chapter 8 of the University of Sydney By-Law 1999 (as amended).<br>These penalties may be imposed in cases where any significant portion of my submitted work has been<br>copied without proper acknowledgment from other sources, including published works, the Internet,<br>existing programs, the work of other students, or work previously submitted for other awards or<br>assessments.</em></p><p><em>I realise that I may be asked to identify those portions of the work contributed by me and required to<br>demonstrate my knowledge of the relevant material by answering oral questions or by undertaking<br>supplementary work, either written or in the laboratory, in order to arrive at the final assessment mark.</em></p><p><em>I acknowledge that the School of Computer Science, in assessing this assignment, may reproduce it<br>entirely, may provide a copy to another member of faculty, and/or communicate a copy of this assignment<br>to a plagiarism checking service or in-house computer program, and that a copy of the assignment may be<br>maintained by the service or the School of Computer Science for the purpose of future plagiarism checking.</em></p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="OO" scheme="cplusplusdaixie.com/categories/OO/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>机器学习代写：COMP4446_COMP5046_A2</title>
    <link href="cplusplusdaixie.com/COMP4446-COMP5046-A2.html"/>
    <id>cplusplusdaixie.com/COMP4446-COMP5046-A2.html</id>
    <published>2023-09-29T05:12:29.000Z</published>
    <updated>2023-09-29T05:13:49.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="COMP-4446-5046-Assignment-2"><a href="#COMP-4446-5046-Assignment-2" class="headerlink" title="COMP 4446 / 5046 Assignment 2"></a>COMP 4446 / 5046 Assignment 2</h3><p>Due:Monday,May15th(ie.,thestartofweek 12 ofsemester)</p><p>Inthisassignment,youwilllearnaboutakeypartofNLP:dataannotation.Thisisoftenthe<br>mostcriticalpartofworkonaproject.Ifyoudonotcreateaccuratedatasetsfortrainingand<br>evaluationthenitdoesn’tmatterhowgoodyourmodelis,youwillnotbeabletobuildan<br>effectivesystem.</p><p>Theassignmenthasaseriesofstages.Notethatafterstage 1 youneedtowaitforusto<br>sendyouafilebeforeyoucandostage 2 (andtherestoftheassignment).Wewillrespond<br>within 3 businessdays.</p><h2 id="0-Forming-Groupsof1-3-students"><a href="#0-Forming-Groupsof1-3-students" class="headerlink" title="0 - Forming Groupsof1-3 students"></a>0 - Forming Groupsof1-3 students</h2><p>Youmayworkonyourownorinagroupof 2 or 3 students.Youneedtodotwothingsinthis<br>stage:</p><ol><li>FormgroupsonCanvas.Seeinstructionshere.</li><li>Onceyouhaveyourgroup,pleasewriteitdowninthisspreadsheet.</li></ol><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PleaserecordboththemembersinyourgroupandthegroupIDyouhaveinCanvas.</span><br></pre></td></tr></table></figure><h2 id="1-InitialAnnotation"><a href="#1-InitialAnnotation" class="headerlink" title="1 - InitialAnnotation"></a>1 - InitialAnnotation</h2><p>Inthissectionoftheassignment,youwillannotatedata(~2,500tokensoftext)anddevelop<br>annotationguidelinesthatdescribeyourannotationprocess.Thisannotationshouldbedone<br>byyou,notbyanAImodel.</p><ol><li>Downloadthedatafromhere.</li><li>Findthefilethatmatchesyourgroupnumber(fromthespreadsheetinstage0).</li><li>Read theinitial annotationguide(GoogleDocorWordDoc).Note,theguidehas<br> beenupdatedtoincludethatnestednamedentitiesshouldbeannotated.Theguide<br> hasanexample.</li><li>Eachstudentinyourgroupshouldindependently,withoutdiscussion,annotatethe<br> fileandkeepnoteson(a)examplesofeachcategory,and(b)explanationsofwhat<br> youchosetodoinunusualcases,alongwithexamples.</li></ol><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Note:</span>youmaydiscusstechnicaldecisionsaboutwhattooltouseforannotation,how</span><br><span class="line"><span class="built_in">tosetitup,</span>debuggingrunningit,etc.</span><br></pre></td></tr></table></figure><ol start="5"><li>Storeyourannotationsasa“.txt”filewithonelineperannotation,inthisformat:</li></ol><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((<span class="name">linestart</span>,tokenstart),(<span class="name">lineend</span>,tokenend))-label</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">For example,ifa Personentity spannedthefirsttwotokensinthethirdline,you</span><br><span class="line"><span class="symbol">wouldhave:</span></span><br></pre></td></tr></table></figure><h3 id="2-0-2-1-PER"><a href="#2-0-2-1-PER" class="headerlink" title="((2, 0), (2, 1)) - PER"></a>((2, 0), (2, 1)) - PER</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">For</span> <span class="selector-tag">itemsthat</span> <span class="selector-tag">spana</span> <span class="selector-tag">singletokenyoumaysaveitinoneoftwoways</span>(eitheris</span><br><span class="line">acceptable):</span><br><span class="line">((<span class="number">0</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">5</span>)) <span class="selector-tag">-</span> <span class="selector-tag">PER</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">5</span>) <span class="selector-tag">-</span> <span class="selector-tag">PER</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Note:</span></span><br><span class="line"><span class="string">○</span> <span class="string">Thenumberingstartsfrom</span> <span class="number">0</span></span><br><span class="line"><span class="string">○</span> <span class="string">Tokensarespecifiedbysplittingthefileonwhitespace</span></span><br><span class="line"><span class="string">○</span> <span class="string">Blanklinescountwhendeterminingthelinenumber</span></span><br></pre></td></tr></table></figure><ol start="6"><li>Meetasagroupandcreateanewversionoftheannotationguidethatadds:<br> ○ Newexamplesofeachcategorythatcomefromyourdata.<br> ○ Discussionofunusualcases,withthedecisionseachofyoumadeandwhat<pre><code>yourgrouphasdecidedisthebestapproachinfuture.</code></pre></li></ol><p>Todotheannotation,youmayuseanytoolyoulike.WerecommendSLATE,whichfollows<br>thefileformatdescribedabove.Someotherfreeoptionsaredocanno,andINCEpTION.If<br>youuseatoolthathasanauto-annotationmodeorsemi-automaticannotationmode(e.g.<br>bratandprodi.gyhavesuchmodes),pleasedonotuseitinthisassignment.Allannotations<br>shouldbedonebyyou.</p><p><strong>Submit-<a href="https://canvas.sydney.edu.au/courses/" target="_blank" rel="noopener">https://canvas.sydney.edu.au/courses/</a> 48399 /assignments/ 446897</strong></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(a)PDFofyourannotationguide</span></span><br><span class="line"><span class="comment">(b)Textfilescontainingannotations</span><span class="string">,</span><span class="comment">onetextfileforeachpersoninyourgroup</span></span><br></pre></td></tr></table></figure><h2 id="2-Adjudicationand-Refinement"><a href="#2-Adjudicationand-Refinement" class="headerlink" title="2 - Adjudicationand Refinement"></a>2 - Adjudicationand Refinement</h2><p>Inthissection,youwilladjudicatedisagreementsintheannotationsofyourfile.Ifyourgroup<br>hasNmembersthenyouwillbecomparingN+!annotationfiles(theextraoneistheonewe<br>providetoyou).Thisadjudicationshouldbedonebyyou,notbyanAImodel.</p><ol><li>Downloadtheannotationsweprovideandfindthefileforyourgroup.</li><li>Go through the annotations as a group and resolve every case where the<br> annotationsdonotmatch.Afterdoingthisyoushouldhaveasinglefilethatisthe<br> agreedannotations.</li><li>Atthesametime,addandremoveexamplesandexplanationsfromyourannotation<br> guidesothatitexplainsyourdecisions.<pre><code>a. For content you want to remove from the annotation guide, draw a line   throughthetext(ie.,astrikethrough).b. Forcontentyouwanttoadd,includeitinbluetextsoitisclearlydifferentfrom   theoriginaltext(whichshouldbeinblack).</code></pre></li></ol><p>Note-youshouldnotaddorremoveentirelabeltypeshere.Alwaysusethe 6 typeswe<br>specifiedintheinitialannotationguide.Youareonlychangingtheguidetoclarifyhowtodo<br>annotationforcasesthatmightbeambiguousortricky.</p><p><strong>Submit-<a href="https://canvas.sydney.edu.au/courses/" target="_blank" rel="noopener">https://canvas.sydney.edu.au/courses/</a> 48399 /assignments/ 452047</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">a</span>)PDFoftherevisedannotationguidewithstrikethroughsandbluetext</span><br><span class="line">(<span class="name">b</span>)Textfileofthefinalannotations</span><br></pre></td></tr></table></figure><h2 id="3-Improved-Annotation"><a href="#3-Improved-Annotation" class="headerlink" title="3 - Improved Annotation"></a>3 - Improved Annotation</h2><p>Now,youwillannotateanotherpieceoftext,usingyourrevisedguidelines.Thisannotation<br>shouldbedonebyyou,notbyanAImodel.</p><ol><li>Downloadthedatafromhere.</li><li>Findthefilethatmatchesyourgroup</li><li>Independently, withoutdiscussion,eachstudentinyourgroupshouldannotatethe<br> file.</li></ol><p><strong>Submit-<a href="https://canvas.sydney.edu.au/courses/" target="_blank" rel="noopener">https://canvas.sydney.edu.au/courses/</a> 48399 /assignments/ 452048</strong></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(a)Textfilesofyourannotations</span><span class="string">,</span><span class="comment">onetextfileforeachperson</span></span><br></pre></td></tr></table></figure><h2 id="4-Evaluation-Metrics"><a href="#4-Evaluation-Metrics" class="headerlink" title="4 - Evaluation Metrics"></a>4 - Evaluation Metrics</h2><p>Inthissection,youwillimplementametrictoseehowconsistentyourannotationsare.</p><ol><li>ImplementF-Score(seelecture 8 orthiswikipediaarticle).Note,tobeconsidereda<br> match,anannotationmusthavethesamespanandthesamelabel.</li><li>Calculate F-Score for each pair of annotations in stage (1) of the assignment,<br> including theannotationswe provide.If youareworkingonyourownthismeans<br> calculatingtheF-Scorebetweenyourannotationsandtheonesweprovided.Ifyou<br> areinagroupof 2 youwillcalculatethreevalues(personA-personB),(personA-<br> provided),(person B-provided). Ifyouareinagroup of 3 youwillcalculatesix<br> values.</li></ol><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ifyouareworkinginagroupwith2+peoplethenalsocalculatetheaverageofthe</span><br><span class="line">values.</span><br></pre></td></tr></table></figure><ol start="3"><li>Repeatthepreviousstepusingthedatafromstage(3)oftheassignment.Ifyouare<br> workingonyourown,youshouldcomparewiththeoutputinthisfile.</li></ol><p><strong>Submit-<a href="https://canvas.sydney.edu.au/courses/" target="_blank" rel="noopener">https://canvas.sydney.edu.au/courses/</a> 48399 /assignments/ 452051</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Anipynbfilecontaining</span><span class="params">(a)</span><span class="title">yourcodeforcalculatingthemetricsand</span><span class="params">(b)</span><span class="title">theresultsof</span></span></span><br><span class="line"><span class="function"><span class="title">yourcalculationsin</span><span class="params">(<span class="number">2</span>)</span><span class="title">and</span><span class="params">(<span class="number">3</span>)</span></span>.</span><br></pre></td></tr></table></figure><h2 id="5-Model-Evaluation"><a href="#5-Model-Evaluation" class="headerlink" title="5 - Model Evaluation"></a>5 - Model Evaluation</h2><p>Inthissection,youwillmeasuretheaccuracyonyourdataofthreewidely-usedmodels.</p><ol><li>RunFlair,SpaCy,andStanzaonyourdata.Note,youshouldusetheir18-classNER<br> models.</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The <span class="number">18</span> classesthosemodelsproduceinclude <span class="number">5</span> oftheonesweconsiderhere.You</span><br><span class="line">should post-processthe outputof themodels toremovecaseswheretheyusea</span><br><span class="line"><span class="function"><span class="title">labelwearenotusing</span><span class="params">(e.g.TIME)</span></span>.</span><br></pre></td></tr></table></figure><ol start="2"><li>Evaluateonyourdatafromstage 2 (ie.,theadjudicateddata).</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Note</span>:Youwillneedtomaptheiroutputtoourformat.Sometimestokenisationwillnot</span><br><span class="line"><span class="symbol">matchup</span> exactly. That’sokay-<span class="keyword">it </span>willimpact scores, <span class="keyword">butyouwill </span>stillbe ableto</span><br><span class="line"><span class="symbol">comparethethree.</span></span><br></pre></td></tr></table></figure><p><strong>Submit-<a href="https://canvas.sydney.edu.au/courses/" target="_blank" rel="noopener">https://canvas.sydney.edu.au/courses/</a> 48399 /assignments/ 452052</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="type">Text</span> filescontainingthe outputofthe threemodels onyour adjudicated <span class="class"><span class="keyword">data</span></span></span><br><span class="line">(stage2),intheformatspecifiedinstage <span class="number">1</span></span><br><span class="line">(b)<span class="type">Atextfilecontaining</span>:</span><br></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flair-<span class="built_in">SCORE</span></span><br><span class="line">SpaCy-<span class="built_in">SCORE</span></span><br><span class="line">Stanza-<span class="built_in">SCORE</span></span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Where‘SCORE’isreplacedbytheF-Scoreforcomparingthemodel’soutputtoyour</span><br><span class="line">adjudicatedannotations.</span><br></pre></td></tr></table></figure><h2 id="6-Bonus-Competition"><a href="#6-Bonus-Competition" class="headerlink" title="6 - [Bonus]Competition"></a>6 - [Bonus]Competition</h2><p>Thisisanoptionalsectionwhereyoutrainmodelsforthistask.Wewillprovideallofthe<br>datastudentshavesubmittedinstages1,2,and3,whichyoucanusefortraining.Youwill<br>betestedonaseparatedatasetannotatedbythetutors.</p><p>Moredetailsofthecompetitionwillbereleasedlater.Itwillalsohaveadeadline 1 weekafter<br>the main assignment deadline (May 22nd). There will be NO EXTENSIONS for the<br>competition.</p><p>The competition can either be completed in the same group as for the rest of the<br>assignment,oronyourown.</p><p>Ifyoureceivebonusmarksandtheytakeyouroverallmarkfortheassignmentover 20 (ie.<br>100%)thenthebonuscancounttoyouroverallnon-examcoursemark.</p><h2 id="Mark-Allocation"><a href="#Mark-Allocation" class="headerlink" title="Mark Allocation"></a>Mark Allocation</h2><p>Thetablebelowshowsthevalueofeachsection,brokendownacrosstheitemsyousubmit.</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Section</span> Value Breakdown</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>- InitialAnnotation <span class="number">5</span> <span class="number">2</span> - Annotations</span><br><span class="line"><span class="symbol">2 </span>- Annotationguideexamples</span><br><span class="line"><span class="symbol">1 </span>- Annotationguideexplanations</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> - Adjudicationand</span><br><span class="line">Refinement</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">2</span> - Adjudicatedannotations</span><br><span class="line"><span class="symbol">3 </span>- Annotationguideupdates</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span>- ImprovedAnnotation <span class="number">2</span> <span class="number">2</span> - Annotations</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span>- EvaluationMetrics <span class="number">4</span> <span class="number">2</span> - Code</span><br><span class="line"><span class="symbol">2 </span>- Resultsforthetwocalculationsusingthecode</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span>- ModelEvaluation <span class="number">4</span> <span class="number">1</span> - Flairoutput</span><br><span class="line"><span class="symbol">1 </span>- SpaCyoutput</span><br><span class="line"><span class="symbol">1 </span>- Stanzaoutput</span><br><span class="line"><span class="symbol">1 </span>- Scoresforthethreemodels</span><br></pre></td></tr></table></figure><p>Note:YourannotationsMUSTmatchthefileformatwespecifiedinstage1.Iftheydonot,<br>youwillscore 0 forthem.</p><p>Bonuspointsinthecompetitionareawardedasfollows:</p><ul><li>Top25%ofentrants,+1point</li><li>Top10%ofentrants,+2points</li><li>Top 2 entrants,+3points</li></ul>]]></content>
    
    <summary type="html">
    
      使用HTML+CSS+JS, Java完成
    
    </summary>
    
      <category term="机器学习" scheme="cplusplusdaixie.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JS代写：EECS4413_Lab01</title>
    <link href="cplusplusdaixie.com/EECS4413-Lab01.html"/>
    <id>cplusplusdaixie.com/EECS4413-Lab01.html</id>
    <published>2023-09-21T08:46:16.000Z</published>
    <updated>2023-09-21T08:47:27.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="EECS-4413-LAB-0-1-HTML-CSS-JS-Java"><a href="#EECS-4413-LAB-0-1-HTML-CSS-JS-Java" class="headerlink" title="EECS 4413. LAB 0 1 : HTML+CSS+JS, Java"></a>EECS 4413. LAB 0 1 : HTML+CSS+JS, Java</h3><h5 id="A-IMPORTANT-REMINDERS"><a href="#A-IMPORTANT-REMINDERS" class="headerlink" title="A. IMPORTANT REMINDERS"></a>A. IMPORTANT REMINDERS</h5><ul><li>Lab 1 is due on <strong>Thursday (May 25 ) at 9 pm</strong>. No late submission will be accepted.</li><li>For this lab, you are welcome to attend the lab sessions on this and next Wednesday (May 17,24).<br>  TAs or instructor will be available t. help you. The location is LAS1002. Attendance is optional.</li><li>Feel free to signal a TA for help if you stuck on any of the steps below. Yet, note that TAs would<br>  need to help other students too.</li><li>You can submit your lab work any time before the specified deadline.</li></ul><h5 id="B-IMPORTANT-PRE-LAB-WORKS-YOU-NEED-TO-DO-BEFORE-GOING-TO-THE-LAB"><a href="#B-IMPORTANT-PRE-LAB-WORKS-YOU-NEED-TO-DO-BEFORE-GOING-TO-THE-LAB" class="headerlink" title="B. IMPORTANT PRE-LAB WORKS YOU NEED TO DO BEFORE GOING TO THE LAB"></a>B. IMPORTANT PRE-LAB WORKS YOU NEED TO DO BEFORE GOING TO THE LAB</h5><ul><li>Download this lab description and the associated files and read it completely. Unzip the<br>  compressed file. If uncompressing is successful, you should get a folder <strong>4413 Lab0 1</strong> , which<br>  contains html files, CSS files, JavaScript files, and an image folder with several images. Also<br>  contained is java folder “java” with several Java files,</li><li>Download the JS and Java program from eClass (week 2 ), review the code and play with it. This is the program<br>  demonstrated in class. You should fully understand the code of the program before you start the lab.</li><li>You should have a good understanding of<ul><li>Html basic tags, div, span, form control (textbox, dropdown list, submit button etc)</li><li>Basic css</li><li>Events (such as onclick, ondblclick, onchange)</li><li>document.getElementById().innerHTML</li><li>document.getElementById().src</li><li>document.getElementById().ischecked</li><li>document.getElementById().style.xxx (xxx corresponds to all CSS styles, see css slides)</li></ul></li></ul><h5 id="C-GOALS-OUTCOMES-FOR-LAB"><a href="#C-GOALS-OUTCOMES-FOR-LAB" class="headerlink" title="C. GOALS/OUTCOMES FOR LAB"></a>C. GOALS/OUTCOMES FOR LAB</h5><ul><li>To learn/recap the basic html tags, html form controls</li><li>To learn/recap the basic CSS styles</li><li>To learn how to change the <em>behaviour</em> of an HTML document using JavaScript, how to use JavaScript to validate<br>  form inputs (before sending to the server)</li><li>Experience dynamic web page with a remote server (running php file), including database access</li><li>Experience Java multi-thread programming and Object serialization.</li></ul><h5 id="D-TASKS"><a href="#D-TASKS" class="headerlink" title="D. TASKS"></a>D. TASKS</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Part1:<span class="built_in"> simple </span>JavaScript <span class="keyword">to</span> change image source <span class="keyword">and</span> displaying text.</span><br><span class="line">Part 2 : html forms <span class="keyword">to</span> connect <span class="keyword">to</span> a remote server. Using JavaScript <span class="keyword">to</span> <span class="keyword">do</span> form validation.</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Part3:<span class="built_in"> Simple </span>Java Threads <span class="keyword">and</span> Object serialization.</span><br></pre></td></tr></table></figure><h5 id="E-SUBMISSIONS"><a href="#E-SUBMISSIONS" class="headerlink" title="E. SUBMISSIONS"></a>E. SUBMISSIONS</h5><ul><li>eClass submission. More information can be found at the end of this document.</li></ul><h3 id="Part-I-Simple-JS-to-change-presentation"><a href="#Part-I-Simple-JS-to-change-presentation" class="headerlink" title="Part I. Simple JS to change presentation."></a>Part I. Simple JS to change presentation.</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">In</span> this exercise you practice using<span class="built_in"> simple </span>JavaScript <span class="keyword">to</span> change the display of message <span class="keyword">and</span> image source.</span><br></pre></td></tr></table></figure><h5 id="This-task-involves-nine-files-light-html-light-css-light-js-and-six-images-light-0-5-jpg-in-images-folder-The"><a href="#This-task-involves-nine-files-light-html-light-css-light-js-and-six-images-light-0-5-jpg-in-images-folder-The" class="headerlink" title="This task involves nine files: light.html , light. css , light. js , and six images: light_0-5.jpg in images folder. The"></a>This task involves nine files: light.html , light. css , light. js , and six images: light_0-5.jpg in images folder. The</h5><h5 id="image-light-0-jpg-shows-5-light-bulbs-all-turned-off-The-images-light-1-jpg-through-light-5-jpg-corresponds-to"><a href="#image-light-0-jpg-shows-5-light-bulbs-all-turned-off-The-images-light-1-jpg-through-light-5-jpg-corresponds-to" class="headerlink" title="image light_0.jpg shows 5 light bulbs all turned off. The images light_1.jpg through light_5.jpg corresponds to"></a>image light_0.jpg shows 5 light bulbs all turned off. The images light_1.jpg through light_5.jpg corresponds to</h5><h5 id="a-light-being-turned-on-e-g-light-2-jpg-is-an-image-of-the-2nd-light-turned-on"><a href="#a-light-being-turned-on-e-g-light-2-jpg-is-an-image-of-the-2nd-light-turned-on" class="headerlink" title="a light being turned on (e.g. light_2.jpg is an image of the 2nd light turned on)."></a>a light being turned on (e.g. light_2.jpg is an image of the 2nd light turned on).</h5><h5 id="Your-task-it-to-modify-light-html-to-include-5-buttons-as-shown-below-Each-time-a-button-is-selected-a-JS"><a href="#Your-task-it-to-modify-light-html-to-include-5-buttons-as-shown-below-Each-time-a-button-is-selected-a-JS" class="headerlink" title="Your task it to modify light.html to include 5 buttons as shown below. Each time a button is selected, a JS"></a>Your task it to modify light.html to include 5 buttons as shown below. Each time a button is selected, a JS</h5><h5 id="function-should-be-called-which-changes-the-displayed-image-to-be-the-corresponding-one-that-shows-the-light"><a href="#function-should-be-called-which-changes-the-displayed-image-to-be-the-corresponding-one-that-shows-the-light" class="headerlink" title="function should be called, which changes the displayed image to be the corresponding one that shows the light"></a>function should be called, which changes the displayed image to be the corresponding one that shows the light</h5><h5 id="above-the-button-is-“turned-on”-The-displayed-message-is-also-changed-to-“-light-X-is-on-”"><a href="#above-the-button-is-“turned-on”-The-displayed-message-is-also-changed-to-“-light-X-is-on-”" class="headerlink" title="above the button is “turned on”. The displayed message is also changed to “ light #X is on ”."></a>above the button is “turned on”. The displayed message is also changed to “ light #X is on ”.</h5><ul><li>Modify your HTML code to allow your JavaScript code to change the image and message.</li><li>Add in the five buttons using the <button> </button> tags.</li><li>There is a CSS defined for these buttons, but you’ll need to modify the width of the five buttons so to fit in one<br>  row and below each of the five bulbs. Make it as close as possible. The images width is 300 pixels.<pre><code>o also in CSS, add a rule to align the text to the center of the image.o also in CSS, give the whole page a solid border of thickness 5px, and color of r 106, g 255 and b 194</code></pre></li><li>Following the steps such that when a button is clicked, the corresponding light is on, and</li></ul><h5 id="corresponding-message-is-displayed"><a href="#corresponding-message-is-displayed" class="headerlink" title="corresponding message is displayed."></a>corresponding message is displayed.</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o Add an onclick event <span class="keyword">handler</span> <span class="keyword">for</span> the <span class="keyword">left</span> most button so that <span class="keyword">when</span> this button <span class="keyword">is</span> clicked, a JS</span><br><span class="line"><span class="keyword">function</span> called lightOn() <span class="keyword">is</span> invoked <span class="keyword">and</span> executed (you can give other <span class="keyword">function</span> <span class="keyword">name</span> <span class="keyword">if</span> you</span><br><span class="line"><span class="keyword">like</span>, <span class="keyword">as</span> <span class="keyword">long</span> <span class="keyword">as</span> the <span class="keyword">function</span> <span class="keyword">with</span> such <span class="keyword">name</span> <span class="keyword">is</span> defined <span class="keyword">in</span> JavaScript).</span><br><span class="line">o <span class="keyword">Now</span> implement the function. <span class="keyword">Open</span> light.js <span class="keyword">where</span> you <span class="keyword">are</span> already provided <span class="keyword">with</span> the skeleton</span><br><span class="line"><span class="keyword">of</span> <span class="keyword">function</span> lightOn()&#123;...&#125; .The <span class="keyword">body</span> <span class="keyword">of</span> the <span class="keyword">function</span> <span class="keyword">is</span> what we write <span class="keyword">in</span> the pair <span class="keyword">of</span> curly</span><br></pre></td></tr></table></figure><h5 id="braces-We-want-to-change-the-displayed-image-by-updating-the-content-of-the"><a href="#braces-We-want-to-change-the-displayed-image-by-updating-the-content-of-the" class="headerlink" title="braces. We want to change the displayed image, by updating the content of the "></a>braces. We want to change the displayed image, by updating the content of the <img></h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">element</span>, who has <span class="keyword">an</span> id “img“. Specifically, you want <span class="built_in">to</span> <span class="built_in">set</span> <span class="keyword">the</span> src attribute <span class="keyword">of</span> <span class="keyword">the</span> DOM</span><br><span class="line">object <span class="built_in">to</span> <span class="keyword">a</span> proper image.</span><br></pre></td></tr></table></figure><ul><li>Once this left-most button works as expected, consider how to add event to other buttons, including the off<br>  button.<br>  o One approach is to define a separate functions for each button and then implement the functions by<pre><code>setting the image src with proper images and updating the displayed message with proper texts. E.g.,button-1 is attached with function lightOn_1(), button-2 is attached with function lightOn_2() etc. Abetter approach, **which you should do here** , is to define a single JS function, attach it to all the buttons,and pass a parameter. That is, clicking any button will call the same function, but with different input (asparameter to the function). Then the function changes the images according to the input (using bunch ofif else statement, or switch case statements).</code></pre></li></ul><h3 id="Part-II-HTML-forms-form-validation-using-JS-Client-Server-communication-database"><a href="#Part-II-HTML-forms-form-validation-using-JS-Client-Server-communication-database" class="headerlink" title="Part II. HTML forms, form validation using JS, Client Server communication, database."></a>Part II. HTML forms, form validation using JS, Client Server communication, database.</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In <span class="keyword">this</span> exercise you are going to implement a simple HTML form using various form controls mentioned <span class="keyword">in</span> <span class="class"><span class="keyword">class</span>,<span class="type"></span></span></span><br><span class="line">including textbox, radio button, checkbox, dropdown list, text areas, buttons. You also practice using <span class="keyword">external</span> CSS</span><br><span class="line">to define the styles, and, using <span class="keyword">external</span> JS to validate forms <span class="keyword">as</span> well <span class="keyword">as</span> change presentations.</span><br></pre></td></tr></table></figure><h5 id="Basic-form-controls"><a href="#Basic-form-controls" class="headerlink" title="Basic form controls"></a>Basic form controls</h5><ul><li>Open the file FormsInput.html with an editor such as VS Code, and complete it following the comment<br>  instructions in it. Note that Program, Year and Hobbies have default selections.<br>  An important tag for form element is <input type="”??”"> where ?? can be “text”, “radio”, “checkbox”,<br>  “password”, “reset”, “submit”, … Other tags used for form element include <textarea> <selection><br>  <options>.<br>  After adding the components, open the file using your browser. Your form should look like</options></selection></textarea></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Figure</span> <span class="number">1</span> <span class="string">Form</span> <span class="string">with</span> <span class="literal">no</span> <span class="string">CSS</span> <span class="string">styles</span></span><br></pre></td></tr></table></figure><ul><li>Now, link the file to the provided CSS file by removing the comment in head part of the html and<br>  complete the link. Study how the CSS is defined. Save the html file and refresh your browser. You<br>  should get the following (depending on your browser/version, the rendering may be slightly different).<br>  Here we use Firefox, which is the recommended browser for this course.</li></ul><h5 id="Figure-2-Form-with-provided-CSS-styles"><a href="#Figure-2-Form-with-provided-CSS-styles" class="headerlink" title="Figure 2 Form with provided CSS styles"></a>Figure 2 Form with provided CSS styles</h5><ul><li>Next, add a rule to the css file, so that the textbox for the Program field (beside the dropdown list) is<br>  hidden initially (set <em>display</em> style of the element to “ <em>none</em> ” or, <em>visibility</em> to “ <em>hidden”</em> ). This textbox will be<br>  visible when the “OTHERE” in the program dropdown list is selected (elaborated below).</li><li>Next, add an onclick event to the Toggle logo button, so that when it is clicked, a JS function is called,<br>  which change the logo file from “York.png” to “LAS.png” or vice visa. These two images are in the<br>  Images folder. Next, implement this function in the JS code so that it switches between the two images<br>  “York.png” “LAS.png”.</li><li>Next, add an onclick event to the “Change background” button, so that when clicked, it will change to a<br>  lightblue background. Next, implement this function in the JS code so that it works correctly.</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Figure <span class="number">3</span> Change logo <span class="built_in">image</span> Figure <span class="number">4</span> Change <span class="built_in">background</span> <span class="built_in">color</span></span><br></pre></td></tr></table></figure><ul><li>Next, implement the functionality that when “OTHER” in the Program dropdown list is selected, a<br>  textbox beside it is displayed, allowing user to enter the other program. In this case the mouse cursor<br>  should be set inside the textbox. Then if other program is selected, the textbox should disappear.<br>  Hint: add an <em>onchange</em> event to the dropdown list and pass the selected value to the function.<br>  Implement that function in JS, setting the <em>display</em> to “inline” or “none” according to the selected value<br>  (or <em>visibility</em> to “visible” or “hidden”, depending on your css style for this). For putting the mouse cursor<br>  in the textbox, consider focus() on the element.</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Figure</span> <span class="number">5</span> <span class="keyword">Selecting </span>OTHER make a textbox displayed</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Figure <span class="number">6</span> Selecting a <span class="function"><span class="keyword">program</span></span> makes the textbox disappear</span><br></pre></td></tr></table></figure><ul><li>Now enter some data, and test if the Clear button clears all the entered data, resuming the default<br>  selections.</li><li>Next, enter some data again and click ‘Submit’ button. If implemented correctly, you should get the<br>  feedback from a file on the EECS server. An example is shown in Figure 7. The URL of this file is specified<br>  in the <form> part of your html. This gives you some idea of client-server model – the form page is a<br>  client and your browser sends a http request to the server file. The server file receives the data and then<br>  based on the data, displays something for you. Also, if a course code is entered, the server side will<br>  search the course code in the database and display the course details. In this example, the entered<br>  course code EECS4413 generated some data from the database on the server side.<br>o Note that in this example, some data fields are left blank deliberately. The email is not a valid email<br>address. Currently the form is still sent to the server. Preferably, we need to give some messages if the<br>required data (annotated with *, all except Comment and Search course code) is missing. We can let<br>the server validate and give feedback, but this will generate extra burden on the network and server,<br>and will be slower. A better approach, as mentioned in class, is to use client-side JavaScript code to do<br>validations (before the data is sent to the server). We will do this next.</form></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Figure 7 some input data <span class="keyword">and</span><span class="built_in"> server </span>feedback</span><br></pre></td></tr></table></figure><h5 id="Form-Validation-using-client-side-JS"><a href="#Form-Validation-using-client-side-JS" class="headerlink" title="Form Validation using client-side JS."></a>Form Validation using client-side JS.</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">First, on the form, attach a JS validation function (where <span class="keyword">and</span> how?), so that when the<span class="built_in"> user </span>trying <span class="keyword">to</span></span><br><span class="line">submit the form, the validation function is invoked. Then <span class="keyword">in</span> JS, implement this function as follows.</span><br></pre></td></tr></table></figure><ul><li>First, check if the First Name data is missing, if it is, generate a pop-up a window saying “First name<br>  should be filled \out”, and, after the user clicks OK, the cursor should be in the First Name text box.</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Figure <span class="number">8</span> Validate First <span class="built_in">name</span> field</span><br></pre></td></tr></table></figure><ul><li>Next, check if the Last Name data is missing, if it is, generate a pop-up window with message “Last<br>  name should be filled out”, and after the users click OK, the cursor should be in the Last Name text<br>  box.</li><li>Next, check if the Password field is missing, if it is, generate a pop-up window with message<br>  “Password should be filled out”, and after the users click OK, the cursor should be in the Password<br>  text box.</li><li>Next, check if the Email field is missing, if it is, generate a pop-up window with message “Email<br>  should be filled out”, and after the users click OK, the cursor should be in the Email text box.</li><li>If email filed is entered, further check if the email is a valid email format, such as <a href="mailto:abc@domain.com" target="_blank" rel="noopener">abc@domain.com</a> or</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc@domain.us That is, <span class="keyword">start</span> <span class="keyword">with</span> <span class="keyword">some</span> <span class="keyword">characters</span> <span class="keyword">for</span> personal part, followed <span class="keyword">by</span> @, <span class="keyword">and</span> <span class="keyword">then</span> <span class="keyword">domain</span> info,</span><br></pre></td></tr></table></figure><h5 id="then-ends-with-2-or-3-characters-e-g-com-ca-edu-More-specifically-personal-part-contains"><a href="#then-ends-with-2-or-3-characters-e-g-com-ca-edu-More-specifically-personal-part-contains" class="headerlink" title="then ends with 2 or 3 characters (e.g. com, ca, edu). More specifically, personal part contains"></a>then ends with 2 or 3 characters (e.g. com, ca, edu). More specifically, personal part contains</h5><ul><li>Uppercase (A-Z )and the lowercase (a-z) letter.</li><li>All the (0-9) Numeric characters.</li></ul><ul><li>Special characters like;! - / =? # $ % &amp; ‘ * + ^ _ ` { | } ~,</li><li>Period, dot, or full stop (.)</li></ul><h5 id="The-domain-part-contains"><a href="#The-domain-part-contains" class="headerlink" title="The domain part contains"></a>The domain part contains</h5><ul><li>letters</li><li>digits</li><li>hyphens</li><li>dots<br>Hint, this is a bit complicated part, a common approach is to use regular expression to match. If you are<br>not very familiar with regular expressions, you may want to search on the web for some solutions (not all<br>work correctly).<br>If email data is not valid, generate a pop-up window with message “Email format invalid”, after the users<br>click OK, the cursor should be in the Email textbox. Some examples of invalid emails are shown below.</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Figure <span class="number">9</span> Some invalid <span class="section">email</span> formats</span><br></pre></td></tr></table></figure><ul><li>Next, check if at least one hobby is selected. If not, generate a pop-up window with message “at least<br>  one hobby should be selected”, as shown below.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Figure 10 <span class="keyword">Check</span> <span class="keyword">if</span> <span class="keyword">at</span> <span class="keyword">least</span> one hobby <span class="keyword">is</span> selected</span><br></pre></td></tr></table></figure><ul><li>Next, check if the search course code is entered. This is an optional field, so if no code is entered, it is<br>  okay, but if a course code is entered, check if the format is EECSxxxx where xxxx are digits. If not,<br>  generate a pop-up window as shown below. Examples of invalid course code are EECS412, eecs4413,<br>  4413, COSC3213.</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Figure <span class="number">11</span> Checking course <span class="built_in">code</span> <span class="keyword">format</span></span><br></pre></td></tr></table></figure><ul><li>If validation process passes (i.e., validation function does not return a false), the form data will be sent<br>  to the server. Some examples are shown below. Note that, 10 courses are in the database, they are:<br>  EECS1012, EECS1022, EECS2011, EECS2030, EECS2031, EECS3101, EECS3310, EECS3421, EECS4101 and<br>  EECS4413.</li></ul><h3 id="Part-III-Simple-Java-Threads-and-Object-serialization"><a href="#Part-III-Simple-Java-Threads-and-Object-serialization" class="headerlink" title="Part III: Simple Java Threads and Object serialization."></a>Part III: Simple Java Threads and Object serialization.</h3><p>In this part, you get exposure to simple multi-thread programming in Java, and the concept of Object<br>serialization.<br>Given an array of integers, we want to calculate the sum and maximum value in the array, and then write the<br>result into a disk file for future retrieval by another program.</p><ul><li>In the first step, we could use the traditional way where one (main) process scans the array from beginning to<br>  the end. But when the array size is very large, e.g., 100000 elements, it could take a lot of time. In such cases, it<br>  would be beneficial to divide the array into multiple parts and then find the sum and max of each part<br>  simultaneously, i.e., operate on different parts of the array in parallel. This can be done by using <strong>multi-</strong><br>  <strong>threading</strong> where several threads operate on the array in parallel. Specifically, we create two classes, one for<br>  calculating sum in a given range of array, and one for calculating the maximum value in a given range of array.<br>  These classes receive a portion of the array and calculate the sum and max in the portion of the array,<br>  respectively. To make the objects/instances of the classes run as threads, the two classes can either extend<br>  <em>Thread</em> class, or implement <em>Runnable</em> interface, and then override/implement the <em>run()</em> method. Call these two<br>  classes <em>SumThread</em> and <em>MaxThread</em>. The main thread creates two instances of the <em>SumThread</em> class, giving them<br>  half of the array each. It also creates two instances of the <em>MaxThread</em> class and gives them half of the array<br>  each. It then fires the four threads so they all work in parallel. That is, sum is calculated on two portions of the<br>  array simultaneously, the max is calculated on two portions of array simultaneously. Also, sum and max<br>  calculations are conducted in parallel.<br>  The main thread waits for all the four threads to finish, and then retrieves the results from the threads.</li><li>In the second step, we want to persist the results, i.e., when the main program finishes, the data still exists<br>  somewhere. One approach is to write the result into a disk file, so that other programs can retrieve the data<br>  from the disk file later. Instead of writing each result into a disk file separately, and later reading out piece by<br>  piece, an easier approach is to write the results as an whole object and later retrieve the data as a whole object.<br>  To do this, we create a <em>SumMaxResult</em> class which encapsulates the max and sum values, as well as the time<br>  info. The main program stores the results into an instance/object of the <em>SumMaxResult</em> class, and then writes<br>  the object to a disk file, using <em>ObjectOutputStream</em>. To do this, as mentioned in class, the <em>SumMaxResult</em> class<br>  should be serializable (how?).</li><li>Later, another program <em>Depersist</em> can read the disk file and retrieve the whole object, using <em>ObjectInputStream</em>.</li></ul><h5 id="You-are-given-starter-code-for-the-relevant-classes-Complete-the-classes-You-can-develop-in-plain-editor-and"><a href="#You-are-given-starter-code-for-the-relevant-classes-Complete-the-classes-You-can-develop-in-plain-editor-and" class="headerlink" title="You are given starter code for the relevant classes. Complete the classes. You can develop in plain editor and"></a>You are given starter code for the relevant classes. Complete the classes. You can develop in plain editor and</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile/<span class="keyword">run</span><span class="bash"> <span class="keyword">in</span> <span class="built_in">command</span> line, or, develop <span class="keyword">in</span> Eclipse IDE.</span></span><br></pre></td></tr></table></figure><h5 id="In-either-case-If-implemented-correctly-run-the-tester-class-SumMultithreadedTest-will-generate-output-similar-to-the"><a href="#In-either-case-If-implemented-correctly-run-the-tester-class-SumMultithreadedTest-will-generate-output-similar-to-the" class="headerlink" title="In either case, If implemented correctly, run the tester class SumMultithreadedTest will generate output similar to the"></a>In either case, If implemented correctly, run the tester class SumMultithreadedTest will generate output similar to the</h5><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">following:</span><br><span class="line"><span class="keyword">sum</span> <span class="keyword">thread</span> B finish</span><br><span class="line"><span class="keyword">max</span> <span class="keyword">thread</span> X finish</span><br><span class="line"><span class="keyword">max</span> <span class="keyword">thread</span> Y finish</span><br><span class="line"><span class="keyword">sum</span> <span class="keyword">thread</span> A finish</span><br><span class="line"><span class="keyword">sum</span>:<span class="number">66</span> <span class="keyword">max</span>:</span><br><span class="line">Tue May <span class="number">16</span> <span class="number">12</span>:<span class="number">09</span>:<span class="number">35</span> EDT <span class="number">2023</span></span><br><span class="line">Writing success</span><br></pre></td></tr></table></figure><p>Different runs of the tester will generate different sequence od the first four lines, and different time. That is, the blue<br>text above will change for each run.</p><h5 id="Then-run-the-Depersist-program-should-generate"><a href="#Then-run-the-Depersist-program-should-generate" class="headerlink" title="Then, run the Depersist program, should generate"></a>Then, run the Depersist program, should generate</h5><h6 id="7-3-5-6-8-15-9-3-10"><a href="#7-3-5-6-8-15-9-3-10" class="headerlink" title="[7, 3, 5, 6, 8, 15, 9, 3, 10]"></a>[7, 3, 5, 6, 8, 15, 9, 3, 10]</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sum:</span> <span class="number">66</span></span><br><span class="line"><span class="attr">max:</span> <span class="number">15</span></span><br><span class="line"><span class="string">Tue</span> <span class="string">May</span> <span class="number">16</span> <span class="number">12</span><span class="string">:09:35</span> <span class="string">EDT</span> <span class="number">2023</span></span><br></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please feel free to discuss any of these questions in the course forum<span class="built_in"> or </span>see the TAs<span class="built_in"> and/or </span>Instructors for help.</span><br></pre></td></tr></table></figure><h5 id="Submissions"><a href="#Submissions" class="headerlink" title="Submissions."></a>Submissions.</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You should already have <span class="keyword">a</span> <span class="number">4413</span> Lab0 <span class="number">1</span> <span class="built_in">folder</span> that <span class="keyword">contains</span> <span class="keyword">the</span> following <span class="built_in">files</span> <span class="keyword">and</span> <span class="built_in">folder</span>.</span><br></pre></td></tr></table></figure><h5 id="light-html-light-css-light-js-FormsInput-html-FormsInput-css-form-js"><a href="#light-html-light-css-light-js-FormsInput-html-FormsInput-css-form-js" class="headerlink" title="light.html light.css light.js FormsInput.html FormsInput.css form.js"></a>light.html light.css light.js FormsInput.html FormsInput.css form.js</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">images <span class="built_in">folder</span></span><br><span class="line">java <span class="built_in">folder</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If you develop <span class="keyword">the</span> Java part <span class="keyword">using</span> plain editor <span class="keyword">and</span> <span class="keyword">command</span> <span class="title">line</span>, <span class="title">put</span> <span class="title">the</span> <span class="title">java</span> <span class="title">files</span> <span class="title">inside</span> <span class="title">the</span> <span class="title">java</span> <span class="title">folder</span>.</span><br><span class="line">If you develop <span class="keyword">using</span> Eclipse, export project <span class="keyword">as</span> Archive File (zip <span class="built_in">file</span>), <span class="keyword">and</span> <span class="built_in">put</span> <span class="keyword">the</span> zip <span class="built_in">file</span> <span class="keyword">in</span> <span class="keyword">the</span> java <span class="built_in">folder</span> (please</span><br><span class="line">remove <span class="keyword">the</span> provided Java starter <span class="built_in">files</span> there).</span><br></pre></td></tr></table></figure><h5 id="Finally-compress-the-4413-Lab-01-folder-zip-or-tar-or-gz-and-then-submit-the-single-compressed"><a href="#Finally-compress-the-4413-Lab-01-folder-zip-or-tar-or-gz-and-then-submit-the-single-compressed" class="headerlink" title="Finally, compress the 4413 Lab 01 folder ( .zip or .tar or .gz ), and then submit the (single) compressed"></a>Finally, compress the 4413 Lab 01 folder ( .zip or .tar or .gz ), and then submit the (single) compressed</h5><h4 id="file-on-eClass"><a href="#file-on-eClass" class="headerlink" title="file on eClass."></a>file on eClass.</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Late <span class="keyword">submissions </span><span class="keyword">or </span><span class="keyword">submissions </span><span class="keyword">by </span>email will NOT <span class="keyword">be </span>accepted. Plan ahead <span class="keyword">and </span><span class="keyword">submit </span>early.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用HTML+CSS+JS, Java完成
    
    </summary>
    
      <category term="JS" scheme="cplusplusdaixie.com/categories/JS/"/>
    
    
      <category term="Web" scheme="cplusplusdaixie.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP5329_DeepLearning_A2</title>
    <link href="cplusplusdaixie.com/COMP5329-DeepLearning-A2.html"/>
    <id>cplusplusdaixie.com/COMP5329-DeepLearning-A2.html</id>
    <published>2023-09-18T01:09:40.000Z</published>
    <updated>2023-09-18T02:20:10.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="COMP5329-Deep-Learning"><a href="#COMP5329-Deep-Learning" class="headerlink" title="COMP5329 - Deep Learning"></a>COMP5329 - Deep Learning</h3><p>Assignment- 2</p><p>Assignment-2 has two tracks: <strong>competition track</strong> and <strong>reseach track</strong>.</p><p>Students should attend one of the two tracks. 2 or 3 students are suggested to form a group to attend one of these<br>two tracks.</p><p><strong>1. Competition track description [ 100 Marks]:</strong></p><p>In this assignment, you are to solve the multi-label classification task. Each sample in this dataset includes:</p><ul><li>an image,</li><li>one or more labels,</li><li>a short caption that summarizes the image.</li></ul><p>Your goal is to implement an image classifier that predicts the labels of image data sample. You<br>may optionally include the caption in the input of your classifier – it’s up to you!</p><p>Please submit your submission file via Kaggle</p><p><a href="https://www.kaggle.com/competitions/multi-label-classification-competition-" target="_blank" rel="noopener">https://www.kaggle.com/competitions/multi-label-classification-competition-</a> 2023</p><p>Remember: the ranking contributes to <strong>20% of your assignment mark</strong>.</p><p>Please make sure you name your team in the following format.<br>{unikey1}<em>{unikey2}</em>{unikey3}</p><p>The evaluation metric for this assignment is Mean F1-Score. The F1 score, commonly used in information<br>retrieval, measures accuracy using the statistics precision p and recall r. Precision is the ratio of true positives (tp)<br>to all predicted positives (tp + fp). Recall is the ratio of true positives to all actual positives (tp + fn). The F1 score<br>is given by:</p><p>The F1 metric weights recall and precision equally, and a good retrieval algorithm will maximize both precision<br>and recall simultaneously. Thus, moderately good performance on both will be favored over extremely good<br>performance on one and poor performance on the other.</p><p><strong>Submission Format</strong></p><p>For every image in the dataset, submission files should contain two columns: image id and labels. Labels should<br>be a space-delimited list.</p><p>For example</p><p>ImageID,Labels<br>1.jpg, 1<br>8.jpg, 8</p><p>9.jpg, 9 10<br>10.jpg, 10 9<br>etc.</p><p><strong>You can use any methods in deep learning to accomplish the classification task.</strong> You must guarantee that the<br>submitted codes are self-complete, and can be successfully run in common python3 and <strong>PyTorch</strong> environment.</p><p>Instructions to hand in the assignment</p><ul><li>Go to Canvas and upload the report. The report should include each member’s details (student ID and name).</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> you work as a group, only one student needs <span class="keyword">to</span> submit the report which must be named as student ID numbers</span><br><span class="line">of all<span class="built_in"> group </span>members separated by underscores. E.g. “xxxxxxxx_xxxxxxxx_xxxxxxxx. pdf ”</span><br></pre></td></tr></table></figure><ul><li>The report must include <strong>a link of your code, model and data</strong> (e.g., a shared Google cloud folder, so we can<br>  easily run it on Colab). Clearly provide instructions on how to run your code in the appendix of the report or<br>  include a readme.txt in your shared folder.</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In your shared <span class="built_in">folder</span>, please <span class="built_in">include</span> <span class="keyword">a</span> <span class="built_in">file</span> “Predicted_labels.txt”, which <span class="keyword">contains</span> <span class="keyword">the</span> predicted labels <span class="keyword">of</span> test</span><br><span class="line">exampels. You may want <span class="built_in">to</span> submit <span class="keyword">the</span> prediction that achieves <span class="keyword">the</span> best performance <span class="keyword">on</span> <span class="title">kaggle</span>.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Don’t update <span class="keyword">the</span> code/data <span class="keyword">any</span> more <span class="keyword">after</span> <span class="keyword">the</span> submission. If <span class="keyword">the</span> latest modified <span class="built_in">time</span> <span class="keyword">of</span> <span class="keyword">the</span> shared <span class="built_in">folder</span> is</span><br><span class="line">signiftanly late <span class="keyword">after</span> <span class="keyword">the</span> submisison deadline, <span class="keyword">the</span> <span class="keyword">whole</span> submission will be taken <span class="keyword">as</span> <span class="keyword">a</span> late submission.</span><br></pre></td></tr></table></figure><ul><li>The report must clearly show (i) details of your modules, (ii) the predicted results from your classifier on test<br>  examples, (iii) run-time, and (iv) hardware and software specifications of the computer that you used for<br>  performance evaluations.</li><li>There is no special format to follow for the report but please make it as clear as possible and similar to a<br>  research paper.</li><li>The use of ChatGPT or other AI tools is prohibited in the assignments. A plagiarism checker will be used.</li></ul><p><strong>Late submission:</strong></p><p>Suppose you hand in work after the deadline:</p><p>If you have not been granted special consideration or arrangements</p><ul><li>A penalty of 5% of the maximum marks will be taken per day (or part) late. After ten days, you will be<br>awarded a mark of zero.</li><li>e.g. If an assignment is worth 40% of the final mark and you are one hour late submitting, then the maximum<br>marks possible would be 38%.</li><li>e.g. If an assignment is worth 40% of the final mark and you are 28 hours late submitting, then the maximum<br>marks possible marks would be 36%.</li><li>Warning: submission sites get very slow near deadlines.</li></ul><ul><li>Submit early; you can resubmit if there is time before the deadline.</li></ul><p>Marking scheme</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Category Criterion</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Report</span><span class="meta"> [70]</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Introduction</span><span class="meta"> [10]</span></span><br></pre></td></tr></table></figure><ul><li>What’s the aim of the study?</li><li>Why is the study important?</li><li>The general introduction of your used method in the assignment and your<br>motivation for such a solution.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Related</span> works<span class="meta"> [10]</span></span><br></pre></td></tr></table></figure><ul><li>Existing related methods in the literature.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Techniques</span><span class="meta"> [20]</span></span><br></pre></td></tr></table></figure><ul><li>The principle of your method used in this assignment.</li><li>Justify the reasonability of the method.</li><li>Any advantage or novelty of the proposed method.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Experiments</span> and results<span class="meta"> [20]</span></span><br></pre></td></tr></table></figure><ul><li>Accuracy/efficiency (Figures or Tables)</li><li>Extensive analysis (ablation studies, comparison methods, hyper parameter<br>analysis)</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conclusions <span class="keyword">and </span><span class="keyword">Discussion </span>[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><ul><li>Meaningful conclusion and discussion.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Other</span><span class="meta"> [5]</span></span><br></pre></td></tr></table></figure><ul><li>At the discretion of the marker: for impressing the marker, excelling expectation,<br>etc. Examples include fast code, using LATEX, etc.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Code</span><span class="meta"> [10]</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code runs <span class="keyword">within</span> <span class="keyword">a</span> feasible <span class="built_in">time</span> [<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Size of resulting deep models for the prediction &lt; <span class="number">100</span>MB [<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Classification</span></span><br><span class="line"><span class="attribute">performance</span><span class="meta"> [20]</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Groups in top <span class="number">10</span>% [<span class="number">20</span>]</span><br><span class="line">Groups in top <span class="number">10</span>%<span class="number">-30</span>% [<span class="number">15</span>]</span><br><span class="line">Groups in top <span class="number">30</span>%<span class="number">-50</span>% [<span class="number">10</span>]</span><br><span class="line">Groups in top <span class="number">50</span>%<span class="number">-80</span>% [<span class="number">5</span>]</span><br><span class="line">Other valid submissons [<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>Penalties [-]</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Badly </span>written <span class="meta">code</span>: [-<span class="number">20</span>]</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Not including instructions <span class="keyword">on</span> how <span class="keyword">to</span> <span class="built_in">run</span> your code: [<span class="number">-30</span>]</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Late submission</span></span><br></pre></td></tr></table></figure><p><strong>2. Research track description [100 Marks]:</strong></p><p>This research track calls for brave new ideas on deep learning. In this track, you are encouraged to propose and<br>investigate new algorithms or problems in deep learning.</p><p>You <strong>must not</strong> use the project (e.g. your honours, capstone or SSP project) that you have aleady done or are<br>currently doing in other units to participate in this track. You are encouraged to contact our teaching team, if you<br>want to have some discussion on your proposed research problems.</p><p>Submit the <strong>report</strong> (including a link to your <strong>source codes, models and data)</strong> on Canvas before the due date<strong>. TA</strong><br>will further contact you for the preseantion slides by Week 13.</p><p>Marking scheme</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Category Criterion</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Report</span><span class="meta"> [90]</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Introduction</span><span class="meta"> [10]</span></span><br></pre></td></tr></table></figure><ul><li>What’s the aim of the study?</li><li>Why is the study important?</li><li>The general introduction of your used method in the assignment and your<br>motivation for such a solution.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Related</span> works<span class="meta"> [10]</span></span><br></pre></td></tr></table></figure><ul><li>Existing related methods in the literature.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Techniques</span><span class="meta"> [30]</span></span><br></pre></td></tr></table></figure><ul><li>The principle of your method used in this assignment.</li><li>Justify the reasonability of the method.</li><li>Any advantage or novelty of the proposed method.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Experiments</span> and results<span class="meta"> [30]</span></span><br></pre></td></tr></table></figure><ul><li>Accuracy/efficiency (Figures or Tables)</li><li>Extensive analysis (ablation studies, comparison methods, hyper parameter<br>analysis)</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conclusions <span class="keyword">and </span><span class="keyword">Discussion </span>[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><ul><li>Meaningful conclusion and discussion.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Other</span><span class="meta"> [5]</span></span><br></pre></td></tr></table></figure><ul><li>At the discretion of the marker: for impressing the marker, excelling<br>expectation, etc. Examples include fast code, using LATEX, etc.</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Presentation [<span class="number">10</span>] Presentation in week <span class="number">13</span>^</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Penalties</span> <span class="selector-attr">[-]</span> <span class="selector-tag">Late</span> <span class="selector-tag">submission</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Python完成
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
      <category term="Deep Learning" scheme="cplusplusdaixie.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：KIT101_A9_DivideAndConquer</title>
    <link href="cplusplusdaixie.com/KIT101-A9-DivideAndConquer.html"/>
    <id>cplusplusdaixie.com/KIT101-A9-DivideAndConquer.html</id>
    <published>2023-09-13T01:09:40.000Z</published>
    <updated>2023-09-13T01:10:36.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-1PP-Divide-and-Conquer"><a href="#9-1PP-Divide-and-Conquer" class="headerlink" title="9.1PP Divide and Conquer"></a>9.1PP Divide and Conquer</h3><h2 id="KIT101-Programming-Fundamentals"><a href="#KIT101-Programming-Fundamentals" class="headerlink" title="KIT101 Programming Fundamentals"></a>KIT101 Programming Fundamentals</h2><h2 id="PP-Task-9-1-Divide-and-Conquer"><a href="#PP-Task-9-1-Divide-and-Conquer" class="headerlink" title="PP Task 9.1 Divide and Conquer"></a>PP Task 9.1 Divide and Conquer</h2><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Purpose: Apply your functional decomposition skills <span class="built_in">to</span> <span class="keyword">a</span> <span class="built_in">new</span> task <span class="keyword">with</span> familiar elements.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Task: Implement <span class="keyword">a</span> <span class="keyword">sentence</span> manipulation program consisting <span class="keyword">of</span> <span class="keyword">a</span> <span class="built_in">number</span> <span class="keyword">of</span> relatively small methods.</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Learning Outcomes:</span> <span class="number">2</span> <span class="string"></span> <span class="number">3</span> <span class="string"></span> <span class="number">4</span> <span class="string"></span> <span class="number">5</span> <span class="string"></span></span><br></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Time:</span> Aim to complete this task before the start of Week 10.</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Resources: Introductory Programming Notes:</span></span><br><span class="line"><span class="number">07</span> <span class="string">Methods</span> <span class="string">in</span> <span class="string">Self-contained</span> <span class="string">Programs</span></span><br><span class="line"><span class="number">08</span> <span class="string">Making</span> <span class="string">Decisions</span></span><br><span class="line"><span class="number">09</span> <span class="string">Repeating</span> <span class="string">Actions</span> <span class="string">with</span> <span class="string">Loops</span></span><br><span class="line"><span class="number">10</span> <span class="string">Managing</span> <span class="string">Collections</span> <span class="string">with</span> <span class="string">Arrays</span></span><br><span class="line"><span class="number">13</span> <span class="string">Functional</span> <span class="string">Decomposition</span></span><br><span class="line"><span class="attr">Online Mini-lectures:</span></span><br><span class="line"><span class="attr">Making your own methods:</span> <span class="string">...in</span> <span class="string">self-contained</span> <span class="string">programs</span></span><br><span class="line"><span class="attr">Arrays:</span> <span class="string">Writing</span> <span class="string">methods</span> <span class="string">to</span> <span class="string">work</span> <span class="string">with</span> <span class="string">arrays</span></span><br></pre></td></tr></table></figure><h2 id="-Submission-Details"><a href="#-Submission-Details" class="headerlink" title=" Submission Details"></a> Submission Details</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Upload the following to the MyLO submission folder for this task:</span><br><span class="line"> The source code for your <span class="function"><span class="keyword">program</span></span></span><br><span class="line"> A screenshot of the <span class="function"><span class="keyword">program</span></span> during execution</span><br><span class="line"> An image (photo or <span class="built_in">scan</span>) of the structure chart describing your <span class="function"><span class="keyword">program</span></span></span><br></pre></td></tr></table></figure><h2 id="-Assessment-Criteria"><a href="#-Assessment-Criteria" class="headerlink" title=" Assessment Criteria"></a> Assessment Criteria</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A 🏁 Completed submission will:</span><br><span class="line">Implement all required functionality, including the <span class="keyword">use</span> <span class="keyword">of</span> an <span class="built_in">array</span> <span class="keyword">of</span> Strings <span class="keyword">for</span> the <span class="keyword">data</span></span><br><span class="line"><span class="keyword">Import</span> <span class="keyword">only</span> those additional classes that it actually uses</span><br><span class="line">Have <span class="keyword">little</span> code <span class="keyword">in</span> <span class="keyword">main</span>() (likely <span class="keyword">less</span> <span class="keyword">than</span> <span class="number">10</span> <span class="keyword">lines</span> <span class="keyword">of</span> code, but also more <span class="keyword">than</span> just one)</span><br><span class="line">Exhibit good <span class="keyword">use</span> <span class="keyword">of</span> functional decomposition, <span class="keyword">with</span> a <span class="built_in">number</span> <span class="keyword">of</span> small methods <span class="keyword">to</span> solve different parts <span class="keyword">of</span> the</span><br><span class="line">task</span><br><span class="line"><span class="keyword">Show</span> the connections <span class="keyword">between</span> methods <span class="keyword">in</span> your program <span class="keyword">in</span> the structure chart</span><br><span class="line">Make <span class="keyword">use</span> <span class="keyword">of</span> <span class="keyword">String</span> methods wherever suitable</span><br><span class="line">Followtheunit’scodingstyleforlayout variablenames(useofcase) andcommenting(includingyournameat</span><br></pre></td></tr></table></figure><h5 id="KIT101-Programming-Fundamentals-CL"><a href="#KIT101-Programming-Fundamentals-CL" class="headerlink" title="KIT101 Programming Fundamentals CL"></a>KIT101 Programming Fundamentals CL</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Follow <span class="keyword">the</span> units coding style <span class="keyword">for</span> layout, <span class="built_in">variable</span> names (use <span class="keyword">of</span> <span class="keyword">case</span>), <span class="keyword">and</span> commenting (including your name <span class="keyword">at</span></span><br><span class="line"><span class="keyword">the</span> top)</span><br><span class="line">Compile <span class="keyword">and</span> run, <span class="keyword">with</span> <span class="keyword">the</span> screenshot showing that <span class="keyword">it</span> works</span><br></pre></td></tr></table></figure><h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><p>In this task you will implement a single-source le program called <strong>Sentence Editor</strong> , which will manipulate the<br>arrangement of words in a sentence entered by the user (details are given later). In this task it is left to you to decide<br>how the program should be broken down into methods (as a rough guide, a 🏁 Completed solution will have<br>between 5 and 7 relatively small methods, including main). As your program will work with the user-entered<br>sentence as an array of words, it will also make use of methods from the String class to save implementation effort.<br>We will accept a broad range of solutions, not merely the sample solution we created when designing the task.</p><p>A description of the program and its functionality is given next, followed by a number of suggestions for how to<br>implement some of the trickier functionality.</p><h3 id="Sentence-Editor"><a href="#Sentence-Editor" class="headerlink" title="Sentence Editor"></a>Sentence Editor</h3><p>The program should implement the following high-level algorithm:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Program</span></span>: Sentence Editor</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Steps:</span><br><span class="line"><span class="number">1</span> Display <span class="keyword">the</span> program's <span class="built_in">name</span></span><br><span class="line"><span class="number">2</span> Prompt <span class="keyword">the</span> user <span class="keyword">to</span> enter a sentence (which may include punctuation)</span><br><span class="line"><span class="number">3</span> Convert <span class="keyword">that</span> String <span class="keyword">into</span> an array <span class="keyword">of</span> <span class="keyword">the</span> individual <span class="built_in">words</span> <span class="keyword">it</span> <span class="keyword">contains</span>,</span><br><span class="line">removing common punctuation (e.g., .,?!) <span class="keyword">in</span> <span class="keyword">the</span> process</span><br><span class="line"><span class="number">4</span> Do</span><br><span class="line"><span class="number">4</span><span class="number">-1</span> | Display <span class="keyword">the</span> array's <span class="built_in">contents</span> <span class="keyword">as</span> a sentence (<span class="keyword">that</span> <span class="keyword">is</span>, <span class="keyword">as</span> <span class="built_in">words</span> separated</span><br><span class="line">| <span class="keyword">by</span> spaces, ending <span class="keyword">with</span> a full stop), prefixed <span class="keyword">by</span> <span class="string">"Text: "</span></span><br><span class="line"><span class="number">4</span><span class="number">-2</span> | Display a menu <span class="keyword">of</span> operations <span class="keyword">for</span> editing <span class="keyword">the</span> sentence</span><br><span class="line"><span class="number">5</span> <span class="keyword">until</span> <span class="keyword">the</span> user selects quit</span><br></pre></td></tr></table></figure><p>After step 3, the original sentence is no longer used, only the array of the words extracted from it. Assuming that the<br>user originally entered the sentence ‘An example sentence, for an edited line.’ this would be displayed as:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text: An example <span class="keyword">sentence</span> <span class="keyword">for</span> <span class="keyword">an</span> edited <span class="built_in">line</span>.</span><br></pre></td></tr></table></figure><p>The available operations are:<br><strong>Display the sentence as a question</strong> (that is, ending with? instead of. and without showing the ‘Text:’ prex)<br><strong>Display the sentence as an exclamation</strong> (like the previous option but using! instead of .)<br><strong>Find-replace</strong> , which will prompt the user to enter a word to nd and a replacement word. The program will<br>then replace all occurrences of the _nd_ word in the array (doing case-insensitive matches) <em>and</em> display the<br>number of replacements made.<br>For example, starting with the sentence above, if the user entered ‘an’ and ‘the’ then the displayed sentence<br>would become ‘the example sentence for the edited line’ and the program would display that there were 2<br>replacements. (The program does not have to restore sentence capitalisation.)<br><strong>Swap</strong> , which will prompt the user to enter two positions within the text and then swap the words at those<br>positions. The prompt should indicate the valid range of positions, which must be 1 to the length of the text (so<br>remember to subtract 1 from what the user enters), but it can assume that the user will enter valid values.<br>For example, starting with the sentence given above, if the user entered the positions 2 and 6 then the new<br>displayedsentencewouldbe‘Aneditedsentenceforanexampleline’(Mostswapswillmakeasentence</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">displayed <span class="keyword">sentence</span> would be An edited <span class="keyword">sentence</span> <span class="keyword">for</span> <span class="keyword">an</span> example <span class="built_in">line</span>. (Most swaps will make <span class="keyword">a</span> <span class="keyword">sentence</span></span><br><span class="line">grammatically incorrect, but that’s <span class="keyword">the</span> user’s problem, <span class="keyword">not</span> yours.)</span><br><span class="line">Shufe , which will swap <span class="built_in">random</span> pairs <span class="keyword">of</span> positions <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">text</span> <span class="built_in">length</span>-<span class="keyword">of</span>-<span class="keyword">sentence</span> / <span class="number">2</span> times (this <span class="built_in">number</span> is</span><br><span class="line">arbitrary, but should be enough <span class="built_in">to</span> make <span class="keyword">the</span> <span class="built_in">new</span> arrangement quite different <span class="built_in">from</span> <span class="keyword">the</span> original).</span><br><span class="line">For example, <span class="keyword">the</span> program would perform <span class="literal">three</span> swaps <span class="keyword">on</span> <span class="title">the</span> <span class="title">sentence</span> <span class="title">above</span> <span class="title">as</span> <span class="title">7</span>/<span class="title">2</span> <span class="title">is</span> <span class="title">3</span> <span class="title">when</span> <span class="title">performing</span></span><br><span class="line"><span class="keyword">integer</span> division.</span><br></pre></td></tr></table></figure><p>The last three operations modify the state of the array, which is why the program displays the sentence it represents<br>after each user action.</p><h3 id="Implementation-advice"><a href="#Implementation-advice" class="headerlink" title="Implementation advice"></a>Implementation advice</h3><h5 id="Converting-the-sentence-into-an-array-of-words"><a href="#Converting-the-sentence-into-an-array-of-words" class="headerlink" title="Converting the sentence into an array of words"></a>Converting the sentence into an array of words</h5><p>Converting the sentence into an array of Strings is easier than it may at rst appear. You <em>should not</em> write a loop to<br>split the sentence.</p><p>Strings have a split() method, which will break the String into an array of substrings separated by characters you<br>specify. To split a String at each space character you can do the following:</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> original = <span class="string">"This is a sentence."</span></span><br><span class="line"><span class="type">String</span>[] <span class="literal">result</span> = original.split(<span class="string">" "</span>);</span><br><span class="line">//<span class="literal">result</span> <span class="keyword">is</span> now the <span class="built_in">array</span> [<span class="string">"This"</span>, <span class="string">"is"</span>, <span class="string">"a"</span>, <span class="string">"sentence."</span>]</span><br></pre></td></tr></table></figure><p>The argument to split() is actually a <em>regular expression</em> , which is a pattern that can match a variety of String values.<br>The pattern “ “ matches a single space character. In order to prevent any commas, full stops and some other<br>punctuation characters from being left attached to the words in the sentence you can specify these as a set by<br>placing them inside square brackets [ ], followed by a + to say ‘match 1 <em>or more</em> of these characters’. For example,</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> original = <span class="string">"What, he said, an over-punctuated sentence!"</span></span><br><span class="line"><span class="built_in">String</span><span class="meta">[</span><span class="meta">]</span> result = original.split("<span class="meta">[</span> ,.!?\<span class="string">"]+"</span>); <span class="comment">//matches one or more of the</span></span><br><span class="line">charcters inside <span class="meta">[</span><span class="meta">]</span></span><br><span class="line">//result is now the array <span class="meta">[</span><span class="string">"What"</span>, <span class="string">"he"</span>, <span class="string">"said"</span>, <span class="string">"an"</span>, <span class="string">"over-punctuated"</span>,</span><br><span class="line"><span class="string">"sentence"</span><span class="meta">]</span></span><br></pre></td></tr></table></figure><p>In that example it matches any of space, comma, full stop, exclamation mark, question mark, or double quote (which<br>must be given as \”), appearing one or more times in sequence. You can adjust the set of punctuation characters<br>however you think appropriate.</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Note: Because split() returns a<span class="built_in"> new </span>array of the correct size for the data you do<span class="built_in"> not </span>need to allocate</span><br><span class="line">space for the<span class="built_in"> array </span>using<span class="built_in"> new </span>String[].</span><br></pre></td></tr></table></figure><h5 id="Reconstrucing-the-sentence-for-display"><a href="#Reconstrucing-the-sentence-for-display" class="headerlink" title="Reconstrucing the sentence for display"></a>Reconstrucing the sentence for display</h5><p>Although you’ve written code to do something similar before, we strongly suggest you use the class method<br>String.join() to convert the array of words to a displayable String, with individual words separated by a single<br>space. (The rst parameter is the separator to use between array elements, while the second CharSequence…<br>parameter actually matches a String[] variable.)</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Download <span class="keyword">Print</span></span><br></pre></td></tr></table></figure><h4 id="Task-View-this-topic"><a href="#Task-View-this-topic" class="headerlink" title="Task: View this topic"></a>Task: View this topic</h4><h6 id="Last-Visited-28-May-2021-04"><a href="#Last-Visited-28-May-2021-04" class="headerlink" title="Last Visited 28 May, 2021 04:"></a>Last Visited 28 May, 2021 04:</h6><h6 id="Activity-Details"><a href="#Activity-Details" class="headerlink" title="Activity Details"></a>Activity Details</h6>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：INFO1113_A2</title>
    <link href="cplusplusdaixie.com/INFO1113-A2.html"/>
    <id>cplusplusdaixie.com/INFO1113-A2.html</id>
    <published>2023-09-11T01:46:02.000Z</published>
    <updated>2023-09-11T01:47:42.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="INFO1113-Assignment-2"><a href="#INFO1113-Assignment-2" class="headerlink" title="INFO1113 Assignment 2"></a>INFO1113 Assignment 2</h3><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This assignment <span class="keyword">is</span> worth <span class="number">16</span><span class="comment">% of your final grade.</span></span><br></pre></td></tr></table></figure><h2 id="Part-1-–-Delayed-Stack-8"><a href="#Part-1-–-Delayed-Stack-8" class="headerlink" title="Part 1 – Delayed Stack (8%)"></a>Part 1 – Delayed Stack (8%)</h2><p>A stack is a data structure where the element removed is always the most recently added out of the</p><p>remaining elements. See: Stack (abstract data type) - Wikipedia. The two main operations are push(E)</p><p>which adds an element and pop() which removes an element.</p><p>A DelayedStack works like a normal stack except has a restriction (‘delay condition’) that prohibits</p><p>elements from being removed until a certain number of push operations have occurred. Once the</p><p>required number of push operations occur, any number of elements may be removed, however the</p><p>moment another element is added, the delay condition comes back into force.</p><p>Your task is to create a class called MyStack that implements the generic DelayedStack interface according</p><p>to the specification written in the docstrings for each method. Your class should be able to be instantiated</p><p>with</p><p>DelayedStack&lt;…&gt; s = new MyStack&lt;…&gt;(9);</p><p>where the … can be replaced by any object, and the int parameter for the constructor represents the max</p><p>delay value (ie. number of push operations that must occur before pop operations can start to occur).</p><p>If the max delay value is changed, the change does not take effect until the next time the delay is reset to</p><p>the maximum (ie. when push occurs after a sequence of pop operations).</p><p>For this task you may not import anything from the java standard library, or external libraries.</p><h2 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples (1)"></a>Examples (1)</h2><p>DelayedStack<string> s = new MyStack<string>(4); //delay condition of 4<br>s.push(“first element”);<br>s.push(“something else”);<br>s.pop(); //return value is null, because so far only 2 elements have<br>been pushed<br>s.push(“third”);<br>s.push(“fourth”);<br>s.pop(); //return value is “fourth”<br>s.push(“another one”);<br>s.pop() //return value is null again, because the delay condition has<br>been reset<br>s.push(“2”);<br>s.push(“3”);<br>s.push(“4”);<br>s.pop(); // return value is “4”<br>s.pop(); // return value is “3”<br>s.pop(); s.pop(); s.pop(); s.pop();<br>//return values are “2”, “another one”, “third”, “something else”</string></string></p><h2 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples (2)"></a>Examples (2)</h2><p>DelayedStack<string> s = new MyStack<string>(0); //delay condition of 0<br>means that there is never a restriction. Same with negative values, or<br>1.</string></string></p><p>s.push(“hello”);<br>s.pop(); //returns “hello”</p><p>s.setMaximumDelay(2);<br>s.getMaximumDelay(); //return value is 2<br>s.pop(); //IllegalStateException is thrown, the stack is empty</p><p>s.push(“X”);<br>s.push(“a”);<br>s.push(“b”);<br>s.push(“c”);<br>s.pop(); //return value is “c”<br>s.pop(); //return value is “b”<br>s.setMaximumDelay(4);<br>s.getDelay(); //return value is 0.<br>s.pop(); //return value is “a” – delay is not set until the next push<br>s.push(“Y”); s.push(“Z”);<br>s.setMaximumDelay(-1);<br>s.getDelay(); //return value is 2 – delay is not set yet<br>s.push(“An”);<br>s.getDelay(); //return value is 1<br>s.pop(); //return value is null<br>s.push(“AX”);<br>s.getDelay(); //return value is 0<br>s.pop(); //return value is “AX”</p><h2 id="Part-2-–-Delayed-Queue-8"><a href="#Part-2-–-Delayed-Queue-8" class="headerlink" title="Part 2 – Delayed Queue (8%)"></a>Part 2 – Delayed Queue (8%)</h2><p>A queue is a data structure where the element removed is always the oldest element (the one which has</p><p>been waiting the longest) out of the remaining elements, ie. the one which was added the least recently.</p><p>See: Queue (abstract data type) - Wikipedia. The two main operations are enqueue(E) which adds an</p><p>element and dequeue() which removes an element.</p><p>A DelayedQueue works like a normal queue except has a restriction (‘delay condition’) that prohibits</p><p>elements from being removed until a certain number of enqueue operations have occurred. Once the</p><p>required number of enqueue operations occur, any number of elements may be removed, however the</p><p>moment another element is added, the delay condition comes back into force.</p><p>Your task is to create a class called MyQueue that implements the generic DelayedQueue interface</p><p>according to the specification written in the docstrings for each method. Your class should be able to be</p><p>instantiated with</p><p>DelayedQueue&lt;…&gt; s = new MyQueue&lt;…&gt;(7);</p><p>where the … can be replaced by any object, and the int parameter for the constructor represents the max</p><p>delay value (ie. number of enqueue operations that must occur before dequeue operations can start to</p><p>occur).</p><p>If the max delay value is changed, the change does not take effect until the next time the delay is reset to</p><p>the maximum (ie. when enqueue occurs after a sequence of dequeue operations).</p><p>For this task you may not import anything from the java standard library, or external libraries.</p><h2 id="Examples-1-1"><a href="#Examples-1-1" class="headerlink" title="Examples (1)"></a>Examples (1)</h2><p>DelayedQueue<string> s = new MyQueue<string>(4); //delay condition of 4<br>s.enqueue(“first element”);<br>s.enqueue(“something else”);<br>s.dequeue(); //return value is null, because so far only 2 elements<br>have been pushed<br>s.enqueue(“third”);<br>s.enqueue(“fourth”);<br>s.dequeue(); //return value is “first element”<br>s.enqueue(“another one”);<br>s.dequeue() //return value is null again, because the delay condition<br>has been reset<br>s.enqueue(“2”);<br>s.enqueue(“3”);<br>s.enqueue(“4”);<br>s.dequeue(); // return value is “something else”<br>s.dequeue(); // return value is “third”<br>s.dequeue(); s.dequeue(); s.dequeue(); s.dequeue();<br>//return values are “fourth”, “another one”, “2”, “3”</string></string></p><h2 id="Examples-2-1"><a href="#Examples-2-1" class="headerlink" title="Examples (2)"></a>Examples (2)</h2><p>DelayedQueue<string> s = new MyQueue<string>(0); //delay condition of 0<br>means that there is never a restriction. Same with negative values, or<br>1.</string></string></p><p>s.enqueue(“hello”);<br>s.dequeue(); //returns “hello”</p><p>s.setMaximumDelay(2);<br>s.getMaximumDelay(); //return value is 2<br>s.dequeue(); //IllegalStateException is thrown, the queue is<br>empty</p><p>s.enqueue(“X”);<br>s.enqueue(“a”);<br>s.enqueue(“b”);<br>s.enqueue(“c”);<br>s.dequeue(); //return value is “X”<br>s.dequeue(); //return value is “a”<br>s.setMaximumDelay(4);<br>s.getDelay(); //return value is 0.<br>s.dequeue(); //return value is “b” – delay is not set until the next<br>push<br>s.enqueue(“Y”); s.enqueue(“Z”);<br>s.setMaximumDelay(-1);<br>s.getDelay(); //return value is 2 – delay is not set yet<br>s.enqueue(“An”);<br>s.getDelay(); //return value is 1<br>s.dequeue(); //return value is null<br>s.enqueue(“AX”);<br>s.getDelay(); //return value is 0<br>s.dequeue(); //return value is “c”</p><h2 id="Writing-your-own-testcases"><a href="#Writing-your-own-testcases" class="headerlink" title="Writing your own testcases"></a>Writing your own testcases</h2><p>We have provided you with some test cases but these do not test all the functionality described in the</p><p>assignment. It is important that you thoroughly test your code by writing your own test cases.</p><p>For this assignment, you must write JUnit tests. You should place all of your test cases within two files:</p><p>MyStackTest.java and MyQueueTest.java, each within their respective components of the assignment.</p><p>Ensure that your tests can be run with JUnit as demonstrated in the lectures and tutorials.</p><h2 id="Submission-Details"><a href="#Submission-Details" class="headerlink" title="Submission Details"></a>Submission Details</h2><p>You must submit your code and tests using the assignment page on Ed. To submit, simply place your files</p><p>and folders into the workspace, click run to check your program works and then click submit.</p><p>You are encouraged to submit multiple times, but only your last submission will be considered.</p><h2 id="Marking"><a href="#Marking" class="headerlink" title="Marking"></a>Marking</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">10</span> <span class="keyword">marks </span>will <span class="keyword">be </span>assigned <span class="keyword">based </span>on the results of the automatic tests <span class="keyword">and </span>correctness of the</span><br><span class="line"><span class="symbol">program</span> (<span class="number">5</span> <span class="keyword">marks </span>for part <span class="number">1</span> <span class="keyword">and </span><span class="number">5</span> <span class="keyword">marks </span>for part <span class="number">2</span>). This component will use hidden test cases</span><br><span class="line"><span class="symbol">that</span> cover every aspect of the specification. Your program must match the exact output in the</span><br><span class="line"><span class="symbol">examples</span> <span class="keyword">and </span>the test cases on Ed.</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 5 marks will be assigned <span class="keyword">to</span> the code coverage of the testcases you have written yourself (2.</span><br><span class="line">marks <span class="keyword">for</span> part 1 <span class="keyword">and</span> 2.5 marks <span class="keyword">for</span> part 2). <span class="keyword">For</span> this, we will use a<span class="built_in"> script </span><span class="keyword">to</span> automatically generate</span><br><span class="line">a code coverage report using Jacoco. <span class="keyword">For</span> this reason, please make sure you structure your</span><br><span class="line">testcases <span class="keyword">in</span> the manner described above.</span><br></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 1 mark will be assigned for a manual<span class="built_in"> check </span>of your code style. Your code style should follow the</span><br><span class="line">Google Java Style Guildeline. This includes things like appropriate indentation, vertical spacing</span><br><span class="line">between functions<span class="built_in"> and </span>logical sections of code<span class="built_in"> and </span>horizontal spacing between conditional</span><br><span class="line">statements<span class="built_in"> and </span>variable declarations. It will also cover adherence to OO design principles.</span><br></pre></td></tr></table></figure><h2 id="Academic-Declaration"><a href="#Academic-Declaration" class="headerlink" title="Academic Declaration"></a>Academic Declaration</h2><p>By submitting this assignment you declare the following:</p><p>I declare that I have read and understood the University of Sydney Student Plagiarism: Coursework Policy</p><p>and Procedure, and except where specifically acknowledged, the work contained in this</p><p>assignment/project is my own work, and has not been copied from other sources or been previously</p><p>submitted for award or assessment.</p><p>I understand that failure to comply with the Student Plagiarism: Coursework Policy and Procedure can lead</p><p>to severe penalties as outlined under Chapter 8 of the University of Sydney By-Law 1999 (as amended).</p><p>These penalties may be imposed in cases where any significant portion of my submitted work has been</p><p>copied without proper acknowledgment from other sources, including published works, the Internet,</p><p>existing programs, the work of other students, or work previously submitted for other awards or</p><p>assessments.</p><p>I realise that I may be asked to identify those portions of the work contributed by me and required to</p><p>demonstrate my knowledge of the relevant material by answering oral questions or by undertaking</p><p>supplementary work, either written or in the laboratory, in order to arrive at the final assessment mark.</p><p>I acknowledge that the School of Computer Science, in assessing this assignment, may reproduce it</p><p>entirely, may provide a copy to another member of faculty, and/or communicate a copy of this assignment</p><p>to a plagiarism checking service or in-house computer program, and that a copy of the assignment may be</p><p>maintained by the service or the School of Computer Science for the purpose of future plagiarism checking.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE174_Lab13_Learning_A_New_Class</title>
    <link href="cplusplusdaixie.com/CSE174-Lab13-Learning-A-New-Class.html"/>
    <id>cplusplusdaixie.com/CSE174-Lab13-Learning-A-New-Class.html</id>
    <published>2023-08-29T01:28:31.000Z</published>
    <updated>2023-08-29T01:29:11.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-174-Lab-13"><a href="#CSE-174-Lab-13" class="headerlink" title="CSE 174 - Lab 13"></a>CSE 174 - Lab 13</h3><h1 id="Part-1-8-points-Learning-a-new-class"><a href="#Part-1-8-points-Learning-a-new-class" class="headerlink" title="Part 1 (8 points): Learning a new class."></a>Part 1 (8 points): Learning a new class.</h1><p><strong>1. Study the Customer class:</strong><br>    ● For this lab you are to use the Customer class and in order to finish this lab<br>       successfully you need to study this class very carefully, and you will be tested for<br>       that.<br>    ● Download theAPI Documentation for Customer Class.<br>    ● Start studying the class description first.<br>    ● Scroll down and study the constructors.<br>    ● After learning about constructors, scroll down again and study the methods. You<br>       can click on each method name to see more details.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">★ You should not go any further <span class="keyword">if</span> there <span class="keyword">is</span> somethingin <span class="keyword">this</span> <span class="class"><span class="keyword">class</span> <span class="title">that</span> <span class="title">you</span> <span class="title">don</span>’<span class="title">t</span></span></span><br><span class="line">understand.Youcangobackandstudythematerial,talktoyourfriends,oryoucanask</span><br><span class="line">your instructor <span class="keyword">in</span> case you need help with understanding <span class="keyword">this</span> <span class="class"><span class="keyword">class</span>.</span></span><br></pre></td></tr></table></figure><p><strong>2. Using the Customer class:</strong><br>    ● In jGRASP create a java file called <strong>Lab13.</strong><br>    ● DownloadtheCustomer.javafile(DONOTCHANGEANYTHINGINSIDETHIS<br>       FILE) and put it in the same folder as your Lab13.javafile.<br>    ● Insidethemainmethod,createafewCustomerobjects,calldifferentmethods<br>       and printthe results. Forinstance: createtwoCustomerobjects,calldifferent<br>       methodsoneachobjectandprinttheresults.Comparetwoobjects,seeifthe<br>       resultisacceptableforyou.Printtheobjectstoseehowtheoutputlookslike.<br>       Now, try to print the object in a different format.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">★ Again, <span class="keyword">if</span> you have <span class="keyword">any</span> questions please ask your instructor. You should <span class="keyword">not</span> go <span class="built_in">to</span> <span class="keyword">the</span></span><br><span class="line">next part <span class="keyword">of</span> <span class="keyword">the</span> lab <span class="keyword">without</span> understanding all details <span class="keyword">of</span> this class.</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Take the quiz 13.1:</strong><br> ● Nowit’stimetoevaluateyourunderstandingofthisclass.Pleasegoaheadand<pre><code>take the quiz 13.</code></pre></li></ol><h1 id="Part-2-12-points-Array-of-Objects-amp-Search-algorithms"><a href="#Part-2-12-points-Array-of-Objects-amp-Search-algorithms" class="headerlink" title="Part 2 (12 points): Array of Objects &amp; Search algorithms"></a>Part 2 (12 points): Array of Objects &amp; Search algorithms</h1><h1 id="InthisPartofthelabyouaretocreateanarrayofCustomerobjects-andinitializeeach"><a href="#InthisPartofthelabyouaretocreateanarrayofCustomerobjects-andinitializeeach" class="headerlink" title="InthisPartofthelabyouaretocreateanarrayofCustomerobjects,andinitializeeach"></a>InthisPartofthelabyouaretocreateanarrayofCustomerobjects,andinitializeeach</h1><h1 id="objectwiththedatafromafile-Thenyouaretowrite-2-methods-oneforlinearsearchand"><a href="#objectwiththedatafromafile-Thenyouaretowrite-2-methods-oneforlinearsearchand" class="headerlink" title="objectwiththedatafromafile.Thenyouaretowrite 2 methods,oneforlinearsearchand"></a>objectwiththedatafromafile.Thenyouaretowrite 2 methods,oneforlinearsearchand</h1><h1 id="oneforbinarysearchandlookfordifferentkeystoseewhichsearchmethodcanfindthe"><a href="#oneforbinarysearchandlookfordifferentkeystoseewhichsearchmethodcanfindthe" class="headerlink" title="oneforbinarysearchandlookfordifferentkeystoseewhichsearchmethodcanfindthe"></a>oneforbinarysearchandlookfordifferentkeystoseewhichsearchmethodcanfindthe</h1><h1 id="keys-faster"><a href="#keys-faster" class="headerlink" title="keys faster."></a>keys faster.</h1><p><strong>1. Reading data from a file:</strong><br>    ● Download the filecustomer_list.txtand put it inthe same folder as your<br>       Lab13.java file.<br>    ● Try <strong>not</strong> toopenthefile,sincethistextfilecontainsmorethanamillionlinesand<br>       could causeyourjGRASPtocrash.Asyoucanseeinthefollowingimage,in<br>       each line there is a nickname and idnumber separated byspace which is<br>       necessary for creating one Customer object:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">● Nowlet’swritesomecode.Insidethemainmethod(ifyoulikeyoucanwritea</span><br><span class="line">separatemethodforthat,<span class="keyword">it</span>’suptoyou),writesomecodetoopenthefileand</span><br><span class="line">counthowmanylinesthistextfilehasandprinttheresultsimilartothefollowing</span><br><span class="line"><span class="built_in">line</span>:</span><br></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(you should not hardcode that number, your code shouldcalculate the number)</span></span><br></pre></td></tr></table></figure><p><strong>2. Creating an array of Customer objects:</strong><br>    ● Nowthatyouknowhowmanylinesthetextfilehas,thatmeansyouknowthe<br>       lengthofyourarray.So,goaheadanddefineanarrayofCustomersusingthat<br>       number as the length of your array.<br>    ● Youcannotdefineanarraywithoutknowingthelength.Inaddition,afterdefining<br>       one,youcannotchangethelengthofthearraydirectly.Therefore,havingafixed<br>       size list/array is one of the weaknesses of using arrays.<br>    ● Afterdefiningthearray,javawillinitializeeachelementofthearraywitha <strong>null</strong><br>       value, which means each element inside the array (eachelement is like a<br>       Customervariable)is pointingto nothingand it isreadytopointtoanactual<br>       Customer object.<br>    ● Theonly differencebetweenarraysofprimitivetypesandobjectsisthatafter<br>       defininganarrayofobjectsyoushouldassignanobjecttoeachelement.So,it’s<br>       timetoreadfromthefilelinebylineagain,butthistimeforcreatingaCustomer<br>       object from each line and assigning it to each element of the array.<br>    ● Reopen your text file again. The file needs to be reopened because inthe<br>       previouspartwealreadywentthroughthefileoncetocounthowmanylinesthe<br>       file has.<br>       <strong>Hint: for reopening the file you can create a new Scanner object and</strong><br>       <strong>re-assign it into your previous Scanner variable.</strong><br>    ● Usingaloop,startreadingfromthefileaslongasthereissomethinginsidethe<br>       file. <strong>UsehasNext()</strong> methodoverhasNextLine().Keepthatinmindduringeach<br>       iteration you need to read <strong>one String</strong> and <strong>one long</strong> value.<br>    ● During eachiterationafter readingtwoelementsfroma line(oneString,one<br>       long),usethemtocreateaCustomerobject(youpracticedthatinthePart1of<br>       Lab13),andusethatCustomerobjecttoinitializethecurrentelementofthearray<br>       with.So,thefollowingisthesummaryofwhatyouneedtodoafterdefiningan<br>       array of Customers:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loop (as long as there is something inside the file) &#123;</span><br><span class="line">Read one string <span class="keyword">and</span> one long value</span><br><span class="line">Create a new<span class="built_in"> Customer </span>object</span><br><span class="line">arr[i] = The<span class="built_in"> Customer </span>object created <span class="keyword">in</span> the previous line</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● Nowlet’s testyour arraytosee ifyouwereabletoreadfromthefile,create</span><br><span class="line"><span class="symbol">Customerobjects</span>,<span class="keyword">andsavetheminsidethearraycorrectly.Printtheelementsat</span></span><br><span class="line"><span class="keyword">the </span>indexof <span class="number">0</span>,<span class="number">10</span>, <span class="number">1000</span>,<span class="number">1000000</span>,<span class="keyword">andthe </span>lastelement ofthe array.<span class="keyword">Before</span></span><br><span class="line"><span class="keyword">printingeachobject,printtheindexaswell.So,yourresultsofarshouldlooklike</span></span><br><span class="line"><span class="keyword">the </span>following:</span><br></pre></td></tr></table></figure><p><strong>3. Writing a linear search method:</strong><br>    ● So far,youwereable toreadfrom afileand createalist/arrayofCustomer<br>       objects.<br>    ● NowthequestionishowwillyoufindaspecificCustomerobjectbetweenmillions<br>       of elements inside the array?<br>    ● Asasolution,let’swriteamethodcalled <strong>linearSearch</strong> thatacceptsanarrayof<br>       Customerobjects,andoneCustomerobjectasthekeythatneedstobefound<br>       insidethe array.Andif yourecall, thelinearsearch methodshouldreturnan<br>       index.<br>    ● Theonlydifferencebetweenthismethodandtheoneinthevideosisthathere<br>       youaredealingwithCustomerobjects.So,everytimeyouneedtocheckeach<br>       elementofthearraywiththegivenkeytoseewhethertheyareequalornot(you<br>       practiced comparing two Customer objects in the Part1 of this lab).<br>    ● When you are done with the method, let’s test it to see if it works. Inside the main<br>       method create a Customer object called key using the nickname: “gwstikg” and<br>       id: 100005949<br>    ● Call the linearSearch method and give it your array and the key you just created,<br>       and print the result. Add some messages to have your output as following:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● Now, inside the linearSearch method <span class="builtin-name">add</span> a counterto count every time it</span><br><span class="line">compares the<span class="built_in"> Customer </span>objects. Then, before returning the index, <span class="builtin-name">print</span> the</span><br><span class="line">number of times that comparison has happened. The goal is <span class="keyword">to</span> see how many</span><br><span class="line">times elements are compared inside this method. So, you need <span class="keyword">to</span> count <span class="keyword">and</span> print</span><br><span class="line">that inside this method. So, change your code <span class="keyword">to</span> generate an output as below:</span><br></pre></td></tr></table></figure><p><strong>4. Writing a binary search method:</strong><br>    <strong>●</strong> Repeat the whole process from the last section this time to write the<br>       <strong>binarySearch</strong> method. Write a binarySearch method thatgets an array of<br>       Customers and a key, and returns an index. Count how many comparisons<br>       happen inside this method and print it inside this method right before returning<br>       any values.<br>    <strong>●</strong> The question that you need to ask here is whether the array is sorted since the<br>       binary search algorithm only works with sorted lists. The good news here is that<br>       the array is sorted based on id numbers, therefore inside the binarySearch<br>       methodwhere you need to compare the key with thevalue of the middle element<br>       to see if it’s greater or smaller, you only need to compare the idNumbers.<br>    <strong>●</strong> Comment out some of the previous prints and make sure your output matches<br>       the following output:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● Repeat <span class="keyword">the</span> <span class="built_in">process</span> <span class="keyword">for</span> finding <span class="keyword">the</span> following Customers (<span class="keyword">the</span> numbers are <span class="keyword">long</span></span><br><span class="line">type):</span><br><span class="line">○ [“mqzhfygjuk”, <span class="number">6001073675</span>]</span><br><span class="line">○ [“gnv”, <span class="number">7412760286</span>]</span><br><span class="line">○ [“CSE174”, <span class="number">1111111111</span>]</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">● After printing <span class="keyword">the</span> results your output should look like <span class="keyword">the</span> following:</span><br></pre></td></tr></table></figure><p><strong>5. Analyzing the results:</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">● Looking <span class="keyword">at</span> <span class="keyword">the</span> <span class="keyword">first</span> test, you can see <span class="keyword">the</span> linear search only did <span class="literal">one</span> comparison</span><br><span class="line">compared <span class="built_in">to</span> binary search that did <span class="number">19</span> comparisons,meaning <span class="keyword">if</span> you are looking</span><br><span class="line"><span class="keyword">for</span> something <span class="keyword">at</span> <span class="keyword">the</span> very beginning <span class="keyword">of</span> <span class="keyword">the</span> array, <span class="keyword">using</span> <span class="keyword">the</span> linear search could be</span><br><span class="line"><span class="keyword">a</span> better option over <span class="keyword">the</span> binary search.</span><br><span class="line">● For <span class="keyword">the</span> <span class="keyword">second</span> test, you can see <span class="keyword">the</span> fast <span class="built_in">result</span> <span class="keyword">of</span> binary search <span class="keyword">by</span> doing only <span class="number">17</span></span><br><span class="line">comparisons compared <span class="built_in">to</span> <span class="keyword">the</span> linear search which did <span class="number">598734</span> comparisons.</span><br><span class="line">● In <span class="keyword">the</span> <span class="keyword">third</span> test, you can see <span class="keyword">each</span> method returns <span class="keyword">a</span> different index, <span class="keyword">and</span> that is</span><br><span class="line">because there are duplicate <span class="built_in">keys</span> inside <span class="keyword">the</span> <span class="built_in">file</span>. Since <span class="keyword">each</span> algorithm searches</span><br><span class="line">through <span class="keyword">the</span> array differently, <span class="keyword">each</span> algorithm finds <span class="keyword">the</span> key <span class="keyword">at</span> <span class="keyword">a</span> different index.</span><br><span class="line">● The <span class="keyword">last</span> test shows <span class="keyword">the</span> worst <span class="keyword">case</span> scenario where <span class="keyword">the</span> key is <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">the</span> list. The</span><br><span class="line">linear search has <span class="built_in">to</span> check all n <span class="keyword">or</span> <span class="number">1004718</span> elementsto realize that <span class="keyword">the</span> key is <span class="keyword">not</span></span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> list, <span class="keyword">while</span> <span class="keyword">the</span> binary search did only <span class="built_in">log2</span>(n) <span class="keyword">or</span> <span class="number">20</span>comparisons <span class="built_in">to</span> <span class="built_in">get</span> <span class="keyword">the</span></span><br><span class="line">same <span class="built_in">result</span>.</span><br></pre></td></tr></table></figure><p><strong>6. Submit your Code on canvas:</strong></p><p>● If your code generated the last results as shown above, you are ready to submit<br>your work on canvas.<br>● There are two tests: one that tests your linear search, and one for testing your<br>binary search.<br><strong>Rubric</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Criteria</span> <span class="string">Full</span> <span class="string">Credit</span> <span class="string">Partial</span> <span class="string">Credit</span> <span class="literal">No</span> <span class="string">Credit</span></span><br></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Successful</span><br><span class="line">submission via Code</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A fully successful</span><br><span class="line">submission <span class="keyword">to</span> CODE</span><br><span class="line">that passes <span class="literal">all</span> of the</span><br><span class="line">required tests will</span><br><span class="line">earn <span class="literal">full</span> credit.</span><br><span class="line"><span class="number">8</span> Points</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Complete <span class="number">each</span></span><br><span class="line"><span class="keyword">test</span>.</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span>Points</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> your submission <span class="keyword">is</span></span><br><span class="line"><span class="keyword">not</span> accepted <span class="keyword">by</span></span><br><span class="line">code, you will</span><br><span class="line">receive <span class="literal">no</span> credit.</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>Points</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Writing</span> comments for</span><br><span class="line"><span class="symbol">the</span> class <span class="keyword">and </span>linear</span><br><span class="line"><span class="keyword">and </span><span class="keyword">binary </span>search</span><br><span class="line"><span class="symbol">methods</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Writing comments <span class="keyword">for</span> the</span><br><span class="line">class <span class="keyword">and</span> the linear <span class="keyword">and</span></span><br><span class="line">binary search methods.</span><br><span class="line">explaining the purpose,</span><br><span class="line">parameters, <span class="keyword">and</span> the return</span><br><span class="line">type will earn full credit.</span><br><span class="line">1.5 Point</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Complete</span><br><span class="line">comments <span class="keyword">for</span></span><br><span class="line"><span class="keyword">each</span> part.</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.5</span> <span class="keyword">Point</span></span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Not writing</span><br><span class="line">comments or</span><br><span class="line">incomplete</span><br><span class="line">comments <span class="keyword">receive</span></span><br><span class="line">no credit.</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>Points</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Correct Style If your submission</span><br><span class="line">has <span class="number">0</span> style errors you</span><br><span class="line">will earn full credit.</span><br><span class="line"><span class="number">2.5</span> Point</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">If</span> <span class="string">there</span> <span class="string">are</span> <span class="string">any</span> <span class="string">style</span></span><br><span class="line"><span class="string">errors</span> <span class="string">present,</span> <span class="string">you</span></span><br><span class="line"><span class="string">will</span> <span class="string">receive</span> <span class="literal">no</span> <span class="string">credit.</span></span><br><span class="line"><span class="number">0</span> <span class="string">Points</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE174_Lab12_2DArrays</title>
    <link href="cplusplusdaixie.com/CSE174-Lab12-2DArrays.html"/>
    <id>cplusplusdaixie.com/CSE174-Lab12-2DArrays.html</id>
    <published>2023-08-25T01:02:26.000Z</published>
    <updated>2023-08-26T06:17:58.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-174-Lab-12"><a href="#CSE-174-Lab-12" class="headerlink" title="CSE 174 - Lab 12"></a>CSE 174 - Lab 12</h3><p><strong>(20 points): 2D Arrays</strong></p><p>In this part you will write six static methods.</p><ol><li>Create a class called <strong>Lab12</strong> and read the followingtable about the methods</li></ol><p>you need to add into your class:</p><p>A method called getNumRows which accepts a 2D-arrayof<br>ints, and returns the number of rows in the given array.</p><p>Inside the main method create a 2D array and call this<br>method to see if this method returns the correct value. For<br>instance imagine an array named arr with the following<br>elements:</p><p>A method called getRowLength which accepts a 2D-arrayof<br>ints, and an int value as a row index. This method returns the<br>length of the given row inside the given array. If the given<br>row index is out of bound, this method should return zero.</p><p>Inside the main method create a 2D array and call this<br>method to see if this method returns the correct value. For<br>instance imagine an array named arr with the following<br>elements:<br>The result of getRowLength(arr, 3) should be 1.<br>The result of getRowLength(arr, -1) should be 0.<br>The result of getRowLength(arr, 5) should be 0.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE174_Assignment4</title>
    <link href="cplusplusdaixie.com/CSE174-Assignment4.html"/>
    <id>cplusplusdaixie.com/CSE174-Assignment4.html</id>
    <published>2023-08-19T19:29:27.000Z</published>
    <updated>2023-08-19T19:30:13.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-174-Assignment-4"><a href="#CSE-174-Assignment-4" class="headerlink" title="CSE 174 - Assignment 4"></a>CSE 174 - Assignment 4</h3><h1 id="Deadline-Monday-Dec-6th-at-11-59-PM"><a href="#Deadline-Monday-Dec-6th-at-11-59-PM" class="headerlink" title="Deadline: Monday, Dec 6th at 11:59 PM"></a>Deadline: Monday, Dec 6th at 11:59 PM</h1><p>You are to write a program that reads data from a file, and creates and works with an ArrayList<br>of Customer objects.<br>● Create a new class/file called <strong>Assignment4.</strong><br>● Download theAPI Documentation for Customer Class.<br>● Download theCustomer.java(DO NOT CHANGE ANYTHINGINSIDE THIS FILE),list.txt, and<br>customers.txtfiles and put them in the same folderas your Assignment4.java file.</p><p>For this assignment you are allowed to use everything you have learned so far to generate the expected output.<br>There are only 2 limitations that you must follow:</p><ol><li>The length of methods (including the main method) should be <strong>less than 35 lines.</strong></li><li>Your class must have 2 public sort methods called <strong>sort1</strong> and <strong>sort2</strong> which are explained later.<br>Other than that, you can use anything that you have learned in this course.<br>The quality of your code will be evaluated by the assessor and points will be taken off if you don’t follow<br>the proper programming practices. So, avoid using things that we have never used in the course.</li></ol><h1 id="Part1-Run-the-program"><a href="#Part1-Run-the-program" class="headerlink" title="Part1: Run the program"></a>Part1: Run the program</h1><p>When your program is run, the following menu needs to be displayed:</p><p>At this point nothing has been read from the file, so if the user chooses menu options from 2-5,<br>nothing should happen and the user should be prompted with a proper message as the following:</p><h1 id="Part2-Reading-from-a-file-amp-creating-an-ArrayList-of-Customer-objects"><a href="#Part2-Reading-from-a-file-amp-creating-an-ArrayList-of-Customer-objects" class="headerlink" title="Part2: Reading from a file &amp; creating an ArrayList of Customer objects"></a>Part2: Reading from a file &amp; creating an ArrayList of Customer objects</h1><p>When the user enters 1, it asks the user to enter a filename and starts reading data from the given<br>file and creates an ArrayList of Customers. The following is the result:</p><p>When option 1 is done:<br>● The user can enter 2 to display the list.<br>● Choosing number 2 only displays 10 elements at a time. If the user enters character ’s’, it will<br>stop showing the rest of the list. If the user enters anything else, it will show the next 10 elements<br>of the list and so on.<br>● At this level if the user enters number 5, nothing should be printed because the list hasn’t been<br>sorted yet.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The results are <span class="keyword">as</span> <span class="string">follows:</span></span><br></pre></td></tr></table></figure><h1 id="Part3-Sorting"><a href="#Part3-Sorting" class="headerlink" title="Part3: Sorting"></a>Part3: Sorting</h1><p>Your class must have 2 sort methods called <strong>sort1</strong> and <strong>sort2</strong>. These two methods both <strong>accept an<br>ArrayList of Customer objects</strong> and <strong>return nothing</strong> .From the sorting algorithms that you have learned so<br>far (bubble sort, selection sort, and insertion sort) you can pick any one you like for sort1 and sort<br>methods. For instance, you can use bubble sort for sort1 and insertion sort for sort2, or you can use the<br>same sort algorithm for both sort1 and sort2 methods.</p><p>The <strong>sort1</strong> method should sort the list based on <strong>nicknames</strong> ,and the <strong>sort2</strong> method should sort the list based<br>on the <strong>id numbers</strong>.<br>● When the user enters 3, the list should be sorted by nicknames.<br>● When the user enters 4, the list should be sorted by id numbers.<br>● The <strong>last</strong> sorted list can be displayed by entering5.<br>● If the user enters 2, the <strong>original, unsorted</strong> liststill needs to be displayed as before.<br>The results are as follows:</p><h1 id="Part4-Loading-another-file"><a href="#Part4-Loading-another-file" class="headerlink" title="Part4: Loading another file"></a>Part4: Loading another file</h1><p>If the user enters 1 again to load another file, everything will be repeated from part2. Please go back<br>and read part2 of this assignment again.</p><h1 id="Part5-Test-your-code-with-more-sample-runs"><a href="#Part5-Test-your-code-with-more-sample-runs" class="headerlink" title="Part5: Test your code with more sample runs"></a>Part5: Test your code with more sample runs</h1><p>Just follow the following sample runs to test your code and make sure that your code is generating the<br>same results..</p><h1 id="Part6-Submit-on-Canvas"><a href="#Part6-Submit-on-Canvas" class="headerlink" title="Part6: Submit on Canvas"></a>Part6: Submit on Canvas</h1><p>If your program worked as shown above, now it’s time to submit your work on Canvas. The Code<br>Plugin will test the result of your code, along with sort1 and sort2 methods.</p><p><strong>Rubric</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Criteria</span> <span class="string">Full</span> <span class="string">Credit</span> <span class="string">Partial</span> <span class="string">Credit</span> <span class="literal">No</span> <span class="string">Credit</span></span><br></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Successful</span><br><span class="line">submission via Code</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A fully successful</span><br><span class="line">submission <span class="keyword">to</span> CODE</span><br><span class="line">that passes <span class="literal">all</span> tests will</span><br><span class="line">earn <span class="literal">full</span> credit.</span><br><span class="line"><span class="number">60</span> Points</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Complete <span class="number">each</span></span><br><span class="line"><span class="keyword">test</span>.</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">12 </span>Points</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">If your submission <span class="keyword">is</span></span><br><span class="line"><span class="keyword">not</span> accepted <span class="keyword">by</span></span><br><span class="line">code, you will</span><br><span class="line">receive <span class="literal">no</span> credit.</span><br><span class="line"><span class="number">0</span> Points</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Correct Style Zero <span class="built_in">style</span> <span class="built_in">errors</span>,</span><br><span class="line">will earn full credit.</span><br><span class="line"><span class="number">10</span> Points</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Any</span> <span class="string">style</span> <span class="string">errors</span> <span class="string">present,</span></span><br><span class="line"><span class="string">you</span> <span class="string">will</span> <span class="string">receive</span> <span class="literal">no</span> <span class="string">credit.</span></span><br><span class="line"><span class="number">0</span> <span class="string">Points</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Proper programming</span></span><br><span class="line"><span class="attribute">practices</span></span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> your code follows <span class="literal">all</span></span><br><span class="line">acceptable practices,</span><br><span class="line">you will earn <span class="literal">full</span> credit</span><br><span class="line"><span class="number">30</span> Points</span><br></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unacceptable</span><br><span class="line"><span class="keyword">code</span> gets partial</span><br><span class="line">credit.</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Significant</span> <span class="string">issues</span> <span class="string">related</span></span><br><span class="line"><span class="string">to</span> <span class="string">programming</span> <span class="string">practices</span></span><br><span class="line"><span class="string">will</span> <span class="string">earn</span> <span class="literal">no</span> <span class="string">credit.</span></span><br><span class="line"><span class="number">0</span> <span class="string">Points</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A7_HuffmanCoding</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A7-HuffmanCoding.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A7-HuffmanCoding.html</id>
    <published>2023-08-18T01:56:55.000Z</published>
    <updated>2023-08-18T01:57:44.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Implement, manipulate, and traverse a binary tree.</li><li>Implement theComparableinterface</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h2 id="Background-ASCII-and-Binary-Representation"><a href="#Background-ASCII-and-Binary-Representation" class="headerlink" title="Background: ASCII and Binary Representation"></a>Background: ASCII and Binary Representation</h2><p><em>(You do not need to fully understand this section to complete the assessment.)</em><br>We discovered on an earlier assignment that everycharhas an equivalentintvalue between 0 and 255.<br>(Recall,(int)’a’ = 97,(int)’z’= 122, etc.) In this assignment, we go a step further: computers<br>actually see integers as <em>binary</em> (1’s and 0’s). Binary is a lot like the normal numbers we use, except it’s<br>based around 2 instead of 10. For example, “ 1204 ” is written that way, because</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1204 </span>= <span class="number">1</span> · <span class="number">103</span> + <span class="number">2</span> · <span class="number">102</span> + <span class="number">0</span> · <span class="number">101</span> + <span class="number">4</span> · <span class="number">100</span></span><br></pre></td></tr></table></figure><p>Similarly, because</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">97</span> = <span class="number">0</span> · <span class="number">27</span> + <span class="number">1</span> · <span class="number">26</span> + <span class="number">1</span> · <span class="number">25</span> + <span class="number">0</span> · <span class="number">24</span> + <span class="number">0</span> · <span class="number">23</span> + <span class="number">0</span> · <span class="number">22</span> + <span class="number">0</span> · <span class="number">21</span> + <span class="number">1</span> · <span class="number">20</span></span><br></pre></td></tr></table></figure><p>97 is “ 01100001 ” in binary! In fact, all <em>char</em> ’s can be written using exactly 8 binary digits (bits). This<br>encoding, which is used pretty universally by computers, is called ASCII.</p><h2 id="Background-Huffman-Encoding"><a href="#Background-Huffman-Encoding" class="headerlink" title="Background: Huffman Encoding"></a>Background: Huffman Encoding</h2><p><em>Huffman encoding</em> is an algorithm devised by David A. Huffman of MIT in 1952 for <em>compressing</em> data to<br>make a file occupy a smaller amount of space. Unbelievably, this algorithm is still used today in a variety<br>of very important areas. For example, mp3s and jpgs both use Huffman Coding. The general idea behind<br>Huffman Coding is the following:<br><strong>What if we used fewer than 8 bits for characters that are more common?</strong></p><p>Consider the following (simple) example. Imagine we have the following data:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span></span><br><span class="line"><span class="keyword">cccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span></span><br><span class="line"><span class="keyword">ddaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span></span><br></pre></td></tr></table></figure><p><strong>How many bits to store with ASCII Coding?</strong><br>First, we find the ASCII code for each letter:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a → <span class="number">01100001</span> , b → <span class="number">01100010</span> ,</span><br><span class="line">c → <span class="number">01100011</span> , d → <span class="number">01100100</span></span><br></pre></td></tr></table></figure><p>Since each line has 80 letters, and each letter<br>code is 8 bits, the number of bits required is:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">80 </span>· <span class="number">8</span> ·<span class="number">4</span> = <span class="number">2560</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">How many bits <span class="built_in">to</span> store <span class="keyword">with</span> Huffman Coding?</span><br><span class="line">Sinceais most frequent, we use <span class="keyword">a</span> <span class="keyword">short</span> code <span class="keyword">for</span></span><br><span class="line"><span class="keyword">it</span>, <span class="keyword">then</span> we use <span class="keyword">the</span> next longest code forb, etc:</span><br><span class="line"><span class="keyword">a</span> → <span class="number">1</span> , b → <span class="number">00</span> ,</span><br><span class="line">c → <span class="number">011</span> , d → <span class="number">010</span></span><br><span class="line">This data has <span class="number">229</span><span class="keyword">a</span>’s, <span class="number">4</span>b’s, <span class="number">3</span>c’s, <span class="keyword">and</span> <span class="number">2</span>d’s.</span><br><span class="line">Since we need <span class="literal">one</span> bit fora, <span class="literal">two</span> forb, <span class="keyword">and</span> <span class="literal">three</span></span><br><span class="line">forcandd, <span class="keyword">the</span> total count <span class="keyword">of</span> bits is:</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">229 </span>·<span class="number">1</span> + <span class="number">4</span>·<span class="number">2</span> + <span class="number">3</span>·<span class="number">3</span> + <span class="number">2</span>·<span class="number">3</span> = <span class="number">255</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Woah! By changing <span class="keyword">the</span> coding, we compressed <span class="keyword">the</span> data <span class="keyword">by</span> <span class="keyword">a</span> factor <span class="keyword">of</span> <span class="number">10</span>!!</span><br></pre></td></tr></table></figure><h2 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h2><h1 id="Take-home-Assessment-7-Huffman-Coding-due-August-19-2021-11-59pm"><a href="#Take-home-Assessment-7-Huffman-Coding-due-August-19-2021-11-59pm" class="headerlink" title="Take-home Assessment 7 : Huffman Coding due August 19, 2021 11:59pm"></a>Take-home Assessment 7 : Huffman Coding due August 19, 2021 11:59pm</h1><p>In this assignment, you will create classesHuffmanCodeandHuffmanNodeto be used in compression of<br>data You are provided with a clientHuffmanCompressor.javathat handles user interaction and calls<br>your huffman code methods to compress and decompress a given file.</p><h2 id="Program-Behavior-Building-a-Huffman-Code"><a href="#Program-Behavior-Building-a-Huffman-Code" class="headerlink" title="Program Behavior: Building a Huffman Code"></a>Program Behavior: Building a Huffman Code</h2><p>In the previous example, we magically arrived at the special binary sequences to be used as codes. In this<br>section, we explain the algorithm to create these special binary sequences.</p><p>Throughout this section, we will use the following example:<br>simple-spec-example.txt<br>aba ab cabbb</p><h3 id="Step-1-Count-the-Frequencies-of-the-Characters"><a href="#Step-1-Count-the-Frequencies-of-the-Characters" class="headerlink" title="Step 1: Count the Frequencies of the Characters"></a>Step 1: Count the Frequencies of the Characters</h3><p>The file simple-spec-example.txthas the characters’a’,’b’,’c’, and ‘’. Counting up the<br>frequencies, we get the following:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Character Count</span><br><span class="line">‘ ’ <span class="number">2</span></span><br><span class="line">‘a’ <span class="number">4</span></span><br><span class="line">‘b’ <span class="number">5</span></span><br><span class="line">‘c’ <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Step-2-Create-a-Priority-Queue-Ordered-By-Frequency"><a href="#Step-2-Create-a-Priority-Queue-Ordered-By-Frequency" class="headerlink" title="Step 2: Create a Priority Queue Ordered By Frequency"></a>Step 2: Create a Priority Queue Ordered By Frequency</h3><p>Since our ultimate goal is to create a code based on frequencies, we need to use a data structure that<br>helps us keep track of the order of the letters based on frequencies. We will use a <em>priority queue</em> for this.<br>A <em>priority queue</em> is a queue that is ordered by <em>priorities</em> (in this case frequencies) instead of FIFO order.<br>In other words, we can ask the priority queue to insert a new element (add(element)) and we can ask<br>it to remove the highest priority element (remove()). We will use thePriorityQueue<e>class in Java<br>for the implementation of priority queues, but we will still use theQueue<e>interface for variables.</e></e></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In <span class="keyword">Java, </span>if you</span><br><span class="line">print out a pri-</span><br><span class="line"><span class="keyword">ority </span>queue,</span><br><span class="line">the elements</span><br><span class="line">will not ap-</span><br><span class="line">pear in priority</span><br><span class="line"><span class="keyword">order. </span>This is</span><br><span class="line">EXPECTED</span><br><span class="line"><span class="keyword">behavior, </span><span class="keyword">and</span></span><br><span class="line"><span class="keyword">can’t </span><span class="keyword">be </span>easily</span><br><span class="line">changed.</span><br></pre></td></tr></table></figure><p>For our huffman code, we want to remove the node with <em>lowest</em> frequency first. (Intuitively, the reason<br>is that the things we remove first will end up having the longest codes).</p><p>We begin by creating a node for each letter in our text:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">pq←−</span> <span class="attr">freq:</span> <span class="string">‘c’</span> <span class="attr">1 freq:</span> <span class="string">‘</span> <span class="string">’</span> <span class="attr">2 freq:</span> <span class="string">‘a’</span> <span class="attr">4 freq:</span> <span class="string">‘b’</span> <span class="number">5</span> <span class="string">←−</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Continued <span class="keyword">on</span> next page...</span><br></pre></td></tr></table></figure><h3 id="Step-3-Combine-the-Nodes-Until-Only-One-is-Left"><a href="#Step-3-Combine-the-Nodes-Until-Only-One-is-Left" class="headerlink" title="Step 3: Combine the Nodes Until Only One is Left"></a>Step 3: Combine the Nodes Until Only One is Left</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Now that we have a priority<span class="built_in"> queue </span>of the nodes, we want <span class="keyword">to</span> put them together into a tree. <span class="keyword">To</span> <span class="keyword">do</span> this,</span><br><span class="line">we repeatedly <span class="builtin-name">remove</span> the smallest two (the ones at the front of the priority queue) <span class="keyword">and</span> create a new</span><br><span class="line">node with them as children. (The new node does <span class="keyword">not</span> have a character associated with it.)<span class="built_in"> Note </span>that the</span><br><span class="line">priority<span class="built_in"> queue </span>is arbitrary <span class="keyword">in</span> how it breaks ties; you should just take nodes <span class="keyword">in</span> the order the priority queue</span><br><span class="line">provides them.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">3</span><span class="keyword">a</span>) Remove Two Smallest</span><br><span class="line">First, remove <span class="keyword">the</span> smallest <span class="literal">two</span></span><br><span class="line">nodes <span class="built_in">from</span> <span class="keyword">the</span> priority queue:</span><br><span class="line">‘c’</span><br><span class="line">freq: <span class="number">1</span> <span class="keyword">and</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">‘</span> <span class="string">’</span></span><br><span class="line"><span class="attr">freq:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">pq←−</span> <span class="attr">freq:</span> <span class="string">‘a’</span> <span class="attr">4 freq:</span> <span class="string">‘b’</span> <span class="number">5</span> <span class="string">←−</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">3</span>b) Combine Them Together</span><br><span class="line">Then, <span class="built_in">create</span> <span class="keyword">a</span> <span class="built_in">new</span> node. The fre-</span><br><span class="line">quency is <span class="keyword">the</span> <span class="built_in">sum</span> <span class="keyword">of</span> <span class="literal">two</span> nodes:</span><br><span class="line">freq: <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">‘c’</span></span><br><span class="line"><span class="attr">freq:</span> <span class="number">1</span></span><br><span class="line"><span class="string">‘</span> <span class="string">’</span></span><br><span class="line"><span class="attr">freq:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">pq←−</span> <span class="attr">freq:</span> <span class="string">‘a’</span> <span class="attr">4 freq:</span> <span class="string">‘b’</span> <span class="number">5</span> <span class="string">←−</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(3c) <span class="builtin-name">Add</span> Back <span class="keyword">To</span> Priority Queue</span><br><span class="line">Now that we have a “new node”,</span><br><span class="line"><span class="builtin-name">add</span> it back <span class="keyword">to</span> the priority queue:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pq←−</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="string">‘c’</span> <span class="attr">1 freq:</span> <span class="string">‘</span> <span class="string">’</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="string">‘a’</span> <span class="attr">4 freq:</span> <span class="string">‘b’</span> <span class="number">5</span> <span class="string">←−</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">We <span class="keyword">repeat</span> this <span class="built_in">process</span> <span class="keyword">until</span> there is only <span class="literal">one</span> node left <span class="keyword">in</span> <span class="keyword">the</span> priority queue.</span><br><span class="line">Here are <span class="keyword">the</span> remaining steps (<span class="keyword">each</span> <span class="built_in">time</span>, we remove <span class="keyword">the</span> <span class="literal">two</span> smallest frequencies, <span class="built_in">combine</span> them, <span class="keyword">and</span> <span class="built_in">put</span></span><br><span class="line"><span class="keyword">the</span> <span class="built_in">result</span> back):</span><br></pre></td></tr></table></figure><p>pq←−</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="string">‘c’</span> <span class="attr">1 freq:</span> <span class="string">‘</span> <span class="string">’</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="string">‘a’</span> <span class="attr">4 freq:</span> <span class="string">‘b’</span> <span class="number">5</span> <span class="string">←−then,</span> <span class="string">pq←−</span> <span class="attr">freq:</span> <span class="string">‘b’</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="string">‘c’</span> <span class="attr">1 freq:</span> <span class="string">‘</span> <span class="string">’</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="string">‘a’</span> <span class="number">4</span> <span class="string">←−</span> <span class="string">then,</span> <span class="string">pq←−</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">freq:</span> ‘b’ <span class="number">5</span> <span class="string">freq:</span>^<span class="number">7</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="string">‘c’</span> <span class="attr">1 freq:</span> <span class="string">‘</span> <span class="string">’</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">freq:</span> <span class="string">‘a’</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">←−</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Now that we only have <span class="literal">one</span> node left, we can use <span class="keyword">the</span> tree we constructed <span class="built_in">to</span> <span class="built_in">create</span> <span class="keyword">the</span> huffman codes!</span><br></pre></td></tr></table></figure><h3 id="Step-4-Read-Off-The-Huffman-Codes"><a href="#Step-4-Read-Off-The-Huffman-Codes" class="headerlink" title="Step 4: Read Off The Huffman Codes"></a>Step 4: Read Off The Huffman Codes</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">At this point, <span class="keyword">the</span> frequencies <span class="keyword">of</span> <span class="keyword">the</span> letters have already been taken <span class="keyword">into</span> account; so, we no longer even</span><br><span class="line">look <span class="keyword">at</span> them. Thus, <span class="keyword">the</span> tree we’ve constructed looks like <span class="keyword">the</span> following:</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘b’</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘<span class="keyword">c</span>’ ‘ ’</span><br></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">‘a’</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">simple-spec-example.code</span><br><span class="line"><span class="number">98</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">99</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">To figure out <span class="keyword">the</span> huffman code <span class="keyword">for</span> <span class="keyword">a</span> letter, we traverse <span class="keyword">the</span> tree <span class="built_in">from</span> <span class="keyword">the</span> root <span class="built_in">to</span> <span class="keyword">the</span> node <span class="keyword">with</span> <span class="keyword">the</span> letter</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">it</span>. When we go left, we print <span class="keyword">a</span> <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">if</span> we go <span class="literal">right</span>, we print <span class="keyword">a</span> <span class="number">1.</span> For example, ‘c’ would be <span class="number">100</span> ,</span><br><span class="line">because we go <span class="literal">right</span>, <span class="keyword">then</span> left, <span class="keyword">then</span> left <span class="built_in">to</span> reach <span class="keyword">it</span>.</span><br><span class="line">Just like <span class="keyword">in</span> <span class="number">20</span> questions, we will output <span class="keyword">the</span> tree <span class="keyword">in</span> “standard <span class="built_in">format</span>”. Notice that <span class="keyword">the</span> only actual</span><br></pre></td></tr></table></figure><p>information is in the leaves of the tree. So, thecodefile, which you can get by asking the main to “make<br>a code”, will consist of line pairs: the first line will be the ASCII value of the character in the leaf and<br>the second line will be the huffman code for that character. For example, the output of the tree we just<br>constructed would look like the above. The leaves should appear in the order of a <strong>pre-order</strong> traversal.</p><h2 id="Program-Behavior-Huffman-Compression-and-Decompression"><a href="#Program-Behavior-Huffman-Compression-and-Decompression" class="headerlink" title="Program Behavior: Huffman Compression and Decompression"></a>Program Behavior: Huffman Compression and Decompression</h2><p>Now that we know how to construct a huffman code, we are ready to understand the huffman compression<br>and decompression algorithms. Here is an overview of how they work:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You <span class="keyword">do</span> <span class="keyword">this</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HuffmanCompressor</span><br><span class="line">handles <span class="keyword">this</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You <span class="keyword">do</span> <span class="keyword">this</span></span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Input</span> <span class="keyword">File</span></span><br><span class="line">(<span class="keyword">file</span>.txt)</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Huffman</span> <span class="meta">Code</span></span><br><span class="line">(file<span class="meta">.code</span>)</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Compressed <span class="keyword">File</span></span><br><span class="line">(<span class="keyword">file</span>.<span class="keyword">short</span>)</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Decompressed</span><br><span class="line"><span class="keyword">File</span> (<span class="keyword">file</span>.<span class="keyword">new</span>)</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Compression Algorithm</span><br><span class="line">(<span class="number">1</span>)HuffmanCompressorgenerates <span class="keyword">the</span> frequencies <span class="keyword">in</span> <span class="keyword">a</span> given <span class="built_in">file</span>.</span><br><span class="line">(<span class="number">2</span>)HuffmanCodecreates <span class="keyword">the</span> huffman code <span class="built_in">from</span> <span class="keyword">the</span> frequencies.</span><br><span class="line">(<span class="number">3</span>)HuffmanCodewrites out <span class="keyword">the</span> huffman codes <span class="built_in">to</span> <span class="keyword">a</span>.codefile.</span><br><span class="line">(<span class="number">4</span>)HuffmanCompressorwrites <span class="keyword">a</span>.shortfile.</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Decompression Algorithm</span><br><span class="line">(<span class="number">1</span>)HuffmanCodereads <span class="keyword">in</span> <span class="selector-tag">a</span><span class="selector-class">.codefile</span> <span class="keyword">in</span> standard format.</span><br><span class="line">(<span class="number">2</span>)HuffmanCodewrites out <span class="selector-tag">a</span><span class="selector-class">.newfile</span>.</span><br></pre></td></tr></table></figure><p>HuffmanCompressor is a client program that we will provide to you. In addition to handling user<br>interactions, it implements some of the steps of the compression and decompression algorithms that we<br>are not asking you to deal with. Specifically,HuffmanCompressorhandles:</p><ul><li>computing character frequencies for a given input file (these frequencies are passed to the first<br>  HuffmanCodeconstructor below)</li><li>compressing a text file using a given Huffman tree</li><li>producing aBitInputStreamfrom a given compressed input file (this stream is passed to the<br>  translatemethod)</li></ul><p>You do not need to implement any of the above behavior. You <strong>only</strong> need to implement the behavior and<br>methods described below.</p><h2 id="HuffmanNode"><a href="#HuffmanNode" class="headerlink" title="HuffmanNode"></a>HuffmanNode</h2><p>The contents of theHuffmanNodeclass are up to you. Though we have studied trees ofints, you <em>should</em><br>create nodes specific to solving this problem. YourHuffmanNodeshould must be a separate public class<br>and should have at least one constructor used by your tree. The fields in yourHuffmanNode <em>must</em> be<br>public. HuffmanNodeshould not contain <em>any actual huffman coding logic</em>. It should only represent a<br>single node of the tree.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Continued <span class="keyword">on</span> next page...</span><br></pre></td></tr></table></figure><h2 id="HuffmanCode"><a href="#HuffmanCode" class="headerlink" title="HuffmanCode"></a>HuffmanCode</h2><p>This class represents a huffman code for a particular message. It keeps track of a binary tree constructed<br>using the huffman algorithm.</p><h3 id="YourHuffmanCodeclass-should-have-the-following-constructors"><a href="#YourHuffmanCodeclass-should-have-the-following-constructors" class="headerlink" title="YourHuffmanCodeclass should have the following constructors:"></a>YourHuffmanCodeclass should have the following constructors:</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public HuffmanCode (int[] frequencies)</span><br><span class="line">This<span class="keyword"> constructor</span> should initialize a newHuffmanCodeobject using the algorithm described for making</span><br><span class="line">a code from an<span class="built_in"> array </span>of frequencies.frequenciesis an<span class="built_in"> array </span>of frequencies wherefrequences[i]</span><br><span class="line">is the count of the character with ASCII valuei. Make sure to use aPriorityQueueto build the</span><br><span class="line">huffman code.</span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HuffmanCode (Scanner input)</span><br><span class="line">This <span class="function"><span class="keyword">constructor</span> <span class="title">should</span> <span class="title">initialize</span> <span class="title">a</span> <span class="title">newHuffmanCodeobject</span> <span class="title">by</span> <span class="title">reading</span> <span class="title">in</span> <span class="title">a</span> <span class="title">previously</span> <span class="title">constructed</span></span></span><br><span class="line"><span class="function"><span class="title">code</span> <span class="title">from</span> <span class="title">a</span>.<span class="title">codefile</span>. <span class="title">You</span> <span class="title">may</span> <span class="title">assume</span> <span class="title">theScanneris</span> <span class="title">notnulland</span> <span class="title">is</span> <span class="title">always</span> <span class="title">contains</span> <span class="title">data</span></span></span><br><span class="line"><span class="function"><span class="title">encoded</span> <span class="title">in</span> <span class="title">legal</span>, <span class="title">valid</span> <span class="title">standard</span> <span class="title">format</span>.</span></span><br></pre></td></tr></table></figure><h3 id="YourHuffmanCodeclass-should-also-implement-the-following-public-methods"><a href="#YourHuffmanCodeclass-should-also-implement-the-following-public-methods" class="headerlink" title="YourHuffmanCodeclass should also implement the following public methods:"></a>YourHuffmanCodeclass should also implement the following public methods:</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void save (PrintStream output)</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">store</span> <span class="title">the</span> <span class="title">current</span> <span class="title">huffman</span> <span class="title">codes</span> <span class="title">to</span> <span class="title">the</span> <span class="title">given</span> <span class="title">output</span> <span class="title">stream</span> <span class="title">in</span> <span class="title">the</span> <span class="title">standard</span></span></span><br><span class="line"><span class="function"><span class="title">format</span> <span class="title">described</span> <span class="title">above</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void translate (BitInputStream input, PrintStream output)</span><br><span class="line">This method should <span class="built_in">read</span> individual bits <span class="built_in">from</span> <span class="keyword">the</span> input stream <span class="keyword">and</span> <span class="built_in">write</span> <span class="keyword">the</span> corresponding <span class="keyword">characters</span></span><br><span class="line"><span class="built_in">to</span> <span class="keyword">the</span> output. It should <span class="built_in">stop</span> reading when theBitInputStreamis <span class="literal">empty</span>. You may assume that</span><br><span class="line"><span class="keyword">the</span> input stream <span class="keyword">contains</span> <span class="keyword">a</span> legal encoding <span class="keyword">of</span> <span class="keyword">characters</span> <span class="keyword">for</span> this tree’s huffman code. See below</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">the</span> methods that aBitInputStreamhas.</span><br></pre></td></tr></table></figure><h2 id="BitInputStream"><a href="#BitInputStream" class="headerlink" title="BitInputStream"></a>BitInputStream</h2><p>The providedBitInputStreamclass reads data bit by bit. This will be useful for thetranslatemethod<br>inHuffmanCode.BitInputStreamhas the following methods:</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int nextBit ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">returns</span> <span class="title">the</span> <span class="title">next</span> <span class="title">bit</span> <span class="title">in</span> <span class="title">the</span> <span class="title">input</span> <span class="title">stream</span>. <span class="title">If</span> <span class="title">there</span> <span class="title">is</span> <span class="title">no</span> <span class="title">such</span> <span class="title">bit</span>, <span class="title">then</span> <span class="title">it</span> <span class="title">throws</span> <span class="title">a</span></span></span><br><span class="line"><span class="function"><span class="title">NoSuchElementException</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean hasNextBit ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">returns</span> <span class="title">true</span> <span class="title">if</span> <span class="title">the</span> <span class="title">input</span> <span class="title">stream</span> <span class="title">has</span> <span class="title">at</span> <span class="title">least</span> <span class="title">one</span> <span class="title">more</span> <span class="title">bit</span> <span class="title">and</span> <span class="title">false</span> <span class="title">otherwise</span>.</span></span><br></pre></td></tr></table></figure><p>The interface forBitInputStreamlooks very much like aScanner, and it should be used similiarly.</p><h2 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h2><p>Your program should exactly reproduce the format and general behavior demonstrated in the Ed tests.<br>Note that this assignment has two mostly separate parts: creating a huffman code and decompressing a<br>message using your huffman code. Of the four methods to implement, two are relevant to each part.</p><h3 id="Creating-A-Huffman-Code"><a href="#Creating-A-Huffman-Code" class="headerlink" title="Creating A Huffman Code"></a>Creating A Huffman Code</h3><p>You will write methods to (1) create a huffman code from an array of frequencies and (2) write out the<br>code you’ve created in standard format.</p><p><strong>Frequency Array Constructor</strong><br>You should use the algorithm described in the “Making a Huffman Code” section to implement this<br>constructor. You will need to usePriorityQueue<e>in thejava.utilpackage.</e></p><p>The only difference between a priority queue and a standard queue is that it uses the natural ordering of<br>the objects to decide which object to dequeue first, with objects considered “less” returned first. You will<br>be putting subtrees into your priority queue, which means you’ll be adding values of typeHuffmanNode.</p><p>This means that yourHuffmanNodeclass will have to implement theComparable<e>interface. It should<br>use the frequency of the subtree to determine its ordering relative to other subtrees, with lower frequencies<br>considered “less” than higher frequencies. If two frequencies are equal, the nodes are too.</e></p><p>Remember that, in order to make our code more flexible we should be declaring variables with their<br>interface types when possible. This means you should define yourPriorityQueuevariables with the<br>Queueinterface.</p><p>The Huffman solution is not unique. You can obtain any one of several different equivalent trees depending<br>upon how certain decisions are made. If you implement it as we have specified, then you should get exactly<br>the same tree for any particular implementation ofPriorityQueue. Make sure that you use the built-in<br>PriorityQueueclass and that when you are combining pairs of values taken from the priority queue, you<br>make the first value removed from the queue the left subtree and you make the second value removed<br>the right subtree.</p><h3 id="Decompressing-A-Message"><a href="#Decompressing-A-Message" class="headerlink" title="Decompressing A Message"></a>Decompressing A Message</h3><p>You will write methods to (1) read in a.codefile created withsave()and (2) translate a compressed<br>file back into a decompressed file.</p><p>Scanner <strong>Constructor</strong><br>This constructor will be given aScannerthat contains data produced bysave(). In other words, the<br>input for this constructor is the output you produced into a.codefile. The goal of this constructor is<br>to re-create the huffman tree from your output. Note that the frequencies are irrelevant for this part,<br>because the tree has already been constructed; so, you should set all the frequencies to some standard<br>value (such as 0 or -1) when creatingHuffmanNodes in this constructor.</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>See lecture<br>slides for ex-<br>ample of this<br>Remember that the standard code file format is a series of pairs of lines where the first line has an integer algorithm<br>representing the character’s ASCII value and the second line has the code to use for that character. You<br>might be tempted to callnextInt()to read the integer andnextLine()to read the code, but remember<br>that mixing token-based reading and line-based reading is not simple. Here is an alternative that uses a<br>method calledparseIntin theIntegerclass that allows you to use two successive calls onnextLine():</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> asciiValue = Integer.<span class="built_in">parseInt</span>(input.nextLine());</span><br><span class="line"><span class="keyword">String</span> code = input.nextLine();</span><br></pre></td></tr></table></figure><p>translate<br>This method takes in aBitInputStreamrepresenting a previously compressed message and outputs the<br>original decompressed message. BitInputStreamcan be used in a very similar way to aScanner; see<br>the description of its methods on page 4.</p><p>This method reads sequences of bits that represent encoded characters to figure out what the original<br>characters must have been. The algorithm works as follows:</p><ul><li>Begin at the top of the tree</li><li>For each bit read in from theBitInputStream, if it’s a 0, go left, and if it’s a 1, go right.</li><li>Eventually, we will hit a leaf node. Once we do, write out the integer code for that character to<br>  the output using the followingPrintStreammethod:</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">write</span>(<span class="keyword">int</span> b)</span><br></pre></td></tr></table></figure><ul><li>Then, go back to the top of the tree, and do the process over again.</li></ul><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><p>Be sure to use<br>writeinstead<br>ofprint!<br>You will have to be careful if you use recursion in your decode method. Java has a limit on the stack<br>depth you can use. For a large message, there are hundreds of thousands of characters to decode. It<br>would not be appropriate to write code that requires a stack that is hundreds of thousands of levels deep.<br>You might be forced to write some or all of this using loops to make sure that you don’t exceed the stack<br>depth.</p><h2 id="Translate-Example"><a href="#Translate-Example" class="headerlink" title="Translate Example"></a>Translate Example</h2><p>Suppose we have the following.codeand.shortfiles:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘b’</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘<span class="keyword">c</span>’ ‘ ’</span><br></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">‘a’</span></span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simple-spec-example.<span class="keyword">short</span></span><br><span class="line"><span class="number">1101110111010110011000</span></span><br></pre></td></tr></table></figure><p>Read 1 , go right. Read 1 , go right. ‘a’ is a leaf. Output ‘a’. (Input: 110101110101100 )<br>Read 0 , go left. ‘b’ is a leaf. Output ‘b’. (Input: 110101110101100 )<br>Read 1 , go right. Read 0 , go left. Read 1 , go right. ‘ ’ is a leaf. Output ‘ ’. (Input: 110101110101100 )<br>Read 1 , go right. Read 1 , go right. ‘a’ is a leaf. Output ‘a’. (Input: 110101110101100 )<br>Read 0 , go left. ‘b’ is a leaf. Output ‘b’. (Input: 110101110101100 )<br>Read 1 , go right. Read 0 , go left. Read 1 , go right. ‘ ’ is a leaf. Output ‘ ’. (Input: 110101110101100 )<br>Read 1 , go right. Read 0 , go left. Read 0 , go right. ‘c’ is a leaf. Output ‘c’. (Input: 110101110101100 )</p><p>So, the decompressed text is “ab ab c”.</p><h2 id="Creative-Aspect-secretmessage-shortandsecretmessage-code"><a href="#Creative-Aspect-secretmessage-shortandsecretmessage-code" class="headerlink" title="Creative Aspect (secretmessage.shortandsecretmessage.code)"></a>Creative Aspect (secretmessage.shortandsecretmessage.code)</h2><p>Along with your program you should turn in files namedsecretmessage.shortandsecretmessage.code<br>that represent a “secret” compressed message from you to your TA and its code file. The message can<br>be anything you want, as long as it is not offensive. Your TA will decompress your message with your<br>tree and read it while grading.</p><p>You will need to <em>upload</em> yoursecretmessage.shortandsecretmessage.codefiles to Ed by either<br>dragging and dropping them into the window or using the “Upload” button. Copying/pasting the file into<br>the Ed editor will <strong>NOT</strong> correctly copy the compressed text.</p><h2 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h2><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h3 id="x-change-x"><a href="#x-change-x" class="headerlink" title="x = change(x)"></a>x = change(x)</h3><p>An important concept introduced in lecture was calledx = change(x). This idea is related to proper<br>design of recursive methods that manipulate the structure of a binary tree. You should follow this pattern<br>where necessary when modifying your trees.</p><h3 id="Avoid-Redundancy"><a href="#Avoid-Redundancy" class="headerlink" title="Avoid Redundancy"></a>Avoid Redundancy</h3><p>Create “helper” method(s) to capture repeated code. As long as all extra methods you create areprivate<br>(so outside code cannot call them), you can have additional methods in your class beyond those specified<br>here. If you find that multiple methods in your class do similar things, you should create helper method(s)<br>to capture the common code.</p><h3 id="Generic-Structures"><a href="#Generic-Structures" class="headerlink" title="Generic Structures"></a>Generic Structures</h3><p>You should always use generic structures. If you make a mistake in specifying type parameters, the<br>Java compiler may warn you that you have “unchecked or unsafe operations” in your program. If you<br>use jGRASP, you may want to change your settings to see which line the warning refers to. Go to<br>Settings/Compiler Settings/Workspace/Flags/Argsand then uncheck the box next to “Compile”<br>and type in:-Xlint:unchecked</p><h3 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h3><p>Properly encapsulate your objects by making data fields in yourHuffmanCodeclassprivate. (Fields in<br>yourHuffmanNodeclass should bepublicfollowing the pattern from class.) Avoid unnecessary fields;<br>use fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h3 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h3><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h2 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h2><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h2 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h2><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h2 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h2><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileHuffmanReflection.txtin the Ed assessment; type your responses<br>directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A6_20Questions</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A6-20Questions.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A6-20Questions.html</id>
    <published>2023-08-13T22:22:41.000Z</published>
    <updated>2023-08-13T22:23:44.249Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Implement, manipulate, and travese a binary tree.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h2 id="Overview-The-Game-of-20-Questions"><a href="#Overview-The-Game-of-20-Questions" class="headerlink" title="Overview: The Game of 20 Questions"></a>Overview: The Game of 20 Questions</h2><p>Twenty Questions is a guessing game in which one player chooses a secret object and the other player<br>asks yes/no questions to try to idenfity the chosen object. In our version, the human will be the chooser<br>and begin a round by choosing an object. The computer will be the guesser and attempt to guess that<br>object by asking a series of yes/no questions until it thinks it knows the answer. Then, the computer<br>makes a guess; if its guess is correct, the computer wins, and otherwise the human player wins. If the<br>computer loses, it will add the chosen object to its knowledge base so it will be able to guess it the next<br>time it plays.</p><h2 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h2><p>In this assessment, you will create a class namedQuestionsGameto represent the computer’s tree of<br>yes/no questions and answers for playing games of 20 Questions. You will also create a public class named<br>QuestionNodeto represent the nodes of the tree. You are provided with a clientQuestionMain.java<br>that handles user interaction and calls your methods fromQuestionsGameto play the game.</p><h2 id="QuestionNode"><a href="#QuestionNode" class="headerlink" title="QuestionNode"></a>QuestionNode</h2><p>The contents of theQuestionNodeclass are up to you. Though we have studied trees ofints, your<br>nodes should be specific to solving this problem. YourQuestionNodeclass should have at least one<br>constructor used by your tree. Don’t include constructors that are not actually used in your program.<br>Your node’s fields <em>must</em> be public. QuestionNodeshould not contain <em>any actual game logic</em>. It should<br>only represent a single node of the tree. For reference, you can look at theAssassinNodeclass from A<br>or theIntTreeNodeclass from lecture.</p><h2 id="QuestionsGame"><a href="#QuestionsGame" class="headerlink" title="QuestionsGame"></a>QuestionsGame</h2><p>This class represents a game of 20 Questions. It stores a binary tree whose nodes represent questions<br>and answers. (Every node’s data is a string representing the text of the question or answer.) Note that<br>even though the name of the game is “20 questions”, the computer will <em>not</em> be limited to only <em>twenty</em> ;<br>the tree may have a larger height.</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>You should not<br>limit the size<br>or shape of the<br>The <em>leaves</em> of the tree represent possible answers (guesses) that the computer might make. All the other tree in any way!<br>nodes represent questions that the computer will ask to narrow the possibilities. The left branch indicates<br>the next question the computer asks if the answer to the current question is <em>yes</em> , and the right branch is<br>the next question if the answer is _no_. The game is played by starting at the root and asking the questions<br>at each node, travelling down the the tree based on the user’s answer. Once a leaf node is reached, the<br>computer will ask if that answer is the correct one. Page 3 walks through a full example of a game.</p><p>In addition to adding questions to the tree as games are played, your class will also be able to read a<br>pre-existing tree from a text file, or write the current tree out to a text file to save for later. These files<br>will have a specific format that you must follow for both reading and writing (see below).</p><h2 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h2><h1 id="Take-home-Assessment-6-20-Questions-due-August-12-2021-11-59pm"><a href="#Take-home-Assessment-6-20-Questions-due-August-12-2021-11-59pm" class="headerlink" title="Take-home Assessment 6 : 20 Questions due August 12, 2021 11:59pm"></a>Take-home Assessment 6 : 20 Questions due August 12, 2021 11:59pm</h1><h3 id="YourQuestionsGameclass-should-have-the-following-constructor"><a href="#YourQuestionsGameclass-should-have-the-following-constructor" class="headerlink" title="YourQuestionsGameclass should have the following constructor:"></a>YourQuestionsGameclass should have the following constructor:</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> QuestionsGame ()</span><br><span class="line">This <span class="function"><span class="keyword">constructor</span> <span class="title">should</span> <span class="title">initialize</span> <span class="title">a</span> <span class="title">newQuestionsGameobject</span> <span class="title">with</span> <span class="title">a</span> <span class="title">single</span> <span class="title">leaf</span> <span class="title">node</span> <span class="title">representing</span></span></span><br><span class="line"><span class="function"><span class="title">the</span> <span class="title">object</span>“<span class="title">computer</span>”.</span></span><br></pre></td></tr></table></figure><h3 id="YourQuestionsGameclass-should-also-implement-the-following-public-methods"><a href="#YourQuestionsGameclass-should-also-implement-the-following-public-methods" class="headerlink" title="YourQuestionsGameclass should also implement the following public methods:"></a>YourQuestionsGameclass should also implement the following public methods:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="built_in">read</span> (Scanner input)</span><br><span class="line">This method will be called <span class="keyword">if</span> <span class="keyword">the</span> client wants <span class="built_in">to</span> <span class="built_in">replace</span> <span class="keyword">the</span> current tree <span class="keyword">by</span> reading another tree</span><br><span class="line"><span class="built_in">from</span> <span class="keyword">a</span> <span class="built_in">file</span>. Your method will be passed aScannerthat is linked <span class="built_in">to</span> <span class="keyword">the</span> <span class="built_in">file</span> <span class="keyword">and</span> should <span class="built_in">replace</span> <span class="keyword">the</span></span><br><span class="line">current tree <span class="keyword">with</span> <span class="keyword">a</span> <span class="built_in">new</span> tree <span class="keyword">using</span> <span class="keyword">the</span> information <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">file</span>. Assume <span class="keyword">the</span> <span class="built_in">file</span> is legal <span class="keyword">and</span> <span class="keyword">in</span> standard</span><br><span class="line"><span class="built_in">format</span> (see below). Make sure <span class="built_in">to</span> <span class="built_in">read</span> entire <span class="keyword">lines</span> <span class="keyword">of</span> input <span class="keyword">using</span> thenextLinemethod.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="built_in">write</span> (PrintStream output)</span><br><span class="line">This method should store <span class="keyword">the</span> current questions tree <span class="built_in">to</span> <span class="keyword">an</span> output <span class="built_in">file</span> represented <span class="keyword">by</span> <span class="keyword">the</span> given</span><br><span class="line">PrintStream. This method can be used <span class="built_in">to</span> later play another game <span class="keyword">with</span> <span class="keyword">the</span> computer <span class="keyword">using</span></span><br><span class="line">questions <span class="built_in">from</span> this <span class="literal">one</span>. The <span class="built_in">file</span> should be written <span class="keyword">using</span> <span class="keyword">the</span> standard <span class="built_in">format</span> (see below).</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void askQuestions ()</span><br><span class="line">This method should use <span class="keyword">the</span> current question tree <span class="built_in">to</span> play <span class="literal">one</span> complete guessing game <span class="keyword">with</span> <span class="keyword">the</span> user,</span><br><span class="line">asking yes/no questions <span class="keyword">until</span> reaching <span class="keyword">an</span> answer object <span class="built_in">to</span> guess. A game <span class="keyword">begins</span> <span class="keyword">with</span> <span class="keyword">the</span> root node</span><br><span class="line"><span class="keyword">of</span> <span class="keyword">the</span> tree <span class="keyword">and</span> <span class="keyword">ends</span> upon reaching <span class="keyword">an</span> answer leaf node.</span><br><span class="line">If <span class="keyword">the</span> computer wins <span class="keyword">the</span> game , this method should print <span class="keyword">a</span> message saying so.</span><br><span class="line">Otherwise , this method should ask <span class="keyword">the</span> user <span class="keyword">for</span> <span class="keyword">the</span> following:</span><br></pre></td></tr></table></figure><ul><li>what object they were thinking of,</li><li>a question to distinguish that object from the player’s guess, and</li><li>whether the player’s object is the yes or no answer for that question.</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean yesTo (String prompt)</span><br><span class="line">This method asks the given question until the<span class="built_in"> user </span>types “y” <span class="keyword">or</span> “n”. Returns <span class="literal">true</span> <span class="keyword">if</span> “y”, <span class="literal">false</span> <span class="keyword">if</span> “n”.</span><br><span class="line">This method is provided <span class="keyword">for</span> you <span class="keyword">and</span> should <span class="keyword">not</span> be modified!</span><br></pre></td></tr></table></figure><h2 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h2><h3 id="User-Input-Yes-and-No"><a href="#User-Input-Yes-and-No" class="headerlink" title="User Input: Yes and No"></a>User Input: Yes and No</h3><p>At various points in this assignment, you will need to get a yes or no answer from the user. You must<br>construct a <strong>single consoleScannerattached toSystem.inthat you store in a data field called<br>consoleand use throughout your class</strong>. All input read from thisScannershould use thenextLine<br>method.</p><p>To help with asking these questions, you are provided a method calledyesTo. This method assumes<br>there is a field calledconsolethat has been initialized with a Scanner as decribed above. You should<br>include this method <em>without modification</em> in yourQuestionsGameclass and use it whenever you ask the<br>user to answer a yes/no question. <strong>The code foryesTois included in the starter code in Ed.</strong></p><h3 id="Question-Tree-File-Format"><a href="#Question-Tree-File-Format" class="headerlink" title="Question Tree File Format"></a>Question Tree File Format</h3><p>Thereadandwritemethods will be interacting with text files containing questions and answers from<br>20 questions games. These files will follow a standard format.</p><p>A singleQuestionNodewill be represented as a non-empty sequence of line pairs. The first line of the<br>pair will contain either “Q:” or “A:” to differentiate between questions (branches) and answers (leaves).<br>The second line of the pair should contain the text for that node (the <em>actual</em> question or answer). You<br>may assume that the lines containing “Q:” or “A:” will contain exactly that text (case-sensitive) and no<br>other text. You may also assume the file contains an even number of lines, exactly following this format.<br>The nodes of the tree will appear in the file following a <em>pre-order</em> traversal (i.e. the overall root of the<br>tree will be the first node in the file).</p><p>You should both assume that any files passed to yourreadmethod <strong>AND</strong> ensure that any files you create<br>in thewritemethod follow this format. ThereadTreeandwriteTreemethods from section will be<br><em>very helpful</em> in writing yourreadandwritemethods for this assessment.</p><h2 id="Sample-Walk-Throughs"><a href="#Sample-Walk-Throughs" class="headerlink" title="Sample Walk-Throughs"></a>Sample Walk-Throughs</h2><p>Here is an example question file, the associated tree, and a sample game that might be played with this<br>tree:</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Notice that <span class="keyword">the</span></span><br><span class="line"><span class="built_in">file</span> represents</span><br><span class="line"><span class="keyword">a</span> pre-order</span><br><span class="line">traversal <span class="keyword">of</span> <span class="keyword">the</span></span><br><span class="line">tree.</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">questions.txt</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Is it an animal?</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Can it fly?</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">bird</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Does it have a tail?</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">mouse</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">spider</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Does it have wheels?</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">bicycle</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Is it nice?</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">TA</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">teacher</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Is</span> it an <span class="keyword">animal</span>?</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can <span class="keyword">it</span> fly?</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bird </span>Does <span class="keyword">it </span>have a tail?</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mouse spider</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Does <span class="keyword">it</span> have wheels?</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bicycle </span>Is <span class="keyword">it </span>nice?</span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TA</span> teacher</span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sample game (computer wins)</span><br><span class="line">Welcome <span class="keyword">to</span> the cse143 question <span class="keyword">program</span>.</span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> <span class="keyword">read</span> <span class="keyword">in</span> the previous tree? (y/n)? y</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please think of an object <span class="keyword">for</span> me to guess.</span><br><span class="line">Is it an animal? (<span class="keyword">y</span>/n)? n</span><br><span class="line">Does it have wheels? (<span class="keyword">y</span>/n)? <span class="keyword">y</span></span><br><span class="line">Would your object happen to be bicycle? (<span class="keyword">y</span>/n)? <span class="keyword">y</span></span><br><span class="line">Great, I got it right!</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> <span class="keyword">go</span> again? (y/n)? n</span><br></pre></td></tr></table></figure><p>Initially, the computer is not very good at the game, but it improves each time it loses. If the computer<br>guesses incorrectly, it asks you to give it a new question to help in future games. For example, suppose</p><p>in the preceding log that the player was thinking of a car instead. That game might look like this:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sample game (computer loses)</span><br><span class="line">Welcome <span class="keyword">to</span> the cse143 question <span class="keyword">program</span>.</span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> <span class="keyword">read</span> <span class="keyword">in</span> the previous tree? (y/n)? y</span><br></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Please think <span class="keyword">of</span> an <span class="built_in">object</span> <span class="keyword">for</span> <span class="keyword">me</span> <span class="keyword">to</span> guess.</span><br><span class="line"><span class="keyword">Is</span> it an animal? (y/n)? n</span><br><span class="line">Does it have wheels? (y/n)? y</span><br><span class="line">Would your <span class="built_in">object</span> happen <span class="keyword">to</span> be bicycle? (y/n)? n</span><br><span class="line">What <span class="keyword">is</span> the name <span class="keyword">of</span> your <span class="built_in">object</span>? car</span><br><span class="line">Please give <span class="keyword">me</span> a yes/no question that</span><br><span class="line">distinguishes between your <span class="built_in">object</span></span><br><span class="line"><span class="keyword">and</span> mine--&gt; Does it <span class="keyword">get</span> stuck <span class="keyword">in</span> traffic?</span><br><span class="line"><span class="keyword">And</span> what <span class="keyword">is</span> the answer <span class="keyword">for</span> your <span class="built_in">object</span>? (y/n)? y</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> <span class="keyword">go</span> again? (y/n)? n</span><br></pre></td></tr></table></figure><p>The computer takes the new information from a lost game and uses it to replace the old incorrect answer<br>node with a new question node that has the old incorrect answer and new correct answer as its children.<br>After the preceding game, the computer’s game tree would be the following:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">questions.txt</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Is it an animal?</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Can it fly?</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">bird</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Does it have a tail?</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">mouse</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">spider</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Does it have wheels?</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Does it get stuck <span class="keyword">in</span> traffic?</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">car</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">bicycle</span><br><span class="line"><span class="symbol">Q:</span></span><br><span class="line">Is it nice?</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">TA</span><br><span class="line"><span class="symbol">A:</span></span><br><span class="line">teacher</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">yes</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">no</span></span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Is</span> it an <span class="keyword">animal</span>?</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can <span class="keyword">it</span> fly?</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bird </span>Does <span class="keyword">it </span>have a tail?</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mouse spider</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Does <span class="keyword">it</span> have wheels?</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Does <span class="keyword">it</span> <span class="keyword">get</span> stuck <span class="keyword">in</span> traffic?</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">car bicycle</span></span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Is</span> it nice?</span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TA</span> teacher</span><br></pre></td></tr></table></figure><p>Note thatQuestionMainwill always read and write to a file namedquestions.txt. If you want to start<br>with the tree fromspec-questions.txtorbig-questions.txt, then you should copy the contents of<br>those files to a file namedquestions.txt. Be careful, since the program will write the tree to this file<br>every time.</p><h2 id="Development-Strategy"><a href="#Development-Strategy" class="headerlink" title="Development Strategy"></a>Development Strategy</h2><p>We suggest that you develop the program in the following stages:<br>(1) Before you begin, you should write “stubs” for the required methods so that you will be able to<br>test usingQuestionMain. Write “dummy” methods that do essentially nothing as placeholders so<br>QuestionMainwill be able to compile and run.<br>(2) First, you should decide what fields belong in theQuestionNodeandQuestionsGameclasses. Once<br>you’ve chosen the fields, you should implement the fullQuestionNodeclass and the constructor<br>forQuestionsGame.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">3</span>) Next, you should implementwrite(outputting <span class="keyword">a</span> tree is easier than reading <span class="literal">one</span>). Make sure <span class="built_in">to</span></span><br><span class="line">look back atwriteTreefrom section!</span><br><span class="line">(<span class="number">4</span>) Then, you should implement readwhich reads <span class="keyword">in</span> <span class="keyword">a</span> question tree. Make sure <span class="built_in">to</span> look back <span class="keyword">at</span></span><br><span class="line">readTreefrom section!</span><br><span class="line">(<span class="number">5</span>) Finally, you should implementaskQuestions. At this point, you’ll be able <span class="built_in">to</span> play <span class="keyword">the</span> game. When</span><br><span class="line">you play, you can <span class="built_in">add</span> questions <span class="literal">one</span> <span class="keyword">by</span> <span class="literal">one</span> <span class="keyword">and</span> play <span class="keyword">with</span> your game <span class="built_in">to</span> check <span class="keyword">if</span> <span class="keyword">it</span>’s working.</span><br></pre></td></tr></table></figure><h2 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h2><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h3 id="x-change-x"><a href="#x-change-x" class="headerlink" title="x = change(x)"></a>x = change(x)</h3><p>An important concept introduced in lecture was calledx = change(x). This idea is related to proper<br>design of recursive methods that manipulate the structure of a binary tree. You should follow this pattern<br>where necessary when modifying your trees.</p><p>For example, at the end of a game lost by the computer, you might be tempted to “morph” what used<br>to be an answer node of the tree into a question node by directly modifying its fields. This is considered<br>bad style because question nodes and answer nodes are fundamentally different kinds of data. You can<br>rearrange where nodes appear in the tree, but you shouldn’t turn a answer node into a question node<br>just to simplify the programming you need to perform. Instead, you should create or rearrange nodes as<br>needed. (This is similar toAssassinManager, where you were also rearranging rather than “morphing”<br>nodes.)</p><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><p>For this assessment, you <strong>MUST</strong> implement your algorithms recursively, and you must <em>not</em> use any loops.<br>Don’t create special cases in your recursive code if they are not necessary. Avoid repeated logic as much<br>as possible.</p><h3 id="Avoid-Redundancy"><a href="#Avoid-Redundancy" class="headerlink" title="Avoid Redundancy"></a>Avoid Redundancy</h3><p>Create “helper” method(s) to capture repeated code. As long as all extra methods you create areprivate<br>(so outside code cannot call them), you can have additional methods in your class beyond those specified<br>here. If you find that multiple methods in your class do similar things, you should create helper method(s)<br>to capture the common code.</p><h3 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h3><p>Properly encapsulate your objects by making data fields in yourQuestionGameclassprivate. (Fields in<br>yourQuestionNodeclass should bepublicfollowing the pattern from class.) Avoid unnecessary fields;<br>use fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h3 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h3><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h2 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h2><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h2 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h2><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h2 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h2><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileQuestionsGameReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A5_Anagram_Solver</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A5-Anagram-Solver.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A5-Anagram-Solver.html</id>
    <published>2023-08-10T21:59:35.000Z</published>
    <updated>2023-08-10T22:00:24.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Implement a recursive backtracking approach to exhaustive search.</li><li>Implement simple optimizations to improve efficiency and avoid unnecessary computation.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>An <em>anagram</em> is a word or phrase made by rearranging the letters of another word or phrase. For example,<br>the words “midterm” and “trimmed” are anagrams. If you ignore spaces and capitalization and allow<br>multiple words, a multi-word phrase can be an anagram of some other word or phrase. For example, the<br>phrases “Clint Eastwood” and “old west action” are anagrams.<br>In this assessment, you will create a class calledAnagramSolverthat uses a dictionary to print all anagram<br>phrases of a given word or phrase. You will use <em>recursive backtracking</em> to implement your algorithm.</p><p>We have provided you with a client program,AnagramMain, that prompts the user for a phrase and then<br>passes that phrase to yourAnagramSolver, which will then print all its anagrams.</p><h1 id="AnagramSolver"><a href="#AnagramSolver" class="headerlink" title="AnagramSolver"></a>AnagramSolver</h1><h2 id="YourAnagramSolverclass-should-have-the-following-constructor"><a href="#YourAnagramSolverclass-should-have-the-following-constructor" class="headerlink" title="YourAnagramSolverclass should have the following constructor:"></a>YourAnagramSolverclass should have the following constructor:</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public AnagramSolver (List&lt;String&gt; dictionary)</span><br><span class="line">This constructor should initialize a newAnagramSolverobject <span class="keyword">that</span> will use <span class="keyword">the</span> <span class="keyword">given</span> <span class="built_in">list</span> <span class="keyword">as</span> <span class="keyword">its</span></span><br><span class="line">dictionary. You should <span class="keyword">not</span> change <span class="keyword">the</span> <span class="built_in">list</span> <span class="keyword">in</span> any way. You may assume <span class="keyword">that</span> <span class="keyword">the</span> dictionary <span class="keyword">is</span> a</span><br><span class="line">nonempty collection <span class="keyword">of</span> nonempty sequences <span class="keyword">of</span> letters <span class="keyword">and</span> <span class="keyword">that</span> <span class="keyword">it</span> <span class="keyword">contains</span> no duplicates.</span><br><span class="line">You should “preprocess” <span class="keyword">the</span> dictionary <span class="keyword">in</span> your constructor <span class="keyword">to</span> compute all <span class="keyword">of</span> <span class="keyword">the</span> inventories <span class="keyword">in</span></span><br><span class="line">advance (once per <span class="built_in">word</span>).</span><br></pre></td></tr></table></figure><h2 id="YourAnagramSolvershould-also-implement-the-following-public-method"><a href="#YourAnagramSolvershould-also-implement-the-following-public-method" class="headerlink" title="YourAnagramSolvershould also implement the following public method:"></a>YourAnagramSolvershould also implement the following public method:</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void print (String <span class="keyword">text</span>, int <span class="built_in">max</span>)</span><br><span class="line">This method should use recursive backtracking <span class="built_in">to</span> find combinations <span class="keyword">of</span> <span class="keyword">words</span> that have <span class="keyword">the</span> same</span><br><span class="line">letters <span class="keyword">as</span> <span class="keyword">the</span> given <span class="keyword">string</span>. It should print all combinations <span class="keyword">of</span> <span class="keyword">words</span> <span class="built_in">from</span> <span class="keyword">the</span> dictionary that are</span><br><span class="line">anagrams oftextand that <span class="built_in">include</span> <span class="keyword">at</span> mostmaxwords (<span class="keyword">or</span> <span class="keyword">an</span> unlimited <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">words</span> ifmaxis</span><br><span class="line"><span class="number">0</span>) toSystem.out.</span><br><span class="line">You should throw anIllegalArgumentExceptionifmaxis less than <span class="number">0.</span></span><br></pre></td></tr></table></figure><h1 id="UsingLetterInventory"><a href="#UsingLetterInventory" class="headerlink" title="UsingLetterInventory"></a>UsingLetterInventory</h1><p>An important aspect of the recursive backtracking solutions is separation of the recursive code from the<br>code that manages low-level details of the problem. Many of the problems we’ve done so far (n-queens,<br>for example) achieve this separation by using a separate class to manage the state of the current possible<br>solution. (In n-queens, this was theBoardclass that tracked where queens were located and whether or<br>not a placement was safe.)</p><h1 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h1><h1 id="Take-home-Assessment-6-Anagram-Solver-due-August-5-2021-11-59-pm"><a href="#Take-home-Assessment-6-Anagram-Solver-due-August-5-2021-11-59-pm" class="headerlink" title="Take-home Assessment 6: Anagram Solver due August 5, 2021 11: 59 pm"></a>Take-home Assessment 6: Anagram Solver due August 5, 2021 11: 59 pm</h1><p>In this assessment, you will follow a similar strategy. In the anagrams problem, the low-level details<br>involve keeping track of various letters and figuring out when one group of letters can be formed from<br>another group of letters. Luckily, theLetterInventoryclass we implemented in Assessment 1 turns<br>out to be exactly what we need! You should review the Assesment 1 specification to remind yourself of<br>the available methods, but you should use our provided implementation ofLetterInventory.classor<br>LetterInventory.jar.</p><p>Thesubtractmethod of theLetterInventoryclass is the key to solving this problem. For exam-<br>ple, if you have a LetterInventoryfor the phrase “george bush” and ask if you can subtract the<br>LetterInventoryfor “bee”, the answer is yes, sosubtractwould return a non-null result (because<br>every letter in the “bee” inventory is also in the “george bush” inventory). Sincenullis not returned,<br>you need to explore this possibility. The word “bee” alone is not enough to account for all of the letters<br>of “george bush”, which is why you’d want to work with the new inventory formed by subtracting the<br>letters from “bee” as you continue the exploration.</p><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><h2 id="AnagramSolverConstructor"><a href="#AnagramSolverConstructor" class="headerlink" title="AnagramSolverConstructor"></a>AnagramSolverConstructor</h2><p>You should “pre-process” the dictionary in your constructor to compute the inventories for each word<br>in advance (one per word). You’ll want fast access to these inventories as you explore the possible<br>combinations. As usual, a map will give you fast access. In this problem, we don’t care about the order<br>of the words in our map, but we _do_ care about speed; so, you should be sure to useHashMap.</p><h2 id="printAlgorithm"><a href="#printAlgorithm" class="headerlink" title="printAlgorithm"></a>printAlgorithm</h2><p>Yourprintmethod must produce the anagrams in the same format as in the example execution below.<br>The easiest way to do this is to build up your answer in aListorStack. Once you build up a complete<br>answer in your data structure, you can simply print the structure and it will have the appropriate format.</p><p>You are required to solve this problem by using recursive backtracking. In particular, you should write a<br>recursive method that builds up an answer one word at a time. On each recursive call, you should search<br>the dictionary from beginning to end and to explore each word that is a match for the current set of<br>letters. The possible solutions should be explored in dictionary order. That is, you should examine the<br>words in the same order in which they appear in the dictionary. (Do not make any assumptions about<br>what that order is.)</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>The given dic-<br>tionary might<br>not be sorted<br>Recursive backtracking is inherently inefficient since it has to explore every possible option. To improve on alphabetically!<br>this, you will implement one optimization known as “pruning”. For any given phrase, you should reduce<br>the dictionary to a smaller dictionary of relevant words <em>before</em> you begin your exhaustive search. A word<br>is relevant if it can be subtracted from the given phrase. In most cases, only a fraction of the dictionary<br>will be relevant to any given phrase. So, reducing the dictionary before you begin the recursion will allow<br>you to speed up the searches that happen on each recursive invocation.</p><p>To implement this, you should construct a short dictionary for each phrase you are asked to explore that<br>includes just the words relevant to that phrase. You should do this once before the recursion begins–not<br>on each recursive call. You <em>may</em> continue to prune this smaller dictionary on each recursive call, but keep<br>in mind that it is not required and it will make the code more difficult to write. If you decide to prune on<br>each recursive call, clearly document it.</p><h2 id="Development-Strategy"><a href="#Development-Strategy" class="headerlink" title="Development Strategy"></a>Development Strategy</h2><p>We recommend that you start by writing printwithout the pruning optimization and ignoringmax<br>entirely. Once that works, you should then implement a non-zero max, followed by the zero case once<br>the non-zero case is working. Finally, you should add pruning after the rest of the behavior works.</p><h1 id="Full-Example-Walk-Through"><a href="#Full-Example-Walk-Through" class="headerlink" title="Full Example Walk-Through"></a>Full Example Walk-Through</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Suppose we have <span class="keyword">the</span> following dictionary (eleven.txt):</span><br><span class="line">zebra</span><br><span class="line"><span class="literal">one</span></span><br><span class="line">plus</span><br><span class="line">won</span><br><span class="line">potato</span><br><span class="line">twelve</span><br></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We ask the <span class="function"><span class="keyword">program</span></span> to <span class="built_in">print</span> <span class="built_in">all</span> anagrams of the phrase “eleven plus two”:</span><br></pre></td></tr></table></figure><h2 id="Step-1-Prune-The-Dictionary"><a href="#Step-1-Prune-The-Dictionary" class="headerlink" title="Step 1: Prune The Dictionary"></a>Step 1: Prune The Dictionary</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Not all <span class="keyword">the</span> <span class="keyword">words</span> <span class="keyword">in</span> <span class="keyword">the</span> dictionary are relevant <span class="built_in">to</span> <span class="keyword">the</span> phrase “eleven plus <span class="literal">two</span>.” In particular, “potato”</span><br><span class="line"><span class="keyword">and</span> “zebra” contain letters (“<span class="keyword">a</span>” <span class="keyword">and</span> “z”, respectively) that are <span class="keyword">not</span> ineleven plus <span class="literal">two</span>. So, we prune</span><br><span class="line"><span class="keyword">the</span> dictionary <span class="built_in">to</span> <span class="keyword">the</span> following:</span><br><span class="line"><span class="literal">one</span></span><br><span class="line">plus</span><br><span class="line">won</span><br><span class="line">twelve</span><br></pre></td></tr></table></figure><h2 id="Step-2-Find-The-Words"><a href="#Step-2-Find-The-Words" class="headerlink" title="Step 2: Find The Words"></a>Step 2: Find The Words</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Now <span class="keyword">that</span> we’ve pruned our dictionary, we know what our <span class="built_in">word</span> choices are (<span class="keyword">the</span> remaining <span class="built_in">words</span> <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line">dictionary.) So, we go <span class="keyword">through</span> our <span class="built_in">words</span> recursively, keeping track <span class="keyword">of</span> <span class="keyword">the</span> unused letters <span class="keyword">at</span> each step:</span><br><span class="line">[eeellnopstuvw]</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[elnopsu]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eeellpstuv]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eeelnotvw]</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eno]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eeeltv]</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">eeltvw</span>] bad</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus won twelve</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[eellpstuvw]</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[lpsu]</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">bad</span> <span class="keyword">bad</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one twelve plus</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bad</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus wontwelve</span></span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">eeltvw</span>] bad</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus twelve</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bad</span> <span class="keyword">bad</span> <span class="keyword">bad</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">onepluswon twelve</span></span><br></pre></td></tr></table></figure><p>bad</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus won twelve</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">one plus won twelve</span></span><br></pre></td></tr></table></figure><h2 id="Example-Execution"><a href="#Example-Execution" class="headerlink" title="Example Execution"></a>Example Execution</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the cse143 anagram solver.</span><br><span class="line">What <span class="keyword">is</span> the name of the dictionary <span class="keyword">file</span>? eleven.txt</span><br><span class="line">phrase <span class="keyword">to</span> scramble (<span class="keyword">return</span> <span class="keyword">to</span> <span class="keyword">quit</span>)? eleven plus two</span><br><span class="line">Max words <span class="keyword">to</span> include (<span class="number">0</span> <span class="keyword">for</span> <span class="keyword">no</span> <span class="built_in">max</span>)? <span class="number">0</span></span><br><span class="line">[one, plus, twelve]</span><br><span class="line">[one, twelve, plus]</span><br><span class="line">[plus, one, twelve]</span><br><span class="line">[plus, twelve, one]</span><br><span class="line">[twelve, one, plus]</span><br><span class="line">[twelve, plus, one]</span><br><span class="line">phrase <span class="keyword">to</span> scramble (<span class="keyword">return</span> <span class="keyword">to</span> <span class="keyword">quit</span>)?</span><br></pre></td></tr></table></figure><h1 id="Hints-and-Tips"><a href="#Hints-and-Tips" class="headerlink" title="Hints and Tips"></a>Hints and Tips</h1><h2 id="Use-The-Provided-Dictionary"><a href="#Use-The-Provided-Dictionary" class="headerlink" title="Use The Provided Dictionary"></a>Use The Provided Dictionary</h2><p>The constructor for your class is passed a reference to a dictionary stored as aListofStringobjects.<br>You can use this dictionary for your own object as long as you don’t change it. In other words, you don’t<br>need to make your own independent copy of the dictionary as long as you don’t modify the one that is<br>passed to you in the constructor.</p><h2 id="Handling-Whenmaxis-Zero"><a href="#Handling-Whenmaxis-Zero" class="headerlink" title="Handling Whenmaxis Zero"></a>Handling Whenmaxis Zero</h2><p>You may not make any assumptions about the length of the input or output when handling the case when<br>maxis 0 in theprintmethod. In particular, do NOT try and simply search for all anagrams where the<br>number of words is smaller then some arbitrary number since then there is no guarantee your output will<br>always be correct (no matter how large an artificial limit you choose). Instead, try to handle whenmaxis<br>0 in a way that has meaning.</p><h2 id="Let-Exhaustive-Search-Do-Its-Job"><a href="#Let-Exhaustive-Search-Do-Its-Job" class="headerlink" title="Let Exhaustive Search Do Its Job"></a>Let Exhaustive Search Do Its Job</h2><p>Don’t make this problem harder than it needs to be. You are doing an exhaustive search of all the<br>possibilities. You have to avoid dead ends, and you have to implement the optimization listed above,<br>but otherwise you are exploring every possibility. For example, in the example execution you will see that<br>one solution for “eleven plus two” is [one, plus, twelve]. Because this is found as a solution, you know<br>that every other permutation of these words will also be included ([one, twelve, plus], [plus, twelve, one],<br>etc.). But you don’t have to (and should not) write any special code to make that work. This is a natural<br>result of the exhaustive nature of the search. It will locate each of these possibilities and print them out<br>when they are found. Similarly, you don’t need any special cases for words that have already been used.<br>If someone asks you for the anagrams of “bar bar bar”, you should include [bar, bar, bar] as an answer.</p><h2 id="Testing-Pruning"><a href="#Testing-Pruning" class="headerlink" title="Testing Pruning"></a>Testing Pruning</h2><p>While developing your program, you can verify that pruning is working by printing the size of the original<br>dictionary and the pruned dictionary. This should be doable by hand for theeleven.txtdictionary. And,<br>for example, when processing “george bush” ondict1.txt, you go from a dictionary size of 56 to a<br>pruned size of 31.</p><h2 id="Output-Limits"><a href="#Output-Limits" class="headerlink" title="Output Limits"></a>Output Limits</h2><p>Sometimes this program produces a lot of output. When you run it in jGRASP, it will display just 500<br>lines of output. If you want to see more, go to the Build menu and select the “Run in MSDOS Window”<br>option. Then when the window pops up, right-click on the title bar of the window, select Properties, and<br>under the “Layout” tab you should be able to adjust the “Screen Buffer Size” Height to something higher<br>(like 9999 lines).</p><p>Ed also limits the amount of output, but this limit cannot be changed. Therefore, we strongly recommend<br>you test your code in jGRASP before submitting.</p><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h2 id="Recursive-Approach"><a href="#Recursive-Approach" class="headerlink" title="Recursive Approach"></a>Recursive Approach</h2><p>Be sure to implement your recursive backtracking following the guidelines discussed in class. Avoid<br>repeating computations that you don’t need to and exploring branches that you know will never be<br>printed. Don’t create special cases in your recursive code if they are not necessary. Avoid repeated logic<br>as much as possible.</p><h2 id="Avoid-Redundancy"><a href="#Avoid-Redundancy" class="headerlink" title="Avoid Redundancy"></a>Avoid Redundancy</h2><p>Create “helper” method(s) to capture repeated code. As long as all extra methods you create areprivate<br>(so outside code cannot call them), you can have additional methods in your class beyond those specified<br>here. If you find that multiple methods in your class do similar things, you should create helper method(s)<br>to capture the common code.</p><h2 id="Generic-Structures"><a href="#Generic-Structures" class="headerlink" title="Generic Structures"></a>Generic Structures</h2><p>You should always use generic structures. If you make a mistake in specifying type parameters, the<br>Java compiler may warn you that you have “unchecked or unsafe operations” in your program. If you<br>use jGRASP, you may want to change your settings to see which line the warning refers to. Go to<br>Settings/Compiler Settings/Workspace/Flags/Argsand then uncheck the box next to “Compile”<br>and type in:-Xlint:unchecked</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please</p><p>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileAnagramSolverReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A4_Grammer_Solver</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A4-Grammer-Solver.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A4-Grammer-Solver.html</id>
    <published>2023-08-08T00:50:11.000Z</published>
    <updated>2023-08-08T00:50:54.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Implement recursive methods to solve a naturally-recursive problem.</li><li>Implement a public-private recursive pair.</li><li>Choose an appropriate data structure to represent specified data.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Overview-Languages-Grammars-and-BNF"><a href="#Overview-Languages-Grammars-and-BNF" class="headerlink" title="Overview: Languages, Grammars, and BNF"></a>Overview: Languages, Grammars, and BNF</h1><p>In this assessment, you will write a classGrammarSolverthat will be able to generate random sentences<br>(or other output) from a set of specially-formatted rules. These rules are called a <em>grammar</em> and are used<br>to define a <em>language</em>. Our grammars will be written in <em>Backus-Naur Form (BNF)</em>.</p><h2 id="Formal-Languages"><a href="#Formal-Languages" class="headerlink" title="Formal Languages"></a>Formal Languages</h2><p>A <em>formal language</em> is a set of words and symbols along with a set of rules defining how those symbols may<br>be used together. These rules dictate what are considered valid constructions in the defined language.<br>For example, in English, “A boy threw the ball.” is a valid sentence, but “A threw boy ball the” is not,<br>despite consisting of the same words, because the words are put together in an invalid way.</p><h2 id="Grammars"><a href="#Grammars" class="headerlink" title="Grammars"></a>Grammars</h2><p>A <em>grammar</em> is a way of describing the syntax and symbols of a formal language. Grammars have two types<br>of “symbols” (e.g., words, phrases, sentences): <em>terminals</em> and <em>non-terminals</em>. A <em>terminal</em> is a fundamental<br>word or symbol in the language. For example, in English, any single word would be considered a terminal.<br>A <em>non-terminal</em> is a symbol that is used to define specific groups of symbols that may be used in the<br>language. In a grammar for English, we might have non-terminals such as “adjective,” “noun phrase,”<br>and “sentence” to name a few.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sentence</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">verb</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">runs</span></span><br></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dog</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">article</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">the</span></span><br></pre></td></tr></table></figure><p>For example, consider the following simple language:</p><ul><li><em>Terminals:</em> the, a, cat, dog, runs, walks</li><li><em>Non-terminals:</em><br>  <strong>- sentence</strong> : “article <strong>and</strong> object <strong>and</strong> verb”<br>  <strong>- article</strong> : “the <strong>or</strong> a”.<br>  <strong>- object</strong> : “cat <strong>or</strong> dog”.<br>  <strong>- verb</strong> : “runs <strong>or</strong> walks”.</li></ul><p>This language allows the following sentences:</p><p>“the cat runs” “the cat walks” “a cat runs” “a cat walks”<br>“the dog runs” “the dog walks” “a dog runs” “a dog walks”</p><h1 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h1><h1 id="Take-home-Assessment-5-Grammar-Solver-due-J-uly-2-9-2021-11-5-9-pm"><a href="#Take-home-Assessment-5-Grammar-Solver-due-J-uly-2-9-2021-11-5-9-pm" class="headerlink" title="Take-home Assessment 5: Grammar Solver due J uly 2 9 , 2021 11:5 9 pm"></a>Take-home Assessment 5: Grammar Solver due J uly 2 9 , 2021 11:5 9 pm</h1><h2 id="Backus-Naur-Form-BNF"><a href="#Backus-Naur-Form-BNF" class="headerlink" title="Backus-Naur Form (BNF)"></a>Backus-Naur Form (BNF)</h2><p><em>Backus-Naur Form (BNF)</em> is a specific format for specifying grammars. Each line of BNF looks like the<br>following:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nonterminal::=<span class="keyword">rule</span>|<span class="keyword">rule</span>|...|<span class="keyword">rule</span></span><br></pre></td></tr></table></figure><p>Each “rule” is some sequence of terminals or non-terminals separated by whitespace. The‘|’character<br>separates different possible rules for the same non-terminal. For example, the grammar specified above<br>written in BNF would look like:</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentence::=article object verb</span><br><span class="line">article::=the|a</span><br><span class="line">object::=cat|dog</span><br><span class="line">verb::=runs|walks</span><br></pre></td></tr></table></figure><p>Notice that the non-terminalsentencehas a single option consisting of multiple non-terminals, whereas<br>the others non-terminals each consist of multiple options.</p><p>Rules may be duplicated for the same non-terminal to make a particular expansion more likely than others.<br>For example, suppose the above grammar were modified as follows:</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentence::=article object verb</span><br><span class="line">article::=the|a</span><br><span class="line">object::=cat|cat|dog</span><br><span class="line">verb::=runs|walks</span><br></pre></td></tr></table></figure><p>This grammar would produce the same sentences as the original grammar, but sentences containing “cat”<br>would be twice as likely to occur as sentences containing “dog.”</p><p>In addition, for this assessment, you may assume the following about all BNF rules:</p><ul><li>Each line will contain <em>exactly one occurrence</em> of::=which will be the separator between the name<br>  of a non-terminal and its options.</li><li>A pipe (|) will separate each option for a non-terminal. If there is only one option for a particular<br>  non-terminal (like withsentenceabove), there will be no pipe on that line.</li><li>Whitespace separates tokens but doesn’t haven any special meaning. There will be at least one<br>  whitespace character between each part of a single rule. Extra whitespace should be ignored.</li><li>Symbols are case-sensistive. (For example,<s>would not be considered the same symbol as<s>.)</s></s></li><li>A <em>terminal</em> is any symbol that does not appear on the left-hand side of a rule.</li><li>The text before the “::=” is not empty, does not contain a pipe (|) character, and does not contain<br>  any whitespace.</li><li>The text after the “::=” will be nonempty.</li></ul><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>In this assessment you will write a class that accepts a list of rules for a grammar in Backus-Naur Form<br>and allows the client to randomly generate elements of the grammar. You will use <strong>recursion</strong> to implement<br>the core of your algorithm.</p><p>We have provided you with a client program,GrammarMain.java, that handles the file processing and<br>user interaction. This program reads a BNF grammar input text file and passes its entire contents to you<br>as aListofStrings. You will write a classGrammarSolverthat generates random results based on<br>the rules provided.</p><h1 id="GrammarSolver"><a href="#GrammarSolver" class="headerlink" title="GrammarSolver"></a>GrammarSolver</h1><h2 id="YourGrammarSolverclass-should-have-the-following-constructor"><a href="#YourGrammarSolverclass-should-have-the-following-constructor" class="headerlink" title="YourGrammarSolverclass should have the following constructor:"></a>YourGrammarSolverclass should have the following constructor:</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public GrammarSolver (List&lt;String&gt; rules)</span><br><span class="line">This constructor should initialize <span class="keyword">a</span> <span class="built_in">new</span> grammar over <span class="keyword">the</span> given BNF grammar rules where <span class="keyword">each</span> rule</span><br><span class="line">corresponds <span class="built_in">to</span> <span class="literal">one</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">text</span>. You should use regular expressions (see below) <span class="built_in">to</span> break apart <span class="keyword">the</span></span><br><span class="line">rules <span class="keyword">and</span> store them <span class="keyword">into</span> aMapso that you can look up parts <span class="keyword">of</span> <span class="keyword">the</span> grammar efficiently later.</span><br><span class="line">You should <span class="keyword">not</span> modify <span class="keyword">the</span> list passed <span class="keyword">in</span>. You should throw anIllegalArgumentExceptionif <span class="keyword">the</span></span><br><span class="line">list is <span class="literal">empty</span> <span class="keyword">or</span> <span class="keyword">if</span> there are <span class="literal">two</span> <span class="keyword">or</span> more entries <span class="keyword">in</span> <span class="keyword">the</span> grammar <span class="keyword">for</span> <span class="keyword">the</span> same non-terminal.</span><br></pre></td></tr></table></figure><h2 id="YourGrammarSolvershould-also-implement-the-following-public-methods"><a href="#YourGrammarSolvershould-also-implement-the-following-public-methods" class="headerlink" title="YourGrammarSolvershould also implement the following public methods:"></a>YourGrammarSolvershould also implement the following public methods:</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean grammarContains (String symbol)</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returntrueif</span> <span class="title">the</span> <span class="title">given</span> <span class="title">symbol</span> <span class="title">is</span> <span class="title">a</span> <span class="title">non</span>-<span class="title">terminal</span> <span class="title">in</span> <span class="title">the</span> <span class="title">grammar</span> <span class="title">andfalse</span></span></span><br><span class="line"><span class="function"><span class="title">otherwise</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For example, <span class="keyword">for</span> the grammar above, grammarContains(<span class="string">"sentence"</span>)would returntrueand</span><br><span class="line"><span class="function"><span class="title">grammarContains</span><span class="params">(<span class="string">"foo"</span>)</span><span class="title">orgrammarContains</span><span class="params">(<span class="string">"boy"</span>)</span><span class="params">(“boy” is a terminal in the language)</span></span></span><br><span class="line">would returnfalse.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String getSymbols ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">return</span> <span class="title">a</span> <span class="title">string</span> <span class="title">representation</span> <span class="title">of</span> <span class="title">the</span> <span class="title">various</span> <span class="title">nonterminal</span> <span class="title">symbols</span> <span class="title">from</span> <span class="title">the</span></span></span><br><span class="line"><span class="function"><span class="title">grammar</span> <span class="title">as</span> <span class="title">a</span> <span class="title">sorted</span>, <span class="title">comma</span>-<span class="title">separated</span> <span class="title">list</span> <span class="title">enclosed</span> <span class="title">in</span> <span class="title">square</span> <span class="title">brackets</span></span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">For</span> <span class="selector-tag">example</span>, <span class="selector-tag">callinggetSymbols</span>()<span class="selector-tag">for</span> <span class="selector-tag">the</span> <span class="selector-tag">previous</span> <span class="selector-tag">grammar</span> <span class="selector-tag">would</span> <span class="selector-tag">give</span>: “<span class="selector-attr">[article, object,</span></span><br><span class="line"><span class="selector-attr">sentence, verb]</span>”.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public String[] generate (String symbol, int times)</span><br><span class="line">This method should generate times <span class="built_in">random</span> occurrences <span class="keyword">of</span> <span class="keyword">the</span> given symbol <span class="keyword">and</span> <span class="literal">return</span> them <span class="keyword">as</span></span><br><span class="line">aString[]. Each <span class="keyword">string</span> generated should be compact <span class="keyword">in</span> <span class="keyword">the</span> sense that there should be</span><br><span class="line">exactly <span class="literal">one</span> <span class="literal">space</span> between <span class="keyword">each</span> terminal <span class="keyword">and</span> there should be no leading <span class="keyword">or</span> trailing spaces.</span><br><span class="line">If times is negative, you should throw anIllegalArgumentException. If theStringargument</span><br><span class="line">passed is <span class="keyword">not</span> <span class="keyword">a</span> non-terminal <span class="keyword">in</span> your grammar you should throw anIllegalArgumentException.</span><br><span class="line">When generating <span class="keyword">a</span> non-terminal symbol <span class="keyword">in</span> your grammar, <span class="keyword">each</span> <span class="keyword">of</span> <span class="keyword">the</span> rules <span class="keyword">on</span> <span class="title">the</span> <span class="title">right-hand</span> <span class="title">side</span></span><br><span class="line"><span class="keyword">of</span> <span class="keyword">the</span> grammar should be applied <span class="keyword">with</span> equal probability.</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Each written</span><br><span class="line">rule should</span><br><span class="line">equally likely,</span><br><span class="line">but <span class="keyword">a</span> rule may</span><br><span class="line">occur more <span class="keyword">of</span>-</span><br><span class="line"><span class="literal">ten</span> <span class="keyword">if</span> <span class="keyword">it</span> appears</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">an</span> option</span><br><span class="line">more than once.</span><br></pre></td></tr></table></figure><h1 id="Sample-Grammar-and-Executions"><a href="#Sample-Grammar-and-Executions" class="headerlink" title="Sample Grammar and Executions"></a>Sample Grammar and Executions</h1><h2 id="Complex-BNF-sentence-txt"><a href="#Complex-BNF-sentence-txt" class="headerlink" title="Complex BNF (sentence.txt)"></a>Complex BNF (sentence.txt)</h2><p><sentence>::=<nounp> <verbp></verbp></nounp></sentence></p><p><nounp>::=<det> <adjs> <noun>|<propnoun></propnoun></noun></adjs></det></nounp></p><p><propnoun>::=Hadi|Jazmin|Ali|Spot|Fred|Elmo</propnoun></p><p><adjs>::=<adj>|<adj> <adjs></adjs></adj></adj></adjs></p><p><adj>::=big|green|wonderful|faulty|subliminal|pretentious</adj></p><p><det>::=the|a</det></p><p><noun>::=dog|cat|man|university|father|mother|child|television</noun></p><p><verbp>::=<transverb> <nounp>|<intransverb></intransverb></nounp></transverb></verbp></p><p><transverb>::=taught|honored|waved to|helped</transverb></p><p><intransverb>::=died|collapsed|laughed|wept</intransverb></p><h2 id="Example-Random-Sentence-Diagram"><a href="#Example-Random-Sentence-Diagram" class="headerlink" title="Example Random Sentence Diagram"></a>Example Random Sentence Diagram</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;sentence&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;verbp&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;nounp&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;noun&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">child</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;adjs&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;adjs&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;adj&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wonderful</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;adj&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">green</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;det&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">the</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;transverb&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">honored</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;nounp&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;propnoun&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Fred</span></span><br></pre></td></tr></table></figure><h2 id="Partial-Example-Execution-user-input-underlined"><a href="#Partial-Example-Execution-user-input-underlined" class="headerlink" title="Partial Example Execution (user input underlined)"></a>Partial Example Execution (user input underlined)</h2><p>Welcome to the cse143 random sentence generator.</p><p>What is the name of the grammar file? sentence.txt</p><p>Available symbols are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)? <sentence><br>How many do you want me to generate? 5<br>Hadi found Jazmin<br>Spot helped the big cat<br>Elmo died<br>the green mother wept<br>the subliminal green man laughed</sentence></verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>Available symbols are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)?</verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>More example program executions are found at the end of the spec.</p><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><h2 id="GrammarSolver-Constructor"><a href="#GrammarSolver-Constructor" class="headerlink" title="GrammarSolver Constructor"></a>GrammarSolver Constructor</h2><p>For this assessment, you <strong>MUST</strong> represent your grammar using aMap, where the <em>keys</em> of the map are<br>the <em>non-terminals</em> of the grammar, and the <em>values</em> are the options for expansion the corresponding non-<br>terminal. You should choose an appropriate data structure for the values in your Mapto effectively<br>represent the grammar rules and make the operations required by the class convenient and efficient.</p><h2 id="generateAlgorithm"><a href="#generateAlgorithm" class="headerlink" title="generateAlgorithm"></a>generateAlgorithm</h2><p>Thegeneratemethod will generate a random occurrence of a given non-terminalNT. You <strong>MUST</strong> use<br>the following recursive algorithm in your implementation of this method:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Choose <span class="keyword">a</span> <span class="built_in">random</span> expansion ruleRfor <span class="keyword">the</span> non-terminalNT. For <span class="keyword">each</span> <span class="keyword">of</span> <span class="keyword">the</span> symbols <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line">ruleR, generate <span class="keyword">a</span> <span class="built_in">random</span> occurrence <span class="keyword">of</span> that symbol. If <span class="keyword">the</span> symbol is <span class="keyword">a</span> terminal, <span class="keyword">the</span> expansion</span><br><span class="line">is simply <span class="keyword">the</span> symbol itself. If <span class="keyword">the</span> symbol is <span class="keyword">a</span> non-terminal, you should generate <span class="keyword">an</span> expansion</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">a</span> recursive call.</span><br></pre></td></tr></table></figure><p>Remember that it is acceptable to have a loop inside your recursion. (In fact, you will likely want one as<br>part of this algorithm!) The directory crawler program from class will serve as a good guide for how to<br>write this program. In that example, we iterated over the different files in a directory and used recursion<br>to list the files in each subdirectory. For yourGrammarSolver, you will iterate over the different symbols<br>in the chosen role and use recursion to generate an expansion for each symbol. You may also find that<br>you will want to use a public/private pair for this recursive task.</p><h2 id="Testing-Your-Solution"><a href="#Testing-Your-Solution" class="headerlink" title="Testing Your Solution"></a>Testing Your Solution</h2><p>We are providing another tool that is linked on the section for this assignment to check the output of<br>yourgeneratemethod to make sure it is producing valid output.</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Remember <span class="keyword">to</span></span><br><span class="line"><span class="builtin-name">remove</span> any</span><br><span class="line">debugging</span><br><span class="line">code when you</span><br><span class="line">submit.</span><br></pre></td></tr></table></figure><p>You can test that the correct whitespace is produced fromgenerateby using some non-whitespace<br>character (e.g. ~) instead of spaces and inspecting the output visually.</p><h2 id="Splitting-Strings"><a href="#Splitting-Strings" class="headerlink" title="Splitting Strings"></a>Splitting Strings</h2><p>In this assignment, it will be useful to know how to <em>split</em> strings apart in Java. In particular, you will need<br>to split the various options for rules on the|character, and then, you will need to split the pieces of a<br>rule apart by spaces.</p><p>To do this, you should use the <strong>splitmethod of the Stringclass</strong> , which takes aStringdelimiter<br>(e.g. “what to split by”) as a parameter and returns your original largeStringas an array of smaller<br>Strings.</p><p>The delimiterStringpassed tosplitis called a <em>regular expression</em> , which are strings that use a particular<br>syntax to indicate patterns of text. A regular expression is aStringthat “matches” certain sequences.<br>For instance, “abc” is a regular expression that matches “a followed by b followed by c”.</p><p>You do not need to have a deep understanding of regular expressions to complete this assessment. Here<br>are some specific regular expressions that will help you with particular splitting steps for your class:</p><ul><li><strong>Splitting Non-Terminals from Rules.</strong> Given aString, line, to splitlinebased on where<br>  ::=occurs, you could use the regular expression “::=” (since you are looking for these <em>literal</em><br>  characters). For example:</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">line</span> = <span class="string">"example::=foo bar |baz"</span>;</span><br><span class="line"><span class="keyword">String</span>[] pieces = <span class="built_in">line</span>.<span class="built_in">split</span>(<span class="string">"::="</span>); <span class="comment">// ["example", "foo bar |baz"]</span></span><br></pre></td></tr></table></figure><ul><li><strong>Splitting Different Rules.</strong> Given aString,rules, to splitrulesbased on where the|character<br>  is, it looks similar to the above, <em>except</em> , in regular expressions,|is a special character. So, we must<br>  escape it (just like\nor\t). So, the regular expression is “\|”. (Note that we need two slashes<br>  because slashes themselves must be escaped inStrings.) For example:</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> rules = <span class="string">"foo bar|baz |quux mumble"</span>;</span><br><span class="line"><span class="keyword">String</span>[] pieces = rules.split(<span class="string">"\\|"</span>); // [<span class="string">"foo bar"</span>, <span class="string">"baz "</span>, <span class="string">"quux mumble"</span>]</span><br></pre></td></tr></table></figure><ul><li><strong>Splitting Apart a Single Rule.</strong> Given aString,rule, to splitrulebased on whitespace, we<br>  must look for “at least one whitespace”. We can use\sto indicate “a single whitespace of any<br>  kind:\t, space, etc. And by adding+afterwards, the regular expression is interpreted as “one or<br>  more of whitespace”. For example:</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">rule</span> = <span class="string">"the quick brown fox"</span>;</span><br><span class="line"><span class="keyword">String</span>[] pieces = <span class="keyword">rule</span>.split(<span class="string">"\\s+"</span>); // [<span class="string">"the"</span>, <span class="string">"quick"</span>, <span class="string">"brown"</span>, <span class="string">"fox"</span>]</span><br></pre></td></tr></table></figure><h2 id="Removing-Whitespace-from-the-Beginning-and-the-End-of-a-String"><a href="#Removing-Whitespace-from-the-Beginning-and-the-End-of-a-String" class="headerlink" title="Removing Whitespace from the Beginning and the End of a String"></a>Removing Whitespace from the Beginning and the End of a String</h2><p>One minor issue that comes up with splitting on whitespace as above is that if theStringyou are splitting<br>begins with a whitespace character, you will get an emptyStringat the front of the resulting array.<br>Given aString,str, we can create a newStringthat omits all leading and trailing whitespace removed:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">" lots of spaces \t"</span>;</span><br><span class="line"><span class="keyword">String</span> trimmedString = <span class="built_in">str</span>.<span class="built_in">trim</span>(); <span class="comment">// "lots of spaces"</span></span><br></pre></td></tr></table></figure><h1 id="Development-Strategy-and-Hints"><a href="#Development-Strategy-and-Hints" class="headerlink" title="Development Strategy and Hints"></a>Development Strategy and Hints</h1><p>Thegeneratemethod is the most difficult, so we strongly suggest you write it last. Remember that it<br>is helpful to tackle difficult methods using “iterative development” where you solve simple versions of the<br>problem first.</p><p>Random programs can be difficult to validate correctness, and thegeneratemethod you will implement<br>uses randomness to decide which rule for a given non-terminal to use. To help you debug and validate<br>your output, we have provided a grammar verifier tool on the course website that verifies your output<br>follows the grammar rules (but ignores whitespace).</p><p>If your recursive method has a bug, try putting <strong>a debugprintln</strong> that prints your parameter values to<br>see the calls being made.</p><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h2 id="SortedMap"><a href="#SortedMap" class="headerlink" title="SortedMap"></a>SortedMap</h2><p>Because we want you to guarantee the keys of your map are sorted, we will ask you to use the<br>SortedMap&lt;K, V&gt;interface for this assignment instead of theMap&lt;K, V&gt;interface. TheSortedMap<br>interface is essentially the same as theMapinterface, except it requires the keys be sorted. This means<br>TreeMapis a validSortedMapimplementation, butHashMapis not. You can use all the same methods<br>on aSortedMapas you could on aMap.</p><h2 id="Generic-Structures"><a href="#Generic-Structures" class="headerlink" title="Generic Structures"></a>Generic Structures</h2><p>You should always use generic structures. If you make a mistake in specifying type parameters, the<br>Java compiler may warn you that you have “unchecked or unsafe operations” in your program. If you<br>use jGRASP, you may want to change your settings to see which line the warning refers to. Go to<br>Settings/Compiler Settings/Workspace/Flags/Argsand then uncheck the box next to “Compile”<br>and type in:-Xlint:unchecked</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileGrammarSolverReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p><h1 id="Sample-Execution-1-user-input-underlined"><a href="#Sample-Execution-1-user-input-underlined" class="headerlink" title="Sample Execution #1 (user input underlined)"></a>Sample Execution #1 (user input underlined)</h1><p>Welcome to the cse143 random sentence generator.</p><p>What is the name of the grammar file? sentence.txt</p><p>Available symbols to generate are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)? <det><br>How many do you want me to generate? 5<br>a<br>the<br>the<br>a<br>the</det></verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>Available symbols to generate are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)? <nounp><br>How many do you want me to generate? 5<br>Elmo<br>a green big pretentious green pretentious subliminal university<br>the pretentious cat<br>Jazmin<br>the pretentious subliminal mother</nounp></verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>Available symbols to generate are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)? <sentence><br>How many do you want me to generate? 20<br>a faulty dog laughed<br>Ali helped a wonderful dog<br>Spot collapsed<br>the green father wept<br>Spot laughed<br>Elmo taught Ali<br>the subliminal green man honored Fred<br>a wonderful faulty big father laughed<br>the faulty faulty university taught the faulty dog<br>Elmo helped the green university<br>Hadi helped the pretentious man<br>the pretentious man died<br>Ali laughed<br>the pretentious subliminal child found Hadi<br>Elmo wept<br>a wonderful wonderful faulty child collapsed<br>Spot found the subliminal subliminal pretentious university<br>the green father helped the wonderful cat<br>a faulty television wept<br>the faulty mother laughed</sentence></verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><p>Available symbols to generate are:<br>[<adj>, <adjs>, <det>, <intransverb>, <noun>, <nounp>, <propnoun>, <sentence>, <transverb>, <verbp>]<br>What do you want generated (return to quit)?</verbp></transverb></sentence></propnoun></nounp></noun></intransverb></det></adjs></adj></p><h1 id="Sample-Execution-2-user-input-underlined"><a href="#Sample-Execution-2-user-input-underlined" class="headerlink" title="Sample Execution #2 (user input underlined)"></a>Sample Execution #2 (user input underlined)</h1><p>Welcome to the cse143 random sentence generator.</p><p>What is the name of the grammar file? sentence2.txt</p><p>Available symbols to generate are:<br>[E, F1, F2, OP, T]<br>What do you want generated (return to quit)? T<br>How many do you want me to generate? 5<br>42</p><ul><li>y<br>x<br>x<br>( ( 1 ) )</li></ul><p>Available symbols to generate are:<br>[E, F1, F2, OP, T]<br>What do you want generated (return to quit)? E<br>How many do you want me to generate? 10<br>x - 1<br>0<br>sin ( 1 + 92 + - 1 / 42 )<br>max ( y , 92 )<br>42 % 1</p><ul><li>42<br>92<br>1<br>92<br>42 - sin ( 1 )</li></ul><p>Available symbols to generate are:<br>[E, F1, F2, OP, T]<br>What do you want generated (return to quit)?</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A3_Assassin_Manager</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A3-Assassin-Manager.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A3-Assassin-Manager.html</id>
    <published>2023-08-06T01:00:22.000Z</published>
    <updated>2023-08-06T01:01:18.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Create and manipulate a linked list.</li><li>Manipulate linked list nodes in an efficient manner.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Overview-The-Assassin-Game"><a href="#Overview-The-Assassin-Game" class="headerlink" title="Overview: The Assassin Game"></a>Overview: The Assassin Game</h1><p>“Assassin” is a game often played on college campuses. Each person playing has a particular target that<br>he/she is trying to “assassinate.” Generally “assassinating” a person means finding them on campus in<br>public and acting on them in some way (e.g. saying “You’re dead,” squirting them with a water gun, or<br>tagging them). One of the things that makes the game more interesting to play in real life is that initially<br>each person knows only who they are assassinating; they don’t know who is trying to assassinate them,<br>nor do they know whom the other people are trying to assassinate.</p><h2 id="Assassin-Rules"><a href="#Assassin-Rules" class="headerlink" title="Assassin Rules"></a>Assassin Rules</h2><ul><li>You start out with a group of people who want to play the game</li><li>A circular chain of assassination targets (called the “kill ring” in this program) is established.</li><li>When someone is assassinated, the links need to be changed to “skip” that person. That is, the<br>  person who was assassinated passes their target on to the person who assassinated them.</li></ul><h2 id="Example-Game-of-Assassin"><a href="#Example-Game-of-Assassin" class="headerlink" title="Example Game of Assassin"></a>Example Game of Assassin</h2><p>Let’s walk through an example with five people playing: Carol, Chris, Jim, Joe, Sally. We might start<br>with Joe stalking Sally, Sally stalking Jim, Jim stalking Carol, Carol stalking Chris, and Chris stalking<br>Joe. In the actual linked list that implements this kill ring, Chris’s next reference would benull. But,<br>conceptually we can think of it as though the next person after Chris is Joe, the front person in the list.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Note <span class="keyword">the</span> <span class="keyword">last</span></span><br><span class="line">person <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line">list will <span class="keyword">not</span></span><br><span class="line">have <span class="keyword">an</span> ex-</span><br><span class="line">plicit target.</span><br><span class="line">See below <span class="keyword">for</span></span><br><span class="line">information <span class="keyword">and</span></span><br><span class="line">warnings about</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">a</span> circular</span><br><span class="line">list.</span><br></pre></td></tr></table></figure><p>Here is a picture of this “kill ring”:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Joe </span>Sally <span class="keyword">Jim </span>Carol Chris</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">front</span></span><br></pre></td></tr></table></figure><p>Then, suppose Sally assassinates Jim. Sally needs a new target, so we give her Jim’s target: Carol. The<br>kill ring becomes:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Joe Sally Carol Chris</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">front</span></span><br></pre></td></tr></table></figure><p>If the first person in the kill ring is assassinated, the front of the list must adjust. If Chris kills Joe, the<br>list becomes:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Sally Carol Chris</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">front</span></span><br></pre></td></tr></table></figure><h1 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h1><h1 id="Take-home-Assessment-3-AssassinManager-due-J-uly-1-5-2021-11-59-pm"><a href="#Take-home-Assessment-3-AssassinManager-due-J-uly-1-5-2021-11-59-pm" class="headerlink" title="Take-home Assessment 3: AssassinManager due J uly 1 5, 2021 11: 59 pm"></a>Take-home Assessment 3: AssassinManager due J uly 1 5, 2021 11: 59 pm</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sample execution <span class="built_in">log</span></span><br><span class="line">Welcome <span class="built_in">to</span> <span class="keyword">the</span> CSE143 Assassin Manager</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What name file <span class="keyword">do</span> you want <span class="keyword">to</span> <span class="keyword">use</span> this <span class="built_in">time</span>? names3.txt</span><br><span class="line"><span class="keyword">Do</span> you want the <span class="keyword">names</span> shuffled? (y/n)? n</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Current <span class="keyword">kill</span> ring:</span><br><span class="line">Athos <span class="keyword">is</span> stalking Porthos</span><br><span class="line">Porthos <span class="keyword">is</span> stalking Aramis</span><br><span class="line">Aramis <span class="keyword">is</span> stalking Athos</span><br><span class="line"><span class="keyword">Current</span> graveyard:</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span> victim? Aramis</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Current <span class="keyword">kill</span> ring:</span><br><span class="line">Athos <span class="keyword">is</span> stalking Porthos</span><br><span class="line">Porthos <span class="keyword">is</span> stalking Athos</span><br><span class="line"><span class="keyword">Current</span> graveyard:</span><br><span class="line">Aramis was killed <span class="keyword">by</span> Porthos</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">next</span> victim? Athos</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Game was won <span class="keyword">by</span> Porthos</span><br><span class="line"><span class="keyword">Final</span> graveyard <span class="keyword">is</span> <span class="keyword">as</span> follows:</span><br><span class="line">Athos was killed <span class="keyword">by</span> Porthos</span><br><span class="line">Aramis was killed <span class="keyword">by</span> Porthos</span><br></pre></td></tr></table></figure><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>In this assessment, you will write a<br>class AssassinManagerthat keeps<br>track of who is stalking whom and<br>the history of who killed whom in<br>games of Assassin. You will main-<br>tain two linked lists:</p><ul><li>a list of people currently alive<br>  (the “kill ring”) and</li><li>a list of those who have<br>  been assassinated (the “grave-<br>  yard”).</li></ul><p>As people are assassinated, you will<br>move them from the kill ring to the<br>graveyard by rearranging links be-<br>tween nodes. The game ends when<br>only one node remains in the kill ring,<br>representing the winner.</p><p>A client program calledAssassinMain<br>has been written for you. It reads a<br>file of names, shuffles the names, and<br>constructs an object of your classAssassinManager. This main program then asks the user for the names<br>of each victim to assassinate until there is just one player left alive (at which point the game is over and<br>the last remaining player wins). AssassinMaincalls methods of theAssassinManagerclass to carry<br>out the tasks involved in administering the game.</p><h1 id="AssassinManager"><a href="#AssassinManager" class="headerlink" title="AssassinManager"></a>AssassinManager</h1><p>To implement your lists, you must use ourAssassinNodeclass provided in Ed without modification. The<br>class is summarized here:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AssassinNode <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssassinNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String name; <span class="comment">// this person's name</span></span><br><span class="line"><span class="keyword">public</span> String killer; <span class="comment">// name of who killed this person (null if alive)</span></span><br><span class="line"><span class="keyword">public</span> AssassinNode next; <span class="comment">// next node in the list</span></span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AssassinNode</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AssassinNode</span><span class="params">(<span class="keyword">String</span> name, AssassinNode next)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You cannot</span><br><span class="line"><span class="keyword">change</span> <span class="keyword">final</span></span><br><span class="line"><span class="keyword">variables</span> <span class="keyword">and</span></span><br><span class="line"><span class="keyword">fields</span>!</span><br></pre></td></tr></table></figure><p>In class section we have been looking at nodes of typeListNode(orIntListNode) that have just two<br>fields: a field calleddataof typeintand a field callednextthat points to the next value in the list. The<br>AssassinNodeclass has three fields. The first two are fields for storing data callednameandkiller<br>(they are used to store the name of a player and the name of the person who assassinated that player).<br>The third field is callednextand it serves the same purpose as the next field in theListNodeclass.</p><h2 id="YourAssassinManagerclass-must-have-exactly-the-following-fields"><a href="#YourAssassinManagerclass-must-have-exactly-the-following-fields" class="headerlink" title="YourAssassinManagerclass must have exactly the following fields:"></a>YourAssassinManagerclass must have exactly the following fields:</h2><ul><li>a reference to the front node of the kill ring</li><li>a reference to the front node of the graveyard (nullif empty)</li></ul><p>Note that a requirement of this assessment is that you have <em>exactly</em> these two fields and <em>no others</em>.</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> <span class="keyword">NOT</span> <span class="keyword">add</span> a</span><br><span class="line"><span class="keyword">size</span> <span class="keyword">field</span>!</span><br></pre></td></tr></table></figure><h2 id="YourAssassinManagerclass-should-have-the-following-constructor"><a href="#YourAssassinManagerclass-should-have-the-following-constructor" class="headerlink" title="YourAssassinManagerclass should have the following constructor:"></a>YourAssassinManagerclass should have the following constructor:</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public AssassinManager (List&lt;String&gt; names)</span><br><span class="line">This constructor should initialize a new assassin manager <span class="keyword">over</span> <span class="keyword">the</span> <span class="keyword">given</span> <span class="built_in">list</span> <span class="keyword">of</span> people. Note <span class="keyword">that</span></span><br><span class="line">you should <span class="keyword">not</span> save <span class="keyword">the</span> <span class="built_in">list</span> parameter itself <span class="keyword">as</span> a field, nor modify <span class="keyword">the</span> <span class="built_in">list</span>. Instead, you should build</span><br><span class="line">your own kill ring <span class="keyword">of</span> <span class="built_in">list</span> nodes <span class="keyword">that</span> <span class="keyword">contains</span> these names <span class="keyword">in</span> <span class="keyword">the</span> same order.</span><br><span class="line">If <span class="keyword">the</span> <span class="built_in">list</span> <span class="keyword">is</span> empty, you should throw anIllegalArgumentException.</span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> <span class="keyword">change</span></span><br><span class="line">the <span class="keyword">list</span> that <span class="keyword">is</span></span><br><span class="line">passed in.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For example, <span class="keyword">if</span> <span class="keyword">the</span> <span class="keyword">given</span> <span class="built_in">list</span> <span class="keyword">contains</span>[<span class="string">"John"</span>, <span class="string">"Sally"</span>, <span class="string">"Fred"</span>], your initial kill ring should</span><br><span class="line">represent <span class="keyword">that</span> John <span class="keyword">is</span> stalking Sally who <span class="keyword">is</span> stalking Fred who <span class="keyword">is</span> stalking John (<span class="keyword">in</span> <span class="keyword">that</span> order). You</span><br><span class="line">may assume <span class="keyword">that</span> <span class="keyword">the</span> names are non-empty, non-null strings <span class="keyword">and</span> <span class="keyword">that</span> there are no duplicates.</span><br></pre></td></tr></table></figure><h2 id="YourAssassinManagerclass-should-also-implement-the-following-methods"><a href="#YourAssassinManagerclass-should-also-implement-the-following-methods" class="headerlink" title="YourAssassinManagerclass should also implement the following methods:"></a>YourAssassinManagerclass should also implement the following methods:</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void printKillRing ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">print</span> <span class="title">the</span> <span class="title">names</span> <span class="title">of</span> <span class="title">the</span> <span class="title">people</span> <span class="title">in</span> <span class="title">the</span> <span class="title">kill</span> <span class="title">ring</span>, <span class="title">one</span> <span class="title">per</span> <span class="title">line</span>, <span class="title">indented</span> <span class="title">by</span> <span class="title">four</span></span></span><br><span class="line"><span class="function"><span class="title">spaces</span>, <span class="title">as</span> “<span class="title">Xis</span> <span class="title">stalkingY</span>”. <span class="title">If</span> <span class="title">the</span> <span class="title">game</span> <span class="title">is</span> <span class="title">over</span>, <span class="title">then</span> <span class="title">instead</span> <span class="title">print</span> “<span class="title">Xis</span> <span class="title">stalkingX</span>”.</span></span><br></pre></td></tr></table></figure><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XandYare</span></span><br><span class="line"><span class="attribute">names of the</span></span><br><span class="line"><span class="attribute">players</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">For example, using the <span class="keyword">kill</span> ring <span class="keyword">from</span> the example game <span class="keyword">on</span> the <span class="keyword">first</span> page <span class="keyword">of</span> this spec, the <span class="keyword">output</span> <span class="keyword">is</span>:</span><br><span class="line">Joe <span class="keyword">is</span> stalking Sally</span><br><span class="line">Sally <span class="keyword">is</span> stalking Jim</span><br><span class="line">Jim <span class="keyword">is</span> stalking Carol</span><br><span class="line">Carol <span class="keyword">is</span> stalking Chris</span><br><span class="line">Chris <span class="keyword">is</span> stalking Joe</span><br><span class="line"><span class="keyword">If</span> the game <span class="keyword">is</span> <span class="keyword">over</span> <span class="keyword">and</span> Chris <span class="keyword">is</span> the winner, so Chris <span class="keyword">is</span> the <span class="keyword">only</span> <span class="keyword">name</span> <span class="keyword">in</span> the <span class="keyword">kill</span> ring, the <span class="keyword">output</span> <span class="keyword">is</span>:</span><br><span class="line">Chris <span class="keyword">is</span> stalking Chris</span><br></pre></td></tr></table></figure><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Indent <span class="keyword">the</span></span><br><span class="line">output <span class="keyword">using</span></span><br><span class="line"><span class="literal">four</span> spaces, <span class="keyword">not</span></span><br><span class="line">tabs!</span><br><span class="line">public void printGraveyard ()</span><br><span class="line">This method should print <span class="keyword">the</span> names <span class="keyword">of</span> <span class="keyword">the</span> people <span class="keyword">in</span> <span class="keyword">the</span> graveyard, <span class="literal">one</span> per <span class="built_in">line</span>, <span class="keyword">with</span> <span class="keyword">each</span> <span class="built_in">line</span></span><br><span class="line">indented <span class="keyword">by</span> <span class="literal">four</span> spaces, <span class="keyword">with</span> output <span class="keyword">of</span> <span class="keyword">the</span> form “Xwas killed byY”. It should print <span class="keyword">the</span> names</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">the</span> opposite <span class="keyword">of</span> <span class="keyword">the</span> order <span class="keyword">in</span> which they were assassinated (most recently assassinated <span class="keyword">first</span>, <span class="keyword">then</span></span><br><span class="line">next most recently assassinated, <span class="keyword">and</span> so <span class="keyword">on</span>). <span class="title">It</span> <span class="title">should</span> <span class="title">produce</span> <span class="title">no</span> <span class="title">output</span> <span class="title">if</span> <span class="title">the</span> <span class="title">graveyard</span> <span class="title">is</span> <span class="title">empty</span>.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For example, <span class="keyword">using</span> <span class="keyword">the</span> <span class="built_in">kill</span> ring <span class="built_in">from</span> above, <span class="keyword">if</span> Jim is killed, <span class="keyword">then</span> Chris, <span class="keyword">then</span> Carol, <span class="keyword">the</span> output is:</span><br><span class="line">Carol was killed <span class="keyword">by</span> Sally</span><br><span class="line">Chris was killed <span class="keyword">by</span> Carol</span><br><span class="line">Jim was killed <span class="keyword">by</span> Sally</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean killRingContains (String name)</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returntrueif</span> <span class="title">the</span> <span class="title">given</span> <span class="title">name</span> <span class="title">is</span> <span class="title">in</span> <span class="title">the</span> <span class="title">current</span> <span class="title">kill</span> <span class="title">ring</span> <span class="title">andfalseotherwise</span>.</span></span><br><span class="line"><span class="function"><span class="title">It</span> <span class="title">should</span> <span class="title">ignore</span> <span class="title">case</span> <span class="title">in</span> <span class="title">comparing</span> <span class="title">names</span>;</span> so, “salLY” should match a node <span class="keyword">with</span> a name <span class="keyword">of</span> “Sally”.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean graveyardContains (String name)</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returntrueif</span> <span class="title">the</span> <span class="title">given</span> <span class="title">name</span> <span class="title">is</span> <span class="title">in</span> <span class="title">the</span> <span class="title">current</span> <span class="title">graveyard</span> <span class="title">andfalseotherwise</span>.</span></span><br><span class="line"><span class="function"><span class="title">It</span> <span class="title">should</span> <span class="title">ignore</span> <span class="title">case</span> <span class="title">in</span> <span class="title">comparing</span> <span class="title">names</span>;</span> so, “CaRoL” should match a node <span class="keyword">with</span> a name <span class="keyword">of</span> “Carol”.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean gameOver ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returntrueif</span> <span class="title">the</span> <span class="title">game</span> <span class="title">is</span> <span class="title">over</span> <span class="params">(i.e. the kill ring contains exactly one person)</span></span></span><br><span class="line"><span class="function"><span class="title">andfalseotherwise</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String winner ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">return</span> <span class="title">the</span> <span class="title">name</span> <span class="title">of</span> <span class="title">the</span> <span class="title">winner</span> <span class="title">of</span> <span class="title">the</span> <span class="title">game</span>, <span class="title">ornullif</span> <span class="title">the</span> <span class="title">game</span> <span class="title">is</span> <span class="title">not</span> <span class="title">over</span> <span class="title">yet</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kill</span> <span class="params">(<span class="keyword">String</span> name)</span></span></span><br></pre></td></tr></table></figure><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exceptions</span><br><span class="line">should be</span><br><span class="line">thrown <span class="keyword">as</span> soon</span><br><span class="line">This method should record <span class="keyword">the</span> assassination <span class="keyword">of</span> <span class="keyword">the</span> person <span class="keyword">with</span> <span class="keyword">the</span> given name, transferring <span class="keyword">the</span> <span class="keyword">as</span> possible!</span><br><span class="line">person <span class="built_in">from</span> <span class="keyword">the</span> <span class="built_in">kill</span> ring <span class="built_in">to</span> <span class="keyword">the</span> front <span class="keyword">of</span> <span class="keyword">the</span> graveyard. This operation should <span class="keyword">not</span> change <span class="keyword">the</span> <span class="built_in">relative</span></span><br><span class="line">order <span class="keyword">of</span> <span class="keyword">the</span> <span class="built_in">kill</span> ring (i.e. <span class="keyword">the</span> links <span class="keyword">of</span> who is stalking whom should stay <span class="keyword">the</span> same other than <span class="keyword">the</span></span><br><span class="line">person who is being killed). This method should ignore <span class="keyword">case</span> <span class="keyword">in</span> comparing names.</span><br><span class="line">A node remembers who killed <span class="keyword">the</span> person <span class="keyword">in</span> its killer field, <span class="keyword">and</span> you must <span class="built_in">set</span> <span class="keyword">the</span> <span class="built_in">value</span> <span class="keyword">of</span> this field.</span><br></pre></td></tr></table></figure><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Try <span class="keyword">to</span> write</span><br><span class="line">simple code,</span><br><span class="line"><span class="keyword">and</span> use inline</span><br><span class="line">comments <span class="keyword">to</span></span><br><span class="line">clarify anything</span><br><span class="line">complex.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Your <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">an</span> <span class="title">IllegalStateException</span> <span class="title">if</span> <span class="title">the</span> <span class="title">game</span> <span class="title">is</span> <span class="title">over</span>, <span class="title">or</span> <span class="title">throw</span> <span class="title">an</span></span></span><br><span class="line"><span class="function"><span class="title">IllegalArgumentExceptionif</span> <span class="title">the</span> <span class="title">given</span> <span class="title">name</span> <span class="title">is</span> <span class="title">not</span> <span class="title">part</span> <span class="title">of</span> <span class="title">the</span> <span class="title">kill</span> <span class="title">ring</span>. <span class="title">If</span> <span class="title">both</span> <span class="title">of</span> <span class="title">these</span> <span class="title">conditions</span></span></span><br><span class="line"><span class="function"><span class="title">are</span> <span class="title">true</span>, <span class="title">theIllegalStateExceptiontakes</span> <span class="title">precedence</span>.</span></span><br></pre></td></tr></table></figure><p>Thekillmethod is the hardest to complete, so we strongly suggest you write it last. Use the jGRASP<br>debugger andprintlnstatements liberally to debug problems in your code. You will likely have a lot of<br>NullPointerExceptionerrors, infinite loops, etc. and will have a very hard time tracking them down<br>unless you are comfortable with debugging techniques.</p><h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Be sure to</span><br><span class="line">remove or com-</span><br><span class="line">ment out any</span><br><span class="line">debugging</span><br><span class="line">printl<span class="keyword">ncalls</span></span><br><span class="line">before you sub-</span><br><span class="line">mit.</span><br></pre></td></tr></table></figure><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><p>The learning objectives for this assessment are explicitly related to manipulating linked lists. To that end,<br>you are limited in how you may implement the operations required forAssassinManager. Specifically,<br>you must adhere to the following rules:</p><ul><li>You may not construct any arrays,ArrayLists,LinkedLists,Stacks,Queues, or other data<br>  structures; you must use instances ofAssassinNodeand manipulate them yourself.</li><li>If there arennames in the list ofStrings passed to your constructor, you must create exactlyn<br>  newAssassinNodeobjects in your constructor. You may not create any additional node objects,<br>  and you may not create node objects in any other methods. In addition, you may not modify the<br>  namefield of nodes after they have been created. As people are assassinated, you will move the<br>  existing node from the kill ring to the graveyard by changing references. You must not create any<br>  new node objects or change thenamefield of the nodes.</li><li>You may declare as many <em>references</em> toAssassinNodeobjects (i.e. local variables of typeAssassinNode<br>  as you like.AssassinNoderefernces are not node objects and therefore do not count against the<br>  limit ofnnodes described above.</li><li>Your constructor should be “efficient” in the sense that it should not use any nested loops to<br>  construct the initial kill ring. (We will learn in class that this is calledO(n)time, wherenis the<br>  number of names in the list.)</li></ul><h1 id="Circular-Lists"><a href="#Circular-Lists" class="headerlink" title="Circular Lists"></a>Circular Lists</h1><p>Some students try to store the kill ring using a “circular” linked list (where the list’s final element stores a<br>next reference back to the front ). It is significantly more difficult to write bug-free code using a circular<br>list. There is no need to use a circular list for this assessment, because you can always get back to the front<br>via the fields of yourAssassinManager. If you feel strongly that you want to use a circular list, you may,<br>but we believe it will make the program significantly more difficult to write, and we strongly discourage<br>it. <em>We will not provide assistance in office hours to help you implement the circular list solution.</em></p><h1 id="jGRASP-Debugger"><a href="#jGRASP-Debugger" class="headerlink" title="jGRASP Debugger"></a>jGRASP Debugger</h1><p>We recommend that you use the jGRASP debugger for this assessment, even if you are primarily working<br>in another IDE or in Ed. The jGRASP debugger has a structure viewer to see what your list looks like by<br>dragging one of your fields from the debug window outside the window. By default the viewer won’t show<br>you the name in each node (it will show a “?” instead). Fix this by clicking the wrench icon, then in<br>the “Value Expressions” box, type:<em>node</em>.name, Click OK, and you should see the names in the nodes.<br>You can also drag the width scrollbar to see the names better.</p><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h2 id="Avoid-Redundancy"><a href="#Avoid-Redundancy" class="headerlink" title="Avoid Redundancy"></a>Avoid Redundancy</h2><h3 id="-8"><a href="#-8" class="headerlink" title=""></a></h3><p>Factor out any<br>redundancy in<br>If you find that multiple methods in your class do similar things, you should create helper method(s) to your methods.<br>capture the common code. All helper methods should be declared asprivate.</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from</p><p>this spec) and should not include implementation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileAssassinManagerReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A2_Guitar_Hero</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A2-Guitar-Hero.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A2-Guitar-Hero.html</id>
    <published>2023-08-05T01:23:22.000Z</published>
    <updated>2023-08-05T01:24:09.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><h2 id="Take-home-Assessment-2-Guitar-Hero"><a href="#Take-home-Assessment-2-Guitar-Hero" class="headerlink" title="Take-home Assessment 2: Guitar Hero"></a>Take-home Assessment 2: Guitar Hero</h2><p><em>many thanks to Kevin Wayne for this nifty assignment</em><br>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Use a queue (via theQueue<e>interface to implement a provided algorithm.</e></li><li>Write a class that implements an existing interface.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><p>There are many support files for this assignment that can be found on the course website. We will be<br>using two utility classes known as StdAudio and StdDraw that are used in the Princeton intro CS course.<br>You don’t have to understand the details of these utility classes, but you can read about themhereif<br>you’re interested.</p><h2 id="Background-Guitars-and-Sound"><a href="#Background-Guitars-and-Sound" class="headerlink" title="Background: Guitars and Sound"></a>Background: Guitars and Sound</h2><p><em>This section describes how guitar strings make sound and how we will represent that in our code to<br>simulate sound. This section will be confusing and you do not need to fully understand the technical<br>details of why this works in order to do the assignment. Later sections have details of how to implement<br>this.</em></p><p>When a guitar string is plucked, the string vibrates and creates sound. The length of the string determines<br>its fundamental frequency of vibration. We model a guitar string by sampling its displacement (a real<br>number between -1/2 and +1/2) at N equally spaced points in time, where N equals the sampling rate<br>(44,100) divided by the fundamental frequency of the string (rounded to the nearest integer). We store<br>these displacement values in a structure that we will refer to as a <strong>ring buffer</strong>.</p><p>Plucking a string moves it and gives it energy. The excitation of the string can contain energy at any<br>frequency. We simulate the excitation by filling the ring buffer with white noise. In other words, we set<br>each of the N sample displacements to a random real number between -1/2 and +1/2.</p><h3 id="Simulating-Sound"><a href="#Simulating-Sound" class="headerlink" title="Simulating Sound"></a>Simulating Sound</h3><p>After the string is plucked, the string vibrates. The pluck causes a displacement which spreads wave-like<br>over time. The <em>Karplus-Strong algorithm</em> simulates this vibration by maintaining a ring buffer of the N<br>samples: for each step the algorithm deletes the first sample from the ring buffer and adds to the end<br>of the ring buffer the average of the first two samples, scaled by an energy decay factor of 0.996. More<br>details on why this simulates sound are at the end of the spec.</p><h2 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h2><h1 id="due-Ju-l-y-8-2021-11-59-pm"><a href="#due-Ju-l-y-8-2021-11-59-pm" class="headerlink" title="due Ju l y 8 , 2021 11: 59 pm"></a>due Ju l y 8 , 2021 11: 59 pm</h1><h2 id="Part-1-GuitarStringclass"><a href="#Part-1-GuitarStringclass" class="headerlink" title="Part 1: GuitarStringclass"></a>Part 1: GuitarStringclass</h2><p>In the first part of the assignment, you will implement a class calledGuitarStringthat models a vibrating<br>guitar string of a given frequency. TheGuitarStringobject will need to keep track of a ring buffer.<br>You are to implement the ring buffer as a queue using theQueue<e>interface and theLinkedList<e><br>implementation. For this assignment, you are limited to theQueue<e>methods in thesection materials<br>and slide 16 of the stack/queueslides(add, remove,isEmpty,size, andpeek). You are not allowed<br>to use other data structures or otherQueue<e>methods to solve this problem.</e></e></e></e></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">You must</span><br><span class="line">not <span class="keyword">use</span> <span class="built_in">any</span></span><br><span class="line">Queue&lt;E&gt;meth-</span><br><span class="line">ods not listed</span><br><span class="line">here.</span><br></pre></td></tr></table></figure><h3 id="YourGuitarStringclass-should-include-the-following-constructors"><a href="#YourGuitarStringclass-should-include-the-following-constructors" class="headerlink" title="YourGuitarStringclass should include the following constructors:"></a>YourGuitarStringclass should include the following constructors:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public GuitarString (double frequency)</span><br><span class="line">Constructs aGuitarStringof <span class="keyword">the</span> given frequency. It creates <span class="keyword">a</span> ring buffer <span class="keyword">of</span> <span class="keyword">the</span> desired capacity</span><br><span class="line">N (sampling rate divided <span class="keyword">by</span> frequency, rounded <span class="built_in">to</span> <span class="keyword">the</span> nearest <span class="keyword">integer</span>), <span class="keyword">and</span> initializes <span class="keyword">it</span> <span class="built_in">to</span> represent</span><br><span class="line"><span class="keyword">a</span> guitar <span class="keyword">string</span> <span class="keyword">at</span> rest <span class="keyword">by</span> enqueueing N zeros. The sampling rate is specified <span class="keyword">by</span> <span class="keyword">the</span> <span class="built_in">constant</span></span><br><span class="line">StdAudio.SAMPLE_RATE. If <span class="keyword">the</span> frequency is less than <span class="keyword">or</span> equal <span class="built_in">to</span> <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">if</span> <span class="keyword">the</span> resulting size <span class="keyword">of</span> <span class="keyword">the</span></span><br><span class="line">ring buffer would be less than <span class="number">2</span>, your method should throw anIllegalArgumentException</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GuitarString (double[] init)</span><br><span class="line">Constructs a GuitarString <span class="keyword">and</span> initializes the contents <span class="keyword">of</span> the ring buffer <span class="keyword">to</span> the values <span class="keyword">in</span></span><br><span class="line">the <span class="keyword">array</span>. <span class="keyword">If</span> the <span class="keyword">array</span> <span class="keyword">has</span> fewer than two elements, your <span class="function"><span class="keyword">constructor</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">an</span></span></span><br><span class="line"><span class="function"><span class="title">IllegalArgumentException</span>. <span class="title">This</span> <span class="title">constructor</span> <span class="title">is</span> <span class="title">used</span> <span class="title">only</span> <span class="title">for</span> <span class="title">testing</span> <span class="title">purposes</span>.</span></span><br></pre></td></tr></table></figure><h3 id="YourGuitarStringclass-should-also-implement-the-following-public-methods"><a href="#YourGuitarStringclass-should-also-implement-the-following-public-methods" class="headerlink" title="YourGuitarStringclass should also implement the following public methods:"></a>YourGuitarStringclass should also implement the following public methods:</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void pluck ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">replace</span> <span class="title">the</span> <span class="title">N</span> <span class="title">elements</span> <span class="title">in</span> <span class="title">the</span> <span class="title">ring</span> <span class="title">buffer</span> <span class="title">with</span> <span class="title">N</span> <span class="title">random</span> <span class="title">values</span> <span class="title">between</span> -0.</span></span><br><span class="line"><span class="function"><span class="title">inclusive</span> <span class="title">and</span> +0.5 <span class="title">exclusive</span> <span class="params">(i.e.− 0. 5 ≤value&lt; 0. 5 )</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void tic ()</span><br><span class="line">This method should apply <span class="keyword">the</span> Karplus-Strong update once (performing <span class="literal">one</span> step). It should <span class="built_in">delete</span></span><br><span class="line"><span class="keyword">the</span> sample <span class="keyword">at</span> <span class="keyword">the</span> front <span class="keyword">of</span> <span class="keyword">the</span> ring buffer <span class="keyword">and</span> <span class="built_in">add</span> <span class="built_in">to</span> <span class="keyword">the</span> <span class="function"><span class="keyword">end</span> <span class="title">of</span> <span class="title">the</span> <span class="title">ring</span> <span class="title">buffer</span> <span class="title">the</span> <span class="title">average</span> <span class="title">of</span> <span class="title">the</span></span></span><br><span class="line"><span class="keyword">first</span> <span class="literal">two</span> samples, multiplied <span class="keyword">by</span> <span class="keyword">the</span> energy decay factor (<span class="number">0.996</span>).</span><br><span class="line">Your class should <span class="built_in">include</span> <span class="keyword">a</span> public <span class="built_in">constant</span> <span class="keyword">for</span> <span class="keyword">the</span> energy decay factor.</span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> double sample ()</span><br><span class="line">This <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">return</span> <span class="title">the</span> <span class="title">current</span> <span class="title">sample</span> <span class="params">(the value at the front <span class="keyword">of</span> the ring buffer)</span>.</span></span><br></pre></td></tr></table></figure><h3 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h3><ul><li>You will need to use theMath.roundmethod and cast the result to anintto find the size of<br>  the buffer in the constructor that takes a singledoubleparameter. You can use the following<br>  expression:</li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">int</span></span>)(<span class="name">Math.round</span>(<span class="name">StdAudio.SAMPLE_RATE</span> / frequency))</span><br></pre></td></tr></table></figure><ul><li>It is difficult in commenting theGuitarStringclass to know what constitutes an implementation<br>  detail and what is okay to discuss in client comments. Assume that a client of theGuitarString<br>  class is familiar with the concept of a ring buffer. The fact that we are implementing it as a queue<br>  is an implementation detail. So don’t mention how you implement the ring buffer. But you can</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">discuss <span class="keyword">the</span> ring buffer itself <span class="keyword">and</span> <span class="keyword">the</span> changes that your methods make <span class="built_in">to</span> <span class="keyword">the</span> state <span class="keyword">of</span> <span class="keyword">the</span> ring buffer</span><br><span class="line">(e.g., moving values <span class="built_in">from</span> <span class="keyword">the</span> front <span class="built_in">to</span> <span class="keyword">the</span> back <span class="keyword">of</span> <span class="keyword">the</span> ring buffer). You may also assume that <span class="keyword">the</span></span><br><span class="line">client is familiar <span class="keyword">with</span> <span class="keyword">the</span> Karplus-Strong algorithm.</span><br></pre></td></tr></table></figure><ul><li>At this point, you can also runGuitarHerousingGuitarLiteand you should hear sound on your<br>  computer! (You will not be able to play sound in Ed, but you can download the files and run them<br>  in jGRASP.) The guitars are explained in the next section.</li></ul><h2 id="Interlude-Guitar-andGuitarHero"><a href="#Interlude-Guitar-andGuitarHero" class="headerlink" title="Interlude: Guitar andGuitarHero"></a>Interlude: Guitar andGuitarHero</h2><p><em>This part of the assignment does not involve writing any code! This part describes the important<br>supporting files and how to run the program.</em></p><p>In the next part of the assignment, you are going to build on theGuitarStringclass to write a class that<br>keeps track of a musical instrument with multiple strings. There could be many possible guitar objects<br>with different kinds of strings. As a result, we introduce an interface known asGuitarthat each guitar<br>object implements.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Guitar <span class="class"><span class="keyword">interface</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">Guitar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playNote</span><span class="params">(<span class="keyword">int</span> pitch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasString</span><span class="params">(<span class="keyword">char</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pluck</span><span class="params">(<span class="keyword">char</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sample</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">time</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The<span class="built_in"> interface </span>allows a<span class="built_in"> client </span><span class="keyword">to</span> specify what <span class="keyword">to</span> play <span class="keyword">in</span></span><br><span class="line">one of two ways. A<span class="built_in"> client </span>can specify exactly which</span><br><span class="line">note <span class="keyword">to</span> play by calling theplayNotemethod passing it</span><br><span class="line">a pitch. Pitch is specified as an integer where the value</span><br><span class="line">0 represents concert-A <span class="keyword">and</span> all other notes are specified</span><br><span class="line">relative <span class="keyword">to</span> concert-A using what is known as a chromatic</span><br><span class="line">scale. <span class="keyword">Not</span> every value of pitch can be played by any</span><br><span class="line">given guitar. <span class="keyword">If</span> it can’t be played, it is ignored.</span><br></pre></td></tr></table></figure><p>Additionally, a client can also specify a character that indicates which note to play by calling thepluck<br>method. Different guitar objects will have different mappings from characters to notes. The interface<br>includes a method calledhasStringthat is paired with pluck that lets a client verify that a particular<br>character has a corresponding string for this guitar. Thepluckmethod has a precondition that the key<br>is legal for this guitar.</p><p>TheGuitarinterface also has methods for getting the current sound sample (the sum of all samples<br>from the strings of the guitar), to advance the time forward one “tic”, and determining the current time<br>(the number of timestichas been called).</p><p>We provide a sample class calledGuitarLitethat implements theGuitarinterface. Once you have veri-<br>fied that yourGuitarStringclass passes the testing program, you can play theGuitarLiteinstrument.<br>It has only two strings: “a” and “c”.</p><p>To test your guitar, we provide a separate client class calledGuitarHerothat has amainmethod (the<br>initial version constructs aGuitarLiteobject).GuitarLitedoes not have a main method.</p><h2 id="Part-2-The-Guitar37-class"><a href="#Part-2-The-Guitar37-class" class="headerlink" title="Part 2: The Guitar37 class"></a>Part 2: The Guitar37 class</h2><p>In this second part of the assignment, your task is to write a different implementation of theGuitar<br>interface known asGuitar37. It will model a guitar with 37 different strings. UnlikeGuitarLitewhich<br>has a separate field for each of its strings, you will want to use a data structure, specifically an array, to<br>keep track of the strings inGuitar37.</p><h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h3><p>TheGuitar37class has a total of 37 notes on the chromatic scale from 110Hz to 880Hz. We will use<br>the following string to map keys typed by the user to positions in your array of strings. The i-th character<br>of this string should correspond to the i-th character of your array:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"q2we4r5ty7u8i9op-[=zxdcfvgbnjmk,.;/'"</span></span><br></pre></td></tr></table></figure><p>This use of keyboard characters imitates a piano keyboard, making playing songs a little easier for people<br>used to a piano keyboard. The white keys are on the qwerty and zxcv rows and the black keys on the<br>12345 and asdf rows of the keyboard, as in the drawing below.</p><p>You are being provided a skeleton version of theGuitar37class that includes this string defined as a<br>constant calledKEYBOARD. The i-th character of the string corresponds to a frequency of 440 × 2 (i−24)/^12 ,<br>so that the character “q” is 110Hz, “i” is 220Hz, “v” is 440Hz, and “ ” (space) is 880Hz.</p><p>As noted above, a pitch of 0 is supposed to correspond to concert-A, which will be at index 24 for the<br>Guitar37object (corresponding to the character “v”). Thus, you can convert from a pitch value to<br>an index in your string by adding 24 to the pitch value. The table below shows some examples of this<br>conversion.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Key Pitch</span><br><span class="line">“q” -</span><br><span class="line">“<span class="number">2</span>” -</span><br><span class="line">“w” -</span><br><span class="line">“e” -</span><br><span class="line">... ...</span><br><span class="line">“v” <span class="number">0</span></span><br><span class="line">... ...</span><br><span class="line">“/” <span class="number">10</span></span><br><span class="line">“’” <span class="number">11</span></span><br><span class="line">“ ” <span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="Implementation-Guidelines-1"><a href="#Implementation-Guidelines-1" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h3><ul><li>In working on this second part of the assignment, you are generalizing the code that you will find<br>  inGuitarLite. Because that instrument has just two strings, it uses two separate fields. Your<br>  instrument has 37 strings, so it uses an array of strings. Each of the operations defined in the<br>  interface needs to be generalized from using two specific strings to using an array of strings. For<br>  example, the sample method returns the sum of the current samples. GuitarLitedoes this by<br>  adding together two numbers. Your version will have to use a loop to find the sum of all 37 samples.</li><li>TheGuitarLiteclass is not well documented, it does not handle illegal keys, and it does not<br>  correctly implement thetimemethod. YourGuitar37class should include complete comments.</li><li>Thepluckmethod should throw anIllegalArgumentExceptionif the key is not one of the 37<br>  keys it is designed to play (as noted above, this differs from theplayNotemethod that simply<br>  ignores notes it cant play).</li></ul><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Recall that</span><br><span class="line">Strings have</span><br><span class="line">anindexOf</span><br><span class="line"><span class="function"><span class="keyword">method</span> <span class="title">that</span></span></span><br><span class="line"><span class="function"><span class="title">you</span> <span class="title">might</span> <span class="title">find</span></span></span><br><span class="line"><span class="function"><span class="title">helpful</span>!</span></span><br></pre></td></tr></table></figure><ul><li>You will be given a testing program forGuitar37as well calledTest37. <strong>This testing code should</strong><br>  <strong>be stored in a separate directory from your solution because it includes a custom version</strong><br>  <strong>of theGuitarStringclass and you don’t want to accidentally overwrite your version of the</strong><br>  <strong>class.</strong> You should copy yourGuitar37class to this folder, run it, and then compare against the<br>  sample output produced using the output comparison tool.</li><li>Once you are done, you can changeGuitarHeroto useGuitar37instead ofGuitarLiteso you<br>  can play the full instrument on your computer! (Ed cannot produce sound, so you’ll need to run<br>  your code in jGRASP to try this.)</li></ul><h2 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h2><p>In addition to producing the behavior described above, your code should be well-written and meet all<br>expectations described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this<br>assessment, pay particular attention to the following elements:</p><h3 id="Generic-Structures-and-Interfaces"><a href="#Generic-Structures-and-Interfaces" class="headerlink" title="Generic Structures and Interfaces"></a>Generic Structures and Interfaces</h3><p>You should always use generic structures. If you make a mistake in specifying type parameters, the Java<br>compiler may warn you that you have “unchecked or unsafe operations” in your program. You should<br>also declare fields and variables using the appropriate interfaces when possible. When usingQueue’s in<br>143, you should only use the methods described in class.</p><h3 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h3><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h3 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h3><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h2 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h2><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h2 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h2><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h2 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h2><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>In addition to your code, you must submit answers to short reflection questions. These questions will help<br>you think about what you learned, what you struggled with, and how you can improve next time. The<br>questions are given in the fileGuitarHeroReflection.txtin the Ed assessment; type your responses<br>directly into that file.</p><h2 id="Optional-Why-This-Assignment-Works"><a href="#Optional-Why-This-Assignment-Works" class="headerlink" title="(Optional) Why This Assignment Works"></a>(Optional) Why This Assignment Works</h2><p>The two primary components that make the Karplus-Strong algorithm work are the ring buffer feedback<br>mechanism and the averaging operation.</p><ul><li>The ring buffer feedback mechanism: The ring buffer models the medium (a string tied down at<br>  both ends) in which the energy travels back and forth. The length of the ring buffer determines the<br>  fundamental frequency of the resulting sound. Sonically, the feedback mechanism reinforces only<br>  the fundamental frequency and its harmonics (frequencies at integer multiples of the fundamental).<br>  The energy decay factor (.996 in this case) models the slight dissipation in energy as the wave<br>  makes a round trip through the string.</li><li>The averaging operation: The averaging operation serves as a gentle low pass filter (which removes<br>  higher frequencies while allowing lower frequencies to pass, hence the name). Because it is in the<br>  path of the feedback, this has the effect of gradually attenuating the higher harmonics while keeping<br>  the lower ones, which corresponds closely with how actually plucked strings sound.</li></ul>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSE143_Computer_Programming_II_A1_Lettter_Inventory</title>
    <link href="cplusplusdaixie.com/CSE143-Computer-Programming-II-A1-Lettter-Inventory.html"/>
    <id>cplusplusdaixie.com/CSE143-Computer-Programming-II-A1-Lettter-Inventory.html</id>
    <published>2023-08-04T01:25:25.000Z</published>
    <updated>2023-08-04T01:26:56.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSE-143-Computer-Programming-II"><a href="#CSE-143-Computer-Programming-II" class="headerlink" title="CSE 143: Computer Programming II"></a>CSE 143: Computer Programming II</h3><p>This assignment will assess your mastery of the following objectives:</p><ul><li>Implement a well-designed Java class to meet a given specification.</li><li>Maintain proper abstraction between the client and implementation of a class.</li><li>Follow prescribed conventions for code quality, documentation, and readability.</li></ul><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>In this assessment, you will implement a class calledLetterInventorythat can be used to keep track<br>of an inventory of letters of the English alphabet. The constructor for the class will take aStringas<br>a parameter and compute how many of each letter are in thatString(i.e. how many a’s, how many<br>b’s, etc.). LetterInventoryignores any character that is not an English letter (such as punctuation or<br>digits) and treats upper- and lowercase letters as the same.</p><h2 id="YourLetterInventoryclass-should-include-the-following-constructor"><a href="#YourLetterInventoryclass-should-include-the-following-constructor" class="headerlink" title="YourLetterInventoryclass should include the following constructor:"></a>YourLetterInventoryclass should include the following constructor:</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public LetterInventory (String data)</span><br><span class="line">Constructs <span class="keyword">an</span> inventory (<span class="keyword">a</span> count) <span class="keyword">of</span> <span class="keyword">the</span> alphabetic letters <span class="keyword">in</span> <span class="keyword">the</span> given <span class="keyword">string</span>, ignoring <span class="keyword">the</span> <span class="keyword">case</span> <span class="keyword">of</span></span><br><span class="line">letters <span class="keyword">and</span> ignoring <span class="keyword">any</span> non-alphabetic <span class="keyword">characters</span>.</span><br></pre></td></tr></table></figure><h2 id="Your-class-should-also-include-the-following-public-methods-"><a href="#Your-class-should-also-include-the-following-public-methods-" class="headerlink" title="Your class should also include the following public methods: "></a>Your class should also include the following public methods: </h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">You must <span class="keyword">in</span>-</span><br><span class="line">clude exactly</span><br><span class="line">these <span class="function"><span class="keyword">method</span></span></span><br><span class="line"><span class="function"><span class="title">headers</span>—<span class="title">do</span></span></span><br><span class="line"><span class="function"><span class="title">not</span> <span class="title">add</span> <span class="title">or</span></span></span><br><span class="line"><span class="function"><span class="title">remove</span> <span class="title">parame</span>-</span></span><br><span class="line"><span class="function"><span class="title">ters</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int get (char letter)</span><br><span class="line">Returns a count <span class="keyword">of</span> how many <span class="keyword">of</span> this letter (<span class="keyword">case</span>-insensitive) are <span class="keyword">in</span> the inventory. <span class="keyword">If</span> a nonalphabetic</span><br><span class="line">character <span class="keyword">is</span> passed, your <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">anIllegalArgumentException</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span> (char letter, int value)</span><br><span class="line">Sets the count <span class="keyword">for</span> the given letter (<span class="keyword">case</span>-insensitive) <span class="keyword">to</span> the given value. <span class="keyword">If</span> a nonalphabetic character</span><br><span class="line"><span class="keyword">is</span> passed <span class="keyword">or</span> ifvalueis negative, your <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">throw</span> <span class="title">anIllegalArgumentException</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int size ()</span><br><span class="line">Returns <span class="keyword">the</span> <span class="built_in">sum</span> <span class="keyword">of</span> all <span class="keyword">of</span> <span class="keyword">the</span> counts <span class="keyword">in</span> this inventory. This operation should be <span class="string">"fast"</span> <span class="keyword">in</span> that <span class="keyword">it</span></span><br><span class="line">should store <span class="keyword">the</span> size rather than having <span class="built_in">to</span> compute <span class="keyword">it</span> <span class="keyword">each</span> <span class="built_in">time</span> this method is called.</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isEmpty ()</span><br><span class="line">Returnstrueif <span class="keyword">this</span> inventory <span class="keyword">is</span> empty (i.e. all counts are <span class="number">0</span>). This operation should be <span class="string">"fast"</span> <span class="keyword">in</span></span><br><span class="line"><span class="literal">that</span> <span class="literal">it</span> should <span class="keyword">not</span> need <span class="keyword">to</span> examine each <span class="keyword">of</span> the <span class="number">26</span> counts <span class="keyword">when</span> <span class="literal">it</span> <span class="keyword">is</span> called.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public String toString ()</span><br><span class="line">Returns <span class="keyword">a</span> <span class="keyword">string</span> representation <span class="keyword">of</span> <span class="keyword">the</span> inventory <span class="keyword">with</span> <span class="keyword">the</span> letters all <span class="keyword">in</span> lowercase <span class="keyword">and</span> <span class="keyword">in</span> sorted order</span><br><span class="line"><span class="keyword">and</span> surrounded <span class="keyword">by</span> square brackets. The <span class="built_in">number</span> <span class="keyword">of</span> occurrences <span class="keyword">of</span> <span class="keyword">each</span> letter should match its</span><br><span class="line">count <span class="keyword">in</span> <span class="keyword">the</span> inventory. For example, <span class="keyword">an</span> inventory <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">as</span>, <span class="number">1</span> b, <span class="number">1</span> l <span class="keyword">and</span> <span class="number">1</span> m would be represented <span class="keyword">as</span></span><br><span class="line"><span class="string">"[aaaablm]"</span>.</span><br></pre></td></tr></table></figure><h1 id="Summer-2021"><a href="#Summer-2021" class="headerlink" title="Summer 2021"></a>Summer 2021</h1><h1 id="Take-home-Assessment-1-Letter-Inventory-due-J-uly-1-2021-11-59-pm"><a href="#Take-home-Assessment-1-Letter-Inventory-due-J-uly-1-2021-11-59-pm" class="headerlink" title="Take-home Assessment 1: Letter Inventory due J uly 1 , 2021 11: 59 pm"></a>Take-home Assessment 1: Letter Inventory due J uly 1 , 2021 11: 59 pm</h1><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LetterInventory <span class="keyword">add</span> (LetterInventory other)</span><br><span class="line">Constructs <span class="keyword">and</span> returns a <span class="keyword">new</span> LetterInventory object that represents the sum <span class="keyword">of</span> this</span><br><span class="line">LetterInventoryand the other givenLetterInventory. The counts <span class="keyword">for</span> <span class="keyword">each</span> letter should be</span><br><span class="line">added together. The twoLetterInventoryobjects being added together (thisandother) should</span><br><span class="line"><span class="keyword">not</span> be changed <span class="keyword">by</span> this <span class="function"><span class="keyword">method</span>.</span></span><br></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LetterInventory subtract (LetterInventory other)</span><br><span class="line">Constructs <span class="keyword">and</span> returns a newLetterInventoryobject that represents the <span class="keyword">result</span> <span class="keyword">of</span> subtracting</span><br><span class="line">the other inventory <span class="keyword">from</span> this inventory (i.e. subtracting the counts <span class="keyword">in</span> the other inventory <span class="keyword">from</span> this</span><br><span class="line">objects counts). <span class="keyword">If</span> any resulting count would be negative, this <span class="function"><span class="keyword">method</span> <span class="title">should</span> <span class="title">returnnull</span>. <span class="title">The</span></span></span><br><span class="line"><span class="function"><span class="title">twoLetterInventoryobjects</span> <span class="title">being</span> <span class="title">subtracted</span> <span class="params">(thisandother)</span> <span class="title">should</span> <span class="title">not</span> <span class="title">be</span> <span class="title">changed</span> <span class="title">by</span> <span class="title">this</span></span></span><br><span class="line"><span class="function"><span class="title">method</span>.</span></span><br></pre></td></tr></table></figure><p>You may also include any additional private helper methods you think will be helpful.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Make sure any</span><br><span class="line"><span class="keyword">helper</span> methods</span><br><span class="line">are declared</span><br><span class="line"><span class="keyword">private</span>.</span><br></pre></td></tr></table></figure><p>As an example, the add method could be called as follows:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LetterInventory inventory1 = <span class="keyword">new</span> <span class="type">LetterInventory</span>(<span class="string">"Sherlock Holmes"</span>);</span><br><span class="line">LetterInventory inventory2 = <span class="keyword">new</span> <span class="type">LetterInventory</span>(<span class="string">"Dr. John Watson"</span>);</span><br><span class="line">LetterInventory sum = inventory1.add(inventory2);</span><br></pre></td></tr></table></figure><p>Here, inventory1would contain[ceehhkllmoorss],inventory2would contain[adhjnnoorstw],<br>andsumwould contain[acdeehhhjkllmnnoooorrssstw].</p><h1 id="Implementation-Guidelines"><a href="#Implementation-Guidelines" class="headerlink" title="Implementation Guidelines"></a>Implementation Guidelines</h1><p>You should implement this class with an array of 26 counters (one for each letter) along with any other<br>data fields you find that you need. Remember, though, that we want to minimize the number of data<br>fields when possible.</p><p>Your class should avoid unnecessary inefficiencies. For example, you might be tempted to implement the<br>addmethod by calling thetoStringmethod or otherwise building aStringto pass to theLetterInventory<br>constructor. But this approach would be inefficient for inventories with large character counts.</p><p>You should introduce a class constant for the value 26 to improve readability.</p><h2 id="Character-operations"><a href="#Character-operations" class="headerlink" title="Character operations"></a>Character operations</h2><p>It will be helpful to understand certain deatils of thechardatatype for this assessment. Many of these<br>details are explained in section 4.3 of the textbook.</p><p>Values of typecharhave corresponding integer values. There is a character with value 0, a character<br>with value 1, a character with value 2 and so on. You can compare different values of typecharusing<br>less-than and greater-than tests, as in:</p><p>if (ch &gt;= ‘a’) …</p><p>All of the lowercase letters appear grouped together in typechar(i.e.’a’is followed by’b’followed by<br>’c’, and so on). All of the uppercase letters appear grouped together similarly. Because of this, you can<br>compute a letter’s “displacement” (or distance) from the letter’a’with an expression like the following<br>(this expression assumes the variableletteris of typecharand stores a lowercase letter):</p><p>letter -‘a’</p><p>Going in the other direction, if you know a characters integer equivalent, you can cast the result tochar<br>to get the character. For example, suppose that you want to get the letter that is 8 away from’a’. You<br>could do this as follows:</p><p>char result = (char) (‘a’+ 8);</p><p>This would assign the variableresultthe value’i’. As in these examples, you should write your code<br>in terms of displacement from a fixed letter like’a’rather than finding and including the specific integer<br>value (e.g. 97) of a character like’a’.</p><h1 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h1><p>Thought it may not seem like it, theArrayIntListexample from lecture provides a good model to use for<br>implementingLetterInventory. Pay particular attention to the use of fields, avoiding reimplementation<br>of common functionality, throwing exceptions in error conditions, and documentation/comments.</p><h2 id="String-and-Character"><a href="#String-and-Character" class="headerlink" title="String and Character"></a>String and Character</h2><p>You will likely want to look at the JavaStringandCharacterclasses for useful methods. (For example,<br>there is atoLowerCasemethod in each.) You will have to pay attention to whether each method is static<br>or not. TheStringmethods are mostly instance methods because strings are objects. TheCharacter<br>methods are all static becausecharis a primitive type. For example, if you have a variable calledsthat<br>is aString, you can turn it to all lowercase as follows:</p><p>s = s.toLowerCase();</p><p>This is a call to an instance method on an object, so you put the name of the object variable before the<br>dot. Butcharvalues are <em>not</em> objects and thetoLowerCasemethod in theCharacterclass is a static<br>method. So if you have a variable calledchthat is of typechar, you would turn it to all lowercase as<br>follows:</p><p>ch = Character.toLowerCase(ch);</p><h1 id="Development-Strategy"><a href="#Development-Strategy" class="headerlink" title="Development Strategy"></a>Development Strategy</h1><p>One of the most important techniques for programmers is to develop code in stages rather than trying to<br>write it all at once. (The technical term for this is “iterative enhancement” or “stepwise refinement.”) It<br>is also important to be able to test the correctness of your solution at each different stage.</p><p>We suggest that you work on your assessment in three stages:<br>(a) First, work on constructing aLetterInventoryand examining its contents. We will implement the<br>constructor, thesizemethod, theisEmptymethod, thegetmethod, and thetoStringmethod.<br>Even within this stage, you should develop the methods slowly. First work on the constructor and<br>sizemethods. Then add theisEmptymethod, then thegetmethod, then thetoStringmethod.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(b) Next, <span class="builtin-name">add</span> thesetmethod <span class="keyword">to</span> the class that allows the<span class="built_in"> client </span><span class="keyword">to</span> change the number of occurrences</span><br><span class="line">of an individual letter.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(c) Finally, include theaddandsubtractmethods. We recommend writing theaddmethod <span class="keyword">first</span> <span class="keyword">and</span></span><br><span class="line">making sure <span class="keyword">it</span> works, <span class="keyword">then</span> moving <span class="keyword">on</span> <span class="keyword">to</span> thesubtractmethod.</span><br></pre></td></tr></table></figure><h1 id="Code-Quality-Guidelines"><a href="#Code-Quality-Guidelines" class="headerlink" title="Code Quality Guidelines"></a>Code Quality Guidelines</h1><p>In addition to producing the desired behavior, your code should be well-written and meet all expectations<br>described in thegrading guidelines, Code Quality Guide, andCommenting Guide. For this assessment,<br>pay particular attention to the following elements:</p><h2 id="Data-Fields"><a href="#Data-Fields" class="headerlink" title="Data Fields"></a>Data Fields</h2><p>Properly encapsulate your objects by making data your fieldsprivate. Avoid unnecessary fields; use<br>fields to store important data of your objects but not to store temporary values only used in one place.<br>Fields should always be initialized inside a constructor or method, never at declaration.</p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>The specified exceptions must be thrown correctly in the specified cases. Exceptions should be thrown<br>as soon as possible, and no unnecessary work should be done when an exception is thrown. Exceptions<br>should be documented in comments, including the type of exception thrown and under what conditions.</p><h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><p>Each method should have a header comment including all necessary information as described in the<br>Commenting Guide. Comments should be written in your own words (i.e. not copied and pasted from<br>this spec) and should not include implemenation details.</p><h1 id="Running-and-Submitting"><a href="#Running-and-Submitting" class="headerlink" title="Running and Submitting"></a>Running and Submitting</h1><p>If you believe your behavior is correct, you can submit your work by clicking the “Mark” button in the Ed<br>assessment. You will see the results of some automated tests along with tentative grades. <strong>These grades<br>are not final until you have received feedback from your TA.</strong></p><p>You may submit your work as often as you like until the deadline; we will always grade your most recent<br>submission. Note the due date and time carefully— <strong>work submitted after the due time will not be<br>accepted</strong>.</p><h1 id="Getting-Help"><a href="#Getting-Help" class="headerlink" title="Getting Help"></a>Getting Help</h1><p>If you find you are struggling with this assessment, make use of all the course resources that are available<br>to you, such as:</p><ul><li>Reviewing relevant examples fromclass</li><li>Reading the textbook</li><li>Visitingoffice hours</li><li>Posting a question on themessage board</li></ul><h1 id="Collaboration-Policy"><a href="#Collaboration-Policy" class="headerlink" title="Collaboration Policy"></a>Collaboration Policy</h1><p>Remember that, while you are encouraged to use all resources at your disposal, including your classmates,<br><strong>all work you submit must be entirely your own</strong>. In particular, you should <strong>NEVER</strong> look at a solution<br>to this assessment from another source (a classmate, a former student, an online repository, etc.). Please<br>review thefull policyin the syllabus for more details and ask the course staff if you are unclear on whether<br>or not a resource is OK to use.</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>In addition to your code, you must submit answers to short reflection questions. These questions will<br>help you think about what you learned, what you struggled with, and how you can improve next time.<br>The questions are given in the fileLetterInventoryReflection.txtin the Ed assessment; type your<br>responses directly into that file.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1301_Project4_Interactive_Fiction</title>
    <link href="cplusplusdaixie.com/CSCI1301-Project4-Interactive-Fiction.html"/>
    <id>cplusplusdaixie.com/CSCI1301-Project4-Interactive-Fiction.html</id>
    <published>2023-08-02T02:11:30.000Z</published>
    <updated>2023-08-02T02:12:39.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI-1301-Introduction-to-Computing-and-Programming"><a href="#CSCI-1301-Introduction-to-Computing-and-Programming" class="headerlink" title="CSCI 1301: Introduction to Computing and Programming"></a><strong>CSCI 1301: Introduction to Computing and Programming</strong></h3><p><strong>Project 4: Interactive Fiction</strong></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Once upon a time, before the dawn of the Internet as we know it, there lived a forgotten type of<br>computer game called interactive fiction. First written in the late ‘70s, these games were sort of a<br>choose-your-own adventure book, but for geeks. These games contain no graphics, just a 2nd<br>person (everybody remembers English class, right?) description of your character, and a box for<br>entering commands. With the birth of the kindle and other Internet enabled e-readers, these<br>games are experiencing something of a rebirth, as their screens are a perfect match for these<br>games.</p><p>Photo from: <a href="http://www.indieretronews.com/2018/01/the-pawn-classic-text-adventure-by.html" target="_blank" rel="noopener">http://www.indieretronews.com/2018/01/the-pawn-classic-text-adventure-by.html</a></p><p>To play one for yourself, go to <a href="https://eblong.com/zarf/zweb/dreamhold/" target="_blank" rel="noopener">https://eblong.com/zarf/zweb/dreamhold/</a></p><p>Your project is to create an interactive fiction. In this game, you will navigate a map (moving<br>east, west, north, south when possible). In each “room” of the map, the game will print a<br>description of the room to the screen. As you navigate through the map, you will be looking for<br>a light to light up the dark rooms, a key to open a treasure chest, and a chest (that contains the</p><p>treasure!). Once you have found the key, you can open the chest. While going through the map,<br>you must watch out for the deadly grue! To help you get started on the game, a couple of classes<br>have been written for you. You only need to make the guts of the game, called the engine. You<br>will find Map.java, Room.java, Lamp.java, Key.java, and Chest.java on the course website.<br>Some of these classes are completely finished and others are just skeletons (containing<br>comments and method signatures).</p><p>Begin by taking a quick a look at the Map class, which is completely implemented for you ( <strong>do<br>not modify the Map class, just know how to use it</strong> ). In this game, a map is a square of size<br>NxN where each cell contains a room. Each room contains a description of the room and<br>possibly a few other items. You call the getRoom(X,Y) to retrieve the Room object for a given<br>square. The first number (X) gives the row and the second (Y) gives the column. The starting<br>room is at (0,0).</p><p>To the right is a picture of a general map.<br>Note that the map can be of any size. To<br>clarify the X and Y positions, we have<br>marked the map at position (2,1) with an<br>O. In this cell, we would say that the X<br>value is 2 and the Y value is 1.</p><p>While debugging your code, you can run the program in “simple map” mode where the map<br>contains only a single room (see below). This is useful in debugging because no one wants to<br>walk through a huge map only to find that the final command doesn’t work. When you have<br>tested your code and want to play the entire game, set the simpleMap variable to false for a<br>larger map. The larger map we have provided is of size 4x4.</p><p>Illustration of Map when simpleMap = true</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span>X</span><br></pre></td></tr></table></figure><p>Now take a look at the Room class. This class is implemented for you as well. It contains a large<br>number of methods for you to use during the game. As you can see, there are no setters, only<br>getters. This means that for the most part you cannot modify any Room objects you receive. The<br>exceptions are the clearKey() and clearLamp() methods that modify two of the room’s sub<br>objects. Note: these methods allow you to modify a Room object. <strong>You should never modify the<br>Room.java code</strong>. You’ll see down below when you need to call these methods. If a room does<br>not have a specific sub-object (key, lamp), its variable will be set to null. You will need to test<br>for this condition to see if a room has a sub-object or not. <em>The description of the interface for this<br>class is given at the end of this pdf.</em></p><p>Now, take a look at the Key class, it is written for you. <strong>You do NOT need to update anything<br>in the Key.java file.</strong> The Key class only has one method: public void use(Chest onChest).<br>Calling this method simply calls the unlock method on the given chest. <em>The description of the</em></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> ... n</span><br><span class="line"><span class="number">0</span> X</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> O</span><br><span class="line">...</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p><em>interface for this class is given at the end of this pdf.</em></p><h1 id="Program-Requirements-–-General-Algorithm"><a href="#Program-Requirements-–-General-Algorithm" class="headerlink" title="Program Requirements – General Algorithm"></a>Program Requirements – General Algorithm</h1><p>You should <strong>NOT modify</strong> <strong><em>Room.java</em></strong> <strong>or</strong> <strong><em>Map.java or Key.java</em></strong> to get your game working. Your<br>project will be tested with our own versions of these two files, so any modifications you make<br>could result in your project not compiling or not working correctly.<br>Also – <strong>you should never create new Key or new Chest objects. This is done already in the<br>preexisting code. So, if you add the words “new Key()” or “new Chest()”, you will have<br>logical errors in your code.</strong></p><ol><li>You should start your work by implementing the Chest class (a skeleton is provided for<br> you). It needs to store whether it is locked or not, a String describing the contents, and<br> which key it was locked with. The method stubs for this class are provided with<br> comments, be sure to implement them the way they are described. You should not add<br> any more methods to this class.</li><li>Next, implement the Lamp class (the class definition is provided for you), it only needs to<br> store whether it is lit or not. Follow the rules of encapsulation/information hiding, and<br> prevent any other class from accessing or modifying your instance variables directly.</li><li>Then, create a player class in a file called <strong>Player.java</strong>. No skeleton is provided for you,<br> you must create it from scratch. You’re responsible for adding instance methods and<br> variables. A player object will represent the user playing the game, and thus needs to<br> store which map square they are currently on (integer x and y coordinates), the lamp and<br> key. You should create instance class type variables for the lamp and key, and if they<br> happen to be null, the player does NOT currently have them (same is true for the Room<br> objects as well). Be sure to follow encapsulation rules here too. You do not need to<br> initialize the lamp and key instance variables, as they will default to null. When the<br> player collects the lamp and the key, you will call setLamp and setKey to set these<br> variables.</li><li>Once these are done, create a class called <strong>Adventure</strong> and write the <strong>main method</strong> of your<br> program in it (remember that the class that contains the main method is the one that you<br> run). The first thing to do in main is to create a Player object and set its starting<br> coordinates to (0,0). Also, you will need to create a new Map object. The idea in the<br> Adventure class is that you loop repeatedly until the player dies (attacked by grue – see<br> below) or finds the treasure (opens chest – see below). Every time the player moves,<br> update the player’s position and get the appropriate Room object from the map. Using this<br> object, display the appropriate text to the user based on what command they type in. A<br> list of commands is given below. Ignore case on the user input.<pre><code>- GET LAMP – If the lamp is present in the current room ( there is a method in the   Room cl ass (i.e. getLamp()) that allows you to check this. Note the method’s   return type and assign the return value accordingly), this transfers the lamp from</code></pre></li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">the</span> room <span class="built_in">to</span> <span class="keyword">the</span> player. Be sure <span class="built_in">to</span> <span class="built_in">clear</span> <span class="keyword">the</span> lamp <span class="built_in">from</span> <span class="keyword">the</span> room afterwards. Print</span><br><span class="line">“OK” <span class="keyword">if</span> successful, <span class="keyword">or</span> “No lamp present” <span class="keyword">if</span> <span class="keyword">not</span>. Note: that you can find <span class="keyword">the</span> lamp</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">a</span> dark room.</span><br></pre></td></tr></table></figure><ul><li>LIGHT LAMP – If the player has the lamp, this sets it to lit. Print “OK” if<br>  successful, or “You don’t have the lamp to light” if the player doesn’t have the<br>  lamp.</li><li>NORTH, SOUTH, EAST, WEST – If the current room (prior to the move)<br>  isDark(), AND the player doesn’t have the lamp OR they have the lamp but the<br>  lamp is not lit, the player is eaten by a grue and the game is over. (see below for<br>  an example). Otherwise, move the user North one square (-1 x), South one square<br>  (+1 x), East one square (+1 y), or West one square (-1 y). See table below to<br>  understand x and y in the context of the map. Once you move into a new room,<br>  you should print out its description, so the user doesn’t have to type LOOK every<br>  time. Be sure to check the current room object to see if the given direction is<br>  valid. If not, print (“Can’t go that way”). If the room (after the move) isDark()<br>  AND the player does not have the lamp OR the lamp is not lit, then instead of<br>  printing the description, tell them: “It is pitch black, you can’t see anything. You<br>  may be eaten by a grue!”. (see below for an example)</li><li>LOOK –If the room isDark() and the player does not have the lamp or the lamp is<br>  not lit, then instead of printing the description, tell them: “It is pitch black, you<br>  can’t see anything. You may be eaten by a grue!”. (see below for an example).<br>  Otherwise, this prints the description of the current room object, as well as any<br>  objects that are in the room. You should also print which exits from the room are<br>  valid.</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i. If <span class="keyword">the</span> lamp <span class="keyword">is</span> present <span class="keyword">in</span> <span class="keyword">the</span> room, print “There <span class="keyword">is</span> an old oil lamp <span class="keyword">that</span> was</span><br><span class="line">made long ago here.” <span class="keyword">after</span> you have printed out <span class="keyword">the</span> room description.</span><br><span class="line">ii. If <span class="keyword">the</span> key <span class="keyword">is</span> present <span class="keyword">in</span> <span class="keyword">the</span> room, print “You see <span class="keyword">the</span> outline <span class="keyword">of</span> a key <span class="keyword">on</span> a</span><br><span class="line">dusty shelf <span class="keyword">that</span>'s covered <span class="keyword">in</span> dust.” <span class="keyword">after</span> you have printed out <span class="keyword">the</span> room</span><br><span class="line">description.</span><br><span class="line">iii. If <span class="keyword">the</span> chest <span class="keyword">is</span> present <span class="keyword">in</span> <span class="keyword">the</span> room, print “There <span class="keyword">is</span> a large, wooden,</span><br><span class="line">massive, oaken chest here <span class="keyword">with</span> <span class="keyword">the</span> <span class="built_in">word</span> “CHEST” carved <span class="keyword">into</span> <span class="keyword">it</span>” <span class="keyword">after</span></span><br><span class="line">you have printed out <span class="keyword">the</span> room description.</span><br></pre></td></tr></table></figure><ul><li>GET KEY – If the key is present in the room, this transfers the key to the user’s<br>  inventory. Be sure to clear the key from the room afterwards. Print “OK” if<br>  successful, “No key present” if not.</li><li>OPEN CHEST – If the chest is present in the room and is unlocked, then this<br>  should print out the chest’s contents and end the game. If the chest is locked, print<br>  “The chest is locked”. If the chest is not present in the room, print “No chest<br>  present”.</li></ul><ul><li>UNLOCK CHEST – If the user has the key, call the use() method with the chest<br>  object to unlock it, then print “OK”. If the user doesn’t have the key, print “Need a<br>  key to do any unlocking!”. If the chest is not present, print “No chest to unlock”.</li><li>(anything else) – Just print “I’m sorry I don’t know how to do that.”, and re-<br>  prompt the user to allow the user to enter another command. The user should be<br>  able to continue playing after an invalid command is inputted, and the game<br>  should continue normally after an invalid command. The program should not<br>  crash or end abruptly if the user inputs an invalid command.</li></ul><ol start="5"><li>When your program starts, print out the following text:<br>Welcome to UGA Adventures: Episode I<br>The Adventure of the Cave of Redundancy Adventure<br>By: (Your name)</li></ol><h2 id="Additional-Requirements"><a href="#Additional-Requirements" class="headerlink" title="Additional Requirements"></a>Additional Requirements</h2><p>These are things that make the graders lives easier, and ultimately, you will see in the real world<br>as well. Remember the teaching staff does not want to touch your code after they gave you<br>requirements; they want to see the perfect results they asked for! Here is a checklist of things you<br>can <strong>lose points</strong> for:</p><ul><li>(-10 points) If the source file(s)/class(es) are named incorrectly (case matters!)</li><li>(-10 points) If your source file(s) have a package declaration at the top</li><li>(-10 points) If any source file you submit is missing your Statement of Academic<br>  Honesty at the top of the source file. All submitted source code files must contain your<br>  Statement of Academic Honesty at the top of each file.</li><li>(-10 points) If you have more than one instance of Scanner in your program. Your<br>  program should only have one instance of Scanner.</li><li>(-15 points) Inconsistent I/O (input/output) that does not match our instructions or<br>  examples exactly (unless otherwise stated in an assignment’s instructions). Your<br>  program’s I/O (order, wording, formatting, etc.) must match our examples and<br>  instructions.</li><li>(-100 points) If the source file(s) are not submitted before the specified deadline or if they<br>  do not compile. Late submissions will not be accepted for this project since it is the last<br>  project of the semester, per the course syllabus.</li><li>If your (-10 points) comments or (-10 points) variables are “lacking”<br>  o Here, “lacking” means that you or a TA can find <strong>any</strong> lines of code or variables<pre><code>that take more than 10 seconds to understand, and there is no comment, or thevariable name does not make sense (variable names like **b** , **bb** , **bbb** , etc. **will****almost never be acceptable)**</code></pre></li><li>(-10 points) Indentation is not consistent throughout your source code<br>  o Refresh your memory of indentation patterns in chapter 2 in the course textbook<br>  o Be careful of a combination of tabs and spaces in your files (use one or the other)!</li></ul><p>If any of the above do not make sense to you, talk to a TA or ask your lab instructor.</p><h2 id="Project-Submission"><a href="#Project-Submission" class="headerlink" title="Project Submission"></a>Project Submission</h2><p>Submit the files <strong>Adventure.java</strong> , <strong>Chest.java</strong> , <strong>Lamp.java</strong> and <strong>Player.java</strong> in eLC. [Note that<br>you are not uploading Map.java, Room.java or Key.java because you should <strong>not</strong> have updated<br>these]</p><h2 id="Example-Executions"><a href="#Example-Executions" class="headerlink" title="Example Executions"></a>Example Executions</h2><p>Your program should work correctly and follow the examples below. Each example is a separate<br>run of a correctly working program.</p><h3 id="This-example-is-from-simpleMap-simpleMap-variable-set-to-true-in-the-Map-class"><a href="#This-example-is-from-simpleMap-simpleMap-variable-set-to-true-in-the-Map-class" class="headerlink" title="This example is from simpleMap (simpleMap variable set to true in the Map class)"></a>This example is from simpleMap (simpleMap variable set to true in the Map class)</h3><p>Welcome to UGA Adventures: Episode 1<br>The adventure of the Cave of Redundancy Adventure<br>By: Brad and Karen</p><p>This is the one room map. Everything you need is here!!<br>get key<br>OK<br>open chest<br>The chest is locked<br>unlock chest<br>OK<br>open chest<br>all the gold <strong>(Here, we are printing the contents of the chest)</strong></p><h3 id="Note-The-next-2-examples-follow-the-full-map-simpleMap-variable-set-to-false"><a href="#Note-The-next-2-examples-follow-the-full-map-simpleMap-variable-set-to-false" class="headerlink" title="Note: The next 2 examples follow the full map (simpleMap variable set to false)"></a>Note: The next 2 examples follow the full map (simpleMap variable set to false)</h3><p>Welcome to UGA Adventures: Episode 1<br>The adventure of the Cave of Redundancy Adventure<br>By: Brad and Karen</p><p>FOREST TRAIL:<br>You are standing on a dirt trail that leads to the east. Surrounding you is the famously thick underbrush<br>of Oconee Forest Park, the fall leaves falling off the trees have just started to poke holes in the canopy.<br>Off in the distance you hear the cool sounds of Lake Herrick drifting through the trees.<br>look<br>FOREST TRAIL:<br>You are standing on a dirt trail that leads to the east. Surrounding you is the famously thick underbrush<br>of Oconee Forest Park, the fall leaves falling off the trees have just started to poke holes in the canopy.<br>Off in the distance you hear the cool sounds of Lake Herrick drifting through the trees.<br>Exits are: east<br>east<br>WOODEN WALKWAY:<br>The wooden walkway makes a :clump: as you stride along it.</p><p>Frogs give a terrified SKRIP! and jump to safety as your adventurous frame comes into view.<br>A mountain biker, ignoring the many “Fragile Habitat” signs, speeds along a narrow dirt path to your<br>right.<br>As you reach the end of the walkway, you notice a hole in the ground in a newly fallen tree’s footprint,<br>just<br>large enough for you to fit through.<br>look<br>WOODEN WALKWAY:<br>The wooden walkway makes a :clump: as you stride along it.<br>Frogs give a terrified SKRIP! and jump to safety as your adventurous frame comes into view.<br>A mountain biker, ignoring the many “Fragile Habitat” signs, speeds along a narrow dirt path to your<br>right.<br>As you reach the end of the walkway, you notice a hole in the ground in a newly fallen tree’s footprint,<br>just<br>large enough for you to fit through.<br>There is an old oil lamp that was made long ago here.<br>Exits are: east<br>west<br>get lamp<br>OK<br>east<br>It is pitch black, you can’t see anything. You may be eaten by a grue!<br>light lamp<br>OK<br>look<br>CAVE ENTRANCE:<br>The damp earthen crawlspace gives you claustrophobic thoughts as you crawl through its damp earth.<br>Fortunately, the passageway soon grows large enough for you to stand, though slightly bent over.<br>The air smells of rotting wood, and a rotting wood smell hangs thick in the air.<br>Exits are: east<br>West</p><h3 id="…The-rest-of-the-example-removed-in-the-sake-of-space…"><a href="#…The-rest-of-the-example-removed-in-the-sake-of-space…" class="headerlink" title="[[…The rest of the example removed in the sake of space…]]"></a>[[…The rest of the example removed in the sake of space…]]</h3><h3 id="In-this-example-the-user-is-eaten-by-the-grue"><a href="#In-this-example-the-user-is-eaten-by-the-grue" class="headerlink" title="In this example, the user is eaten by the grue:"></a>In this example, the user is eaten by the grue:</h3><p>Welcome to UGA Adventures: Episode 1<br>The adventure of the Cave of Redundancy Adventure<br>By: Brad and Karen</p><p>FOREST TRAIL:<br>You are standing on a dirt trail that leads to the east. Surrounding you is the famously thick underbrush<br>of Oconee Forest Park, the fall leaves falling off the trees have just started to poke holes in the canopy.<br>Off in the distance you hear the cool sounds of Lake Herrick drifting through the trees.<br>east<br>WOODEN WALKWAY:<br>The wooden walkway makes a :clump: as you stride along it.<br>Frogs give a terrified SKRIP! and jump to safety as your adventurous frame comes into view.</p><p>A mountain biker, ignoring the many “Fragile Habitat” signs, speeds along a narrow dirt path to your<br>right.<br>As you reach the end of the walkway, you notice a hole in the ground in a newly fallen tree’s footprint,<br>just<br>large enough for you to fit through.<br>east<br>It is pitch black, you can’t see anything. You may be eaten by a grue!<br>west<br>You have stumbled into a passing grue, and have been eaten</p><h2 id="Map-Class-Interface"><a href="#Map-Class-Interface" class="headerlink" title="Map Class Interface"></a>Map Class Interface</h2><p>class Map:<br>private boolean simpleMap : This is set to true by default and allows you to test your code with a<br>1-dimension room<br>public Room getRoom(int x, int y) : Call this method with two int’s to get the appropriate room.<br>The valid range for both x and y is 0 to 3.</p><h2 id="Room-Class-Interface"><a href="#Room-Class-Interface" class="headerlink" title="Room Class Interface"></a>Room Class Interface</h2><p>class Room:<br>public String getDescription() : Returns the text description of this room.<br>public boolean canGoNorth() : Returns true if the player can go north from this room.<br>public boolean canGoSouth() : Returns true if the player can go south from this room.<br>public boolean canGoEast() : Returns true if the player can go east from this room.<br>public boolean canGoWest() : Returns true if the player can go west from this room.<br>public Lamp getLamp() : Returns the lamp object in this room. If no lamp is present, returns null.<br>public void clearLamp() : Sets the lamp variable in this room to null.<br>public Key getKey() : Returns the key object in this room. If no key is present, returns null.<br>public void clearKey() : Sets the key variable in this room to null.<br>public Chest getChest() : Returns the chest object in this room. If no chest is present, returns null.<br>public boolean isDark() : Returns true if there is no light in this room, veeeeeeery dangerous!</p><h2 id="Key-Class-Interface"><a href="#Key-Class-Interface" class="headerlink" title="Key Class Interface"></a>Key Class Interface</h2><p>class Key:<br>public void use(Chest onChest): Calls the unlock method on the given chest.</p><p>Copyright © Bradley J. Barnes and the University of Georgia. This work is licensed<br>under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International<br>License to students and the public. The content and opinions expressed on this Web<br>page do not necessarily reflect the views of nor are they endorsed by the University of<br>Georgia or the University System of Georgia.</p>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1110_A4</title>
    <link href="cplusplusdaixie.com/CSCI1110-A4.html"/>
    <id>cplusplusdaixie.com/CSCI1110-A4.html</id>
    <published>2023-07-31T01:32:56.000Z</published>
    <updated>2023-07-31T01:33:42.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI-1110"><a href="#CSCI-1110" class="headerlink" title="# CSCI 1110"></a># CSCI 1110</h3><h1 id="Assignment-04"><a href="#Assignment-04" class="headerlink" title="Assignment 04"></a>Assignment 04</h1><p><strong>Please start this assignment early</strong> ; programming and logic take time - if you leave it to the last<br>minute, you might not have enough time to finish or might make silly mistakes that you otherwise<br>could avoid. Note that TAs and Instructors will not be able to answer last-minute questions!</p><p><strong>All work is to be handed in Mimir, our online code learning environment.</strong> You should, however,<br>write your code on an IDE such as IntelliJ.</p><p>To complete this assignment, you will need to know about:</p><ul><li>Basic Java</li><li>Conditionals</li><li>Boolean Variables</li><li>Loops</li><li>Objects and Classes</li><li>Java Collections Framework (Lists, Sets, Maps, Queues, Stacks)</li></ul><p>Your code <strong>must compile</strong>. If it does not compile, you will receive a 0 (zero) on that portion of the<br>assignment, and no partial marks will be given.</p><p>Remember that students who <strong><em>hardcode</em></strong> their outputs to match the test cases in Mimir will<br>receive a <strong>zero</strong> on the entire assignment.</p><p><strong>Grading Scheme:</strong> Please see the grading scheme at the end of this document.</p><p><strong>Coding Style:</strong> You must proper variable names and comments. Please follow the guidelines on<br><a href="https://web.cs.dal.ca/~franz/CodingStyle.html" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html</a></p><h2 id="Problem-Overview"><a href="#Problem-Overview" class="headerlink" title="Problem Overview"></a>Problem Overview</h2><p>In this assignment, you will finish implementing a set of classes used to represent Students,<br>Courses and a University.</p><p>This assignment is meant for you to write code using the JFC collections (lists, sets, maps,<br>queues, etc.) and their built-in algorithms (e.g., contains method). Your goal is to read through<br>the already written javaDocs and fix the variable declarations and methods flagged with a ToDo<br>comment (//TODO).</p><p>You can create other private methods and variables if you want, but you don’t have to. <strong>You also<br>don’t have to add any more JavaDocs; however, inline comments are still required on the<br>methods you write code on.</strong></p><p>The two classes you have to work in are <strong>University.java</strong> and <strong>Student.java</strong>.</p><h2 id="Iterators-on-Maps"><a href="#Iterators-on-Maps" class="headerlink" title="Iterators on Maps"></a>Iterators on Maps</h2><p>We discussed iterators in lectures 14 and 15. Iterators are what a <em>foreach</em> loop uses<br>“underneath the surface.” We also explored how to retrieve an iterator from a List and use it to<br>iterate over (and even remove) the collection using while loops.</p><p>You cannot get an iterator from a map directly since the stored information is associated with a<br>tuple of keys and values. To iterate on a map, you have to get the keys from the map and<br>iterate over them. Example:</p><ul><li>Assume that you have a map that associates Farms and Cows (&lt;Farm,Cow&gt;). The keys to<br>  the map are Farm objects.</li><li>You can retrieve the keys already on the map by calling the keySet() method on the map<br>  variable. It will return a set of keys (Set<farm>). You can then get the iterator of a set<br>  the same way you do for lists.<pre><code>o Another way to go over every element on the map is to use the values() method   on the map variable. This method will return a Collection&lt; _value_ &gt;.o It is up to you to chose which path you want to follow</code></pre></farm></li></ul><h2 id="For-the-curious-among-you"><a href="#For-the-curious-among-you" class="headerlink" title="For the curious among you"></a>For the curious among you</h2><p>I added some extra code in the Student and Course classes:</p><ul><li>StringBuilder: we should use a SB to concatenate strings on loops instead of +=<br>  because everytime we are using += we are instantiating a new String (they are<br>  imutable)</li><li>Saving and loading objects to a binary file (Student class): you can write another</li></ul><h2 id="class-on-your-computer-to-toy-with-those-two-methods"><a href="#class-on-your-computer-to-toy-with-those-two-methods" class="headerlink" title="class on your computer to toy with those two methods."></a>class on your computer to toy with those two methods.</h2><h2 id="Grading-Scheme"><a href="#Grading-Scheme" class="headerlink" title="Grading Scheme"></a>Grading Scheme</h2><p>Each problem on the assignment will be graded based on three criteria:</p><h3 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h3><p>“Does it work according to specifications?” This is determined in an automated fashion by<br>running your program on a number of inputs and ensuring that the outputs match the expected<br>outputs. The score is determined based on the number of tests that your program passes.</p><h3 id="Quality-of-Solution"><a href="#Quality-of-Solution" class="headerlink" title="Quality of Solution"></a>Quality of Solution</h3><p>“Is it a good solution?” This considers whether the solution is correct, efficient, covers boundary<br>conditions, does not have any obvious bugs, etc. This is determined by visual inspection of the<br>code. Initially full marks are given to each solution and marks are deducted based on faults<br>found in the solution.</p><h3 id="Code-Clarity"><a href="#Code-Clarity" class="headerlink" title="Code Clarity"></a>Code Clarity</h3><p>“Is it well written?” This considers whether the solution is properly formatted, well-<br>documented, and follows coding style guidelines<br>(<a href="https://web.cs.dal.ca/~franz/CodingStyle.html)" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html)</a>.</p><p>If your program does not compile, it is considered non-functional and of extremely poor quality,<br>meaning you will receive 0 for the solution.</p><h4 id="PROBLEM-POINTS"><a href="#PROBLEM-POINTS" class="headerlink" title="PROBLEM POINTS"></a>PROBLEM POINTS</h4><p><strong>MIMIR TEST CASES</strong> (^80)</p><h4 id="QUALITY-OF-SOLUTION-amp"><a href="#QUALITY-OF-SOLUTION-amp" class="headerlink" title="QUALITY OF SOLUTION &amp;"></a>QUALITY OF SOLUTION &amp;</h4><h4 id="CODE-CLARITY"><a href="#CODE-CLARITY" class="headerlink" title="CODE CLARITY"></a>CODE CLARITY</h4><h4 id="20"><a href="#20" class="headerlink" title="20"></a>20</h4><h4 id="TOTAL"><a href="#TOTAL" class="headerlink" title="TOTAL"></a>TOTAL</h4><h4 id="100"><a href="#100" class="headerlink" title="100"></a>100</h4>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CSCI1110_A3</title>
    <link href="cplusplusdaixie.com/CSCI1110-A3.html"/>
    <id>cplusplusdaixie.com/CSCI1110-A3.html</id>
    <published>2023-07-26T03:06:11.000Z</published>
    <updated>2023-07-26T03:07:09.649Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSCI1110"><a href="#CSCI1110" class="headerlink" title="CSCI1110"></a>CSCI1110</h3><h1 id="Assignment-03"><a href="#Assignment-03" class="headerlink" title="Assignment 03"></a>Assignment 03</h1><p><strong>Please start this assignment early</strong> ; programming and logic take time - if you leave it to the last<br>minute, you might not have enough time to finish or might make silly mistakes that you otherwise<br>could avoid. Note that TAs and Instructors will not be able to answer last-minute questions!</p><p><strong>All work is to be handed in Mimir, our online code learning environment.</strong> You should, however,<br>write your code on an IDE such as IntelliJ.</p><p>To complete this assignment, you will need to know about:</p><ul><li>Basic Java</li><li>Conditionals</li><li>Boolean Variables</li><li>Loops</li><li>Objects and Classes</li><li>Inheritance</li></ul><p>This is your first assignment with objects. The test cases from now on <strong>are slightly different</strong>. Some<br>test cases will be regular input/input as before; however, <strong>most tests cases</strong> will be unit tests. In<br>unit test cases there is no input from the user. The test can evaluate your code directly without<br>any user input when needed. The tests can also test methods individually <strong>as long as your code is<br>compiling</strong>. Before you can even try to test your code <strong>it must be compiling</strong>.</p><p>Your code <strong>must compile</strong>. If it does not compile, you will receive a 0 (zero) on that portion of the<br>assignment, and no partial marks will be given.</p><p>Remember that students who <strong><em>hardcode</em></strong> their outputs to match the test cases in Mimir will<br>receive a <strong>zero</strong> on the entire assignment.</p><p><strong>Grading Scheme:</strong> Please see the grading scheme at the end of this document.</p><p><strong>Coding Style:</strong> You must proper variable names and comments. Please follow the guidelines on<br><a href="https://web.cs.dal.ca/~franz/CodingStyle.html" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html</a></p><h2 id="Problem-Overview"><a href="#Problem-Overview" class="headerlink" title="Problem Overview"></a>Problem Overview</h2><p>In OOP we model our problems using objects that we can manipulate. To create and use<br>objects, we need to write classes. Classes are a sort of a blueprint that describes the properties<br>and behaviour of the objects we want to create.</p><p>In this assignment we are going write classes representing <strong>Characters</strong> for RPG games similar to<br>World of Warcraft and others. Our game will have different kinds of Characters and Attacks. We<br>will use Inheritance to reduce duplicated code, allow for easy expansion of the game’s base<br>carachters (and attakcs), and explore polymorphic behaviour.</p><p>In a real-world scenario we would also be leveraging the concepts of Interfaces to write the<br>code. We will see interfaces in the near future; however, because we are a little behind in the<br>schedule we will not have interfaces on this assignment.</p><p>After you finish this assignment, try to answer the following questions:</p><ul><li>How diffictulry it would be to add a new type of character to the game?</li><li>What code do you need to change to add the new character?</li><li>How difficult would it be to implement our game without using inheritance?</li></ul><p>The starter code in Mimir comes with three packages: Attacks, Characters, and Game.</p><ul><li><strong>Attacks:</strong> Contain the classes related to attacks in the game. These classes<br>  implementation is provided. <strong>Study them before starting the assignment.</strong> You don’t<br>  have to edit the code inside this package.</li><li><strong>Characters:</strong> Contain the classes related to our game characters. We will have initially<br>  three concrete Characters: Mage, Priest, and Warrior</li><li><strong>Game:</strong> This package has an example code on how to use the Charcaters and Attacks to<br>  write a small turn-based duel of two game characters. You don’t have to edit this code.<br>  You can run it once you have done the assignment. You can also study it to understand a<br>  bit more of the idea of using abstract types and polymorphism.</li></ul><p><strong>How to upload your solution to mimir:</strong> You must preserve the package structure when<br>submitting your solution to mimir. The <strong>only way</strong> (that I know of) to preserve is to zip your files<br>an upload the zip file.</p><p><strong>On Windows:</strong> Select the three folders inside the src folder, right click on them, and<br>“Send to compresed (zipped) folder”.</p><p><strong>On Mac</strong> : Select the three folders inside the src folder, right click (option click?),<br>“Compress 3 items”</p><p><strong>DO NOT WAIT UNTIL THE LAST WEEKEND TO START THIS ASSIGNMENT</strong>. Even if you don’t have<br>a lot of time now, at least download the starter code on Mimir, and try to create the zipped file.</p><p><strong>“Help! Where do I begin?”</strong> :</p><p>Review the classes inside the Attack package. Read the Point (see below)<br>documentation.</p><p>You always start with the most generic classes in the inheritance trees. Start with the<br><strong>RPGCharacter</strong> , then create the the more specialized classes.</p><p>This assignment is less complicated thant it seems codingwise. Review the concepts of<br>inheritance before starting it.</p><p><strong>The Point class:</strong> We will be using Java’s Point class. You have to import java.awt.Point. More<br>information on this class can be found here:<br><a href="https://docs.oracle.com/javase/8/docs/api/java/awt/Point.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/java/awt/Point.html</a></p><h2 id="The-Assignments-Classes-and-Inheritance-Diagram"><a href="#The-Assignments-Classes-and-Inheritance-Diagram" class="headerlink" title="The Assignments Classes and Inheritance Diagram"></a>The Assignments Classes and Inheritance Diagram</h2><p><strong>You don’t have to write JavaDocs for</strong> : getCurrentHP, getPosition, getMaxHP, getName,<br>toString, getCurrentEnergy, getCurrentMana</p><h2 id="Implementation-details-for-Attack"><a href="#Implementation-details-for-Attack" class="headerlink" title="Implementation details for Attack"></a>Implementation details for Attack</h2><p>I’ve opted to reduce your workload a little. All the implementation for the attacks is provided.</p><h2 id="Implementation-details-for-RPGCharacter"><a href="#Implementation-details-for-RPGCharacter" class="headerlink" title="Implementation details for RPGCharacter"></a>Implementation details for RPGCharacter</h2><p>RPGCharacter, Melee, and Caster should be abstract</p><p><strong>RPGCharacter</strong></p><ul><li>The constructor’s parameters are in the following order: name, intellect, strength,<br>  maxHP, and position.</li><li>The move method will move the character by calling the translate method form the<br>  Point class. The parameter order is x,y</li><li>TakeDamage: deals damage to the character by deducting parameter to the character’s<br>  current hp. If the HP falls bellow zero (included) the method should set the currentHP to<br>  zero and return false indicating that the character is dead.</li><li>Heal: heals the character by adding the parameter to the character’s current hp. A<br>  character <strong>cannot</strong> have more HP than the maxHP value. Returns true if the character is<br>  fully healed.</li><li>Attack should be abstract</li><li>GetAttacks will return a string with each of the character’s attacks on a new line. Each<br>  line should contain the attack’s index on the ArrayList and the attack’s string<br>  representation. Example:</li><li>ToString returns a String representing the Characters. The string should contain (in this<br>  order): the name, the type^1 , currentHP and maxHP:</li></ul><p><strong>Caster</strong></p><ul><li>This class will represent all Casters in our game. Casters are characters who deal damage<br>  by casting spells primarly.</li></ul><p>(^1) You can retrieve the class of the implicit parameter using getClass(); You can retrieve the class’ name using<br>getSimplifiedName(). How can you use these two methods to reduce the numbers of toStrings in the subclasses?</p><ul><li>The caster’s constructor will receive the parameters in this order: name, intellect,<br>  maxHP, position, and maxMana. Casters should be initialzed with a strength of 1 (one)<br>  and currentMana as maxMana.</li><li>The attack method should work as follows:<br>  o This method will select the attack from the ArrayList and call the<pre><code>interactWithTarget method to inflict damage or heal the target.</code></pre>  o The mehod will return a negative number in case the attack fails:<pre><code>▪ - 1 attackIndex not in range of the ArrayList▪ - 2 target out of range (check the Point&apos;s calss docs to see how you can   calculate the distance between two points▪ - 3 not enough mana</code></pre>  o The method will return the target’s currentHP if the attack is sucessifull<br>  o Casters can cast two types of spells and can also deal very basic melee attacks.<pre><code>You can see the Mage and Priest classes for example. The attack method willbehave differently depending on the instance of the attack selected.   ▪ HealingSpells should heal the character itself (implicit parameter) and      pass the character&apos;s intellect as the modifier value   ▪ For any other spell, the method will attack the target character and pass      the intellect as the modifier   ▪ For non-spell attacks, it should attack the target and pass zero (0) as the      modifier</code></pre>  o You should use the interactWithTarget method from the attack that was<pre><code>selected via the index parameter</code></pre></li><li>The toString method should append the caster’s mana underneath the character’s</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">toString:</span></span><br></pre></td></tr></table></figure><p><strong>Melee</strong></p><ul><li>This class represents all Melee characters. Instead of casting spells, these types of<br>  characters deal damage using physical attacks. Most of these attacks will consume<br>  energy.</li><li>The constructor’s parameters are, in this order, name, strength, maxHP, position, and<br>  maxEnergy. The currentEnergy should be initialized to the maxEnergy value and an<br>  intellect of 1</li><li>The attack method is simpler than the caster’s.<br>  o It will return a negative number if the attack fails:<pre><code>▪ - 1 attackIndex not in the range of the ArrayList▪ - 2 target out of range▪ - 3 not enough energy</code></pre>  o If the attack succeds, it will:</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▪ Deduct the energy cost</span><br><span class="line">▪ Call the interactWithTarget <span class="function"><span class="keyword">method</span> <span class="title">from</span> <span class="title">the</span> <span class="title">chosen</span> <span class="title">attack</span> <span class="title">to</span> <span class="title">inflict</span></span></span><br><span class="line"><span class="function"><span class="title">damage</span> <span class="title">on</span> <span class="title">the</span> <span class="title">target</span></span></span><br><span class="line"><span class="function">▪ <span class="title">Return</span> <span class="title">the</span> <span class="title">target</span>'<span class="title">s</span> <span class="title">currentHP</span> <span class="title">after</span> <span class="title">the</span> <span class="title">attack</span></span></span><br></pre></td></tr></table></figure><ul><li>The toString method will add the Characters current energy and max energy to the<br>  character’s default toString implementation:</li></ul><p><strong>Mage, Priest, Warriors</strong></p><ul><li>These are concrect classes (not abstract) in our game. Each class will create a character<br>  with a initial list of attacks (melee or spells).</li><li><strong>Priest:</strong><br>  o Wand, cost 0, damage 3, range 3<br>  o Smite, cost 10, damage 10, range 7<br>  o Flash Heal, cost 20, heal 15, range 15<br>  o Ressurrection</li><li><strong>Mage</strong><br>  o Staff, cost 0, damage 3, range 3<br>  o Fire Ball, cost 20, damage 10, range 20<br>  o Frost Ball, cost 15, damage 7, range 15<br>  o Lightning, cost 30, damage 15, range 20</li><li><strong>Warrior</strong><br>  o Punch, cost 0, damage 5, range 3<br>  o Slam, cost 3, damage 5, range 3<br>  o Charge, cost 20, damage 30, range 15</li></ul><h2 id="How-do-I-test-an-abstract-class"><a href="#How-do-I-test-an-abstract-class" class="headerlink" title="How do I test an abstract class?"></a>How do I test an abstract class?</h2><p>If you cannot create an object of a class how do you test it?</p><p>There are a couple of different ways but you should do as follows until you learn more about<br>OOP:</p><ul><li>Let’s assume you want to test your RPGCharacter class.</li></ul><ol><li>Create an empty class (e.g. ConcreteRPGCharacter)</li><li>Extend RPGCharacter</li><li>For each abstract method in RPGCharacter, write a “dumb” implementation.<br> a. If the method return type is void, write “return;” as the implementation<br> b. If the method is returning a primitive type, write “return 0;” as the<pre><code>implementation</code></pre></li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c. If <span class="keyword">the</span> method is returing <span class="keyword">a</span> reference type, <span class="built_in">write</span> <span class="string">"return null;"</span> <span class="keyword">as</span> <span class="keyword">the</span></span><br><span class="line">implementation</span><br></pre></td></tr></table></figure><ol start="4"><li>Create a tester/runner class.</li><li>In the main method, create instances of ConcreteRPGCharacter.</li><li>You can now test the non-abstract methods of RPGCharaceter by calling them on the<br> ConcreteRPGCharacter object.</li></ol><h2 id="Grading-Scheme"><a href="#Grading-Scheme" class="headerlink" title="Grading Scheme"></a>Grading Scheme</h2><p>Each problem on the assignment will be graded based on three criteria:</p><h3 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h3><p>“Does it work according to specifications?” This is determined in an automated fashion by<br>running your program on a number of inputs and ensuring that the outputs match the expected<br>outputs. The score is determined based on the number of tests that your program passes.</p><h3 id="Quality-of-Solution"><a href="#Quality-of-Solution" class="headerlink" title="Quality of Solution"></a>Quality of Solution</h3><p>“Is it a good solution?” This considers whether the solution is correct, efficient, covers boundary<br>conditions, does not have any obvious bugs, etc. This is determined by visual inspection of the<br>code. Initially full marks are given to each solution and marks are deducted based on faults<br>found in the solution.</p><h3 id="Code-Clarity"><a href="#Code-Clarity" class="headerlink" title="Code Clarity"></a>Code Clarity</h3><p>“Is it well written?” This considers whether the solution is properly formatted, well-<br>documented, and follows coding style guidelines<br>(<a href="https://web.cs.dal.ca/~franz/CodingStyle.html)" target="_blank" rel="noopener">https://web.cs.dal.ca/~franz/CodingStyle.html)</a>.</p><p>If your program does not compile, it is considered non-functional and of extremely poor quality,<br>meaning you will receive 0 for the solution.</p><h4 id="PROBLEM-POINTS"><a href="#PROBLEM-POINTS" class="headerlink" title="PROBLEM POINTS"></a>PROBLEM POINTS</h4><p><strong>RPGCHARACTER CLASSES</strong> (^70)</p><h4 id="QUALITY-OF-SOLUTION-amp"><a href="#QUALITY-OF-SOLUTION-amp" class="headerlink" title="QUALITY OF SOLUTION &amp;"></a>QUALITY OF SOLUTION &amp;</h4><h4 id="CODE-CLARITY"><a href="#CODE-CLARITY" class="headerlink" title="CODE CLARITY"></a>CODE CLARITY</h4><h4 id="30"><a href="#30" class="headerlink" title="30"></a>30</h4><h4 id="TOTAL"><a href="#TOTAL" class="headerlink" title="TOTAL"></a>TOTAL</h4><h4 id="100"><a href="#100" class="headerlink" title="100"></a>100</h4>]]></content>
    
    <summary type="html">
    
      使用Java完成
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
</feed>
