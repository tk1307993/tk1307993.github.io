<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生计算机编程数学统计作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804 微信：349583866</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="cplusplusdaixie.com/"/>
  <updated>2023-06-19T03:03:16.074Z</updated>
  <id>cplusplusdaixie.com/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python代写：CS10-Python-Programming-Homework5</title>
    <link href="cplusplusdaixie.com/CS10-Python-Programming-Homework5.html"/>
    <id>cplusplusdaixie.com/CS10-Python-Programming-Homework5.html</id>
    <published>2023-06-19T03:01:17.000Z</published>
    <updated>2023-06-19T03:03:16.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CS10-Python-Programming-Homework-5"><a href="#CS10-Python-Programming-Homework-5" class="headerlink" title="CS10 Python Programming Homework 5"></a>CS10 Python Programming Homework 5</h3><h1 id="40-points"><a href="#40-points" class="headerlink" title="40 points"></a>40 points</h1><h1 id="Dictionaries-Files-OOP"><a href="#Dictionaries-Files-OOP" class="headerlink" title="Dictionaries, Files, OOP"></a>Dictionaries, Files, OOP</h1><ol><li>You must submit to Canvas only your program listing and output for each program set. Each program set must have your student name, student ID, and program set number/description. Late homework will not be accepted for whatever reasons you may have.</li></ol><h3 id><a href="#" class="headerlink" title="**"></a><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></h3><p>for this homework, you are only to submit All Program Sets to Canvas under Homework 5 link</p><hr><p>a. Name your files : HW5_PS1_lastname_firstinitial.py for Program Set 1 and so on. PS means program set.<br>b. You have till 11:59pm as shown on Canvas to submit all Program Sets to Canvas. If the deadline is past, Program Sets will not be graded.<br>c. if you do not follow instructions on file naming provided in this section you will receive a zero for the whole of Homework 5.</p><ol start="2"><li>Please format you output properly, for example all dollar amounts should be printed with 2 decimal places.<br> Make sure that your output values are correct (check the calculations).</li><li>Each student is expected to do their own work. IF IDENTICAL PROGRAMS ARE SUBMITTED, EACH IDENTICAL PROGRAM WILL RECEIVE A SCORE OF ZERO.</li></ol><p>Grading:</p><p>Each program set must run correctly syntactically, logically, and display the correct output as specified. If the program set does not run correctly, a zero will be given. For each Program set, if the program executes properly with proper syntax, logic, and displays the correct output, then points will be deducted for not having proper: a. Comments (1 pt deducted for each occurrence)</p><ul><li>Your name, description at the beginning of each program set. Short description of the what each section of your codes do.<br>b. Consistency/Readability (2 pts deducted for each occurrence)</li><li>Spacing(separate each section of codes with a blank line</li><li>Indentation</li><li>Style (proper naming of variables no a,b,c – use descriptive and mnemonics)<br>-each function must include type hints or annotations except for the main()<br>-include docstrings for every function<br>c. Required elements (2 pts deducted for each occurrence)</li><li>Use tools that have been covered in class</li><li>proper formatting for output when specified</li><li>all monetary values must be in 2 decimal places<br>d. Output</li><li>if no output is provided for either the hardcopies or uploaded file, a zero will be given for that program set.</li><li>Output must to be displayed at the end of the program listing(codes), if it not displayed at the end of the program listing it is equivalent to no output.</li><li>must use test cases when provided in the Program set question. Provide your own test cases if the program set does not ask for any. The minimum test cases you provide on your own is 5 or more. If you provide less then 5 test cases per Program Set then that program set will receive a zero grade.</li></ul><p>Program 1- Tea Leaves Sales Report (15 Points)</p><ol><li>Here is the sample of the text file (datafile) for the tea sales (tea.txt). The tea.txt file is provided for you on Canvas.</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Green</span> <span class="selector-tag">Tea</span><span class="selector-pseudo">:8580.0</span><span class="selector-pseudo">:7201.25</span><span class="selector-pseudo">:8900.</span></span><br><span class="line"><span class="selector-tag">Earl</span> <span class="selector-tag">Grey</span><span class="selector-pseudo">:10225.25</span><span class="selector-pseudo">:9025.0</span><span class="selector-pseudo">:9505.</span></span><br><span class="line"><span class="selector-tag">Ceylon</span><span class="selector-pseudo">:6700.1</span><span class="selector-pseudo">:5012.45</span><span class="selector-pseudo">:6011.</span></span><br><span class="line"><span class="selector-tag">Jasmine</span><span class="selector-pseudo">:9285.15</span><span class="selector-pseudo">:8276.1</span><span class="selector-pseudo">:8705.</span></span><br><span class="line"><span class="selector-tag">Mint</span> <span class="selector-tag">Tea</span><span class="selector-pseudo">:7901.25</span><span class="selector-pseudo">:4267.0</span><span class="selector-pseudo">:7056.</span></span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The data reads <span class="keyword">as</span> follows – <span class="string">tea_name:</span><span class="string">store1_Sales:</span><span class="string">store2_Sales:</span>store3_Sales</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The output displayed <span class="keyword">as</span> follows(<span class="literal">no</span> commas required <span class="keyword">for</span> the numbers <span class="keyword">in</span> <span class="keyword">this</span> output)</span><br></pre></td></tr></table></figure><h3 id="gt-gt-gt"><a href="#gt-gt-gt" class="headerlink" title="&gt;&gt;&gt;"></a>&gt;&gt;&gt;</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ceylon <span class="number">6700.10</span> <span class="number">5012.45</span> <span class="number">6011.00</span> <span class="number">17723.</span></span><br><span class="line">Earl Grey <span class="number">10225.25</span> <span class="number">9025.00</span> <span class="number">9505.00</span> <span class="number">28755.</span></span><br><span class="line">Green Tea <span class="number">8580.00</span> <span class="number">7201.25</span> <span class="number">8900.00</span> <span class="number">24681.</span></span><br><span class="line">Jasmine <span class="number">9</span> <span class="number">285.15</span> <span class="number">8276.10</span> <span class="number">8705.00</span> <span class="number">26266.</span></span><br><span class="line">Mint Tea <span class="number">7901.25</span> <span class="number">4267.00</span> <span class="number">7056.50</span> <span class="number">19224.</span></span><br><span class="line"><span class="number">42691.75</span> <span class="number">33781.80</span> <span class="number">40177.</span></span><br></pre></td></tr></table></figure><h3 id="gt-gt-gt-1"><a href="#gt-gt-gt-1" class="headerlink" title="&gt;&gt;&gt;"></a>&gt;&gt;&gt;</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The last row is the store totals <span class="keyword">for</span> all the kinds of tea leaves sold. The last column is the total sale <span class="keyword">for</span></span><br><span class="line">each kind of tea leaves sales.<span class="built_in"> Note </span>that the tea names are sorted.</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span>. Write <span class="keyword">a</span> program <span class="built_in">to</span> <span class="built_in">read</span> <span class="keyword">in</span> <span class="keyword">the</span> tea.txt textfile <span class="keyword">and</span> <span class="keyword">then</span> print <span class="keyword">the</span> report <span class="keyword">as</span> shown <span class="keyword">in</span> <span class="comment">#2 above.</span></span><br><span class="line">b. You must use dictionary. You can also use list, tuples, sets <span class="keyword">if</span> necessary.</span><br></pre></td></tr></table></figure><p>Program Set 2(15 points)</p><ol><li>The textabbrv.txt file is provided for you on Canvas. You are to use this text file and write and program as shown in the output sample. Allow the user to run the program as many times as the user wants. You must provide at least 5 test cases.</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a. You are <span class="keyword">to</span> write a program where the<span class="built_in"> user </span>enters an abbreviation <span class="keyword">and</span> your program will translate it <span class="keyword">to</span></span><br><span class="line">English.</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b. your program should take into consideration all punctuation marks that the<span class="built_in"> user </span>enters <span class="keyword">and</span> displayed it</span><br><span class="line"><span class="keyword">in</span> the English translation.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c. You must <span class="keyword">use</span> dictionary. You may <span class="keyword">use</span> <span class="keyword">list</span>, tuples, <span class="keyword">sets</span> <span class="keyword">if</span> you need to.</span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Below is the textabbv.txt file contents(use the textabbv.txt file provided for your program):</span><br><span class="line"><span class="symbol">r:</span>are</span><br><span class="line"><span class="symbol">u:</span>you</span><br><span class="line"><span class="symbol">ttyl:</span>talk to you later</span><br><span class="line"><span class="symbol">l8:</span>late</span><br><span class="line"><span class="symbol">brb:</span>be right back</span><br><span class="line"><span class="symbol">lol:</span>laughing <span class="keyword">out</span> loud</span><br><span class="line"><span class="symbol">bbl:</span>be back later</span><br><span class="line"><span class="symbol">tldr:</span>too long<span class="comment">; didn't read</span></span><br><span class="line"><span class="symbol">rofl:</span>rolling on floor laughing</span><br><span class="line"><span class="symbol">gtg:</span>got to go</span><br><span class="line"><span class="symbol">cya:</span>see you</span><br><span class="line"><span class="symbol">cuzz:</span>because</span><br><span class="line"><span class="symbol">bff:</span>best friend forever</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The output should <span class="built_in">display</span>:</span><br></pre></td></tr></table></figure><h3 id="gt-gt-gt-2"><a href="#gt-gt-gt-2" class="headerlink" title="&gt;&gt;&gt;"></a>&gt;&gt;&gt;</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enter <span class="keyword">a</span> message <span class="built_in">to</span> be translated: (prompt <span class="keyword">for</span> <span class="keyword">the</span> user)</span><br><span class="line">r u , lol? (user input <span class="keyword">the</span> abbreviation)</span><br><span class="line">The translated <span class="keyword">text</span> is: (your program translates <span class="keyword">and</span> prints <span class="keyword">the</span> next <span class="number">2</span> <span class="keyword">lines</span> including</span><br><span class="line">are you , laughing out loud? punctuations)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Program 3 – OOP (10 points)</p><p>Write a program to calculate and display the loan for buying a car.</p><ol><li>Create a class call Loan.<br>Data fields in the Loan class include:<br>1 Annual Interest Rate (Float)</li><li>Number of years of loan (Float)</li><li>Loan Amount (Float)</li><li>Borrower’s Name (string)</li><li>Create the initializer or constructor for the class with the above data fields. Make the data fields private.</li><li>Create accessors (getter) for all the data fields.</li><li>Create mutators (setters) for all the data fields.</li><li>Create a class method - getMonthlyPayment where</li></ol><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monthlyPayment = loanAmount * monthlyInterestRate / (<span class="number">1</span> - (<span class="number">1</span> / (<span class="number">1</span> + monthlyInterestRate) ** (numberOfYears * <span class="number">12</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span> <span class="string">that</span> <span class="string">the</span> <span class="string">monthly</span> <span class="string">interest</span> <span class="string">rate</span> <span class="string">=</span> <span class="string">annualinterest</span> <span class="string">/</span> <span class="number">1200</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Create a class method - getTotalPayment where</li></ol><p><em>totalPayment = getMonthlyPayment() <em> numberOfYears </em> 12</em></p><ol start="7"><li>Write a test program (main function) to allow the user to enter the following:</li><li>Annual Interest Rate</li><li>Number of Years of Loan</li><li>Loan Amount</li><li>Borrower’s Name</li></ol><p>Allow the user to change the loan amount and reprint the new loan information.</p><p>The output should look like this:</p><h2 id="gt-gt-gt-3"><a href="#gt-gt-gt-3" class="headerlink" title="&gt;&gt;&gt;"></a>&gt;&gt;&gt;</h2><h2 id="Enter-yearly-interest-rate-2"><a href="#Enter-yearly-interest-rate-2" class="headerlink" title="Enter yearly interest rate: 2."></a>Enter yearly interest rate: 2.</h2><h2 id="Enter-number-of-years-as-an-integer-5"><a href="#Enter-number-of-years-as-an-integer-5" class="headerlink" title="Enter number of years as an integer: 5"></a>Enter number of years as an integer: 5</h2><h2 id="Enter-loan-amount-1000"><a href="#Enter-loan-amount-1000" class="headerlink" title="Enter loan amount: 1000."></a>Enter loan amount: 1000.</h2><h2 id="Enter-a-borrower’s-name-John-Jones"><a href="#Enter-a-borrower’s-name-John-Jones" class="headerlink" title="Enter a borrower’s name: John Jones"></a>Enter a borrower’s name: John Jones</h2><h2 id="The-loan-is-for-John-Jones"><a href="#The-loan-is-for-John-Jones" class="headerlink" title="The loan is for John Jones"></a>The loan is for John Jones</h2><h2 id="The-monthly-payment-is-17"><a href="#The-monthly-payment-is-17" class="headerlink" title="The monthly payment is 17."></a>The monthly payment is 17.</h2><h2 id="The-total-payment-is-1-064"><a href="#The-total-payment-is-1-064" class="headerlink" title="The total payment is 1,064."></a>The total payment is 1,064.</h2><h2 id="Do-you-want-to-change-the-loan-amount-Y-for-yes-or-enter-to-quit-y"><a href="#Do-you-want-to-change-the-loan-amount-Y-for-yes-or-enter-to-quit-y" class="headerlink" title="Do you want to change the loan amount? Y for yes or enter to quit y"></a>Do you want to change the loan amount? Y for yes or enter to quit y</h2><h2 id="Enter-new-loan-amount-5000"><a href="#Enter-new-loan-amount-5000" class="headerlink" title="Enter new loan amount 5000"></a>Enter new loan amount 5000</h2><h2 id="The-loan-is-for-John-Jones-1"><a href="#The-loan-is-for-John-Jones-1" class="headerlink" title="The loan is for John Jones"></a>The loan is for John Jones</h2><h2 id="The-monthly-payment-is-88"><a href="#The-monthly-payment-is-88" class="headerlink" title="The monthly payment is 88."></a>The monthly payment is 88.</h2><h2 id="The-total-payment-is-5-324"><a href="#The-total-payment-is-5-324" class="headerlink" title="The total payment is 5,324."></a>The total payment is 5,324.</h2><h2 id="gt-gt-gt-4"><a href="#gt-gt-gt-4" class="headerlink" title="&gt;&gt;&gt;"></a>&gt;&gt;&gt;</h2>]]></content>
    
    <summary type="html">
    
      使用Python完成
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP202-A3</title>
    <link href="cplusplusdaixie.com/COMP202-A3.html"/>
    <id>cplusplusdaixie.com/COMP202-A3.html</id>
    <published>2023-06-17T02:38:12.000Z</published>
    <updated>2023-06-17T02:05:17.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ASSIGNMENT-3"><a href="#ASSIGNMENT-3" class="headerlink" title="ASSIGNMENT 3"></a>ASSIGNMENT 3</h3><p>Please read the entire PDF before starting. You must do this assignment individually.</p><p>It is very important that you follow the directions as closely as possible. The directions, while perhaps tedious, are designed to make it as easy as possible for the TAs to mark the assignments by letting them run your assignment, in some cases through automated tests. While these tests will never be used to determine your entire grade, they speed up the process significantly, which allows the TAs to provide better  feedback and not waste time on administrative details. Plus, if the TA is in a good mood while he or she is grading, then that increases the chance of them giving out partial marks. :)</p><p>Up to 30% can be removed for bad indentation of your code as well as omitting comments, or poor coding structure.</p><p>To get full marks, you must:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Follow <span class="keyword">all</span> directions below</span><br></pre></td></tr></table></figure><ul><li>In particular, make sure that all file names, and function names arespelled exactlyas described<br>  in this document. Otherwise, you might lose all points associated with that module/function.<br>Make sure that your code runs.</li><li>Code with errors will receive a very low mark.<br>Write your name and student ID as a comment in all .py files you hand in<br>Name your variables appropriately</li><li>The purpose of each variable should be obvious from the name<br>Comment your work</li><li>A comment every line is not needed, but there should be enough comments to fully understand your program<br>Avoid writing repetitive code, but rather call helper functions! You are welcome to add additional functions if you think this can increase the readability of your code.<br>Lines of code should NOT require the TA to scroll horizontally to read the whole thing. Vertical spacing is also important when writing code. Separate each block of code (also within a function) with an empty line.</li></ul><h2 id="Part-1-0-points-Warm-up"><a href="#Part-1-0-points-Warm-up" class="headerlink" title="Part 1 (0 points): Warm-up"></a>Part 1 (0 points): Warm-up</h2><p>DoNOTsubmit this part, as it will not be graded. However, doing these exercises might help you to do the second part of the assignment, which will be graded. If you have difficulties with the questions of Part 1, then we suggest that you consult the TAs during their office hours; they can help you and work with you through the warm-up questions. You are responsible for knowing all of the material in these questions.</p><p>Warm-up Question 1 (0 points)<br>Write a functiongetlargestsublistwhich takes as input a list of lists and returns the length of the largest sublist. For example,</p><blockquote><blockquote><blockquote><p>get_largest_sublist([[‘cat’], [1, 5, True], [5.3, False]])<br>3</p></blockquote></blockquote></blockquote><p>Warm-up Question 2 (0 points)<br>Write a functionsameelementswhich takes as input a two dimensional list and returns true if all the elements in each sublist are the same, false otherwise. For example,</p><blockquote><blockquote><blockquote><p>same_elements([[1, 1, 1], [‘a’, ‘a’], [6]])<br>True<br>same_elements([[1, 6, 1], [6, 6]])<br>False</p></blockquote></blockquote></blockquote><p>Warm-up Question 3 (0 points)<br>Write a functionflattenlistwhich takes as input a two dimensional list and returns a one dimensional list containing all the elements of the sublists. For example,</p><blockquote><blockquote><blockquote><p>flatten_list([[1, 2], [3], [‘a’, ‘b’, ‘c’]])<br>[1, 2, 3, ‘a’, ‘b’, ‘c’]<br>flatten_list([[]])<br>[]</p></blockquote></blockquote></blockquote><p>Warm-up Question 4 (0 points)<br>Complete the case study on multidimensional lists presented in class on Tuesday Feb. 25th. You can find the instructions on myCourses.</p><p>Warm-up Question 5 (0 points)<br>Write a functiongetmostvaluablekeywhich takes as input a dictionary mapping strings to integers.<br>The function returns the key which is mapped to the largest value. For example,</p><blockquote><blockquote><blockquote><p>get_most_valuable_key({‘a’ : 3, ‘b’: 6, ‘g’: 0, ‘q’: 9})<br>‘q’</p></blockquote></blockquote></blockquote><p>Warm-up Question 6 (0 points)<br>Write a functionadddictswhich takes as input two dictionaries mapping strings to integers. The function returns a dictionary which is a result of merging the two input dictionary, that is if a key is in both dictionaries then add the two values.</p><blockquote><blockquote><blockquote><p>d1 = {‘a’:5, ‘b’:2, ‘d’:-1}<br>d2 = {‘a’:7, ‘b’:1, ‘c’:5}<br>add_dicts(d1, d2) == {‘a’: 12, ‘b’: 3, ‘c’: 5, ‘d’: -1}<br>True</p></blockquote></blockquote></blockquote><p>Warm-up Question 7 (0 points)<br>Create a functionreversedictwhich takes as input a dictionarydand returns a dictionary where the values indare now keys mapping to a list containing all the keys indwhich mapped to them. For example,</p><blockquote><blockquote><blockquote><p>a = reverse_dict({‘a’: 3, ‘b’: 2, ‘c’: 3, ‘d’: 5, ‘e’: 2, ‘f’: 3})<br>a == {3 : [‘a’, ‘c’, ‘f’], 2 : [‘b’, ‘e’], 5 : [‘d’]}<br>True<br>Note that the order of the elements in the list might not be the same, and that’s ok!</p></blockquote></blockquote></blockquote><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p>The questions in this part of the assignment will be graded.<br>The main learning objectives for this assignment are:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Apply what you have learned about list, <span class="literal">one</span> dimensional <span class="keyword">or</span> multidimensional.</span><br><span class="line">Apply what you have learned about dictionaries.</span><br><span class="line">Understand how <span class="built_in">to</span> test functions that <span class="literal">return</span> dictionaries <span class="keyword">or</span> might contain randomness.</span><br><span class="line">Solidify your understanding <span class="keyword">of</span> working <span class="keyword">with</span> loops <span class="keyword">and</span> strings.</span><br><span class="line">Create <span class="keyword">a</span> more complex program which consists <span class="keyword">of</span> several modules.</span><br><span class="line">Understand how <span class="built_in">to</span> <span class="built_in">write</span> <span class="keyword">a</span> docstring <span class="keyword">and</span> use doctest when working <span class="keyword">with</span> dictionaries.</span><br><span class="line">Learn <span class="built_in">to</span> identify when <span class="keyword">using</span> <span class="keyword">the</span> functionenumeratecan help you <span class="built_in">write</span> <span class="keyword">a</span> cleaner code.</span><br></pre></td></tr></table></figure><p>Note that, as always, assignments are designed for you to be practicing what you have learned in class.<br>You can fully complete the assignment using material covered in class up to Tuesday March 10th. You are welcome to include any of the material covered also in later classes if you wish.You are NOT allowed to use what we have not seen in class (for example, you cannot use list or dictionary comprehension). You will be heavily penalized if you do so.</p><p>For full marks, make sure to add the appropriate documentation string (docstring) toallthe functions you write. The docstring must contain the following:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The<span class="built_in"> type </span>contract of the function.</span><br><span class="line">A brief description of what the function is expected <span class="keyword">to</span> <span class="keyword">do</span>.</span><br><span class="line">At least 3 examples of calls <span class="keyword">to</span> the function. Make sure <span class="keyword">to</span> include examples <span class="keyword">for</span> the different scenarios including edge cases <span class="keyword">if</span> needed. You are allowed <span class="keyword">to</span> useat mostone example per function <span class="keyword">from</span> this pdf.</span><br></pre></td></tr></table></figure><p>Please note that all the examples are given as if you were to call the functions from the shell.</p><p>Question 1: Simplified Scrabble (100 points)<br>Scrabble is a “board-and-tile game in which two to four players compete in forming words with lettered tiles on a 225-square board; words spelled out by letters on the tiles interlock like words in a crossword<br>puzzle.”^1<br>For this assignment, you will be implementing all the functions needed to build a simplified version of scrabble. Let’s first start by setting up some basic terminology:<br>The game is played with oneboardand severaltiles.</p><ul><li>Tiles represents single letters.</li><li>In a standard game of scrabble, the board has 225squares.<br>Each player has arackon which they keep their tiles.<br>Tiles are drawn from apoolwhich at the beginning contains all the tiles in the game (in a standard<br>game of scrabble there are 100 tiles).<br>Each letter has a value associated to it which is used to determine thescoreassociated to a word.<br>When a player places tiles on the board, they’ll create amain wordand some possiblehook words.<br>Hook wordsin scrabble are words which can be formed from another word by adding a single<br>letter at either the beginning or the end.</li></ul><p>(^1) <a href="https://www.britannica.com/sports/Scrabble" target="_blank" rel="noopener">https://www.britannica.com/sports/Scrabble</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If <span class="keyword">the</span> <span class="keyword">words</span> generated <span class="keyword">by</span> <span class="keyword">the</span> player are valid, <span class="keyword">the</span> player receives <span class="keyword">a</span> <span class="built_in">number</span> <span class="keyword">of</span> points equivalent <span class="built_in">to</span> <span class="keyword">the</span> score <span class="keyword">of</span> all <span class="keyword">the</span> <span class="built_in">new</span> <span class="keyword">words</span> they have created. This <span class="built_in">include</span> <span class="keyword">the</span> score <span class="keyword">of</span> <span class="keyword">the</span> main <span class="built_in">word</span> <span class="keyword">as</span> well <span class="keyword">as</span> <span class="keyword">any</span> hook <span class="built_in">word</span>.</span><br></pre></td></tr></table></figure><p>If you know how to play scrabble you will notice that the program you obtain at the end of the assignment<br>contains some simplifications such as:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">We <span class="built_in">do</span> <span class="keyword">not</span> consider blank tiles.</span><br><span class="line">We <span class="built_in">do</span> <span class="keyword">not</span> play <span class="keyword">with</span> <span class="keyword">a</span> board where certain squares amplify <span class="keyword">the</span> score <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">words</span>.</span><br><span class="line">We <span class="built_in">do</span> <span class="keyword">not</span> allow players <span class="built_in">to</span> challenge other players.</span><br><span class="line">We <span class="built_in">do</span> <span class="keyword">not</span> enforce <span class="keyword">the</span> fact that <span class="keyword">a</span> <span class="built_in">new</span> <span class="built_in">word</span> must be connected <span class="keyword">with</span> <span class="keyword">the</span> cluster <span class="keyword">of</span> tiles already <span class="keyword">on</span></span><br><span class="line"><span class="keyword">the</span> board. A <span class="built_in">new</span> <span class="built_in">word</span> can be added anywhere <span class="keyword">on</span> <span class="title">the</span> <span class="title">board</span>.</span><br></pre></td></tr></table></figure><p>Note that, adding the features above would not make the assignment more conceptually difficult, but it would make it much longer. This is why we decided to implement a simplified version of the game.</p><p>For this assignment, you are asked to write three modules with several functions which, together with the module provided by us, create a program that allows you to play a simplified version of scrabble on<br>your computers.</p><p>The board (30 points)</p><p>Let’s start by creating a module calledboardutilswhich contains several helper functions needed to implements a scrabble board. For full marks, all the following functions must be part of this module:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create_board: This function takes as input two integers representing the number of rows and</span><br><span class="line">columns respectively. The function returns a two dimensional list of strings, where all the elements of</span><br><span class="line">the sublists are strings containing only the space character.We indicate <span class="keyword">with</span> a <span class="keyword">space</span> <span class="built_in">character</span></span><br><span class="line">an <span class="keyword">empty</span> <span class="keyword">square</span> <span class="keyword">on</span> the board.The <span class="keyword">function</span> should <span class="keyword">raise</span> aValueErrorif the inputs <span class="keyword">are</span> <span class="keyword">not</span></span><br><span class="line"><span class="keyword">both</span> positive integers. <span class="keyword">For</span> example,</span><br><span class="line">&gt;&gt;&gt; create_board(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">[[<span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>], [<span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>], [<span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>]]</span><br><span class="line">&gt;&gt;&gt; create_board(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">[[<span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>], [<span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>]]</span><br><span class="line">&gt;&gt;&gt; create_board(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">ValueError: Inputs must be positive</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">display_board: This function takes a two dimensional <span class="built_in">list</span> <span class="keyword">of</span> strings <span class="keyword">as</span> input representing a board.</span><br><span class="line">From now <span class="keyword">on</span>, <span class="keyword">if</span> we <span class="built_in">say</span> <span class="keyword">that</span> a <span class="built_in">list</span> represents a board, you can assume <span class="keyword">that</span> <span class="keyword">it</span> <span class="keyword">is</span> a rectangular <span class="built_in">list</span></span><br><span class="line">(all sublists are <span class="keyword">of</span> <span class="keyword">the</span> same size), <span class="keyword">that</span> both dimensions are positive, <span class="keyword">and</span> <span class="keyword">that</span> all <span class="keyword">the</span> elements <span class="keyword">of</span></span><br><span class="line"><span class="keyword">the</span> sublists are strings <span class="keyword">with</span> exactly one <span class="built_in">character</span>. The function displays <span class="keyword">the</span> board, one row per</span><br><span class="line">line, <span class="keyword">as</span> follows:</span><br><span class="line">&gt;&gt;&gt; b = create_board(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt; display_board(b)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line"><span class="number">0</span> | | | |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> | | | |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line"><span class="number">2</span> | | | |</span><br><span class="line">+<span class="comment">-----------+</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; b = [[<span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>], [<span class="string">' '</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'t'</span>, <span class="string">'s'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; display_board(b)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">+-------------------+</span><br><span class="line"><span class="number">0</span> <span class="params">| |</span> <span class="params">| |</span> <span class="params">| |</span></span><br><span class="line">+-------------------+</span><br><span class="line"><span class="number">1</span> <span class="params">| |</span> C <span class="params">| A |</span> T <span class="params">| S |</span></span><br><span class="line">+-------------------+</span><br><span class="line">To get full <span class="symbol">marks:</span></span><br></pre></td></tr></table></figure><ul><li>The numbers indicating the column number must be displayed at the top.</li><li>The numbers indicating the row number must be displayed on the left.</li><li>For each row, the elements of the corresponding sublist must be displayed in the correct order.<br>It does not matter whether you capitalize the letters or if the board looks exactly like the one above.</li></ul><p>get_vertical_axis: This function takes as input a two dimensional list of strings representing a<br>board, and an integer representing the number of a column. The function returns a list of strings<br>containing all the elements from the board on the specified column. For example,</p><blockquote><blockquote><blockquote><p>b = [[‘c’, ‘a’, ‘t’, ‘ ‘], [‘ ‘, ‘a’, ‘r’, ‘t’], [‘ ‘, ‘ ‘, ‘a’, ‘ ‘], \<br>[‘ ‘, ‘ ‘, ‘i’, ‘ ‘], [‘ ‘, ‘ ‘, ‘n’, ‘ ‘]]<br>get_vertical_axis(b, 2)<br>[‘t’, ‘r’, ‘a’, ‘i’, ‘n’]</p></blockquote></blockquote></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; get_vertical_axis(b, <span class="number">0</span>)</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>]</span><br></pre></td></tr></table></figure><p>find_word: This function takes as input a list of strings and an integeri. It returns the string built<br>by concatenating the sequence of consecutive strings from the list that are not the space characters.<br>This sequence must include the string in positioni. The function returns the empty string if in<br>positionithere is a space character. For example,</p><blockquote><blockquote><blockquote><p>find_word([‘ ‘, ‘c’, ‘a’, ‘t’, ‘ ‘], 1)<br>‘cat’</p></blockquote></blockquote></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; find_word([<span class="string">' '</span>, <span class="string">'squi'</span>, <span class="string">''</span>, <span class="string">'rre'</span>, <span class="string">'l'</span>], <span class="number">2</span>)</span><br><span class="line"><span class="string">'squirrel'</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; find_word([<span class="string">' '</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'t'</span>, <span class="string">' '</span>, <span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>], <span class="number">7</span>)</span><br><span class="line"><span class="string">'apple'</span></span><br></pre></td></tr></table></figure><p>available_space: This function takes as input a list of strings which represents a row/column of<br>the board and an integeri. It returns the number ofempty squareson the row/column starting<br>from positioni. For example,</p><blockquote><blockquote><blockquote><p>r = [‘a’, ‘ ‘, ‘ ‘, ‘b’, ‘ ‘]<br>available_space(r, 1)<br>3</p></blockquote></blockquote></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = [<span class="string">'a'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'b'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'c'</span>, <span class="string">' '</span>, <span class="string">' '</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; available_space(r, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = [<span class="string">'a'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'b'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'c'</span>, <span class="string">' d'</span>, <span class="string">' '</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; available_space(r, <span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fit_on_board: This <span class="function"><span class="keyword">function</span> <span class="title">takes</span> <span class="title">as</span> <span class="title">input</span> <span class="title">a</span> <span class="title">list</span> <span class="title">of</span> <span class="title">strings</span> <span class="title">representing</span> <span class="title">a</span> <span class="title">row</span>/<span class="title">col</span> <span class="title">on</span> <span class="title">the</span> <span class="title">board</span>,</span></span><br><span class="line"><span class="keyword">a</span> stringletters, <span class="keyword">and</span> <span class="keyword">an</span> integeri. It returns <span class="literal">true</span> <span class="keyword">if</span> <span class="keyword">the</span> square <span class="keyword">in</span> positioniis <span class="literal">empty</span> <span class="keyword">and</span> <span class="keyword">if</span> there</span><br><span class="line">is enough <span class="literal">space</span> <span class="keyword">on</span> <span class="title">the</span> <span class="title">board</span> <span class="title">to</span> <span class="title">fit</span> <span class="title">all</span> <span class="title">the</span> <span class="title">characters</span> <span class="title">inlettersstarting</span> <span class="title">from</span> <span class="title">positioni</span>, <span class="title">false</span></span><br><span class="line">otherwise. Note that <span class="keyword">each</span> square <span class="keyword">on</span> <span class="title">the</span> <span class="title">board</span> <span class="title">can</span> <span class="title">contain</span> <span class="title">at</span> <span class="title">most</span> <span class="title">one</span> <span class="title">letter</span>. <span class="title">This</span> <span class="title">function</span> <span class="title">should</span></span><br><span class="line">notmodify <span class="keyword">the</span> input list. For example,</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span> = [<span class="string">'a'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'b'</span>, <span class="string">' '</span>]</span><br><span class="line">&gt;&gt;&gt; fit_on_board(<span class="keyword">a</span>, <span class="string">'cat'</span>, <span class="number">1</span>)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a = [<span class="string">'a'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'b'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'c'</span>, <span class="string">' '</span>, <span class="string">' '</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fit_on_board(a, <span class="string">'apple'</span>, <span class="number">4</span>)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a = [<span class="string">'a'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'b'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'c'</span>, <span class="string">' d'</span>, <span class="string">' '</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fit_on_board(a, <span class="string">'pear'</span>, <span class="number">3</span>)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>Tiles and Words (35 points)</p><p>Let’s now create a module calleddictsutils. In this module you will write several helper functions<br>that we’ll use to implement the part of scrabble in which we need to validate words and compute their<br>score.</p><p>In this module all your functions work with dictionaries. Remember that the order of the keys in a<br>dictionary is not something that Python fixes. This means that if you have a doctest where the output<br>is a dictionary, you could sometime “fail” the doctest even if your code is correct. This might happen<br>simply because the keys are displayed in a different order than you expected. To write doctests that will<br>consistently pass, you can instead test properties of a dictionary. For example:</p><blockquote><blockquote><blockquote><p>dict = {‘d’: 1, ‘a’: 4, ‘b’: 2}<br>len(dict)<br>3<br>dict[‘a’]<br>4<br>dict[‘b’]<br>2<br>sum(dict.values())<br>7<br>sorted(dict.values())<br>[1, 2, 4]<br>dict == {‘a’: 4, ‘b’: 2, ‘d’: 1}<br>True</p></blockquote></blockquote></blockquote><p>For full marks, all the following functions must be part of this module:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count_occurrence<span class="variable">s:</span> This <span class="function"><span class="keyword">function</span> <span class="title">takes</span> <span class="title">as</span> <span class="title">input</span> <span class="title">a</span> <span class="title">string</span>. <span class="title">It</span> <span class="title">returns</span> <span class="title">a</span> <span class="title">dictionary</span> <span class="title">mapping</span> <span class="title">char</span>-</span></span><br><span class="line">acters <span class="keyword">to</span> integers. The <span class="built_in">keys</span> in the dictionary are the characters from the <span class="built_in">input</span> <span class="built_in">string</span>, the <span class="built_in">values</span></span><br><span class="line">represent the <span class="keyword">number</span> of occurrences of those characters in the <span class="built_in">input</span> <span class="built_in">string</span>. For example,</span><br><span class="line">&gt;&gt;&gt; d = count_occurrences(<span class="string">'banana'</span>)</span><br><span class="line">&gt;&gt;&gt; d == &#123;<span class="string">'b'</span>:<span class="number">1</span>, <span class="string">'a'</span>:<span class="number">3</span>, <span class="string">'n'</span>:<span class="number">2</span>&#125;</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>flatten_dict: This function takes as input a dictionary where all the values are non-negative<br>integers. It returns a list containing the keys in the dictionary. Each key should appear in the<br>list as many times as the value associated to such key. The function shouldnotmodify the input<br>dictionary. For example,</p><blockquote><blockquote><blockquote><p>d = {‘a’ : 2, ‘f’ : 1, ‘k’ : 5}<br>flatten_dict(d)<br>[‘a’, ‘a’, ‘f’, ‘k’, ‘k’, ‘k’, ‘k’, ‘k’]</p></blockquote></blockquote></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'cat'</span>: <span class="number">2</span>, <span class="string">'dog'</span>: <span class="number">0</span>, <span class="string">'bunny'</span> : <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; flatten_dict(d)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'cat'</span>, <span class="string">'bunny'</span>, <span class="string">'bunny'</span>, <span class="string">'bunny'</span>]</span><br><span class="line">Note that the order of the elements <span class="keyword">in</span> the list does <span class="keyword">not</span> matter. It is possible that your code is</span><br><span class="line">correct, but you still fail the doctest above. To write a doctest that will consistently pass, you</span><br><span class="line">should instead test properties about the list. For example,</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'cat'</span>: <span class="number">2</span>, <span class="string">'dog'</span>: <span class="number">0</span>, <span class="string">'bunny'</span> : <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; animals = flatten_dict(d)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; animals.count(<span class="string">'cat'</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; animals.count(<span class="string">'bunny'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; animals.count(<span class="string">'dog'</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; animals.sort()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; animals</span><br><span class="line">[<span class="string">'bunny'</span>, <span class="string">'bunny'</span>, <span class="string">'bunny'</span>, <span class="string">'cat'</span>, <span class="string">'cat'</span>]</span><br></pre></td></tr></table></figure><p>get_word_score: This function takes as input a string and a dictionary mapping characters to<br>integers representing the number of points each character is worth. If a given character is not a<br>key in the input dictionary, then you should assume that such character is worth 0 points. The<br>function returns the score of a word (the input string) computed by summing together the value of<br>each character in the word. For example,</p><blockquote><blockquote><blockquote><p>v = {‘a’: 5, ‘t’: 3, ‘n’: -2}<br>get_word_score(‘cat’, v)<br>8</p></blockquote></blockquote></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; get_word_score(<span class="string">'banana'</span>, v)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; v = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; get_word_score(<span class="string">'banana'</span>, v)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>is_subset: This function takes as input two dictionaries where all the values are non-negative<br>integers. It returns true if the first dictionary can be considered to be a subset of the second one.<br>We consider a dictionarydto be a subset of another dictionarybif all the keys indare keys in<br>band the value associated to each key indis smaller than or equal to the value associated to the<br>same key inb. The function shouldnotmodify the input dictionaries. For example,</p><blockquote><blockquote><blockquote><p>a = {‘a’: 2, ‘c’: 1}<br>b = {‘a’: 2, ‘b’: 1, ‘c’: 2}<br>c = {‘a’: 1, ‘c’: 3}</p></blockquote></blockquote></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; is_subset(a, b)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; is_subset(b, a)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; is_subset(a, c)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>subtract_dicts: This function takes as input two dictionariesd1andd2where all the values are<br>non-negative integers. Ifd2is a subset ofd1, then the function updatesd1by replacing the values<br>associated to the common keys with the difference between the original value ind1and the value in<br>d2. Otherwise,d1remains as is. The function returns true ifd2was a subset ofd1, false otherwise.<br>Note that the function shouldnotmodifyd2. For example,</p><blockquote><blockquote><blockquote><p>a = {‘a’: 2, ‘c’: 1}<br>b = {‘a’: 2, ‘b’: 1, ‘c’: 2}<br>c = {‘a’: 5, ‘b’: 3}</p></blockquote></blockquote></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">subtract_dicts(b,</span> <span class="string">a)</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">b</span> <span class="string">==</span> <span class="string">&#123;'b':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'c':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">subtract_dicts(c,</span> <span class="string">a)</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">c</span> <span class="string">==</span> <span class="string">&#123;'a':</span> <span class="number">5</span><span class="string">,</span> <span class="attr">'b':</span> <span class="number">3</span><span class="string">&#125;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>create_scrabble_dict: This function takes as input a list of strings. It returns a dictionary that maps integers representing the number of characters in a word to a dictionary of words with the specified length. The latter maps a single letter to a list of words beginning with such letter. For example,</p><blockquote><blockquote><blockquote><p>w = [‘aa’, ‘qi’, ‘za’, ‘cat’, ‘can’, ‘cow’, ‘dog’, ‘dad’, ‘hippo’, ‘umami’, ‘uncle’]<br>d = create_scrabble_dict(w)<br>d == {2 : {‘a’: [‘aa’], ‘q’: [‘qi’], ‘z’: [‘za’]}, 3 : {‘c’: [‘cat’, ‘can’, ‘cow’], \<br>‘d’: [‘dog’, ‘dad’]}, 5 : {‘h’: [‘hippo’], ‘u’ : [‘umami’, ‘uncle’] }}<br>True</p></blockquote></blockquote></blockquote><p>is_valid_word: This function takes as input a string and a dictionary. The dictionary has the same format as the one returned by the functioncreate_scrabble_dict. This function returns true if the input string appears in the dictionary, false otherwise. For example,</p><blockquote><blockquote><blockquote><p>w = [‘aa’, ‘qi’, ‘za’, ‘cat’, ‘can’, ‘cow’, ‘dog’, ‘dad’, ‘hippo’, ‘umami’, ‘uncle’]<br>d = create_scrabble_dict(w)<br>is_valid_word(‘hippo’, d)<br>True</p></blockquote></blockquote></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; is_valid_word(<span class="string">'zebra'</span>, d)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; is_valid_word(<span class="string">'pear'</span>, d)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>Scrabble helpers (35 points)</p><p>Finally, let’s create a module calledscrabbleutils. In this module you will write several functions that we’ll use to implement the general mechanics of a game of scrabble.</p><p>We will represent a player’srackwith a dictionary mapping single letter strings to non-negative integers. Letrbe such dictionary, andcbe a string containing one single letter. Thenr[c]denotes how many tileswith lettercare on the rack. We’ll use a similar dictionary also to represent thepoolfrom which players draw their tiles.</p><p>For full marks, all the following functions must be part of this module:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">display_rack: This <span class="keyword">function</span> takes as input a dictionary representing the rack <span class="keyword">of</span> a player (see</span><br><span class="line">description above). The <span class="keyword">function</span> displays one line containing the letters <span class="literal">that</span> are <span class="literal">on</span> the rack using</span><br><span class="line">upper <span class="keyword">case</span>. For example,</span><br><span class="line">&gt;&gt;&gt; display_rack(&#123;<span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'f'</span>: <span class="number">1</span>, <span class="string">'g'</span>: <span class="number">2</span>, <span class="string">'o'</span>: <span class="number">1</span>, <span class="string">'z'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">A A F G G O Z</span><br></pre></td></tr></table></figure><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; display_rack(&#123;<span class="string">'g'</span>: <span class="number">2</span>, <span class="string">'k'</span>: <span class="number">0</span>, <span class="string">'p'</span>: <span class="number">4</span>&#125;)</span><br><span class="line">G G <span class="keyword">P</span> <span class="keyword">P</span> <span class="keyword">P</span> <span class="keyword">P</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">has_letters:</span> <span class="string">This</span> <span class="string">function</span> <span class="string">takes</span> <span class="string">as</span> <span class="string">input</span> <span class="string">a</span> <span class="string">dictionary</span> <span class="string">representing</span> <span class="string">the</span> <span class="string">rack</span> <span class="string">of</span> <span class="string">a</span> <span class="string">player</span> <span class="string">(see</span></span><br><span class="line"><span class="string">description</span> <span class="string">above),</span> <span class="string">and</span> <span class="string">a</span> <span class="string">string.</span> <span class="string">The</span> <span class="string">function</span> <span class="string">returns</span> <span class="literal">true</span> <span class="string">if</span> <span class="string">all</span> <span class="string">the</span> <span class="string">characters</span> <span class="string">in</span> <span class="string">the</span> <span class="string">input</span> <span class="string">string</span></span><br><span class="line"><span class="string">are</span> <span class="string">available</span> <span class="string">on</span> <span class="string">the</span> <span class="string">rack</span> <span class="string">and</span> <span class="string">if</span> <span class="string">so,</span> <span class="string">it</span> <span class="string">removes</span> <span class="string">those</span> <span class="string">letters</span> <span class="string">from</span> <span class="string">the</span> <span class="string">rack.</span> <span class="string">Otherwise,</span> <span class="string">the</span> <span class="string">function</span></span><br><span class="line"><span class="string">returns</span> <span class="literal">false</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">modify</span> <span class="string">the</span> <span class="string">rack.</span> <span class="string">For</span> <span class="string">example,</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span> <span class="string">=</span> <span class="string">&#123;'a':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'c':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'i':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'r':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">has_letters(r,</span> <span class="string">'cat'</span><span class="string">)</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span> <span class="string">==</span> <span class="string">&#123;'a':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'i':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'r':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span> <span class="string">=</span> <span class="string">&#123;'a':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'c':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'i':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'r':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">has_letters(r,</span> <span class="string">'tiara'</span><span class="string">)</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span> <span class="string">==</span> <span class="string">&#123;'i':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'c':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span> <span class="string">=</span> <span class="string">&#123;'a':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'c':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'i':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'r':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">has_letters(r,</span> <span class="string">'track'</span><span class="string">)</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span> <span class="string">==</span> <span class="string">&#123;'a':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'c':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'i':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'r':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">has_letters(r,</span> <span class="string">'tract'</span><span class="string">)</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span> <span class="string">==</span> <span class="string">&#123;'a':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'c':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'i':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'r':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">refill_rack: This function takes as input two dictionaries (one representing the rack of a player,</span><br><span class="line">the other representing the<span class="built_in"> pool </span>of letters, respectively) <span class="keyword">and</span> a positive integern. The function draws</span><br><span class="line">letters at random <span class="keyword">from</span> the<span class="built_in"> pool </span><span class="keyword">and</span> adds them <span class="keyword">to</span> the rack until there are eithernletters on the</span><br><span class="line">rack <span class="keyword">or</span> <span class="literal">no</span> more letters <span class="keyword">in</span> the pool. The function does <span class="keyword">not</span> return anything <span class="keyword">and</span> it might modify</span><br><span class="line">both input dictionaries. <span class="keyword">For</span> example,</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">random.seed(5)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r1</span> <span class="string">=</span> <span class="string">&#123;'a':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'k':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">b</span> <span class="string">=</span> <span class="string">&#123;'a':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'e':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'h':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'l':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'n':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'p':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'s':</span> <span class="number">3</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'z':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">refill_rack(r1,</span> <span class="string">b,</span> <span class="number">7</span><span class="string">)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span></span><br><span class="line"><span class="string">&#123;'a':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'k':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'s':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'l':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'n':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">b</span></span><br><span class="line"><span class="string">&#123;'a':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'e':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'h':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'l':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'p':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'s':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'z':</span> <span class="number">1</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r2</span> <span class="string">=</span> <span class="string">&#123;'e':</span> <span class="number">3</span><span class="string">,</span> <span class="string">'q'</span> <span class="string">:</span> <span class="number">1</span><span class="string">,</span> <span class="string">'r'</span> <span class="string">:</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">refill_rack(r2,</span> <span class="string">b,</span> <span class="number">8</span><span class="string">)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span></span><br><span class="line"><span class="string">&#123;'e':</span> <span class="number">3</span><span class="string">,</span> <span class="attr">'q':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'r':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'z':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'s':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'a':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">b</span></span><br><span class="line"><span class="string">&#123;'e':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'h':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'l':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'p':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'s':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">refill_rack(r2,</span> <span class="string">b,</span> <span class="number">5</span><span class="string">)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">r</span></span><br><span class="line"><span class="string">&#123;'e':</span> <span class="number">3</span><span class="string">,</span> <span class="attr">'q':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'r':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'z':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'s':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'a':</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">b</span></span><br><span class="line"><span class="string">&#123;'e':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'h':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'l':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'p':</span> <span class="number">2</span><span class="string">,</span> <span class="attr">'s':</span> <span class="number">1</span><span class="string">,</span> <span class="attr">'t':</span> <span class="number">1</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Note that you can use the functionrandom.choiceto selected a random element out of a list. Note</span><br><span class="line">also that <span class="keyword">if</span> <span class="keyword">in</span> the<span class="built_in"> pool </span>there are five a’s <span class="keyword">and</span> one b, then the probability of drawing an a should be</span><br><span class="line">5 times larger than the probability of drawing the b.</span><br></pre></td></tr></table></figure><p>compute_score: This function takes as input a list of strings, a dictionary mapping letters to integers representing the number of points each letter is worth, and a dictionary representing valid words<br>(with the same format as the one returned by the functiondicts_utils.create_scrabble_dict).<br>The function returns the score obtained by summing together the score of each word from the input list. If any of the words in the list is not valid, then the total score should be 0. For example,</p><blockquote><blockquote><blockquote><p>v = {‘a’: 1, ‘p’: 3, ‘h’: 2}<br>w = [‘aa’, ‘qi’, ‘za’, ‘cat’, ‘can’, ‘cow’, ‘dog’, ‘dad’, ‘hippo’, ‘umami’, ‘uncle’]<br>d = dicts_utils.create_scrabble_dict(w)</p></blockquote></blockquote></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; compute_score([<span class="string">'hippo'</span>, <span class="string">'aa'</span>], v, d)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; compute_score([<span class="string">'umami'</span>, <span class="string">'zebra'</span>], v, d)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; compute_score([<span class="string">'qi'</span>], v, d)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>NOTE: this function is the most logically difficult in the entire assignment. Do not feel discouraged if you do not know how to tackle it right away. Make sure to follow the discussion board on Piazza and add any questions you might have on the board. We suggest you try to first figure out how to solve this task on paper. Try to break down every single action you take (as a human) to perform this task. Then think about how to translate these actions into code. place_tiles: This function takes as input a two dimensional list representing the board, a string representing the letters the player wants to add to the board, two integers representing the row and the column number (respectively) of the starting square, and finally a string indicating the</p><p>direction to take when placing the letters on the board (either ‘down’ or ‘right’). The function adds the letters received as input to the board given a starting position, and a direction. It returns a list<br>of words created by adding those letters to the board. This list will contain the main word as well as any hook word generated. The order of the elements in this list does not matter. Note that the function should modify the input list, unless the direction provided is not equal to neither ‘down’ nor ‘right’. In such case, the function returns an empty list.In this function, you can assume that the starting square is empty and that the provided letters will fit on the board.</p><p>Finally, note that it very tedious to write docstest usingdisplayboardsince they might fail for<br>very small details (one space too many or too few). We suggest you write the doctest using directly<br>the list. Below we opted for writing the examples displaying the board because the result is more<br>clear visually.</p><p>Here are some examples of using this function:</p><blockquote><blockquote><blockquote><p>b = [[‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘], [‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘], [‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘], \<br>[‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘], [‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘]]</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>place_tiles(b, ‘cat’, 0, 0, ‘right’)<br>[‘cat’]<br>board_utils.display_board(b)<br>0 1 2 3<br>+—————+<br>0 | C | A | T | |<br>+—————+<br>1 | | | | |<br>+—————+<br>2 | | | | |<br>+—————+<br>3 | | | | |<br>+—————+<br>4 | | | | |<br>+—————+</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>place_tiles(b, ‘rain’, 1, 2, ‘down’)<br>[‘train’]<br>board_utils.display_board(b)<br>0 1 2 3<br>+—————+<br>0 | C | A | T | |<br>+—————+<br>1 | | | R | |<br>+—————+<br>2 | | | A | |<br>+—————+<br>3 | | | I | |<br>+—————+<br>4 | | | N | |<br>+—————+</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>words = place_tiles(b, ‘at’, 1, 1, ‘right’)<br>words.sort()<br>words<br>[‘aa’, ‘art’]</p></blockquote></blockquote></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; board<span class="emphasis">_utils.display_</span>board(b)</span><br><span class="line">0 1 2 3</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">0 | C | A | T | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">1 | | A | R | T |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">2 | | | A | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">3 | | | I | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">4 | | | N | |</span><br><span class="line"><span class="code">+---------------+</span></span><br></pre></td></tr></table></figure><p>make_a_move: This function takes as input a list representing the board, a dictionary representing the player’s rack, a string representing the letters the player wants to place, two integers representing the row and the column number (respectively) of the starting square on the board, and a string representing a direction (either ‘down’ or ‘right’). If the direction received is neither ‘down’ nor ‘right’, the function terminates right away by returning an empty list. Otherwise, the function checks if this is a valid move: is there enough space on the board to place those letters? Does the player actually have those letters on their rack? If so, then the letters are place on the board and a list of words created by performing the move is returned. Otherwise, if the letters do not fit on the board, the function raises anIndexError. If they fit, but the player does not have those letters on their rack, then the function raises aValueError. If an error is raised, then neither the board nor the rack is modified. Otherwise, the letters will be removed from the rack and placed on the<br>board. For example,</p><blockquote><blockquote><blockquote><p>b = [[‘c’, ‘a’, ‘t’, ‘ ‘], [‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘], [‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘],\<br>[‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘], [‘ ‘, ‘ ‘, ‘ ‘, ‘ ‘]]<br>r = {‘a’: 3, ‘t’: 2, ‘c’ : 1, ‘r’ : 1, ‘i’ : 1, ‘n’ : 1}</p></blockquote></blockquote></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; make<span class="emphasis">_a_</span>move(b, r, <span class="emphasis">'rain'</span>, 1, 2, <span class="emphasis">'down'</span>)</span><br><span class="line"><span class="meta">['train']</span></span><br><span class="line">&gt;&gt;&gt; r == &#123;<span class="emphasis">'a'</span>: 2, <span class="emphasis">'t'</span> : 2, <span class="emphasis">'c'</span> : 1&#125;</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; board<span class="emphasis">_utils.display_</span>board(b)</span><br><span class="line">0 1 2 3</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">0 | C | A | T | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">1 | | | R | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">2 | | | A | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">3 | | | I | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">4 | | | N | |</span><br><span class="line"><span class="code">+---------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; words = make_a_move(b, r, <span class="string">'at'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'right'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; words.sort()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; words</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">['aa', 'art']</span></span><br><span class="line">&gt;&gt;&gt; r == &#123;<span class="emphasis">'a'</span>: 1, <span class="emphasis">'t'</span> : 1, <span class="emphasis">'c'</span> : 1&#125;</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; board<span class="emphasis">_utils.display_</span>board(b)</span><br><span class="line">0 1 2 3</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">0 | C | A | T | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">1 | | A | R | T |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">2 | | | A | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">3 | | | I | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">4 | | | N | |</span><br><span class="line"><span class="code">+---------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; make<span class="emphasis">_a_</span>move(b, r, <span class="emphasis">'cats'</span>, 0, 2, <span class="emphasis">'right'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">IndexError: Not enough space on the board.</span><br><span class="line">&gt;&gt;&gt; r == &#123;<span class="emphasis">'a'</span>: 1, <span class="emphasis">'t'</span> : 1, <span class="emphasis">'c'</span> : 1&#125;</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; board<span class="emphasis">_utils.display_</span>board(b)</span><br><span class="line">0 1 2 3</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">0 | C | A | T | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">1 | | A | R | T |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">2 | | | A | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">3 | | | I | |</span><br><span class="line"><span class="code">+---------------+</span></span><br><span class="line">4 | | | N | |</span><br><span class="line"><span class="code">+---------------+</span></span><br></pre></td></tr></table></figure><p>Scrabble</p><p>With this pdf you can also find a text file (words.txt) and Python file (scrabble.py). In the module provided we use the functions you have created, together with the text file provided to run a simplified<br>version of scrabble. Once you have finished the assignment, you can usescrabble.pyto test your functions and play as many games as you like. Make sure to save both the text file and the python file in the same<br>folder as all the others modules you have created. Note that you could have written the code provided on your own. The reason why we are providing this module is just to keep the assignment at reasonable<br>length.Disclaimer: the text file contains all valid scrabble words that have no more than 6 characters.<br>This means that if you end up creating a word which contains more than 6 character, the program will not give you any points for it because it will not recognize it as valid. Feel free to add more words to the text file if you’d like, or to use a different text file!</p><h2 id="What-To-Submit"><a href="#What-To-Submit" class="headerlink" title="What To Submit"></a>What To Submit</h2><p>You must submit all your files on codePost (<a href="https://codepost.io/)" target="_blank" rel="noopener">https://codepost.io/)</a>. The file you should submit are listed below. Any deviation from these requirements may lead to lost marks.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">board_utils.py</span><br><span class="line">dicts_utils.py</span><br><span class="line">scrabble_utils.py</span><br><span class="line">README.txtIn this <span class="built_in">file</span>, you can <span class="keyword">tell</span> <span class="keyword">the</span> TA <span class="keyword">about</span> any issues you ran <span class="keyword">into</span> doing this assignment.</span><br><span class="line">If you point out an <span class="keyword">error</span> <span class="keyword">that</span> you know occurs <span class="keyword">in</span> your program, <span class="keyword">it</span> may lead <span class="keyword">the</span> TA <span class="keyword">to</span> give you</span><br><span class="line">more partial credit.</span><br><span class="line">This <span class="built_in">file</span> <span class="keyword">is</span> also <span class="keyword">where</span> you should make note <span class="keyword">of</span> anybody you talked <span class="keyword">to</span> <span class="keyword">about</span> <span class="keyword">the</span> assignment.</span><br><span class="line">Remember this <span class="keyword">is</span> an individual assignment, <span class="keyword">but</span> you can talk <span class="keyword">to</span> other students using theGilligan’s</span><br><span class="line">Island Rule: you can’t take any notes/writing/code <span class="keyword">out of</span> <span class="keyword">the</span> discussion, <span class="keyword">and</span> afterwards you</span><br><span class="line">must do something inane like watch television <span class="keyword">for</span> <span class="keyword">at</span> least <span class="number">30</span> minutes.</span><br><span class="line">If you didn’t talk <span class="keyword">to</span> anybody nor have anything you want <span class="keyword">to</span> <span class="keyword">tell</span> <span class="keyword">the</span> TA, just <span class="built_in">say</span> “nothing <span class="keyword">to</span></span><br><span class="line">report” <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">file</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Python完成
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP202-A2</title>
    <link href="cplusplusdaixie.com/COMP202-A2.html"/>
    <id>cplusplusdaixie.com/COMP202-A2.html</id>
    <published>2023-06-16T01:38:12.000Z</published>
    <updated>2023-06-16T01:41:08.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ASSIGNMENT-2"><a href="#ASSIGNMENT-2" class="headerlink" title="ASSIGNMENT 2"></a>ASSIGNMENT 2</h3><h2 id="COMP-202"><a href="#COMP-202" class="headerlink" title="COMP 202"></a>COMP 202</h2><p>Please read the entire PDF before starting. You must do this assignment individually.</p><p>It is very important that you follow the directions as closely as possible. The directions, while perhaps tedious, are designed to make it as easy as possible for the TAs to mark the assignments by letting<br>them run your assignment, in some cases through automated tests. While these tests will never be used to determine your entire grade, they speed up the process significantly, which allows the TAs to provide better feedback and not waste time on administrative details. Plus, if the TA is in a good mood while he or she is grading, then that increases the chance of them giving out partial marks. :)</p><p>Up to 30% can be removed for bad indentation of your code as well as omitting comments, or poor coding<br>structure.</p><p>To get full marks, you must:</p><ul><li>Follow all directions below<ul><li>In particular, make sure that all file names, function names, and variable names arespelled exactlyas described in this document. Otherwise, a 50% penalty will be applied.</li></ul></li><li>Make sure that your code runs.<ul><li>Code with errors will receive a very low mark.</li></ul></li><li>Write your name and student ID as a comment in all .py files you hand in</li><li>Name your variables appropriately<ul><li>The purpose of each variable should be obvious from the name</li></ul></li><li>Comment your work<ul><li>A comment every line is not needed, but there should be enough comments to fully understand your program</li></ul></li><li>Avoid writing repetitive code, but rather call helper functions! You are welcome to add additional functions if you think this can increase the readability of your code.</li></ul><h2 id="Part-1-0-points-Warm-up"><a href="#Part-1-0-points-Warm-up" class="headerlink" title="Part 1 (0 points): Warm-up"></a>Part 1 (0 points): Warm-up</h2><p>DoNOTsubmit this part, as it will not be graded. However, doing these exercises might help you to do the second part of the assignment, which will be graded. If you have difficulties with the questions of Part 1, then we suggest that you consult the TAs during their office hours; they can help you and work with you through the warm-up questions. You are responsible for knowing all of the material in these questions.</p><p>Warm-up Question 1 (0 points)<br>Write a functionswapwhich takes as input two int valuesxandy. Your function should do 3 things:</p><ol><li>Print the value ofxandy</li><li>Swap the values of the variablesxandy, so that whatever was inxis now inyand whatever was inyis now inx</li><li>Print the value ofxandyagain.<br>For example, if your function is called as follows:swap(3,4)the effect of calling your method should be the following printing<br>inside swap: x is:3 y is:<br>inside swap: x is:4 y is:</li></ol><p>Warm-up Question 2 (0 points)<br>Consider the program you have just written. Create two global integer variables in the main body of your program. Call themxandy. Assign values to them and call the swap function you wrote in the previous part usingxandyas input parameters.<br>After calling theswap()function —inside the main body— print the values ofxandy. Are they different than before? Why or why not?</p><p>Warm-up Question 3 (0 points)<br>Create a function calledcountingthat takes as input a positive integer and counts up to that number.<br>For example:</p><blockquote><blockquote><blockquote><p>counting(10)<br>Counting up to 10: 1 2 3 4 5 6 7 8 9 10</p></blockquote></blockquote></blockquote><p>Warm-up Question 4 (0 points)<br>Modify the last function by adding an additional input that reprents the step size by which the function should be counting. For example:</p><blockquote><blockquote><blockquote><p>counting(25, 3)<br>Counting up to 25 with a step size of 3: 1 4 7 10 13 16 19 22 25</p></blockquote></blockquote></blockquote><p>Warm-up Question 5 (0 points)<br>Write a functionreplaceallwhich takes as input a string and two characters. If the second and third input string do not contain exactly one character the function should raise aValueError. Otherwise, the function returns the string composed by the same characters of the given string where all occurrences of the first given character are replaced by the second given character. For example, replaceall(“squirrel”, “r” , “s”)returns the string”squissel”, whilereplaceall(“squirrel”, “t”, “a”)returns the string”squirrel”. Do not use the methodreplaceto do this.</p><p>Warm-up Question 6 (0 points)<br>Write a module with the following global variables:<br>lower_alpha = “abcdefghijklmnopqrstuvwxyz”<br>upper_alpha = “ABCDEFGHIJKLMNOPQRSTUVWXYZ”<br>In this module write a functionmakelowerwhich takes a string as input and returns a string containing the same characters as the input string, but all in lower case. For example,makelower(“AppLE”) returns the string”apple”. Do not use the methodlowerto do this. Hint: note that characters from the English alphabet appear in the same position in the two global variables.</p><p>Warm-up Question 7 (0 points)<br>Create a function calledgeneraterandomlistwhich takes an input an integernand returns a list<br>containingnrandom integers between 0 and 100 (both included). Userandomto do this.</p><p>Warm-up Question 8 (0 points)<br>Write a functionsumnumberswhich takes as input a list of integers and returns the sum of the numbers in the list. Do not use the built-in functionsumto do this.</p><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p>The questions in this part of the assignment will be graded.<br>The main learning objectives for this assignment are:</p><ul><li>Correctly define and use simple functions.</li><li>Solidify your understanding of the difference betweenreturnandprint.</li><li>Generate and use random numbers inside a program.</li><li>Understand how to test functions that contain randomness</li><li>Correctly use loops and understand how to choose between a while and a for loop.</li><li>Solidify your understanding of how to work with strings: how to check for membership, how to access characters, how to build a string with accumulator patterns.</li><li>Begin to use very simple lists.</li><li>Create a program with more than one module.</li><li>Learn how to use functions you have created in a different module.</li></ul><p>Note that the assignment is designed for you to be practicing what you have learned in class up to Thursday<br>Feb 13th. For this reason,you are NOT allowedto use what we have not seen in class (for example, you cannot use dictionaries, or the built-in functionsordandchr). You will be heavily penalized if you do so.</p><p>For full marks on both questions, make sure to add the appropriate documentation string (docstring) toallthe functions you write. The docstring must contain the following:</p><ul><li>The type contract of the function.</li><li>A brief description of what the function is expected to do.</li><li>At least 3 examples of calls to the function. Make sure to include examples for the different scenarios<br>  including edge cases if needed. You are allowed to useat mostone example per function from this pdf.</li></ul><p>Please note that all the examples are given as if you were to call the functions from the shell.</p><p>Question 1: Craps (40 points)<br>Craps is a dice game where each player bets on the outcome of the dice rolls. The goal of this question is to write several functions in order to create a program that simulates the outcome of a Pass Line Bet (see<br>below) in a game of Craps. All the code for this question must be placed in a file nameddicegame.py.</p><h3 id="The-Pass-Line-Bet"><a href="#The-Pass-Line-Bet" class="headerlink" title="The Pass Line Bet"></a>The Pass Line Bet</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Craps is <span class="keyword">a</span> game <span class="keyword">of</span> rounds. The <span class="keyword">first</span> dice roll <span class="keyword">of</span> <span class="keyword">a</span> <span class="built_in">round</span> is called <span class="keyword">the</span> Come-out Roll. When <span class="keyword">a</span> player</span><br><span class="line">is making <span class="keyword">a</span> Pass Line Bet, they will place <span class="keyword">a</span> bet <span class="keyword">before</span> <span class="keyword">the</span> Come-Out Roll. Depending <span class="keyword">on</span> <span class="title">the</span> <span class="title">result</span> <span class="title">of</span></span><br><span class="line"><span class="keyword">the</span> roll, <span class="keyword">the</span> player might win, lose, <span class="keyword">or</span> go <span class="built_in">to</span> <span class="keyword">the</span> “next stage” <span class="keyword">of</span> <span class="keyword">the</span> game:</span><br></pre></td></tr></table></figure><ul><li>If a 7 or an 11 is rolled, then the player wins.</li><li>If a 2, 3, or 12 is rolled, then the player loses.</li><li>If any other number is rolled, the player must go to the next stage.<br>For the next stage, it is important to remember which number was rolled in the Come-Out Roll, this<br>number is called thepoint. In the second stage, the playerwill keep rolling the diceunless one of the<br>following happens:</li><li>A 7 is rolled, and the player loses the bet</li><li>Thepointis rolled again, and the player wins the bet</li></ul><p>The payout is 1:1: the players win as much as they bet. Thus, if the player bets $5 and wins they receive<br>an additional $5. If they lose, they lose the entire bet.</p><p>Let’s see a couple of examples:</p><ul><li>The result of the Come-Out Roll is a 3.→The player loses!</li><li>The result of the Come-Out Roll is a 5→The dice are rolled again until either a 7 or a 5 is rolled.<br>  Supposed that the results of the rolls are the following: 10, 11, 4, 7.→The player loses!</li><li>The result of the Come-Out Roll is a 9→The dice are rolled again until either a 7 or a 9 is rolled.<br>  Let the results of the rolls be as follow: 3, 5, 9.→The player wins!</li></ul><p>Now that we now how the game works, let’s see which functions we need to simulate the result of a Pass<br>Line bet in a game of Craps. Because this program simulates a game of dice, you will need to generate<br>random numbers. To achieve this, make sure to importrandomat the top of your file.</p><p>For full marks, all the following functions must be part of your program:</p><ul><li>dice_roll: In a game of Craps, players are betting on the outcome of a roll of two six-sided dice.<br>  Write a function calleddice_rollthat simulates the roll of two six-sided dice. Such function takes<br>  no input and returns an integer between 2 and 12 (included), which is the sum of the result of<br>  rolling two six-sided dice. Notice, that to simulate the roll of two six-sided dice, you will have to<br>  generate two random numbers between 1 and 6 (both included) and sum the results together. If<br>  you have any doubts on how to achieve this, review the slide from lecture 7. To be able to test the<br>  correctness of your function, we suggest you to fix a seed while testing the function.Do NOT use<br>  random.seedfrom within the functiondiceroll. Once you have created the function, if you<br>  test if from the shell you should see the following:<blockquote><blockquote><blockquote><p>random.seed(5)<br>dice_roll()<br>  8<br>dice_roll()<br>  9<br>random.seed(2)<br>dice_roll()<br>  2<br>dice_roll()<br>  4</p></blockquote></blockquote></blockquote></li><li>second_stage: This function simulates the second stage of the Pass Line Bet. It takes as input<br>  one integer value that corresponds to thepoint, the number rolled in the Come-Out Roll (either 4,<br>  5, 6, 8, 9, or 10), andreturnsan integer which will either be a 7 or the point itself depending on<br>  which one gets rolled first. The function should alsoprint(on the same line!) the result of all the<br>  dice rolls carried out before either a 7 or the point is rolled. For example,<blockquote><blockquote><blockquote><p>random.seed(5)<br>r = second_stage(6)<br>  8 9 12 11 5 8 3 4 6<br>r<br>  6<br>random.seed(789)<br>r = second_stage(8)<br>  10 7<br>r<br>  7<br>  Make sure to usedicerollto obtain the value of each roll.</p></blockquote></blockquote></blockquote></li></ul><ul><li>can_play: This function takes two floats as input and returns a boolean value. The first input<br>  value corresponds to the money the player has, the second corresponds to how much money the<br>  player would like to bet. A player is allowed to playonly ifthey bet more than $ 0.0, but not<br>  more than what they own. If the player is allowed to play, the functionreturnsTrue, otherwise it<br>  returnsFalse. For example,<blockquote><blockquote><blockquote><p>can_play(5.25, 5.0)<br>  True<br>can_play(0.0, 2.0)<br>  False<br>can_play(5.0, -3.0)<br>  False</p></blockquote></blockquote></blockquote></li><li>pass_line_bet: This function simulates what happens when a Pass Line Bet is placed. It takes<br>  two floats as input: the first one corresponds the total amount of money the player has, the second<br>  correspond to how much money the player decides to bet. You can assume that the given values are<br>  such that the player can play (see previous function). The function returns a float which corresponds<br>  to the amount of money the player has left after one round of Craps.<br>  The function shoulddisplaythe result of the Come-Out Roll (the first roll in a round of Craps) as<br>  well as what will happen next. Recall that the player wins with a 7 or 11, loses with a 2, 3, or 12,<br>  and moves to the second stage with any other number. Here are three possible statements that the<br>  function might display after the Come-Out Roll:<br>  A 7 has been rolled. You win!<br>  A 12 has been rolled. You lose!<br>  A 5 has been rolled. Roll again!<br>  If necessary, the function should simulate the second stage in order to determine whether the player<br>  wins or loses. If at the end of the second stage a 7 was rolled the functiondisplaysa statement<br>  informing the player they lost, if instead the point was rolled the functiondisplaysa statement<br>  informing the player they won.<br>  For full marks, you should usesecondstage, anddicerollin order to implement the simulation<br>  of a Pass Line Bet. Remember to return the amount of money the player has left depending on<br>  whether they won or lost the bet. For example,<blockquote><blockquote><blockquote><p>random.seed(5)<br>m = pass_line_bet(12.5, 3.5)<br>  A 8 has been rolled. Roll again!<br>  9 12 11 5 8<br>  You win!<br>m<br>  16.<br>random.seed(789)<br>m = pass_line_bet(12.5, 3.5)<br>  A 10 has been rolled. Roll again!<br>  7<br>  You lose<br>m<br>  9.<br>random.seed(3)<br>m = pass_line_bet(5.0, 5.0)<br>  A 7 has been rolled. You win!<br>m<br>  10.</p></blockquote></blockquote></blockquote></li></ul><ul><li>play: This function takes no input and returns no value. The function retrieves twoinputs from<br>  the user. The first input corresponds to the money the player has, the second to the money they<br>  would like to bet. If the user does not have enough money to play, the function displays a message<br>  informing the user about it and terminates. Otherwise, the function callspasslinebetwith<br>  the appropriate inputs in order to place the bet. At the end, make sure todisplaya statement<br>  informing the player about how much money they have left after their bet. The number representing<br>  the money left should not have more than 2 decimals.<br>  For example,<blockquote><blockquote><blockquote><p>play()<br>  Please enter your money here: 3.<br>  How much would you like to bet? 5.<br>  Insufficient funds. You cannot play.</p></blockquote></blockquote></blockquote></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">random.seed(5)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">play()</span></span><br><span class="line"><span class="attr">Please enter your money here:</span> <span class="number">12</span><span class="string">.</span></span><br><span class="line"><span class="string">How</span> <span class="string">much</span> <span class="string">would</span> <span class="string">you</span> <span class="string">like</span> <span class="string">to</span> <span class="string">bet?</span> <span class="number">3</span><span class="string">.</span></span><br><span class="line"><span class="string">A</span> <span class="number">8</span> <span class="string">has</span> <span class="string">been</span> <span class="string">rolled.</span> <span class="string">Roll</span> <span class="string">again!</span></span><br><span class="line"><span class="number">9</span> <span class="number">12</span> <span class="number">11</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="string">You</span> <span class="string">win!</span></span><br><span class="line"><span class="string">You</span> <span class="string">now</span> <span class="string">have</span> <span class="string">$16.</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; random.seed(<span class="number">789</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; play()</span><br><span class="line">Please enter your money <span class="symbol">here:</span> <span class="number">12</span>.</span><br><span class="line">How much would you like to bet? <span class="number">3</span>.</span><br><span class="line">A <span class="number">10</span> has been rolled. Roll again!</span><br><span class="line"><span class="number">7</span></span><br><span class="line">You lose</span><br><span class="line">You now have $9.</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; random.seed(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; play()</span><br><span class="line">Please enter your money <span class="symbol">here:</span> <span class="number">12</span>.</span><br><span class="line">How much would you like to bet? <span class="number">3</span>.</span><br><span class="line">A <span class="number">7</span> has been rolled. You win!</span><br><span class="line">You now have $16.</span><br></pre></td></tr></table></figure><p>Question 2: Ciphers (60 points)<br>Caesar’s cipher is a very well known and simple encryption scheme. The point of an encryption scheme<br>is to transform a message so that only those authorized will be able to read it. Caesar’s cipher conceal a<br>message by replacing each letter in the original message, by a letter corresponding to a certain number<br>of letters to the right on the alphabet. Of course the message can be retrieved by replacing each letter<br>in the encoded message (the ciphertext) with the letter corresponding to the same number of position<br>to the left on the alphabet. To achieve this, the cipher has a key that needs to be kept private. Only<br>those with the key can encode and decode a message. Such a key determines the shift that needs to<br>be performed on each letter. For example, here is how a string containing the entire alphabet will be<br>encrypted using a key equal to 3:<br>Original: abcdefghijklmnopqrstuvwxyz<br>Encrypted: defghijklmnopqrstuvwxyzabc<br>Vigen<code>ere’s cipher is a slightly more complex encryption scheme, also used to transform a message. Thekey of this cipher consists of a word and the cipher works by applying different shifts to the letters in themessage based on the letter of the keyword. Each letter can be associated with a number correspondingto its position in the English alphabet (starting to count from 0). For instance, the letter ‘a’ is associatedto 0, ‘c’ to 2, and ‘z’ to 25. Therefore, the keyword of the cipher will provide as many integers as lettersin the word and these integers will be used to implement different shifts. Let’s see how: suppose themessage to encrypt is “elephants” and the keyword is “rats”. The first thing to do is to repeat thekeyword until its length matches the one of the message.Message: e l e p h a n t sKeyword: r a t s r a t s rNow, each letter of “ratsratsr” is associated to both a letter in the message and an integer. We canencrypt each letter of the message using a shift that corresponds to the integer associated to it throughthe keyword. In this case ‘r’ corresponds to 17, so the first letter of the message which is an ‘e’ will beencrypted using a ‘v’, the second letter ‘l’ as an ‘l’ since ‘a’ is associated to 0, and so on. The entiremessage will be encrypted as “vlxhyaglj”.The goal of this exercise is to write two modules with several functions in order to create a program thatencodes and decodes messages using Caesar’s and Vigen</code>ere’s ciphers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The helper <span class="built_in">functions</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Let’s <span class="keyword">start</span> <span class="keyword">by</span> creating a <span class="keyword">module</span> calledcryptohelperswhich contains several helper functions that we</span><br><span class="line">need <span class="keyword">to</span> <span class="keyword">use</span> <span class="keyword">to</span> implement the ciphers. <span class="keyword">At</span> the <span class="keyword">beginning</span> <span class="keyword">of</span> the <span class="keyword">file</span>, <span class="keyword">create</span> a <span class="keyword">global</span> <span class="keyword">variable</span> <span class="keyword">as</span> <span class="keyword">follows</span>:</span><br><span class="line">ALPHABET = ‘abcdefghijklmnopqrstuvwxyz’</span><br><span class="line">Note that we used <span class="keyword">all</span> caps <span class="keyword">for</span> the <span class="keyword">name</span> <span class="keyword">of</span> the <span class="keyword">variable</span> because this <span class="keyword">is</span> meant <span class="keyword">to</span> represent an <span class="keyword">constant</span></span><br><span class="line"><span class="keyword">in</span> your program.</span><br><span class="line"><span class="keyword">For</span> <span class="keyword">full</span> marks, <span class="keyword">all</span> the <span class="keyword">following</span> functions must be part <span class="keyword">of</span> this <span class="keyword">module</span>:</span><br></pre></td></tr></table></figure><ul><li>in_engl_alpha: This function takes a string as input and returns true if this is a non-empty string<br>  containing only characters from the English alphabet, false otherwise. Note that this function<br>  should not be case sensitive. For example,<blockquote><blockquote><blockquote><p>in_engl_alpha(‘a’)<br>  True<br>in_engl_alpha(‘G’)<br>  True<br>in_engl_alpha(‘cat’)<br>  True<br>in_engl_alpha(‘cats and dogs’)<br>  False</p></blockquote></blockquote></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>in_engl_alpha(‘@’)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>in_engl_alpha(‘`e’)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>shift_char: This function takes a string representing a single character as input, and an integern.<br>  The function should verify that the string received represents a single character, if not aValueError<br>  with the appropriate error message should be raised. Otherwise, if the character is a letter of the<br>  English alphabet, the function returns thelower caseletter which appearsnposition later in the<br>  alphabet. If the character received as input is not a letter of the English alphabet, the function<br>  returns the character itself with no modification. For example,<blockquote><blockquote><blockquote><p>shift_char(‘a’, 3)<br>  ‘d’<br>shift_char(‘z’, 2)<br>  ‘b’<br>shift_char(‘A’, -2)<br>  ‘y’<br>shift_char(‘@’, 12)<br>  ‘@’<br>shift_char(‘g’, 86)<br>  ‘o’<br>shift_char(‘cat’, 5)<br>  Traceback (most recent call last):<br>  ValueError: the input string should contain a single character</p></blockquote></blockquote></blockquote></li><li>get_keys: This function takes a string as input and returns an list of integers. The elements of<br>  the list correspond to the position (counting from 0) of each character in the string as a letter of<br>  the English alphabet. If the string received as input is a non-empty string containing characters<br>  other than letters from the English alphabet, then the function should raise aValueErrorwith the<br>  appropriate error message. For example,<blockquote><blockquote><blockquote><p>get_keys(‘hello’)<br>  [7, 4, 11, 11, 14]<br>get_keys(‘AbC’)<br>  [0, 1, 2]<br>get_keys(‘’)<br>  []<br>get_keys(‘c@t’)<br>  Traceback (most recent call last):<br>  ValueError: the input string must contain only characters from the English alphabet.</p></blockquote></blockquote></blockquote></li><li>pad_keyword: This function takes as input a string and an integern. It returns a string of lengthn<br>  obtained by concatenating characters of the input string together until the desire length is matched.<br>  Note thatncan be smaller than the length of the input string. If the input string is empty, the<br>  function raise aValueErrorwith the appropriate message. For example,<blockquote><blockquote><blockquote><p>pad_keyword(‘cat’, 10)<br>  ‘catcatcatc’<br>pad_keyword(‘artichoke’, 5)<br>  ‘artic’</p></blockquote></blockquote></blockquote></li></ul><p>The ciphers</p><p>Let’s now create a module calledciphers. In this module you will write the functions that implement<br>the Caesar’s and the Vigen`ere’s cipher. To do so, make sure to import thecryptohelpersmodule so<br>that you can use the helper functions listed above.</p><p>For full marks, all the following functions must be part of this module:</p><ul><li>caesar: This function takes as input a string (the message to encrypt/decrypt), a integerk(the<br>  key of the cipher), and another integermrepresenting the mode (encrypt/decrypt). Ifmis 1 the<br>  function will be encrypting the message, if instead it is−1 the function will be decrypting the<br>  message. If it has any other value, the function raises aValueErrorindicating that no other mode<br>  is supported. This function returns a string obtained by encrypting or decrypting (depending on<br>  m) the message received as input using the Caesar’s cipher with keyk. For example,<blockquote><blockquote><blockquote><p>caesar(‘abc’, 10, 1)<br>  ‘klm’<br>caesar(‘wtaad’, 15, -1)<br>  ‘hello’<br>caesar(‘apple’, -2, 1)<br>  ‘ynnjc’<br>caesar(‘cats and dogs’, 5, 1)<br>  ‘hfyx fsi itlx’<br>caesar(‘hello’, 11, 5)<br>  Traceback (most recent call last):<br>  ValueError: mode not supported</p></blockquote></blockquote></blockquote></li><li>vigenere: This function takes as input a string representing the message to encrypt/decrypt,<br>  another string representing the key of the cipher, and an integermrepresenting the mode (encrypt or<br>  decrypt). Ifmis 1 the function will be encrypting the message, if instead it is−1 the function will be<br>  decrypting the message. If it has any other value, the function raises aValueErrorindicating that<br>  no other mode is supported. This function returns a string obtained by encrypting or decrypting<br>  (depending onm) the message received as input using the Vigen<code>ere’s cipher with key received as  input. Go back at the beginning of this section to review how Vigen</code>ere’s cipher works. Note that<br>  this function will raise an error if the string representing the key is empty. For example,<blockquote><blockquote><blockquote><p>vigenere(‘BaNAna’, ‘apple’, 1)<br>  ‘bpclra’<br>vigenere(‘bpclra’, ‘apple’, -1)<br>  ‘banana’<br>vigenere(‘elephants and hippos’, ‘rats’, 1)<br>  ‘vlxhyaglj tfu aagphk’<br>vigenere(‘vlxhyaglj tfu aagphk’, ‘RATS’, -1)<br>  ‘elephants and hippos’<br>vigenere(‘hello’, ‘cat’, 5)<br>  Traceback (most recent call last):<br>  ValueError: mode not supported</p></blockquote></blockquote></blockquote></li></ul><h2 id="What-To-Submit"><a href="#What-To-Submit" class="headerlink" title="What To Submit"></a>What To Submit</h2><p>You must submit all your files on codePost (<a href="https://codepost.io/)" target="_blank" rel="noopener">https://codepost.io/)</a>. The file you should submit are listed<br>below. Any deviation from these requirements may lead to lost marks.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dice_game.py</span><br><span class="line">crypto_helpers.py</span><br><span class="line">ciphers.py</span><br><span class="line">README.txtIn this <span class="built_in">file</span>, you can <span class="keyword">tell</span> <span class="keyword">the</span> TA <span class="keyword">about</span> any issues you ran <span class="keyword">into</span> doing this assignment.</span><br><span class="line">If you point out an <span class="keyword">error</span> <span class="keyword">that</span> you know occurs <span class="keyword">in</span> your program, <span class="keyword">it</span> may lead <span class="keyword">the</span> TA <span class="keyword">to</span> give you</span><br><span class="line">more partial credit.</span><br><span class="line">This <span class="built_in">file</span> <span class="keyword">is</span> also <span class="keyword">where</span> you should make note <span class="keyword">of</span> anybody you talked <span class="keyword">to</span> <span class="keyword">about</span> <span class="keyword">the</span> assignment.</span><br><span class="line">Remember this <span class="keyword">is</span> an individual assignment, <span class="keyword">but</span> you can talk <span class="keyword">to</span> other students using theGilligan’s</span><br><span class="line">Island Rule: you can’t take any notes/writing/code <span class="keyword">out of</span> <span class="keyword">the</span> discussion, <span class="keyword">and</span> afterwards you</span><br><span class="line">must do something inane like watch television <span class="keyword">for</span> <span class="keyword">at</span> least <span class="number">30</span> minutes.</span><br><span class="line">If you didn’t talk <span class="keyword">to</span> anybody nor have anything you want <span class="keyword">to</span> <span class="keyword">tell</span> <span class="keyword">the</span> TA, just <span class="built_in">say</span> “nothing <span class="keyword">to</span></span><br><span class="line">report” <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">file</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Python完成
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：7CCSMCMP-Coursework-1</title>
    <link href="cplusplusdaixie.com/7CCSMCMP-Coursework-1.html"/>
    <id>cplusplusdaixie.com/7CCSMCMP-Coursework-1.html</id>
    <published>2023-06-14T08:35:22.000Z</published>
    <updated>2023-06-14T08:38:46.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Computer-Programming-for-Data-Scientists"><a href="#Computer-Programming-for-Data-Scientists" class="headerlink" title="Computer Programming for Data Scientists"></a>Computer Programming for Data Scientists</h3><ul><li>1 Activity 1 (10 points) Contents<ul><li>1.1 The domain classes (3 points)</li><li>1.2 The shopping system (3 points)</li><li>1.3 Doing some shopping (4 points)</li></ul></li><li>2 Activity 2 (10 points)<ul><li>2.1 The binary search tree class (1 point)</li><li>2.2 Operations on BSTs (2 points)</li><li>2.3 Random trees’ simulation (2 points)</li><li>2.4 Complexity analysis for BSTs (2 points)</li><li>2.5 The linked list class (1 point)</li><li>2.6 Operations on linked lists (1 point)</li><li>2.7 Comparing the two data types (1 point)</li></ul></li></ul><h2 id="1-Activity-1-10-points-Contents"><a href="#1-Activity-1-10-points-Contents" class="headerlink" title="1 Activity 1 (10 points) Contents"></a>1 Activity 1 (10 points) Contents</h2><p>This activity requires you to use many of the concepts learned so far on the module. You will develop a simple eCommerce system. The program has to allow the user to:</p><ul><li>add products;</li><li>remove products;</li><li>show a summary of their shopping session;</li><li>export the cart inJSONformat.</li></ul><p>The activity is divided in three parts that add up to 10 points. You need to submit one file called<br>shopping.py.</p><h3 id="1-1-The-domain-classes-3-points"><a href="#1-1-The-domain-classes-3-points" class="headerlink" title="1.1 The domain classes (3 points)"></a>1.1 The domain classes (3 points)</h3><p>First create a class <strong>Product</strong> with the following attributes:</p><ul><li>name;</li><li>price;</li><li>quantity;</li><li>EAN identifier(this is the 13-digit number below the bar code of a product, see alsohttps:<br>  //en.wikipedia.org/wiki/International_Article_Number);</li><li>brand.</li></ul><p>The class <strong>Product</strong> also offers atojson()method that returns theJSONrepresentation of the<br>product.</p><p>Then, create three subclasses of the class <strong>Product</strong> :</p><ul><li><strong>Clothing</strong> , which has the following attributes:size, andmaterial;</li><li><strong>Food</strong> , which has the following attributes:expirydate,glutenfree, andsuitableforvegans;<br>  and</li><li>one additional subclass of your choice. Think about the domain of your system and pick a product you are familiar with. Define at least 2 relevant attributes of that product.</li></ul><p>Each subclass of <strong>Product</strong> must override thetojson()method of the superclass.</p><h3 id="1-2-The-shopping-system-3-points"><a href="#1-2-The-shopping-system-3-points" class="headerlink" title="1.2 The shopping system (3 points)"></a>1.2 The shopping system (3 points)</h3><p>Next, create the class <strong>ShoppingCart</strong> , which is a container of products in a shopping session. The <strong>ShoppingCart</strong> class offers the following methods:</p><ul><li>addProduct(p), to add a productpto the cart;</li><li>removeProduct(p), to remove the productpfrom the cart;</li><li>showSummary(), to display the content of the cart;</li></ul><ul><li>changeProductQuantity(p, q), to change the quantity of productpto the quantityq.</li></ul><h3 id="1-3-Doing-some-shopping-4-points"><a href="#1-3-Doing-some-shopping-4-points" class="headerlink" title="1.3 Doing some shopping (4 points)"></a>1.3 Doing some shopping (4 points)</h3><p>Now that the classes are ready, you need some code to let the user do some shopping. The script is prompting the user to type in commands in a while loop; see Listing 1.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">print</span>(<span class="string">'The program has started.'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'Insert your next command (H for help):'</span>)</span><br><span class="line">terminated = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> terminated:</span><br><span class="line">c = input.read(<span class="string">"Type your next command:"</span>)</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="builtin-name">print</span>( <span class="string">'Goodbye.'</span> )</span><br></pre></td></tr></table></figure><p>Listing 1:Structure of the main while loop. The loop can terminate only when the users types the<br>command <strong>T</strong></p><p>The script should support the following commands:</p><ul><li><strong>A</strong> - allows the user to add a product to the cart (see the example in Listing 2);</li><li><strong>R</strong> - allows the user to remove an existing product from the shopping chart (see Listing 3);</li><li><strong>S</strong> - the script prints out a summary of the cart, along the lines of the example in Listing 4;</li><li><strong>Q</strong> - the user can change the quantity of a product already present in the cart;</li><li><strong>E</strong> - the script generates a summary of the cart asJSON, printed to the console. TheJSON<br>  output is an array ofJSONproducts (see the example in Listing 5);</li><li><strong>C</strong> - at any moment, allows the user to interrupt the shopping session. The program will print<br>  out the following message:“The current operation is cancelled”. Then, the user should be<br>  able to continue with a new command.</li><li><strong>T</strong> - the script terminates (exiting the while loop);</li><li><strong>H</strong> - a request for help from the user. The commands that the program recognises are printed<br>  out to the console (see in Listing 6);</li></ul><p>Any other command should print out the following message:“Command not recognised. Please try<br>again”.</p><blockquote><blockquote><blockquote><p>Insert the next command: A<br>Adding a new product:<br>Insert its type: Clothing<br>Insert its name: Gloves<br>Insert its price (£): 23.<br>Insert its quantity: 1<br>Insert its brand: Moret and Spark<br>Insert its EAN code: 1234567891234<br>Insert its size: XL<br>Insert its material: Sink<br>The product Gloves has been added to the cart.<br>The cart contains 4 products.</p></blockquote></blockquote></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">2</span>:Adding <span class="keyword">a</span> <span class="built_in">new</span> product <span class="built_in">to</span> <span class="keyword">the</span> cart</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>Insert the next command: R<br>What is the name of the product you want to remove? Shoes<br>‘Shoes’ is not in the cart.<br>Insert the next command: R<br>What is the name of the product you want to remove? Slippers<br>‘Slippers’ successfully removed from the cart.<br>The cart contains 3 products.</p></blockquote></blockquote></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">3</span>:Removing <span class="keyword">a</span> product <span class="built_in">from</span> <span class="keyword">the</span> cart</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>Insert the next command: S<br>This is the total of the expenses:<br>1 - Hat =£ 15<br>2 - 6 <em> Eggs =£2.<br>3 - 2 </em> Orange juice =£ 5<br>4 - “Gloves” =£23.<br>Total =£45.</p></blockquote></blockquote></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Listing</span> 4<span class="selector-pseudo">:The</span> <span class="selector-tag">summary</span> <span class="selector-tag">of</span> <span class="selector-tag">an</span> <span class="selector-tag">ongoing</span> <span class="selector-tag">shopping</span> <span class="selector-tag">session</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>Insert the next command: E<br>[{ “type”: \clothing”, \name”: \Hat”,…</p></blockquote></blockquote></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Listing</span> 5<span class="selector-pseudo">:JSONexport</span> <span class="selector-tag">of</span> <span class="selector-tag">the</span> <span class="selector-tag">cart</span> <span class="selector-tag">content</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>Insert the next command: H<br>The program supports the following commands:<br>[A] - Add a new product to the cart<br>[R] - Remove a product from the cart<br>[S] - Print a summary of the cart<br>[Q] - Change the quantity of a product<br>[E] - Export a JSON version of the cart<br>[C] - Cancel the current operation<br>[T] - Terminate the program<br>[H] - List the supported commands</p></blockquote></blockquote></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>:<span class="keyword">User</span> <span class="title">help</span> request</span><br></pre></td></tr></table></figure><h2 id="2-Activity-2-10-points"><a href="#2-Activity-2-10-points" class="headerlink" title="2 Activity 2 (10 points)"></a>2 Activity 2 (10 points)</h2><p>In Week 4 , we talked about a series of advanced data types such as trees. In particular, we<br>mentioned <strong>binary search trees</strong> (or BST), which are trees with the following property: for any<br>parent node, its data value must be higher than the data from any child node to its left, and lower<br>than the data of any child node to its right. Creating and maintaining such a tree comes with a cost,<br>as every time new nodes are added, removed or changed, the developer needs to ensure that this<br>key property still holds. In return, the tree is fast to search through - finding a value in it takesO(log<br>n). For largenthis should be faster than a regular linked list.</p><p>In this activity, you will implement a binary search tree and study its algorithmic complexity. You will<br>also create a linked list and compare the complexities of both structures.</p><h3 id="2-1-The-binary-search-tree-class-1-point"><a href="#2-1-The-binary-search-tree-class-1-point" class="headerlink" title="2.1 The binary search tree class (1 point)"></a>2.1 The binary search tree class (1 point)</h3><p>To begin with, create a Python filebinarysearchtree.pyand implement a <strong>TreeNode</strong> class. The<br>class should include attributes and methods to store and manipulate:</p><ul><li>A data value (or cargo) of the node;</li><li>A link to its left child;</li><li>A link to its right child;</li><li>A way to print its value;</li></ul><p>Now, create a classBinarySearchTree. It should have:</p><ul><li>The root of the tree as an attribute;</li><li>An optional limit in size;</li><li>A methodisempty()to check if the tree is empty;</li><li>A methodisfull()to check if the tree is full;</li></ul><h3 id="2-2-Operations-on-BSTs-2-points"><a href="#2-2-Operations-on-BSTs-2-points" class="headerlink" title="2.2 Operations on BSTs (2 points)"></a>2.2 Operations on BSTs (2 points)</h3><p>Expand your tree with operations. You should implement the following methods:</p><ul><li>A methodsearch(), which receives a data value and searches the tree for it, returning a<br>  Boolean indicating whether or not the item is there.</li><li>A methodinsert(), which receives a data value and inserts it as a new node in the tree. The<br>  tree may include duplicate values.</li><li>A methoddelete(), which deletes a value from the tree, and mends the tree back together<br>  in case it breaks, keeping the tree’s binary search property intact.</li><li>A methodtraverse(), which returns the values stored across the nodes of the tree in as-<br>  cending order.</li><li>A methodprinttree()to print a visual representation of the tree. Think about how you<br>  would prefer to visualise a tree if you could only useprint()calls; it doesn’t need to be the<pre><code>str method.</code></pre></li></ul><h3 id="2-3-Random-trees’-simulation-2-points"><a href="#2-3-Random-trees’-simulation-2-points" class="headerlink" title="2.3 Random trees’ simulation (2 points)"></a>2.3 Random trees’ simulation (2 points)</h3><p>You should now have a functioning binary search tree. It is time to study the time complexity of its<br>search. To achieve this, do the following:</p><ol><li>Create a new script, calledcomplexity.pyand import your <strong>BinarySearchTree</strong> class;</li><li>Incomplexity.py, create a functionrandomtree(n), which takes an inputnand generates<br> a tree of sizenby populating it withnrandom integers from 1 to 1000 ;</li><li>Then create a listXof equally spaced numbers from 5 to 100 on step size 5 (so, 5 , 10 , 15 etc.)</li><li>For each valuesinX, generate 1000 random trees of sizes, and search them for the value<br> 42 , storing the average time spent by thesearchcall into a listY;</li></ol><p><strong>Notes</strong> :</p><ul><li>Thetimemodule might be useful here.</li><li>In case your laptop does not have the capacity to run a simulation of this size, reduce ei-<br>  ther the size of the trees or the size ofXor both. In this case, declare two constants in<br>  complexity.py, one calledT REESIZEand the other one calledN U M BEROFTREES<br>  where you specify the numbers that work for you.</li></ul><h3 id="2-4-Complexity-analysis-for-BSTs-2-points"><a href="#2-4-Complexity-analysis-for-BSTs-2-points" class="headerlink" title="2.4 Complexity analysis for BSTs (2 points)"></a>2.4 Complexity analysis for BSTs (2 points)</h3><p>We can now see how the time spent to search in a BST varies according to its sizen. Incomplex-<br>ity.py, add more code to:</p><ol><li>PlotXagainstY. Xstores links to the trees of different sizes. Y stores the times spent<br> searching. Use the code in Listing 7 for that.</li><li>Add a comment incomplexity.pythat describes in your own words the complexity of BST<br> search based on the shape of the graph you plotted. <strong>Hint</strong> : relationships could be e.g. linear,<br> sub-linear, exponential, quadratic, logarithmic etc as explained in the lectures in Week 4. Start<br> your comment with the wordsComplexity analysis X vs Y”so that we can find it easily in your<br> code.</li><li>Create a new listY2with estimates of average search timetunder an ideal linear relationship<br> to the size of the trees inX. <strong>Hint</strong> : In a linear relationship,t=c∗n+b, wherecandbare<br> constants. Using the search timetforn= 5andn= 10fromY, you can findcandband<br> estimate the other values oftinY 2.</li><li>In the same way, create a third listY 3 with estimates of average search time under an ideal<br> logarithmic relationship to the size of the trees inX. <strong>Hint</strong> : In a logarithmic relationship,<br> t=c∗log(n) +b, wherecandbare constants. Using the search timetforn= 5andn= 10<br> fromY, you can findcandband estimate the other values oftinY 3. Uselog(n) =log 2 (n).</li><li>Plot the three curves (XagainstY,Y 2 andY 3 ) using the code found in Listing 8.</li><li>Add another comment incomplexity.pythat describes in your words how the initial graph<br> compares to an ideal linear or logarithmic complexity. What could be the reason wny yourY<br> line does not follow exactly the same line as e.g.Y 3? Is there any issue with our class Binary<br> Search Tree or with the way we created tree objects that we’d need to fix so thatYgets closer</li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">to</span> <span class="keyword">an</span> ideal complexity? Start your comment <span class="keyword">with</span> <span class="keyword">the</span> wordsComplexity analysis X vs Y, Y</span><br><span class="line"><span class="keyword">and</span> Y3”so that we can find <span class="keyword">it</span> easily <span class="keyword">in</span> your code.</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Note : Thetimemodule’stime()function records <span class="built_in">time</span> <span class="keyword">as</span> seen <span class="keyword">by</span> <span class="keyword">the</span> processor. Try <span class="keyword">not</span> <span class="keyword">to</span> <span class="built_in">run</span></span><br><span class="line">any demanding processing <span class="keyword">on</span> your laptop <span class="keyword">while</span> executing <span class="keyword">the</span> code - <span class="keyword">if</span> you have other processes</span><br><span class="line"><span class="built_in">running</span> <span class="keyword">in</span> <span class="keyword">the</span> background, <span class="keyword">the</span> <span class="built_in">time</span> recorded will be impacted <span class="keyword">by</span> them, tampering <span class="keyword">with</span> your results.</span><br><span class="line">This may mean your plots will <span class="keyword">get</span> wobbly - <span class="keyword">if</span> <span class="keyword">that</span> happens, <span class="keyword">try</span> <span class="keyword">to</span> stop any other processes <span class="keyword">that</span> might</span><br><span class="line">interfere <span class="keyword">and</span> <span class="built_in">run</span> <span class="keyword">the</span> code a few <span class="keyword">times</span> <span class="keyword">until</span> <span class="keyword">the</span> plotted lines become smoother.</span><br></pre></td></tr></table></figure><p>1 import matplotlib.pyplot as plt<br>2 plt.plot(X, Y)<br>3 plt.xlabel(‘Size of trees’)<br>4 plt.ylabel(‘Search time’)<br>5 plt.ticklabel_format(axis=’both’, style=’sci’, scilimits=(0,0))<br>6 plt.show()</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">7</span>:How <span class="built_in">to</span> plot <span class="keyword">a</span> simpleXvsYgraph, whereXandYare <span class="built_in">number</span> lists <span class="keyword">of</span> <span class="keyword">the</span> same <span class="built_in">length</span></span><br></pre></td></tr></table></figure><p>1 import matplotlib.pyplot as plt<br>2 plt.plot(X, Y)<br>3 plt.plot(X, Y2)<br>4 plt.plot(X, Y3)<br>5 plt.legend([‘BST’,’Linear’,’Logarithmic’])<br>6 plt.xlabel(‘Size of trees’)<br>7 plt.ylabel(‘Search time’)<br>8 plt.ticklabel_format(axis=’both’, style=’sci’, scilimits=(0,0))<br>9 plt.show()</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">8</span>:How <span class="built_in">to</span> plot <span class="keyword">a</span> multi-<span class="built_in">line</span> graph <span class="keyword">with</span> <span class="built_in">line</span> labels</span><br></pre></td></tr></table></figure><h3 id="2-5-The-linked-list-class-1-point"><a href="#2-5-The-linked-list-class-1-point" class="headerlink" title="2.5 The linked list class (1 point)"></a>2.5 The linked list class (1 point)</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For <span class="keyword">a</span> better understanding <span class="keyword">of</span> <span class="keyword">the</span> importance <span class="keyword">of</span> complexity, let us now compare BSTs <span class="built_in">to</span> standard</span><br><span class="line">linked lists.</span><br><span class="line">First, <span class="built_in">create</span> <span class="keyword">a</span> Python filelinkedlist.pyand implement <span class="keyword">a</span> ListNode class. It should have attributes</span><br><span class="line"><span class="keyword">and</span> methods <span class="keyword">for</span>:</span><br></pre></td></tr></table></figure><ul><li>A data value (or cargo) stored in the node;</li><li>A link to its next node;</li><li>A way to print the data value in the node;</li></ul><p>Now, create a class <strong>LinkedList</strong>. It should have:</p><ul><li>The first node as an attribute;</li><li>An optional limit in size;</li><li>A methodisempty()to verify if the list is empty;</li><li>A methodisfull()to verify if the list is full;</li><li>A method str to print a visual representation of the list.</li></ul><h3 id="2-6-Operations-on-linked-lists-1-point"><a href="#2-6-Operations-on-linked-lists-1-point" class="headerlink" title="2.6 Operations on linked lists (1 point)"></a>2.6 Operations on linked lists (1 point)</h3><p>Expand your <strong>LinkedList</strong> with proper operations. You should implement the following methods:</p><ul><li>A methodsearch(), which receives a data value and searches the list for it, returning a<br>  Boolean indicating whether or not the item is there.</li><li>A methodinsert(), which receives a data value as a parameter and inserts it as a new node<br>  in the list. Duplicate values are allowed.</li><li>A methoddelete(), which receives a data value as a parameter and deletes its first occur-<br>  rence from the list.</li><li>A methodtraverse(), which returns the values of the nodes in the linked order.</li></ul><h3 id="2-7-Comparing-the-two-data-types-1-point"><a href="#2-7-Comparing-the-two-data-types-1-point" class="headerlink" title="2.7 Comparing the two data types (1 point)"></a>2.7 Comparing the two data types (1 point)</h3><p>Repeat the steps from Section 2.3 using linked lists. Use the same listXto generate the lists and<br>save the average search times in a new listY 4.</p><p>Then analyse the time complexity. To do so:</p><ol><li>PlotXvsY 4 by executing the code found in Listing 9.</li><li>Add a new comment in your code to describe how linked lists compare to BSTs. Start your<br> comment with the wordsComplexity analysis X vs Y, Y2, Y3 and Y4”so that we can find it<br> easily in your code.</li></ol><p>1 import matplotlib.pyplot as plt<br>2 plt.plot(X, Y)<br>3 plt.plot(X, Y2)<br>4 plt.plot(X, Y3)<br>5 plt.plot(X, Y4)<br>6 plt.legend([‘BST’,’Linear’,’Logarithmic’,’LL’])<br>7 plt.xlabel(‘Size of trees’)<br>8 plt.ylabel(‘Search time’)<br>9 plt.ticklabel_format(axis=’both’, style=’sci’, scilimits=(0,0))<br>10 plt.show()</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">9</span>:Adding <span class="keyword">a</span> <span class="built_in">new</span> plot <span class="built_in">to</span> <span class="keyword">the</span> mix</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Python实现BST相关算法
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：MSBA7012-Sentiment-Analysis</title>
    <link href="cplusplusdaixie.com/MSBA7012-Sentiment-Analysis.html"/>
    <id>cplusplusdaixie.com/MSBA7012-Sentiment-Analysis.html</id>
    <published>2023-06-13T13:27:53.000Z</published>
    <updated>2023-06-13T13:30:54.164Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>MSBA7012 Sentiment Analysis Individual Assignment</p><p>Instructions and Requirements:</p><ul><li>Calculate the sentiment score for each of the 100 Seeking Alpha articles given to you</li><li>Sentiment score is defined as the fraction of positive words minus the fraction of negative words in the article content</li><li>Use the Loughran-McDonald sentiment word lists</li><li>Save the sentiment scores in a CSV file with five columns: article_id, pos_word, neg_word, total_word, sentiment</li><li>Add comments to your code to improve readability</li><li>Grading is mainly based on the accuracy, efficiency, readability, and reusability of your program code</li><li>Make sure your program calculates the total running time (in seconds) and print it out</li></ul><p>Deliverables:</p><ul><li>Source code of your program</li><li>CSV file of your program output</li><li>A readme.txt file describing the package/environment requirements to run your program</li><li>Compress the above files into a zip file named with your student ID, e.g., 123456.zip</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Environmen<span class="variable">t:</span></span><br><span class="line"><span class="keyword">python3</span></span><br><span class="line"></span><br><span class="line">Package:</span><br><span class="line">xlrd</span><br><span class="line">csv</span><br><span class="line">re</span><br><span class="line"><span class="built_in">string</span></span><br><span class="line">time</span><br><span class="line"></span><br><span class="line">How <span class="keyword">to</span> run:</span><br><span class="line"><span class="number">1</span>. Open terminal</span><br><span class="line"><span class="number">2</span>. CD <span class="keyword">to</span> this directory</span><br><span class="line"><span class="number">3</span>. Run: </span><br><span class="line"><span class="keyword">python</span>.<span class="keyword">exe</span> .\main.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      情感分析相关的Python作业
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数字信号处理代写：EECS152A-Digital-Signal-Processing-Final-Exam</title>
    <link href="cplusplusdaixie.com/EECS152A-Digital-Signal-Processing-Final-Exam.html"/>
    <id>cplusplusdaixie.com/EECS152A-Digital-Signal-Processing-Final-Exam.html</id>
    <published>2023-06-12T03:38:54.000Z</published>
    <updated>2023-06-12T03:39:43.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Final-Exam-Fall-2020"><a href="#Final-Exam-Fall-2020" class="headerlink" title="Final Exam Fall 2020"></a>Final Exam Fall 2020</h3><h1 id="EECS-152A-Digital-Signal-Processing"><a href="#EECS-152A-Digital-Signal-Processing" class="headerlink" title="EECS 152A: Digital Signal Processing"></a>EECS 152A: Digital Signal Processing</h1><h1 id="110-Minutes"><a href="#110-Minutes" class="headerlink" title="110 Minutes"></a>110 Minutes</h1><ol><li>Consider a digital filter with the following difference equation:<br> 3y(n) = y(n-2) – 2 y(n-3) + 4x(n-1) – 5 x(n-3)<br>a) Determine the system function _H_ ( _z_ )<br>b) Draw the signal flow graph for the direct form I realization.</li><li>a) What is the criteria for system function Ha(s) of an analog filter, for it to be stable?<br> b) Assume that you would like to implement a 10th order digital filter and the quantizer that you are using, uses only 4 bits. If you have a choice between a direct form implementation and a cascade form implementation, which one will you pick? Why?</li><li>Consider a system with the following input-output relationship<br> 𝑦𝑦(𝑛𝑛)= −0.5𝑦𝑦(𝑛𝑛− 1 )+𝑥𝑥(𝑛𝑛)<br> Assume that we implement the system using 4 bits (one sign bit and three binary bits to represent the magnitude) and rounding up.<br> a) Draw the output of the quantizer vs. the input of the quantizer. (You can skip middle parts of the graph if you can show the trend)<br> b) Find the response of the system, y(n), for all values of n, to the input x(n) = ¾<pre><code>δ(n).</code></pre> c) What value does 1010 represent?<br> d) What is limit cycle?</li><li>a) Draw the impulse response of a type III linear phase filter which has a group delay of 3. You can choose any value for the coefficients that you want.<br> b) What is the phase of this filter?<br> c) Can we design a lowpass filter that is type III linear phase filter? Explain</li><li>We would like to use impulse invariance mapping of an analog 1st order Butterworth<br> filter to design a digital lowpass filter with at least 40 dB attenuation at 0.4π ≤ |ω| ≤ π.<br> Assume T = 2.<br> a) What is the main problem with impulse invariance mapping? How can it be avoided or minimized.<br> b) What is the Ha(s) of the analog filter?<br> c) What is the H(z) of the digital filter?</li></ol><ol start="6"><li>We would like to design a 5 tap causal linear-phase FIR filter, approximating an ideal<br> high pass filter with cutoff frequency of 𝜋𝜋 3 | using a Hanning window.<br> Hanning Window: w(n) =^12 (1 – cos 𝑀𝑀−12𝜋𝜋𝜋𝜋 ) 0 ≤ n ≤ M-<br> a) What is the group delay of this filter?<br> b) What is H(z) of this filter?<br> c) If we wanted to suppress the ripple in the stopband of H(z) further, what would you change in the design of the FIR filter?<br> d) Draw the best implementation. Why is this the best implementation?</li></ol>]]></content>
    
    <summary type="html">
    
      帮忙做数字信号处理的往届真题，用于复习。
    
    </summary>
    
      <category term="数字信号处理" scheme="cplusplusdaixie.com/categories/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字信号处理" scheme="cplusplusdaixie.com/tags/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CSE-IT-107L-Final-Project-Contacts</title>
    <link href="cplusplusdaixie.com/CSE-IT-107L-Final-Project-Contacts.html"/>
    <id>cplusplusdaixie.com/CSE-IT-107L-Final-Project-Contacts.html</id>
    <published>2023-06-11T00:45:54.000Z</published>
    <updated>2023-06-11T00:49:56.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Final-Project-Contacts"><a href="#Final-Project-Contacts" class="headerlink" title="Final Project: Contacts"></a>Final Project: Contacts</h3><h3 id="CSE-IT-107L"><a href="#CSE-IT-107L" class="headerlink" title="CSE/IT 107L"></a>CSE/IT 107L</h3><h3 id="NMT-Department-of-Computer-Science-and-Engineering"><a href="#NMT-Department-of-Computer-Science-and-Engineering" class="headerlink" title="NMT Department of Computer Science and Engineering"></a>NMT Department of Computer Science and Engineering</h3><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p><strong>1 The Problem 1</strong><br>1.1 Example Session…………………………………. 1</p><p><strong>2 Assignment 1</strong><br>2.1 Design……………………………………… 1<br>2.2 README…………………………………….. 2<br>2.3 Contacts Format…………………………………. 2<br>2.4 Application Commands…………………………….. 2<br>2.5 Extra Credit…………………………………… 4</p><p><strong>3 Submitting 5</strong></p><h2 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h2><p><strong>60%</strong> Code Implementation<br><strong>10%</strong> Design<br><strong>10%</strong> Readme<br><strong>10%</strong> Docstring Comments<br><strong>05%</strong> Code follows PEP 8 and PEP 257 style guides<br><strong>05%</strong> Tarball is named correctly. i.e.cse107_firstname_lastname_contacts.tar.gz</p><h2 id="1-The-Problem"><a href="#1-The-Problem" class="headerlink" title="1 The Problem"></a>1 The Problem</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You are <span class="keyword">an</span> employee <span class="keyword">of</span> NMTLabs, <span class="keyword">a</span> small software consultation firm <span class="keyword">for</span> noble gas mass spec-trometry. At this week’s developer meeting you were tasked <span class="keyword">with</span> developing <span class="keyword">an</span> application <span class="built_in">to</span> manage <span class="keyword">the</span> firm’s contacts. The CEO <span class="keyword">and</span> CTO <span class="keyword">of</span> NMTLabs are looking <span class="keyword">for</span> something that is <span class="keyword">text</span>-based <span class="keyword">and</span> easy <span class="built_in">to</span> use, so <span class="keyword">the</span> firm can quickly <span class="built_in">start</span> calling contacts <span class="keyword">for</span> <span class="keyword">the</span> latest <span class="built_in">round</span> <span class="keyword">of</span> venture capital fundraising. Heretofore <span class="keyword">the</span> firm has been <span class="keyword">using</span> <span class="keyword">a</span> simple CSV <span class="built_in">file</span> <span class="built_in">to</span> save all <span class="keyword">of</span> its contacts. Everyone <span class="keyword">in</span> <span class="keyword">the</span> organization is looking <span class="keyword">for</span> <span class="keyword">an</span> improved solution <span class="keyword">and</span> are counting <span class="keyword">on</span></span><br><span class="line">you <span class="built_in">to</span> have <span class="keyword">a</span> working prototype.</span><br><span class="line">The CTO has specified <span class="keyword">a</span> <span class="built_in">set</span> <span class="keyword">of</span> tasks your contacts application must perform. Please examine <span class="keyword">the</span> requirements carefully, implement <span class="keyword">as</span> many <span class="keyword">of</span> <span class="keyword">the</span> tasks <span class="keyword">as</span> possible including <span class="keyword">the</span> Extra Credit (E.C worth <span class="number">1</span>% <span class="keyword">each</span>)</span><br></pre></td></tr></table></figure><h3 id="1-1-Example-Session"><a href="#1-1-Example-Session" class="headerlink" title="1.1 Example Session"></a>1.1 Example Session</h3><p>An example session using the application is shown below. A user starts the application, enters the commands, about, info, list and finally exit. The application displays a farewell message and quits.<br>Note line 1 is a terminal command.<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>$ python3 contacts.py</span><br><span class="line"><span class="symbol">2 </span>Welcome <span class="keyword">to</span> the Contact application</span><br><span class="line"><span class="symbol">3 </span>Please enter a command: about</span><br><span class="line"><span class="symbol">4 </span>Contacts App. Developed by Jake Ross <span class="keyword">for</span> CSE107 <span class="number">2015</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">6 </span>Please enter a command: info</span><br><span class="line"><span class="symbol">7 </span>contacts path: contacts.txt</span><br><span class="line"><span class="symbol">8 </span>number contacts: <span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="symbol">10 </span>Please enter a command: <span class="keyword">list</span></span><br><span class="line"><span class="symbol">11 </span><span class="keyword">Name</span> : Phone Company email</span><br><span class="line"><span class="symbol">12 </span>-----------------------------------------------</span><br><span class="line"><span class="symbol">13 </span>Elon Musk : <span class="number">453</span>-<span class="number">6723</span> SpaceX emusk@spacex.<span class="keyword">com</span></span><br><span class="line"><span class="symbol">14 </span>Larry Page : <span class="number">853</span>-<span class="number">0653</span> Google lpage@gmail.<span class="keyword">com</span></span><br><span class="line"><span class="symbol">15 </span>Tim Cook : <span class="number">133</span>-<span class="number">0419</span> Apple tcook@apple.<span class="keyword">com</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="symbol">17 </span>Please enter a command: exit</span><br><span class="line"><span class="symbol">18 </span>Goodbye</span><br></pre></td></tr></table></figure></p><h2 id="2-Assignment"><a href="#2-Assignment" class="headerlink" title="2 Assignment"></a>2 Assignment</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Make</span> your <span class="meta">code</span> clean <span class="keyword">and </span>readable. You will <span class="keyword">be </span>graded on style <span class="keyword">and </span>functionality. You must follow</span><br><span class="line"><span class="symbol">PEP8</span> <span class="keyword">and </span>PEP.</span><br></pre></td></tr></table></figure><h3 id="2-1-Design"><a href="#2-1-Design" class="headerlink" title="2.1 Design"></a>2.1 Design</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Provide <span class="keyword">a</span> description <span class="keyword">of</span> how you plan <span class="built_in">to</span> solve this problem. Draw figures, flowcharts, <span class="keyword">and</span> tables</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">detailed</span> annotations (notes). Consider <span class="keyword">and</span> describe typical use cases. For example,</span><br></pre></td></tr></table></figure><ol><li>The application starts.</li></ol><ol start="2"><li>The user wants to add a contact.</li><li>The program sequentially asks for required information validating each inputted value.</li><li>The program adds contact to its stored contacts.</li><li>The added contact information is displayed to the user.</li></ol><h3 id="2-2-README"><a href="#2-2-README" class="headerlink" title="2.2 README"></a>2.2 README</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Write aREADME.txtfile. This is common practice <span class="keyword">in</span> the open source<span class="built_in"> community </span><span class="keyword">and</span> provides a consistent location <span class="keyword">for</span><span class="built_in"> users </span><span class="keyword">to</span> <span class="builtin-name">find</span> introductory information about your application. This file should contain a brief description of what your code does <span class="keyword">and</span> some information on how <span class="keyword">to</span> <span class="builtin-name">run</span> it.</span><br><span class="line">You should provide a list of valid commands, their function, <span class="keyword">and</span> examples of their use.</span><br></pre></td></tr></table></figure><h3 id="2-3-Contacts-Format"><a href="#2-3-Contacts-Format" class="headerlink" title="2.3 Contacts Format"></a>2.3 Contacts Format</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A contact <span class="keyword">is</span> something <span class="keyword">that</span> stores least <span class="keyword">the</span> following attributes:</span><br></pre></td></tr></table></figure><ul><li>Name</li><li>Phone</li><li>Company</li><li>Email</li><li>Note<br>Here is a sample CSV file describing many contacts.<br>1 Name, Phone, Company, Email, Note<br>2 Elon Musk, 453-6723, SpaceX, <a href="mailto:emusk@spacex.com" target="_blank" rel="noopener">emusk@spacex.com</a><br>3 Larry Page, 853-0653, Google, <a href="mailto:lpage@gmail.com" target="_blank" rel="noopener">lpage@gmail.com</a><br>4 Tim Cook, 133-0419, Apple, <a href="mailto:tcook@apple.com" target="_blank" rel="noopener">tcook@apple.com</a></li></ul><h3 id="2-4-Application-Commands"><a href="#2-4-Application-Commands" class="headerlink" title="2.4 Application Commands"></a>2.4 Application Commands</h3><ul><li>Get input from the user.</li><li>Think of and display a unique name for your application</li><li>Display a welcome message when the application starts.<br>To make testing easier, add some default contacts so you don’t have to constantly load a CSV file or manually enter contacts.<br><strong>2.4.1 The</strong> exit <strong>Command</strong></li><li>Close the program.</li><li>Display a goodbye message when the application quits.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2<span class="selector-class">.4</span><span class="selector-class">.2</span> <span class="selector-tag">The</span> <span class="selector-tag">about</span> <span class="selector-tag">Command</span></span><br></pre></td></tr></table></figure><ul><li>Print developer information. Developer name, date created, … etc<br><strong>2.4.3 The</strong> info <strong>Command</strong></li><li>Print number of contacts</li><li>Print number of companies</li><li>Print number of contacts per company<br><strong>2.4.4 The</strong> list <strong>Command</strong></li><li>List all contacts.<br><strong>2.4.5 The</strong> remove <strong>Command</strong></li><li>Report contacts updated</li><li>Warn user if trying to remove contact that does not exist<br><strong>2.4.6 The</strong> note <strong>Command</strong></li><li>Allow user to edit a note associated with a specified contact</li><li>Allow user to see current note<br><strong>2.4.7 The</strong> add <strong>Command</strong></li><li>Allow user to add a contact. There should be a prompt for each field of a contact.<br><strong>2.4.8 The</strong> load <strong>Command</strong></li><li>Load a default contacts file when the application starts</li><li>Warn user if entered invalid file<br><strong>2.4.9 The</strong> save <strong>Command</strong><br>Use this command to write a line of a CSV file:</li></ul><p>1 savefile.write(“{}, {}, {}, {}, {}\n”.format(<br>2 name, phone, company, email, note))</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2<span class="selector-class">.4</span><span class="selector-class">.10</span> <span class="selector-tag">The</span> <span class="selector-tag">commands</span> <span class="selector-tag">Command</span></span><br></pre></td></tr></table></figure><ul><li>Load a set of commands from a file and execute them. An example command file might look like the following.</li></ul><p>1 add joe<br>2 phone: 555-<br>3 add jane<br>4 phone: 555-<br>5 email: <a href="mailto:jane@jane.jane" target="_blank" rel="noopener">jane@jane.jane</a><br>6 remove bob</p><h3 id="2-5-Extra-Credit"><a href="#2-5-Extra-Credit" class="headerlink" title="2.5 Extra Credit"></a>2.5 Extra Credit</h3><ul><li>Use a random welcome and goodbye message chosen from a set of available messages.</li><li>Verify CSV save path can be written to, i.e parent directory exits</li><li>Validate user input in add or edit commands. Verify phone, email correct formats. i.e. (xxx)xxx-<br>  xxxx</li><li>Add thelookupSearch for contacts by substring. Offer case-insensitive search.</li><li>Allow multiple notes for a given contact. User should be able to list, add, remove notes.</li><li>Stay in each mode before asking user for another command. For example if user wants to add<br>  a bunch of contacts, enter ’add’ mode, add contacts manual, and explicitly exit add mode<br>  with ’exit’</li><li>Group contacts. Add ability to manage groups of contacts. Contacts may exist in multiple<br>  groups. Add an additional command set for working with groups, i.e add, remove, list groups,<br>  list contacts in group etc.</li><li>Import contacts from a csv file</li><li>Export contacts to YAML, XML, JSON, etc…</li><li>Associate an image with each contact. Add a command to display the contact’s image.</li><li>Add user login. Each user has a distinct set of contacts that is automatically loaded when the user logs in.</li><li>Use Object Oriented Programming to implement your project.</li></ul><h2 id="3-Submitting"><a href="#3-Submitting" class="headerlink" title="3 Submitting"></a>3 Submitting</h2><p>You should submit your code as a tarball. It should contain all files used in solving the problems presented in this lab. If you want to include hand drawings, scan and include as PDFs. The submitted file should be named</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cse107_firstname_lastname_contacts</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="selector-tag">Upload</span> <span class="selector-tag">your</span> <span class="selector-tag">tarball</span> <span class="selector-tag">to</span> <span class="selector-tag">Canvas</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Python完成final project，逻辑上较为复杂
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>算法代写：COMPSCI220-Assignment3-Graph-Algorithms</title>
    <link href="cplusplusdaixie.com/COMPSCI220-Assignment3-Graph-Algorithms.html"/>
    <id>cplusplusdaixie.com/COMPSCI220-Assignment3-Graph-Algorithms.html</id>
    <published>2023-06-09T21:55:50.000Z</published>
    <updated>2023-06-10T01:51:35.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-3-Graph-Algorithms"><a href="#Assignment-3-Graph-Algorithms" class="headerlink" title="Assignment 3: Graph Algorithms"></a>Assignment 3: Graph Algorithms</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please <span class="built_in">read</span> <span class="keyword">the</span> entire assignment <span class="keyword">before</span> starting.</span><br></pre></td></tr></table></figure><h2 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h2><p>In this assignment we want you to write simple graph algorithms forundirected<br>graphs. There are three algorithmic tasks. Each task should be coded up in a<br>separate program.</p><ol><li>Determine the order of the largest component.</li><li>Convert to adjacency matrix representation.</li><li>Compute the diameter.</li></ol><h3 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h3><p>Input for these problems consist of a sequence of one or more (undirected) graphs<br>taken from the keyboard (e.g. sys.stdin). Each graph is represented by an adja-<br>cency list. The first line is an integernindicating the order of the graph. This is<br>followed bynwhite space separated lists of adjacencies for nodes labeled 0 ton−1.<br>The input will be terminated by a line consisting of one zero (0). This line should<br>not be processed. Two sample input graphs are listed below.</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><h3 id="0-3"><a href="#0-3" class="headerlink" title="0 3"></a>0 3</h3><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><h3 id="1-4"><a href="#1-4" class="headerlink" title="1 4"></a>1 4</h3><h3 id="0-2"><a href="#0-2" class="headerlink" title="0 2"></a>0 2</h3><h3 id="1-3"><a href="#1-3" class="headerlink" title="1 3"></a>1 3</h3><h3 id="2-4"><a href="#2-4" class="headerlink" title="2 4"></a>2 4</h3><h3 id="0-3-1"><a href="#0-3-1" class="headerlink" title="0 3"></a>0 3</h3><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><h3 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h3><p>Output will be like the model answers given below to the console (e.g.sys.stdout).<br>Your program will only be correct if there is no difference between your output<br>and the model solution using an automated ’diff’ checker (thinkwindiff,vim -d,<br>etc). That is, any other output besides a sequence of answers required is awrong<br>program!</p><p>Output for Task 1</p><p>Graph 1 has a component of order 3.<br>Graph 2 has a component of order 5.</p><p>Output for Task 2</p><p>4<br>0 1 0 0<br>1 0 0 1<br>0 0 0 0<br>0 1 0 0<br>5<br>0 1 0 0 1<br>1 0 1 0 0<br>0 1 0 1 0<br>0 0 1 0 1<br>1 0 0 1 0<br>0</p><p>Output for Task 3</p><p>Graph 1 is disconnected.<br>Graph 2 has diameter 2.</p><p>Besides have a correct program your grade for this assignment will also be based<br>on how efficient (fast!) your program can handle the marker’s data. To get marks it<br>must complete with the correct answer within a few seconds on a reasonable sized<br>data set (e.g., expect more than two graphs with at least 1000 vertices).</p><h2 id="Submission-and-Due-Date"><a href="#Submission-and-Due-Date" class="headerlink" title="Submission and Due Date"></a>Submission and Due Date</h2><p>Submit your source code for your three programs to the CompSci 220 assignment<br>automarker<a href="https://www.automarker.cs.auckland.ac.nz/on" target="_blank" rel="noopener">https://www.automarker.cs.auckland.ac.nz/on</a> or before the end<br>of October 4th. Please see the help/FAQ subpage for further information.<br>To have a fair test on timing, we only allow implementations using Python for<br>this assignment. You should name your submissions liketask1.py..task3.py.</p><p>This assignment is worth 7.5% of your course grade. There will be two input cases<br>per task worth 3 marks (easy cases) and 2 marks (harder cases), respectively. You<br>can submit up to 10 times per task before getting 20% penalty (if you eventually<br>solve that task).</p>]]></content>
    
    <summary type="html">
    
      自选语言实现图算法，使用了相对比较便捷的Python完成。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="算法" scheme="cplusplusdaixie.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS177-Python-Programming-Lab-Prep8</title>
    <link href="cplusplusdaixie.com/CS177-Python-Programming-Lab-Prep8.html"/>
    <id>cplusplusdaixie.com/CS177-Python-Programming-Lab-Prep8.html</id>
    <published>2023-06-07T21:55:50.000Z</published>
    <updated>2023-06-07T21:58:02.132Z</updated>
    
    <content type="html"><![CDATA[<p>继续代写<a href="https://www.w3schools.com/python/" target="_blank" rel="noopener">Python</a>基础练习题，练习Python的基础使用方法，属于比较基础的Python作业。<br><img src="https://www.python.org/static/img/python-logo@2x.png" alt="Python"></p><h3 id="Lab-Prep-8"><a href="#Lab-Prep-8" class="headerlink" title="Lab Prep 8"></a>Lab Prep 8</h3><h2 id="Due-Date"><a href="#Due-Date" class="headerlink" title="Due Date"></a>Due Date</h2><p>This is an <strong><em>individual</em></strong> assignment is due by 11:59 pm on the night before your lab. You must complete this assignment on your own.</p><h2 id="Using-an-Entry-box"><a href="#Using-an-Entry-box" class="headerlink" title="Using an Entry box"></a>Using an Entry box</h2><p>In the past when we wanted to prompt the user for a values, we have used the input() function. This works well in text-based programs, but the challenge is to do this within a Python <em>Graphics</em> window.</p><p>The Python Graphics module offers the <em>Entry</em> object type as a way to allow the user to type in Strings allowing them to interact with the program. The <em>Entry</em> object has two parameters: a center Point and a<br>length. For example, if you wanted to define an <em>Entry</em> box centered at coordinates (100, 20) with a width of 10 characters:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myEntry = Entry(<span class="name">Point</span>(<span class="number">100</span>, <span class="number">20</span>), <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>As with all <em>Graphics</em> objects, the <em>Entry</em> box will need to be drawn after it’s defined. We can use the .getText() function to retrieve the <em>String</em> that has been typed in the <em>Entry</em> box.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">myString</span> = myEntry.getText()</span><br></pre></td></tr></table></figure><h2 id="The-Assignment"><a href="#The-Assignment" class="headerlink" title="The Assignment"></a>The Assignment</h2><p>Write a program named labprep8.py that creates a <em>Graphics</em> window matching the example shown here and meet the following parameters:</p><ul><li>All Python commands (except for import)<br>  should be within functions</li><li>Include a complete header, including the<br>  program name, your name and a description of<br>  the program’s function</li><li>The program should be fully commented with pseudocode throughout</li><li>The <em>Graphics</em> window should be square - with the title What Color, equal x,y dimensions and<br>  a light grey background fill</li><li>The Color for next Circle <em>Text</em> label and associated <em>Entry</em> object</li><li>The DRAW control represented by a light green <em>Rectangle</em></li><li>The QUIT control represented by a red <em>Rectangle</em></li><li>When a click is detected within the DRAW control:<br>  o If the <em>String</em> obtained from the <em>Entry</em> box is one of the following colors: red, blue, green, yellow, black, purple or pink<pre><code>§ A _Circle_ with a random radius between 10 - 25 is drawn at a random x,y coordinate within the _Graphics_ window.§ The _Circle’s_ fill color should be the _String_ obtained from the _Entry_ box</code></pre>  o Nothing should happen if the <em>String</em> obtained from the <em>Entry</em> box is not one of those colors</li><li>When a click is detected within the QUIT control, the <em>Graphics</em> window should close and the program should end without any errors.</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An functional example <span class="keyword">of</span> this program <span class="keyword">is</span> provided <span class="keyword">with</span> <span class="keyword">the</span> Lab Prep <span class="number">8</span> assignment <span class="keyword">on</span> Blackboard</span><br></pre></td></tr></table></figure><h2 id="Submit-your-completed-Lab-Prep-8"><a href="#Submit-your-completed-Lab-Prep-8" class="headerlink" title="Submit your completed Lab Prep 8"></a>Submit your completed Lab Prep 8</h2><ul><li>Submit your labprep8.py file to Lab Prep 8 on Blackboard</li><li>This assignment is due by 11:59 pm on the night before your lab meeting</li><li>This is an individual assignment – you may not work together</li></ul><h2 id="Lab-Prep-8-Grading-Rubric-Points"><a href="#Lab-Prep-8-Grading-Rubric-Points" class="headerlink" title="Lab Prep 8 Grading Rubric Points"></a>Lab Prep 8 Grading Rubric Points</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Program has correct filename labprep8.py, and a complete header as specified 1</span><br><span class="line">Program is fully documented using pseudocode comments 2</span><br><span class="line">Graphics window is created <span class="keyword">with</span> <span class="keyword">all</span> objects <span class="keyword">as</span> specified <span class="number">3</span></span><br><span class="line">A click <span class="keyword">on</span> the DRAW control results <span class="keyword">in</span> random Circle <span class="keyword">with</span> valid color specified <span class="keyword">in</span> Entry box <span class="keyword">object</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">No</span> Circles <span class="keyword">are</span> drawn <span class="keyword">if</span> invalid color <span class="keyword">is</span> <span class="keyword">in</span> the Entry box <span class="number">2</span></span><br><span class="line">A click <span class="keyword">on</span> the QUIT control closes the Graphics <span class="keyword">window</span> <span class="keyword">and</span> ends the program (<span class="keyword">no</span> <span class="keyword">errors</span>) <span class="number">2</span></span><br><span class="line"><span class="keyword">Style</span> / <span class="keyword">Format</span>: Program <span class="keyword">is</span> formatted well <span class="keyword">and</span> easy <span class="keyword">to</span> understand <span class="number">2</span></span><br><span class="line">Total Points <span class="number">15</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      继续代写Python基础练习题，练习Python的基础使用方法，属于比较基础的Python作业。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS177-Python-Programming-Lab-Prep7</title>
    <link href="cplusplusdaixie.com/CS177-Python-Programming-Lab-Prep7.html"/>
    <id>cplusplusdaixie.com/CS177-Python-Programming-Lab-Prep7.html</id>
    <published>2023-06-05T03:30:34.000Z</published>
    <updated>2023-06-05T03:47:21.779Z</updated>
    
    <content type="html"><![CDATA[<p>继续代写<a href="https://www.w3schools.com/python/" target="_blank" rel="noopener">Python</a>基础练习题，练习Python的基础使用方法，属于比较基础的Python作业。<br><img src="https://www.python.org/static/img/python-logo@2x.png" alt="Python"></p><h3 id="Lab-Prep-7"><a href="#Lab-Prep-7" class="headerlink" title="Lab Prep 7"></a>Lab Prep 7</h3><h2 id="Due-Date"><a href="#Due-Date" class="headerlink" title="Due Date:"></a>Due Date:</h2><p>This assignment is due Week 1 1 (Oct 27 th - Nov 1 st) by 11:59 pm on the night before your lab.</p><p>This assignment requires you to write a program utilizing functions that read data from two separate large text files manipulate it, create a <em>List of Lists</em> , then display a report and create a new file named analysis.txt containing number of occurrences. <em>Lab Prep 7 does not use the Graphics library.</em></p><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description:"></a>Problem Description:</h2><p>You are investigating an alien life form found frozen in the ice of Antarctica. A genetic sample has been isolated and the data from this sample is stored in two (2) files. The structure is very different from the types of life found on earth. Chemical analysis has determined that each compound chain is 1 million DNA “pairs” long.</p><p>You have two files containing 1 million characters representing the life form’s genetic chain separated into the left half (ChainLeft.txt) and right half (ChainRight.txt). The left half of the chain uses 4 different proteins (designated as c, m, t, or s) while the right half uses only 2 proteins (designated G or V). The compounds that make up each ‘strand’ or full chain of material are paired using one of 8 combinations: cG, mG, tG, sG, cV, mV, tV or sV.</p><p><strong>A</strong> <strong><em>partial</em></strong> <strong>sample of a chain:</strong> ( <em>Example: not from the actual data</em> )<br>ChainLeft.txt file: tsscmcsts<br>ChainRight.txt file: VGVVGGVVG</p><p><strong>DNA sequence after completing a left/right pairing</strong> :<br>tV, sG, sV, cV, mG, cG, sV, tV, sG</p><h2 id="The-Assignment"><a href="#The-Assignment" class="headerlink" title="The Assignment"></a>The Assignment</h2><p>Your assignment is to write a Python function that completes the following tasks:</p><ul><li>Read the contents of the two (2) files containing the left and right halves of the chain</li><li>Pair the left/right protein values into a two-character pair combination, storing them in a <em>List</em></li><li>Create a new <em>List of Lists</em> containing each of the possible protein combinations and the count of the<br>  number of occurrences each value</li><li>Using the values in the occurrences <em>List</em> , print an output report <strong><em>and</em></strong> create an output file named<br>  analysis.txt containing the results of your analysis</li></ul><h2 id="TO-DO-1-Setup-the-labprep7-py-program"><a href="#TO-DO-1-Setup-the-labprep7-py-program" class="headerlink" title="TO DO #1: Setup the labprep7.py program"></a>TO DO #1: Setup the labprep7.py program</h2><ul><li>Define a header with comments including your name, the program’s name and a description of the program’s function</li><li>Define a main() function</li><li>In the main() function, display a message describing the purpose of the program</li></ul><h2 id="TO-DO-2-The-match-function"><a href="#TO-DO-2-The-match-function" class="headerlink" title="TO DO #2: The match() function"></a>TO DO #2: The match() function</h2><p>The match() function accepts two filenames as arguments and <strong>return</strong> a <em>List</em> of combined protein pairs<br>in the DNA chain.</p><ul><li>Define a function named match() that accepts two (2) <em>String</em> arguments</li><li>Display the status message: ‘Reading and Processing Protein Pairs…’</li><li>Open and read the contents of the two files specified by the <em>String</em> arguments</li><li>Combine the matching values into a <em>List</em> of protein pairs<br>  <strong><em>NOTE</em></strong> <em>: The List of combined protein pairs will have 1 million entries similar to:</em><pre><code>[&apos;mG&apos;, &apos;mV&apos;, &apos;cV&apos;, &apos;cG&apos;, &apos;tV&apos;, &apos;mG&apos;, &apos;cV&apos;, &apos;mG&apos;,...]</code></pre></li><li>Close the two files</li><li><strong>Return</strong> the <em>List</em> of combined protein pairs</li></ul><h2 id="TO-DO-3-The-occur-function"><a href="#TO-DO-3-The-occur-function" class="headerlink" title="TO DO #3: The occur() function"></a>TO DO #3: The occur() function</h2><p>The occur() function accepts one <em>List</em> as an argument and creates a new <em>List</em> containing the number of<br>occurrences of each pair combination from the <em>List</em> argument</p><ul><li>Define a function named occur() that accepts one argument, the protein pair <em>List</em></li><li>Display the status message: ‘Counting Occurrences…’</li><li>Create a new <em>List of Lists</em> using the protein pair combinations and the number of times each<br>  occurs in the protein pair <em>List</em>.<br>  <strong>NOTE</strong> : The List will have 8 entries where <em>pair</em> is the 2 - character protein pair and <em>#occurs</em> is<br>  number of times that pair occurs<br>  [ [ <em>pair</em> , # <em>occurs</em> ], [ <em>pair</em> , # <em>occurs</em> ], … [ <em>pair</em> , # <em>occurs</em> ] ]</li><li><strong>Return</strong> the <em>List</em> of occurrences</li></ul><h2 id="TO-DO-4-Modify-the-main-function"><a href="#TO-DO-4-Modify-the-main-function" class="headerlink" title="TO DO #4: Modify the main() function"></a>TO DO #4: Modify the main() function</h2><p>To finish the program you need to add the commands to process the data files and create the output file.</p><ul><li>Modify main() to prompt the user for the two (2) file names containing the genetic data</li><li>Call the match() function providing the two filenames as arguments - don’t forget to assign the<br>  <em>List</em> <strong>returned</strong> by match() to a variable</li><li>Call the occur() function providing the <em>List</em> of protein pairs as an argument – don’t forget to assign the <em>List</em> <strong>returned</strong> by occur() to a variable</li><li>Display the values in the List <strong>returned</strong> by occur() matching the following format:</li><li>Display the message: ‘Creating the Output File: analysis.txt’</li><li>The analysis.txt file should include same text as the report: ‘Alien Protein Analysis’</li><li>Close the analysis.txt file</li><li>Display the message: ‘Processing Complete.’</li></ul><h2 id="Submit-your-completed-labprep7-py-program"><a href="#Submit-your-completed-labprep7-py-program" class="headerlink" title="Submit your completed labprep7.py program"></a>Submit your completed labprep7.py program</h2><p>Your Python program should be saved to a file named labprep7.py</p><ul><li>Attach your labprep7.py file to the <strong>Lap Prep 7</strong> assignment by 11:59 pm on the due date.</li><li>Click the blue “SUBMIT” button to complete the assignment</li></ul><h2 id="Lab-Prep-7-Grading-Rubric-Points"><a href="#Lab-Prep-7-Grading-Rubric-Points" class="headerlink" title="Lab Prep 7 Grading Rubric Points"></a>Lab Prep 7 Grading Rubric Points</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TODO <span class="string">#1</span>: <span class="keyword">Program</span> has proper header including <span class="keyword">name</span>/description <span class="keyword">and</span> <span class="keyword">is</span> named labprep7.py <span class="number">1</span></span><br><span class="line">TODO <span class="string">#1</span>: main() <span class="function"><span class="keyword">function</span> <span class="title">defined</span>, <span class="title">greeting</span> <span class="title">message</span> &amp; <span class="title">user</span> <span class="title">prompted</span> <span class="title">for</span> <span class="title">files</span> 2</span></span><br><span class="line"><span class="function"><span class="title">TODO</span> #2:</span> match() <span class="function"><span class="keyword">function</span> <span class="title">defined</span>, <span class="title">opens</span> <span class="title">and</span> <span class="title">reads</span> <span class="title">data</span> <span class="title">files</span> <span class="title">specified</span> <span class="title">by</span> 2 <span class="title">arguments</span> 2</span></span><br><span class="line"><span class="function"><span class="title">TODO</span> #2:</span> match() <span class="function"><span class="keyword">function</span> <span class="title">combines</span> <span class="title">matching</span> <span class="title">value</span> <span class="title">pairs</span> <span class="title">into</span> <span class="title">List</span> <span class="title">correctly</span>, <span class="title">returns</span> <span class="title">List</span> 2</span></span><br><span class="line"><span class="function"><span class="title">TODO</span> # 3 :</span> occur() <span class="function"><span class="keyword">function</span> <span class="title">defined</span>, <span class="title">accepts</span> <span class="title">protein</span> <span class="title">pair</span> <span class="title">List</span> <span class="title">as</span> <span class="title">argument</span> 1</span></span><br><span class="line"><span class="function"><span class="title">TODO</span> #2:</span> occur() <span class="function"><span class="keyword">function</span> <span class="title">creates</span> <span class="title">List</span> <span class="title">of</span> <span class="title">Lists</span> <span class="title">containing</span> <span class="title">the</span> # <span class="title">of</span> <span class="title">each</span> <span class="title">pair</span> <span class="title">occurrences</span> 2</span></span><br><span class="line"><span class="function"><span class="title">TODO</span> #4:</span> main()modified <span class="keyword">to</span> call match(), occur() <span class="keyword">and</span> display status messages <span class="number">2</span></span><br><span class="line">TODO <span class="string">#4</span>: main()displays report <span class="keyword">and</span> text <span class="keyword">file</span> based <span class="keyword">on</span> List returned by occur() <span class="keyword">as</span> specified <span class="number">2</span></span><br><span class="line">Style / Format: <span class="keyword">Program</span> <span class="keyword">is</span> formatted well <span class="keyword">and</span> easy <span class="keyword">to</span> understand <span class="number">1</span></span><br><span class="line">Total Points <span class="number">15</span></span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Figure <span class="number">1</span> : <span class="type">This</span> <span class="keyword">is</span> an example report – your results will be different</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      继续代写Python基础练习题，练习Python的基础使用方法，属于比较基础的Python作业。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS177-Python-Programming-Lab-Prep6</title>
    <link href="cplusplusdaixie.com/CS177-Python-Programming-Lab-Prep6.html"/>
    <id>cplusplusdaixie.com/CS177-Python-Programming-Lab-Prep6.html</id>
    <published>2023-06-04T01:28:44.000Z</published>
    <updated>2023-06-05T03:48:37.597Z</updated>
    
    <content type="html"><![CDATA[<p>代写<a href="https://www.w3schools.com/python/" target="_blank" rel="noopener">Python</a>基础练习题，练习Python的基础使用方法，属于比较基础的Python作业。<br><img src="https://www.python.org/static/img/python-logo@2x.png" alt="Python"></p><h3 id="Lab-Prep-6"><a href="#Lab-Prep-6" class="headerlink" title="Lab Prep 6"></a>Lab Prep 6</h3><p><strong>Due Date:</strong><br>This assignment is due before 11:59 pm on the night before your lab meeting</p><p><strong>Assignment Description:</strong></p><p>In this assignment you will write and submit the labprep6.py program. Complete and submit the file by 11:59pm on the night before your lab to receive full credit.</p><p><strong>Python Graphics Library:</strong><br>Carefully review the Graphics chapter in the Zelle text (Ch 4) covering this topic and the Python Graphics<br>library documentation found at: <a href="http://mcsp.wartburg.edu/zelle/python/graphics/graphics.pdf" target="_blank" rel="noopener">http://mcsp.wartburg.edu/zelle/python/graphics/graphics.pdf</a> before starting Lab Prep 6. If you haven’t already, download the Graphics module graphics.py from Blackboard. Remember that it must be in the same folder as labprep6.py</p><p><strong>Steps For This Assignment:</strong></p><ol><li>Setup your Python file labprep6.py with an appropriate comments header</li><li>Organize labprep6.py using comments for each block of planned code</li><li>In each block, write the necessary Python code to complete the task</li><li>Save, test, then upload your completed labprep6.py Python program to Blackboard</li></ol><p><strong>TO DO #1: Setup Your Python Program File labprep 6 .py</strong><br>In Python, the # sign indicates a comment, which documents and organizes your code. Python does not</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">execute these commented <span class="keyword">lines</span>; they are used <span class="built_in">to</span> make <span class="keyword">the</span> program easier <span class="built_in">to</span> understand. In <span class="keyword">the</span> Python IDLE</span><br><span class="line">editor, <span class="built_in">open</span> <span class="keyword">a</span> <span class="built_in">new</span> program window. At <span class="keyword">the</span> top <span class="keyword">of</span> <span class="keyword">the</span> <span class="built_in">file</span>, <span class="built_in">create</span> <span class="keyword">a</span> program header <span class="keyword">by</span> typing <span class="keyword">in</span> <span class="keyword">the</span> following</span><br><span class="line"><span class="keyword">text</span>:</span><br></pre></td></tr></table></figure><p><strong>TO DO #2: Organize labprep6.py with pseudo code comments</strong></p><p>Plan and comment your program. By now, you should have had enough<br>practice to writing good, descriptive pseudo code comments for each<br>section and function.</p><p><strong>TO DO #3: The main() Function</strong></p><p>Write a Python main() function that takes no arguments and returns no</p><p>values. This function should create a Graphics Window, of size 5 00x 500<br>pixels. Set the background to light grey. Create a red Square ( <em>Rectangle</em><br>with equal sides measuring 30) in the center of the Graphics Window.<br>An example is shown in <em>Figure 1</em>.<br><img src="/images/CS177-Python-Programming-Lab-Prep6/figure1.png" alt><br><em>Figure 1 : Graphics window with red Square</em></p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># CS 177 – labprep6.py</span></span><br><span class="line"><span class="meta"># &#123;insert your name, and Purdue ID here&#125;</span></span><br><span class="line"><span class="meta"># Following Coding Standards and Guidelines</span></span><br><span class="line"><span class="meta"># &#123;insert a description of the program here&#125;</span></span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure><p><strong>TO DO #4: Animating the square’s movement</strong><br>Edit your main() function, so that it now waits for the user to click anywhere within the <em>Graphics</em> window.</p><p>Once a mouse click is detected, the red square should move from its current location to the location of the<br>mouse click.</p><p>NOTE: To earn full credit, the square should not <em>disappear</em> and <em>reappear</em> to move across the screen – it must<br>appear to <em>move smoothly across the window</em> to the mouse click location. <em>An example of this animation is<br>shown with the Lab Prep 6 assignment on Blackboard.</em></p><p><strong><em>HINT: It could be helpful to write a separate function that animates the square which will be called<br>within the</em></strong> main() <strong><em>function after a mouse click.</em></strong></p><p>The user will be able to click in the Window to move the square five (5) times. After the square reaches the fifth<br>mouse click location, display a <em>Text</em> object in the center of the Window: “Click to Exit”. One additional<br>click closes the <em>Graphics</em> window and ends the program without error messages.</p><p><strong>Save and Submit your Completed labprep6.py File on Blackboard:</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Save your program <span class="keyword">with</span> <span class="keyword">the</span> <span class="built_in">file</span> <span class="built_in">name</span> labprep6.py, <span class="keyword">and</span> submit <span class="keyword">it</span> <span class="keyword">by</span> <span class="number">11</span>:<span class="number">59</span> pm <span class="keyword">on</span> <span class="keyword">the</span> night <span class="keyword">before</span> lab.</span><br></pre></td></tr></table></figure><p><strong>Lab Prep 6 Grading Rubric</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TODO #<span class="number">1</span>: <span class="function"><span class="keyword">Program</span></span> has proper filename and header including student <span class="keyword">name</span> and description <span class="number">1</span></span><br><span class="line">TODO #<span class="number">2</span>: Comments added for each section of code <span class="number">1</span></span><br><span class="line">TODO #<span class="number">3</span>: main() <span class="function"><span class="keyword">function</span></span> creates Graphics window and red square as specified <span class="number">2</span></span><br><span class="line">TODO # <span class="number">4</span> : Square animates correctly, moving smoothly to locations of <span class="number">5</span> mouse clicks <span class="number">3</span></span><br><span class="line">TODO # <span class="number">4</span> : <span class="string">"Click to Exit"</span> Text object appears after <span class="number">5</span> clicks, <span class="function"><span class="keyword">program</span></span> waits for mouse click <span class="number">1</span></span><br><span class="line">TODO #<span class="number">4</span>: Graphics window closes and <span class="function"><span class="keyword">program</span></span> ends without errors <span class="number">1</span></span><br><span class="line">Style / <span class="keyword">Format</span>: <span class="function"><span class="keyword">Program</span></span> is <span class="keyword">formatted</span> properly and easy to understand <span class="number">1</span></span><br><span class="line">Total Points <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your completed Python file <span class="keyword">should </span><span class="keyword">be </span>named labprep6.py <span class="keyword">and </span><span class="keyword">submitted </span>on <span class="keyword">BlackBoard.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      代写Python基础练习题，练习Python的基础使用方法，属于比较基础的Python作业。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Python" scheme="cplusplusdaixie.com/tags/Python/"/>
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：1305ENG-Engineering-Programming-Programming-Laboratory3-Loops</title>
    <link href="cplusplusdaixie.com/1305ENG-Engineering-Programming-Programming-Laboratory3-Loops.html"/>
    <id>cplusplusdaixie.com/1305ENG-Engineering-Programming-Programming-Laboratory3-Loops.html</id>
    <published>2023-06-01T11:19:13.000Z</published>
    <updated>2023-06-05T03:48:53.194Z</updated>
    
    <content type="html"><![CDATA[<p>代写<a href="https://www.w3schools.com/cpp/" target="_blank" rel="noopener">C++</a>基础练习题，练习C++的基础使用方法，属于比较基础的C++作业。<br><img src="https://www.runoob.com/wp-content/uploads/2015/01/cpp-mini-logo.png" alt="C++"></p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions:"></a>Instructions:</h3><font color="blue"><br>This lab will introduce one of most important tools available to programmers - loops. The three<br>different types of loops in C will be introduced and explained in this lab, along with more practice<br>of the things you have learned in previous weeks.<br></font><h3 id="Homework-Questions-for-presentation"><a href="#Homework-Questions-for-presentation" class="headerlink" title="Homework Questions (for presentation):"></a>Homework Questions (for presentation):</h3><p>These questions should be completed prior to the lab session. You may be called to present one of these questions in front of the class during the first half hour of the session, and this presentation will count for 5% of your final grade for the course. You will be called to do two such presentations during the trimester, at random times. Note that you will need to write and explain your solution on a whiteboard, not on a computer, so if you need to refer to code it should be on paper. Each<br>question should take only a few minutes to complete, and you may be asked a few simple questions while presenting. If you are not present in the laboratory when you are due to present, you will receive 0 for this assessment item.</p><ol><li>Write C code which prints out the numbers 1 to 10 to the screen, 1 per line, using a<br> WHILE loop.</li><li>Do the same as question 1 but using a DO..WHILE loop instead.</li><li>Do the same as question 1 but using a FOR loop.</li><li>Write a C program which adds up all the numbers between 1 and 50. Use any type of loop.</li><li>Write a C program that prompts the user to enter a number, and then prints out the<br> <strong>line “Hello”</strong> to the screen that many times.</li><li>Write a C program that continues asking the user to enter a number (integer) until <strong>they enter the number 7. Once that happens, the program should print “Goodbye” to</strong> the screen and terminate.</li></ol><h3 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h3><p>Loops are one of the most useful of programming constructs, allowing programs to repeat a sequence of statements many times. C has three loop constructs and although they are all similar in nature, they have a few differences which make them more useful in particular situations.</p><p>In general, there are two reasons loops are used. The first is when you would like to repeat an operation a fixed number of times. For example, if you wanted to find the largest number from a list of 10 numbers. To do this, we need to compare each number in the list to the current largest number, and if it is larger, replace it. So, the same operation is repeated 10 times. For these type of tasks, the for loop is generally the most appropriate.</p><p>The second type of loop is when you aren’t sure exactly how many times you need the statements run, but rather they should run until some condition is met. A very simple example of this would be a program which continues to add up numbers until a particular value is entered by the user (zero, negative, or some non-numerical value perhaps). In this case we don’t know exactly how many times it will run, but we know the condition for it to terminate. In such cases, the while loop or<br>do..while loops are generally the appropriate choice.</p><h3 id="While-Loops"><a href="#While-Loops" class="headerlink" title="While Loops"></a>While Loops</h3><p>The simplest of the C loop constructs is the while loop. This loop has a very simple syntax, but can still be used to do quite powerful operations. In fact, any loop can be rewritten as a while loop.</p><p>The syntax of the while loop is:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="comment">( _condition_ )</span>&#123; <span class="comment">// loop guard</span></span><br><span class="line">stateme<span class="symbol">nt1</span> ;</span><br><span class="line">stateme<span class="symbol">nt2</span> ; <span class="comment">// loop body</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>As you saw with if statements last week, you can also omit the braces from a while loop. However if this is done, only a single statement will be part of the loop. For this reason it is recommended that you always use the braces, even if there is only a single statement in the loop body.</p><p>The operation of the while loop is also quite straightforward. The condition is checked at the beginning of each iteration and evaluated as either TRUE or FALSE. If it is true, the loop body is executed, then the loop repeats from the start again, and the condition is checked again. If the condition is not true, the loop finishes and the program continues to the next statement. Note that because the condition is checked prior to the loop running, it is possible that the loop body does not run even once.</p><p>For example, the following program reads integer values from the user until zero is entered:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">1</span> ; <span class="comment">// note this must be set to a non-zero</span></span><br><span class="line"><span class="comment">// value to ensure the loop runs once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( number != <span class="number">0</span> )&#123; <span class="comment">// loop continues until number == 0</span></span><br><span class="line"><span class="built_in">scanf</span> ( “%d”, &amp;number ) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ( <span class="number">0</span> ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>Enter the program above and check that it runs correctly.</li><li>Modify the loop so that the user can enter any negative number to stop the program, rather than 0.</li></ol><p>One important thing to note about this loop is that the controlling variable, number, is modified during the loop body. If this does not happen, then it is not possible for the loop to terminate. This is<br>something that should be true for all loops (except ‘infinite’ loops), in order to terminate then it must be possible for the controlling variable(s) to be modified during the loop body. The loop must also be written in such a way that the variable is moving closer towards the termination condition, rather than away from it.</p><h3 id="Do-while-Loops"><a href="#Do-while-Loops" class="headerlink" title="Do..while Loops"></a>Do..while Loops</h3><p>The second type of loop in C is very similar to the while loop. In fact the only difference is that in a do..while loop the loop guard (condition) is checked at the end of each loop body iteration, rather than the beginning. This has the important result that the loop body must be executed at least once.<br>In the example above, for instance, using a do..while loop would mean that the number variable would not need to be assigned a non-zero value at the beginning, because the loop would always run once, and thus read a value from the user.</p><p>The syntax of the do..while loop is as follows:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">stateme<span class="symbol">nt1</span> ;</span><br><span class="line">stateme<span class="symbol">nt2</span> ;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">while</span> <span class="comment">( _condition_ )</span>;</span><br></pre></td></tr></table></figure></p><p>The do..while loop is the most appropriate choice where your loop must always run at least once, regardless of the starting value of the controlling variable(s). For instance, consider a program that<br>reads a non-negative integer from the user, then continually divides the number by two until it reaches zero, displaying each result to the screen. If the user enters zero, and a while loop is used,<br>the loop would instantly terminate and nothing would display. Using a do..while loop ensures that the loop executes at least once, displaying zero to the screen before terminating. The code would be:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> ( “Enter a non-negative number: “ ) ;</span><br><span class="line"><span class="built_in">scanf</span> ( “%d”, &amp;x ) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">x = x / <span class="number">2</span> ; <span class="comment">// divide number by 2</span></span><br><span class="line"><span class="built_in">printf</span> ( “%d\n”, x ) ; <span class="comment">// print to the screen</span></span><br><span class="line">&#125; <span class="keyword">while</span> ( x &gt; <span class="number">0</span> ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>Enter and run the program above, ensuring that is works properly for all non-negative<br> inputs including zero.</li><li>Modify the program to use a while loop instead, and note the different behaviour when<br> zero is entered.</li></ol><h3 id="For-Loops"><a href="#For-Loops" class="headerlink" title="For Loops"></a>For Loops</h3><p>The last type of loop in C, and the most complex, is the for loop. This loop has a somewhat more complicated syntax, as follows:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ( _init <span class="comment">; condition ; increment_ )&#123;</span></span><br><span class="line">statement1 <span class="comment">;</span></span><br><span class="line">statement2 <span class="comment">;</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first thing you’ll notice that’s different about this loop is that there are three parts within the brackets, separated by semicolons. You can leave any or all of these three sections empty, however the semicolons must always be present.</p><p>The operation of the for loop is very similar to a while loop, with a few differences. The middle part of the statement, condition, is in fact identical to the condition of a while loop, and in the same way determines when the loop will terminate (when it becomes false). This condition is also tested at the beginning of each loop body iteration, just like the while loop. If the first and third parts of the for<br>loop are omitted, the loop is in fact identical to a while loop.</p><p>The other two terms are what makes the for loop different. The first, the initialisation statement, runs once and once only, at the beginning of the first iteration, but before the loop guard is checked for the first time. This is typically used to setup a variable associated with the loop, but can be anything. The most common usage is to set a counting variable to 0 or other starting value.</p><p>The last statement in the for loop is known as the increment statement, because it is usually used to increment or decrement a variable. However it can be used for many other purposes as desired. The increment statement is run once per loop iteration, after the loop body.</p><p>The typical use of a for loop is to execute the loop a fixed number of times. In this case, the initialisation statement will set the counter to zero, the loop guard will check that it hasn’t reached the desired number of iterations yet, and the increment term will increase the value of the counter by one. For example, to print out “Hello world” ten times, the following code would be used:<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">i</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="built_in">i</span> = <span class="number">0</span> ;<span class="built_in">i</span> &lt; <span class="number">10</span> ; <span class="built_in">i</span>++ )&#123;</span><br><span class="line">printf ( “Hello world” ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Variables called i, j, and k are traditionally used as loop counter variables, although it is better programming practice to use more meaningful names.</p><ol start="5"><li>Complete the missing lines of the following program, which reads ten floating point<br> numbers from the user and calculates their average.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">void</span> )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">float</span> number, total = <span class="number">0</span>, average ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( ???? ; ???? ; ???? )&#123;</span><br><span class="line">    <span class="built_in">scanf</span> ( “%f”, &amp;number ) ;</span><br><span class="line">    ???????</span><br><span class="line">    &#125;</span><br><span class="line">    ???? ;</span><br><span class="line">    <span class="built_in">printf</span> ( “The average of the ten numbers is %f”, ???? ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As well as being used as a counter, the loop variable in a for loop can also be used in calculations,<br>printed to the screen, etc. A very simple example of this would be to add up all the numbers<br>between 1 and 100, while would be done by:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int i, total = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">for ( i = <span class="number">1</span> ; i &lt;= <span class="number">100</span> ; i++ )&#123;</span><br><span class="line">total += i ; <span class="comment">// add the value of i to the total</span></span><br><span class="line">&#125;</span><br><span class="line">printf ( “The sum of <span class="number">1</span> to <span class="number">100</span> is %d\n”, total ) ;</span><br></pre></td></tr></table></figure></p><p>The maximum value of the loop does not have to be a fixed number, it can be a variable entered by the user or obtained from elsewhere.</p><ol start="6"><li>Modify the code above so that the program adds up the numbers from 1 to x, where x is entered by the user (prior to the loop beginning).</li></ol><h3 id="Break-and-Continue"><a href="#Break-and-Continue" class="headerlink" title="Break and Continue"></a>Break and Continue</h3><p>Within the body of a loop, the break statement may be used to terminate the loop instantly. This does not check the loop guard condition, it instantly stops the loop and execution of the program continues as normal. Whilst this can be useful, it is not considered good programming practice and should be used only when other methods of stopping the loop aren’t practical.</p><p>The continue statement is similar, but rather than stopping the loop it only finishes the current iteration. The loop guard will then be checked to determine if the loop continues or not, and the loop proceeds as normal. Like break, this statement should be used sparingly as it is not considered good practice, but it can be useful in some situations.</p><h3 id="Infinite-Loops"><a href="#Infinite-Loops" class="headerlink" title="Infinite Loops"></a>Infinite Loops</h3><p>Sometimes it desirable to have a loop that runs forever, for example on a microcontroller system that will never be turned off but should repeat a certain task forever. This is most easily accomplished with a while loop, where the loop guard is simply ‘1’. Since this will always be true, the loop will never terminate, except if the break statement is used within it. If your program has an infinite loop, either deliberately or accidentally, you can press CTRL-C to stop it.</p><h3 id="Assessable-questions"><a href="#Assessable-questions" class="headerlink" title="Assessable questions:"></a>Assessable questions:</h3><ol><li><p>Write a C program which continually prompts the user to enter an integer, only stopping when the number 0 is entered. Your program should then display the total of all numbers entered.</p></li><li><p>Write a C program which prompts the user to enter an integer, and then displays all the factors of that integer. To do this, you will need to check every number from 1 up to the number entered and see if it is evenly divisible (remainder is zero). HINT: Use an if statement within the loop to check if the original number is divisible by the current loop counter, and if it is then display that number as a factor.</p></li><li><p>Write a C program which simulates a simple guessing game. The program should choose a random nu <strong>mber between 1 and 100 as the ‘secret’ number before the game</strong> begins. The user should then be continually prompted to enter their guess. After each guess is entered, your program should inform the user whether the secret number is higher or lower, or if they guessed correctly. This should continue until they finally get<br>the number right.</p></li></ol><p>HINT: To create the random number, use the following code at the beginning of your main function. You will also need to #include &lt;stdlib.h&gt; and #include &lt;time.h&gt; at the top of the program.<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">srand</span> ( <span class="keyword">time</span> ( NULL )) ;</span><br><span class="line"><span class="keyword">int</span> secret_num = <span class="keyword">rand</span>() % <span class="number">100</span> + <span class="number">1</span> ;</span><br></pre></td></tr></table></figure></p><p>Extra practice questions (complete in your own time):</p><ol><li>Write a C program which prompts the user to enter a line of text, then counts the number of digits (0-9), upper case letters, and lower case letters that the user enters. Hint: continue to read individual characters from the keyboard until the newline is read, and process each separately.</li><li>At the beginning of this lab, you copied a program which continually divided a number by two until it reached zero. Modify this program so that instead of printing out the new value of the number at each step, it instead prints out the remainder of that division by 2. The number should still be divided by 2 at each step, only the value that is printed should be changed. If you do this correctly, you will notice that the numbers printed represent the binary form of this number, in reverse order.</li><li>Using a similar approach as question 2, write a C program which adds up all the digits of a number entered by the user. For example, if the user enters 5296, the result should be 22. You will use an almost identical loop to that used in Q2.</li><li>Write a C program which calculates the factorial (!) of a number entered by the user. A factorial is defined as the product of all numbers from 1 up to and including the number itself. For example, 5! = 1 x 2 x 3 x 4 x 5 = 120. Note that factorials above about 13 are too large to compute, so you may get errors.</li></ol>]]></content>
    
    <summary type="html">
    
      代写C++基础练习题，练习C++的基础使用方法，属于比较基础的C++作业。
    
    </summary>
    
      <category term="C++" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
      <category term="C++" scheme="cplusplusdaixie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java代写 COMP285-Computer-Aided-Software-Development-Assignment2</title>
    <link href="cplusplusdaixie.com/COMP285-Computer-Aided-Software-Development-Assignment2.html"/>
    <id>cplusplusdaixie.com/COMP285-Computer-Aided-Software-Development-Assignment2.html</id>
    <published>2023-05-31T14:19:29.000Z</published>
    <updated>2023-06-05T03:49:43.833Z</updated>
    
    <content type="html"><![CDATA[<p>代写<a href="https://www.w3schools.com/java/" target="_blank" rel="noopener">Java</a>基础练习题，练习Class <a href="https://junit.org/junit5/" target="_blank" rel="noopener">Junit测试</a>的使用方法，属于比较基础的Java作业。<br><img src="https://www.runoob.com/wp-content/uploads/2013/12/java.jpg" alt="Java"></p><h3 id="OBJECTIVE"><a href="#OBJECTIVE" class="headerlink" title="OBJECTIVE"></a>OBJECTIVE</h3><p>This coursework involves the development and testing of some graphics routines in Java™ using the software tools, Eclipse and JUnit.</p><h4 id="Assessment-Information"><a href="#Assessment-Information" class="headerlink" title="Assessment Information"></a>Assessment Information</h4><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">Assignment number</td><td style="text-align:left">2 of 2</td></tr><tr><td style="text-align:left">Weighting</td><td style="text-align:left">50%</td></tr><tr><td style="text-align:left">Learning outcome assessed</td><td style="text-align:left">1.    Perform software development tasks using the techniques of Automated Testing, Continuous Integration and Test Driven Programming  2.    Use Ant, JUnit and Eclipse both individually and jointly as tools for Automated Testing, Continuous Integration and Test Driven Programming</td></tr><tr><td style="text-align:left">Purpose of assessment</td><td style="text-align:left">To assess the students ability to effectively use software development and testing tools</td></tr></tbody></table><p>This is the second of two assessments for COMP285 where each contributes 50% of the final module mark. </p><p>The general purpose is assessment of the following learning outcomes: </p><ol><li>Perform software development tasks using the techniques of Automated Testing, Continuous Integration and Test Driven Programming </li><li>Use Ant, JUnit and Eclipse both individually and jointly as tools for Automated Testing, Continuous Integration and Test Driven Programming with the main stress on JUnit testing and test driven programming with Eclipse.</li></ol><p>The goal of this assignment is to complete the testing of a partial implementation of a set of shape classes in the style of Test Driven Programming in Java by using Unit Testing with JUnit4 in the framework of Eclipse. You are also expected to use test driven development to add a new class which will represent a regular polygon.</p><p>You will need to finish/correct this implementation and testing framework. All tests should succeed and all classes should be functioning well.</p><p>Each shape class must implement the interface defined IShape.java, familiarise yourself with this source file. This contain comments explaining the required functionality for each shape.</p><p>The following classes have already been implemented but some only partially (there is code to add) and some contain bugs. You should have a Junit test class for each of the tested classes.</p><p>Point            Represents a point in 2-D</p><p>Shape            (abstract base class for all other shape classes)</p><p>Rectangle        Represents a rectangle</p><p>Circle            Represents a circle</p><p>RegularPolygon    Represents a regular polygon</p><p>Main    Entry point for the code, also has a rendering function which enables the shapes to be drawn using Java 2D.</p><h3 id="Presentation-of-work"><a href="#Presentation-of-work" class="headerlink" title="Presentation of work"></a>Presentation of work</h3><p>The project should be implemented in Eclipse and needs to use Junit to test the functionality of ALL the public methods of the classes contained in the package uk.ac.liv.comp285.cw1.shapes. </p><p>Please follow the package names given in the source file, do not remove any packages and do not define any new packages.</p><p>All the actions (such as creating the project, Java source file, JUnit test case, etc.) should be done by Eclipse wizards. </p><p>Please name all the test classes by adding in the word Test postfix to all test class names, so to test the Circle class use a class called CircleTest.</p><p>The general advice is to work first on something simple. Then there will be fewer problems since you can then depend on what you have already resolved and well-tested. </p><p>You should comment appropriately all the code you write. This way you can demonstrate your understanding of what they do. This will also be taken into account when marking the work.</p><p>All Java files presented by students should be compilable and appropriately formatted.  Your whole project directory should be zipped up and submitted.</p><p>This zip file should be submitted electronically by the deadline mentioned above via the Departmental Coursework Submission System.</p><p>Late submissions policy and Plagiarism/collusion aredescribed in Student’s Handbook, <a href="http://www.csc.liv.ac.uk/student/ugpdfhandbook.pdf" target="_blank" rel="noopener">http://www.csc.liv.ac.uk/student/ugpdfhandbook.pdf</a>, Sections, 5.8-5.10. </p><h4 id="Marking-Schema"><a href="#Marking-Schema" class="headerlink" title="Marking Schema"></a>Marking Schema</h4><p>This assignment contributes 50% of the final mark for this module, and will be marked according to the following marking scheme.</p><p>You must thoroughly test all the classes given and then fix/debug the code provided. To get full marks all methods need to work properly with a full range of appropriate tests to cover all required test partitions.</p><p>Please start with testing and debugging the Point class.</p><h4 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h4><p>10% All tests covered<br>10% All code working and complete</p><h4 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h4><p>10% All tests covered<br>10% All code working and complete</p><h4 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h4><p>10% All tests covered<br>10% All code working and complete</p><h4 id="RegularPolygon"><a href="#RegularPolygon" class="headerlink" title="RegularPolygon"></a>RegularPolygon</h4><p>15% All tests covered<br>15% All code working and complete</p><h4 id="Code-quality-and-commenting"><a href="#Code-quality-and-commenting" class="headerlink" title="Code quality and commenting"></a>Code quality and commenting</h4><p>10%</p>]]></content>
    
    <summary type="html">
    
      代写Java基础练习题，练习Class Junit测试的使用方法，属于比较基础的Java作业。
    
    </summary>
    
      <category term="Java" scheme="cplusplusdaixie.com/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="cplusplusdaixie.com/tags/Fundamentals/"/>
    
      <category term="Java" scheme="cplusplusdaixie.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>留学生计算机编程数学统计作业代写</title>
    <link href="cplusplusdaixie.com/hello-world.html"/>
    <id>cplusplusdaixie.com/hello-world.html</id>
    <published>2023-05-27T14:18:06.921Z</published>
    <updated>2023-06-05T03:40:42.085Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/title.jpg" alt="QQ"></p><h1 id="互联网这么大-茫茫人海中搜到小砖家即是一种缘分-真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间-语音给您讲清这个行业一切利弊-对您找代写非常有帮助！"><a href="#互联网这么大-茫茫人海中搜到小砖家即是一种缘分-真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间-语音给您讲清这个行业一切利弊-对您找代写非常有帮助！" class="headerlink" title=" 互联网这么大 茫茫人海中搜到小砖家即是一种缘分 真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间 语音给您讲清这个行业一切利弊 对您找代写非常有帮助！"></a><font color="red"><b> 互联网这么大 茫茫人海中搜到小砖家即是一种缘分 真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间 语音给您讲清这个行业一切利弊 对您找代写非常有帮助！</b></font></h1><p><b><br>咱们这都是我同学朋友同事，基本来自清华，上交，中科院，业余时间佛系接接单。<br>希望您（尤其是第一次找代写，而且有长期需求的朋友）抽些时间，仔细看看下面这段文字，真的很有帮助。</b></p><ol><li><p>咱们这是核武库 都是我弟兄们 CS+数统+部分经济学各方向精准匹配优先 一站式解决基本所有CS+数统科目，一般来说如果不是时间或者费用问题的话接不了的话，<br>其他地方更困难，尤其是难写的科目比如OS，算法分析，这么说吧，很多情况都是我这边紧急帮忙抢救被坑的弟兄，要看真实例子可以加我微信发你</p></li><li><p>切记不要直接转账 骗子很多的 (国内白天8点30以后会看手机） </p></li><li><p>淘宝确实很多是刷好评的，我这你只要有心仔细看应该能看出来是不是真实的（实际上我的客户主要都是老客户推荐的，淘宝从来不强制好评，一般写完直接发你，是否满意你随意评价）</p></li><li><p>可以翻翻我QQ空间（各类示例介绍，您会发现这儿是您温暖的家，长期合作，为您保驾护航）</p></li><li><p>我自己写了将近10年了，要相信我见过多少题（各个科目，我自己专门搞算法，机考这类），都是仔细评估过后看题报价的，费用正常来说有高有低，但是只要接了肯定保证质量尽心尽力做好</p></li><li><p>之所以列这么大一段文字，非常适合有长期需求CS+数学代写代考服务的，我见过太多其他地方被坑的起飞的经历了</p></li></ol><p>整理这段文字，也是看看能不能让部分客户少走些弯路，当然这种也只有亲历过才知道具体是怎么一回事。<br>就说这些吧~希望对您有所帮助 </p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>为了节省时间，方便报价，请<font color="red"><b>附上您的年级和课程名，如：</b></font></p><font color="red"><b>大二，Algorithm and Data Structure</b></font><p>需求直接<font color="red"><b>发送至 <a href="mailto:1926742804@qq.com" target="_blank" rel="noopener">1926742804@qq.com</a></b></font>，同时<font color="red"><b>VX我：349583866 或者 QQ我：1926742804（24小时在线）</b></font></p><table><thead><tr><th style="text-align:center"><b>微信二维码</b></th><th style="text-align:center"><b>QQ二维码</b></th></tr></thead><tbody><tr><td style="text-align:center"><img src="/images/wechat_code.jpg" alt="QQ"></td><td style="text-align:center"><img src="/images/qq_code.jpg" alt="微信"></td></tr></tbody></table><h2 id="部分淘宝评价展示"><a href="#部分淘宝评价展示" class="headerlink" title="部分淘宝评价展示"></a>部分淘宝评价展示</h2><p><img src="/images/feedback_1.png" alt="反馈1"></p><p><img src="/images/feedback_2.png" alt="反馈2"></p><p><img src="/images/feedback_3.png" alt="反馈3"></p><h2 id="部分客户微信QQ反馈展示"><a href="#部分客户微信QQ反馈展示" class="headerlink" title="部分客户微信QQ反馈展示"></a>部分客户微信QQ反馈展示</h2><p><img src="/images/user_feedback_1.jpg" alt="用户反馈1"><br><img src="/images/user_feedback_2.png" alt="用户反馈2"><br><img src="/images/user_feedback_3.png" alt="用户反馈3"><br><img src="/images/user_feedback_4.png" alt="用户反馈4"><br><img src="/images/user_feedback_5.png" alt="用户反馈5"><br><img src="/images/user_feedback_6.png" alt="用户反馈6"><br><img src="/images/user_feedback_7.png" alt="用户反馈7"><br><img src="/images/user_feedback_8.png" alt="用户反馈8"><br><img src="/images/user_feedback_9.png" alt="用户反馈9"><br><img src="/images/user_feedback_10.png" alt="用户反馈10"></p><h2 id="部分作品展示"><a href="#部分作品展示" class="headerlink" title="部分作品展示"></a>部分作品展示</h2><p><img src="/images/show_1.png" alt="作品1"></p><p><img src="/images/show_2.png" alt="作品2"></p><p><img src="/images/show_3.png" alt="作品3"></p><p><img src="/images/show_4.png" alt="作品4"></p><p>我们提供的是<font color="red"><b>精品专业定制服务(C语言代写|C++代写|Java代写|Matlab代写|Python代写|Haskell代写|Prolog代写|C#代写|JS代写|R代写|算法代写机考|机器学习代写|随机过程代写|时间序列代写|作业代写)。</b></font></p><h2 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a><a href="../about/">个人介绍</a></h2><p>国内<font color="red"><b>TOP5</b></font>高校计算机专业本科+硕士，一线工程师，专注于帮助留学生代写代写程序，解决各类<font color="red"><b>编程难题</b></font>。</p><font color="red"><b>多年经验，完成过各个国家、各个学院的各种程序，经验丰富，认真负责。</b></font><p>相比公司中介背后质量参差不齐的写手，我拥有<font color="red"><b>10年+代写代写经验，确保需求顺利完成。熟知各年级课程的得分点以及Coding Style，轻松帮您提分。 只要接了，质量一定有保证。</b></font></p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><font color="red"><b>只要能接，肯定尽心尽力做好</b></font><p>高端代写代写，<font color="red"><b>保证honor code，绝不违反Academic Integrity。</b></font></p><p>保证非中介，技术员直连，全程保持联络，<font color="red"><b>定点核弹爆破您的难题！</b></font></p><p>学生可以优惠，毕竟很多工具也是有学生版的嘛，如果您的理由充足到说服博主，甚至还可以<font color="red"><b>免费</b></font>喔！</p><font color="red"><b>带test的必全过，得分点的必全做</b></font>，能顺手做掉的bonus也帮您做。代码肯定是手写原创，过Moss查重。<br><br><font color="red"><b>免费提供售后服务</b></font>，包括代码运行，讲解答疑。<br><br>## 服务内容<br>Handle北美（美国、加拿大）、澳洲、英国以及其他国家的Computer Science编程需求<br><br><br>## 服务优势<br><br>微信 or QQ联系，直通技术人员，随时沟通，无中间客服。<font color="red"><b>博主直接看题，给您报价</b></font>，快速方便。<br><br>国内TOP高校本科研究生背景，技术过关，外企工作，英语流利，无语言压力，快速读懂题目。<br><br><font color="red"><b>个人代写，运转高效。紧急情况下可发动BAT Oracle Google Facebook(同学、同事）协同作战！</b></font><p>我们不是大机构。很多机构为了自己的利益不会让大家和写手直接沟通，这样可能造成题目理解有差异，有问题不能直接问等问题，<font color="red"><b>我们是挣点零花钱，不贪多，就想提供最好的服务，以求长期合作。</b></font></p><p>我很理解每一位在异乡求学的同学，很多时候工作之多，难度之大，简直天天泡在图书馆都赶不来一个个的due。</p><p>我利用这个平台帮助大家<font color="red"><b>解人燃眉之急，代码会写好注释，提供语音/电话讲解，也可以远程电脑调试。</b></font>尽最大努力让您真正理解程序，日后闲暇(Final)，也可拿出用之复习。</p><p>真正的<font color="red"><b>无中介费用</b></font>，欢迎您货比三家，支持淘宝/微店/PayPal/支付宝/微信支付。</p><p>我给您的不止是一个答案，还有我作为全栈工程师的经验，编程方法和技巧。</p><h2 id="服务范围"><a href="#服务范围" class="headerlink" title="服务范围"></a>服务范围</h2><font color="red"><b>Computer Science Everything</b></font><ul><li>C/C++程序代写</li><li>Matlab仿真及C++混编代写</li><li>IT代写</li><li>编程代写</li><li>Java代写</li><li>Python代写</li><li>数据结构 Data Structure 代写</li><li>算法Algorithm 代写</li><li>多线程Multi-threading pthread CUDA OPENCL MPI OPENMP代写</li><li>Network Socket程序 代写</li><li>Database SQL MongoDB NoSQL 代写</li><li>Operating System 操作系统 代写</li><li>Computer Architecture 计算机架构 代写</li><li>Web开发 网站设计 代写</li><li>数字图像处理、医学图像处理 代写</li><li>计算机视觉、游戏项目 代写 </li><li>各种项目原型、论文实验 代写</li><li>OpenGL 代写</li><li>OpenCV 代写</li><li>Boost库</li><li>Bullet物理引擎</li><li>Unity3D</li><li>大部分数学和统计科目</li></ul><h2 id="部分服务过的科目"><a href="#部分服务过的科目" class="headerlink" title="部分服务过的科目"></a>部分服务过的科目</h2><p>下面列举的都是在疫情期间考过试的（不同学期会有相同的需求所以备份了方便查询）<br><img src="/images/exam_1.jpg" alt="考试_1"><br><img src="/images/exam_2.jpg" alt="考试_2"><br><img src="/images/exam_3.jpg" alt="考试_3"><br><img src="/images/exam_4.jpg" alt="考试_4"><br><img src="/images/exam_5.jpg" alt="考试_5"><br><img src="/images/exam_6.jpg" alt="考试_6"><br><img src="/images/exam_7.jpg" alt="考试_7"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/title.jpg&quot; alt=&quot;QQ&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;互联网这么大-茫茫人海中搜到小砖家即是一种缘分-真心推荐每位新朋友加下QQ（1926742804）或者微信（349583866）简短花几分钟时间-语音给您讲清这个行业一切利
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ISE543-Predictive-Model</title>
    <link href="cplusplusdaixie.com/ISE543-Predictive-Model.html"/>
    <id>cplusplusdaixie.com/ISE543-Predictive-Model.html</id>
    <published>2023-05-25T02:07:49.000Z</published>
    <updated>2023-05-27T13:30:08.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>For this request, you are to create a predictive model in Azure ML Studio for the attached dataset and turn in a report as specified in the following pages. You should use whichever data preparation, modeling, and model assessment techniques that were covered in this portion of the class that you believe result in the best model.</p><p>You will be performing an Exploratory Data Analysis, Model Development and Training, and Model Deployment activities and preparing a report in PowerPoint form.</p><p>See the sample report that is part of this request for a template and example.</p><p>When you are complete, save this file as a PDF and upload it to Gradescope.</p><p>As a reminder, the work that you submit must be done individually. Unlike the request requests, working together is not permitted and the graders will be looking for identical solutions.</p><p>For this request, you will use Azure ML Studio Designer to build a classification model to predict the likelihood of a patient developing Chronic Heart Disease (CHD) in the coming ten years. The dataset you will be using has been distributed with this exam and consists of the variables on the following page.</p><h3 id="Note-On-Model-Deployment"><a href="#Note-On-Model-Deployment" class="headerlink" title="Note On Model Deployment"></a>Note On Model Deployment</h3><p>When complete, create a real-time endpoint for your model and copy the REST Endpoint URL and the authentication key into a Google drive spreadsheet that will be published.</p><p>The TAs will run scripts to independently evaluate your model performance sometime.</p><p>Once complete, a message will be posted on Piazza and you should then delete your endpoint.</p><h3 id="Final-Report-Structure"><a href="#Final-Report-Structure" class="headerlink" title="Final Report Structure"></a>Final Report Structure</h3><p>Please follow the provided template/example and structure your final report into the following three sections:</p><p>Exploratory Data Analysis</p><p>Model Development</p><p>Model Deployment</p><h3 id="Final-Report-Outline-Grading-Rubric"><a href="#Final-Report-Outline-Grading-Rubric" class="headerlink" title="Final Report Outline/Grading Rubric"></a>Final Report Outline/Grading Rubric</h3><p>Report contents</p><p>Attribute summary<br>Data cleansing - summary of decisions made<br>Data cleansing pipeline (portion of your overall pipeline)<br>Univariate analysis<br>Bivariate analysis (each variable vs the response variable)<br>Feature section/engineering decisions<br>Model pipeline screenshot<br>Model evaluation results screenshot<br>Inference pipeline screenshot<br>REST Endpoint URL and authentication key (in PPT and in Google drive spreadsheet)<br>Screenshot of scored test dataset<br>Model performance</p><p>Based on TAs calling your endpoint with test dat</p>]]></content>
    
    <summary type="html">
    
      使用Azure ML Studio对提供的数据集创建预测模型。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Machine Learning" scheme="cplusplusdaixie.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>COMP3620-Constraint-Satisfaction-Problems</title>
    <link href="cplusplusdaixie.com/COMP3620-Constraint-Satisfaction-Problems.html"/>
    <id>cplusplusdaixie.com/COMP3620-Constraint-Satisfaction-Problems.html</id>
    <published>2023-05-18T00:07:58.000Z</published>
    <updated>2023-05-27T13:29:18.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>Constraint Satisfaction Problems (CSPs) are a class of problems where, unlike the previous search problems we considered states have a simple representation.</p><p>CSPs determine whether a solution exists for a given constraint network. We will assume that you are familiar with the definitions and concepts presented in KRR lectures. We recommend that you get familiar with these before attempting the request.</p><h3 id="The-Solver"><a href="#The-Solver" class="headerlink" title="The Solver"></a>The Solver</h3><p>The given solver provides an implementation of Naive Backtracking. You can check out the code in backtracking_search.py. As an example, the command</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> solver.<span class="keyword">py</span> -v <span class="keyword">lex</span> -<span class="keyword">k</span> test_problems/sudoku_01.csp</span><br></pre></td></tr></table></figure><p>will solve the first of the 10 Sudoku puzzles. You should get the following output:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="string">$</span> <span class="string">python3</span> <span class="string">solver.py</span> <span class="string">-v</span> <span class="string">lex</span> <span class="string">-k</span> <span class="string">test_problems/sudoku_01.csp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Random Number Generator Seed:</span> <span class="number">8193</span></span><br><span class="line"><span class="attr">Parsing CSP file:</span> <span class="string">test_problems/sudoku_01.csp</span></span><br><span class="line"><span class="string">Success.</span></span><br><span class="line"><span class="string">Preprocessing...</span></span><br><span class="line"><span class="string">Preprocessing</span> <span class="string">made</span> <span class="number">0</span> <span class="string">requests.</span></span><br><span class="line"><span class="attr">Search algorithm:</span> <span class="string">Backtracking</span></span><br><span class="line"><span class="string">Solved</span> <span class="string">problem!</span></span><br><span class="line"><span class="attr">Nodes expanded:</span> <span class="number">409</span></span><br><span class="line"><span class="attr">Time:</span> <span class="number">0.002850055694580078</span></span><br><span class="line"><span class="string">Solution</span> <span class="string">found.</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="string">|</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="string">|</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">9</span> <span class="string">|</span> <span class="number">1</span> <span class="number">7</span> <span class="number">8</span> <span class="string">|</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">8</span> <span class="string">|</span> <span class="number">5</span> <span class="number">6</span> <span class="number">9</span> <span class="string">|</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="string">---------------------</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">1</span> <span class="string">|</span> <span class="number">2</span> <span class="number">8</span> <span class="number">3</span> <span class="string">|</span> <span class="number">4</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">3</span> <span class="string">|</span> <span class="number">7</span> <span class="number">5</span> <span class="number">1</span> <span class="string">|</span> <span class="number">6</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">2</span> <span class="number">7</span> <span class="string">|</span> <span class="number">4</span> <span class="number">9</span> <span class="number">6</span> <span class="string">|</span> <span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="string">---------------------</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="string">|</span> <span class="number">9</span> <span class="number">3</span> <span class="number">2</span> <span class="string">|</span> <span class="number">8</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">9</span> <span class="number">3</span> <span class="number">4</span> <span class="string">|</span> <span class="number">8</span> <span class="number">1</span> <span class="number">7</span> <span class="string">|</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">2</span> <span class="string">|</span> <span class="number">6</span> <span class="number">4</span> <span class="number">5</span> <span class="string">|</span> <span class="number">9</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>The argument -k displays the solution as a nicely formatted Sudoku board. The argument -v allows us to select which variable selection heuristic we will use to steer backtracking. Here we select lex, which is the trivial heuristic of returning variables in the order that they were declared in the input file test_problems/sudoku_01.csp.</p><p>You can get the full list of all the options by specifying the -h flag.<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line">$ python3 solver.py -h</span><br><span class="line">usage: solver.py [-h] [-o OUTPUT] [-s SOLUTION] [-S SEARCH] [-R RNG] [-v VAR] [-l VAL] [-p PRE] [-i INF] [-t MAX_STEPS] [-k] INPUT</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  INPUT                 The <span class="built_in">path to</span> <span class="keyword">the</span> input CSP <span class="built_in">file</span>.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, <span class="comment">--help            show this help message and exit</span></span><br><span class="line">  -o OUTPUT, <span class="comment">--output OUTPUT</span></span><br><span class="line">                        If <span class="keyword">given</span>, <span class="built_in">write</span> <span class="keyword">the</span> grounded CSP <span class="keyword">to</span> this <span class="built_in">file</span> (<span class="keyword">and</span> don't solve <span class="keyword">it</span>).</span><br><span class="line">  -s SOLUTION, <span class="comment">--solution SOLUTION</span></span><br><span class="line">                        If <span class="keyword">given</span>, <span class="built_in">write</span> <span class="keyword">the</span> satisfying request <span class="keyword">to</span> this <span class="built_in">file</span>.</span><br><span class="line">  -S SEARCH, <span class="comment">--search SEARCH</span></span><br><span class="line">                        Choose a search algorithm <span class="keyword">from</span> [backtracking, <span class="keyword">local</span>] (default: backtracking)</span><br><span class="line">  -R RNG, <span class="comment">--seed RNG    Select a seed for the random number generator (default: 8193)</span></span><br><span class="line">  -v VAR, <span class="comment">--var_heuristic VAR</span></span><br><span class="line">                        Choose a variable selection heuristic <span class="keyword">from</span> [lex, md, mrv, md-mrv, mrv-md] (default: lex)</span><br><span class="line">  -l VAL, <span class="comment">--val_heuristic VAL</span></span><br><span class="line">                        Choose a value selection heuristic <span class="keyword">from</span> [lex, lcvf] (default: lex)</span><br><span class="line">  -p PRE, <span class="comment">--preprocessing PRE</span></span><br><span class="line">                        Choose an inference function <span class="keyword">to</span> use <span class="keyword">as</span> a preprocessing step <span class="keyword">before</span> search: [arc]. If <span class="keyword">not</span> <span class="keyword">given</span>, no preprocessing <span class="keyword">is</span> used.</span><br><span class="line">  -i INF, <span class="comment">--inference INF</span></span><br><span class="line">                        Choose an inference function <span class="keyword">that</span> runs during search:[forward, arc]. If <span class="keyword">not</span> <span class="keyword">given</span>, no inference <span class="keyword">is</span> used.</span><br><span class="line">  -t MAX_STEPS, <span class="comment">--max_steps MAX_STEPS</span></span><br><span class="line">                        The maximum <span class="built_in">number</span> <span class="keyword">of</span> steps used <span class="keyword">for</span> Local Search (default: <span class="number">10000</span>)</span><br><span class="line">  -k, <span class="comment">--sudoku          Interpret the solution as Sudoku output and display it in the terminal.</span></span><br></pre></td></tr></table></figure></p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>The INPUT argument (the path to the csp file to be solved) always needs to go last,<br>In this request, we always use the backtracking algorithm. Thus you can ignore the SEARCH,RNG andMAX_STEPS options as they’re only used in local search.<br>The -p, –preprocessing option will have the solver to invoke the inference procedure PRE at the root node of the backtracking search.</p><h3 id="CSP-File-Format"><a href="#CSP-File-Format" class="headerlink" title="CSP File Format"></a>CSP File Format</h3><p>The solver can handle Constraint Networks where the variables have associated finite domains. It allows both binary and unary constraints as well as alldiff and allsame constraints. A special type of binary constraint, neq, allows the modeler to specify inequality constraints with little hassle.</p><h3 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h3><p>Comments<br>Lines starting with the character % are ignored by the parser.</p><p>Variables<br>Lines starting with var define the variables and their domains. For example:<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var QLD NSW VIC ACT SA : <span class="built_in">red</span> <span class="built_in">green</span> <span class="built_in">blue</span></span><br></pre></td></tr></table></figure></p><p>will create the variables QLD, NSW, VIC, ACT and SA, and give them all the same domain, the set {red, green, blue}. Note that an empty space before and after : is required.</p><h4 id="Binary-Constraints"><a href="#Binary-Constraints" class="headerlink" title="Binary Constraints"></a>Binary Constraints</h4><p>Arbitrary binary constraints are encoded in one single line as follows:</p><p>Higher-order Constraints<br>The solver supports two kinds of higher-order constraints featuring more than two variables in their scopes. These are internally compiled into binary constraints, where is the number of variables in the scope of the higher-order constraint.</p><p>The alldiff constraint indicates that all of the variables in the scope must have different values. For example, if we want ACT, NSW and SA to all have different colours, we can use the constraint:</p><p>1<br>alldiff ACT NSW SA<br>The allsame constraint indicates that all of the variables in the scope must have the same value. For example, if we want ACT, NSW and SA to all share the same colour, we can use the constraint:</p><p>1<br>allsame ACT NSW WA<br>As with unary and binary constraints, only one constraint can be specified per line.</p>]]></content>
    
    <summary type="html">
    
      使用AI算法，解决Constraint Satisfaction Problems.
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="cplusplusdaixie.com/tags/Algorithm/"/>
    
      <category term="AI" scheme="cplusplusdaixie.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>CSE536-User-Level-Thread-Management</title>
    <link href="cplusplusdaixie.com/CSE536-User-Level-Thread-Management.html"/>
    <id>cplusplusdaixie.com/CSE536-User-Level-Thread-Management.html</id>
    <published>2023-05-12T22:07:58.000Z</published>
    <updated>2023-05-27T13:28:56.380Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Brief-Description"><a href="#Brief-Description" class="headerlink" title="Brief Description"></a>Brief Description</h3><p>In this request, you will implement user-level threads (also called self-threads) for xv6 processes and make scheduling decisions inside the process based on different policies.</p><p>An xv6 process starts with only one kernel-supported thread. Within the process, we will divide this thread into several user-level threads. We will maintain one of these user-level threads as a user-level scheduler thread. This thread will make decisions regarding which user-level thread should execute at a certain time, based on different scheduling algorithms that we will choose.</p><p>Important note<br>If your request does not compile or your upload is corrupted, you will get a zero. Always double-check your submission.<br>Submit a zip file titled by your ASU username. For instance, if your username is adil, your file should be adil.zip.</p><h3 id="User-Level-Threading-Library-ULTLib"><a href="#User-Level-Threading-Library-ULTLib" class="headerlink" title="User-Level Threading Library (ULTLib)"></a>User-Level Threading Library (ULTLib)</h3><p>This library will create user-level threads for a process, schedule the threads to be executed, yield the CPU from a certain thread after a period of time, and destroy user-level threads when their task is completed. You must write the code for this library in the files: ulthread.c, ulthread_swtch.S, and ulthread.h.</p><p>Please follow the steps below to complete this task:<br>Library initialization<br>Important housekeeping must be done whenever a library is initialized. For this task, you must create a data structure (similar to proc kept by the kernel) to keep track of each user-level thread. You must decide on the contents of this data structure based on the information provided in this document. During initialization, also assign the first kernel-provided thread to be the user-level scheduler thread. Write the code for this part in the ulthread_init() function.</p><p>Thread creation<br>To create a thread, we need the following: (a) the starting function address where the thread begins execution, (b) initial arguments for the starting function, (c) the location of a stack that the thread will use during its execution, (d) the thread’s priority, and (e) a context save location (context) where the registers of the thread will be saved and restored on context switches. (a)-(d) will be provided by the user process when it calls the function ulthread_create(). However, the context save location must be created and maintained by the ULTLib. Hint: check how the xv6 kernel maintains context save locations for kernel self-threads. Once the thread is created, ULTLib should also track that the thread is now RUNNABLE for scheduling decisions.</p><p>Thread switch<br>The user-level scheduler thread must be called to schedule threads after creation and each time a user-level thread yields its CPU to a different thread. At these times, the user-level scheduler thread must (a) save its registers in it’s context and (b) restore registers from the next scheduled thread’s context. The thread whose registers are restored is chosen based on the scheduling policy.</p><p>Write an assembly function (ulthread_context_switch() in ulthread.S) that takes two pointersprevious context and next contextas arguments. The function must save the current thread’s registers at the location of previous context, then load the registers from the next context’s location. It must also set-up registers in such a way that function arguments are provided correctly when a thread starts.</p><p>Suggested reading(s)<br>RISC-V Function Argument Calling Conventions.</p><p>Thread yield and destroy<br>A user-level thread can give up its execution (using ulthread_yield()) and ask the user-level scheduler thread to schedule a different thread. Additionally, at the end of it’s execution, a thread will explicitly call ulthread_destroy() to signal that it has completed its task. At these points, ULTLib should track that the thread’s state has changed either to YIELD or FREE. Then, it should perform housekeeping tasks to maintain data structures, and finally switch back to the execution of the scheduler.</p><p>A user-level thread will decide when to yield based on clock timing information that it receives from the xv6 OS. To achieve this, you must write a new xv6 system call (ctime) that traps to the xv6 OS and returns the time from the RISC-V register r_time.</p><p>Thread scheduling decisions<br>The user-level scheduler thread decides which thread to schedule based on three algorithms: (a) round-robin, (b) first-come-first-serve, and (c) priority scheduling. The specific algorithm to use is provided during library initialization. Your goal is to write a scheduler that is aware of all these algorithms and decides the correct thread to execute whenever it is called based on the policy.</p><p>Testcases<br>You are only provided a single testcase for this request (namely test1). Please rigorously test your code using your own testcases for corner situations.</p><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><p>GIT Diff of Changes Required<br>Provided below is a sample of how many changes would be required to complete this request. Note that this would vary based on code styles</p><ul><li>kernel/syscall.c</li><li>kernel/syscall.h</li><li>kernel/sysproc.c</li><li>user/ulthread.c</li><li>user/ulthread.h</li><li>user/ulthread_swtch.S</li><li>user/usys.pl</li></ul><h3 id="Submitting-your-request"><a href="#Submitting-your-request" class="headerlink" title="Submitting your request"></a>Submitting your request</h3><p>Please zip the entire provided code directory and submit it to the Canvas under “request 3: CODE”.</p>]]></content>
    
    <summary type="html">
    
      为xv6进程实现用户级线程(User Level Thread)，并根据不同的策略，在进程内做出调度策略。
    
    </summary>
    
      <category term="C" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="OS" scheme="cplusplusdaixie.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>CSCI561-First-Order-Logic-Resolution</title>
    <link href="cplusplusdaixie.com/CSCI561-First-Order-Logic-Resolution.html"/>
    <id>cplusplusdaixie.com/CSCI561-First-Order-Logic-Resolution.html</id>
    <published>2023-05-05T09:37:23.000Z</published>
    <updated>2023-05-27T13:30:02.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h3><p>This is a programming request. You will be provided with sample inputs and outputs (see below). Please understand that the goal of the samples is to check that you can correctly parse the problem definition and generate a correctly formatted output. The samples are very simple and you should not assume that if your program works on the samples it will work on all test cases. There will be more complex test cases and it is your task to make sure that your program will work correctly on any valid input. You are encouraged to try your own test cases to check how your program would behave in some complex special case that you might think of. Since each request is checked via an automated A.I. script, your output should match the example format exactly. Failure to do so will most certainly cost some points. The output format is simple and examples are provided. You should upload and test your code on vocareum.com, and you will submit it there. You may use any of the programming languages and versions thereof provided by vocareum.com.</p><p>Grading<br>Your code will be tested as follows: Your program should take no command-line arguments. It should read a text file called “input.txt” in the current directory that contains a problem definition. It should write a file “output.txt” with your solution. Format for files input.txt and output.txt is specified below. End-of-line convention is Unix (since vocareum is a Unix system).</p><p>The grading A.I. script will, 50 times:</p><p>Create an input.txt file, delete any old output.txt file.<br>Run your code.<br>Compare output.txt created by your program with the correct one.<br>If your outputs for all 50 test cases are correct, you get 100 points.<br>If one or more test case fails, you lose 2 points for each failed test case. (Note that one test case involves only one query in this HW).<br>Note that if your code does not compile, or somehow fails to load and parse input.txt, or writes an incorrectly formatted output.txt, or no output.txt at all, or OuTpUt.TxT, you will get zero points. Please test your program with the provided sample files to avoid this. You can submit code as many times as you wish on vocareum, and the last submitted version will be used for grading.</p><h3 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h3><p>Today, your dad is opening his dream restaurant after working at a desk job for the last few decades. He has always been passionate about food, but there is one other thing he loves more: Money. Trying to cut some expenses, he came up with an amazing idea and convinced you to design an automated system to manage the restaurant for him. This automated system will take over most of the dining room duties: It will decide whether there is a table to seat the incoming customers, take their orders according to restaurant policies and current stock, and bring them their check once they are done eating. Using this system, your dad can instead spend most of his budget on an amazing chef and fresh ingredients. You are hoping the customers would love this concept and make the restaurant very popular!</p><p>You sit down with your dad to develop a beta version of the system. Having just taken CSCI561 last semester, you decide to implement it using first-order logic resolution. Current restaurant status, policies, ingredient stock and customer status will all be encoded as first order logic sentences in the knowledge base. The knowledge given to you contains sentences with the following defined operators:<br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NOT <span class="keyword">X</span>           ~<span class="keyword">X</span></span><br><span class="line"><span class="keyword">X</span> <span class="keyword">OR</span> <span class="keyword">Y</span>          <span class="keyword">X</span> | <span class="keyword">Y</span></span><br><span class="line"><span class="keyword">X</span> <span class="keyword">AND</span> <span class="keyword">Y</span>         <span class="keyword">X</span> &amp; <span class="keyword">Y</span></span><br><span class="line"><span class="keyword">X</span> IMPLIES <span class="keyword">Y</span>     <span class="keyword">X</span> =&gt; <span class="keyword">Y</span></span><br></pre></td></tr></table></figure></p><p>The program takes a query and provides a logical conclusion to whether it is true or not.</p><h4 id="Format-for-input-txt"><a href="#Format-for-input-txt" class="headerlink" title="Format for input.txt"></a>Format for input.txt</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">QUERY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">K</span> = <span class="string">NUMBER</span> <span class="attr">OF</span> <span class="attr">GIVEN</span> <span class="attr">SENTENCES</span> <span class="attr">IN</span> <span class="attr">THE</span> <span class="attr">KNOWLEDGE</span> <span class="attr">BASE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SENTENCE</span> <span class="attr">1</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">SENTENCE</span> <span class="attr">K</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The first line contains a query as one logic sentence (further detailed below). The line after contains an integer K specifying the number of sentences given for the knowledge base. The remaining K lines contain the sentences for the knowledge base, one sentence per line.</p><h4 id="Query-format"><a href="#Query-format" class="headerlink" title="Query format"></a>Query format</h4><p>The query will be a single literal of the form Predicate(Constant_Arguments) or<br>~Predicate(Constant_Arguments) and will not contain any variables. Each predicate will have between 1 and 25 constant arguments. Two or more arguments will be separated by commas.</p><h4 id="KB-input-format"><a href="#KB-input-format" class="headerlink" title="KB input format"></a>KB input format</h4><p>Each sentence to be inserted into the knowledge base is written in FOL using operators &amp;, |, =&gt;, and ~, with the following conventions:<br>&amp; denotes the conjunction operator.<br>| denotes the disjunction operator.<br>=&gt; denotes the implication operator.<br>~ denotes the negation operator.<br>No other operators besides &amp;, |, =&gt;, and ~ are used in the input to the knowledge base.<br>There will be NO parentheses in the input to the KB except to mark predicate arguments. For example: Pred(x,y) is allowed, but A &amp; (B | C) is not.<br>Variables are denoted by a single lowercase letter.<br>All predicates (such as Order(x,y) which means person x orders food item y) and constants (such as Broccoli) are case sensitive alphanumeric strings that begin with an uppercase letter.<br>Thus, when parsing words in the input to the KB, use the following conventions:<br>9.1. Single lowercase letter: variable. E.g.: x, y, z<br>9.2. First letter is uppercase and opening parenthesis follows the current word: predicate. E.g.: Order(x,y), Pred52(z)<br>9.3. Otherwise: constant. E.g.: Harry, Pizza123<br>Each predicate takes at least one argument (so, all predicate names are always followed by an opening parenthesis). Predicates will take at most 25 arguments. A given predicate name will not appear with different number of arguments.<br>Predicate arguments will only be variables or constants (no nested predicates).<br>There will be at most 100 sentences in the knowledge base.<br>See the sample input below for spacing patterns.<br>You can assume that the input format is exactly as it is described.<br>There will be no syntax errors in the given input.<br>The KB will be true (i.e., will not contain contradictions).<br>Note that the format we just specified is broader than both Horn form and CNF. Thus, you should first convert the given input sentences into CNF and then insert the converted sentences into your CNF KB for resolution.</p><h4 id="Format-for-output-txt"><a href="#Format-for-output-txt" class="headerlink" title="Format for output.txt"></a>Format for output.txt</h4><p>Your program should determine whether the query can be inferred from the knowledge base or not, and write a single line to output.txt:</p><p><answer><br>Each answer should be either TRUE if you can prove that the corresponding query sentence is true given the knowledge base, or FALSE if you cannot. This is a so-called “closed-world assumption” (things that cannot be proven from the KB are considered false).</answer></p><h4 id="Notes-and-hints"><a href="#Notes-and-hints" class="headerlink" title="Notes and hints"></a>Notes and hints</h4><p>Please name your program “request.xxx” where ‘xxx’ is the extension for the programming language you choose. (“py” for python3, “cpp” for C++11, and “java” for<br>Java).<br>If you decide that the given statement can be inferred from the knowledge base, every variable in each sentence used in the proving process should be unified with a Constant (i.e., unify variables to constants before you trigger a step of resolution).<br>All variables are assumed to be universally quantified. There is no existential quantifier in this request. There is no need for Skolem functions or Skolem constants.<br>Operator priorities apply (e.g., negation has higher priority than conjunction).<br>The knowledge base is consistent.<br>If you run into a loop and there is no alternative path you can try, report FALSE. For example, if you have two rules (1) ~A(x) | B(x) and (2) ~B(x) | A(x) and wanting to prove A(Teddy). In this case your program should report FALSE.<br>Note that the input to the KB is not in Horn form. So you indeed must use resolution and cannot use generalized Modus Ponens.</p><p>Example 1<br>For this input.txt:</p><p>Order(Jenny,Pizza)<br>7<br>Order(x,y) =&gt; Seated(x) &amp; Stocked(y)<br>Ate(x) =&gt; GetCheck(x)<br>GetCheck(x) &amp; Paid(x) =&gt; Leave(x)<br>Seated(x) =&gt; Open(Restaurant) &amp; Open(Kitchen)<br>Stocked(Hamburger)<br>Open(Restaurant)<br>Open(Kitchen)<br>your output.txt should be:</p><p>FALSE<br>Note that, equivalently, the following input.txt could be given, where the =&gt; symbols have been replaced using the definition of implication (P=&gt;Q is the same as ~P|Q):</p><p>Order(Jenny,Pizza)<br>9<br>~Order(x,y) | Seated(x)<br>~Order(x,y) | Stocked(y)<br>~Ate(x) | GetCheck(x)<br>~GetCheck(x) | ~Paid(x) | Leave(x)<br>~Seated(x) | Open(Restaurant)<br>~Seated(x) | Open(Kitchen)<br>Stocked(Hamburger)<br>Open(Restaurant)<br>Open(Kitchen)<br>and your output.txt should again be:</p><p>FALSE<br>Hint: you will need some pre-processing, like we have done here to convert from the first version of this example to the second version (we eliminated the implications), to ensure that your resulting KB is in CNF and can be used for resolution.</p><p>Example 2<br>For this input.txt:</p><p>Leave(Helena)<br>11<br>Seated(x) &amp; Stocked(y) =&gt; Order(x,y)<br>Order(x,y) =&gt; Ate(x)<br>GetCheck(x) &amp; HaveMoney(x) =&gt; Paid(x)<br>Ate(x) =&gt; GetCheck(x)<br>GetCheck(x) &amp; Paid(x) =&gt; Leave(x)<br>Open(Restaurant) &amp; Open(Kitchen) =&gt; Seated(x)<br>Stocked(Portabello) | Stocked(Tofu) =&gt; Stocked(VeganHamburger)<br>Stocked(Portabello)<br>Open(Restaurant)<br>Open(Kitchen)<br>HaveMoney(Helena)<br>your output.txt should be:</p><p>TRUE<br>Example 3<br>For this input.txt:</p><p>Order(Tim,Italian)<br>15<br>Seated(x) &amp; Stocked(y) =&gt; Order(x,y)<br>Order(x,y) =&gt; Ate(x)<br>GetCheck(x) &amp; HaveMoney(x) =&gt; Paid(x)<br>Ate(x) =&gt; GetCheck(x)<br>GetCheck(x) &amp; Paid(x) =&gt; Leave(x)<br>Open(Restaurant) &amp; Open(Kitchen) =&gt; Seated(x)<br>Stocked(Pasta) | Stocked(Pizza) =&gt; Stocked(Italian)<br>Stocked(Flour) &amp; Stocked(Cheese) =&gt; Stocked(Pizza)<br>Stocked(Penne) &amp; Stocked(Pesto) =&gt; Stocked(Pasta)<br>Open(Restaurant)<br>HaveMoney(Tim)<br>HaveMoney(Lauren)<br>Stocked(Penne)<br>Stocked(Flour)<br>Stocked(Cheese)<br>your output.txt should be:</p><p>FALSE<br>Example 4<br>For this input.txt:</p><p>Hangout(Leia,Teddy)<br>45<br>Likes(x,y) &amp; Likes(y,x) | Meet(x,y,z) =&gt; Hangout(x,y)<br>Leave(x,z) &amp; Leave(y,z) =&gt; Meet(x,y,z)<br>GetCheck(x,z) &amp; Paid(x,z) =&gt; Leave(x,z)<br>GetCheck(x,z) &amp; HaveMoney(x) =&gt; Paid(x,z)<br>Ate(x,y) =&gt; GetCheck(x,z)<br>Order(x,y) &amp; Good(y) =&gt; Ate(x,y)<br>Seated(x,z) &amp; Stocked(y,z) =&gt; Order(x,y)<br>OpenRestaurant(z) &amp; Open(Kitchen,z) &amp; HasTable(z) =&gt; Seated(x,z)<br>TableOpen(x,z) | TableOpen(y,z) =&gt; HasTable(z)<br>HasIngredients(y,z) &amp; Open(Kitchen,z) =&gt; Stocked(y,z)<br>~Bad(x) =&gt; Good(x)<br>Has(Dough,z) &amp; Has(Cheese,z) =&gt; HasIngredients(CheesePizza,z)<br>Has(Pasta,z) &amp; Has(Pesto,z) =&gt; HasIngredients(PestoPasta,z)<br>Has(Falafel,z) &amp; Has(Hummus,z) =&gt; HasIngredients(FalafelPlate,z)<br>Has(Rice,z) &amp; Has(Lamb,z) =&gt; HasIngredients(LambPlate,z)<br>Has(LadyFingers,z) &amp; Has(Mascarpone,z) =&gt; HasIngredients(Tiramisu,z)<br>Old(Cheese) | Burnt(CheesePizza) =&gt; Bad(CheesePizza)<br>Moldy(Pesto) =&gt; Bad(PestoPasta)<br>Bad(Lamb) | Soggy(Rice) =&gt; Bad(LambPlate)<br>Has(Dough,Bestia)<br>Has(Cheese,Bestia)<br>Has(Cheese,Dune)<br>Has(Pasta,Bestia)<br>Has(Pesto,Bestia)<br>Has(Falafel,Dune)<br>Has(Hummus,Dune)<br>Has(Rice,Dune)<br>Has(Lamb,Dune)<br>Has(LadyFingers,Bestia)<br>Has(Mascarpone,Bestia)<br>Burnt(CheesePizza)<br>Soggy(Rice)<br>~Bad(Tiramisu)<br>Bad(Lamb)<br>OpenRestaurant(Bestia)<br>Open(Kitchen,Bestia)<br>OpenRestaurant(Dune)<br>Open(Kitchen,Dune)<br>HaveMoney(Leia)<br>HaveMoney(Teddy)<br>Likes(Leia,Teddy)<br>Likes(Leia,Mary)<br>Likes(Teddy,Harry)<br>Likes(Harry,Teddy)<br>TableOpen(Patio,Bestia)<br>your output.txt should be:</p><p>TRUE</p>]]></content>
    
    <summary type="html">
    
      使用First Order Logic的方法，来解决逻辑学的AI问题。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="MPI" scheme="cplusplusdaixie.com/tags/MPI/"/>
    
      <category term="OpenMP" scheme="cplusplusdaixie.com/tags/OpenMP/"/>
    
  </entry>
  
  <entry>
    <title>CS714-Parallel-Design-Patterns</title>
    <link href="cplusplusdaixie.com/CS714-Parallel-Design-Patterns.html"/>
    <id>cplusplusdaixie.com/CS714-Parallel-Design-Patterns.html</id>
    <published>2023-04-29T01:58:01.000Z</published>
    <updated>2023-04-29T02:00:47.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="About-the-coursework"><a href="#About-the-coursework" class="headerlink" title="About the coursework"></a>About the coursework</h3><p>Part two of the coursework follows on from your initial work on part one. However, these two pieces are marked independently and your grade for part two will not depend on the answers given in part one.</p><p>In this part of the coursework you will:</p><p>Write parallel code which parallelises the nuclear engineer’s reactor core model using either geometric decomposition or the task-based parallelism pattern<br>Write a report that explains your implementation and performance<br>Your code should be written in Fortran, C or C++ and parallelised with MPI. You must base your parallel implementation upon the serial code which has been provided (either the C or Fortran version), with the results remaining unchanged.</p><p>The serial code implements a version of the reactor core simulation model.</p><p>Standard solution: Provide a parallel, distributed memory solution leveraging MPI, that follows either geometric decomposition or the task-based parallelism pattern correctly for the provided serial code, this is sufficient for a mark of up to around 65% o You will obtain higher marks in this range if you are able to demonstrate that your parallel solution running at scale is capable of significantly increasing the artificial number of neutrons limit in the simulation.<br>Excellent solution: To obtain marks beyond 65% and into the distinction (70%+) level then you should do at least one, or both, of:<br>A framework providing geometric or task-based parallelism for a generic simulation but containing no problem specific code for this model and that could be reused. Problem specific code provided separately that uses your framework to solve the problem for the nuclear engineer’s reactor model.<br>Provide a mixed OpenMP and MPI hybrid parallelisation, with OpenMP across cores within a NUMA region or node, and MPI distributed memory between processes.<br>Your code should compile and run on either Cirrus and/or ARCHER2, and at-least across multiple nodes (distributed memory parallelism). You can target ARCHER2 and/or Cirrus, and use any of the compilers available on those machines. Ensure you state which compiler you are using and target machine(s) in a README file submitted with your source code.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>Your code should:</p><p>Compile and run on either Cirrus and/or ARCHER2<br>Parallelise the nuclear engineer’s reactor core model based on the provided serial code leveraging at-least distributed memory parallelism via MPI and potentially mixed OpenMP with MPI for an excellent solution. Note that providing a shared memory only (OpenMP-only) parallelisation without MPI is not sufficient to be considered a standard solution.<br>Be clear and adopt a clean design.<br>Be packaged neatly with a README file describing how the code should be built and run. Should also include a makefile for building the code and submission script to run your executable on either Cirrus and/or ARCHER2 compute node(s). You should make it clear which machine your code will run on if it does not run on both.<br>Be adequately commented to a level that would allow others to work on your parallel code in the future.<br>Performance and scalability are important considerations in this assessment. Whilst the focus here is on the parallelisation, there are some aspects of the existing serial code which are less than optimal, and credit will be provided if you address these as part of your solution too. You are free to change any part of the serial code that you wish as long as the result is correct.</p><p>Output<br>As per the serial code, periodically a general summary of the status of the simulation should be displayed along with a final summary once the simulation terminates. This information is displayed by the serial code and must also be provided by your parallelised version. Furthermore, as per the serial code, a file should be generated which contains the state of the reactor core as the simulation progresses at specified points in time.</p><p>Suggested Configurations<br>There is a simulation configuration provided, config_simple.txt, which implements a small 1m by 1m reactor. You will see that even this takes a long time to simulate at the given accuracy. You are free to create your own configuration files and change any settings, for instance for performance scaling runs you might increase the size of the reactor core, the number of timesteps to increase the length of run or reduce the nanoseconds between timesteps to increase accuracy.</p><p>You will see an option MAX_NEUTRONS , this is an artificial limit on the number of neutrons set by the configuration in order to limit the complexity and hence the runtime. Ideally your parallelisation, on large core counts, will mean that this option can be significantly increased or removed.</p><p>The COLLISION_PROB_MULTIPLIER is another artificial setting which multiplies the probability of neutron fuel collision. This is required to produce fissions, firstly because we limit the number of neutrons artificially and secondly due to the simplification of some of the physics. Once you increase the number of neutrons then this multiplier can likely be reduced, but maybe not eliminated.</p><p>Report<br>Your report should mainly focus on the design of your implementation and the resulting performance you have obtained. You should explain how you have applied either the geometric decomposition or task-based parallelism pattern to the problem.</p><p>If you have developed a framework as part of an excellent solution, then you should document how it is designed to be used by the user and where the split between mechanism and policy lies. If you have undertaken hybrid OpenMP-MPI parallelisation, then you should explain your design and provide some performance comparison of this against MPI only to explore whether it is beneficial in this case.</p><p>Credit will be given in the report for exploring the performance and scaling properties of the parallelised code, for instance via weak or strong scaling experiments on either Cirrus or ARCHER2. A discussion about aspects of the code’s design that help or hinder performance will also be rewarded, along with highlighting any fundamental limitations.</p><p>A discussion around how you guarantee correctness of your model, will gain you some extra credit, but lengthy descriptions or explanations about the output are not required to gain a very good mark.</p><p>Serial code provided to you<br>The serial code is provided to you in both C and Fortran versions. You should start from this, and the code itself comprises a number of distinct features:</p><p>The main simulation code which contains the program entry point and much of the logic as described in the details of the model. It is probably easiest to focus on this part first, and I suspect you can mainly focus on this when applying your choice of geometric decomposition or task-based parallelism pattern.<br>Configuration parsing which reads the input configuration file and parses the options into a structure/user derived type. I don’t imagine you will need to change this much, but feel free to edit if it’s helpful in any way.<br>Simulation support functions which provide utility functionality to implement specific facets of the details of the model. You may or may not need to change this depending on the parallelisation/optimisations adopted.<br>The physics of the model are fairly simplistic, and this is fine for our purposes, I strongly suggest against making them more advanced as you will not obtain marks for doing so. Whilst I will give credit for optimising existing serial code that has not been written optimally, I do not expect you to undertake advanced algorithmic changes.</p><p>Furthermore, if you find bugs in the serial code then let me know and I will fix and push out an update for everyone on Learn.</p><p>Details of the nuclear engineer’s reactor core model<br>The model that the nuclear engineers have written exhibits the following behaviour:</p><p>The reactor core is represented as a cube in three dimensions and consists of numerous two-dimensional channels which are cuboid.<br>These channels run all the way down the reactor in the vertical (z) dimension and in the x and y dimensions are 20 cm. Channels are placed next to each other, so for instance in a reactor core of 1m3 there will be five rows of five channels, each 1 metre deep in vertical length.<br>Channels can contain nothing (they are empty), nuclear fuel assembly, control rod, a moderator, or a neutron generator. It is only possible for each individual channel to contain one of these.<br>A fuel assembly is made up of fuel pellets. Each pellet is x=40mm by y=40mm by z=2mm and weighs 1 gram. Fuel pellets are stacked on top of each other all the way down the fuel assembly channel.<br>The simulation progresses in timesteps, where a timestep is measured in nano seconds (which is 1e-9 seconds).<br>The size of each timestep (in ns) is configurable as an input parameter.<br>The simulation also contains lots of neutrons which are free to pass through the reactor core and are tracked. At every timestep, the code calculates the movement of each neutron and updates its position.<br>Once a neutron travels outside the reactor core it is deactivated and disappears from the simulation.<br>At every timestep, for each neutron, the code will check whether it has interacted with the contents of the reactor core.<br>If a neutron enters a fuel assembly channel, then the neutron’s absorption cross section is calculated which is determined by the neutron’s energy and the type of fuel in the reactor.<br>This cross section is then used to calculate the probability that the neutron has been absorbed by the fuel which also depends on the current number of atoms of that fuel in the pellet. If the neutron is absorbed, then the atom of fuel that it has been absorbed by gains an extra neutron (e.g., goes from U235 to U236) and the neutron disappears from the simulation.<br>If the neutron enters the moderator, then the neutron’s scattering cross section is calculated and absorption probability.<br>Based on these, if the neutron collides with the moderator’s atoms, then it is slowed down (slower neutrons are more likely to cause fission). If the neutron is absorbed by the moderator, then it disappears from the simulation.<br>If the neutron enters the control rod channel, then the code calculates whether the neutron has collided with the control rod.<br>Control rods can be lowered a certain amount into the reactor, so whether the neutron hits the control rod is based upon how far the rod has been lowered and the location of the neutron.<br>Any neutron-control rod collision results in absorption and the neutron disappears from the simulation.<br>At each timestep the state of the reactor core is updated<br>All atoms of U236 and Pu240 fission, each fission releases 200MeV of energy<br>There is an 85% chance that U236 splits into Barium and Krypton which releases 3 neutrons. Otherwise, it will split into Xenon and Strontium, releasing 2 neutrons.<br>There is a 73% chance Pu240 splits into Xenon and Zirconium releasing 3 neutrons. Otherwise, it will release a neutron and mutate into Pu239.<br>The ejected neutrons’ energy (between 0 and 20 MeV) and resulting velocity components in the x, y and z dimensions is random.<br>Neutron generators contain Californium-252 and this will release 23e12 neutrons per gram per second.<br>Every cm in height of the neutron generator is half a gram in weight.<br>Again, the resulting neutrons’ energy (between 0 and 20 MeV) and velocity components in the x, y and z dimensions is random.<br>The size and configuration of the reactor core (e.g., the type of each channel) is provided by the user via a configuration script.<br>Reactor fuel can be a mixture of U235, U238, Pu239 and the configuration script provides the percentage of these in fuel assemblies.<br>Only U235 and Pu239 will fission, U238 does not.<br>From these percentages the code calculates the number of atoms in each fuel pellet for each chemical, with other elements that are fission byproducts (Barium, Krypton, Xenon, Strontium and Zirconium) set to zero initially.<br>The moderator can be one of water, heavy water (deuterium) or graphite. Each has different neutron slowing and absorption properties. The weight of the moderator in each channel is provided in grams. o<br>For instance, water is more likely to slow neutrons but also much more likely to absorb them.<br>We want the moderator to slow down the neutrons to increase the probability of fission, but we do not want it to absorb neutrons.<br>The heavier the moderator then the more of it is present, this will raise the probability of neutron slowing and moderator absorption.<br>The percentage of how far each control rod has been inserted into the reactor core can be provided, and if this is omitted then it is assumed a zero value (i.e. the control rod is fully out of the reactor).<br>Due to limitations of the simulation (runtime and memory), the engineers have set a maximum number of neutrons that can be active at any one time.<br>This artificial limit impacts the ability for the simulation to undertake fusion, and-so they have also introduced an artificial absorption probability multiplier, which increases the probability that an individual neutron is absorbed by the fuel by a specific multiplication factor.<br>Ideally, the parallelisation of their code will mean that they can remove or significantly increase the maximum neutrons configuration limitation.<br>Periodically the state of the reactor should be appended to a file.<br>This should contain, the simulation time, amount of energy released via fission and for each fuel assembly the number of atoms of Uranium (235, 236 and 238), Plutonium (239 and 240), Barium, Krypton, Xenon (134 and 140), Strontium and Zirconium present.<br>The frequency of this reactor state storage is configurable by the user.<br>There should be frequent summaries of simulation progress printed to stdio<br>Which includes the current simulation time, the number of active neutrons, the number of fissions so far and total amount of energy released through fission.<br>The simulation will terminate when a predetermined number of timesteps is reached.<br>A short report is printed to stdio which reports the total number of fissions that have completed and associated energy release, along with the simulation code’s runtime.<br>An excellent solution<br>To obtain marks beyond around 65% and into the distinction (70%+) level then you will need to do at least one of the following activities:</p><p>A framework that splits mechanism from policy, where the mechanism of your geometric or task-based decomposition is provided in a generic, reusable manner so that other people could leverage it. Your problem specific code should call into the framework and utilise the framework to undertake all the parallelism. Problem specific code should be entirely abstracted from the mechanism of parallelisation, and you should make clear in your report the design of your framework, where the split between mechanism and policy lies, and how users would use your framework.<br>Provide a mixed OpenMP and MPI implementation which uses OpenMP across cores in a NUMA region and/or node, and MPI between these processes. You will need to ensure that MPI is initialised in thread mode (init_thread) and ensure that the threading mode you are using is supported by your MPI library (using query_thread). More information about OpenMP and MPI interoperability can be found at <a href="https://github.com/EPCCed/archer2-AMPP-2022-06-29/blob/master/slides/L06MPIandOpenMP.pdf" target="_blank" rel="noopener">https://github.com/EPCCed/archer2-AMPP-2022-06-29/blob/master/slides/L06MPIandOpenMP.pdf</a> with the Cirrus and ARCHER2 websites explaining how to submit jobs with a mixture of processes and threads. Your report should explain how you have mixed OpenMP and MPI and provide some performance comparison against an MPI only approach to highlight whether this benefits the simulation code of not.<br>Doing only one of these well is sufficient for distinction level marks, and you will receive higher marks if you do both. I am more forgiving of a limited implementation if you do both however, so if you provide a framework and hybrid parallelisation which on their own are fairly limited and would score lower than a distinction, because you have done both then together this could take you above the distinction (70%) mark level.</p><p>Having Difficulty?<br>If you are struggling to get all the aspects running in parallel, then you may wish to limit your parallelisation to a simpler subset of the functionality. For example, you could modify the serial code so that neutrons are static throughout the simulation and not dynamically created or destroyed. If this is the case, then you should state clearly in your report which simplifications you have made. A working code for a simplified model could gain as good a mark or better than a broken code attempting the full model.</p><p>A code that does not quite work might be good enough to pass as long as the ideas are correct, and the code is accompanied by a good quality report. If a non-working code is submitted, the report should explain the parts that do work, should describe the symptoms of why the program is not working and the steps taken to try and fix the problems.</p><p>If all else fails, use the report to describe how you would have parallelised the code given more time. Describe the code that you have submitted.</p>]]></content>
    
    <summary type="html">
    
      使用Open MPI, 编写并行代码，使用几何分解或基于任务的并行模式并行化核工程师的反应堆堆芯模型。
    
    </summary>
    
      <category term="C++" scheme="cplusplusdaixie.com/categories/C/"/>
    
    
      <category term="MPI" scheme="cplusplusdaixie.com/tags/MPI/"/>
    
      <category term="OpenMP" scheme="cplusplusdaixie.com/tags/OpenMP/"/>
    
  </entry>
  
  <entry>
    <title>CSCI561-Pente</title>
    <link href="cplusplusdaixie.com/CSCI561-Pente.html"/>
    <id>cplusplusdaixie.com/CSCI561-Pente.html</id>
    <published>2023-04-21T01:46:00.000Z</published>
    <updated>2023-05-27T13:30:02.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h3><p>This is a programming request. You will be provided sample inputs and outputs (see below). Please understand that the goal of the samples is only to check that you can correctly parse the problem definitions and generate a correctly formatted output that contains a valid, but not necessarily good (or the only possible) move. In most situations, several moves will be possible, so your move may differ from our example and still be perfectly valid. You should not assume that if your program works on the samples, it is a correctly implemented game-playing agent. It is your task to make sure that your program will work correctly on any valid input. You are encouraged to try your own test cases or have your program play against itself to check how your program would behave in some complex situations. Since each request submission is checked by a set of programs, your output should match the specified format exactly. Failure to do so will most certainly cost some points. The output format is simple and examples are provided. You should upload and test your code on vocareum.com, and you will submit it there. You may use any of the programming languages and versions thereof provided by vocareum.com.</p><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><p>Your code will be tested as follows: Your program should not require any command-line argument. It should read a text file called “input.txt” in the current directory that contains the current state of the game. It should write a file “output.txt” with your chosen move to the same current directory. Format for input.txt and output.txt is specified below. End-of-line character is LF (since vocareum is a Unix system and follows the Unix convention).</p><p>Note that if your code does not compile, or somehow fails to load and parse input.txt, or writes an incorrectly formatted output.txt, or no output.txt at all, or OuTpUt.TxT, you will get zero points. Anything you write to stdout or stderr will be ignored and is ok to leave in the code you submit (but it will likely slow you down). Please test your program with the provided sample files to avoid any problem.</p><h3 id="Project-description"><a href="#Project-description" class="headerlink" title="Project description"></a>Project description</h3><p>In this project, we will implement agent that plays the game of Pente, the two-player version of the abstract strategy board game. It is in the m,n,k-game family from which tic-tac-toe (3,3,3) and Connect Four also come from, where the players are trying to connect k pieces on the board before the other player does. Pente stands out from these games because it includes a piece capture mechanic, where the player can sandwich a pair of their opponent’s pieces and capture them. It is played on a 19x19 board, where pieces are placed on the intersection of the lines (like the game Go). White always opens the game (like in Chess). The players take turns putting pieces on the board until:<br>1) A player connects 5 of their pieces in a horizontal, vertical or a diagonal line, OR<br>2) A player makes 5 total captures (equals to 10 pieces of their opponent’s since pieces can only be captured in pairs).</p><p>The custodial capture mechanic, where a player flanks the opponent’s pieces with their own to capture them, only applies to pairs of the opponent’s pieces. Therefore, if the current board formation is XOO_ and player X plays their piece as XOOX, the O pieces are captured and the board becomes X_ <em>X. Note again that this only works for pairs of pieces, therefore X cannot capture their opponent’s pieces from a board like XOOO</em> or XO_.</p><p>Captures only happen when a capturing piece is placed. Therefore, if the board is XO_X and O places a piece in the free intersection, the board formation becomes XOOX and no capture happens by X.</p><p>More details on the game can be found at <a href="https://en.wikipedia.org/wiki/Pente" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Pente</a> and we will also go over the gameplay for you below (be careful, Wikipedia images show a 13x13 board). If you would like to try the game of Pente to understand the general gameplay, you can utilize the “Play the AI” option without having to log in at <a href="https://pente.org/join.jsp" target="_blank" rel="noopener">https://pente.org/join.jsp</a>. Note that these resources are just for you to familiarize yourself with the game, you should strictly follow the rules we outline below while coding your game-playing agent (there are several variants of the game).</p><p>The original Pente game is known to favor the first player. This is called the First Player<br>Advantage (FPA) and there has been many suggestions to level the playing field for the second player. A discussion about this can be found in: <a href="https://en.wikipedia.org/wiki/Pente#First_Player_Advantage" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Pente#First_Player_Advantage</a></p><p>We will be employing certain rules that have been used in the past in Pente tournaments to make this game fairer for the second player. More details of these can be found below. These will also help us determine how winners are determined in student competitions.</p><h4 id="Setup-of-the-game"><a href="#Setup-of-the-game" class="headerlink" title="Setup of the game"></a>Setup of the game</h4><p>The setup of the game is as follows:</p><p>Each player plays as white or black.<br>The board consists of an 19x19 grid of squares.<br>Before the game starts, the board is empty.<br>White always opens the game.<br>First piece (White) must be placed in the middle of the board.<br>The second move of White (first player) cannot be more than 3 intersections away from their first piece (center). This is one of the rules that alleviates the first player advantage (FPA).<br>Pieces can be placed in any empty intersection (apart from the first player restrictions explained above).<br>Placed pieces cannot be removed from the board unless they are captured.<br>Here’s the visualization of an empty board and an example start, just after White has placed their second piece following the anti-FPA restriction.</p><p>As can be seen in the right image above, White has placed their 2nd piece 3 intersections away which is the maximum possible amount for their second move. In following turns, pieces can be placed in any empty intersection, but your agent should be able to figure out which is best.</p><h4 id="Play-sequence"><a href="#Play-sequence" class="headerlink" title="Play sequence"></a>Play sequence</h4><p>We first describe the typical play for humans. We will then describe some minor modifications for how we will play this game with artificial agents.</p><p>Create the initial board setup according to the above description.<br>Players randomly determine who will play White/Black. White will play first.<br>During their turn, each player places a single piece of one’s own color on the board:<br>Once placed, the pieces cannot be removed from their intersection unless they are captured by the opponent.<br>A simple move:<br>Can be played on any empty intersection (including border intersections).<br>If playing White, player must place their 1st piece in the center of the board and their 2nd piece no more than 3 intersections away from the 1st piece.<br>A capture move:<br>Is played next to a pair of the opponent’s pieces such that they are flanked (sandwiched) by one of the player’s pieces. The opponent’s pieces are captured by the player when this happens. A sample capture can be seen below:<br>The capture can be made for pieces that are horizontally, vertically, or diagonally oriented.<br>When capture happens, the pair of pieces belonging to the opponent are removed from the board and added to the player’s capture pile.<br>One capture move can be used to capture one or more pairs of pieces from the opponent. Sample of this can be seen below:<br>Note that captures only happen when both of the opponent’s pieces are on the board when a capturing move is made. Therefore, if the board state is XO_X and O moves to make it XOOX, the pair of O pieces are not captured by X. An example for this is below.<br>If the current play results in a board where the active player has 5+ connected pieces on the board OR has 5 pairs (or 10 pieces) total captured from their opponent, the game ends. Otherwise, play proceeds to the other player.<br>If above conditions are not met, and there is no more room left on the board to play a piece, the game ends in a draw.</p><h3 id="Playing-with-agents"><a href="#Playing-with-agents" class="headerlink" title="Playing with agents"></a>Playing with agents</h3><p>In this request, your agent will play against another agent, either implemented by the TAs, or by another student in the class.</p><p>For grading, your agent will play against two different agents implemented by the TAs. 10 full games will be against a random agent (this should be easy for your agent to beat), and another 10 full games will be against a simple minimax agent with no alpha-beta pruning. There will be a limited total amount of play time available to your agent for the whole game (e.g., 100 seconds), so you should think about how to best use it throughout the game. This total amount of time will vary from game to game. Your agent must play correctly (no illegal moves, etc.) and beat the reference agents to receive 5 points per game. Your agent will be given the first move on 12 of the 20 games. In case of a draw, the agent with more remaining play time wins. Note that, while playing games, you should think about how to divide your remaining play time across possibly many moves throughout the game.</p><p>In addition to grading, we will run a competition where your agent plays against agents created by the other students in the class. This will not affect your grade, but it would look very good on your Resume if you finish in the top 10, or are the grand winner!</p><h3 id="Agent-vs-agent-games"><a href="#Agent-vs-agent-games" class="headerlink" title="Agent vs agent games"></a>Agent vs agent games</h3><p>Playing against another agent will be organized as follows (both when your agent plays against the reference minimax agent, or against another student’s agent):</p><p>A master game playing engine will be implemented by the grading team. This engine will:</p><p>Create the initial board setup according to the above description.<br>Assign a player color (Black or White) to your agent. The player who gets assigned White will have the first move.<br>Then, in sequence, until the game is over:<br>The master game playing engine will create an input.txt file which contains the current board configuration, which color your agent should play, and how much total play time your agent has left. This file will also contain number of pieces captured by each agent until that point in the game. More details on the exact format of input.txt are given below.<br>We will then run your agent. Your agent should read input.txt in the current directory, decide on a move, and create an output.txt file that describes the move (details below). Your time will be measured (total CPU time). If your agent does not return before your time is over, it will be killed and it loses the game.<br>Your remaining playing time will be updated by subtracting the time taken by your agent on this move. If time left reaches zero or negative, your agent loses the game.<br>The validity of your move will be checked. If the format of output.txt is incorrect or your move is invalid according to the rules of the game, your agent loses the game. (Reminder: Any empty spot on the board is a valid move, except for the rules for the first two moves of the white player.)<br>Your move will be executed by the master game playing engine. This will update the game board to a new configuration.<br>The master game playing engine will check for a game-over condition. If one occurs, the winning agent or a draw will be declared accordingly.<br>The master game playing engine will then present the updated board to the opposing agent and let that agent make one move (with the same rules as just described for your agent; the only difference is that the opponent plays the other color and has its own time counter).<br>Game continues until an end condition is reached.<br>Input and output file formats<br>Input: The file input.txt in the current directory of your program will be formatted as follows:<br>First line: A string BLACK or WHITE indicating which color you play. White will always start the game.<br>Second line: A strictly positive floating point number indicating the amount of play time remaining for your agent (in seconds).<br>Third line: Two non-negative 32-bit integers separated by a comma indicating the number of pieces captured by White and Black players consecutively. Caution, it will always be ordered as first captured by White, then by Black, irrespective of what color is given in the first line.<br>Next 19 lines: Description of the game board, with 19 lines of 19 symbols each:</p><p>w for a cell occupied by a white piece<br>b for a cell occupied by a black piece<br>. (a dot) for an empty intersection<br>For example:</p><p>BLACK<br>100.0<br>0,0<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>………w………<br>……….b……..<br>………w.bw……<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>In this input.txt example, your agent should play a move as the Black agent and has 100.0 seconds. The board configuration is 5 turns into the game. There’s a capture condition for White, so your agent could likely choose to block that by putting their piece in the red highlighted position on the board.</p><p>Output: The format we will use for describing the square positions is borrowed from the notations from Pente.org, where every column is described by a letter and every row is described by a number. The position for a given square is given as the concatenation of these. Here’s a useful visualization on how we identify each intersection for the 19x19 Pente board:</p><p>Using the above image as reference, in the input.txt sample given above, White has pieces on 10K, 10N and 12K, while Black has pieces on 11L and 10M. Using this type of notation for the cells on our gameboard, the file output.txt which your program creates in the current directory should be formatted as follows:</p><p>1 line: PIECE_POS which describes your move with an integer (1-19) and an uppercase letter (A-T) concatenated.</p><p>For example, for the red highlighted move in the input sample, output.txt may contain:<br>9N</p><p>The resulting board would look like this, given the above input.txt (the master game playing engine will compute this and it is not part of output.txt):</p><p>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>………w………<br>……….b……..<br>………w.bw……<br>…………b……<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>……………….<br>Notes and hints<br>Please name your program “request.xxx” where ‘xxx’ is the extension for the programming language you choose (“py” for python, “cpp” for C++11, and “java” for Java).<br>The board you will be given as input will always be valid and will have w and b letters, as well as . (standing for empty cells).<br>Likely (but not guaranteed), total play time will be 5 minutes (300.0 seconds) when playing against another agent.<br>Play time used on each move is the total combined CPU time as measured by the Unix time command. This command measures pure computation time used by your agent, and discards time taken by the operating system, disk I/O, program loading, etc. Beware that it cumulates time spent in any threads spawned by your agent (so if you run 4 threads and use 400% CPU for 10 seconds, this will count as using 40 seconds of allocated time).<br>If your agent runs for more than its given play time (in input.txt), it will be killed and will lose the game.<br>You need to think and strategize how to best use your allocated time. In particular, you need to decide on how deep to carry your search, on each move. In some cases, your agent might be given only a very short amount of time (e.g., 5.2 seconds, or even 0.01 seconds), for example towards the end of a game. Your agent should be prepared for that and return a quick decision to avoid losing by running over time. The amount of play time that will be given in input.txt will always be ]0, but it could be very small if you are close to running out of time.<br>To help you with figuring out the speed of the computer that your agent runs on, you are allowed to also provide a second program called calibrate.xxx (same extension conventions as for request.xxx). This is optional. If one is present, we will run your calibrate program once (and only once) before we run your agent for grading or against another agent. You can use calibrate to, e.g., measure how long it takes to expand some fixed number of search nodes, or to benchmark the CPU speed in any other way you like.<br>You can then save this into a single file called calibration.txt in the current directory. When your agent runs during grading or during a game, it could then read calibration.txt in addition to reading input.txt, and use the data from calibration.txt to strategize about search depth or other factors. Please aim for no more than 5 minutes to run your calibrate program. A few seconds (e.g., expand 10,000 nodes) is usually enough to get a good estimate of the CPU speed.<br>You need to think hard about how to design your eval function (which gives a value to a board when it is not game over yet).<br>You are allowed to maintain persistent data across moves during a game, by writing such data to a single file called playdata.txt in the current directory. Before a new game starts, the master game playing engine will delete any playdata.txt file. So, on your first move, this file will not exist, and you should be prepared for that. Then, you can write some data to that file at the end of a move and read that file back at the beginning of the next move.<br>As mentioned, there is some first player advantage in this game for two agents with perfect play (even with our rules for the first two White moves). Therefore, when playing against a reference agent, we will give your agent the first move for 6 of the 10 games. In the competition, we will play two agents against each other for an even number of games giving each the first player for half of the games, and advance both agents to the next round of the competition if they both win or draw on half of the games. If an agent loses more than half of the games, it will be eliminated and only the other agent will move to the next round of the competition. We may end up with several equivalent winners of the competition.<br>The random agent created by the TAs will likely not be uniformly random over the whole board, but may choose randomly between several candidate locations, for example all locations adjacent to pieces already on the board. The minimax TA agent will not use alpha-beta and will likely be capped at a low lookahead depth; but it will do adaptive depth choice on every move to avoid running out of time (e.g., use depth 3 when ]50s remains, depth 1 when [ 3s, otherwise depth 2).</p>]]></content>
    
    <summary type="html">
    
      给游戏Pente写AI，编程语言C++/Java/Python任选，使用至少Alpha-beta算法。
    
    </summary>
    
      <category term="Python" scheme="cplusplusdaixie.com/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="cplusplusdaixie.com/tags/Algorithm/"/>
    
      <category term="Game" scheme="cplusplusdaixie.com/tags/Game/"/>
    
      <category term="Artificial Intelligence" scheme="cplusplusdaixie.com/tags/Artificial-Intelligence/"/>
    
  </entry>
  
</feed>
