<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2022-09-14T23:45:19.087Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS162-File-IO</title>
    <link href="https://tk1307993.coding.me/CS162-File-IO.html"/>
    <id>https://tk1307993.coding.me/CS162-File-IO.html</id>
    <published>2022-09-14T23:43:57.000Z</published>
    <updated>2022-09-14T23:45:19.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In order to get credit for the lab, you need to be checked off by the end of lab. You can earn a maximum of 5 points for lab work completed outside of lab time, but you must finish the lab before the next lab. For extenuating circumstances, contact your lab TAs and the instructor.</p><p>This lab is worth 10 points total. Here’s the breakdown:</p><p>4 point: Design for the problem<br>6 points: Implement your design</p><h3 id="Step-1-Design"><a href="#Step-1-Design" class="headerlink" title="Step 1: Design"></a>Step 1: Design</h3><p>In this lab, you will practice reading and writing to a file, a.k.a. File I/O. You can copy and paste or download this example file.</p><p>The input file provides details for a student database in the following format:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Number_of_students</span><br><span class="line">ID_Number Student_First_Name Student_Last_Name Major</span><br><span class="line">...&lt;Repeats n <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">times</span>&gt;...</span><br><span class="line">ID_Number Student_First_Name Student_Last_Name Major</span><br></pre></td></tr></table></figure></p><p>Your program will read specific information from the file and continue reading the contents of the body from the file until the EOF (end of file) character. You will write the following information to an output file:</p><p>Sort students by ID number<br>Sort students by last name<br>The number of unique majors</p><p>Each section of information should be labeled in the output file in all capital letters. A struct should be used to store and manipulate the file information between reading and writing the file. You must include the follow three functions with the exact prototypes:</p><p>student <em> create_student_db(int);<br>This function will create the array of student based on the number of students in the file<br>void populate_student_db_info(student </em>, int, ifstream &amp;);<br>This function should do the work of actually reading through the ifstream that represents your opened file and storing the information in a pre-allocated array of student that’s passed in<br>void delete_student_db_info(student **, int);<br>This function will delete all dynamic memory created in your program<br>Your main function needs to check to make sure the file you open exists before moving forward. If the file doesn’t exist, then you need to provide an error message and get a file name that does exist.</p><p>Write a design for the main function in the driver file, driver.cpp.<br>Write a design for the create_student_db(), populate_student_db_info(), and delete_student_db_info() as well as the functions needed to satisfy the above bulleted output functions in the implementation file, student_db.cpp<br>Here’s some documentation that will help you get going with File I/O:</p><p>C++ Basic file I/O: <a href="http://www.learncpp.com/cpp-tutorial/186-basic-file-io/" target="_blank" rel="noopener">http://www.learncpp.com/cpp-tutorial/186-basic-file-io/</a><br>ifstream: <a href="http://www.cplusplus.com/reference/fstream/ifstream/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/fstream/ifstream/</a><br>ofstream: <a href="http://www.cplusplus.com/reference/fstream/ofstream/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/fstream/ofstream/</a><br>fstream: <a href="http://www.cplusplus.com/reference/fstream/fstream/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/fstream/fstream/</a></p><h3 id="Step-2-Implementation"><a href="#Step-2-Implementation" class="headerlink" title="Step 2: Implementation"></a>Step 2: Implementation</h3><p>Now, implement the driver.cpp, student_db.cpp, and student_db.h files. Create a Makefile to manage the compilation of all these files. You can adapt the Makefile that was posted on the Calendar page in Canvas.</p><p>Remember, you will not receive lab credit if you do not get checked off before leaving each lab. Once you have a zero on a lab, then it cannot be changed because we have no way of knowing if you were there or no t.</p><p>Show your completed work and answers to the TAs for credit. You will not get points if you do not get checked off!</p><p>Submit your work to TEACH for our records (Note: you will not get points if you don’t get checked off with a TA!!!)</p><p>Create a tar archive that contains all files you’ve created in this lab: tar -cvf lab2.tar student_db.h student_db.cpp driver.cpp makefile<br>Transfer the tar file from the ENGR server to your local laptop.<br>Go to TEACH.<br>In the menu on the right side, go to Class Tools Submit Assignment.<br>Select CS162 Lab2 from the list of assignments and click “SUBMIT NOW”<br>Select your files and click the Submit button</p>]]></content>
    
    <summary type="html">
    
      练习C++中基础I/O处理，读写文件。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CMPT130-Binary-Arithmetic</title>
    <link href="https://tk1307993.coding.me/CMPT130-Binary-Arithmetic.html"/>
    <id>https://tk1307993.coding.me/CMPT130-Binary-Arithmetic.html</id>
    <published>2022-09-11T01:11:14.000Z</published>
    <updated>2022-09-11T01:12:41.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Read this document in its entirety and carefully before you start anything and understand it. If you have any questions, don’t hesitate to email me.</p><p>In this assignment, we will work on arithmetic of integers in two’s complement binary arithmetic. To store the two’s complement representations of integers, we will use the C++ string data type. You are not allowed to use any ARRAY variable in this assignment. Read the restriction section below.<br>Consider the main program given below:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Read in the bit pattern size</span></span><br><span class="line">    <span class="keyword">int</span> L;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter positive integer for the bit pattern size "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; L;</span><br><span class="line">    &#125; <span class="keyword">while</span> (L &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in two integers a and b</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter an integer a "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter an integer b "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate the decimal arithmetic sum of a and b and print the result</span></span><br><span class="line">    <span class="keyword">int</span> c1 = a + b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"In decimal "</span> &lt;&lt; a &lt;&lt; <span class="string">" + "</span> &lt;&lt; b &lt;&lt; <span class="string">" is "</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// Compute the two's complement representations of a and b</span></span><br><span class="line">    <span class="comment">// Each integer must be represented in L-bits pattern</span></span><br><span class="line">    <span class="comment">// Also these two's complement representations must be returned as string data types</span></span><br><span class="line">    <span class="built_in">string</span> A = decimalToTwocomplementString(a, L);</span><br><span class="line">    <span class="built_in">string</span> B = decimalToTwocomplementString(b, L);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print the two's complement representations of a and b</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The two's complement of "</span> &lt;&lt; a &lt;&lt; <span class="string">" is\t "</span> &lt;&lt; A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The two's complement of "</span> &lt;&lt; b &lt;&lt; <span class="string">" is\t "</span> &lt;&lt; B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute the binary sum of the two's complement representations of a and b</span></span><br><span class="line">    <span class="comment">// The result must be returned as L-bit pattern string data type</span></span><br><span class="line">    <span class="built_in">string</span> C = TwoComplementStringAddition(A, B);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print the two's complement representation binary sum</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The binary sum of "</span> &lt;&lt; A &lt;&lt; <span class="string">" and "</span> &lt;&lt; B &lt;&lt; <span class="string">" is "</span> &lt;&lt; C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert the two's complement representation binary sum to decimal and print</span></span><br><span class="line">    <span class="keyword">int</span> c2 = TwoComplementStringToDecimal(C);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"In two's complement arithmetic, "</span> &lt;&lt; a &lt;&lt; <span class="string">" + "</span> &lt;&lt; b &lt;&lt; <span class="string">" is "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print some concluding results</span></span><br><span class="line">    <span class="keyword">if</span> (c1 == c2)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="string">" is equal to "</span> &lt;&lt; c2 &lt;&lt; <span class="string">". Good Job!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="string">" is not equal to "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Either "</span> &lt;&lt; c1 &lt;&lt; <span class="string">" cannot be represented by the given bit pattern OR we have made some mistake!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"Pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Your-Task"><a href="#Your-Task" class="headerlink" title="Your Task"></a>Your Task</h3><p>The main program shown above is uploaded together with this problem statement onto Moodle under Topic 8. Download the main program code and copy and paste it to a new project. You are required to copy the given main program exactly as it is with no change whatsoever. Do not change any function signature. Then implement the missing functions so that the program works correctly. Some sample runs are given below for your reference. Of course, you can write additional helper functions that you can call from within your functions; but you are not allowed to make any change to the given main program.</p><h3 id="Restrictions"><a href="#Restrictions" class="headerlink" title="Restrictions"></a>Restrictions</h3><p>You are required to use C++ string Data Type to represent the two’s complement binary representations. You are not allowed to use any ARRAY variable for any purpose. If you use ARRAY variable for any purpose in your program, you will automatically get zero mark.</p><h3 id="Submission-Format"><a href="#Submission-Format" class="headerlink" title="Submission Format"></a>Submission Format</h3><p>You are required to submit your program online through Moodle. You will find a submission button for Assignment 2 on Moodle under Topic 7 and you are required to upload the source code of your C++ program. No assignment is submitted through email or hard copy; you must upload your work onto Moodle before the due date. Make sure to upload your .cpp file.</p><h3 id="Marking"><a href="#Marking" class="headerlink" title="Marking"></a>Marking</h3><p>A nonworking program will automatically get zero. A program that works but does not give right output or gives partial right output will lose marks depending how severe its shortcoming is.</p><h3 id="Some-sample-runs-of-the-program-are-shown-below"><a href="#Some-sample-runs-of-the-program-are-shown-below" class="headerlink" title="Some sample runs of the program are shown below"></a>Some sample runs of the program are shown below</h3><p>Remark: The user input values and the pressing of the enter key symbol are shown in red color for clarity.</p><p><code>`</code><br>Enter positive integer for the bit pattern size 5<br>Enter an integer a 9<br>Enter an integer b -14<br>In decimal 9 + -14 is -5<br>The two’s complement of 9 is 01001<br>The two’s complement of -14 is 10010<br>The binary sum of 01001 and 10010 is 11011<br>In two’s complement arithmetic, 9 + -14 is -5</p><h2 id="5-is-equal-to-5-Good-Job"><a href="#5-is-equal-to-5-Good-Job" class="headerlink" title="-5 is equal to -5. Good Job!"></a>-5 is equal to -5. Good Job!</h2><p>Enter positive integer for the bit pattern size 2<br>Enter an integer a -100<br>Enter an integer b 98<br>In decimal -100 + 98 is -2<br>The two’s complement of -100 is 00<br>The two’s complement of 98 is 10<br>The binary sum of 00 and 10 is 10<br>In two’s complement arithmetic, -100 + 98 is -2</p><h2 id="2-is-equal-to-2-Good-Job"><a href="#2-is-equal-to-2-Good-Job" class="headerlink" title="-2 is equal to -2. Good Job!"></a>-2 is equal to -2. Good Job!</h2><p>Enter positive integer for the bit pattern size 2<br>Enter an integer a 100<br>Enter an integer b -98<br>In decimal 100 + -98 is 2<br>The two’s complement of 100 is 00<br>The two’s complement of -98 is 10<br>The binary sum of 00 and 10 is 10<br>In two’s complement arithmetic, 100 + -98 is -2<br>2 is not equal to -2</p><h2 id="Either-2-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake"><a href="#Either-2-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake" class="headerlink" title="Either 2 cannot be represented by the given bit pattern OR we have made some mistake!"></a>Either 2 cannot be represented by the given bit pattern OR we have made some mistake!</h2><p>Enter positive integer for the bit pattern size 8<br>Enter an integer a 62<br>Enter an integer b -99<br>In decimal 62 + -99 is -37<br>The two’s complement of 62 is 00111110<br>The two’s complement of -99 is 10011101<br>The binary sum of 00111110 and 10011101 is 11011011<br>In two’s complement arithmetic, 62 + -99 is -37</p><h2 id="37-is-equal-to-37-Good-Job"><a href="#37-is-equal-to-37-Good-Job" class="headerlink" title="-37 is equal to -37. Good Job!"></a>-37 is equal to -37. Good Job!</h2><p>Enter positive integer for the bit pattern size 5<br>Enter an integer a 11<br>Enter an integer b 9<br>In decimal 11 + 9 is 20<br>The two’s complement of 11 is 01011<br>The two’s complement of 9 is 01001<br>The binary sum of 01011 and 01001 is 10100<br>In two’s complement arithmetic, 11 + 9 is -12<br>20 is not equal to -12</p><h2 id="Either-20-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake"><a href="#Either-20-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake" class="headerlink" title="Either 20 cannot be represented by the given bit pattern OR we have made some mistake!"></a>Either 20 cannot be represented by the given bit pattern OR we have made some mistake!</h2><p>Enter positive integer for the bit pattern size 5<br>Enter an integer a -321<br>Enter an integer b 305<br>In decimal -321 + 305 is -16<br>The two’s complement of -321 is 11111<br>The two’s complement of 305 is 10001<br>The binary sum of 11111 and 10001 is 10000<br>In two’s complement arithmetic, -321 + 305 is -16</p><h2 id="16-is-equal-to-16-Good-Job"><a href="#16-is-equal-to-16-Good-Job" class="headerlink" title="-16 is equal to -16. Good Job!"></a>-16 is equal to -16. Good Job!</h2><p>Enter positive integer for the bit pattern size 3<br>Enter an integer a 2<br>Enter an integer b 2<br>In decimal 2 + 2 is 4<br>The two’s complement of 2 is 010<br>The two’s complement of 2 is 010<br>The binary sum of 010 and 010 is 100<br>In two’s complement arithmetic, 2 + 2 is -4<br>4 is not equal to -4</p><h2 id="Either-4-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake"><a href="#Either-4-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake" class="headerlink" title="Either 4 cannot be represented by the given bit pattern OR we have made some mistake!"></a>Either 4 cannot be represented by the given bit pattern OR we have made some mistake!</h2><p>Enter positive integer for the bit pattern size 6<br>Enter an integer a 45<br>Enter an integer b -17<br>In decimal 45 + -17 is 28<br>The two’s complement of 45 is 101101<br>The two’s complement of -17 is 101111<br>The binary sum of 101101 and 101111 is 011100<br>In two’s complement arithmetic, 45 + -17 is 28</p><h2 id="28-is-equal-to-28-Good-Job"><a href="#28-is-equal-to-28-Good-Job" class="headerlink" title="28 is equal to 28. Good Job!"></a>28 is equal to 28. Good Job!</h2><p>Enter positive integer for the bit pattern size 1<br>Enter an integer a -99<br>Enter an integer b 100<br>In decimal -99 + 100 is 1<br>The two’s complement of -99 is 1<br>The two’s complement of 100 is 0<br>The binary sum of 1 and 0 is 1<br>In two’s complement arithmetic, -99 + 100 is -1<br>1 is not equal to -1</p><h2 id="Either-1-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake"><a href="#Either-1-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake" class="headerlink" title="Either 1 cannot be represented by the given bit pattern OR we have made some mistake!"></a>Either 1 cannot be represented by the given bit pattern OR we have made some mistake!</h2><p>Enter positive integer for the bit pattern size 1<br>Enter an integer a -100<br>Enter an integer b 99<br>In decimal -100 + 99 is -1<br>The two’s complement of -100 is 0<br>The two’s complement of 99 is 1<br>The binary sum of 0 and 1 is 1<br>In two’s complement arithmetic, -100 + 99 is -1<br>-1 is equal to -1. Good Job!<br><code></code></p>]]></content>
    
    <summary type="html">
    
      使用C++对Binary Number进行算术运算。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>CMSC132-Tetris-Game</title>
    <link href="https://tk1307993.coding.me/CMSC132-Tetris-Game.html"/>
    <id>https://tk1307993.coding.me/CMSC132-Tetris-Game.html</id>
    <published>2022-09-09T02:13:49.000Z</published>
    <updated>2022-09-09T02:15:51.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>For this project, you will implement code for the Tetris game. The graphical user interface has been provided to you in a package called gui. No part of the assignment involves you making any changes to code in this package. You will be implementing some of the functionality for the Tetris game by modifying classes provided to you in the model package.</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>This project will allow you to practice two-dimensional arrays, abstract classes, inheritance, and test development.</p><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><p>Public Tests (50%)<br>Release Tests (40%)<br>Style (10%)</p><h3 id="Code-Distribution"><a href="#Code-Distribution" class="headerlink" title="Code Distribution"></a>Code Distribution</h3><p>You are provided with the following packages:</p><p>gui - Represents the graphical user interface for the game. Executing the main method of the GameGUI class in this package will launch the user interface (assuming your code compiles successfully).<br>model - Includes the classes you need to implement.<br>tests - Includes the public tests. You should add your student test class to this package.</p><h3 id="Layout-and-Rotation"><a href="#Layout-and-Rotation" class="headerlink" title="Layout and Rotation"></a>Layout and Rotation</h3><p>The layout of a tetromino represents its shape. When a tetromino rotates, its layout changes. Each tetromino has 4 layouts: up, left, down and right. When originally created, a tetromino is in the up layout. After one left rotation, it shifts to the left layout. After a second left rotation, it shifts to the down layout. After a third left rotation, it shifts to the right layout. Finally, after a fourth left rotation, it returns to a up layout. This sequence can be repeated by pressing z during game play. After going from the up layout to the up layout again, i.e in one full rotation through each 90 degree phase, all tetromino’s except from the I tetromino should occupy the same column coordinate as they did initially (If they have been moved down in during the rotation, their row coordinate may have changed). The I tetromino, however, should move left by one position after one complete counter-clockwise rotation. Therefore, the “rotation” of a I tetromino is really a translation, with each full rotation moving it one column closer to the left of the game board.</p><p>The diagram below shows the progression of each tetromino as you rotate counter-clockwise by 90 degrees.</p><h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><p>Although the layout of a tetromino is set (because its shape is set) for each of the 4 possible orientations, the location of a layed out tetromino will change due to rotation and moving the tetromino left/right. The diagram below illustrates this for the I tetromino.</p><h3 id="Game-Play"><a href="#Game-Play" class="headerlink" title="Game Play"></a>Game Play</h3><p>A random sequence of Tetrominos will fall down the playing field from the centre. The goal of the game is to fill the gaps horizontally. When an entire row is filled, the rows above it will collapse down by one row. A player can move a tetromino left/right using the corresponding arrow keys. They can also rotate the tetromino left (counter-clockwise) 90 degrees at a time by pressing the z key.</p><h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>You are expected to implement methods for the Tetromino, I, J, L, O, S, T and Z classes. The other classes have been provided and you should not modify them. You should familiarize yourself with the Tetris Class.</p><h3 id="Requirements-Project-Policies"><a href="#Requirements-Project-Policies" class="headerlink" title="Requirements/Project Policies"></a>Requirements/Project Policies</h3><p>You may not add any classes, but feel free to add any instance variables and private methods you understand are necessary.<br>See Style Guidelines for information regarding style.<br>We cannot provide any information regarding release and secret tests. Once your project has been graded, you can see a TA if you would like to find out why you failed a release or secret test.</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>We encourage you to run the game GUI and interact with the game. However, such an interaction is not guaranteed to test the full range of your code. As such, we also encourage you to write student tests. Student tests demonstrating a particular issue you are encountering with your code will be requested upon seeking help during office hours.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>To submit your project, zip the project folder and upload the zipped file to gradescope.</p><h3 id="Tips-on-Getting-Started"><a href="#Tips-on-Getting-Started" class="headerlink" title="Tips on Getting Started"></a>Tips on Getting Started</h3><p>You have been provided with a class to represent each possible Tetris piece (a tetromino). We suggest that you start with the simplest tetromino (like O or I).</p>]]></content>
    
    <summary type="html">
    
      实现游戏Tetris，也就是俄罗斯方块，GUI部分已经提供，只需要编写逻辑部分即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>ICS46-Final-Project</title>
    <link href="https://tk1307993.coding.me/ICS46-Final-Project.html"/>
    <id>https://tk1307993.coding.me/ICS46-Final-Project.html</id>
    <published>2022-09-06T01:24:48.000Z</published>
    <updated>2022-09-06T01:27:43.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Some-ground-rules-READ-THESE-FIRST"><a href="#Some-ground-rules-READ-THESE-FIRST" class="headerlink" title="Some ground rules READ THESE FIRST"></a>Some ground rules READ THESE FIRST</h3><p>This final project asks you to work on a number of separate problems. You’ll begin with a project template in the ICS 46 VM, as you would in any other project, and will need to submit files that meet certain naming and format requirements, similar to the Reinforcement Exercises; as with those exercises, you’ll submit as PDF files (which must be typed, rather than scans of written text). You must follow specifically these requirements or we will not be grading your work.</p><p>You are required to work on these tasks entirely individually. Piazza has been deactivated for question-asking for precisely this reason, though the course staff will still field questions via email, as usual, though we can only help you to understand what a question is asking; we won’t be willing or able to help you figure out how to answer it.</p><p>The late policy does not apply to this project. It is due on Monday, June 8, 11:59pm, after which (beyond the usual ten-minute grace period) no submissions will be accepted and the submission area on Checkmate will disappear.</p><p>We’ll be grading these on the basis of correctness, as well as whether you stay on topic. For problems where you’re asked to explain an answer, we reserve the right to deduct for large amounts of irrelevant information in which a relevant answer is buried; stick with what needs to be said to make your point, rather than just dumping everything you know in hopes that some of it is correct. Also, unlike the Reinforcement Exercises, there will be no points for honest attempts that are incorrect.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>Before you begin work on these problems, there’s a chore that you’ll need to complete on your ICS 46 VM to get it set up to proceed.</p><h3 id="Refreshing-your-ICS-46-VM-environment"><a href="#Refreshing-your-ICS-46-VM-environment" class="headerlink" title="Refreshing your ICS 46 VM environment"></a>Refreshing your ICS 46 VM environment</h3><p>Even if you previously downloaded your ICS 46 VM, you may need to refresh its environment before proceeding with this project, so that you have a copy of the final project template that you’ll need for this project.</p><p>Log into your VM and issue the command ics46 version to see what version of the ICS 46 environment you currently have stored on your VM. Note, in particular, the timestamp; if you see a version with a timestamp older than the one listed below, you’ll want to refresh your environment by running the command ics46 refresh to download the latest one before you proceed with this project.</p><p>Note that you can instead use the ics46 refresh_local technique described in the Project #1 write-up, if you’re unable to make your outgoing Internet connection work from within the ICS 46 VM.</p><h3 id="Creating-your-project-directory-on-your-ICS-46-VM"><a href="#Creating-your-project-directory-on-your-ICS-46-VM" class="headerlink" title="Creating your project directory on your ICS 46 VM"></a>Creating your project directory on your ICS 46 VM</h3><p>A project template has been created specifically for this project. It includes a gather script for preparing your files for submission when you’re finished, as well as the usual array of scripts for running the program with and without the Memcheck tool, and a directory in which you can (optionally) write unit tests to assist in your testing.</p><p>Decide on a name for your project directory, then issue the command ics46 start PROJECT_NAME final to create your new project using the final template.</p><p>Do not use other project templates, like basic or project4, for this project!</p><p>Problem 1<br>Suppose that you’ve decided to write this function, which takes an unsigned int parameter and generates a std::string containing that number of randomly-chosen uppercase letters.<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">generateRandomLetters</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="built_in">size</span>, <span class="string">' '</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i [ <span class="built_in">size</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::random_device device;</span><br><span class="line">    <span class="built_in">std</span>::default_random_engine engine&#123;device()&#125;;</span><br><span class="line">    <span class="built_in">std</span>::uniform_int_distribution distribution&#123;<span class="string">'A'</span>, <span class="string">'Z'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    s[i] = distribution(engine);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>Are there any circumstances in which you wouldn’t expect this function to do what’s specified (i.e., to generate a string of random uppercase letters)? Briefly explain why or why not.</li><li>What adjustments, if any, would you make to the design of this function to improve it? You don’t need to rewrite the function, as long as you explain briefly what you would change about it and why.</li></ol><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h3><p>Suppose that you wrote a C++ class template that implemented singly-linked list with head and tail pointers, and that you used std::shared_ptrs to link the nodes (i.e., the head pointer in the list would be a std::shared_ptr to the first node, the last pointer in the list would be a std::shared_ptr to the last node, and each node would contain a std::shared_ptr to the subsequent node).</p><p>It would seem undoubtedly true that the use of smart pointers would result in you having to write less code, given that smart pointers automate some things that you might otherwise have to write yourself. Suppose, for example, that you implemented the destructor and realized that you could use the ownership characteristics of smart pointers to write this.</p><p>Assuming that all class invariants were intact before calling this destructor (i.e., the pointers are pointing to reasonable places beforehand), are there any circumstances in which you wouldn’t expect all of the nodes to be destroyed properly? If so, briefly explain each circumstance where it would fail to destroy all of the nodes. If not, briefly explain what happens after setting head to nullptr to cause all of the nodes to be destroyed.</p><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem 3"></a>Problem 3</h3><p>Suppose you started with an empty AVL tree, then added a sequence of n ascending, consecutive keys to it, starting with 1, then 2, then 3, and so on, until you had added all n of them. (How do you know what n is? See below.)</p><p>List your n value, then list all of the rotations that occurred, one per line, in the order that they occurred. Each rotation should be written using its name and the key in the node where the rotation is rooted (just before the rotation is done) listed in parentheses. For example, if your n value was 27 and you thought that there were three rotations, an LL rotation rooted at 4, an RR rotation rooted at 1, and an LR rotation rooted at 19, you would write this.</p><h3 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem 4"></a>Problem 4</h3><p>Let’s imagine that you’re storing information about the current location of a large number of objects in discrete three-dimensional space, which is to say that each location is made up of three unsigned integers x, y, and z, indicating a distance east, a distance north, and a height from some origin point. You can assume that the distances are measured in small amounts, such as millimeters, so that the numbers themselves might be quite large and that they might be distributed quite sparsely. It’s not particularly important what the application is, but let’s imagine that the most common operations are to add a new location to the set and to check whether a location is already in the set.</p><p>You’ve decided that a hash table would be an appropriate way to solve this problem, because you know that a well-chosen hash function can lead to something akin to (1) lookups and amortized (1) insertions, which sounds pretty good to you. Let’s suppose that you’ve chosen this hash function: x + y + z.</p><p>Is x + y + z a good hash function? If so, briefly explain why it’s sufficient; if not, briefly explain what’s wrong with it, though you need not propose a new hash function to replace it.</p><h3 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem 5"></a>Problem 5</h3><p>Let’s assume that a bipartite graph is an undirected graph in which there are two distinct sets of vertices, such that all of the edges in the graph connect a vertex in one set to a vertex in the other, but no edges connect vertices in the same set. That sounds esoteric, but there are plenty of real-world problems that collapse nicely into a graph that has these characteristics.</p><p>Now let’s assume that you’d like to implement a bipartite graph, so you consider using either an adjacency matrix or adjacency lists, but wonder if they can be modified if you know ahead of time that the graph will be bipartite.</p><h3 id="Problem-6"><a href="#Problem-6" class="headerlink" title="Problem 6"></a>Problem 6</h3><p>We say that a circle is a directed graph in which the vertices could be given a numbering from 1 through n (i.e., each vertex could be given a unique number), where vertex 1 has one outgoing edge leading to vertex 2, vertex 2 has one outgoing edge leading to vertex 3, and so on. Vertex n has one outgoing edge leading back to vertex 1.</p><h3 id="Problem-7"><a href="#Problem-7" class="headerlink" title="Problem 7"></a>Problem 7</h3><p>In this course, we saw no fewer than nine different ways to sort a sequence of values, but computer science has much to say about this topic, so there’s plenty more to it than we’ve had a chance to discuss.</p><p>For example, we saw that we could use randomness to our advantage in a few places in this course. Skip lists decide randomly on a number of copies of each node, yet leads to logarithmic time lookups, insertions, and removals. Quicksort performs admirably when pivots are chosen randomly. So it’s certainly true that injecting randomness into an algorithm can be a benefit. But let’s take that idea to its logical conclusion. Can you solve problems completely at random?<br>One way we could apply that idea is to the problem of sorting. One way to sort values might be as simple as this.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>After using the gather script in your project directory to gather up the .cpp, .hpp, and/or .pdf files from your problems directory into a single final.tar.gz file, then submit that file (and only that file!) to Checkmate. Be sure, too, that it contains properly-named files (and files in the proper format) so that they will be graded; we’re not asking for a lot, just some attention to detail.</p><p>Follow this link for a discussion of how to submit your project via Checkmate. Be aware that I’ll be holding you to all of the rules specified in that document, including the one that says that you’re responsible for submitting the version of the project that you want graded. We won’t regrade your work simply because you submitted the wrong version accidentally. (It’s not a bad idea to look at the contents of your tarball on your host operating system before submitting it.)</p>]]></content>
    
    <summary type="html">
    
      使VM环境，完成7个C++编程问题。包括shared_ptr, linked list, AVL tree, graph, sort等问题。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>FIT9131-Koala-Rescue</title>
    <link href="https://tk1307993.coding.me/FIT9131-Koala-Rescue.html"/>
    <id>https://tk1307993.coding.me/FIT9131-Koala-Rescue.html</id>
    <published>2022-09-05T02:19:39.000Z</published>
    <updated>2022-09-05T02:21:34.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Please note the section on plagiarism in this document.</p><p>In preparing your assignment please note the following:</p><p>The assignment must be done using the BlueJ environment.<br>The Java source code for the assignment must be implemented according to the FIT9131 Java Coding Standards.<br>You must acknowledge all code in your assignment that you have taken from other sources.<br>Only a text interface is to be used for this program, there is to be no GUI. More marks will be gained for a game that is easy to follow with clear information/error messages.<br>Any points needing clarification may be discussed with your tutor in the lab classes. You should not make any assumptions about the program without consulting your tutor.</p><p>Completion of this assignment contributes towards the following FIT9131 learning outcomes:</p><p>design, construct, test and document small computer programs using Java;<br>interpret and demonstrate software engineering principles of maintainability, readability, and modularisation;<br>explain and apply the concepts of the “object-oriented” style of programming.</p><h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>For this assignment you will simulate the work of a koala rescue team. This section specifies the required functionality of the program.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>The koala is a marsupial and is native to Australia. Koalas typically live in open eucalyptus (gum tree) forests. Koalas live mainly in trees and eat up to 1 kg of leaves per day. Their diet is restricted to a few varieties of gum trees (e.g., Manna Gum, Swamp Gum, Blue Gum, and River Red Gum). Koalas use some other varieties of trees (e.g. Wattle) for shelter on hot days. Only one koala at a time will occupy a shelter tree. Whilst moving on the ground between trees, koalas are exposed to attacks from predators.</p><p>After bushfires in January 2020, several koala reserves were left devastated when forest habitat burnt leaving many koalas dead or injured and without sufficient food. The koala rescue team’s work is to inspect the reserves and provide help to the koalas. Unfortunately, the team operates within a restricted budget and sometimes has to make difficult decisions. The aim of the rescue team is to save as many koalas as possible within a limited budget.</p><p>The koala reserve consists of a series of observation points where the rescue team pauses, observes the koala population, the trees, and the predators, and decides how the koalas can be helped. The help may be to move a koala to a safe haven if it is injured or there is not enough food or shelter.</p><h3 id="Koala-Rescue-Team-simulation"><a href="#Koala-Rescue-Team-simulation" class="headerlink" title="Koala Rescue Team simulation"></a>Koala Rescue Team simulation</h3><p>The Koala Rescue Team simulation begins with a welcome message and an invitation to the rescue team leader to enter his/her name. The name cannot be blank but must be less than 16 alphabetic characters. The leader is then asked to enter the budget for the rescue. This is an amount from $100 to $200, inclusive.</p><p>The program then sets up the numbers of trees, koalas and predators in each of the 10 observation points as follows:</p><p>The numbers of trees in the reserve are read from a text file trees.txt. The numbers of each type of tree (Manna Gum, Swamp Gum, Blue Gum, River Red Gum, Wattle) at each observation point are read in from the file. The file has 10 lines, with 5 comma separated numbers on each line. Each line represents the tree numbers at each observation point. There is no other reading from the file during the actual running of the program.</p><p>Each tree is either used for shelter or food. Each shelter tree can hold a maximum of one koala. The food trees can produce a certain weight of leaves per day that can be eaten by the koalas (see Table 1 ). The weight is used to calculate the total food available for the koalas at any observation point. The food available is calculated by multiplying the number of each tree type by the weight of leaves it produces and summing these to get the total food available. Each koala, whether healthy or injured, can eat 1 kg of leaves per day.</p><p>Each koala will have a randomly allocated age of 1-18 years.</p><p>There is a random number of 0-4 predators at each observation point.</p><p>There are no koalas in safe haven at the start of the rescue.</p><p>The rescue team visits each of 10 observation points in turn. At each observation point the rescue team considers the number of trees, the number and condition of the koalas (some of which may be injured) and the number of predators. The team takes actions to help the koalas at each point. If the budget runs out at any point then the rescue mission continues but no actions can be taken that involve cost. The rescue mission is considered successful when all areas have been observed and all koalas have survived.</p><h3 id="Class-Design"><a href="#Class-Design" class="headerlink" title="Class Design"></a>Class Design</h3><p>Your program must consist of at least seven classes. A suggested class design is shown in</p><h4 id="Important-Notes"><a href="#Important-Notes" class="headerlink" title="Important Notes"></a>Important Notes</h4><p>Your program must demonstrate your understanding of the object-oriented concepts and general programming constructs presented in FIT9131. Consider carefully your choice of classes, how they interact and the fields and methods of each class. You must use appropriate data structures to store the various objects (observation points, koalas, trees, etc.) in the program. You must make use of both Arrays and ArrayLists in your program. Make sure that you discuss your design with your tutor. You must document any additional assumptions you made.<br>You will be required to justify your design and the choice of any data structures used at the interview.<br>Validation of values for fields and local variables should be implemented where appropriate. You should not allow an object of a class to be set to an invalid state (i.e. put some simple validations in your mutator methods).<br>Your program should handle incorrect or invalid input and present the user with relevant error messages. No invalid input should crash the program.<br>Exception handling should be used where appropriate.</p><h3 id="Interview"><a href="#Interview" class="headerlink" title="Interview"></a>Interview</h3><p>You will be asked to demonstrate your program at an “interview” following the submission date.</p><p>At the interview, you will be asked to explain your code/design, modify your code, and discuss your design decisions and alternatives. Marks will not be awarded for any section of code/design/functionality that you cannot explain satisfactorily (the marker may also delete excessive in-code comments before you are asked to explain that code).</p><p>In other words, you will be assessed on your understanding of the code, and not on the actual code itself.</p><p>The interviews will be organised during week 12 and will take place online via Zoom or other video facility after that time. You must have audio and video available and operating during the interview. It is your responsibility to make yourself available for an interview time and ensure that you have the audio and video capabilities. Any student who does not attend an interview will receive a mark of 0 for the assignment.</p>]]></content>
    
    <summary type="html">
    
      实现一个考拉(Koala)救援小组模拟器。
    
    </summary>
    
      <category term="JAVA" scheme="https://tk1307993.coding.me/categories/JAVA/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>CS207-Ticket-Vendor</title>
    <link href="https://tk1307993.coding.me/CS207-Ticket-Vendor.html"/>
    <id>https://tk1307993.coding.me/CS207-Ticket-Vendor.html</id>
    <published>2022-09-04T01:28:44.000Z</published>
    <updated>2022-09-04T01:30:35.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>Create a program that keeps track of ticket sales for an auditorium that has 32 rows of seats with a varied number of seats in each row. Each ticket is associated with a seat (row letter and seat number such as A12), a price (low $10, medium $30, or high $50), whether or not the seat is for sale or complementary (for example, sold to the public or given to friends of a performer), name of occupant (who bought the ticket), their e-mail address, and the date, time, and name of the performance so that tickets for each seat can be sold to different people at different times.</p><p>It should be possible to get a list of names of all people who bought tickets for a particular date. For a given performance, it should also be possible to print a grid of x’s and o’s where an x represents a seat that is occupied (that is, it’s associated ticket has been sold) and an o represents seats for which no ticket has yet been sold.</p><p>Anyone who buys a high-priced ticket automatically joins the Gold Members Club which is an e-mail list. It should be possible to generate an e-mail list of all people in the Gold Members Club, and to delete someone from that e-mail list upon request.</p><p>A ticket holder should be able to create and access an account that stores the seats, dates, and names of performances attached to all of the tickets which they have purchased.</p><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><p>This is where major design decisions are made. Can we store all of the information in the UserAccounts?</p><p>No, because we do not want to accidentally sell the same seat to the same show to two different people. So information about each show should be stored separately from the user accounts.</p><p>Could we have a ShowManager which keeps instances of class Show in which we store in- formation associated with each seat and ticket?</p><p>Alternatively, could we let seats be entries in a collection or multi-dimensional array that exists within the Show class, generating tickets for each by accessing a TicketManager?</p><p>There are many good designs that can fulfill this specification. When creating CRC cards, you need to choose one design, work with it, and adjust it as problems arise.</p><h3 id="Responsibilities"><a href="#Responsibilities" class="headerlink" title="Responsibilities"></a>Responsibilities</h3><p>More than one class needs access to the seat number and row number of a given ticket. Where should we store that information?</p><p>For the purposes of this handout, we decide to have a Ticket class. But where do we instantiate Ticket? In the TicketManager and pass it to the UserAccount, or should we instantiate the ticket class in the UserAccount and pass that information to the Show and its associated TicketManager?</p><p>Likewise, should we store the e-mail list in the TicketVendorSystem, or create a method that generates that list whenever we need it? If the latter, how do we store the information about whether or not a user is on that list?</p><h3 id="Collaborations"><a href="#Collaborations" class="headerlink" title="Collaborations"></a>Collaborations</h3><p>Collaborators can be classes that are adjacent on the inheritance hierarchy (that is, one is the parent of the other), or instantiate one inside the other, or one gets passed as an argument into a method in the other.</p><p>Collaboration is symmetric. So, if class A collaborates with class B, then class B collaborates with class A. For example, the TicketManager will collaborate with Ticket objects (through instantiation), so the TicketManager collaborates with class Ticket (through creating and storing instances of Ticket).</p><p>On the next page is one possible set of CRC cards that describes one piece of software that fulfills the given specification. Class names are at the top of each card. The responsibilities (variables and methods) of that class are written on the left, while collaborating classes are listed on the right.</p><h3 id="Warm-Up-Questions"><a href="#Warm-Up-Questions" class="headerlink" title="Warm-Up Questions"></a>Warm-Up Questions</h3><p>According to the CRC cards, where is the user’s name stored?<br>How does the system generate a list of users names for a given show?<br>How does the system generate the map of seats with x’s and o’s showing which seats are available? Can you think of another way to accomplish this?</p><h3 id="Questions-About-The-Current-Design"><a href="#Questions-About-The-Current-Design" class="headerlink" title="Questions About The Current Design"></a>Questions About The Current Design</h3><p>In which class does execution start?<br>Where does class Show get instantiated?<br>Where are instances of class Ticket stored?<br>How does a UserAccount get information about available seats for a particular show?<br>How does a user buy a ticket (represented by a Ticket)?<br>Once a Ticket is generated, where does it go? How many classes have direct or in- direct access to the information contained in that Ticket?<br>Should UserAccount collaborate with class Show? Why or why not?</p><h3 id="Questions-About-Changing-the-Design"><a href="#Questions-About-Changing-the-Design" class="headerlink" title="Questions About Changing the Design:"></a>Questions About Changing the Design:</h3><p>Do we need a separate class for Show or can we reorganize the ShowManager so we no longer need instances of Show? If so, should we?<br>How can we change the design so that the same TicketVendorSystem sells tickets to multiple venues (different rooms with different numbers of rows and columns of seats)?</p>]]></content>
    
    <summary type="html">
    
      使用CRC的方式，设计一款售票系统。
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>COMP3005-Online-Bookstore</title>
    <link href="https://tk1307993.coding.me/COMP3005-Online-Bookstore.html"/>
    <id>https://tk1307993.coding.me/COMP3005-Online-Bookstore.html</id>
    <published>2022-09-03T08:04:13.000Z</published>
    <updated>2022-09-03T08:05:51.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h3><p>Design and implement an application for an online bookstore (Look Inna Book). This application lets users browse a collection of books that are available in the bookstore. A user can search the bookstore by book name, author name, ISBN, genre, etc.. When a book is selected, information on the author(s), genre, publisher, number of pages, price, etc. can be viewed. A user can select as many books as she likes to be added to the checkout basket. A user needs to be registered in the bookstore to be able to checkout. When checking out, the user inserts billing and shipping information (can be different than those used in registration), and completes the order. The bookstore has the feature of tracking an order via an order number. A user can use this order number to track where the order is currently. Although shipping is carried out by a third-party shipping service, the online bookstore should have the tracking information available for when the user inquires about an order using the order number. Assume all books are shipped from only one warehouse (no multiple order numbers for multiple books shipped from multiple warehouses). The bookstore owners can add new books to their collections, or remove books from their store. They also need to store information on the publishers of books such as name, address, email address, phone number(s), banking account. The banking account for publishers is used to transfer a percentage of the sales of books published by these publishers. This percentage is variable and changes from one book to another. The owners should have access to reports that show sales vs. expenditures, sales per genres, sales per author, etc.. The application should also be able to automatically place orders for new books if the remaining quantity is less than a given threshold (e.g., 10 books). This is done by sending an email to the publisher of the limited books to order a number of books equal to how many books were sold in the previous month (you do not have to implement the email sending component).</p><h3 id="Project-Report"><a href="#Project-Report" class="headerlink" title="Project Report"></a>Project Report</h3><p>You need to submit one report file that contains the following sections. You can add other sections, but the following sections (except Bonus Features) must be in the report:</p><h3 id="Conceptual-Design"><a href="#Conceptual-Design" class="headerlink" title="Conceptual Design"></a>Conceptual Design</h3><p>This section should explain the conceptual design of the database. That is, the ER-diagram of the database for the bookstore and explanation of all the assumptions made in the diagram regarding cardinalities and participation types. Make sure that the assumptions do not contradict with the problem statement in Section 1.</p><h3 id="Reduction-to-Relation-Schemas"><a href="#Reduction-to-Relation-Schemas" class="headerlink" title="Reduction to Relation Schemas"></a>Reduction to Relation Schemas</h3><p>Reduce your ER-diagram into relation schemas and list these in this section.</p><h3 id="Normalization-of-Relation-Schemas"><a href="#Normalization-of-Relation-Schemas" class="headerlink" title="Normalization of Relation Schemas"></a>Normalization of Relation Schemas</h3><p>This section should show that your relation schemas are either in a good normal form (show tests), or if they are not, show how to decompose them into a good normal form (show decomposition work), then show the testing work to make sure that they are in a good normal form.</p><h3 id="Database-Schema-Diagram"><a href="#Database-Schema-Diagram" class="headerlink" title="Database Schema Diagram"></a>Database Schema Diagram</h3><p>This section should show the final schema diagram for the database of the bookstore. This diagram should be similar to the schema diagram of the university database that we study in this course.</p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>Feel free to use whichever programming language(s) for your application. Your application can be a web-based application, or a desktop application. In this section, you should describe the architecture of your application. That is, what the modules in your application are and how they interact. You are encouraged to include a diagram of the application’s architecture and explain (in text) scenarios of using the application and the workflow of your application.</p><p>Your application should have two different user interfaces: The first is for the users of the application through which the user can browse and buy books. The second is for the bookstore owners/managers through which they can add/remove books, display reports, etc. (more details about the application’s features can be found in Section 1).</p><p>Include screenshots of your application’s two interfaces in different scenarios (e.g., checking out, displaying a report, etc.).</p><h3 id="Bonus-Features-Optional-Section"><a href="#Bonus-Features-Optional-Section" class="headerlink" title="Bonus Features (Optional Section)"></a>Bonus Features (Optional Section)</h3><p>You are free to add bonus features to your online bookstore. You will be rewarded bonus marks for these features. The choice of bonus features is entirely up to you. An example of a bonus feature is approximate search for books. For example, when the user searches for “The Lord of The Rings”, the user would find multiple matches “The Lord of The Rings: The Fellowship of the Ring”, “The Lord of The Rings: The Two Towers”, “The Lord of The Rings: The Return of the King”, “Lord of Flies”, etc., assuming that these were the titles of the books in the database. Note that this approximate match is not limited to matching prefixes only. Another example of a bonus feature would be to show similar books (e.g., other books by the same author, or other books with the same genre). The latter feature is a good example of using views.</p>]]></content>
    
    <summary type="html">
    
      设计并实现一个Online bookstore应用，网站或桌面应用皆可，需要包含数据库设计。
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>COMPS311-Android-App</title>
    <link href="https://tk1307993.coding.me/COMPS311-Android-App.html"/>
    <id>https://tk1307993.coding.me/COMPS311-Android-App.html</id>
    <published>2022-09-02T03:09:53.000Z</published>
    <updated>2022-09-02T03:11:48.023Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1-Basics-and-resources"><a href="#Question-1-Basics-and-resources" class="headerlink" title="Question 1 - Basics and resources"></a>Question 1 - Basics and resources</h3><p>In this question, you create an Android app that displays your information according to the following requirements.</p><ul><li>The name of the app is “My Name”, and the package name of the app (i.e. app id)</li><li>By default, the app displays your name in English and your student ID.</li><li>If the locale of the device is traditional Chinese - Hong Kong, the app displays your name in Chinese and your student ID.<br>The following are sample outputs when the app is executed in locales of English (left) and traditional Chinese - Hong Kong (right), respectively.</li></ul><p>Submit one whole Android project that contains all your work for this question.</p><h3 id="Question-2-Layout-and-UI"><a href="#Question-2-Layout-and-UI" class="headerlink" title="Question 2 - Layout and UI"></a>Question 2 - Layout and UI</h3><p>Unit 6 contains an example app of a tip calculator. Enhance the app according to the following screenshots and requirements.</p><ul><li>a. Modify the portrait layout (existing in the project) to add 12 buttons under the “Bill Amount” input field, as shown in the left screenshot above.</li><li>b. Create a new landscape layout that contains the same components in the portrait layout (with the same IDs). Design the layout so that the components work properly in the landscape device orientation.</li><li>c. Implement the event handlers of the 12 new buttons as follows.</li><li>d. Create an “About” options menu item and show it as an action item. You may use a built-in Android drawable resource as its icon. When the item is selected, an “About” dialog box appears to show your name and your student ID, as in the middle screenshot above.</li><li>e. Create three options menu items “No fractional digits”, “One fractional digit”, and<br>“Two fractional digits”. These menu items are checkable, mutually exclusive, and in a group. They control the number of digits displayed after the decimal point for the output fields of “Total Bill Amount” and “Total Per Person”. The right screenshot above shows the output fields with one fractional digit.</li></ul><p>For simplicity, you may hard-code new strings in the programs, and don’t need to use primary or alternative string resources for them. Submit one whole Android project that contains all your work for this question.</p><h3 id="Question-3-Fragments-networking-and-concurrency"><a href="#Question-3-Fragments-networking-and-concurrency" class="headerlink" title="Question 3 - Fragments, networking and concurrency"></a>Question 3 - Fragments, networking and concurrency</h3><p>In this question, you develop an Android that checks the status of Web pages. A skeleton project, called WebChecker, is provided to you. Complete the project by working through the following tasks.</p><p>The following screenshots show the main screen (left) and log message screen (right) of the app. Submit one whole Android project that contains all your work for this question.</p>]]></content>
    
    <summary type="html">
    
      完成一个Android应用程序，做一个小费计算器。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS5005-Sorting-Algorithms</title>
    <link href="https://tk1307993.coding.me/CS5005-Sorting-Algorithms.html"/>
    <id>https://tk1307993.coding.me/CS5005-Sorting-Algorithms.html</id>
    <published>2022-09-01T09:27:04.000Z</published>
    <updated>2022-09-01T09:28:23.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Sorting algorithms are arranging the given data in order. Several sorting techniques are used in almost every application to efficiently handle requests of many kinds. In this project, you would be implementing the Shell Sort and Adaptive sort techniques. You would also be measuring the time taken for each of them and plotting them as a line graph to visually compare.</p><h3 id="Implementation-of-the-class"><a href="#Implementation-of-the-class" class="headerlink" title="Implementation of the class"></a>Implementation of the class</h3><p>The sortData class defined in the sampleMainP3.cpp file will be used. The two fields we have here which are private are the number of elements(N) and the elements themselves(elements) which is an array of integers of either short or long(only for experimentation).<br>The methods(prototypes) that would be required for implementation of these sorting techniques are given to you in the sampleMain file.</p><h3 id="Generation-of-the-random-numbers-for-sorting"><a href="#Generation-of-the-random-numbers-for-sorting" class="headerlink" title="Generation of the random numbers for sorting"></a>Generation of the random numbers for sorting</h3><p>You are required to generate random numbers that are numElements number long. The numElements are given to you in the input file.<br>The way you would generate the random numbers is with the seed(srand()) that is given to you in the input file. This seed would make sure the random numbers that you generate are pseudo random. This means that with the same seed, every time you generate the numbers, it will be the same set of numbers.</p><p>The random numbers generated also need to be within the range(between lower and upper) given in the input file.<br>Input file<br>The first line in the input file is the number of elements(numElements). The line following that has the seed followed by the lower range and the upper range for random number generation.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>There will be 2 parts to the submission component in this project. To write the algorithms and sort the pseudo randomly generated numbers so that you pass the GradeScope autograding test cases(upload code saved as project4.cpp). The second would be to experiment and write a report on the sorting algorithms written for an array of short and long integers. More details follow.</p><h3 id="Autograder-submission"><a href="#Autograder-submission" class="headerlink" title="Autograder submission"></a>Autograder submission</h3><p>The code written for the autograding submission would be using the array of short integers. You are given a sample output file and you would need to write the algorithms and display the sorted numbers for the given input file. Nothing fancy here.</p><h3 id="Experimentation-and-Report-submission"><a href="#Experimentation-and-Report-submission" class="headerlink" title="Experimentation and Report submission"></a>Experimentation and Report submission</h3><p>For the experimentation part, you would change the class to having only the numElements and an array of long integers. And you would run both the sorting algorithms to sort these array of long integers.<br>You would have to plot the time taken for sorting(does not include random generation nor printing - use clock_t) 5000, 10000, 50000, 100000 number of elements for both short and long integers for both the algorithms(a graph(time vs numElements) with 4 lines).<br>You also need to explain the results you get by answering the question of why.</p><h3 id="Final-submission-requirement"><a href="#Final-submission-requirement" class="headerlink" title="Final submission requirement"></a>Final submission requirement</h3><p>You would need to submit 3 files at the end.</p><ol><li>project4.cpp - for autograding that uses array of short integers</li><li>project4_long.cpp - for review by grader and uses array of long integers</li><li>Report with plot.</li></ol><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><ol><li>You are allowed to use only the libraries given in the sampleMainP4.cpp.</li><li>You need to work individually in this project.</li><li>Any use of internet’s resources need to be cited in your code.</li></ol>]]></content>
    
    <summary type="html">
    
      排序算法Sorting Algorithm按顺序排列给定的数据。几乎在每个应用程序中都使用了几种排序技术来有效处理多种请求。本次作业将实现Shell Sort和Adaptive sort算法，同时计算每个所花费的时间，并绘制为折线图以进行直观比较。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>ECE175-Go-Fish</title>
    <link href="https://tk1307993.coding.me/ECE175-Go-Fish.html"/>
    <id>https://tk1307993.coding.me/ECE175-Go-Fish.html</id>
    <published>2022-08-31T09:11:34.000Z</published>
    <updated>2022-08-31T09:13:22.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You are to develop an interactive game of Go Fish between two players. In Go Fish, each player takes turns asking for a card with a specific rank or face from another player. The goal is to form a book (a set of 4 cards with the same face or rank). The player with the most books at the end of the game is declared the winner. The gameplay for Go</p><p>Fish is described at <a href="https://en.wikipedia.org/wiki/Go_Fish" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Go_Fish</a>. Your program should operate as follows.</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Go Fish cards are represented as variables of the following type:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">card_s</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> suit[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">card_s</span> *<span class="title">pt</span>;</span></span><br><span class="line">&#125; card;</span><br></pre></td></tr></table></figure><ol><li>You are allowed to add attributes to this definition, but not to remove any. You can represent colors by using card suits. Red: hearts; Yellow: diamonds; Green: clubs; Blue: spades. The action field is used to denote the function of action cards.</li><li>The game is played with a standard 52-card deck.</li><li>At the beginning, the user can choose to shuffle the deck or load a predefined sequence of cards from a file (for testing). The cards are stored in a file in a format of your choice. For instance, they could be stored in the form</li><li>The deck is implemented by a dynamic list of cards. This can be a singly-linked or a doubly-linked list (recommended). The cards drawn from the deck are deleted from the list.</li><li>Each player’s hand is implemented by a dynamic list of cards. The list is initially populated with the cards dealt to each player. The card drawn (played) by each player is added to (deleted from) the respective list.</li><li>The pool of cards in the center is implemented as a dynamic list of cards that is shuffled at the beginning of your game. The cards drawn or discarded in the pile is added/deleted in a dynamic fashion.</li></ol><h3 id="Game-Play"><a href="#Game-Play" class="headerlink" title="Game Play"></a>Game Play</h3><p>The gameplay is described at <a href="https://en.wikipedia.org/wiki/Go_Fish" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Go_Fish</a></p><h3 id="Optional-Features-for-Extra-Credit"><a href="#Optional-Features-for-Extra-Credit" class="headerlink" title="Optional Features for Extra Credit"></a>Optional Features for Extra Credit</h3><ol><li>Any number of players: Modify your code to work with more than two players. Look at the rule changes when more than 4 players participate (in terms of card dealing).</li><li>Game variations: Implement at least four game variations, as they are described in the game description.</li><li>Player automation: Automate one of the players to implement to play the game according to a winning strategy</li><li>Graphics. Add graphics to your game. You can print cards using ascii art. For example.</li></ol><h3 id="Sample-Execution"><a href="#Sample-Execution" class="headerlink" title="Sample Execution"></a>Sample Execution</h3><p>Note: You are encouraged to make your output look more appealing than what is given below. Your interface should display sufficient direction for a user to play the game. Get friends and family to play your game without much assistance.</p><p>It is very likely that you will not get the exact same code execution shown below. This is used to show you how the game should be played.</p>]]></content>
    
    <summary type="html">
    
      代写游戏Go Fish，练习基本的C语言程序设计思想。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS12B-Edit-Distance</title>
    <link href="https://tk1307993.coding.me/CS12B-Edit-Distance.html"/>
    <id>https://tk1307993.coding.me/CS12B-Edit-Distance.html</id>
    <published>2022-08-31T08:40:40.000Z</published>
    <updated>2022-08-31T08:43:13.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You are to write a client program that computes the edit distance between two words, i.e., the minimum number of operations needed to transform one string into the other.</p><p>For this program, an operation is a substitution of as single character, such as from “brisk” to “brick”. The edit distance between the words “dog” and “cat” is 3, because the chain of “dot”, “cot” and “cat” transforms “dog” to “cat”.</p><p>When computing the edit distance between two words, each intermediate word must be an actual valid word. Edit distances are useful in applications that need to determine how similar two strings are, such as spelling checkers.</p><p>Your program should ask the user for the name of a dictionary text file (we will provide this). From this file, you should compute a map from every word to its intermediate neighbors; that is, the words that have an edit distance of 1 from it. Once this map is built, you can ask the user to enter two words to compare and you “walk” the map to find paths from one word to another. This process should be done in a loop: once you compute the edit distance of two words, you prompt again the user for the next two words.</p><p>A good way to process paths to walk the map is to use a linked list of words to visit, starting from the beginning word, such as “dog” in the above example. Your algorithm should repeatedly remove the front word of the list and add all of its neighbors to the end of the list, until the ending word (such as “cat”) is found or until the list becomes empty, which indicates that no path exists between the two words.</p><p>Special cases: (1) If a word is not included in the dictionary your program should print out the message “Word does not exist”, (2) The edit distance of two words with different length is not defined. Therefore, if the two words given as an input by the user do not have the same length then your program should print the message “No solution”, (3) if both cases (1) and (2) occur, you may print either error message.</p><h3 id="General-Guidelines"><a href="#General-Guidelines" class="headerlink" title="General Guidelines"></a>General Guidelines</h3><p>You should download from LATTE two dictionary files. File text.txt has a dictionary of 8 words. You can use it to the your program with the “dog”/“cat” example (among others). File dict.txt is a larger file and you should use it to test your program with more complex examples. We will be using this file for testing your programs.</p><p>You don’t need to create any classes for this part. You only need to write one client program and you should name it EditDistance.java. You should however break your program into methods (e.g., one that builds the map, show transformation paths, calculates edit distance, etc)</p><p>You will be graded on correctness and programming style including the use of good variable names, comments on each class and each method, using local variables when possible, correct use of generics and the other standard style guidelines.</p><h3 id="User-Interaction"><a href="#User-Interaction" class="headerlink" title="User Interaction:"></a>User Interaction:</h3><p>While you choose how you want to break your code up into methods, we choose how your program needs to behave externally. You must follow the template we outline for you below.</p><p>Your program should first ask the user for the name of a dictionary file on one line. Your program should then loop through the following interactions, each of which should be on a separate line.</p><p>Ask the user for two words separated by a single space for which to compute the edit distance.<br>Print “Path = “ followed by each word in the edit path (starting with the first word the user entered), a comma, a space, then the next word. A comma or a space should not follow the last word.<br>Print “Edit distance = x”, where x is the edit distance.<br>Here is an example user interaction where everything in bold is input by the user, and everything not in bold is output by your program.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Enter name <span class="keyword">of</span> dictionary <span class="built_in">file</span>: dict.txt</span><br><span class="line">Enter <span class="literal">two</span> <span class="keyword">words</span> separated <span class="keyword">by</span> <span class="keyword">a</span> <span class="literal">space</span>: dog cat</span><br><span class="line">Path = dog, dot, cot, cat</span><br><span class="line">Edit distance = <span class="number">3</span></span><br><span class="line">Enter <span class="literal">two</span> <span class="keyword">words</span> separated <span class="keyword">by</span> <span class="keyword">a</span> <span class="literal">space</span>: brisk brick</span><br><span class="line">Path = brisk, brick</span><br><span class="line">Edit distance = <span class="number">1</span></span><br><span class="line">Enter <span class="literal">two</span> <span class="keyword">words</span> separated <span class="keyword">by</span> <span class="keyword">a</span> <span class="literal">space</span>: transportation cat</span><br><span class="line">No Solution</span><br><span class="line">Enter <span class="literal">two</span> <span class="keyword">words</span> separated <span class="keyword">by</span> <span class="keyword">a</span> <span class="literal">space</span>: foobar whobar</span><br><span class="line">Word does <span class="keyword">not</span> exist</span><br></pre></td></tr></table></figure><p>You may choose to implement a quit operating by listening for a single word from the user, such as “quit”, if you would like, but you do not have to.</p><h3 id="Design-Hints"><a href="#Design-Hints" class="headerlink" title="Design Hints"></a>Design Hints</h3><p>There are better algorithms for computing edit distance, but this approach runs reasonably quickly even for a large dictionary like dict.txt. The slow part is computing the neighbors, but that could be pre-computed and stored in a separate file. The program uses a LinkedList as a queue to keep track of candidate words to explore. A set is used to keep track of previously explored words. The algorithm keeps a count of how many words are at each distance from the original word so that it can report the edit distance. It also constructs a map each time it explores that keeps track of how it got to each word. That allows the program to report the path between the two words. All in all, this involves a LOT of data structure manipulation using the standard Java collections classes.</p><p>You DON’T need to follow this design. You are free to design your own program as you wish.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Your Java source code should be submitted via Latte the day it is due.</p>]]></content>
    
    <summary type="html">
    
      根据题目所给的算法，计算单词之间的编辑距离。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CSCI2110-Huffman-Coding</title>
    <link href="https://tk1307993.coding.me/CSCI2110-Huffman-Coding.html"/>
    <id>https://tk1307993.coding.me/CSCI2110-Huffman-Coding.html</id>
    <published>2022-08-31T08:17:49.000Z</published>
    <updated>2022-08-31T08:21:02.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The objective of this assignment is to implement the Huffman coding algorithm using the binary tree data structure.</p><p>Download BinaryTree.java, Frequency.txt and Pokemon.txt files given next to the Assignment link.</p><h3 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h3><p>You are given a table of letters of the English alphabet and their frequencies. Build a Huffman tree with the alphabet symbols and their probabilities. Derive the Huffman codes. Using the codes, encode a given text file with the codes. Decode the encoded text file and show that it is the same as the input text file.</p><h3 id="Problem-in-Detail"><a href="#Problem-in-Detail" class="headerlink" title="Problem in Detail"></a>Problem in Detail</h3><p>In order to help you with the assignment, here’s the Huffman algorithm step-by-step procedure (as discussed in the lectures).</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Read the text file frequency.txt. Its link is given next to this lab document. It contains the frequency of letters in the English alphabet based on a sample of 40,000 words as shown below. (The file actually contains each letter and its frequency on two separate lines).</p><p>To do this step, you will find it useful to create a class called Pair.java that defines the letter and its probability as an object.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">char</span> letter;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> prob;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//constructor</span></span><br><span class="line">  <span class="comment">//get and set methods</span></span><br><span class="line">  <span class="comment">//toString method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Using this set of letters and frequencies, build the Huffman tree.</p><h3 id="Step-3-1"><a href="#Step-3-1" class="headerlink" title="Step 3.1"></a>Step 3.1</h3><p>Create a queue of Binary Tree nodes. Each Binary Tree node is of type Pair. The queue can be implemented as another simple Arraylist, where enqueue means adding an item to the end of the Arraylist and dequeue means removing the item at index 0. That is, the queue is an Arraylist of type &lt;BinaryTree<pair>&gt;. The queue contains these sorted according to the increasing order of their frequencies. This is your Queue S. This is done by checking the Arraylist freqs for values in increasing order, creating the binary tree nodes and enqueueing them in the queue.</pair></p><p>If you enumerate the Queue S, it should have the Pair objects in increasing order of their frequencies</p><h3 id="Step-3-2"><a href="#Step-3-2" class="headerlink" title="Step 3.2"></a>Step 3.2</h3><p>Now initialize another queue T (another Arraylist) of type &lt;BinaryTree<pair>&gt;.</pair></p><h3 id="Step-3-3"><a href="#Step-3-3" class="headerlink" title="Step 3.3"></a>Step 3.3</h3><p>Build the Huffman tree according to the algorithm discussed in the lectures.</p><p>For instance, in the above example, first (‘Z’, 0.07) and (‘J’, 0.10), will be dequeued from S. Create a node with the combined frequency. What do you put as the character for the combined node? You can put a dummy character, say ‘&amp;’. So (‘&amp;’,0.17) will be the parent node, and (‘Z’, 0.07) and (‘J’, 0.10), will be the left and right children. This tree will be enqueued to Queue T.</p><p>Submit a zip file containing all the source codes (.java files), Frequency.txt, Pokemon.txt, Encoded.txt and Decoded.txt.</p>]]></content>
    
    <summary type="html">
    
      使用Binary Tree代写Huffman Coding算法。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>COMP1521-Virtual-Memory-Simulator</title>
    <link href="https://tk1307993.coding.me/COMP1521-Virtual-Memory-Simulator.html"/>
    <id>https://tk1307993.coding.me/COMP1521-Virtual-Memory-Simulator.html</id>
    <published>2022-07-11T01:28:35.000Z</published>
    <updated>2022-07-11T01:35:11.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><ul><li>to give you more practice writing C</li><li>to give you experience with a simulation</li><li>to learn more about virtual memory systems</li></ul><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Virtual memory is a powerful technique that allows the main memory of a computer system to be shared amongst a large number of processes. It also allows indivudual processes to have a process address space that is potentially larger than main memory.</p><p>The implementation of virtual memory requires the system to maintain, for each process, a mapping table (page table) that tells where each page is loaded in memory, or that it is not loaded. Whenever the process references an address in its address space, we use the page table to map this virtual address to a real location in the machine’s memory. If a referenced page is not currently loaded, then we need to place it in a memory frame. If there is a free frame, we can use that; if all frames are in use, then we need to make space, by replacing the contents of one of the existing frames.</p><p>For more details on page replacement strategies, see the lecture notes. For this exercise, we focus on:</p><ul><li>LRU … replace the page that hasn’t been accessed for longest time</li><li>FIFO … replace the page that was loaded earliest</li></ul><p>The following diagram shows a page table that maps the pages of a process with 8 pages into the 4 frames in main memory:</p><p>The aim of this assignment is to build a simple simulation of a system like the above, where we can measure how the system behaves if we change the number of pages, number of frames, and the page replacement policy.</p><p>We do not fully represent pages or frames in our system, nor do we “execute” programs. We provide data structures for the page table and a minimal representation of memory pages. This gives enough to read a sequence of page references and measure how the page table might behave in a real implementation.</p><h3 id="Setting-Up"><a href="#Setting-Up" class="headerlink" title="Setting Up"></a>Setting Up</h3><p>Create a new directory for working on the assignment, change into that directory, and then run the command:</p><p>$ unzip /home/cs1521/web/17s2/assigns/ass2/ass2.zip<br>This will add the following files into the directory:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Makefile        <span class="keyword">to</span> control compilation</span><br><span class="line">Stats.[ch]        implementation <span class="keyword">and</span><span class="built_in"> interface </span><span class="keyword">to</span> the summary statistics collection <span class="keyword">and</span> display</span><br><span class="line">Memory.[ch]        implementation <span class="keyword">and</span><span class="built_in"> interface </span><span class="keyword">to</span> the representation of physical memory frames</span><br><span class="line">PageTable.[ch]    implementation <span class="keyword">and</span><span class="built_in"> interface </span>of the<span class="built_in"> page </span>table (what you need <span class="keyword">to</span> modify) </span><br><span class="line">vmsim.c            the main program <span class="keyword">for</span> the virtual memory simulator</span><br><span class="line">mktrace.c        a program <span class="keyword">to</span> generate memory reference traces</span><br></pre></td></tr></table></figure></p><p>The page table is represented by an array of PTE structures which is dynamically created at the start of the simulation. Each PTE contains the following information:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> status;    <span class="comment">// NOT_USED, IN_MEMORY, ON_DISK</span></span><br><span class="line"><span class="keyword">char</span> modified;  <span class="comment">// boolean: has the page changed since loaded?</span></span><br><span class="line"><span class="keyword">int</span> frame;      <span class="comment">// memory frame holding this page</span></span><br><span class="line"><span class="keyword">int</span> accessTime; <span class="comment">// clock tick for last time the page was accessed</span></span><br><span class="line"><span class="keyword">int</span> loadTime;   <span class="comment">// clock tick for last time the page was loaded</span></span><br><span class="line"><span class="keyword">int</span> nPeeks;     <span class="comment">// total number times this page referenced for reading</span></span><br><span class="line"><span class="keyword">int</span> nPokes;     <span class="comment">// total number times this page referenced for writing</span></span><br></pre></td></tr></table></figure><p>You can find more details on the supplied code, and how to use it in the Assignment 2 Video.</p><h3 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h3><p>The aim of this exercise is to implement two page replacement strategies (LRU and FIFO) and collect statistics on the page table’s behaviour. Implementing the page replacement strategies requires you to complete the findVictim() function. Collecting he statiscs requires you to place calls to the statistics functions in the appropriate places. You can find out more details on what statistics need to be collected in the Stats.c file.</p><p>A simple, and extremely inefficient, implementation of LRU replacement would work as follows:<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">oldest</span> = now</span><br><span class="line"><span class="attr">victim</span> = NONE</span><br><span class="line">for (<span class="attr">i</span> = <span class="number">0</span>; i &lt; <span class="comment">#Pages; i++) &#123;</span></span><br><span class="line">  <span class="attr">P</span> = PageTable[i]</span><br><span class="line">  <span class="keyword">if</span> (P's accessTime &lt; oldest)</span><br><span class="line">    <span class="attr">oldest</span> = P's accessTime</span><br><span class="line">    <span class="attr">victim</span> = P's page</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A better strategy would be maintain a list of pages, ordered by access time from oldest (first in list) to most recent (last in list). The above code would then simply remove the first page from the list and use that as the page to be replaced. Of course, the list needs to be updated each time a page is accessed.</p><p>The list should not be implemented as a separate data structure, but could be done by incorporating a “link” to the next page in the list in each PTE. You would also need to maintain a global variable to hold the page number of the first page in the list.</p><p>Similarly, a simple and inefficient implementation of FIFO replacement would work as follows:<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">oldest</span> = now</span><br><span class="line"><span class="attr">victim</span> = NONE</span><br><span class="line">for (<span class="attr">i</span> = <span class="number">0</span>; i &lt; <span class="comment">#Pages; i++) &#123;</span></span><br><span class="line">  <span class="attr">P</span> = PageTable[i]</span><br><span class="line">  <span class="keyword">if</span> (P's loadTime &lt; oldest)</span><br><span class="line">    <span class="attr">oldest</span> = P's loadTime</span><br><span class="line">    <span class="attr">victim</span> = P's page</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>As above, a better strategy would be to maintain a list of pages, ordered by load time from oldest (first in list) to most recently loaded (last in list). The implementation would be similar to that for the LRU list.</p><p>What you are required to do (and you only need to change the PageTable.c file for this assignment) is specified in comments in the PageTable.c file.</p><h3 id="Sample-Outputs"><a href="#Sample-Outputs" class="headerlink" title="Sample Outputs"></a>Sample Outputs</h3><p>To get you started with debugging, sample outputs are available for the following test cases:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./vmsim lru <span class="number">5</span> <span class="number">4</span> &lt; trace1 &gt; out-lru<span class="number">-5</span><span class="number">-4</span>-trace1.txt</span><br><span class="line">./vmsim fifo <span class="number">5</span> <span class="number">4</span> &lt; trace1 &gt; out-fifo<span class="number">-5</span><span class="number">-4</span>-trace1.txt</span><br><span class="line">./vmsim lru <span class="number">8</span> <span class="number">4</span> &lt; trace2 &gt; out-lru<span class="number">-8</span><span class="number">-4</span>-trace2.txt</span><br><span class="line">./vmsim fifo <span class="number">8</span> <span class="number">4</span> &lt; trace2 &gt; out-fifo<span class="number">-8</span><span class="number">-4</span>-trace2.txt</span><br></pre></td></tr></table></figure></p><h3 id="Additional-Requirements"><a href="#Additional-Requirements" class="headerlink" title="Additional Requirements"></a>Additional Requirements</h3><p>You must not implement the process of finding a victim so that it requires a scan of PageTable entries. Similarly it must not require a scan of any list structure that you might define. Also, the process of updating the LRU or FIFO list must not be an O(n) process. A program that produces output that passes the auto-marking, but is scan-based, is worth only 1/4 marks for the auto-marking, and half marks for each of the list-related assessment criteria.</p><p>Do not add extra debugging output using #ifdef DBUG. If you want to add your own debugging output, enclose it in #ifdef MY_DBUG…#endif and add -DMY_DBUG to the line defining CFLAGS in the Makefile.</p><p>Do not change the “standard” behaviour of showPageTableStatus(). If you want to add extra output on the PageTable, enclose it in #ifdef MY_DBUG…#endif. We assume that showPageTableStatus() has the same behaviour as the supplied version for the purposes of auto-marking.</p>]]></content>
    
    <summary type="html">
    
      代写操作系统作业，实现一个虚拟内存仿真器，包括LRU和FIFO.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="OS" scheme="https://tk1307993.coding.me/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>CPSC231-Chasing-Alice</title>
    <link href="https://tk1307993.coding.me/CPSC231-Chasing-Alice.html"/>
    <id>https://tk1307993.coding.me/CPSC231-Chasing-Alice.html</id>
    <published>2022-06-11T01:28:35.000Z</published>
    <updated>2022-07-11T01:30:33.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-Objectives"><a href="#Assignment-Objectives" class="headerlink" title="Assignment Objectives"></a>Assignment Objectives</h3><p>This is an individual assignment. You must submit your own work. This assignment has three goals:</p><ol><li>Analyzing requirements and developing a solution</li><li>Reviewing python constructs including., if, if-else, if-elif-else, loops, and functions</li><li>Practicing basic python programming</li></ol><p>Start the assignment early and avoid procrastination.</p><h3 id="Chasing-Alice"><a href="#Chasing-Alice" class="headerlink" title="Chasing Alice"></a>Chasing Alice</h3><p>For this assignment, you develop a turn-based game where you control a blue turtle, Alex, to chase and catch a red turtle, Alice. Create a canvas (also known as screen) of size 500 x 500. Alex must appear at the middle of the canvas. Alice appears at a random location inside the canvas.</p><p>In each turn, Alice can move either forward by 20 pixels or she can change her direction randomly to left or right by 90 degrees. 2/3 of Alice’s movements should be forward movements and 1/3 should be the random direction changing left or right.</p><p>Alex moves as directed by the player using the keyboard. In each turn, the buttons w, a, s, and d lead Alex to move forward for 30 pixels, turn left for 45 degrees, back for 30 pixels, and right for 45 degrees, respectively. If Alex or Alice cross the canvas’s boundaries, they should reappear at a random1 location on the canvas. The game statistic needs to be provided on the screen as shown in the sample. The game ends if Alex comes within 30 pixels of Alice in any direction. See figure 2 to get an idea of how the game will look like.</p><h3 id="Submission-requirements"><a href="#Submission-requirements" class="headerlink" title="Submission requirements"></a>Submission requirements</h3><p>In order to receive a complete grade no global variable or codes outside functions should be in your program. Create a main function and control the program by calling other functions through main. The program starts with calling main() only. Use constants instead of magic numbers. Follow variable name conventions all through your code and be consistence. Use white lines to separate blocks of codes.</p><p>Name your program ChasingAlice.py then submit it to the D2L Assignment 2 dropbox by the deadline stated at the top of this document.</p><h3 id="Collaboration-Plagiarism-and-Cheating"><a href="#Collaboration-Plagiarism-and-Cheating" class="headerlink" title="Collaboration, Plagiarism, and Cheating"></a>Collaboration, Plagiarism, and Cheating</h3><p>This is an individual assignment and all work that you submit must be your own work. We encourage you to discuss this assignment with other students in the course and discourage you from sharing solutions and code with one another. Sharing solutions and code is a form of plagiarism.</p><p>We use automated procedures to detect plagiarism in assignment submissions. Any student who copies all or part of an assignment that belongs to another student or other sources will be reported to the Dean. The Dean enforces penalties, which may include failing the course and expulsion from the faculty and the university. Please refer to Plagiarism/Cheating/Other Academic Misconduct in the university calendar or the university website on plagiarism for more information.</p>]]></content>
    
    <summary type="html">
    
      代写Python作业，使用Turtle库绘制图像，完成追逐游戏。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CITS2002-Wifistats</title>
    <link href="https://tk1307993.coding.me/CITS2002-Wifistats.html"/>
    <id>https://tk1307993.coding.me/CITS2002-Wifistats.html</id>
    <published>2021-12-31T01:53:22.000Z</published>
    <updated>2021-12-31T01:55:37.290Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>This project will assess your understanding of introductory C99 programming language features, including its control­structures, simple data­ structures, and its standard library support for handling strings and text files. The project can be successfully completed using the information presented in CITS2002’s lectures, laboratories, and workshops, to the end of week­6.</p><p>Nearly all devices that connect to the Internet use networking hardware that conforms to IEEE­802 standards, commonly termed the Ethernet standards. It is common for desktop and laptop computers to have two Ethernet interfaces, one wired (the IEEE­802.3 standard) and one wireless (the IEEE­802.11 standard), while mobile devices and smartphones will typically have a single wireless Ethernet interface and a Bluetooth interface (the IEEE­802.15.1 standard).</p><p>To simplify communication between devices, each Ethernet interface has a unique networking address, termed its Media Access Control (MAC) address. Each MAC address is 6­bytes long but, to make them easier for humans to read and compare, they’re usually written as a sequence of hexadecimal characters separated by colons or hyphens, as in the example 74:e2:f5:20:f9:8b. When written this way, MAC addresses are case­ insensitive ­ that is to say that 74­E2­F5­20­F9­8B is the same address.</p><p>When devices communicate using WiFi (the IEEE­802.11 standard) they break their communication into many small packets of data. Each packet contains MAC addresses to identify the device which transmitted the packet (the transmitter’s address), and the device for which the packet is intended (the receiver’s address). The special MAC address, ff:ff:ff:ff:ff:ff, is termed the broadcast MAC address, and is used when all devices within range should receive the packet.</p><p>Each 6­byte MAC address comprises two 3­byte parts. The first 3­bytes are termed the Organizationally Unique Identifier (OUI), and they identify the vendor of the Ethernet interface. From the address 74:e2:f5:20:f9:8b, the 74:e2:f5 indicates that the interface was made by Apple (see <a href="http://www.macvendorlookup.com)" target="_blank" rel="noopener">www.macvendorlookup.com)</a>.</p><p>The goal of this project is to write a C99 program, named wifistats, that reports the number of bytes either transmitted or received by devices using WiFi. The program may be requested to generate reports sorted by either the device MACs or by the vendors’ names, from the largest transmitter (most bytes transmitted) to the smallest.</p><h3 id="Program-requirements"><a href="#Program-requirements" class="headerlink" title="Program requirements"></a>Program requirements</h3><p>Your program’s single C99 source file must be named wifistats.c</p><p>Your program will be invoked in one of two ways:</p><p>prompt&gt; ./wifistats what packets<br>where what is either the single character ‘t’ or ‘r’ to request statistics about WiFi transmitters, or receivers, respectively. For example, if the program is invoked as ./wifistats t packets then the program should produce statistics about the data transmissions of each transmitting device present in the packets file.</p><p>packets is the name of a text­file providing information about each WiFi packet, one packet per line. Here is a sample­packet file. Each line consists of 4 fields, providing the time that each packet was captured (in seconds and microseconds), the transmitter’s and receiver’s MAC addresses, and the length (in bytes) of the packet. Each of the fields will be separated by a single TAB (‘\t’) character.</p><p>If we ran:</p><p>prompt&gt; ./wifistats t sample-packets<br>this would be the required output.If we ran:</p><p>prompt&gt; ./wifistats r sample-packets<br>this would be the required output.</p><p>prompt&gt; ./wifistats what packets OUIfile<br>where OUIfile is the name of a text­file providing the OUIs and names of Ethernet hardware vendors. If an OUIfile is provided, the program should report its statistics not on individual device MAC addresses but on the vendor that produced each device. Here are two sample OUIfiles: sample­OUIfile­small (40 entries) and sample­OUIfile­large (23,000 entries). The 2 fields will be separated by a single TAB (‘\t’) character, and the vendors’ names may contain spaces.</p><p>For example, if we ran:</p><p>prompt&gt; ./wifistats t sample-packets sample-OUIfile-small<br>this would be the required output.<br>If we ran:</p><p>prompt&gt; ./wifistats r sample-packets sample-OUIfile-small<br>this would be the required output.</p><p>You may assume that all input data is in the correct format.<br>If your program encounters a broadcast MAC address, your program should ignore that input line.<br>If your program encounters an OUI not found in a provided OUI file, it should use/report the vendor’s name as UNKNOWN­VENDOR.</p><p>Your program must support these limits (you may assume that the input data never exceeds these limits):</p><p>maximum number of distinct MAC addresses -­ 500.<br>maximum number of distinct OUIs ­- 25000.<br>maximum length of any vendor name ­ 90 characters.<br>Your program must invoke the standard utility program /usr/bin/sort to sort the final results. Your program must use the system­calls fork() and execv() (and possibly others) to invoke /usr/bin/sort. Your program must not just call the C function system(). Note that the command­line options supported by /usr/bin/sort on OS­X, Linux, and cygwin(Windows) are often different.</p><p>If the data totals of two or more MAC addresses, or two or more vendors (via their OUIs), are identical, then the MAC addresses or vendors with identical totals should be printed in ascending alphabetical order.</p><p>Your program must employ sound programming practices, including the use of meaningful comments, well chosen identifier names, appropriate choice of basic data­structures and data­types, and appropriate choice of control­flow constructs.</p><h3 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h3><p>Projects will be marked using an automatic marking program (for correctness) and by visual inspection (for good programming practices). It is thus important that your program produces its output in the correct format. This project is worth 15% of your final mark for CITS2002. It will be marked out of 40. The project may be completed individually or in teams of two (working as a team is STRONGLY encouraged).</p><p>During the marking, attention will obviously be given to the correctness of your solution. However, a correct and efficient solution should not be considered as the perfect, nor necessarily desirable, form of solution. Preference will be given to well presented, well documented solutions that use the appropriate features of the language to complete tasks in an easy to understand and easy to follow manner. Your program must employ sound programming practices, including the use of meaningful comments, well chosen identifier names, appropriate choice of basic data­structures and data­types, and appropriate choice of control­flow constructs. Do not expect to receive full marks for your program simply because it works correctly. Remember, a computer program should not only convey a message to the computer, but also to other human programmers.</p><p>Your project will be marked on the computers in CSSE Lab 2.03, using the macOS environment. No allowance will be made for a program that “works at home” but not on CSSE Lab 2.03 under macOS, so be sure that your code compiles and executes correctly on these machines before you submit it.</p>]]></content>
    
    <summary type="html">
    
      代写一个网络嗅探器，可以获取网络数据包。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network" scheme="https://tk1307993.coding.me/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS103-Car-Rental</title>
    <link href="https://tk1307993.coding.me/CS103-Car-Rental.html"/>
    <id>https://tk1307993.coding.me/CS103-Car-Rental.html</id>
    <published>2021-10-22T11:06:40.000Z</published>
    <updated>2021-10-22T11:11:16.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You are tasked with creating a car-rental app.</p><p>There can be multiple cars with the same model and manufacturer.<br>The status of a car in the system may have one of the three values :<br>“reserved”<br>“checked out”<br>“available”</p><p>A user can reserve a car or rent a car without a previous reservation. A user is not allowed to have more than one car rented at a time. Only after canceling a reservation or returning a rented car, can a user can reserve or rent another car.</p><p>The reservation process is automatic, and does not require an admin to approve requests. If the status of a car is “available” and a user rents it, the status of that car immediately transitions to “reserved”. But an admin can edit the reservation later.</p><p>When a reservation is made, it must specify the time that the car is to be picked up (“checked out”) and returned. In order to simulate checkout and returns actions in the real world, there should be buttons that a user can manually click to indicate that a car has been checked out or returned.</p><p>The minimum rental period is 1 hour and the maximum is 10 hours. The system should cancel a reservation if a user doesn’t check out a car in time. The time elasticity is 30 minutes after the pickup time. For example, if a user reserved a car to pick up at 3:00pm, if the car was not checked out by 3:31pm, then the car should become “available” again.</p><p>If a user doesn’t return a car on the date promised when it was checked out, the system will sent a notification (e.g. system message) to the user and automatically change the car status to “available”.</p><p>A user can only reserve a car 7 days in the future.</p><p>A user can return a car before the specified return time by clicking the “return” button. If a user does this, then the car should become “available”.</p><p>There’s no elasticity in the return time. If the user doesn’t return the car in time (at the specified return time), the car will automatically become “available” and other users can check out this car. For example, user A reserves a car from 2pm to 4pm, user B reserves the same car from 4pm to 6pm. If A doesn’t return the car at 4pm, the system should automatically change the car status to “reserved” and user B can click “check out” button to pick up the car. If no user has reserved this car at 4pm, then the car should automatically become “available”.</p><p>There’s no penalty when a user doesn’t return a car. This app just has a simple payment system. A penalty would only make the calculation more complex.</p><p>The rental charge in user profile is not a deposit. It’s the total fee for the previous successful rental. The system doesn’t need to check if a user has enough on deposit to check out a car because there’s no deposit in this app.<br>A Car will have the following attributes</p><p>License-plate number (a 7-digit string unique for each Car)<br>Manufacturer<br>Model (String …this app doesn’t need to validate that the model is actually produced by the indicated manufacturer.)<br>Hourly Rental rate<br>Style (Coupe, Sedan or SUV)<br>Location (office where the car can be picked up)<br>Status to indicate availability:<br>Checked out - when a customer checks out the car or an admin checks out the car on behalf of a customer<br>Available - otherwise</p>]]></content>
    
    <summary type="html">
    
      代写汽车租赁的小程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CIS2750-LinkedList</title>
    <link href="https://tk1307993.coding.me/CIS2750-LinkedList.html"/>
    <id>https://tk1307993.coding.me/CIS2750-LinkedList.html</id>
    <published>2021-10-04T11:19:51.000Z</published>
    <updated>2021-10-04T11:20:49.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>For this assignment you must implement a list API that has been specified for you. You have been provided with a header file LinkedListAPI.h. You will need to create a file LinkedListAPI.c, which implements all of the functions specified in the header.</p><p>You cannot modify the header file and any way and all your functions must match the header exactly. Your assignment will be evaluated using an automated test suite, and deviations from the requirements specified in the header and the assignment description will result in severe penalties.</p><p>Note that while the list API is based on the one used in CIS*2520 this summer, that are a few differences. The biggest one is the addition of the iterator struct and related functions, but there are a few small changes here and there. Please read the header file carefully.</p><p>I have provided two sample main files that test the list API with two different types of contents. These must work with your list with absolutely no modifications. These files are meant as a guideline that will let you know whether you’re on the right track. They are not exhaustive test suites. You must test all of the functions provided by the list API yourself to make sure they match the requirements.</p><p>As mentioned in class, you are welcome to re-use your old list code from CIS<em>2520. If you did not take CIS</em>2520 with Judi McQuaig or Fangju Wang, make sure to contact your instructor to obtain their permission to use the code. In the header of the LinkedListAPI.c file state which course you are basing your list on.</p><p>A sample .c file with all the required submission headers and comments will be provided separately.</p><p>Compile your code with -Wall -std=c11 flags. Yes, we’ll be using C11 as the default C standard throughout the course. If you want to debug your code using gdb, remember to include the -g flag.</p><p>If you know how to use valgrind, make sure you find and fix all memory leaks. For this assignment, you will not lose marks for memory leaks, since we haven’t yet covered valgrind in class. However, starting with Assignment 1, memory leaks will result in deductions.</p><h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><p>Your code must compile, run, and have all of the specified functionality implemented. Any compiler errors will result in the automatic grade of zero (0) for the assignment.</p><p>Marks will be deducted for:</p><p>Incorrect and missing functionality<br>Deviations from the requirements<br>Run-time errors<br>Compiler warnings<br>Bad /inconsistent indentation<br>Bad variable names<br>Insufficient comments<br>Failure to follow submission instructions<br>To make it easier for you to test your code, I have provided two test files: StringListDemo.c and StructListDemo.c. Make sure that your list API complies and runs with both of them.</p><p>Make sure you compile and run your code in the lab or on the server. The course page will have a link to a Linux iso for VirtualBox that matches the SoCS Linux server. If the link isn’t up yet, it will be posted shortly.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit your LinkedListAPI.c file using Moodle. Additional submission guidelines will be added before the due date.</p><p>Late submissions: see course outline for late submission policies.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构中的Linked List，完成LinkedListAPI中的所有接口函数。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>ENGR30003-Numerical-Programming-for-Engineers</title>
    <link href="https://tk1307993.coding.me/ENGR30003-Numerical-Programming-for-Engineers.html"/>
    <id>https://tk1307993.coding.me/ENGR30003-Numerical-Programming-for-Engineers.html</id>
    <published>2021-09-27T12:51:43.000Z</published>
    <updated>2021-09-27T12:54:43.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>This project requires you to demonstrate your understanding of dynamic memory, linked lists and basic numerical computation. The key objective of this assignment is to solve a set of tasks which involve processing of flow around a flat plate.</p><h3 id="Flow-Around-a-Flat-Plate"><a href="#Flow-Around-a-Flat-Plate" class="headerlink" title="Flow Around a Flat Plate"></a>Flow Around a Flat Plate</h3><p>In the field of Fluid Mechanics, flow around a flat plate perpendicular to the flow direction is still an active area of research. With advent of high performance computing and supercomputers, it has now become possible to look at this simple case with a greater deal of accuracy. The problem consists of a flat plate that is perpendicular to the main flow direction as shown in Figure 1 (left). The blue arrows indicate the direction of the flow while the shaded object is the flat plate. This generates a wake behind the flat plate and exerts a pressure force on the plate, similar to the force you feel when you hold your hand out in a moving car. At a given instant the flow behind the flat plate is extremely complex and a snapshot of the flow domain is shown in Figure 1 (right).</p><h3 id="Working-with-the-Data"><a href="#Working-with-the-Data" class="headerlink" title="Working with the Data"></a>Working with the Data</h3><p>For this assignment, you will process the wake data from a flat plate case. The data has been provided to you in a CSV format file (flow data.csv) with the following form:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x, y, u, v</span><br><span class="line"><span class="number">10.028</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054866</span></span><br><span class="line"><span class="number">10.077</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054739</span></span><br><span class="line"><span class="number">10.126</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054612</span></span><br><span class="line"><span class="number">10.175</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054484</span></span><br><span class="line"><span class="number">10.224</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054357</span></span><br></pre></td></tr></table></figure></p><p>Each line corresponds to a point in the flow domain with coordinates (x,y). The velocities at that given point in x and y are given by u and v respectively.</p><h3 id="Processing-Tasks"><a href="#Processing-Tasks" class="headerlink" title="Processing Tasks"></a>Processing Tasks</h3><p>This assignment consists of four processing tasks which will be assessed independently. For each task you are to measure the run time it takes to complete the described task using your program (see program output below). Each of the four tasks must not require more than 60 seconds to run on dimefox. This means, in order to complete the task within this time limit, you may need to focus on the efficiency of your solution for each problem. Overall you have to write a single program, performing each of the four tasks sequentially. For each task you have to write your results to a file on the disk.</p><h3 id="Task-1-Maximum-Velocity-Difference"><a href="#Task-1-Maximum-Velocity-Difference" class="headerlink" title="Task 1: Maximum Velocity Difference"></a>Task 1: Maximum Velocity Difference</h3><p>It is sometimes helpful to understand what’s the range of velocities in the flow. For the first task, you must compute the maximum velocity difference in u and v after coordinate x = 20. Specifically, you must output first the two points in the domain where the magnitude of the u velocity difference is maximum followed by the two points in the grid where the magnitude of the v velocity difference is maximum. For each set of points, the point with the maximum of the given velocity must be first followed by the point with the minimum velocity. The output should be to the file called task1.csv and should be formatted as below. There must be no blank spaces between the values and around the commas. Each value must be written to 6 decimal places.</p><p>It is imperative that you write it out the way described above and shown below otherwise comparing your output to the solution would result in an error and you would lose marks.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y</span>, <span class="selector-tag">u</span>, <span class="selector-tag">v</span></span><br><span class="line">40<span class="selector-class">.512346</span>, <span class="selector-tag">-19</span><span class="selector-class">.595387</span>, 1<span class="selector-class">.007986</span>, <span class="selector-tag">-0</span><span class="selector-class">.001002</span></span><br><span class="line">66<span class="selector-class">.899192</span>, <span class="selector-tag">-0</span><span class="selector-class">.729056</span>, 0<span class="selector-class">.850117</span>, 0<span class="selector-class">.0005807</span></span><br><span class="line">69<span class="selector-class">.552467</span>, <span class="selector-tag">-0</span><span class="selector-class">.729056</span>, 0<span class="selector-class">.852483</span>, 0<span class="selector-class">.0004275</span></span><br><span class="line">60<span class="selector-class">.961891</span>, 0<span class="selector-class">.442134</span>, 0<span class="selector-class">.838355</span>, <span class="selector-tag">-0</span><span class="selector-class">.0006330</span></span><br></pre></td></tr></table></figure></p><p>The above is an example of what the file should look like and is not the actual solution. Also note that the data provided in flow data.csv is not in any chronological order and you must efficiently look only at points where the value of x is greater than 20. You can use file io.c to understand how to output data to a file.</p><h3 id="Task-2-Mean-Velocities-on-a-Coarser-Grid"><a href="#Task-2-Mean-Velocities-on-a-Coarser-Grid" class="headerlink" title="Task 2: Mean Velocities on a Coarser Grid"></a>Task 2: Mean Velocities on a Coarser Grid</h3><p>Each line in the file flow data.csv is a point location in the domain. These points when joined together will create a mesh (also called a grid). For this task, you will map these points onto a coarser grid, computing the new average coordinates (x,y) and the corresponding velocities (u,v). The flow domain can be thought as divided into a two dimensional grid such that each cell of the grid would contain multiple points, the number of which would depend on the cell upper and lower dimensions and the coordinates of the points. You would compute the average coordinates and velocities for each cell using the formula below for all points k within a given cell (this is for the x coordinate; same formula to be used for y, u, v).</p><p>Finally, you must output the results of the averaged values and the score to task2.csv in descending order based on the score for each cell. An example of what the output should look like is shown below. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y</span>, <span class="selector-tag">u</span>, <span class="selector-tag">v</span>, <span class="selector-tag">S</span></span><br><span class="line">20<span class="selector-class">.464390</span>, 19<span class="selector-class">.001188</span>, 1<span class="selector-class">.009472</span>, 0<span class="selector-class">.003123</span>, 3<span class="selector-class">.614885</span></span><br><span class="line">26<span class="selector-class">.493395</span>, <span class="selector-tag">-2</span><span class="selector-class">.917140</span>, 0<span class="selector-class">.950080</span>, 0<span class="selector-class">.003106</span>, 3<span class="selector-class">.564577</span></span><br><span class="line">26<span class="selector-class">.493395</span>, 2<span class="selector-class">.922365</span>, 0<span class="selector-class">.949606</span>, <span class="selector-tag">-0</span><span class="selector-class">.002937</span>, 3<span class="selector-class">.562721</span></span><br><span class="line">26<span class="selector-class">.493443</span>, 10<span class="selector-class">.961477</span>, 1<span class="selector-class">.016337</span>, 0<span class="selector-class">.001415</span>, 3<span class="selector-class">.544763</span></span><br><span class="line">26<span class="selector-class">.493443</span>, <span class="selector-tag">-11</span><span class="selector-class">.009443</span>, 1<span class="selector-class">.016268</span>, <span class="selector-tag">-0</span><span class="selector-class">.001393</span>, 3<span class="selector-class">.542255</span></span><br><span class="line">23<span class="selector-class">.490141</span>, <span class="selector-tag">-16</span><span class="selector-class">.954090</span>, 1<span class="selector-class">.010923</span>, <span class="selector-tag">-0</span><span class="selector-class">.002471</span>, 3<span class="selector-class">.489632</span></span><br><span class="line">23<span class="selector-class">.490141</span>, 16<span class="selector-class">.966158</span>, 1<span class="selector-class">.010908</span>, 0<span class="selector-class">.002496</span>, 3<span class="selector-class">.488729</span></span><br></pre></td></tr></table></figure></p><p>The size of the grid (number of cells in each direction) must be an input parameter, allowing the code to run different grid sizes. Your implementation would be checked for the grid resolution of 24 i.e. 24 cells in x and 24 cells in y. The domain extent for this coarse grid in x and y is 10 to 70 units and -20 to 20 units respectively. An example of the coarse grid is shown in Figure 2 (left). The 24 cells in x direction would span from -10 to 70 units while the 24 cells in y direction would span -20 to 20 units. Also shown is an example of a cell within this grid. As can be seen, the cell is of width x and height y and the black dots show the points in the original grid. Once you do the averaging for all these points, you will end up with one average point (shown in red).</p><h3 id="Task-3-Velocity-and-It’s-Statistics"><a href="#Task-3-Velocity-and-It’s-Statistics" class="headerlink" title="Task 3: Velocity and It’s Statistics"></a>Task 3: Velocity and It’s Statistics</h3><p>For this task, you have to compute the threshold statistics of u velocity magnitudes i.e. how many points in the domain have the magnitude of u under 0.5, under 0.6 and so on. Then you must compute the % of points under each band. An example of this is given below.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">threshold, points, percentage</span><br><span class="line"><span class="number">0.500000</span>, <span class="number">126</span>, <span class="number">11.012561</span></span><br><span class="line"><span class="number">0.600000</span>, <span class="number">256</span>, <span class="number">22.536942</span></span><br><span class="line"><span class="number">0.700000</span>, <span class="number">348</span>, <span class="number">30.613564</span></span><br><span class="line"><span class="number">0.800000</span>, <span class="number">582</span>, <span class="number">51.300236</span></span><br><span class="line"><span class="number">0.900000</span>, <span class="number">810</span>, <span class="number">71.352145</span></span><br><span class="line"><span class="number">1.000000</span>, <span class="number">902</span>, <span class="number">79.496213</span></span><br><span class="line"><span class="number">1.100000</span>, <span class="number">1136</span>, <span class="number">100.000000</span></span><br></pre></td></tr></table></figure></p><p>This example shows that there are 582 points in the domain where the magnitude of u is under 0.8. You must output the results in the same format as above to task3.csv. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown above.</p><h3 id="Task-4-Wake-Profile-Visualization"><a href="#Task-4-Wake-Profile-Visualization" class="headerlink" title="Task 4: Wake Profile Visualization"></a>Task 4: Wake Profile Visualization</h3><p>For this task, you will visualise the wake profile generated by writing the wake boundaries to a text file. To do this, you will first calculate the y coordinate of maximum u velocity. This is to be done for locations x = 10,15,20,25,30,35,40,45,50,55,60,65, i.e. you will look through all the relevant points for each specified x location to choose the maximum of u and pick the corresponding y coordinate. Since the data doesn’t contain exact x coordinates as described here, you will take the x coordinate which are closest to these these numbers. For instance, the closest number to x = 50 in the data file is x = 49.999. To pick the relevant x coordinate, you can use a bound of 0.05 about the specified location (Note that there is exactly one x coordinate that will fall inside the bound so you don’t have to worry about a tie). Output the chosen x location and the magnitude of the corresponding y coordinate in the following format to task4 1.csv. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y_h</span></span><br><span class="line">29<span class="selector-class">.980000</span>, 5<span class="selector-class">.921400</span></span><br><span class="line">49<span class="selector-class">.999001</span>, 6<span class="selector-class">.739500</span></span><br><span class="line">54<span class="selector-class">.983002</span>, 6<span class="selector-class">.956200</span></span><br></pre></td></tr></table></figure></p><p>Now that you’ve obtained the y coordinates, calculate the spacing for each location using the following formula:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spacing = ceil(10 |<span class="string">y</span>|<span class="string">)</span></span><br></pre></td></tr></table></figure></p><p>A skeleton version has been provided to you, complete with the print statements to print out the wake boundary. All you need to to do is to obtain the spacings for these 12 x locations into the array yheight where yheight[0] corresponds to the spacing for x=10. The output should be written to the file task4_2.txt.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>You need to submit your program for assessment. Submissions will not be done via the LMS; instead you will need to log in to the server dimefox and submit your files using the command submit . You can (and should) use submit both early and often to get used to the way it works, and also to check that your program compiles correctly on our test system, which has some different characteristics to the lab machines. Only the last submission will be marked. The submission server may be very slow towards the deadline as many students are submitting. Therefore, please do not wait until the last few minutes to make the first attempt of submission. If you make a submission attempt a few minutes before the deadline but the submission was completed after the deadline, your submission will be treated as a submission AFTER the deadline.</p>]]></content>
    
    <summary type="html">
    
      代写工程领域中的数值编程，解决实际的工程问题。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP10002-Text-Search</title>
    <link href="https://tk1307993.coding.me/COMP10002-Text-Search.html"/>
    <id>https://tk1307993.coding.me/COMP10002-Text-Search.html</id>
    <published>2021-09-24T00:09:55.000Z</published>
    <updated>2021-09-24T00:12:51.808Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>In this project you will demonstrate your understanding of arrays, strings, and functions. You may also use typedefs and structs if you wish - and will find the program easier to assemble if you do - but you are not required to use them in order to obtain full marks. Nor do you need to make any use of malloc() in this project.</p><h3 id="Text-Search"><a href="#Text-Search" class="headerlink" title="Text Search"></a>Text Search</h3><p>The Unix command-line tool grep provides the ability to identify the lines in a file that exactly match a pattern supplied as a command-line argument. There are also useful options in grep for the search to be case-insensitive (“-i”) and to match on whole words only (“-w”).</p><p>However there are also times when we want to perform a less precisely defined search, looking for partial matches to (possibly multiple) strings, rather than exact matches relative to one string. For example, we might be unsure of how to spell “latitude” and “longitude”, and want to be able to use “lat long” as a query to identify - in some kind of decreasing-score order - the lines in an input document that contain one or more words that start with those two strings. Similarly, we might be unsure of how to spell someone’s name, and not be bothered if a search for “alis mof” finds all of “Alistair Moffat”, “Alison Mofet”, “Alistair, plus Bob Moffat”, and so on.</p><p>In this project you will write a program that reads text from stdin, generates a “match score” for each line relative to a query supplied on the command-line, and then prints out the lines that have the highest scores - a bit like documents are scored and ranked in web search engines. But, unlike Google and Bing, you will not use an index, and instead you are encouraged (in this project) to make use of obvious approaches. Over a query of up to a five or eight words, and an input text of up to a few megabytes (which is actually quite big), your program should (and had better!) still operate in a second or so. That is, you do not need to implement the pattern search algorithms that are being discussed in class; and may use straightforward matching techniques, including any suitable functions in string.h.</p><h3 id="Input-Data"><a href="#Input-Data" class="headerlink" title="Input Data"></a>Input Data</h3><p>Input to your program will come in two parts: a query, specified on the command-line (see Section 7.11 of the textbook) as a sequence of lowercase alphanumeric strings; and a stream of text, to be (always) read from stdin. If you vary away from these interface requirements the automated testing process will fail your program!</p><p>A range of text input data will be used during the post-submission testing. As you develop your program according to the stages listed below, the output will evolve. Output examples for both the alice-eg.txt and full Alice’s Adventures in Wonderland pg11.txt file are linked from the FAQ page. You should also check your program against other queries and inputs, of course. Testing and debugging is your responsibility.</p><h3 id="Stage-1-Checking-the-Command-Line"><a href="#Stage-1-Checking-the-Command-Line" class="headerlink" title="Stage 1 - Checking the Command-Line"></a>Stage 1 - Checking the Command-Line</h3><p>In this stage you are to demonstrate that you can access the first of the two required inputs, the query from the command-line. The query itself will be provided to you via argc and argv. If argc is zero when your program is called you should print the required error message and exit; and if any character in any of the strings making up the query is not a lowercase alphabetic or numeric character, you should print that particular string and the required error message. For example:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mac:</span> <span class="string">./ass1</span> <span class="string">&lt;</span> <span class="string">alice-eg.txt</span></span><br><span class="line"><span class="attr">S1:</span> <span class="literal">No</span> <span class="string">query</span> <span class="string">specified,</span> <span class="string">must</span> <span class="string">provide</span> <span class="string">at</span> <span class="string">least</span> <span class="string">one</span> <span class="string">word</span></span><br><span class="line"><span class="attr">mac:</span> <span class="string">./ass1</span> <span class="string">lat</span> <span class="number">66</span> <span class="string">loNg</span> <span class="number">32</span> <span class="string">words</span> <span class="string">&lt;</span> <span class="string">alice-eg.txt</span></span><br><span class="line"><span class="attr">S1:</span> <span class="string">query</span> <span class="string">=</span> <span class="string">lat</span> <span class="number">66</span> <span class="string">loNg</span> <span class="number">32</span> <span class="string">words</span></span><br><span class="line"><span class="attr">S1: loNg:</span> <span class="string">invalid</span> <span class="string">character(s)</span> <span class="string">in</span> <span class="string">query</span></span><br></pre></td></tr></table></figure></p><p>mac:<br>Note how each output line is prefixed by the stage number that generated it.</p><h3 id="Stage-2-Reading-the-Input"><a href="#Stage-2-Reading-the-Input" class="headerlink" title="Stage 2 - Reading the Input"></a>Stage 2 - Reading the Input</h3><p>In this next stage, you are to demonstrate that you can correctly access the text from stdin, by printing out each input line, its length in characters, and the number of words it contains. For the example query and text, the first few lines of your output should be (exactly):<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mac:</span> <span class="string">./ass1</span> <span class="string">lat</span> <span class="string">long</span> <span class="string">&lt;</span> <span class="string">alice-eg.txt</span></span><br><span class="line"><span class="attr">S1:</span> <span class="string">query</span> <span class="string">=</span> <span class="string">lat</span> <span class="string">long</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">Down,</span> <span class="string">down,</span> <span class="string">down.</span> <span class="string">Would</span> <span class="string">the</span> <span class="string">fall</span> <span class="string">NEVER</span> <span class="string">come</span> <span class="string">to</span> <span class="string">an</span> <span class="string">end!</span> <span class="string">'I wonder how</span></span><br><span class="line"><span class="string">S2: line = 1, bytes = 68, words = 14</span></span><br><span class="line"><span class="string">---</span></span><br></pre></td></tr></table></figure></p><p>and so on, see the FAQ page for the full required output. A word is defined to be a maximal length sequence of alphanumeric characters.</p><p>You may assume that no input line contains more than 1,000 characters. Note the item in the FAQ page about newline differences between PC and Unix systems. You should copy the mygetchar() function into your program and use it (and only it) when you are reading input lines.</p><h3 id="Stage-3-Scoring-Lines"><a href="#Stage-3-Scoring-Lines" class="headerlink" title="Stage 3 - Scoring Lines"></a>Stage 3 - Scoring Lines</h3><p>Each input line next needs to be given a score relative to the query. If there are q query words specified on the command-line (that is when argc = q + 1), if wi is the i th of the query words (that is, when argv[i] = wi), and if fi is the number of times that word wi is a case-insensitive prefix match against a word that appears in that input line, A prefix match occurs if every character of the query term matches at the beginning of a words in the input line. For example, “ali” is a prefix match of all of “Ali”, “Alistair”, “Alison”, and “alimentary”; and is not a prefix match of any of “alloy”, “al”, “ai”, or “malice”. Lines that have no matches against any query terms will automatically get a score of zero according to this formula. Scores are to be calculated and represented as doubles; be aware that rounding in double arithmetic might lead to your program giving slightly different values to mine in some cases. When printed to three decimal places, the values are probably going to agree, but small implementation-dependent (based primarily on the exact order the operations are carried out by the compiled program) differences in computed values are always possible.</p><p>The required output for this stage is a score per line, interleaved with the previous Stage 2 output. The FAQ shows example executions, so that you can confirm that you understand what it is that you are to compute and how it is to be output - look for the lines that commence with “S3:”. Note that log2 x can be computed via log(x)/log(2.0), with log (natural logs) available in math.h.</p><h3 id="Stage-4-Ranked-Summary-Output"><a href="#Stage-4-Ranked-Summary-Output" class="headerlink" title="Stage 4 - Ranked Summary Output"></a>Stage 4 - Ranked Summary Output</h3><p>Once you have the Stage 3 scoring regime working correctly, it is time to move on to the main goal - presenting lines in decreasing score order. Add data structures to your program that retain the (up to) five highest-scoring lines, and their scores. Then, once all of the input lines have been read, print those five lines (or up to five lines, if there are not five lines with non-zero scores) and their line numbers and scores, in decreasing score order. If the scores are tied (when doing simple comparisons on double values using == and &lt;=, don’t try and be clever), then lines should be presented in line number order.</p><p>For the test file alice-eg.txt and the three-term query “ali lat long”, the required output from this stage is:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-----------------------------------------------</span></span><br><span class="line"><span class="attr">S4:</span> <span class="string">line</span> <span class="number">9</span><span class="string">,</span> <span class="string">score</span> <span class="string">=</span> <span class="number">0.668</span></span><br><span class="line"><span class="string">or</span> <span class="string">Longitude</span> <span class="string">I've</span> <span class="string">got</span> <span class="string">to?'</span> <span class="string">(Alice</span> <span class="string">had</span> <span class="literal">no</span> <span class="string">idea</span> <span class="string">what</span> <span class="string">Latitude</span> <span class="string">was,</span> <span class="string">or</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="attr">S4:</span> <span class="string">line</span> <span class="number">10</span><span class="string">,</span> <span class="string">score</span> <span class="string">=</span> <span class="number">0.233</span></span><br><span class="line"><span class="string">Longitude</span> <span class="string">either,</span> <span class="string">but</span> <span class="string">thought</span> <span class="string">they</span> <span class="string">were</span> <span class="string">nice</span> <span class="string">grand</span> <span class="string">words</span> <span class="string">to</span> <span class="string">say.)</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="attr">S4:</span> <span class="string">line</span> <span class="number">4</span><span class="string">,</span> <span class="string">score</span> <span class="string">=</span> <span class="number">0.229</span></span><br><span class="line"><span class="string">thousand</span> <span class="string">miles</span> <span class="string">down,</span> <span class="string">I</span> <span class="string">think--'</span> <span class="string">(for,</span> <span class="string">you</span> <span class="string">see,</span> <span class="string">Alice</span> <span class="string">had</span> <span class="string">learnt</span> <span class="string">several</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="attr">S4:</span> <span class="string">line</span> <span class="number">8</span><span class="string">,</span> <span class="string">score</span> <span class="string">=</span> <span class="number">0.226</span></span><br><span class="line"><span class="string">'--yes, that'</span><span class="string">s</span> <span class="string">about</span> <span class="string">the</span> <span class="string">right</span> <span class="string">distance--but</span> <span class="string">then</span> <span class="string">I</span> <span class="string">wonder</span> <span class="string">what</span> <span class="string">Latitude</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>The FAQ page shows some other example interactions with the desired program.</p><p>Note that you may not retain every input line in an array of strings, and your program may not assume some maximum number of lines in the input. You can only retain five (as a #defined value, of course) lines and their scores at any given time, plus the current line that is being processed; plus access the supplied query via argv.</p><h3 id="General-tips"><a href="#General-tips" class="headerlink" title="General tips.."></a>General tips..</h3><p>You will probably find it helpful to include a DEBUG mode in your program that prints out intermediate data and variable values. Use #if DEBUG and #endif around such blocks of code, and then #define DEBUG 1 or #define DEBUG 0 at the top. Disable the debug mode when making your final submission, but leave the debug code in place. The FAQ page has more information about this.</p><p>Finally, note that the sequence of stages described in this handout is deliberate - it represents a sensible path though to the required program. You can, of course, ignore the advice and try and write final program in a single effort, without developing it incrementally and testing it in phases. You might even get away with it, this time and at this somewhat limited scale, and develop a program that works. But in general, one of the key things that makes some people better at programming than others is the ability to see a design path through simple programs, to more comprehensive programs, to final programs, that keeps the complexity under control at all times.</p>]]></content>
    
    <summary type="html">
    
      使用基础的C语言语法，代写一个文本查询工具。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP206-Graph-Traversal-and-Dijkstras-Algorithm</title>
    <link href="https://tk1307993.coding.me/COMP206-Graph-Traversal-and-Dijkstras-Algorithm.html"/>
    <id>https://tk1307993.coding.me/COMP206-Graph-Traversal-and-Dijkstras-Algorithm.html</id>
    <published>2021-09-17T01:45:50.000Z</published>
    <updated>2021-09-17T01:48:12.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this project you will use the Graph ADT and Dijkstra’s algorithm to compute the length of the shortest path (number of nodes visited), and for extra credit the path with the fewest turns. The input graphs are actual street map of Manhattan NY and Manhattan Kansas</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The goal of this programming project is for you to master (or at least get practice on) the following tasks:</p><ul><li>Establishing a Graph ADT from a real life application</li><li>Using Dijkstra’s algorithm to find length of a path.</li><li>Inputting user origination and destination information</li><li>working with existing code</li></ul><h3 id="Helpful-code"><a href="#Helpful-code" class="headerlink" title="Helpful code"></a>Helpful code</h3><p>The main class that will call methods the Graph ADT in chapter 10 which are also provided attached to the assignment. This java project ProgProject4 provides and application that creates a graph using the books graph ADT classes. There is also a package that contains a class to execute Dijkstra’s algorithm.</p><h3 id="Project-Steps"><a href="#Project-Steps" class="headerlink" title="Project Steps"></a>Project Steps</h3><ol><li>Create a graph based upon the given street map. Each expected vertex in your graph is represented by a blue dot. The blue dots represent a traffic intersection. Your vertex should be an instance of an Intersection Class, not a String as used in most class examples. Your program should read an input file containing all information about the intersection including all streets that meet at that intersection.</li><li>Traverse through the graph and find the length, or the number of nodes , of the shortest paths for the origination to destination path.</li><li>For 5 points extra credit, find the path with the shortest number of turns. A turn is defined as a path of 3 vertices where the edge street names are not the same.<br>Hint - for fewest number of turns, store the name of the street of the edge. A turn is when a vertex on the path is reached by 2 edges with different names.</li></ol><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>When inputting an intersection, always assume street names are sorted, and only the street name (not ave or road) is provided.</p><p>Ignore One Way arrows on maps</p><p>Expected Results:</p><p>Map 1: Manhattan Kansas<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Input</span>:</span><br><span class="line"><span class="attribute">Origination</span>:   Hudson,Kimball     <span class="attribute">Destination</span>:  Claflin,Denison </span><br><span class="line"><span class="attribute">Output</span>:</span><br><span class="line">Minimum Path <span class="attribute">Length</span>: <span class="number">6</span>    Minimum <span class="attribute">Turns</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Input</span>:</span><br><span class="line"><span class="attribute">Origination</span>:   College     <span class="attribute">Destination</span>:  Claflin,NManhattan</span><br><span class="line"><span class="attribute">Output</span>:</span><br><span class="line">Minimum Path <span class="attribute">Length</span>: <span class="number">4</span>    Minimum <span class="attribute">Turns</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>Map 2: Manhattan New York<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span></span><br><span class="line"><span class="string">Origination:</span> Canal, Spring     <span class="string">Destination:</span>  Spring, Thomson </span><br><span class="line"><span class="string">Output:</span></span><br><span class="line">Minimum Path <span class="string">Length:</span> <span class="number">5</span>    Minimum <span class="string">Turns:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>Since you will be using the ProgProject4 class provided, running your program should be produce a series of input prompts for the origination and destination locations.</p>]]></content>
    
    <summary type="html">
    
      代写Dijkstra算法，对地图上的任意两点，求最短路径。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
</feed>
