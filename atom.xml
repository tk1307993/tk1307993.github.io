<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-03-15T15:34:31.756Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python代写：COMSW3101-Introduction-To-Python</title>
    <link href="https://tk1307993.coding.me/COMSW3101-Introduction-To-Python.html"/>
    <id>https://tk1307993.coding.me/COMSW3101-Introduction-To-Python.html</id>
    <published>2019-03-15T15:31:26.000Z</published>
    <updated>2019-03-15T15:34:31.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem-1-Decrypting-Government-Data"><a href="#Problem-1-Decrypting-Government-Data" class="headerlink" title="Problem 1 - Decrypting Government Data"></a>Problem 1 - Decrypting Government Data</h3><p>Your job is to summarize this gov data about oil consumation</p><ul><li>The format of the file is rather bizzare - note that each line has data for two months, in two different years! (Plus I had to hand edit the file to make it parseable)</li><li>Fortunately, Python is great for untangling and manipulating data.</li><li>Write a generator that reads from the given url over the network, and produces a summary line for a year’s data on each ‘next’ call</li><li>remember that urllib.request returns ‘bytes arrays’, not strings</li><li>The generator should read the lines of the oil2.txt file in a lazy fashion - it should only read 13 lines for every two years of output. Note a loop can have any number of ‘yield’ calls in it.</li><li>Ignore the monthly data, just extract the yearly info</li><li>Drop the month column</li><li>In addition to the ‘oil’ generator function, my solution had a separate helper function, ‘def makeCSV- Line(year, data):’</li></ul><h3 id="Here-is-the-first-two-years-of-data-2014-and-2013"><a href="#Here-is-the-first-two-years-of-data-2014-and-2013" class="headerlink" title="Here is the first two years of data, 2014 and 2013"></a>Here is the first two years of data, 2014 and 2013</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Year,Quantity,QuantityChange,Unknown,Unknown2,Price,PriceChange</span><br><span class="line"><span class="number">2014</span>,<span class="number">2700903</span>,<span class="number">-112867</span>,<span class="number">246409332</span>,<span class="number">-26397845</span>,<span class="number">91.23</span>,<span class="number">-5.72</span></span><br><span class="line"><span class="number">2013</span>,<span class="number">2813770</span>,<span class="number">-283638</span>,<span class="number">272807177</span>,<span class="number">-40367786</span>,<span class="number">96.95</span>,<span class="number">-4.15</span></span><br><span class="line"><span class="number">2012</span>,<span class="number">3097408</span>,<span class="number">-224509</span>,<span class="number">313174963</span>,<span class="number">-18407090</span>,<span class="number">101.11</span>,<span class="number">1.29</span></span><br><span class="line"><span class="number">2011</span>,<span class="number">3321917</span>,<span class="number">-55160</span>,<span class="number">331582053</span>,<span class="number">79421544</span>,<span class="number">99.82</span>,<span class="number">25.15</span></span><br><span class="line"><span class="number">2010</span>,<span class="number">3377077</span>,<span class="number">62290</span>,<span class="number">252160509</span>,<span class="number">63448733</span>,<span class="number">74.67</span>,<span class="number">17.74</span></span><br><span class="line"><span class="number">2009</span>,<span class="number">3314787</span>,<span class="number">-275841</span>,<span class="number">188711776</span>,<span class="number">-153200712</span>,<span class="number">56.93</span>,<span class="number">-38.29</span></span><br><span class="line"><span class="number">2008</span>,<span class="number">3590628</span>,<span class="number">-99940</span>,<span class="number">341912488</span>,<span class="number">104700835</span>,<span class="number">95.22</span>,<span class="number">30.95</span></span><br><span class="line"><span class="number">2007</span>,<span class="number">3690568</span>,<span class="number">-43658</span>,<span class="number">237211653</span>,<span class="number">20584322</span>,<span class="number">64.28</span>,<span class="number">6.26</span></span><br><span class="line"><span class="number">2006</span>,<span class="number">3734226</span>,<span class="number">-20445</span>,<span class="number">216627331</span>,<span class="number">40871990</span>,<span class="number">58.01</span>,<span class="number">11.20</span></span><br><span class="line"><span class="number">2005</span>,<span class="number">3754671</span>,<span class="number">-66308</span>,<span class="number">175755341</span>,<span class="number">44012676</span>,<span class="number">46.81</span>,<span class="number">12.33</span></span><br><span class="line"><span class="number">2004</span>,<span class="number">3820979</span>,<span class="number">144974</span>,<span class="number">131742665</span>,<span class="number">32575492</span>,<span class="number">34.48</span>,<span class="number">7.50</span></span><br><span class="line"><span class="number">2003</span>,<span class="number">3676005</span>,<span class="number">257983</span>,<span class="number">99167173</span>,<span class="number">21883842</span>,<span class="number">26.98</span>,<span class="number">4.37</span></span><br><span class="line"><span class="number">2002</span>,<span class="number">3418022</span>,<span class="number">-53045</span>,<span class="number">77283331</span>,<span class="number">2990437</span>,<span class="number">22.61</span>,<span class="number">1.21</span></span><br><span class="line"><span class="number">2001</span>,<span class="number">3471067</span>,<span class="number">71827</span>,<span class="number">74292894</span>,<span class="number">-15583539</span>,<span class="number">21.40</span>,<span class="number">-5.04</span></span><br><span class="line"><span class="number">2000</span>,<span class="number">3399240</span>,<span class="number">171148</span>,<span class="number">89876433</span>,<span class="number">38986812</span>,<span class="number">26.44</span>,<span class="number">10.68</span></span><br><span class="line"><span class="number">1999</span>,<span class="number">3228092</span>,<span class="number">-14620</span>,<span class="number">50889621</span>,<span class="number">13637399</span>,<span class="number">15.76</span>,<span class="number">4.28</span></span><br><span class="line"><span class="number">1998</span>,<span class="number">3242712</span>,<span class="number">173281</span>,<span class="number">37252222</span>,<span class="number">-16973685</span>,<span class="number">11.49</span>,<span class="number">-6.18</span></span><br><span class="line"><span class="number">1997</span>,<span class="number">3069431</span>,<span class="number">175785</span>,<span class="number">54225907</span>,<span class="number">-704950</span>,<span class="number">17.67</span>,<span class="number">-1.32</span></span><br><span class="line"><span class="number">1996</span>,<span class="number">2893646</span>,<span class="number">126333</span>,<span class="number">54930857</span>,<span class="number">11181204</span>,<span class="number">18.98</span>,<span class="number">3.17</span></span><br></pre></td></tr></table></figure><p>now that we have something that looks like a CVS file, can do all kinds of things</p><p>Input:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'/tmp/oil.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">l</span> in oil(url):</span><br><span class="line">  <span class="keyword">f</span>.<span class="keyword">write</span>(<span class="keyword">l</span> + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">o</span> = oil(url)</span><br><span class="line"><span class="keyword">ls</span> = <span class="keyword">list</span>(<span class="keyword">o</span>)</span><br><span class="line">s = <span class="string">'\n'</span>.<span class="keyword">join</span>(<span class="keyword">ls</span>)</span><br><span class="line">import pandas <span class="keyword">as</span> pd</span><br><span class="line">import io</span><br><span class="line"># we will cover StringIO <span class="keyword">next</span> week - kind of <span class="keyword">an</span> <span class="string">'in-memory'</span> <span class="keyword">file</span></span><br><span class="line">df = pd.read_csv(io.StringIO(s))</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    Year Quantity QuantityChange    Unknown   Unknown2   Price PriceChange</span><br><span class="line"><span class="number">0</span>   <span class="number">2014</span>  <span class="number">2700903</span>        <span class="number">-112867</span>  <span class="number">246409332</span>  <span class="number">-26397845</span>   <span class="number">91.23</span>       <span class="number">-5.72</span></span><br><span class="line"><span class="number">1</span>   <span class="number">2013</span>  <span class="number">2813770</span>        <span class="number">-283638</span>  <span class="number">272807177</span>  <span class="number">-40367786</span>   <span class="number">96.95</span>       <span class="number">-4.15</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2012</span>  <span class="number">3097408</span>        <span class="number">-224509</span>  <span class="number">313174963</span>  <span class="number">-18407090</span>  <span class="number">101.11</span>        <span class="number">1.29</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2011</span>  <span class="number">3321917</span>         <span class="number">-55160</span>  <span class="number">331582053</span>   <span class="number">79421544</span>   <span class="number">99.82</span>       <span class="number">25.15</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2010</span>  <span class="number">3377077</span>          <span class="number">62290</span>  <span class="number">252160509</span>   <span class="number">63448733</span>   <span class="number">74.67</span>       <span class="number">17.74</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2009</span>  <span class="number">3314787</span>        <span class="number">-275841</span>  <span class="number">188711776</span> <span class="number">-153200712</span>   <span class="number">56.93</span>      <span class="number">-38.29</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2008</span>  <span class="number">3590628</span>         <span class="number">-99940</span>  <span class="number">341912488</span>  <span class="number">104700835</span>   <span class="number">95.22</span>       <span class="number">30.95</span></span><br><span class="line"><span class="number">7</span>   <span class="number">2007</span>  <span class="number">3690568</span>         <span class="number">-43658</span>  <span class="number">237211653</span>   <span class="number">20584322</span>   <span class="number">64.28</span>        <span class="number">6.26</span></span><br><span class="line"><span class="number">8</span>   <span class="number">2006</span>  <span class="number">3734226</span>         <span class="number">-20445</span>  <span class="number">216627331</span>   <span class="number">40871990</span>   <span class="number">58.01</span>       <span class="number">11.20</span></span><br><span class="line"><span class="number">9</span>   <span class="number">2005</span>  <span class="number">3754671</span>         <span class="number">-66308</span>  <span class="number">175755341</span>   <span class="number">44012676</span>   <span class="number">46.81</span>       <span class="number">12.33</span></span><br><span class="line"><span class="number">10</span>  <span class="number">2004</span>  <span class="number">3820979</span>         <span class="number">144974</span>  <span class="number">131742665</span>   <span class="number">32575492</span>   <span class="number">34.48</span>        <span class="number">7.50</span></span><br><span class="line"><span class="number">11</span>  <span class="number">2003</span>  <span class="number">3676005</span>         <span class="number">257983</span>   <span class="number">99167173</span>   <span class="number">21883842</span>   <span class="number">26.98</span>        <span class="number">4.37</span></span><br><span class="line"><span class="number">12</span>  <span class="number">2002</span>  <span class="number">3418022</span>         <span class="number">-53045</span>   <span class="number">77283331</span>    <span class="number">2990437</span>   <span class="number">22.61</span>        <span class="number">1.21</span></span><br><span class="line"><span class="number">13</span>  <span class="number">2001</span>  <span class="number">3471067</span>          <span class="number">71827</span>   <span class="number">74292894</span>  <span class="number">-15583539</span>   <span class="number">21.40</span>       <span class="number">-5.04</span></span><br><span class="line"><span class="number">14</span>  <span class="number">2000</span>  <span class="number">3399240</span>         <span class="number">171148</span>   <span class="number">89876433</span>   <span class="number">38986812</span>   <span class="number">26.44</span>       <span class="number">10.68</span></span><br><span class="line"><span class="number">15</span>  <span class="number">1999</span>  <span class="number">3228092</span>         <span class="number">-14620</span>   <span class="number">50889621</span>   <span class="number">13637399</span>   <span class="number">15.76</span>        <span class="number">4.28</span></span><br><span class="line"><span class="number">16</span>  <span class="number">1998</span>  <span class="number">3242712</span>         <span class="number">173281</span>   <span class="number">37252222</span>  <span class="number">-16973685</span>   <span class="number">11.49</span>       <span class="number">-6.18</span></span><br><span class="line"><span class="number">17</span>  <span class="number">1997</span>  <span class="number">3069431</span>         <span class="number">175785</span>   <span class="number">54225907</span>    <span class="number">-704950</span>   <span class="number">17.67</span>       <span class="number">-1.32</span></span><br><span class="line"><span class="number">18</span>  <span class="number">1996</span>  <span class="number">2893646</span>         <span class="number">126333</span>   <span class="number">54930857</span>   <span class="number">11181204</span>   <span class="number">18.98</span>        <span class="number">3.17</span></span><br><span class="line"><span class="number">19</span>  <span class="number">1995</span>  <span class="number">2767313</span>          <span class="number">63116</span>   <span class="number">43749653</span>    <span class="number">5270236</span>   <span class="number">15.81</span>        <span class="number">1.58</span></span><br><span class="line"><span class="number">20</span>  <span class="number">1994</span>  <span class="number">2704197</span>         <span class="number">160822</span>   <span class="number">38479417</span>      <span class="number">10041</span>   <span class="number">14.23</span>       <span class="number">-0.90</span></span><br><span class="line"><span class="number">21</span>  <span class="number">1993</span>  <span class="number">2543375</span>         <span class="number">248805</span>   <span class="number">38469376</span>     <span class="number">-83679</span>   <span class="number">15.13</span>       <span class="number">-1.68</span></span><br></pre></td></tr></table></figure><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h3><ul><li>suppose we want to convert between C(Celsius) and F(Fahrenheit), using the equation 9C = 5 (F-32)</li><li>could write functions ‘c2f’ and ‘f2c’</li><li>do all computation in floating point for this problem</li></ul><h3 id="Problem-3-Hamlet"><a href="#Problem-3-Hamlet" class="headerlink" title="Problem 3 - Hamlet"></a>Problem 3 - Hamlet</h3><p>Python is very popular in ‘digital humanities’</p><p>MIT has the complete works of Shakespeare in a simple html format</p><p>You will do a simple analysis of Hamlet by reading the html file, one line at a time(usual iteration scheme) and doing pattern matching</p><p>The goal is to return a list of the linecnt, total number of ‘speeches’(look at the file format), and a dict showing the number of ‘speeches’ each character gives</p><p>Your program should read directly from the url given, but you may want to download a copy to examine the structure of the file.<br>remember that usrlib.request returns ‘byte arrays’, not strings</p><p>here’s a short sample of the file</p><h3 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem 5"></a>Problem 5</h3><p>define the <strong>mul</strong> method for polydict<br>Input:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[pd1, pd2, pd3, pd1 * pd2, pd1 * pd3, pd2 * pd3]</span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[+ <span class="number">3</span> * X ** <span class="number">2</span> + <span class="number">2</span> * X + <span class="number">1</span>,</span><br><span class="line"> + <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * x,</span><br><span class="line"> <span class="number">3</span> * X ** <span class="number">2</span> + <span class="number">2</span> * X + <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X,</span><br><span class="line"> <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X ** <span class="number">-1</span>,</span><br><span class="line"> <span class="number">15</span> * X ** <span class="number">4</span> + <span class="number">40</span> * X ** <span class="number">3</span> + <span class="number">25</span> * X ** <span class="number">2</span> + <span class="number">10</span> * X,</span><br><span class="line"> <span class="number">15</span> * X ** <span class="number">4</span> + <span class="number">10</span> * X ** <span class="number">3</span> + <span class="number">5</span> * X ** <span class="number">2</span> + <span class="number">30</span> * X + <span class="number">20</span> * X ** <span class="number">-1</span>,</span><br><span class="line"> <span class="number">25</span> * X ** <span class="number">4</span> + <span class="number">50</span> * X ** <span class="number">3</span> + <span class="number">50</span> * X + <span class="number">100</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本次需要代写的Python作业，包含了5个算术问题需要解决。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop代写：CS698-Flight-Data-Analysis</title>
    <link href="https://tk1307993.coding.me/CS698-Flight-Data-Analysis.html"/>
    <id>https://tk1307993.coding.me/CS698-Flight-Data-Analysis.html</id>
    <published>2019-03-12T12:56:09.000Z</published>
    <updated>2019-03-12T12:59:13.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><ol><li>Form a project team of two students (including yourself).</li><li>Install Hadoop/Oozie on your AWS VMs.</li><li>Download the Airline On-time Performance data set (flight data set) from the period of October 1987 to April 2008 on the Statistical Computing website: <a href="http://stat-computing.org/dataexpo/2009/the-data.html" target="_blank" rel="noopener">http://stat-computing.org/dataexpo/2009/the-data.html</a></li><li>Design, implement, and run an Oozie workflow to find out<ul><li>a. the 3 airlines with the highest and lowest probability, respectively, for being on schedule;</li><li>b. the 3 airports with the longest and shortest average taxi time per flight (both in and out), respectively; and</li><li>c. the most common reason for flight cancellations.</li></ul></li></ol><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ol><li>Your workflow must contain at least three MapReduce jobs that run in fully distributed mode.</li><li>Run your workflow to analyze the entire data set (total 22 years from 1987 to 2008) at one time on two VMs first and then gradually increase the system scale to the maximum allowed number of VMs for at least 5 increment steps, and measure each corresponding workflow execution time.</li><li>Run your workflow to analyze the data in a progressive manner with an increment of 1 year, i.e. the first year (1987), the first 2 years (1987-1988), the first 3 years (1987-1989), …, and the total 22 years (1987-2008), on the maximum allowed number of VMs, and measure each corresponding workflow execution time.</li></ol><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ol><li>A commands.txt text file that lists all the commands you used to run your code and produce the required results in fully distributed mode</li><li>An output.txt text file that stores the final results from all the runs</li><li>The source code of your MapReduce programs (including the JAR files) and any other programs you might have developed and included in the workflow</li><li>The Oozie workflow XML file</li><li>A project report in PDF that includes:<br>a. A diagram that shows the structure of your Oozie workflow<br>b. A detailed description of the algorithm you designed to solve each of the problems<br>c. A performance measurement plot that compares the workflow execution time in response to an increasing number of VMs used for processing the entire data set (22 years) and an in-depth discussion on the observed performance comparison results<br>d. A performance measurement plot that compares the workflow execution time in response to an increasing data size (from 1 year to 22 years) and an in-depth discussion on the observed performance comparison results</li></ol>]]></content>
    
    <summary type="html">
    
      这次需要代写的是一个大数据的作业，需要在AWS上搭建Hadoop来进行计算。此外，数据集也非常大，也包含了脏数据需要处理。
    
    </summary>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/categories/Hadoop/"/>
    
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>FTP代写：CS159-Socket-Programming-FTP-Server</title>
    <link href="https://tk1307993.coding.me/CS159-Socket-Programming-FTP-Server.html"/>
    <id>https://tk1307993.coding.me/CS159-Socket-Programming-FTP-Server.html</id>
    <published>2019-03-09T09:31:12.000Z</published>
    <updated>2019-03-09T09:34:46.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Your task is to create a very simple FTP server program using sockets.</p><ol><li>The server needs to be able to interpret the protocol commands, including: LIST, RETR, STOR</li><li>The client should be a standard command line FTP client application (available on your OS). The application commands that should work from the client are:<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir (<span class="built_in">or</span> <span class="keyword">ls</span>)</span><br><span class="line"><span class="built_in">get</span> <span class="symbol">&lt;filename&gt;</span></span><br><span class="line"><span class="keyword">put</span> <span class="symbol">&lt;filename&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>Assume that the files to be transferred are text only (ASCII rather than binaries). There is no need to implement text X binary modes.</p><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>This exercise makes use of the FTP protocol directly from a command line application. You have probably used FTP before, but in a transparent way (perhaps via a browser).</p><p>FTP is an acronym used with different meanings, each with its set of commands:</p><p>FTP protocol commands (e.g., USER, PASV, PORT etc)</p><p>FTP application commands, associated with a FTP client (e.g., get, put, dir etc).</p><p>When using different Operating Systems one might find that the FTP application works in different ways, even though they may be using the same FTP protocol. The commands described below should work in most OS. However different FTP clients may have incomplete implementations or use nonstandard FTP application commands.</p><p>To start the exercise:</p><ol><li>1) Open a terminal</li><li>2) Issue the command:</li></ol><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>We have seen some examples using the application called telnet to connect to servers listening to certain ports (see some examples in Chapter 2). Does that work with FTP?</p><h3 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h3><p>Understanding the difference between FTP “protocol commands” and “application commands”:</p><p>We have looked at protocol commands, such as: RETR, USER, PASS, STOR etc.</p><p>Also, there are application commands with an FTP client: get, put, ls etc</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p>Your submission has to be a single source file (server) compatible with GCC (if using other compilers to develop the assignment, make sure the final source compiles on GCC). Submit to Stream.</p><p>This assignment is worth 10 marks.</p><p>You may lose marks for late assignments.</p>]]></content>
    
    <summary type="html">
    
      这个需要代写的作业要求基于Linux Socket编程，实现一个FTP Server。需要支持常见的上传(put)、下载(get)和列表(ls)等命令。
    
    </summary>
    
      <category term="FTP" scheme="https://tk1307993.coding.me/categories/FTP/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Database代写：CS108-Web-Based-Application</title>
    <link href="https://tk1307993.coding.me/CS108-Web-Based-Application.html"/>
    <id>https://tk1307993.coding.me/CS108-Web-Based-Application.html</id>
    <published>2019-03-09T01:51:08.000Z</published>
    <updated>2019-03-09T09:35:14.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>You will develop a web-based application with a database back-end for storage and retrieval of data. Choose your own adventure: select a subject matter related to your major or personal interests.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Some recent CS108 projects have included:</p><ul><li>Interactive dictionary for English/Junta language translation</li><li>Inventory system for chemistry lab / reactive agents</li><li>Social network for a gardening club</li><li>High school basketball win/loss records &amp; standings</li><li>Fisheries information tracking endangered species</li><li>Geographic information system for archeology dig</li><li>Compact disc inventory and sales</li><li>Calorie counting database/user interface</li><li>Local artists list their works for sale (with pictures)</li><li>Car rental and return</li><li>Special of the day listing for restaurant</li></ul><h3 id="Detailed-Requirements"><a href="#Detailed-Requirements" class="headerlink" title="Detailed Requirements"></a>Detailed Requirements</h3><p>You should begin by picking a concrete but simple interaction and modeling the data and functionality to implement it. For example, in a car rental application you might show a list of cars and allow a customer to complete a rental for one car. Start small; you can always add more interactions and details after you get the first one working.</p><p>Your application will model some kind of useful function, with a web-based interface (HTML) and data storage in a relational database (MySQL). A single interaction might be sufficient for this project, but a single web page certainly is not. You should have multiple web pages with logical transitions between the pages using buttons or links.</p><p>Projects must demonstrate reading from, inserting into, and updating database tables from your web interface. Points will be awarded for the general complexity of the project, with more complex projects scoring higher than very simple projects that mimic in-class assignments. After your work is functionally complete, you should enhance the look and feel of the application as the aesthetics (colors, images and fonts) will count for a small portion of your grade.</p><h3 id="Topic-Proposal"><a href="#Topic-Proposal" class="headerlink" title="Topic Proposal"></a>Topic Proposal</h3><p>Your proposal should be brief (about 3 sentences) and describe the general subject matter (e.g., car rental), the specific interaction you will model (e.g. car selection and checkout) and the data you will require for this interaction (e.g., table of cars, table of customers, table of rentals which matches cars with customers).</p><h3 id="Data-Requirements"><a href="#Data-Requirements" class="headerlink" title="Data Requirements"></a>Data Requirements</h3><p>What kind of data will your application need to interact with? Describe the data in terms of records and fields. What attributes does each record need to have? How will you uniquely identify a record?</p><p>Make up some sample data (about 5 records) so that you can use to begin thinking about and testing the program’s interactions. You might want to use a spreadsheet program like Excel to create these records, which will also enable importing them into the database later. We will demonstrate how to create tables and records in MySQL at the scheduled lab session this week.</p><h3 id="Planning-Your-Time"><a href="#Planning-Your-Time" class="headerlink" title="Planning Your Time"></a>Planning Your Time</h3><p>You have 4 weeks to complete this project. Here are some guidelines on what you should be working on at what time:</p><h3 id="roject-Demonstration-Video"><a href="#roject-Demonstration-Video" class="headerlink" title="roject Demonstration Video"></a>roject Demonstration Video</h3><p>You will present your project by making a short (2-3 minute) video screen capture, with you narrating as you demonstrate the application. Think about this as a demonstration for a potential customer or employer. This will speed the grading, and provide you with a lasting artifact of your work, which you can demonstrate to potential employers. Your demonstration should not show any code or database records, but must demonstrate every major feature of your application.</p><p>I recommend that you write a brief outline of what you will show in which order. Then, use a screen capture tool (I suggest QuickTime player for Mac or Tiny Take for Windows or any similar program). Record your video, and post it to YouTube (a private/unlisted URL is fine).</p>]]></content>
    
    <summary type="html">
    
      这次代写的这个Web作业，题目很发散，按要求实现题目之一就好。不过这是一个需要用Python和MySQL实现的Web作业，也算比较冷门的了。
    
    </summary>
    
      <category term="Database" scheme="https://tk1307993.coding.me/categories/Database/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
      <category term="MySQL" scheme="https://tk1307993.coding.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>PHP代写：CS952-Database-And-Web-Systems-Development</title>
    <link href="https://tk1307993.coding.me/CS952-Database-And-Web-Systems-Development.html"/>
    <id>https://tk1307993.coding.me/CS952-Database-And-Web-Systems-Development.html</id>
    <published>2019-03-05T02:25:34.000Z</published>
    <updated>2019-03-05T02:28:55.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Lab-Exercises-HTML-PHP-CSS-and-JavaScript"><a href="#Lab-Exercises-HTML-PHP-CSS-and-JavaScript" class="headerlink" title="Lab Exercises: HTML, PHP, CSS and JavaScript"></a>Lab Exercises: HTML, PHP, CSS and JavaScript</h3><p>The aim of these exercises is for you to build some simple web pages and to make sure you know how to use our systems for web development. The following tasks should be done in a plain text editor and saved as .html, .php, .css, or .js files where appropriate. You should then copy these files to DEVWEB. If you use Linux or Unix, go to the DEVWEB directory then to the 2015 directory (if you do not have a 2015 directory you will have to create one). If you put a file called ex.html in that directory you can view it in your web browser from any internet connected computer.</p><p>If you use Windows on any of the Departmental machines you will find the DEVWEB folder mapped to your Q: drive.</p><p>These exercises are worth up to 10% of the overall mark for CS 952 Database and Web Systems Development.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Please note that some of the later questions ask you to build on your solutions to earlier questions. You should therefore make sure that you save your solution to each question in separate files and that you do not overwrite your earlier solutions. For example, the solution file for question one could be named q1.html, the solution files for question 2 could be named q2.html (this will be a modified version of q1.html) and q2.php, the solution files for question 3 could be named q3.html (this will be a modified version of q1.html or q2.html) and q3.php (this will be a modified version of q2.php). The files that you create for each question should be placed in a directory or folder which you should zip and upload via Myplace.</p><p>This is an individual exercise: any copying of code (except from the lecture notes or the W3Schools website) may result in disciplinary measures. No late submissions will be accepted without medical certification, this should be provided at the earliest opportunity.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://www.w3schools.com/" target="_blank" rel="noopener">http://www.w3schools.com/</a> has online tutorials for HTML, CSS, PHP and JavaScript. The tutorial on PHP includes sections on form handling and validation as well as MySQL. The tutorial on JavaScript also includes sections on form validation.</p><h3 id="Q1-HTML-Simple-form-example"><a href="#Q1-HTML-Simple-form-example" class="headerlink" title="Q1 HTML Simple form example"></a>Q1 HTML Simple form example</h3><p>Using the following script showallparameters.php as your server action (and using the POST method), code the following form using HTML forms and check the correct data is sent to the server:</p><p>The job categories are “Marketing”, “Human Resources” and “Technical Support”. Don’t worry about the right alignment of the textual labels, but after you have a simple form working you should embed it in a table so that the form entry elements are nicely aligned. Also, if you wish, add some JavaScript error correction to check that something is entered in Name, Telephone, E-mail, Gender and Days Available (this is tricky).</p><p>You may wish to use <a href="http://validator.w3.org/" target="_blank" rel="noopener">http://validator.w3.org/</a> with advanced options to make sure that your file conforms with W3 open standards.</p><h3 id="Q2-PHP"><a href="#Q2-PHP" class="headerlink" title="Q2: PHP"></a>Q2: PHP</h3><p>Write a decent handler for the form in Q1 which shows the data nicely formatted back to the user.<br>Add code to this PHP script to send a fixed email to you whenever the form is submitted. See <a href="http://uk3.php.net/function.mail" target="_blank" rel="noopener">http://uk3.php.net/function.mail</a> for mail manual and Google for examples.</p><p>Change this code so that the email contains the same information echoed back to the user.</p><h3 id="Q3-MySQL"><a href="#Q3-MySQL" class="headerlink" title="Q3: MySQL"></a>Q3: MySQL</h3><p>Design a single table database to store the values from the form in Q1.</p><p>Create this database in phpMyAdmin on devweb2015 then update your PHP from Q2 to save into the database rather than emailing you.<br>Test your submissions using your form and phpMyAdmin to view the submissions.</p><h3 id="Q4-PHP-Error-Checking"><a href="#Q4-PHP-Error-Checking" class="headerlink" title="Q4: PHP Error Checking"></a>Q4: PHP Error Checking</h3><p>Add code to the PHP in Q1..3 to check:</p><ul><li>The name is completed</li><li>The telephone number is complete</li><li>The e-mail is complete (you could try using regular expressions)</li><li>One of Male or Female is selected</li><li>At least one day is selected [tricky]</li><li>Add PHP so that if the name field is all capitals, it is changed to Title Case before storing.</li></ul><h3 id="Q5-CSS"><a href="#Q5-CSS" class="headerlink" title="Q5: CSS"></a>Q5: CSS</h3><p>Write HTML for the left-hand image on the last page.</p><p>Add CSS styling to make the page look like the right-hand image with minimal changes to the HTML (you only need add class and id statements) (NB: the band at top bottom is dark blue, rest of page has light blue background)</p><p>Create a CSS box in the middle of the page with maximum width 700 pixels and a nice water like image outside this box.</p><p>Add a horizontal navigation menu at the top of the page with sections for “accommodation”, “local information”, and “weather”.</p><h3 id="Q6-Extensions"><a href="#Q6-Extensions" class="headerlink" title="Q6: Extensions"></a>Q6: Extensions</h3><p>Recode the checks in Q4 in JavaScript. [Why would you do this?]</p><ul><li>Add two date fields to your form from Q1 for “Application Date” and “Job Start Date” then</li><li>Add JavaScript to check the fields are date formatted</li><li>Add JavaScript to check that the job start date is after the application date</li><li>Add JavaScript to copy the value of the application date to the start date if it changes, and the user hasn’t yet entered a start date</li></ul><p>If you wish you may find a public domain Calendar function in JavaScript and include this in your code to show a little calendar for the start date.</p><p>Add an administrator interface for your database in Q3 that allows the user to view all submissions and delete rows – use phpMyAdmin to create the SQL for deletion and then copy that into PHP.</p><p>Finally add a new script (PHP page) that shows a specific row of the table nicely formatted for printing as a job application and link this into the table view (i.e. have a “print me” button link).</p>]]></content>
    
    <summary type="html">
    
      这是一个Lab作业代写，需要做5个Web页面。内容比较基础，不过涵盖了HTML, PHP, CSS, JavaScript以及MySQL的使用。
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：KIT101-Sentence-Cipher</title>
    <link href="https://tk1307993.coding.me/KIT101-Sentence-Cipher.html"/>
    <id>https://tk1307993.coding.me/KIT101-Sentence-Cipher.html</id>
    <published>2019-03-01T15:40:14.000Z</published>
    <updated>2019-03-01T15:43:39.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>For as long as people have been able to write they have tried to find ways to send messages secretly by hiding the message in some way. One way of encrypting a message is to hide it inside some other text. It works as follows: you and the intended message recipient both agree on a (large) piece of source text, such as a passage from a book, which you don’t share with anyone else. You then find a character position for each letter in your (much shorter) message within the larger piece of text, and send the list of positions. Here’s an example:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Source <span class="keyword">text</span> (secret): The quick brown fox jumps over <span class="keyword">the</span> lazy dog</span><br><span class="line">Message <span class="built_in">to</span> <span class="built_in">encrypt</span>: bread</span><br><span class="line">Encrypted message: <span class="number">10</span> <span class="number">11</span> <span class="number">2</span> <span class="number">36</span> <span class="number">40</span></span><br></pre></td></tr></table></figure></p><p>Of course, we could have taken alternative positions for ‘e’ (also found at positions 28 and 33) and ‘r’ (also at 29), but in this cipher we’ll always use the first occurrence of a letter.<br>If you look closely at the secret text above you’ll notice that it contains every letter in the English alphabet, which means we can encrypt any message we want (note we’ll be restricting ourselves to messages that do not contain spaces in this assignment). While this is likely to be true of any sufficiently long piece of text, what should we do if the message contains a letter not found in the secret text? In the absence of any valid substitute, let’s use 1 to indicate that it wasn’t found. Here’s an example of that:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Source <span class="built_in">text</span> (secret): The quick brown fox jumps <span class="keyword">over</span></span><br><span class="line">Message <span class="keyword">to</span> encrypt: beak</span><br><span class="line">Encrypted message: <span class="number">10</span> <span class="number">2</span> <span class="number">1</span> <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>ecovering the original message is simply a matter of looking up the character at each indicated position in the shared secret text, replacing any lost symbols with some agreed upon alternative, like ‘_’. A worked example:<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Source <span class="keyword">text</span> (secret): Shall I <span class="keyword">compare</span> thee <span class="keyword">to</span> a summer<span class="comment">'s day? Thou art more lovely and more temperate.</span></span><br><span class="line">Received message: <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">0</span> <span class="number">11</span> <span class="number">14</span> <span class="number">2</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line">Decrypted message: sha_espeare</span><br></pre></td></tr></table></figure></p><h3 id="Your-Assignment"><a href="#Your-Assignment" class="headerlink" title="Your Assignment"></a>Your Assignment</h3><p>Your assignment will consist of a single class, with all code in the main() method. Call your class SentenceCipher (that is, the source code will be in a file called SentenceCipher.java). If you choose to use an IDE other than DrJava, ensure that your program is not defined in a package (there should be no package statement at the top of the file).</p><p>When your assignment is complete, a user running your program will be prompted to enter the shared ‘source’ text, then asked if they want to encrypt or decrypt a message. The source text may contain any mixture of characters, including punctuation and spaces. Before continuing, the source text must be converted to all lower case.</p><p>After receiving the source text from the user, they will be asked to choose one of two options:</p><ol><li>Encrypt a message</li><li>Decrypt a message</li></ol><p>Note that both options finish by displaying the amount of information loss.</p><p>The three development and testing stages defined below will step you through creating a functioning cipher tool. You do not need to follow these suggested development stages, but if you do then a testing tool will be available that can run your partiallycompleted program with lots of different inputs and indicate when it works as expected and when it does not.</p><h3 id="General-guidance"><a href="#General-guidance" class="headerlink" title="General guidance"></a>General guidance</h3><p>Use the Scanner class (import it from the java.util package) to read the user’s input.</p><p>Your program will need to declare appropriate variables for holding the source text, user’s processing choice, and (for encryption) the word to be encrypted. Several other temporary variables will be needed.</p><p>Use constants to hold sensible default values and any special values that will be used repeatedly.</p><h3 id="Example-Sessions"><a href="#Example-Sessions" class="headerlink" title="Example Sessions"></a>Example Sessions</h3><p>In these example sessions the user’s input is highlighted. All other text is produced by the program.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Sentence Cipher</span><br><span class="line">Enter source text: The quick brown fox jumps over the lazy dog</span><br><span class="line"><span class="keyword">Select</span> a cipher <span class="keyword">option</span>:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">Encrypt</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">Decrypt</span></span><br><span class="line">Choice: <span class="number">1</span></span><br><span class="line">Enter word <span class="keyword">to</span> <span class="keyword">encrypt</span>: bread</span><br><span class="line"><span class="keyword">Result</span>: <span class="number">10</span> <span class="number">11</span> <span class="number">2</span> <span class="number">36</span> <span class="number">40</span> ‐<span class="number">2</span></span><br><span class="line">Information loss (%): <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">Sentence Cipher</span><br><span class="line">Enter <span class="keyword">source</span> <span class="built_in">text</span>: The <span class="keyword">quick</span> brown fox jumps</span><br><span class="line"><span class="keyword">Select</span> a cipher <span class="keyword">option</span>:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">Encrypt</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">Decrypt</span></span><br><span class="line">Choice: <span class="number">1</span></span><br><span class="line">Enter word <span class="keyword">to</span> <span class="keyword">encrypt</span>: tea</span><br><span class="line"><span class="keyword">Result</span>: <span class="number">0</span> <span class="number">2</span> ‐<span class="number">1</span> ‐<span class="number">2</span></span><br><span class="line">Information loss (%): <span class="number">33.33333333333333</span></span><br><span class="line"></span><br><span class="line">Sentence Cipher</span><br><span class="line">Enter <span class="keyword">source</span> <span class="built_in">text</span>: The <span class="keyword">quick</span> brown fox jumps</span><br><span class="line"><span class="keyword">Select</span> a cipher <span class="keyword">option</span>:</span><br><span class="line"><span class="number">1.</span> <span class="keyword">Encrypt</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">Decrypt</span></span><br><span class="line">Choice: <span class="number">2</span></span><br><span class="line">Enter positions (‐<span class="number">2</span> <span class="keyword">to</span> <span class="keyword">end</span>): <span class="number">0</span> <span class="number">2</span> ‐<span class="number">1</span> ‐<span class="number">2</span></span><br><span class="line"><span class="keyword">Result</span>: te_</span><br><span class="line">Information loss (%): <span class="number">33.33333333333333</span></span><br></pre></td></tr></table></figure></p><p>which is identical to if the user pressed Enter between each position (no change to your program will be necessary)</p><h3 id="Development-Stages"><a href="#Development-Stages" class="headerlink" title="Development Stages"></a>Development Stages</h3><p>The three assignment stages take you through developing: a program that can encrypt or decrypt a single character; a program that can encrypt and decrypt an entire word; and finally a program that can process an entire word and report on characters that could not be encrypted or decrypted and invalid positions given during decryption. Only the final stage directly contributes to your mark for this assignment.</p><p>Over the coming weeks you are encouraged to complete and test each of the following stages in turn. You are of course free to complete each stage more quickly or even to jump straight to the last one (if you believe you have a perfect solution).</p><h3 id="Evaluation-and-testing-prior-to-submission"><a href="#Evaluation-and-testing-prior-to-submission" class="headerlink" title="Evaluation and testing prior to submission"></a>Evaluation and testing prior to submission</h3><p>Use the supplied testing tool to run automated tests on your program. The later tests also look for the number of invalid characters and information loss and will indicate if either is not found (when expected) or appears incorrect.</p>]]></content>
    
    <summary type="html">
    
      这次作业非常基础，属于刚入门的Java编程。实现一个对Sentence的加解密算法，算法类似哈希，存在不可逆/无解的情况。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMS227-StringList</title>
    <link href="https://tk1307993.coding.me/COMS227-StringList.html"/>
    <id>https://tk1307993.coding.me/COMS227-StringList.html</id>
    <published>2019-02-26T13:01:10.000Z</published>
    <updated>2019-02-26T13:03:49.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>This is a short set of problems using interfaces. You will implement a class called StringList that uses interfaces for performing various kinds of processing on streams of text, as well as some sample classes that implement those interfaces. In all, you’ll implement six classes:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringList.java</span><br><span class="line">NonCommentLineSelector.java</span><br><span class="line">CommentRemover.java</span><br><span class="line">LetterCollecter.java</span><br><span class="line">LineNumberer.java</span><br><span class="line">LocCounter.java</span><br></pre></td></tr></table></figure></p><p>Note that the file StringListTest.java, found in the default package, will not compile until you have created stubs for the six required classes.</p><p>None of the code is very complex; the purpose is just to get you thinking about interfaces a bit.</p><p>A StringList (not surprisingly) represents a list of strings. (Most likely, in fact, you’ll use an instance variable of type ArrayListto store the strings themselves.) The interesting part is in the operations map, filter, and reduce. These are based on the four interfaces defined in the package api: Combiner, IntCombiner, Selector, and Transformation. They are all very simple and have only one method each. You can take a look at the javadoc or sample code for more details.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public StringList map(<span class="name">Transformation</span> <span class="literal">t</span>)</span><br></pre></td></tr></table></figure></p><p>Returns a new StringList obtained by invoking the given Transformation’s apply method to each string in this StringList. The apply method just takes a string and returns a (possibly different) string.<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringList filter(<span class="keyword">Selector</span> <span class="keyword">selector</span>)</span><br></pre></td></tr></table></figure></p><p>Returns a new StringList containing only the elements of this StringList for which the Selector’s select method returns true. The select method just takes a string and returns true or false.<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> reduce(Combiner combiner, <span class="keyword">String</span> initialValue)</span><br></pre></td></tr></table></figure></p><p>Returns a string resulting from a reduction operation using the given Combiner and the given initial value. A Combiner has one method, combine, that takes two strings and returns a string. The idea of a “reduction” is to initialize an accumulator variable with the given initial value, and then to iterate over the list, replacing the accumulator value with the result of combining it with the next item in the list.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduce</span><span class="params">(IntCombiner combiner, <span class="keyword">int</span> initialValue)</span></span></span><br></pre></td></tr></table></figure></p><p>Returns an integer resulting from a reduction operation using the given IntCombiner and the given initial value. Similar to the reduce operation above, but the accumulated value is an int.</p><p>The meaning of the reduce operation may not be obvious. The next section of this document includes a detailed explanation and examples. You should also look at the example StringListTest.java. found in the default package of the sample code.<br>In addition to the StringList class, you’ll implement some examples of classes that implement the interfaces in the api package so you can try things out. These are:<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonCommentLineSelector</span> <span class="keyword">implements</span> <span class="title">Selector</span></span></span><br></pre></td></tr></table></figure></p><p>The select method returns true if the given string does not have “//“ as its first nonwhitespace characters.<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentRemover</span> <span class="keyword">implements</span> <span class="title">Transformation</span></span></span><br></pre></td></tr></table></figure></p><p>The apply method returns a new string in which any text following “//“ is removed.<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocCounter</span> <span class="keyword">implements</span> <span class="title">IntCombiner</span></span></span><br></pre></td></tr></table></figure></p><p>Given an integer n and a string, the combine method returns n if the string is a comment line, a blank line, or a line whose only text, other than an end-of-line comment, is a single curly brace; otherwise the method returns n + 1. (Using a LocCounter in the reduce method has the general effect of counting “lines of code” that are actual program statements.)<br><code>`public class LetterCollector implements Combiner</code><br>Given two strings first and second, appends onto first all characters in second that don’t already occur in first. (Using a LetterCollector in the reduce method returns a string in which each character occurring in the strings appears exactly once.) Not case sensitive.</p>]]></content>
    
    <summary type="html">
    
      本次作业是要实现一个StringList，具体是要求练习掌握Interface的编程方法。程序的主干代码已经给出，按照文档补充缺失的部分即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>OS代写：COMP3080-Memory-Allocation</title>
    <link href="https://tk1307993.coding.me/COMP3080-Memory-Allocation.html"/>
    <id>https://tk1307993.coding.me/COMP3080-Memory-Allocation.html</id>
    <published>2019-02-23T05:43:35.000Z</published>
    <updated>2019-02-23T05:46:00.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The program you will write will read a file which contains memory allocation requests and memory free operations. The allocation and free operations will be made against an initially empty fixed sized free memory pool. The program must support three allocation policies:</p><ul><li>First fit linked list</li><li>Best fit linked list</li><li>Buddy system power of 2 block allocation (using a minimum allocation of 32 bytes)</li></ul><h4 id="Your-program-must"><a href="#Your-program-must" class="headerlink" title="Your program must:"></a>Your program must:</h4><ol><li>Accept three command line arguments, such that argv[1] is the policy to use, argv[2] is the total memory free pool size and argv[3] is the name of the file containing the allocation and free requests. The memory size of the total free pool for the main test cases will be 1 MByte, and 512KB. You may use other sizes in any additional experiments you attempt, but make sure you describe your configuration and results in your write-up.</li><li>Read each line of the input file in argv[3] and carry out one of the following actions:</li><li>Make a memory allocation if enough memory is available to satisfy an allocation request.</li><li>Return memory to a linked list and carry out any coalescing (buddying up) required.</li><li>Refuse the allocation only if there is not enough memory to satisfy it in any available free partition. Refused requests are remembered, so that you know to take no action when you see the corresponding free operation in the input stream. (For each alloc there is a free.)</li><li>Generate one line of output for each line of input, providing information about which request this is, how the request was handled, what the total amount of free space after the request is, and what the size of the largest free partition after the request is. Sample input and output files are shown below.</li><li>So you should submit 6 files, each containing your output for the 1MB and 512KB cases for all three algorithms, and a final summary in your write-up that provides the results of each test in a format similar to:<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">First</span> <span class="keyword">Fit</span> <span class="number">1</span>MB: <span class="keyword">Total</span> Allocations <span class="number">490</span> of <span class="number">500</span></span><br><span class="line"><span class="keyword">First</span> <span class="keyword">Fit</span> <span class="number">512</span>KB: <span class="keyword">Total</span> Allocations <span class="number">374</span> of <span class="number">500</span></span><br><span class="line">Best <span class="keyword">Fit</span> <span class="number">1</span>MB: <span class="keyword">Total</span> Allocations <span class="number">492</span> of <span class="number">500</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="INPUT-FORMAT"><a href="#INPUT-FORMAT" class="headerlink" title="INPUT FORMAT:"></a>INPUT FORMAT:</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SERIAL-NUM   REQUEST   SIZE   SERIAL-MATCH</span><br><span class="line">    <span class="number">1</span>         alloc    <span class="number">20000</span></span><br><span class="line">    <span class="number">2</span>         alloc   <span class="number">100000</span></span><br><span class="line">    <span class="number">3</span>         alloc     <span class="number">5050</span></span><br><span class="line">    <span class="number">4</span>         free                  <span class="number">2</span></span><br><span class="line">    <span class="number">5</span>         alloc    <span class="number">70500</span></span><br><span class="line">    <span class="number">6</span>         free                  <span class="number">1</span></span><br><span class="line">    <span class="number">7</span>         alloc   <span class="number">400000</span></span><br></pre></td></tr></table></figure><h3 id="OUTPUT-FORMAT"><a href="#OUTPUT-FORMAT" class="headerlink" title="OUTPUT FORMAT:"></a>OUTPUT FORMAT:</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MANAGEMENT POLICY = First Fit       POOL SIZE = <span class="number">512</span> KB</span><br><span class="line">SERIAL-NUM   REQUEST   SIZE   ALLOC-ADDR   TOTAL-FREE   LARGEST-PART</span><br><span class="line">    <span class="number">1</span>         alloc    <span class="number">20000</span>           <span class="number">0</span>     <span class="number">504288</span>        <span class="number">504288</span></span><br><span class="line">    <span class="number">2</span>         alloc   <span class="number">100000</span>       <span class="number">20000</span>     <span class="number">404288</span>        <span class="number">404288</span></span><br><span class="line">    <span class="number">3</span>         alloc     <span class="number">5050</span>      <span class="number">120000</span>     <span class="number">399238</span>        <span class="number">399238</span></span><br><span class="line">    <span class="number">4</span>         free    <span class="number">100000</span>                 <span class="number">499238</span>        <span class="number">399238</span></span><br><span class="line">    <span class="number">5</span>         alloc    <span class="number">70500</span>       <span class="number">20000</span>     <span class="number">428738</span>        <span class="number">399238</span></span><br><span class="line">    <span class="number">6</span>         free     <span class="number">20000</span>           <span class="number">0</span>     <span class="number">448738</span>        <span class="number">399238</span></span><br><span class="line">    <span class="number">7</span>         alloc   <span class="number">400000</span>          <span class="number">-1</span>     <span class="number">448738</span>        <span class="number">399238</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本次作业要求实现内存分配(Memory Allocation)的三种算法：First fit, Best fit和Buddy memory allocation.
    
    </summary>
    
      <category term="OS" scheme="https://tk1307993.coding.me/categories/OS/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS204-B-tree</title>
    <link href="https://tk1307993.coding.me/CS204-B-tree.html"/>
    <id>https://tk1307993.coding.me/CS204-B-tree.html</id>
    <published>2019-02-20T13:46:00.000Z</published>
    <updated>2019-02-20T13:48:20.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Files-to-hand-in-are"><a href="#Files-to-hand-in-are" class="headerlink" title="Files to hand in are"></a>Files to hand in are</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BTree.cpp</span><br><span class="line">InternalNode.cpp</span><br><span class="line">InernalNode.h</span><br><span class="line">LeafNode.cpp</span><br><span class="line">LeafNode.h</span><br><span class="line">authors.csv</span><br></pre></td></tr></table></figure><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BTreeDriver.cpp</span><br><span class="line">BTreeDebugDriver.cpp</span><br><span class="line">BTree.cpp</span><br><span class="line">BTree.h</span><br><span class="line">BTreeNode.cpp</span><br><span class="line">BTreeNode.h</span><br><span class="line">InternalNode.cpp</span><br><span class="line">InernalNode.h</span><br><span class="line">LeafNode.cpp</span><br><span class="line">LeafNode.h</span><br><span class="line">Makefile (uses BTreeDebugDriver<span class="selector-class">.cpp</span> to produce BTree)</span><br><span class="line">Makefile2 (uses BTreeDriver<span class="selector-class">.cpp</span> to produce BTree2)</span><br><span class="line">QueueAr.cpp</span><br><span class="line">QueueAr.h</span><br><span class="line">vector.h</span><br><span class="line">vector.cpp</span><br><span class="line">dsexceptions.h</span><br></pre></td></tr></table></figure><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Your program will read a file that contains a series of integers that it will insert into a BTree, and then print to the screen a breadth first traversal of the BTree. Your task will be to provide the implementation code for the BTree, InternalNode, and LeafNode classes. Since the insert methods for the nodes will be quite long, you should add new methods so that no method is more than 30 lines long. We will not grade on style, but the TAs and I will be of little help with poor quality code. You may only alter those files that will be handed in. The program will take three command line parameters: 1) filename; 2) M, the number of children that internal nodes have; and 3) L, the number of integers each leaf node holds. The input file will not include more than 1000 integers. Since only integers will be stored in the BTree class, I did not implement it as a template. When a node splits, the new node created will always contain at least as many entries as the remaining old node, and will contain the larger values. The output must match that shown in the sample.</p><p>There is one change in the data structure from the book’s; the internal nodes should keep track of the minimum value for every child. You will find this easier than not having the minimum for the first child.</p><p>How did I write this code so fast? I used procedural abstraction. I thought about the tasks, their subtasks, and the subtasks of those subtasks. (You should write them down.) If I could state a subtask, then I planned on writing a separate function to do just that subtask. I found that the tasks of the InternalNode class matched that of the LeafNode class, so I postponed as much work on the InternalNode class as long as possible so that I could learn from my LeafNode mistakes. I worked top down with stubs for the subtasks, and got that iteration to compile without warnings! This avoids making the same mistake repeatedly—the compiler is a very good teacher. When I could do even minimal testing, I did it. What I learned from debugging kept me from duplicating those mistakes in later code, and reminded me of issues that I had forgot about. Sometimes when I addressed a new issue in a method I discovered that I had to add a lot of code. If there is a whole lot of new code, the issue deserved its own method with an appropriate name. It is a simple matter of cutting and pasting, and keeps each method short, and understandable. By the time I was done my LeafNode class had nine methods, and no method has more than 30 lines. Once the LeafNode class worked perfectly, I copied the LeafNode class methods as InternalNode class methods, and did a search and replace from values to keys! Though there are child sibling and parent issues for the InternalNode class, the basic LeafNode code provided a great starting point. In the end my InernalNode class had 13 methods. In comparison to the first time I wrote this with long insert functions a few years ago, the debugging was much faster this time because of the small methods</p>]]></content>
    
    <summary type="html">
    
      次需要代写的作业是用C++实现一个B-tree，给了基本的框架代码，以及给定的输入和输出样式。虽然不难写，但是这种作业稍微有一个Bug，就会导致排查相当麻烦。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>PHP代写：CS306-Hotel-Reservation-System</title>
    <link href="https://tk1307993.coding.me/CS306-Hotel-Reservation-System.html"/>
    <id>https://tk1307993.coding.me/CS306-Hotel-Reservation-System.html</id>
    <published>2019-02-16T10:18:37.000Z</published>
    <updated>2019-02-16T01:16:11.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Relational database</p><p>User accounts (two roles)</p><p>Variety of user tasks</p><h3 id="Project-idea-Hotel-Research-and-Booking"><a href="#Project-idea-Hotel-Research-and-Booking" class="headerlink" title="Project idea: Hotel Research and Booking"></a>Project idea: Hotel Research and Booking</h3><p>We are going to set up a website about a hotel reservation. There are two roles accounts, hotel holder and customers’ account. The hotel holder account would be unique that allowed the hotel manager to control the status of room and manage the booking information. And the purpose of users’ accounts is going to remember the booking history, customers’ information, manage the current reservation, and get VIP points services.</p><h3 id="Two-roles-of-Project"><a href="#Two-roles-of-Project" class="headerlink" title="Two roles of Project"></a>Two roles of Project</h3><p>Customers – the users who want to book hotel on website</p><p>Hotel Holder – hotel account to check the reservations for a specific hotel</p><h3 id="Customer-User-Tasks"><a href="#Customer-User-Tasks" class="headerlink" title="Customer User Tasks"></a>Customer User Tasks</h3><ol><li>User login &amp; register</li><li>Hotel room reservation – search by criteria</li><li>User account<ol><li>1) Booking History</li><li>2) Current Booking —- Revise, Cancel, Change check-in date, etc</li><li>3) View History</li><li>4) Reset Password</li><li>5) Account information (E-mail, name, phone, etc)</li></ol></li><li>Discount information &amp; VIP System</li></ol><h3 id="Hotel-User-Tasks"><a href="#Hotel-User-Tasks" class="headerlink" title="Hotel User Tasks"></a>Hotel User Tasks</h3><p>Management Reservations</p><ol><li>After contacting, changing, canceling, and upgrading book information</li><li>Able to check customer information (phone, name, e-mail, etc)</li><li>Control the status of each hotel room</li><li>Online Chat (Optional)</li></ol><h3 id="Database"><a href="#Database" class="headerlink" title="Database:"></a>Database:</h3><ol><li>User information database (name, phone, e-mail, password, points etc)</li><li>Hotel information database (price, room type, etc)</li><li>Booking information table (user id, hotel id, reservation id, check-in data, check-out date, addition information etc)</li></ol><h3 id="Evaluation-Criteria"><a href="#Evaluation-Criteria" class="headerlink" title="Evaluation Criteria"></a>Evaluation Criteria</h3><p>This is what I’ll be looking for in your final product.</p><ul><li>Functionality: does the app allow users to perform core tasks?</li><li>Usability: is performing those tasks a smooth and easy experience?</li><li>Aesthetics: do the pages have a reasonable appearance?</li><li>MVC design: does the code follow the Model-View-Controller pattern?</li><li>Table design: are the database tables reasonably organized?</li><li>Security: does the code avoid injection vulnerabilities?</li></ul><p>Consider using Bootstrap instead of styling from scratch. It’s not required, but it could save you considerable time for more important things.</p><p>JavaScript is also not required, but it can enhance usability. Don’t plan to use it everywhere, but consider where small amounts could have a postive impact.</p>]]></content>
    
    <summary type="html">
    
      写一个完整的酒店管理系统，包括至少两个角色，Customers和Hotel Holder。
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Mysql" scheme="https://tk1307993.coding.me/tags/Mysql/"/>
    
      <category term="MVC" scheme="https://tk1307993.coding.me/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part5</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part5.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part5.html</id>
    <published>2019-02-13T10:18:37.000Z</published>
    <updated>2019-02-13T10:21:42.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="User-Accounts-amp-Basic-Security"><a href="#User-Accounts-amp-Basic-Security" class="headerlink" title="User Accounts &amp; Basic Security"></a>User Accounts &amp; Basic Security</h3><p>Now it is time to add persistence to your server by creating user accounts. The user can then login and out of the server using a password. The server must be modified to contain a shared resource which holds user account information. Additionally, the login protocol must be updated to allow for account validation, eg. passwords.</p><blockquote><p>You will replace the login protocol from Part I with the account login protocol.</p></blockquote><h3 id="Password-Criteria"><a href="#Password-Criteria" class="headerlink" title="Password Criteria"></a>Password Criteria</h3><p>Passwords must meet the following criteria to be valid:</p><ul><li>Must be at least 5 characters in length</li><li>Must contain at least 1 uppercase character</li><li>Must contain at least 1 symbol character</li><li>Must contain at least 1 number character<blockquote><p>Example: Cool320!</p></blockquote></li></ul><p>When the user types in the password, use the gctpass function so the password is not displayed as it is typed.</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>Usage updated:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">/server </span>[-hv] PORT_NUMBER MOTD [ACCOUNTS_FILE]</span><br><span class="line">-h             Displays help menu &amp; returns EXIT_SUCCESS.</span><br><span class="line">-v             Verbose <span class="builtin-name">print</span> all<span class="built_in"> incoming </span><span class="keyword">and</span> outgoing protocol verbs &amp; content.</span><br><span class="line">PORT_NUMBER   <span class="built_in"> Port </span>number <span class="keyword">to</span> listen on.</span><br><span class="line">MOTD           Message <span class="keyword">to</span> display <span class="keyword">to</span> the<span class="built_in"> client </span>when they connect.</span><br><span class="line">ACCOUNTS_FILE  File containing username <span class="keyword">and</span> password data <span class="keyword">to</span> be loaded upon execution.</span><br></pre></td></tr></table></figure></p><p>The server will request a password when a user attempts to log in. Also, it will create a new password for new users when they identify themselves upon login. There should now be two data structures central to your program: a Users list and an Accounts list. The Users list is a list of the users currently logged into the server. The Accounts list is the persistent list of users and their passwords loaded and saved to a file on the server’s execution and termination respectively. If an accounts file is provided on the command line, your server should load this file into the accounts list upon start-up. If no file is provided, the server should start with no existing accounts.</p><blockquote><p>Do not use an array for either of these data structures, it MUST be an extendable format such as a linked list within your server program.</p></blockquote><h3 id="Added-Server-Command"><a href="#Added-Server-Command" class="headerlink" title="Added Server Command"></a>Added Server Command</h3><h4 id="accts"><a href="#accts" class="headerlink" title="/accts"></a>/accts</h4><p>When /accts is typed into the server’s terminal it should dump a list of all user accounts and information. This printout should be similarly formatted to the output of the /users command.</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>To add user authentication we will modify the client program to take an additional argument for creating a new user on the server. When the optional -c argument is included, the client will attempt to create a new user on the server. If the argument is not provided, the client will attempt to login to the server as an existing user with an account.<br>Usage updated:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">/client </span>[-hcv] NAME SERVER_IP SERVER_PORT</span><br><span class="line">-h             Displays this help menu, <span class="keyword">and</span> returns EXIT_SUCCESS.</span><br><span class="line">-c             Requests <span class="keyword">to</span><span class="built_in"> server </span><span class="keyword">to</span> create a new user</span><br><span class="line">-v             Verbose <span class="builtin-name">print</span> all<span class="built_in"> incoming </span><span class="keyword">and</span> outgoing protocol verbs content.</span><br><span class="line">NAME           This is the username <span class="keyword">to</span> display when chatting.</span><br><span class="line">SERVER_IP      The ipaddress of the<span class="built_in"> server </span><span class="keyword">to</span> connect <span class="keyword">to</span>.</span><br><span class="line">SERVER_PORT    The<span class="built_in"> port </span><span class="keyword">to</span> connect <span class="keyword">to</span>.</span><br></pre></td></tr></table></figure></p><h3 id="User-Authentication-Protocol"><a href="#User-Authentication-Protocol" class="headerlink" title="User Authentication Protocol"></a>User Authentication Protocol</h3><p>The protocol for logging into the server will now additionally include user creation. We will introduce new verbs IAMNEW, HINEW, NEWPASS.</p><blockquote><p>Remember when the client prompts the user to enter their password, use the getpass function so the password is not displayed as it typed.</p></blockquote><p>Once a user account has been established with the server, on subsequent client connections the user must be validated. We will introduce new verbs AUTH, HINEW, NEWPASS.</p>]]></content>
    
    <summary type="html">
    
      这是这一系列作业的最后一部分了，这部分包括用户账户管理以及安全的实现，此外还有一些杂项和收尾工作。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part4</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part4.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part4.html</id>
    <published>2019-01-30T13:38:23.000Z</published>
    <updated>2019-01-30T13:41:46.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="User-to-User-Chats"><a href="#User-to-User-Chats" class="headerlink" title="User to User Chats"></a>User to User Chats</h3><p>In this part you will be enhancing your client to allow for communication between other clients. In order to separate individual user to user chats, you will need to implement a chat executable program which your client will execute as child processes. Using the xterm program in tandem with this chat executable you’ll be able to create a client that spawns new windows as needed to display chats. The behavior will emulate what you may be familiar with on facebook or google hangouts functionality in terms of automatically spawning new small windows dedicated for chatting as opposed to monopolizing the user’s entire view of the screen.</p><p>When a client wants to begin a chat session with another user, they type into the client window on stdin the client command /chat. This will trigger the client to send to the server a new verb, MSG. The MSG verb will be used for communication of ALL chat messages between the server and client. Let’s consider an example:</p><ol><li>Paul initiates chat using the /chat command, the message is formatted into the MSG\r\n\r\n protocol and sent to the server.<br>When the server receives the MSG verb, it sends the same message back to both the To and FROM user.</li><li>When Paul’s and Neal’s client receive the MSG\r\n\r\n back from the server, the client program will create a UNIX Domain Socket to share with the child process (for the pop-up chat window) to communicate over, then fork and execv an xterm terminal which will run your ./chat program.</li><li>The chat program is a simple program which takes input from stdin and sends to the Client program, prints on stdout messages from the client program, and handles the command /close which terminates the child process (same as closing the terminal window).</li></ol><p>This is the initial creation of all user to user chats. Once both users have an xterm chat window open for communication, the users can freely type messages to each other. Incoming messages should be proceeded by the &gt; symbol and outgoing messages by &lt; in the chat window. With each message entered in the xterm on stdin, the chat program should relay the information to the client through their Unix Domain socket. The client then converts the message into the Wolfie Protocol MSG verb and sends to the server. The below figure illustrates the steps.</p><p>A user can close a chat window at anytime using either the close button on the xterm window or by using the command /close. When the window is closed on one client it has no impact on the client who was chatting with the user. In the figure below Paul closed the chat window but Neal still has it open. When Neal types a message to Paul it is sent to the server (Step 1). The sewer will forward the message back to Paul &amp; Neal (Step 2). Since Paul has no existing window, his client creates a new window and displays the message. Neal’s client will just display the message since the xterm is already open.</p><p>Paul closed the chat window and then wants to send Neal a new message. To initiate the chat again, he would need to type /chat command in his client. This will send the MSG verb to the sewer (Step 1 in figure below). Upon the server’s response, Paul’s client would spawn a new chat window. Neal and Paul’s chat windows will then both display the</p><p>Overall, the protocol MSG verb is generic. The server has no knowledge of the chat windows open or closed. It is the client program’s responsibility to open, close, and manage the chat windows. In this way, it doesn’t matter if the xterm window is closed because every time MSG is received the client will check to see if a window already exists for communicating with theuser and if not it will fork and exec a new xterm process to become the window needed for communication. If the window does exist then the message is passed through the Unix domain socket and displayed appropriately on the chat window.</p><p>If one of the user’s disconnects from the server or does not exist, but a message is sent to this user, the server will respond with an ERR message.</p><h3 id="Added-Client-command"><a href="#Added-Client-command" class="headerlink" title="Added Client command"></a>Added Client command</h3><h4 id="chat"><a href="#chat" class="headerlink" title="/chat"></a>/chat</h4><p>The /chat command requires the name of the user to send the message to and the message to be sent. The client program will send to the server the MSG verb to communicate the message to the other user.</p><h4 id="logout"><a href="#logout" class="headerlink" title="/logout"></a>/logout</h4><p>Update the functionality of the command to now additionally close all the chat windows and all file descriptors prior to exiting the client program.</p><h3 id="Chat-Program"><a href="#Chat-Program" class="headerlink" title="Chat Program"></a>Chat Program</h3><p>Usage:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./chat UNIX_SOCKET_FD</span><br><span class="line">UNIX_SOCKET_FD          The Unix Domain <span class="keyword">File</span> Descriptor <span class="keyword">number</span>.</span><br></pre></td></tr></table></figure></p><p>When the server sends MSG verb to your client it should fork and exec xterm, which in turn will exec your chat program in a basic terminal. This will act as the interface to communicate with another user much like chats on Facebook or hangouts work. These will act as the small popups to chat in while the client remains the manager for the connection with the server. The chat program will use Unix domain sockets to communicate with the parent client process. Using socketpair() you can declare two anonymous sockets and pass the file descriptor to the chat program as an argument. You can also declare the sockets as you would normally using socket(). In either case you must use AF_UNIX as the domain.</p><p>xterm is a powerful terminal emulator as it allows for a lot of customization using command line arguments. You should study the man page for xterm to see what arguments will help make your program as easy to use as possible. To get you started, the format to fork and exec the ./chatprogram in xterm is as follows:</p><blockquote><p>Example execution string: “xterm -geometry 45x35+%d -T %s -e ./chat. %d”</p></blockquote><p>Each of the arguments have the following meaning.</p><ul><li><p>-geometry geometry: This argument allows you to set the size and location of the xterm window opened. Geometry format is described here under “geometry specifications”. However, all you really need to know is that is takes the format WIDTHxHEIGHT+XOFF+YOFF where width and height are in characters and XOFF and YOFF is in pixels. In the suggested execution string above you can see that you can omit the YOFF value and you can use sprintf to set the XOFF so the windows spawned are not stacked on one another.</p></li><li><p>-T string: With this flag you can set the title of the string to the username being communicated with so the user has a quick reference of which window is chatting with whom. Use %s format specifier to insert the username for the chat.</p></li><li><p>-e program [arguments … ]: finally there is the most important flag. -e specifies the executable to be run when the terminal opens. The arguments to the program follow immediately after as you would type them in the terminal. The execution string shows how you would pass the unix domain socket file descriptor. Use %s format specifier for the file descriptor of the Unix domain socket.</p></li></ul><p>The chat program should prompt the user for input, anything the user types in followed by pressing the enter-key should be considered a message with the exception of the /close command. The /close command simply closes the window and the Unix domain socket in the parent. There is no protocol messages that need to be exchanged with the server when this command is used. The Client forwards each MSG received to the corresponding chat window via each open chat’s Unix domain socket.</p><p>The protocol has new verbs that must be implemented to support these user features. As we have seen in the figures, the MSG verb will deliver the information of who the message is to, whom it is from, and the message being sent. Additionally, add a new verb, UOFF, which will be used to notify ALL clients connected to the server of a user logging out or disconnecting from the server.</p><h3 id="Client-crash-or-error-termlnatlon"><a href="#Client-crash-or-error-termlnatlon" class="headerlink" title="Client crash or error termlnatlon"></a>Client crash or error termlnatlon</h3><p>Crashes happen so the UOFF verb should handle both the case of a client disconnecting and of a client logging off. If someone’s chatting partner disconnects and the chat window is still open for that user, when the UOFF verb is received, the chat window should print a message that informs the user of the disconnection. The xterm window should then close on any key press. This is to prevent the user from attempting to send anything to a disconnected user. Think about how the server can handle errors when trying to pass along user messages, and accordingly turn that error into a UOFF broadcast verb to notify all clients of the user’s disconnection.</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>On the server side the communication threads must handle receiving and sending messages to the proper clients using the MSGprotocol defined in the prior figures. The server also must handle forwarding the UOFF verb to all still connected clients when a user disconnects or logs off the server.</p>]]></content>
    
    <summary type="html">
    
      这是接之前作业的第四部分，这部分主要用xterm来实现用户和用户之间的聊天协议，涉及到的知识点有domain socket, fork, exec, pipe, socketpair。此外，还需要处理network programming中常见的网络异常情况，如client crash, error termination等。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part3</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part3.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part3.html</id>
    <published>2019-01-27T11:44:44.000Z</published>
    <updated>2019-01-27T11:47:51.553Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>The diagram below represents the general control flow of the Client. Study the figure carefully and ask clarification question on piazza.</p><p>The client begins by automatically using the command line args (see usage below) to connect to the server. It then proceeds to the login stage which at this time will be automatic as all that needs to be sent to the server is the client’s username. However, use some planning when implementing this section as you will later add support to ask the user for a password while logging in. Upon a successful login your client proceeds to block on I/O Multiplexing, this means your program is waiting on input from either the server’s socket or stdin.</p><ol><li>When receiving input your program will diverge depending on where the input comes from. In the case of stdin your client will handle the command given and do what is described below for the given command.</li><li>When receiving input from the server socket, your program will handle the protocol as described in the document. One example would be, printing the time logged when the EM IT verb is received from the server.</li></ol><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">/client </span>[-hcv] NAME SERVER_IP SERVER_PORT</span><br><span class="line">-h           Displays this help menu, <span class="keyword">and</span> returns EXIT_SUCCESS.</span><br><span class="line">-c           Requests <span class="keyword">to</span><span class="built_in"> server </span><span class="keyword">to</span> create a new user</span><br><span class="line">-v           Verbose <span class="builtin-name">print</span> all<span class="built_in"> incoming </span><span class="keyword">and</span> outgoing protocol verbs content</span><br><span class="line">NAME         This is the username <span class="keyword">to</span> display when chatting.</span><br><span class="line">SERVER_IP    The ipaddress of the<span class="built_in"> server </span><span class="keyword">to</span> connect <span class="keyword">to</span>.</span><br><span class="line">SERVER_PORT  The<span class="built_in"> port </span><span class="keyword">to</span> connect <span class="keyword">to</span>.</span><br></pre></td></tr></table></figure><p>To make things easier to read, use the ansii escape codes to help color your messages on the client as you did with the server.</p><h3 id="WOLFIE-Protocol"><a href="#WOLFIE-Protocol" class="headerlink" title="WOLFIE Protocol"></a>WOLFIE Protocol</h3><p>Now we will attempt to describe the protocol. This is how the server and client program communicate with each other. It is important that you follow the protocol described exactly. During the grading process we will test your client program with a server we have made and your server with a client we have made. As long as you follow the protocol correctly none of this should matter.</p><p>In the diagrams we use the symbol CR to represent \r and NL to represent \n (The software that creates the diagram parses \n as a newline so we had to change the symbols). You must replace all occurrences of CR NL with the correct values.<br>Example:<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IAM student <span class="keyword">CR</span> NL <span class="keyword">CR</span> NL</span><br></pre></td></tr></table></figure></p><p>should be translated to<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IAM student <span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span></span><br></pre></td></tr></table></figure></p><h3 id="Login-to-the-server"><a href="#Login-to-the-server" class="headerlink" title="Login to the server"></a>Login to the server</h3><p>When the server accepts the client connection request, it will immediately spawn a login thread to handle the login work. The client will initiate the login transaction with the server by sending the WOLFIE verb to the server. The server will respond to the client by replying with EIFLOW (wolfie backwards). Then the server can expect the client to identify itself with the IAM verb. If everything is correct, the server will respond with HI. At this point the client is logged in. You should retain their login time in the data structure you employed to store user information. You can now send a follow up message to the client which alerts them to the message of the day by sending MOTD. The MOTD should print out on the client upon receipt.</p><blockquote><p>The ellipses … represent that there is more communication further down, but just not illustrated in this part of the diagram.</p></blockquote><h3 id="Failed-login"><a href="#Failed-login" class="headerlink" title="Failed login"></a>Failed login</h3><p>It is possible for a login attempt to fail. If a user logs in using the same name as someone already connected, the server should reject that user. The server will send the ERR verb followed by theand the corresponding.</p><blockquote><p>A list of all error codes can be located at the end of the document.</p></blockquote><h3 id="Logout-client-Initiates"><a href="#Logout-client-Initiates" class="headerlink" title="Logout (client Initiates)"></a>Logout (client Initiates)</h3><p>When the user types /logout into their terminal, it begins the process of disconnecting cleanly. The client will send BYE and then receive a BYE response from the server. Implementing the client so that it waits for confirmation from the server is a polite way of making sure the server has properly removed the user from it’s data structures and is in an acceptable state for the user to then disconnect.</p><h3 id="Shutdown-server-initiates"><a href="#Shutdown-server-initiates" class="headerlink" title="Shutdown (server initiates)"></a>Shutdown (server initiates)</h3><p>Finally if the user were to type /shutdown it would initiate the above protocol to terminate the connection with all connected users. It will send BYE to ALL CONNECTED USERS. It would then clean up any open files and sockets it may have open and then terminate.</p>]]></content>
    
    <summary type="html">
    
      这是接之前作业的第三部分，这部分主要是实现Client端的编程，接受消息和处理用户输入部分，同样涉及到多路I/O复用(select/poll/epoll)，Socket编程等。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part2</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part2.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part2.html</id>
    <published>2019-01-26T05:03:58.000Z</published>
    <updated>2019-01-26T05:06:04.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>he Wolfie Chat program will allow users logged into the the Wolfie Chat server to send messages to each other. Chats between users will each be displayed on the client machine in independent windows, just as Google Hangouts does.</p><p>Clients will attempt to establish a connection with the server through the accept thread. The accept thread on the server will create a connection with the Client and spawn the Login Thread. The Login thread will then communicate with the client via the Wolfie Protocol to successful/unsuccessfully log the user into the Wolfie Chat system. Upon successful/unsuccessful login, the Login thread will terminate. A Login thread will be created for each connection attempt and terminated upon completion. Multiple login threads can exist simultaneously if multiple users are attempting to login.</p><p>If the user is successfully logged on, then the server will act as the middle man for all communications between the users connected to the server. A Communication thread on the server will be spawned when the first user logs onto the server and terminate when no user is logged in. This thread will then service all additional users who connect. An overview of the architecture is shown below.</p><h3 id="Part-I-Establishing-a-connection"><a href="#Part-I-Establishing-a-connection" class="headerlink" title="Part I - Establishing a connection"></a>Part I - Establishing a connection</h3><p>In this part we will work on establishing a simple login procedure between the client and server program. At the end of it you should have multiple users logged in who can simply ask the server “how long have I been connected”. The server should then respond to the correct user and let them know how long. Also the client should be able to ask “who else is connected” and the server will return a list of connected users. Once this part is completed, you should be able to extend the concepts to make a more complex application which will allow users connected with the server to communicate with each other.</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>Below is a diagram representing the internal control flow of the server program. As discussed above this is the main accept thread which is running when the server program is run. Login threads are spawned as necessary to handle each user’s login attempt. A successfully logged in user then communicates with the server via the communication thread.</p><h3 id="Accept-Thread-main"><a href="#Accept-Thread-main" class="headerlink" title="Accept Thread (main())"></a>Accept Thread (main())</h3><p>The primary server program will accept commands from the user via stdin and connections from the client program via the bound “listen” socket. When the server accepts an incoming connection from a client it should spawn a new login thread and begin the login process. If it detects input from the keyboard, it should parse that input for a list of commands and handle it accordingly. This section of the process will use a form of I/O multiplexing to listen for input on both the server socket and from stdin.</p><p>I/O multiplexing is exposed via the following interfaces - select, poll, or epoll. They all have their pros and cons, but it is up to you to choose which technique you should use. You will use I/O multiplexing in both the server and your client program. In your server, you will multiplex on each socket for the connected users in the communication thread, and in the accept thread you will multiplex on the accept socket and stdin.</p><p>The benefits of I/O multiplexing are that the program will be put into a suspended state while no activity is being performed on the fd’s, and when one of the fd’s is written to, it will alert your program that something happens, and you can then act on it. The other benefits to these techniques is that they work in a synchronous manner, but allow you to have behavior similar to doing things concurrently, without the overhead of spawning new threads, or starting new processes.</p><h3 id="Login-Thread"><a href="#Login-Thread" class="headerlink" title="Login Thread"></a>Login Thread</h3><p>When a client connects to the server, the server should spawn a thread to handle the login protocol with the server. The login protocol is defined later in Part I. The Login thread will need to check the list of users on the server (shared resource between server threads) to see if the username is already in use. If the name is not in use, the login thread will then complete the protocol to log the user into the server. We will simply treat login for this part as a first come first serve process. If student1 logs in as user1 then student2 tries to login as user1, student1 will successfully log in and student2 will be rejected. Any relevant data about the connecting user should be a of structure you define that makes their information easily accessible. An in-exhaustive list of things relevant to save are: the time of login, the socket on which they communicate, the username, and the ip address. You are encouraged to add any other fields of data that assist in your implementation.</p><h3 id="Communication-Thread"><a href="#Communication-Thread" class="headerlink" title="Communication Thread"></a>Communication Thread</h3><p>When there is at least one user logged in to the server a thread must be spawned to handle the communication to and from the server and later between all of the clients. In your communication thread you will use I/O multiplexing on the set of file descriptors (fds) used to communicate with the clients.</p><blockquote><p>You must use I/O multiplexing.</p></blockquote><h3 id="Server-commands"><a href="#Server-commands" class="headerlink" title="Server commands"></a>Server commands</h3><p>Aside from handling connections from various clients, the server also has to handle input from stdin. This input should represent commands that the person operating the server might want to use. These commands are transparent to the clients connected and are mainly used as a way to gather information by the server operator.</p><h5 id="users"><a href="#users" class="headerlink" title="/users"></a>/users</h5><p>When /users is typed into the server’s terminal it should dump a list of currently logged in users to stdout (NOTE: this does not send anything over the network, this is only on the server side.). This can be a great way to debug your program, it is advised you take some time to make neatly formatted print statements that print out relevant data. (Think, toString() function for your user structs).</p><h5 id="help"><a href="#help" class="headerlink" title="/help"></a>/help</h5><p>When /help is typed into the server’s terminal it should list all the commands which the server accepts and what they do.</p><h5 id="shutdown"><a href="#shutdown" class="headerlink" title="/shutdown"></a>/shutdown</h5><p>When /shutdown is typed into the server’s terminal it should cleanly disconnect all connected users. Save any state that it must and then close all the sockets and files which it is using and free any heap memory allocated.</p>]]></content>
    
    <summary type="html">
    
      这是接上次作业的第二部分，需要实现整个聊天通信的大体框架，包括服务端Server和客户端Client的编程。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part1</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part1.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part1.html</id>
    <published>2019-01-23T11:55:39.000Z</published>
    <updated>2019-01-23T11:58:12.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this assignment you will be creating a chat service much like Google’s Hangouts, called Wolfie Chat. The goal is to learn about network programming in C. You will implement the service so that it adheres to the Wolfie Protocol.</p><p>The concept of a protocol is an important one to understand. When implementing the protocol you need to follow the requirements and description TO THE LETTER. The idea is to create a standard so that anyone implementing the Wolfie Protocol will be able to connect and operate with any other program implementing the same protocol. Any client and chat should work with any server if the protocol is used correctly (HINT HINT think grading).</p><p>Certain public networks like wolfienet secure or starbucks will not allow you to connect your client and server together over the network. You may also want to test your client by connecting to another group’s server, and your server by having other group’s clients connect to it. This is a good way to ensure that the protocol is implemented correctly in your client/server programs. While we encourage testing this way, THIS IS NOT an open invitation to share code with other groups. You should not be showing or sharing code with anyone else. To perform these tests you should simply be telling your client programs to connect to the IP address and port number at which these servers are running at. You have been warned!</p><h3 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h3><p>In this assignment you are allowed groups of two members. Unless stated otherwise, we will assume that you are in the same group as the previous assignment. If you wish to divorce your partner from the previous assignment and assemble a new group please follow the directions in hw4.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>Make the directory hw5 in the root of your git repository. All files which you create for this assignment should be placed in this directory. You should also create a Makefile, which generates the server program called server, a client program called client, and your chat program called chat. When we navigate to the hw5 directory and type make these three programs should be generated.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd hw5</span><br><span class="line">$ make</span><br><span class="line">gcc -Wa11 -Werror server.c -o server</span><br><span class="line">gcc -Wal1 -Werror client.c -o client</span><br><span class="line">gcc -Wa11 -Werror chat.c -o chat</span><br><span class="line">$ ls</span><br><span class="line">chat chat.c<span class="built_in"> client </span>client.c Makefile README.md<span class="built_in"> server </span>server.c</span><br></pre></td></tr></table></figure><p>A good strategy for splitting up the work in this assignment should be to have one partner create the client/chat program and the other partner create the server. Test out each part as you implement it to ensure that it works (don’t just build the entire thing separately and hope it all works in the end.) It’s also okay to test both the server and client locally on your own machine, but you really should test it out over a real network as well.</p><h3 id="Helpful-Resources"><a href="#Helpful-Resources" class="headerlink" title="Helpful Resources"></a>Helpful Resources</h3><p>You should make sure you understand chapter 11, 12.2, and 12.3 in your textbook. Also if you didn’t understand files, fork, execute, and pipes from the previous homework, make sure you review chapter 10.1-10.4 and 10.6-10.12.</p><p>An AMAZING reference on sockets which summarizes the man pages can be found here (Don’t worry that the site is called python). Additionally you may also want to read Bee’s Guide to Network Programming. It has a good mix of tutorials, explanations, and descriptions of the functions you need to use for this assignment. You may also want to consider using wireshark or tcpdump to monitor the network packets.</p><h3 id="Things-to-be-aware-of"><a href="#Things-to-be-aware-of" class="headerlink" title="Things to be aware of"></a>Things to be aware of</h3><p>Aside from the issues which occur in the protocol (such as a user with duplicate names), you also need to handle other external errors such as connections getting lost, client program getting killed, server program getting killed, etc. You should look to handle:</p><ul><li>EINTR</li><li>EPIPE</li><li>ECONNREFUSED</li><li>ECHILD</li><li>EJNVAL</li><li>SIGCHILD</li></ul>]]></content>
    
    <summary type="html">
    
      这是一个两周的超级大作业，用Linux Network Programming的知识写一个聊天软件。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS341-Timing-Instructions</title>
    <link href="https://tk1307993.coding.me/CS341-Timing-Instructions.html"/>
    <id>https://tk1307993.coding.me/CS341-Timing-Instructions.html</id>
    <published>2019-01-19T02:03:20.000Z</published>
    <updated>2019-01-19T02:05:50.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="I-OBJECTIVES"><a href="#I-OBJECTIVES" class="headerlink" title="I. OBJECTIVES"></a>I. OBJECTIVES</h3><p>The purpose of this assignment is to build a package of timing routines for the SAPC and use it to time code on the SAPC to determine memory access time on the SAPC with and without caching. This code does not run on UNIX. Read the Intel 8254 Programmable Interval Timer (PIT) Data Sheet. Look at $pcex/timer.c for an example of C code for accessing the timer. Copy all the files needed for this project.</p><h3 id="II-The-timing-package"><a href="#II-The-timing-package" class="headerlink" title="II. The timing package"></a>II. The timing package</h3><p>A package is a set of utilities that can be called by a program that wants to use them. When designing a package we carefully consider the things in it that must be visible to the caller, specify those, and require that everything else be internal and invisible. The visible parts of the timing package you will build are in “timepack.h”. A customer for the package’s services includes that header file (using #include) in the program for compilation and links his or her object code with “timepack_sapc.opc” to build the executable. You are asked to modify “timepack_sapc.c” to provide a high resolution timer service for programs running on the SAPC.</p><h3 id="Existing-Code"><a href="#Existing-Code" class="headerlink" title="Existing Code"></a>Existing Code</h3><p>Every package should have a test program showing that it works by calling it in all important ways. This test program is called a “driver” because it sits on top of the package and drives it like we test-drive a car – start up, do this, do that, stop, shut down. It is also called a “unit test” program because it tests just this one package separate from any other package in a bigger program. If you suspect something is wrong in a certain package, you’ll try to make its unit test fail, and then you debug the problem in the relatively simple environment of the unit test, rather than in the bigger program. The test program for timepack is testpack.c. You can build testpack and testpack.lnx right away and run them. Note what is printed out by testpack.lnx. Capture this in a typescript1 file. It shows that the timing package (as provided) can time things on the SAPC to 55-ms accuracy, but not to the microsecond accuracy we want. The next step is to get your timepack_sapc.c fixed up for the higher resolution and the unit test executable testpack.lnx will show it.</p><p>Modifed Code<br>You’re working directly with the hardware device, the Programmable Interval Timer (PIT) with its interrupt handler. This code has been provided to you in a). The timepack_sapc.c as provided can measure time in timer “ticks” at an 18.2-Hz (55 ms/tick) standard PC tick rate.To use the PIT to measure higher precision, you make use of “downcounts” within the timer chip. What you need to do is determine how many counts have downcounted in the timer since the last tick and compute a higher accuracy time. By doing this at both the start and the end of the time interval being measured, you can compute the elapsed time accurate to a few microseconds, a very respectable timer service. You’ll need to modify the timepack_sapc.c to achieve this.</p><p>Since timer downcounts count down from 64K at the tick, you need to subtract the register value from 65536 to get the number of downcounts since last tick:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">number</span> <span class="keyword">of</span> downcounts <span class="keyword">since</span> tick = <span class="number">65536</span> - observed_count (<span class="keyword">in</span> register)</span><br></pre></td></tr></table></figure></p><p>Thus the accurate time between A and B is<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= 202<span class="built_in"> clock </span>ticks + (65536 – 43000) downcounts - (200<span class="built_in"> clock </span>ticks + (65536 – 35000) downcounts)</span><br><span class="line">= 2<span class="built_in"> clock </span>ticks – 8000 downcounts</span><br></pre></td></tr></table></figure></p><h3 id="III-Timing-i486-instructions-and-a-C-loop"><a href="#III-Timing-i486-instructions-and-a-C-loop" class="headerlink" title="III. Timing i486 instructions and a C loop"></a>III. Timing i486 instructions and a C loop</h3><p>In this part of the assignment you will use the timing package to time x86 instructions. Instruction execution time is measured in system clock cycles, here 2.5 nsecs for our 400Mhz Pentium systems. The PC timer 0 is accurate only in the usec (microsecond) range so you will need to loop many times and divide by the loop count to get the accuracy needed.</p><p>The actual instructions to be timed appear in loops in “itests.s”, which is an x86 assembler source. These are called from itimes.c.</p><p>Finish “itests.s”, so that the third instruction to be timed (immediate move of IDATA to register) is properly implemented. Add a fourth instruction of your choice “itests.s” and “itimes.c”</p><p>You can use the provided makefile to build an optimized version of the SAPC executable file. The provided makefile has the following definitions:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># development build: -g provides debugging support, slows down execution</span><br><span class="line"># <span class="keyword">Use</span> -O2 optimization, no -g on <span class="keyword">final</span> timing runs<span class="comment">!</span></span><br><span class="line">PC_CFLAGS_DEV = -g -Wall -Wno-<span class="keyword">implicit</span> -Wshadow -I$(PC_INC) -I$(TIMING)</span><br><span class="line">PC_CFLAGS_OPT = -O2 -Wall -Wno-<span class="keyword">implicit</span> -Wshadow -I$(PC_INC) -I$(TIMING)</span><br><span class="line"># make <span class="keyword">default</span> PC_CFLAGS be PC_CFLAGS_DEV</span><br><span class="line">O = DEV</span><br><span class="line"># allow user to override DEV via O=OPT on the command line</span><br><span class="line">PC_CFLAGS = $(PC_CFLAGS_$(O))</span><br></pre></td></tr></table></figure></p><h3 id="FINAL-NOTE"><a href="#FINAL-NOTE" class="headerlink" title="FINAL NOTE"></a>FINAL NOTE</h3><p>In the event that you are unable to correctly complete this assignment by the due date, do not remove the work you were able to accomplish – partial credit is always better than none.</p>]]></content>
    
    <summary type="html">
    
      这个作业属于硬件作业了，要求阅读芯片手册，然后写一个时钟驱动。难度的话其实比不过同期的软件作业难度，已经提供了大部分的代码，不过硬件调试需要一定的功底。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Hardware" scheme="https://tk1307993.coding.me/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL代写：CA1-Computer-Animation-and-Visualisation</title>
    <link href="https://tk1307993.coding.me/CA1-Computer-Animation-and-Visualisation.html"/>
    <id>https://tk1307993.coding.me/CA1-Computer-Animation-and-Visualisation.html</id>
    <published>2019-01-09T11:25:02.000Z</published>
    <updated>2019-01-09T11:27:11.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>OpenGL is a relative low-level 3d API which does not support object/scene management. This is usually left to the user of the API. For example, importing and exporting data to and from OpenGL has to be implemented by the application programmer. Hierarchical structures although indirectly supported using Push and Pop matrix operations have no direct support in OpenGL.<br>You task is to develop a set of C++ classes / data structures and algorithms that provide a high level OpenGL object/scene management for one of the following:</p><ol><li>Develop a small library that provide an interface that allows the simulation of real world physic such as gravity, friction springs; To demonstrate the library a simple particle system with physics and collisions could be written.</li><li>A simple 3D game using OpenGL which should allow for the detection of object collisions in 3D space and user control of the game characters. (3D space invaders would be a good example).</li><li>Develop a framework that allows the simulation of a Craig Reynolds-like flocking system using OpenGL. The system should allow for any number of boids to be added to the scene, with detection of objects within a scene.<br>.4 Develop a system that provide an interface that allows L-systems (Lindermayer systems) based modelling of plant like structures using OpenGL. The L system should read in the grammar of the system from a file.</li><li>A simple raytracing framework that will read a scene file and render out the scene using materials / lights supplied in the scene file.</li><li>Other project Ideas may be discussed with the unit leader.</li></ol><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>You are required to use the NGL graphics library as part of the assignment, if more functionality is required a software update request can be made to Jon Macey or you may use other libraries but this must be justified in the design of the project. It is also expected that the project uses the main Qt development system and is capable of running within this environment. Third party libraries such as GLUT should not be used, however if you are developing a game SDL could be considered.</p><p>It is suggested that the program be written using C++ and OpenGL however any system may be used for the final program.<br>For example Python exporting to renderman for rendering would be acceptable, however realtime visualisation with OpenGL for the system would be a bonus.</p><h3 id="Part-1-Research-and-Design"><a href="#Part-1-Research-and-Design" class="headerlink" title="Part 1: Research and Design"></a>Part 1: Research and Design</h3><p>For the first part of the project a report should be submitted containing initial research into the topic including references to sources and initial design consideration for the project. Marks will be awarded for clarity of research and use of images / algorithms. Initial design of the C++ data structures and algorithms required should also be carried out however no code is expected to be submitted at this stage. Note that it is expected that most of the design will be in the form of a “programming sketch book” using hand drawn data diagrams, a full written report is not expected at this stage. The main emphasis is the research and design into the area chosen. At this stage we are more interested in Code design and the algorithmic approach to the problem and not the cosmetic / artistic design of the program.</p><h3 id="Part-2-Implementation"><a href="#Part-2-Implementation" class="headerlink" title="Part 2: Implementation"></a>Part 2: Implementation</h3><p>The 2nd part of the assignment involves the implementation of the system based on the initial research and design. As software design is an iterative process it is expected that the actual program will have evolved from the initial report and this process should be reflected on in the final project report. Marks will be awarded for good use of C++, data structure design and documentation of the code with respect to and algorithms and techniques used.</p><p>The program must be able to be configured by the use of a text based configuration file to set-up initial program states or values.</p><h3 id="INTENDED-LEARNING-OUTCOMES"><a href="#INTENDED-LEARNING-OUTCOMES" class="headerlink" title="INTENDED LEARNING OUTCOMES"></a>INTENDED LEARNING OUTCOMES</h3><p>This assignment will allow you to demonstrate your ability of the following learning outcomes.</p><ul><li>understand and apply Object Oriented concepts and techniques to the design and implementation of CGI systems</li><li>demonstrate an ability to analyze and select suitable data structures for program development.</li><li>demonstrate an ability to understand and implement computer animation related algorithms using OOP</li><li>develop GUI based systems using a suitable API for animation</li></ul>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业是一个OpenGL的3D小游戏，另外编程的时候不仅需要使用QT，还需要使用提供的NGL图形库来开发。
    
    </summary>
    
      <category term="OpenGL" scheme="https://tk1307993.coding.me/categories/OpenGL/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="QT" scheme="https://tk1307993.coding.me/tags/QT/"/>
    
      <category term="OpenGL" scheme="https://tk1307993.coding.me/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CMPT115-Huffman-Tree-Part4</title>
    <link href="https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part4.html"/>
    <id>https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part4.html</id>
    <published>2019-01-05T03:55:54.000Z</published>
    <updated>2019-01-05T04:00:19.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exercise-7-Completing-the-Huffman-Codec-ADT"><a href="#Exercise-7-Completing-the-Huffman-Codec-ADT" class="headerlink" title="Exercise 7 Completing the Huffman Codec ADT"></a>Exercise 7 Completing the Huffman Codec ADT</h3><p>To complete the C The other ADT in Huffman.cc is called the Huffman Codec. The word “codec” is a contraction of two words: “COde” and “DECode”. This ADT does the work of coding and decoding using a Huffman tree. The Huffman Codec is a record that stores two records: the Huffman Tree thatwas created in the previous exercise, and a codebook, which was created by analysing the Huffman tree. The codebook has a place to store a C-string for every ASCII character, though most of the codebook will be filled with NULL references; only the characters in the original message will have a code. The function find_codes() builds the codebook using the Huffman Tree.</p><p>In this exercise, you’ll complete the encode() operations for the Huffman Codec. Here’s what it looks like currently:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// encode(hcdc, message)</span></span><br><span class="line"><span class="comment">// encode a message using the Huffman Codec</span></span><br><span class="line"><span class="comment">// Pre: hcdc is a referene to a HuffmanCodec</span></span><br><span class="line"><span class="comment">//      message:: a cstring to encode</span></span><br><span class="line"><span class="comment">// Return a cstring containing the encoded message</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">encode</span><span class="params">(HuffmanCodec *h, <span class="keyword">const</span> <span class="keyword">char</span> message[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Your job is to complete this function.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>The operation has to encode each character in the given message. The output of this function is a reference to a C-string, so we have to allocate a C-string big enough to fill with the encoded message. Use a large size, just to be sure.</p><p>To encode the message, you have to look at each character in the message, and copy its code from the Codec’s codebook to the encoded C-string. It’s possible to use strcat() for this, but it’s just as easy to write your own loop to copy the code for a character from the codebook to the coded C-string. Remember that you’re looking at the message one character at a time, but you are copying several characters into the coded C-string.</p><p>The encoded C-string is probably twice as long as the original message. That’s because we’re using ‘0’ and ‘1’ in the codebook; a real compression utility would use bits 0 and 1, not characters. That’s okay for us; seeing the code is much easier to debug.</p><h3 id="Exercise-Summary"><a href="#Exercise-Summary" class="headerlink" title="Exercise Summary"></a>Exercise Summary</h3><p>Complete encode() as indicated.</p><p>Build the testADT app, and run it.</p><p>If your code does the right things, tests 45-48 should all report “Passed.”</p><h3 id="Exercise-8-Completing-the-Huffman-Codec-ADT"><a href="#Exercise-8-Completing-the-Huffman-Codec-ADT" class="headerlink" title="Exercise 8 Completing the Huffman Codec ADT"></a>Exercise 8 Completing the Huffman Codec ADT</h3><p>To complete the Huffman Codec, we need an algorithm to decode a coded string. The operation to decode a coded string is called decode(). We’ve given it to you in the file Huffman.cc. It calls a function called decode_char(), whose job it is to step through the Huffman tree, starting at the root, and winding up at a leaf; decode_char() returns the character stored in the Frequency record stored at the leaf. (We cannot use the codebook for decoding! We have to use the Huffman Tree. To decode a character using the Huffman tree requires us to step down from tbhe root to a leaf, which should be fairly short. The complexity of stepping through the tree is O(h) where h is the height of the Huffman Tree. If we used the codebook, we’d have to look at each possible code, and try to figure out if the code we’re looking at is a code in the codebook. This would require at least O(nh) time, where n is the number of characters in the message. So use the tree!</p><p>Here’s what decode_char() looks like currently:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decode_char(tnode, message, d) &#123;</span></span><br><span class="line"><span class="comment">// decode one character from the message.</span></span><br><span class="line"><span class="comment">// Pre: tnode is a node in a huffman tree</span></span><br><span class="line"><span class="comment">//      message:: cstring, the whole message to decode</span></span><br><span class="line"><span class="comment">//      d:: a reference to an int containing the current</span></span><br><span class="line"><span class="comment">//          index in the message</span></span><br><span class="line"><span class="comment">// Post: d has been increased by the number of 0s and 1s used to</span></span><br><span class="line"><span class="comment">//       encode the character</span></span><br><span class="line"><span class="comment">// Return: the decoded character</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">decode_char</span><span class="params">(TreeNode *t, <span class="keyword">char</span> message[], <span class="keyword">int</span> *d)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'.'</span>; <span class="comment">// dot returned for no good reason</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Your job is to complete this function.</p>]]></content>
    
    <summary type="html">
    
      这是Huffman作业的第四部分，也是最后一部分，同样分为三个小练习。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CMPT115-Huffman-Tree-Part3</title>
    <link href="https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part3.html"/>
    <id>https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part3.html</id>
    <published>2019-01-02T03:03:37.000Z</published>
    <updated>2019-01-02T03:06:34.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exercise-4-Constructor-for-FrequencyList"><a href="#Exercise-4-Constructor-for-FrequencyList" class="headerlink" title="Exercise 4 Constructor for FrequencyList"></a>Exercise 4 Constructor for FrequencyList</h3><p>The Huffman tree algorithm uses a list of trees, each tree storing a number of Frequency records. The way we’ll manage this list is to build a “wrapper” ADT around the List ADT.</p><p>The file FrequencyList.cc contains the implementation of this wrapper ADT. Notice that most of the List operations are simply delegations to the contained List.</p><p>We want to give the wrapper a new constructor operation, and a new operation called remove_smallest(), which is the next exercise. Because these are very specific operations for the Huffman tree algorithm, it is better to build a wrapper ADT than to put these special purpose operations in the List ADT.</p><p>The FrequencyList constructor currently looks like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createFrequencyList(message)</span></span><br><span class="line"><span class="comment">// Pre: message:: refToChar, the message to be encoded</span></span><br><span class="line"><span class="comment">// Return: a reference to the generated list.</span></span><br><span class="line"><span class="comment">// post: a new list is allocated</span></span><br><span class="line"><span class="comment">// return: reference to the new list</span></span><br><span class="line"></span><br><span class="line"><span class="function">FrequencyList *<span class="title">createFrequencyList</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (message == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Error in createFrequencyList(): NULL message!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The constructor should do the following:</p><ol><li>Walk through the message, character by character, counting how many times each character is used. Use an integer array for this.</li><li>Once the whole message has been seen, use the array to build a Frequency record for each character seen at least once.</li><li>Build a TreeNode for each Frequency record, and then store the TreeNode in the List. Each Tree will be a leaf node for now. We’ll use the initialized list in a later exercise.</li><li>Return the FrequencyList full of TreeNodes.</li></ol><p>In the lecture slides on Huffman trees, the character and frequency data were attributes of the Tree record itself.</p><p>In this assignment, we are using Frequency records to store the character and frequency values. This adds another ADT to think about, but it allows us to reuse the ordinary tree that simply stores a single Element. This is good software reuse (of Trees) and adaptability: if we want to store other data in the Tree, we can change the Frequency ADT, and most if not all of the rest of the application would not need to change.</p><h3 id="Hints-on-counting-characters"><a href="#Hints-on-counting-characters" class="headerlink" title="Hints on counting characters"></a>Hints on counting characters</h3><p>Each character you can type or use on a computer has an integer value; for letters and digits and normal keyboard symbols, this is called the ASCII value. For example, the letter ‘c’ has an ASCII value of 99. Because of this, we can use a character as an index into a characeter count array like this: counts[‘c’]. We can do this for any character, whether it’s ‘c’ or ‘&amp;’.</p><p>To calculate the frequency of each letter in a message, we use an array of counts (initialized to 0). Each time we observe a character in a message, we can increase its count. For example to increase the count for the letter ‘c’, we would do the following:<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">counts['c'] </span>+= <span class="number">1</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>This will increase the count of the integer at index 99 (the one corresponding to the letter ‘c’). The letter ‘c’ is the 99th character in the ASCII character set, and its counter is the 100th in our counts array. To initialize the counts array, we have the following:</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> counts[<span class="type">ASCII_SIZE</span>]; // <span class="type">ASCII_SIZE</span> <span class="keyword">is</span> defined <span class="keyword">in</span> <span class="type">LOCALE</span>.h</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="type">ASCII_SIZE</span>; i++) &#123;</span><br><span class="line">  counts[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we’re using integers, not characters, to index into the array. This is okay, because in a sense, characters are integers. Characters have special status when we want to think of them as characters, but they also have integer values which we use when that’s handy.</p><p>One problem remains: with compiler flags -Wall and -pedantic, the compiler may complain when you use a character as an array index:<br>warning: array subscript has type ‘char’ [-Wchar-subscripts]</p><p>To get rid of these warnings, we can use a technique called typecasting. Typecasting tells the compiler to treat a variable of one type as though it has a different type. For example, we can typecast a character to an integer as follows:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counts[(<span class="keyword">int</span>) <span class="string">'c'</span>] += <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>The use of (int) in brackets in front of a value tells the compiler that it’s not a mistake to try to use the value ‘c’ as an integer (99). Typecasting can also be done when you want to force a float to be truncated into a integer, or something like that. We’ll only use it for characters in this asignment.</p><h3 id="Exercise-Summary"><a href="#Exercise-Summary" class="headerlink" title="Exercise Summary"></a>Exercise Summary</h3><ol><li>Complete createFrequencyList() as indicated.</li><li>Build the testADT app, and run it.</li><li>If your code does the right things, tests 33-34 should all report “Passed.”</li></ol>]]></content>
    
    <summary type="html">
    
      这是Huffman作业的第三部分，同样分为三个小练习。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CMPT115-Huffman-Tree-Part2</title>
    <link href="https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part2.html"/>
    <id>https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part2.html</id>
    <published>2018-12-29T01:23:12.000Z</published>
    <updated>2018-12-29T01:27:05.805Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exercise-1-Warmup-Completing-Frequency-cc"><a href="#Exercise-1-Warmup-Completing-Frequency-cc" class="headerlink" title="Exercise 1 Warmup: Completing Frequency.cc"></a>Exercise 1 Warmup: Completing Frequency.cc</h3><p>We’ll use the Frequency ADT to store a character, e.g., ‘a’, and a count of how many times it appears in some text, e.g., 7. The frequency record will be stored in the Huffman trees.</p><p>The Frequency interface is complete, and defined in Frequency.h. It’s basically a storage unit for characters and integers. The implementation is almost complete, but the constructor, createFrequency() is incomplete. Here’s what is in the Frequency.cc file:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CONSTRUCTOR</span></span><br><span class="line"><span class="comment">// pre: d is the character data being counted,</span></span><br><span class="line"><span class="comment">//      c is the count.</span></span><br><span class="line"><span class="comment">// post: allocates memory for a new frequency record</span></span><br><span class="line"><span class="comment">// return: a reference to the new record</span></span><br><span class="line"><span class="function">Frequency *<span class="title">createFrequency</span><span class="params">(<span class="keyword">char</span> d, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It currently does nothing. Complete this operation, by allocating a record, and storing the appropriate data.</p><h3 id="Exercise-Summary"><a href="#Exercise-Summary" class="headerlink" title="Exercise Summary"></a>Exercise Summary</h3><ol><li>Complete createFrequency() as indicated.</li><li>Build the testADT app, and run it.</li><li>If your code does the right things, the first 4 tests should all report “Passed.”</li></ol><h4 id="What-to-hand-in"><a href="#What-to-hand-in" class="headerlink" title="What to hand in:"></a>What to hand in:</h4><p>The file Frequency.cc containing your code for createFrequency() described above.</p><h4 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h4><p>5 marks: createFrequency() builds a Frequency record and correctly initializes it with the given data.</p><h3 id="Exercise-2-Warmup-Completing-TreeNode-cc"><a href="#Exercise-2-Warmup-Completing-TreeNode-cc" class="headerlink" title="Exercise 2 Warmup: Completing TreeNode.cc"></a>Exercise 2 Warmup: Completing TreeNode.cc</h3><p>We’ll use the TreeNode ADT to help us build Huffman trees. In our application, a TreeNode will store a reference to a Frequency record; see TreeNode.h and TreeElement.h. Most of the TreeNode implementation is complete. There are two operations that are currently incomplete: the constructor, createTreeNode(), and the operation height().</p><p>The constructor currently looks like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CONSTRUCTOR</span></span><br><span class="line"><span class="comment">// pre: d is a reference to a TreeElement</span></span><br><span class="line"><span class="comment">// post: allocates memory for the TreeNode</span></span><br><span class="line"><span class="comment">// return: reference to the TreeNode record</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">createTreeNode</span><span class="params">(TreeElement d)</span></span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complete it so that it allocates a correctly initialize TreeNode record.<br>The height operation currently looks like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// height(n)</span></span><br><span class="line"><span class="comment">// pre: n is a reference to a TreeNode</span></span><br><span class="line"><span class="comment">// return: the height of the tree</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode *n)</span></span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complete this function so that it returns the height of a tree whose root is given as the parameter n.<br>Hints:</p><ul><li>This function must be recursive.</li><li>The height of a NULL tree is 0.</li><li>There is a function called max(a,b) you can use. It returns the larger of a or b. This function is defined in a C++ library called “algorithm” which we’ve already #included for you.</li></ul><h3 id="Exercise-Summary-1"><a href="#Exercise-Summary-1" class="headerlink" title="Exercise Summary"></a>Exercise Summary</h3><ol><li>Complete createTreeNode() as indicated.</li><li>Complete height() as indicated.</li><li>Build the testADT app, and run it.</li></ol><p>If your code does the right things, tests 5-16 should all report “Passed.”</p><h4 id="What-to-hand-in-1"><a href="#What-to-hand-in-1" class="headerlink" title="What to hand in:"></a>What to hand in:</h4><p>The file TreeNode.cc containing your code for the two operations described above.</p>]]></content>
    
    <summary type="html">
    
      这是Huffman作业的第二部分，分为三个小练习。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
</feed>
