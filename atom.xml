<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-12-21T01:26:25.734Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS1921-Text-Editor</title>
    <link href="https://tk1307993.coding.me/CS1921-Text-Editor.html"/>
    <id>https://tk1307993.coding.me/CS1921-Text-Editor.html</id>
    <published>2019-12-21T01:23:00.000Z</published>
    <updated>2019-12-21T01:26:25.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Aims"><a href="#Aims" class="headerlink" title="Aims"></a>Aims</h3><p>This exercise aims to give you practice in dealing with dynamic data structures, specifically linked lists. The goal is to complete the implementation of a medium-sized program that can do simple text editing.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>The assignment is to write a simple line-based text editor called lite (which stands for line text editor). The editor lite stores lines of text in a linked list: each line of text is stored in a node of the linked list. If there are n lines of text, they are numbered from 1 to n for the user. At every point in time the editor has a current line number (which is an index between 1 and n). When lite is started up, the current line number is 1. The line-based commands allow the user to print lines, to delete the current line, to insert and append lines before or after the current line and to go-to a particular line. There are also file-oriented commands that enable the user to save changes and quit the editor, to force an exit or to change the name of the file. Note that lite does not contain a search command or contain any way of changing text apart from deleting ‘old’ lines and appending and inserting new lines.</p><p>The main objectives of this assignment are:</p><ul><li>use and manipulate dynamic data structures (like linked lists) to solve a complex problem</li><li>learn how to implement a linked list data structure and functions for maintaining the data structure</li><li>gain experience with implementing a more comprehensive functionality for editing text files</li><li>write a properly documented C program that adheres to the course Style Guide</li></ul><p>NOTE: You should think carefully about the appropriate data structures and algorithms to use in your program. Before starting to write any code it is important that you fully understand the problem and determine the data structures that you will require and the algorithms to use. It is highly recommended that you start coding only after you have spent some time on these considerations. In particular, you must not make any assumptions about the number of lines in a text file; this means that you must use dynamically-allocated linked-list data structure to manage a text file.</p><h3 id="What-the-editor-should-do"><a href="#What-the-editor-should-do" class="headerlink" title="What the editor should do"></a>What the editor should do</h3><p>A file name is the only optional argument to the lite command. So you execute lite either by:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">prompt$</span><span class="bash"> ./lite</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">prompt$</span><span class="bash"> ./lite filename</span></span><br></pre></td></tr></table></figure></p><p>where filename is a file name that may or may not exist. If there are more arguments, then the usage error message from lite is:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: ./lite <span class="string">[filename]</span></span><br></pre></td></tr></table></figure></p><p>The square brackets indicate that filename is optional.</p><h3 id="Examples-of-Use"><a href="#Examples-of-Use" class="headerlink" title="Examples of Use"></a>Examples of Use</h3><p>When lite is waiting for user input it uses the prompt ‘?’. When text is printed, each line is preceded by its line number. The current line number is indicated by an arrow.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><p>The user can start up the editor without a file name, print the help command and then quit.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite</span><br><span class="line">? h</span><br><span class="line">Commands are (in upper <span class="built_in">or</span> lower case):</span><br><span class="line">        q:      <span class="keyword">quit</span></span><br><span class="line">        <span class="variable">s:</span>      save</span><br><span class="line">        <span class="keyword">x</span>:      force <span class="keyword">exit</span></span><br><span class="line">        <span class="keyword">f</span> <span class="symbol">&lt;filename&gt;</span>: the <span class="keyword">file</span> <span class="keyword">is</span> called <span class="symbol">&lt;filename&gt;</span></span><br><span class="line">        h:      <span class="keyword">print</span> this <span class="keyword">help</span> message</span><br><span class="line">        d:      <span class="keyword">delete</span> current <span class="built_in">line</span></span><br><span class="line">        <span class="variable">a:</span>      <span class="keyword">append</span> after current <span class="built_in">line</span>, terminated by <span class="string">'.'</span></span><br><span class="line">        i:      <span class="keyword">insert</span> before current <span class="built_in">line</span>, terminated by <span class="string">'.'</span></span><br><span class="line">        <span class="keyword">p</span>:      <span class="keyword">print</span> <span class="keyword">all</span> lines</span><br><span class="line">        .:      <span class="keyword">print</span> current <span class="built_in">line</span></span><br><span class="line">        +:      increment <span class="built_in">line</span> <span class="built_in">and</span> <span class="keyword">print</span></span><br><span class="line">        <span class="symbol">&lt;return&gt;</span>: same <span class="keyword">as</span> <span class="string">'+'</span></span><br><span class="line">        -:      decrement <span class="built_in">line</span> <span class="built_in">and</span> <span class="keyword">print</span></span><br><span class="line">        <span class="keyword">number</span>: <span class="keyword">make</span> <span class="string">'number'</span> the current <span class="built_in">line</span></span><br><span class="line">? q</span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><p>In the next example, if the file Mackellar.txt contains the text<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">I love a sunburnt country,</span><br><span class="line">A land <span class="keyword">of</span> sweeping plains,</span><br><span class="line"><span class="keyword">Of</span> ragged mountain ranges,</span><br><span class="line"><span class="keyword">Of</span> droughts <span class="keyword">and</span> flooding rains.</span><br><span class="line">I love her <span class="keyword">far</span> horizons,</span><br><span class="line">I love her jewel-sea,</span><br><span class="line">Her beauty <span class="keyword">and</span> her terror -</span><br><span class="line">The wide brown land <span class="keyword">for</span> me!</span><br></pre></td></tr></table></figure></p><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h4><p>In the next example, the user steps down an existing C program to a particular line, deletes the line and inserts a new line.<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite hw.c</span><br><span class="line">Existing file <span class="string">"hw.c"</span></span><br><span class="line">? p</span><br><span class="line">---&gt;   <span class="number">1</span>: <span class="meta">#<span class="meta-keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">2</span>: <span class="meta">#<span class="meta-keyword">define</span> NUMBER <span class="number">10</span></span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">3</span>: <span class="keyword">int</span> main(void) &#123;</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">4</span>:    <span class="keyword">int</span> i<span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">5</span>:    <span class="keyword">for</span> (i=<span class="number">0</span><span class="comment">; i&lt;NUMBER; i++) &#123;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">6</span>:       printf(<span class="string">"hello, world!\n"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">7</span>:    &#125;</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">8</span>:    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">9</span>: &#125;</span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">2</span>: <span class="meta">#<span class="meta-keyword">define</span> NUMBER <span class="number">10</span></span></span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">3</span>: <span class="keyword">int</span> main(void) &#123;</span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">4</span>:    <span class="keyword">int</span> i<span class="comment">;</span></span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">5</span>:    <span class="keyword">for</span> (i=<span class="number">0</span><span class="comment">; i&lt;NUMBER; i++) &#123;</span></span><br><span class="line">? +</span><br><span class="line">---&gt;   <span class="number">6</span>:       printf(<span class="string">"hello, world!\n"</span>)<span class="comment">;</span></span><br><span class="line">? d</span><br><span class="line">---&gt;   <span class="number">6</span>:    &#125;</span><br><span class="line">? i</span><br><span class="line">      printf(<span class="string">"goodbye, world!\n"</span>)<span class="comment">;</span></span><br><span class="line">.</span><br><span class="line">? p</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">1</span>: <span class="meta">#<span class="meta-keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">2</span>: <span class="meta">#<span class="meta-keyword">define</span> NUMBER <span class="number">10</span></span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">3</span>: <span class="keyword">int</span> main(void) &#123;</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">4</span>:    <span class="keyword">int</span> i<span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">5</span>:    <span class="keyword">for</span> (i=<span class="number">0</span><span class="comment">; i&lt;NUMBER; i++) &#123;</span></span><br><span class="line">---&gt;   <span class="number">6</span>:       printf(<span class="string">"goodbye, world!\n"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">7</span>:    &#125;</span><br><span class="line"><span class="keyword">Line</span>   <span class="number">8</span>:    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">Line</span>   <span class="number">9</span>: &#125;</span><br><span class="line">? s</span><br><span class="line">Saving file <span class="string">"hw.c"</span></span><br><span class="line">? q</span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><p>Note that it would have been faster, of course, to have typed in the line number, 6, rather than step down line by line.</p><h4 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h4><p>In the final example, the user starts the editor up, does a print to check that there is no text, inserts a poem from Banjo Paterson, does another print, sets the file name to Banjo.txt, saves the text and quits.<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite</span><br><span class="line">? p</span><br><span class="line">Empty <span class="built_in">file</span></span><br><span class="line">? i</span><br><span class="line">A land <span class="keyword">of</span> sombre, silent hills, <span class="keyword">where</span> mountain cattle go</span><br><span class="line">By twisted tracks, <span class="keyword">on</span> sidelings steep, <span class="keyword">where</span> giant gumtrees grow</span><br><span class="line">And <span class="keyword">the</span> wind replies, <span class="keyword">in</span> <span class="keyword">the</span> river oaks, <span class="keyword">to</span> <span class="keyword">the</span> song <span class="keyword">of</span> <span class="keyword">the</span> stream <span class="keyword">below</span>. </span><br><span class="line">.</span><br><span class="line">? p</span><br><span class="line">Line   <span class="number">1</span>: A land <span class="keyword">of</span> sombre, silent hills, <span class="keyword">where</span> mountain cattle go</span><br><span class="line">Line   <span class="number">2</span>: By twisted tracks, <span class="keyword">on</span> sidelings steep, <span class="keyword">where</span> giant gumtrees grow</span><br><span class="line"><span class="comment">---&gt;   3: And the wind replies, in the river oaks, to the song of the stream below. </span></span><br><span class="line">? f Banjo.txt</span><br><span class="line">Creating <span class="built_in">file</span> <span class="string">"Banjo.txt"</span></span><br><span class="line">? s</span><br><span class="line">Saving <span class="built_in">file</span> <span class="string">"Banjo.txt"</span></span><br><span class="line">? q</span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><h4 id="Example-5"><a href="#Example-5" class="headerlink" title="Example 5"></a>Example 5</h4><p>Note that a quit is not possible if the user has changed the file in any way. For example:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite</span><br><span class="line">? <span class="built_in">i</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">.</span><br><span class="line">? <span class="built_in">s</span></span><br><span class="line"><span class="keyword">No</span> filename. <span class="keyword">Use</span> '-f &lt;name&gt;' command</span><br><span class="line">? <span class="built_in">q</span></span><br><span class="line">Cannot quit <span class="keyword">as</span> <span class="keyword">file</span> has changed. <span class="keyword">Use</span> 'x' to force <span class="keyword">exit</span></span><br><span class="line">? f FRED.txt</span><br><span class="line">Creating <span class="keyword">file</span> <span class="string">"FRED.txt"</span></span><br><span class="line">? <span class="built_in">s</span></span><br><span class="line">Saving <span class="keyword">file</span> <span class="string">"FRED.txt"</span></span><br><span class="line">? <span class="built_in">q</span></span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><p>In this example, the user could have instead used an ‘x’ command to leave the editor without saving.</p><h4 id="Example-6"><a href="#Example-6" class="headerlink" title="Example 6"></a>Example 6</h4><p>You cannot step beyond the last line or the first line in the buffer:<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">prompt$ ./lite Mackellar.txt</span><br><span class="line">Existing <span class="keyword">file</span> <span class="string">"Mackellar.txt"</span></span><br><span class="line">? p</span><br><span class="line"><span class="comment">---&gt;   1: I love a sunburnt country,</span></span><br><span class="line"><span class="literal">Line</span>   <span class="number">2</span>: A land <span class="keyword">of</span> sweeping plains,</span><br><span class="line"><span class="literal">Line</span>   <span class="number">3</span>: <span class="keyword">Of</span> ragged mountain ranges,</span><br><span class="line"><span class="literal">Line</span>   <span class="number">4</span>: <span class="keyword">Of</span> droughts <span class="keyword">and</span> flooding rains.</span><br><span class="line"><span class="literal">Line</span>   <span class="number">5</span>: I love her far horizons,</span><br><span class="line"><span class="literal">Line</span>   <span class="number">6</span>: I love her jewel-sea,</span><br><span class="line"><span class="literal">Line</span>   <span class="number">7</span>: Her beauty <span class="keyword">and</span> her terror -</span><br><span class="line"><span class="literal">Line</span>   <span class="number">8</span>: The wide brown land <span class="keyword">for</span> me!</span><br><span class="line"><span class="literal">Line</span>   <span class="number">9</span>: </span><br><span class="line"><span class="literal">Line</span>  <span class="number">10</span>: <span class="string">"My Country"</span></span><br><span class="line"><span class="literal">Line</span>  <span class="number">11</span>: Poem by Dorothea Mackellar</span><br><span class="line"><span class="literal">Line</span>  <span class="number">12</span>: (<span class="number">1885</span><span class="comment">--1968)</span></span><br><span class="line">? <span class="number">123</span></span><br><span class="line"><span class="literal">Line</span> number does <span class="keyword">not</span> exist: command ignored</span><br><span class="line">? -</span><br><span class="line"><span class="comment">---&gt;   1:I love a sunburnt country,</span></span><br><span class="line">? -</span><br><span class="line"><span class="comment">---&gt;   1:I love a sunburnt country,</span></span><br><span class="line">? -</span><br><span class="line"><span class="comment">---&gt;   1:I love a sunburnt country,</span></span><br><span class="line">? <span class="number">12</span></span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? </span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? +</span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? +</span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? +</span><br><span class="line"><span class="comment">---&gt;  12:(1885--1968)</span></span><br><span class="line">? q</span><br><span class="line">bye</span><br><span class="line">prompt$</span><br></pre></td></tr></table></figure></p><h3 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h3><p>Do not try to write the whole program at once. Break the development into pieces of functionality and implement the easiest first.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>You may use fixed-length arrays to read a line of text from stdin:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define LINELENGTH  1000  // max length of a line</span></span><br><span class="line"><span class="keyword">and</span> <span class="built_in">to</span> <span class="built_in">read</span> <span class="keyword">a</span> filename <span class="keyword">or</span> <span class="keyword">an</span> editor <span class="keyword">command</span>:</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FNAMELENGTH 100   <span class="comment">// max length of a file name</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMDLENGTH   102   <span class="comment">// max length of a command (e.g.'f' + ' ' + filename)</span></span></span><br></pre></td></tr></table></figure><p>However, you should use the heap to store the lines in the linked list. The nodes in the linked list, each storing one line of text, may be quite simple:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">node</span> &#123;</span></span><br><span class="line">   <span class="keyword">char</span> *data;         <span class="comment">// a line of text</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Line;</span><br></pre></td></tr></table></figure><p>but you may place more data in this data structure if you wish.</p>]]></content>
    
    <summary type="html">
    
      代写实现一个文本编辑器，用单链表实现。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>COMP225-ProcessManager-Scanner</title>
    <link href="https://tk1307993.coding.me/COMP225-ProcessManager-Scanner.html"/>
    <id>https://tk1307993.coding.me/COMP225-ProcessManager-Scanner.html</id>
    <published>2019-12-18T02:33:45.000Z</published>
    <updated>2019-12-18T02:36:15.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The main objectives of this assignment are:</p><ul><li>to practise software project management (Agile);</li><li>to gain experience in using version control systems (git);</li><li>to gain experience in reading code documentation;</li><li>to gain experience in writing code documentation;</li><li>to gain experience in designing unit and integration tests.</li></ul><p>Note This assignment specification aims to provide as complete a description of this assessment task as possible. However, as with any specification, there will always be things we should have said that we have left out and areas in which we could have done a better job of explanation. As a result, you are strongly encouraged to ask any questions of clarification you might have, either by raising them during a lecture or by posting them on the iLearn discussion forum devoted to this assignment.</p><h3 id="The-Specification"><a href="#The-Specification" class="headerlink" title="The Specification"></a>The Specification</h3><p>In Assignment 1, You have developed a small library, in Java. This library contains a class, ProcessManager, that provides an interface to perform simple interactions 1 other programs, typically shell scripts, not necessarily written in Java. The objective of Assignment 2 is to extend the functionalities of the ProcessManager class to more complex interactions.</p><p>For this assignment, you may have to look some concepts up (e.g. regular expressions, prompt) as part of a self learning practice. The emphasis in this task is on:</p><ul><li>understanding the problem to be solved and writing a formal specification;</li><li>understanding what Java libraries offer and how to use them;</li><li>documenting your code so that other developers can use it;</li><li>writing tests for your code;</li><li>developing the software as a Agile project;</li></ul><h3 id="Sprint-4"><a href="#Sprint-4" class="headerlink" title="Sprint 4"></a>Sprint 4</h3><p>Useful Concept for this sprint: Scanner (Java)</p><p>In this sprint, you have to implement a send and an expect method in the</p><p>ProcessManager class (the interfaces of the methods are provided in Program 1).</p><h3 id="Program-1-Expect-method"><a href="#Program-1-Expect-method" class="headerlink" title="Program 1: Expect method"></a>Program 1: Expect method</h3><p>The send method specification is simple:</p><ul><li>the argument is a String s,</li><li>the send method should send s to the process managed by the instance of the ProcessManager.</li><li>it should return true if the string could be sent, or false if a problem occurred while sending s. The expect method specification is as follows:</li><li>the arguments are a timeout (duration) and a prompt which is given as a regular expression (Pattern in Java);</li><li>the method returns:</li><li>the string w if the process managed by the instance of the ProcessManager produces w followed by the prompt on its output channel before the timeout;</li><li>throw a timeout exception otherwise.</li></ul><p>A simple use case of expect in a Java program on a Unix system is:</p><ul><li>you spawn a process that is going to ‘ssh’ to a remote machine.</li><li>the process should return a prompt which is the string “password” (a simple regular expression);</li><li>when you have seen the prompt on the output channel, you can send your password (string) and the next prompt you should expect is the terminal prompt on the target machine.</li><li>if the prompt does not appear on the output channel, an error occured.</li><li>In this sprint, you have to implement the expect and send methods and write some tests to ensure that the methods do what they are supposed to do. In this sprint you may assume that expect is called only once and then the process terminates. You will need to import the following package in the ProcessManager.java file.</li></ul><p>After that you have to make sure that the expect method can be used many times in an instance of a ProcessManager. The previous use case can be extended.</p><p>You have to modify, if needed, your implementations of expect and send to be able to interact with a managed process in a way similar to the scenario described above.</p><p>You also have to write some tests to ensure that your implementation does what it is supposed to do. We strongly encourage you to split the work as follows: one group member is in charge of writing the tests and if needed refine the specification; the other member adapts the implementations of expect and send to make sure the tests pass.</p>]]></content>
    
    <summary type="html">
    
      接着之前的管理进程的library继续实现功能，这次需要实现拉起进程的功能。此外这门课其实考察的不是代码，而是熟悉整个软件开发流程。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CMPT310-Artificial-Intelligence-Survey</title>
    <link href="https://tk1307993.coding.me/CMPT310-Artificial-Intelligence-Survey.html"/>
    <id>https://tk1307993.coding.me/CMPT310-Artificial-Intelligence-Survey.html</id>
    <published>2019-12-15T04:28:40.000Z</published>
    <updated>2019-12-15T04:30:30.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This assignment deals with an offline navigation problem. In the general case, search would be on a directed, labelled graph. Here we make a number of simplifying assumptions. An agent is given an n × n grid, with co-ordinates in the range 0,…,n - 1. For the most part, each position (i, j) is connected to its immediate neighbours; i.e. to (i, j + 1), (i, j − 1), (i + 1, j), and (i − 1, j), provided no index goes outside the grid’s boundary. However, some connections are blocked, and a path will have to go around them. Your program is to take a pair of points, say (s(x), s(y)) and (g(x) , g(y)), and find a shortest path from the first point to the second.</p><p>There are two parts to the assignment. For both parts, assume that you are give the scenario as in the figure: The grid is 18 × 18, with co-ordinates running from (0, 0) to (17, 17). There are two obstacles, and the following co-ordinate points are inaccessible:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">7</span>, <span class="number">5</span>), (<span class="number">7</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">7</span>), (<span class="number">7</span>, <span class="number">8</span>), (<span class="number">7</span>, <span class="number">9</span>) and</span><br><span class="line">(<span class="number">10</span>, <span class="number">13</span>), (<span class="number">11</span>, <span class="number">13</span>), (<span class="number">12</span>, <span class="number">13</span>), (<span class="number">13</span>, <span class="number">13</span>), (<span class="number">14</span>, <span class="number">13</span>), (<span class="number">15</span>, <span class="number">13</span>), (<span class="number">15</span>, <span class="number">12</span>).</span><br></pre></td></tr></table></figure></p><p>So, for example, a path cannot go through (7, 5). You do not need to handle arbitrary board configurations, so it’s ok to hard code the example in your program.</p><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>For this part, ignore the letters “a”-“d” in the figure. Write a program that determines the shortest path between any two points. While you can chose your language for the assignment, it must be one of the ones commonly used in the School – i.e. C/C++, Python, or Java. Justify your choice of search strategy. Make sure that you test you program with start point (0, 0) and goal (17, 17); carry out any other testing that you feel is necessary to illustrate that your program does what it’s supposed to do.</p><p>Your program should output:</p><ul><li>The length of the shortest path.</li><li>The shortest path.</li><li>The total number of nodes placed on the fringe (frontier).</li><li>Anything else you think may be helpful.<h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3>In this part you want to find a path that is not necessarily optimal, but uses a search that is expected to be more efficient. (So here we’re going to trade off optimality for speed.)</li></ul><p>A common scheme to improve search in such a setting is to choose a number of “landmarks”, and precompute the paths between adjacent landmarks. The landmark graph then becomes another, higher-level representation for the search. Then the general search algorithm could be something like:</p><ul><li>Find the shortest path from the start position to the nearest landmark</li><li>Find the shortest path from the goal position to the nearest landmark</li><li>Add in the precomputed path between the two landmarks.</li></ul><p>However, you need to be careful, since it may be more efficient to go directly between the start and goal states, rather than going through any landmarks.</p><p>In the figure, landmarks are at the points labelled “a”, “b”, “c”, and “d”, at (5, 12), (12, 12), (5, 5), and (12, 5). Since there are only 4 landmarks, the shortest path between all landmarks (there are 6 of them) can be precomputed. You can do this by hand, or you can use your program in Part 1 to find them. Again in your testing you should find a path from (0, 0) to (17, 17), and you should output:</p><ul><li>The length of the shortest path.</li><li>The shortest path (although you do not need to output the path between landmarks).</li><li>The number of nodes on the fringe.</li><li>Anything else you think may be helpful.</li></ul><p>Please fully comment and document your programs, and discuss the heuristics used along with any other interesting features of your programs. As well, include a README file that describes how to run your programs.</p>]]></content>
    
    <summary type="html">
    
      代写AI的经典最小路径的问题，算法用A*即可快速求出最小路径。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CSE1100-WordLink</title>
    <link href="https://tk1307993.coding.me/CSE1100-WordLink.html"/>
    <id>https://tk1307993.coding.me/CSE1100-WordLink.html</id>
    <published>2019-12-13T01:30:28.000Z</published>
    <updated>2019-12-13T01:33:22.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The aim of this assignment is to practise analysing a problem in an object-oriented manner, and designing and implementing an object-oriented solution.</p><p>Problem Description<br>WordLink is an English vocabulary game for two players. Players are required to present English words in turns, and the first character of the word must be the same as the last character of the previous word. For example, while player A and player B are playing the game, if A presents the word “grass”, then B has to give a word starting with ‘s’ which is the last character of “grass”. If B presents “sunny”, then A needs to supply a word starting with ‘y’. A word cannot be used twice in one game. The game can continue until one of the players loses. There are four scenarios in which a player loses the game.</p><ol><li>the player cannot find a word to continue the game.</li><li>the player has presented a word which starts with a different character.</li><li>the player has supplied a repeated word.</li><li>the spelling of the word is incorrect<br>In any case, if one player is lost, then the other player wins the game. A number of examples of the game are listed as below.</li></ol><p>Example 1:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Player A) <span class="string">"grass"</span> – (Player <span class="keyword">B) </span><span class="string">"sunny"</span> – (A) <span class="string">"yellow"</span> – (<span class="keyword">B) </span><span class="string">"world"</span> – (A) <span class="string">"dog"</span> – (<span class="keyword">B) </span><span class="string">"grass"</span></span><br><span class="line"><span class="symbol">The</span> game is ended <span class="keyword">and </span>Player A wins.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Player A) <span class="string">"grass"</span> – (Player <span class="keyword">B) </span><span class="string">"sunny"</span> – (A) <span class="string">"yellow"</span> – (<span class="keyword">B) </span><span class="string">"world"</span> – (A) <span class="string">"dog"</span> – (<span class="keyword">B) </span><span class="string">"out"</span></span><br><span class="line"><span class="symbol">The</span> game is ended <span class="keyword">and </span>Player A wins.</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Player A) <span class="string">"grass"</span> – (Player <span class="keyword">B) </span><span class="string">"sunny"</span> – (A) <span class="string">"yellow"</span> – (<span class="keyword">B) </span><span class="string">"world"</span> – (A) <span class="string">"doog"</span></span><br><span class="line"><span class="symbol">The</span> game is ended <span class="keyword">and </span>Player <span class="keyword">B </span>wins.</span><br></pre></td></tr></table></figure></p><p>In this assignment, you are required to build a program that plays WordLink with a kindergarten pupil. The pupil is player A and your program acts as player B.</p><p>A text file ( dictionary.txt ) containing a set of English words will be provided. You can assume that dictionary.txt contains all English words that a kindergarten pupil may know. Words to be used in playing the game must be selected from the set.</p><p>Each game should start by letting player A enter a word. Your program then needs to validate the word (ie. if the word is included in dictionary.txt ). If the word is invalid, then the game is terminated and your program (player B) wins; otherwise your program needs to search the dictionary to find and enter a proper word. Your program will then let player A to type a word to continue the game. This can go back and forth a number of times till either your program or player A wins.</p><h3 id="Functional-and-Non-functional-Requirements"><a href="#Functional-and-Non-functional-Requirements" class="headerlink" title="Functional and Non-functional Requirements"></a>Functional and Non-functional Requirements</h3><p>Your program must satisfy the following functional and non-functional requirements.</p><h3 id="Menu-Driven"><a href="#Menu-Driven" class="headerlink" title="Menu Driven"></a>Menu Driven</h3><p>The program should be menu driven. It displays the menu displayed as Figure 1 at the start, and waits for the player to choose a function.<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WordLink</span><br><span class="line">A. set the difficulty level</span><br><span class="line">B. display the dictionary</span><br><span class="line">C. insert a word to the dictionary</span><br><span class="line">D. play the game</span><br><span class="line">E. <span class="keyword">exit</span></span><br><span class="line">Select a <span class="keyword">function</span> from the menu :</span><br></pre></td></tr></table></figure></p><p>If A is selected, it allows the player to set a difficulty level.<br>If B is selected, it displays all words in the dictionary.<br>If C is selected, it inserts a new word into the dictionary.<br>If D is selected, it starts playing the game.<br>If E is selected, it saves all changes to dictionary.txt, and terminates the program execution.</p><h3 id="Set-the-difficulty-level"><a href="#Set-the-difficulty-level" class="headerlink" title="Set the difficulty level"></a>Set the difficulty level</h3><p>Your program should provide two difficulty levels for the games - level 1 and level 2. For the player, level 2 is more difficult than level 1. This is because all words in dictionary.txt can be selected for playing at level 2, while level 1 games only use those level 1 words in the text file. At the start of your program execution, the difficulty level is 1 by default.</p><p>If the player chooses to set the difficulty level, your program should prompt the player and wait for an integer (1 or 2) input. The difficulty level is then set up.</p><h3 id="Display-the-dictionary"><a href="#Display-the-dictionary" class="headerlink" title="Display the dictionary"></a>Display the dictionary</h3><p>If this function is selected, your program displays on the monitor all words in the dictionary (including those being added). It displays words level by level with lower level at the front. Within each level, words are displayed alphabetically in an ascending order. They should be displayed 7 words in a line and 5 lines for a screen. The player can press any key to display the next screen.</p><h3 id="Insert-a-word-to-the-dictionary"><a href="#Insert-a-word-to-the-dictionary" class="headerlink" title="Insert a word to the dictionary"></a>Insert a word to the dictionary</h3><p>The player can insert a new word into the dictionary. To insert a new word, the player needs to provide the word and the difficulty level. Your program must check to ensure the absence of the word before adding. If the word is existing, then insertion cannot be done and the player should be informed.</p><h3 id="Play-the-game"><a href="#Play-the-game" class="headerlink" title="Play the game"></a>Play the game</h3><p>A game starts by your program prompting the player to enter a word. After a word is entered, your program checks if the word exists in the dictionary. If it isn’t, then the player loses and the game is over. If it is, then your program searches the dictionary and selects the first proper word to continue the game. For instance, if “sad”, “sat”, “saw”, “say”, “sea”, “see”, “she”, “shy”, “sun” are all available for selection, your program chooses the first word which is “sad”.</p><h3 id="The-dictionary"><a href="#The-dictionary" class="headerlink" title="The dictionary"></a>The dictionary</h3><p>After your program is started, it should read from dictionary.txt to create the dictionary. The dictionary in your program must be an array of linked lists shown in Figure 3. Each node represents a word and its level. Words must be sorted alphabetically in an ascending order on the linked list. If a new word is added, then the word with its level must be inserted to the linked list at a proper position.</p><h3 id="Bonus-Task"><a href="#Bonus-Task" class="headerlink" title="Bonus Task"></a>Bonus Task</h3><p>Instead of only being able to play against the computer, add a menu option for a two-player game and implement its functionality.</p><h3 id="Code-Segments"><a href="#Code-Segments" class="headerlink" title="Code Segments"></a>Code Segments</h3><p>Below are code segments that must be included in your program.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DictionaryNode</span> &#123;</span><br><span class="line"><span class="comment">//object of the class represents a single word</span></span><br><span class="line">  <span class="keyword">protected</span> String word; <span class="comment">// word to be stored</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> level; <span class="comment">// level of the word</span></span><br><span class="line">  <span class="keyword">private</span> DictionaryNode next;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DictionaryNode</span>(<span class="params">String _word, <span class="keyword">int</span> _level</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//add your implementation for the constructor</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//add any other attributes or methods if needed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListOfNodes</span> &#123;</span><br><span class="line"><span class="comment">//object of the class represents a linked list of words starting</span></span><br><span class="line"><span class="comment">//with a specific character.</span></span><br><span class="line">  <span class="keyword">private</span> DictionaryNode head = <span class="literal">null</span>; <span class="comment">//head of the linked list</span></span><br><span class="line">  <span class="comment">//add any other attributes or methods if needed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dictionary</span> &#123;</span><br><span class="line"><span class="comment">//object of the class represents the whole dictionery</span></span><br><span class="line">  <span class="keyword">private</span> ListOfNodes[] data;</span><br><span class="line">  <span class="comment">//add any other attributes or methods if needed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Program-Development"><a href="#Program-Development" class="headerlink" title="Program Development"></a>Program Development</h3><p>The following is a suggested breakdown for completing this assignment:</p><h4 id="Task-1-Creating-the-Menu"><a href="#Task-1-Creating-the-Menu" class="headerlink" title="Task 1 Creating the Menu"></a>Task 1 Creating the Menu</h4><p>Create the menu display, collect user’s input and write a method stub for each menu option. Ensure that the correct function is called.</p><h4 id="Task-2-File-Handling"><a href="#Task-2-File-Handling" class="headerlink" title="Task 2 File Handling"></a>Task 2 File Handling</h4><p>In Task 2, you need to consider all issues related to reading the text file (dictionary.txt) to obtain words and their levels. You can simply display contents read from the text file to ensure file reading is correctly conducted.</p><h4 id="Task-3-Defining-Classes"><a href="#Task-3-Defining-Classes" class="headerlink" title="Task 3 Defining Classes"></a>Task 3 Defining Classes</h4><p>In this task, implement major classes for the assignment. This includes the necessary menu and interactions with the player for choosing options etc.</p><h4 id="Task-4-Linked-Lists"><a href="#Task-4-Linked-Lists" class="headerlink" title="Task 4 Linked Lists"></a>Task 4 Linked Lists</h4><p>Implement classes required for linked lists and dictionary. Implement methods (such as insertInOrder, search etc) which are operations associated with the list and any other methods. Thoroughly test your linked list before integrating it into your program.</p>]]></content>
    
    <summary type="html">
    
      代写WordLink这个小游戏。游戏类似成语接龙，只不过换成了使用给定字典中的英文单词接龙。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>CS32555-Star-Car-Rental</title>
    <link href="https://tk1307993.coding.me/CS32555-Star-Car-Rental.html"/>
    <id>https://tk1307993.coding.me/CS32555-Star-Car-Rental.html</id>
    <published>2019-12-11T01:04:23.000Z</published>
    <updated>2019-12-11T01:06:23.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Star Car Rental is an all-Australian, family business and has been since the beginning. It is owned and managed by two generations of the same family. For 50 years it has maintained the low cost formula to provide the clients cheap, but reliable, new hire cars. It has a fleet of around 2,500 new cars available from different offices in different cities. The offices are conveniently located but are set up to keep costs low so it can pass the savings on to the customers. A management group was appointed to develop an up-to-date car rental system and customer service billing system. Your group has won the tender to provide the software component of a computerised car rental and customer service billing system.</p><h3 id="System-Description"><a href="#System-Description" class="headerlink" title="System Description"></a>System Description</h3><p>The customer can get car hire details and request the quotation for a car though phone or internet. After obtaining the quote, the user can proceed with the car booking by supplying credit card details. These details will then be validated and the application will be mailed or emailed after the confirmation of the car rental arrangement to the customer’s chosen mail or email address accordingly. Customers should be able to request a quote for renting a car. To facilitate this they should be able to enter the pick-up and drop-off locations they require, the pick-up and drop-off dates and their age in order to obtain a list of available car types based on those search criteria.</p><p>The search results include details of vehicle types, prices for telephone booking, and prices for online booking. From the displayed search results, the customer should be able to request more detailed information about a particular vehicle type, including vehicle makes and models in the chosen type, the seating capacity, and the luggage capacity. From the displayed search results, the customer should also be able to request the quote for renting a chosen vehicle type. Also from the displayed search results, the customer should also be able to proceed with booking a car. After selecting this option, the customer will be able to check that the details for the rental transaction are correct. Prior to making the booking, the customer will be able to select from a few options including a request for an excess reduction for an additional fee, a protection waiver against cancellation, entry of a promotional code as well as avail special offers.</p><p>The customer will need to be given other important information such as age restrictions, fuel conditions and any other general restrictions, as well as any information on insurance details and pick-up instructions. Still prior to making the booking, the customer will need to enter personal information (such as name, address, telephone number and e-mail address) as well as payment information (credit card details). When processing the booking request, the system will check the completeness and correctness of the customer’s data entry (in particular, the credit card information). After successful validation of entered data, the system will confirm the booking with a rental confirmation number. As an additional confirmation of the booking, an e-mail will be sent to the customer’s e-mail address. To view, change or cancel a car booking, the customer will need the rental number and last name on the booking.</p><p>The company rents cars on basis of car model and standard rate (daily, weekly, weekend, additional kilometre charge). The first 200 km are included in charges for every vehicle. All the cars are four door models with air conditioning and automatic transmission. The categories are:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  Economy (E)       Toyota Yaris <span class="literal">or</span> similar</span><br><span class="line"><span class="number">2.</span>  Star (B)          Toyota Corolla <span class="literal">or</span> similar</span><br><span class="line"><span class="number">3.</span>  Midsize (M)       Holden Cruze <span class="literal">or</span> similar</span><br><span class="line"><span class="number">4.</span>  <span class="literal">Full</span> Size (F)     Toyota Aurion <span class="literal">or</span> similar</span><br><span class="line"><span class="number">5.</span>  Passenger Van(V)  Hyundai iMax <span class="literal">or</span> similar</span><br><span class="line"><span class="number">6.</span>  SUV(S)            Toyota RAV4 <span class="literal">or</span> similar</span><br></pre></td></tr></table></figure></p><p>A weekend is defined from 6:00 PM Friday to 9:00 AM Monday. Any time over one week is computed by prorating the weekly rate.</p><p>Whenever a customer comes to pick up car, he/she has to sign the rental agreement. A rental agreement consists of an agreement number, the customer’s name, type of rate (daily, weekend or weekly), car identification (license number), car price category. It also includes the date, time, and mileage when car leaves and the expected date and time of return. The customer renting the car may not be the driver, and there could be many drivers. For each driver, the following information needs to be captured: full name, birth date, driver’s license number, and state of issue of driver’s license. Information about the third party who may be paying the bill also needs to be captured.</p><p>Returning a car consists of dropping it off. Also the vehicle is rented with a full tank of petrol, and the customer is responsible for refuelling the vehicle. When a vehicle is returned, an amount for petrol is added if the tank is not full. The date, time and mileage when the car is returned are recorded. The car must be inspected for damage. If the collision damage waiver is not accepted at the time of rental, the cost of repair is added to the bill. The car is also inspected to determine the need of minor maintenance. If maintenance is needed, the car is not cleaned up and returned to the rental lot. Instead, it is sent to the shop for needed repairs and maintenance. If the car passes inspection, it is sent to a car wash and then placed on the lot, ready to be rented again.</p><p>A bill is given to the customer if the customer is present. Otherwise, it is mailed to the customer. Often this customer is a third-party payer, such as an insurance company. Payment is made by either cash or credit card. The damage waiver is $8.99 per day. If the customer accepts this, there is no charge for physical damage to the vehicle. If the customer declines this, an insurance policy with a $1000.00 deductible applies to body damage. The deposit is either paid in cash or charged to the credit card. A $1000.00 deposit is collected at time of rental. It is either cash or a charged to the credit card. Late returns incur a penalty. There is a two-hour grace period on a daily and weekend rental. There is a four-hour grace period on a weekly rental. After that another day is charged. A weekly rental turned in early will be computed as a daily rental unless the weekly rate is still cheaper. Star Car Rental also has special offers every week in terms of free vehicle upgrade, great one way deals as well as $50 off on rentals of three weekend days.</p><h3 id="Deadlines-and-deliverables"><a href="#Deadlines-and-deliverables" class="headerlink" title="Deadlines and deliverables"></a>Deadlines and deliverables</h3><p>The items to hand in, the date to hand them in, and the marks for each part, are shown below. The estimated workload for all parts, for each person on the team, is about 36-50 hours. The actual workload may vary by a factor of three due to individual variation.</p><h3 id="Use-Case-Diagram"><a href="#Use-Case-Diagram" class="headerlink" title="Use Case Diagram"></a>Use Case Diagram</h3><p>Identify all the use cases mentioned in the system description and draw a use case diagram, with all use case relationships. It has an expected workload of 8 hours for each group member. There can be approximately 15-20 use cases selected from this system description.</p><h3 id="Use-Case-Descriptions"><a href="#Use-Case-Descriptions" class="headerlink" title="Use Case Descriptions"></a>Use Case Descriptions</h3><p>Describe 3 use cases using the format described in the lecture notes, showing all details for each use case; describe any included or extended tasks that are required by the stated use cases. It has an expected workload of 3 hours for each group member. Each use case should require at most 3 pages of text, and some may take less than one page.</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>Design a design class diagram which shows, for each class in the system, the class name and attributes, plus the class associations, multiplicities and operations. Include any inheritance relations. It has an expected workload of 10 hours for each group member.</p><h3 id="Sequence-Diagram"><a href="#Sequence-Diagram" class="headerlink" title="Sequence Diagram"></a>Sequence Diagram</h3><p>Draw 3 sequence diagram which show all messages (method calls) between classes, including any parameters, and any value returned from a method call. It shows all selection, iteration, and object creation and / or destruction. It has an expected workload of 5 hours for each group member.</p><h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><p>Write Java code for 3 methods (getters, setters and constructors will not be considered as methods for Assignment marking) of any one class or different classes in the class diagram. It has an expected workload of 10 hours for each group member.</p><h3 id="Dialog-Design"><a href="#Dialog-Design" class="headerlink" title="Dialog Design"></a>Dialog Design</h3><p>Each group has to design dialog for only three use cases. The dialog design consists of two parts:</p><ul><li>A set of screen layouts, that define the data input to and displayed on each screen.</li><li>The transitions between the screens. The diagram shows a set of screen icons, the transitions between them, and the user action that creates each transition.</li></ul><h3 id="Entity-Relationship-Diagram"><a href="#Entity-Relationship-Diagram" class="headerlink" title="Entity Relationship Diagram"></a>Entity Relationship Diagram</h3><p>Draw an Entity-Relationship diagram, which shows appropriate entities, relationships and cardinalities. It has an expected workload of 5 hour for each group member.</p>]]></content>
    
    <summary type="html">
    
      代写一个Java的租车应用程序大作业，最终程序需要带GUI界面，工作量不小。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="MVC" scheme="https://tk1307993.coding.me/tags/MVC/"/>
    
      <category term="Swing" scheme="https://tk1307993.coding.me/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>INFO1105-Prefix-Map</title>
    <link href="https://tk1307993.coding.me/INFO1105-Prefix-Map.html"/>
    <id>https://tk1307993.coding.me/INFO1105-Prefix-Map.html</id>
    <published>2019-12-05T11:28:36.000Z</published>
    <updated>2019-12-05T11:31:28.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>In this assignment each student (individually) will write a class that could form part of a collection library. The intended domain of application is in bioinformatics, where parts of someone’s DNA can be represented as strings where each character is one of A, C, G and T; for example “GATTACA”. The collection consists of keys, each of which is a string that represents a DNA sequence, and each key has an associated value (which is a string that gives some textual information about the sequence, such as its discoverer).</p><p>The code you write must implement a particular interface that we have defined, called PrefixMap. The code that you write must be built according to a particular data structure, called a Trie, that we describe below in more detail.</p><h3 id="The-PrefixMap-interface"><a href="#The-PrefixMap-interface" class="headerlink" title="The PrefixMap interface"></a>The PrefixMap interface</h3><p>The PrefixMap interface has some methods inspired by the usual Map ADT, with some additional methods used to group and select keys based on their prefixes. The interface restricts the set of keys so that each is a string built from the alphabet of four characters A, C, G and T.<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface PrefixMap &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * How many keys are stored in the map</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Get the value corresponding to the key (or null if the key is not found)</span></span><br><span class="line"><span class="comment">   * if the key contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the key is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Insert the value into the data structure, using the given key. If the key</span></span><br><span class="line"><span class="comment">   * already existed, replace and return the old value (otherwise return null)</span></span><br><span class="line"><span class="comment">   * if the key contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the key or value is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span> put(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Remove the value corresponding to the given key from the data structure,</span></span><br><span class="line"><span class="comment">   * if it exists. Return the old value, or null if no value was found.</span></span><br><span class="line"><span class="comment">   * if the key contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the key is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">String</span> remove(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * return the number of keys which start with the given prefix if the prefix</span></span><br><span class="line"><span class="comment">   * contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the prefix is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> countKeysMatchingPrefix(<span class="keyword">String</span> prefix);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * return the collection of keys which start with the given prefix if the</span></span><br><span class="line"><span class="comment">   * prefix contains any character other than A, C, G, T, throw MalformedKeyException</span></span><br><span class="line"><span class="comment">   * if the prefix is null, throw IllegalArgumentException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> List &lt;<span class="keyword">String</span>&gt; getKeysMatchingPrefix(<span class="keyword">String</span> prefix);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Return the number of unique prefixes</span></span><br><span class="line"><span class="comment">   * e.g. if the tree stores keys GAT, GATTC, GATTACA, this method will return 8</span></span><br><span class="line"><span class="comment">   * because the prefixes are G, GA, GAT, GATT, GATTC, GATTA, GATTAC, GATTACA</span></span><br><span class="line"><span class="comment">   * In an uncompressed trie, this is the number of trie nodes, excluding the root</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> countPrefixes();</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Return the sum of the lengths of all keys</span></span><br><span class="line"><span class="comment">   * e.g. if the tree stores keys GAT, GATTC, GATTACA, this method will return 15</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> sumKeyLengths();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Trie-Data-Structure"><a href="#Trie-Data-Structure" class="headerlink" title="Trie Data Structure"></a>Trie Data Structure</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>A Trie (also sometimes called a Prefix Tree), is a type of search tree where instead of storing the keys in each node, instead the path to reach that node defines the key. In data sets where keys often share a common prefix this can be an efficient way to store them, as those common prefixes are only represented once instead of many times. The Trie structure was described in lecture in week 10. In this assignment you will implement a variation of the Trie structure for the case where the keys are made up of only 4 possible characters (A, C, G and T) and the values are arbitrary strings. Thus each Node can have only 4 possible children (one where the next character is A, one where the next character is C, etc), and so we can define a Node class where there is an array of length 4 to hold the references to children Nodes. When we do this, we do not store the character in the Node, instead the character is found by looking at which child of the parent this Node is. Each Node can also hold a value, if the sequence of characters used to reach that position is one of the keys.</p><p>The diagram below shows the data structure storing the following key-value pairs: (G, Suzy), (GAC, Bill), (GAT, Kate), (CG, Fred), (CT, Jane). Notice how the path to the node containing Kate goes from the root to its the third child (corresponding to the character G), then from that node to its first child (corresponding to A), and from that node to its fourth child (T).</p><p>In this assignment you will write the code for a class Assignment which implements the PrefixMap interface, using a Prefix Tree. The full skeleton code for the assignment is<br>available for download on the resources section of Ed.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>You must produce a class called Assignment that is suitable to be in a collection library. It must implement the PrefixMap interface exactly as we have defined that. Your class should contain an appropriate private nested class Node that represents the Node objects in the Trie.</p><p>You are advised to use recursion when writing the methods, but this is not a requirement.</p><h4 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h4><p>You must write a short report:</p><ul><li><p>For each of the interface methods, describe the algorithm used, state the running time of this algorithm in big-Oh notation, and give a brief argument justifying that this cost is correct. You should express the costs in terms of n (the number of key-value pairs in the collection), m (the length in characters of the argument key or prefix), and k (the number of keys that start with the given prefix).</p></li><li><p>Describe how you tested your code. List the test cases you wrote, stating briefly the purpose of each test.</p></li></ul><h4 id="Analysis-of-runtime"><a href="#Analysis-of-runtime" class="headerlink" title="Analysis of runtime"></a>Analysis of runtime</h4><p>This is based on your report. Note that you can gain these marks even if you don’t write any code, as long as you analyse algorithms that you describe which operate on the Trie.</p><ul><li>Pass level: You state the correct big-Oh for majority of public methods, when each is implemented from the algorithm as you described it.</li><li>Distinction level: As for Pass, and also you provide convincing and valid arguments in most cases.</li></ul>]]></content>
    
    <summary type="html">
    
      代写数据结构里面Prefix Map，也就是Trie的实现。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>COMP3023-Kakuro</title>
    <link href="https://tk1307993.coding.me/COMP3023-Kakuro.html"/>
    <id>https://tk1307993.coding.me/COMP3023-Kakuro.html</id>
    <published>2019-12-01T02:19:11.000Z</published>
    <updated>2019-12-01T02:22:56.150Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Submission-details"><a href="#Submission-details" class="headerlink" title="Submission details"></a>Submission details</h3><p>This is a small group project. While the best group size is 4, I will allow groups of 2 or 4, though a group of 4 will be expected to do more to get a high mark. You should attempt to form the groups yourself – please do so by the end of Week 9 of semester and let me know your group members. I will, over the weekend before Monday of Week 10, organise those not in a group into groups, and send emails out to the different group members.</p><p>Eventual assignment submission will be by groups. Ensure only one person does the submission of the assignment per group. The organisation of the marking is difficult enough with groups without having multiple submissions per group to look out for.</p><p>You should ensure all group member’s names and email addresses are part the code files and document files that you submit.</p><p>You should submit:</p><ol><li><p>The Qt project and all associated files. This must include the .pro project file, any .ui form files, and all the .h and .cpp files. Zip these up together.</p></li><li><p>A document stating clearly the features that you have implemented, along with a few screen shots to illustrate these features. If a feature is partially implemented or have problems, please indicate this.</p></li><li><p>Any example Kakuro input files that your program can read.</p></li><li><p>A short document (I don’t want to use the term ‘user manual’ as some of you will interpret this as a formal document) that describes how to use the program. Don’t make this a big part of what you do – enough so that I can easily start up and know how to play with your application. The screen shots you used in the ‘features implemented’ document above can likely be re-used here.</p></li><li><p>For a bonus of up to 5% of the assignment marks (but can’t take your mark above 100%), a video (produced by your phone for example) where you demonstrate the features of your working assignment.</p></li></ol><p>Your assignment will be marked primarily on what works, rather than the details of the code. This is not a User Interface class, so for the advanced features that you implement, while a nice user interface may receive a slightly higher mark (within the grade ranges), you are just starting with using Qt, and using the UI components well is something that develops with experience.</p><h3 id="Overview-of-Kakuro"><a href="#Overview-of-Kakuro" class="headerlink" title="Overview of Kakuro"></a>Overview of Kakuro</h3><p>Kakuro puzzles are similar to crosswords, but instead of letters the digits (from 1 to 9) are used. Instead of clues going across and down, you are given the sum of the values across or down. There is the constraint that the digits 1 to 9 can only be used once in any ‘word’ going across or down. The board’s squares need to be filled in with these digits in order to sum up to the specified numbers. Below is an example Kakuro problem with a 13x13 grid (effectively a 12x12 problem as you need an extra row at the top, and a column at the left, in which to put ‘down’ or ‘across’ clues.</p><p>At any point you can use the down or across clues to deduce some values in the puzzle, and then use these values to help deduce other values.</p><p>For example, in the bottom middle there is the section shown to the right. For the column with sum of 4, the two values have to be 1 and 3 (as 2 and 2 not allowed). The 3 has to be at the top, as if it is at the bottom, then as the bottom ‘across’ adds to 8, the left value will be 5. But then the ‘down’ that sums to 16 does not have a solution, as you can’t have 5+ (value from 1 to 9) that sums to 16. This means that you have to have 3, 1 in the ‘down’ that sums to 4, and 9, 7 in the column that adds to 16: as shown on the<br>left.</p><p>You can try the puzzle online at <a href="http://www.kakuros.com" target="_blank" rel="noopener">www.kakuros.com</a>, which provides an interactive web page to help you play Kakuro.</p><h3 id="The-Assignment"><a href="#The-Assignment" class="headerlink" title="The Assignment"></a>The Assignment</h3><p>In this assignment I would like you to use Qt to develop a program with a graphical user interface to help the user solve Kakuro problems.</p><p>A minimal program that will give you at least a P1 grade should:</p><p>Display the grid for a Kakuro problem – you program should at least display a 13x13 grid, but you can allow the program to display a range of sizes – smaller and possibly larger.</p><ol><li>Allow the user to initialise the Kakuro puzzle. This could be done, for example, by:<ol><li>Reading the information from a text file. Possible formats for the text file will be discussed in a lecture.</li><li>Selecting a cell with the mouse and setting up the problem interactively.</li><li>Generating a random problem (this is one of the possible extensions for a higher grade)</li></ol></li><li>Allow the user to select a grid location and ask that the possible values be determined and displayed in the grid location. Note that if there is only one possible value, you should not make this the grid location’s final value – the user needs to do this (but see extensions below).</li><li>Allow the user to select a value from the possible values displayed in a grid location as the final value. When this occurs, the other grid locations where you have asked for the possible values to be displayed should all be updated to use this additional information.<br>For particularly good implementations of 3 and 4 you can receive a small number of additional marks.</li></ol><p>For a higher grade you need to do more. Below are some possible extensions you can do to your ‘P1’ level program, along with some examples of sensible combinations of extensions that will get you a HD grade.</p><h3 id="Possible-Extensions-to-obtain-a-higher-grade"><a href="#Possible-Extensions-to-obtain-a-higher-grade" class="headerlink" title="Possible Extensions to obtain a higher grade"></a>Possible Extensions to obtain a higher grade</h3><ol><li><p>Highlight cells where there is only one possible value. How you highlight the cell is up to you.</p></li><li><p>Provide an option to calculate and display the possible values for every grid location where the value is not yet specified.</p></li><li><p>Determine if a solution can’t be found using the current values set in the grid - for example by conflicting requirements for down or across values or sums. For example, a ‘down’ clue may require a particular grid location to have a value of (say) 2, but the ‘across’ set of values already has a 2 in it. This means that a wrong choice was made by the user previously.</p></li><li><p>Keep track of changes to the grid values, and allow the user to ‘back-track’ if they have made an error.</p></li><li><p>Keep track of the operations requested by the user to the grid locations, and allow the user to ‘replay’ the way the solution was found (for example, using time delay between ‘steps’, or to use a key or button to ‘step’ forward in the replay. The way you do this is up to you. You will get additional marks for an easy to follow replay of the steps taken.</p></li><li><p>If you do option 5 above, try to automate the finding of a solution. This is not trivial as sometimes you need to consider the possible values of multiple grid positions to determine the correct value of a grid position. You may be able to do a partial automation - do what you can and then let the user set a grid position’s value before continuing on. You should be able to step through the automated solution. This is a hard extension - you can get a good mark for this part for a reasonable attempt.</p></li><li><p>Save a puzzle at any point, along with the information about the steps taken, so that can reload the puzzle and either backtrack or continue from the current set of values.</p></li><li><p>Generate random Kakuro puzzles - generate a random (but reasonable) puzzle ‘boards’, then generate a random ‘solution’ (fill the board consistently with digits 1 to 9), and then generate the appropriate down and across clues.</p></li></ol><p>You can obtain a HD by implementing:</p><ul><li>Extensions 1, 2, 3, 4, or:</li><li>Extensions 4, 5, 6, or:</li><li>Extensions 4, 5, 7, or:</li><li>Extension 1 and 8, or:</li><li>Suggesting an alternative set of extensions to the course coordinator and obtaining approval for this being the goal for achieving a HD.</li></ul><p>Generally, you will need 3 or 4 extensions to get a HD, depending on how hard the extensions are. For reasonably sized extensions, each working extension takes you up a grade (C, D, HD). Some easy extensions (such as 1 and 2 above) are too small to take you up a whole grade, so in the first suggested set of extensions above, 1 and 2 together take you to a Credit grade. Some extensions are difficult, and a reasonable attempt will get you the additional grade. An example of this is extension 6.</p>]]></content>
    
    <summary type="html">
    
      代写一个叫Kakuro的游戏，GUI部分需要用QT来实现。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="QT" scheme="https://tk1307993.coding.me/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>Java-Iterator</title>
    <link href="https://tk1307993.coding.me/Java-Iterator.html"/>
    <id>https://tk1307993.coding.me/Java-Iterator.html</id>
    <published>2019-11-28T00:41:33.000Z</published>
    <updated>2019-11-28T00:42:48.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Assignment-6"><a href="#Assignment-6" class="headerlink" title="Assignment 6"></a>Assignment 6</h1><p>In this assignment, you will create three classes that implement the <code>Iterator&lt;&gt;</code> interface in specialized ways.</p><p>Read through the code provided. You should recognize the interfaces Position, Driver, and Vehicle and their implementations PositionImpl, DriverImpl, and VehicleImpl from Assignment 3. These classes are complete and you should not have to modify them in any way to complete this assignment.</p><h1 id="Novice-10-points"><a href="#Novice-10-points" class="headerlink" title="Novice (10 points)"></a>Novice (10 points)</h1><p>Create a class called <code>ProximityIterator</code> that implements the interface <code>Iterator&lt;Driver&gt;</code>. The constructor for the class should be declared as:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ProximityIterator(Iterable&lt;Driver&gt; driver_pool, <span class="keyword">Position</span> client_position, <span class="built_in">int</span> proximity_limit)</span><br></pre></td></tr></table></figure><p>A ProximityIterator should iterate through all of the Driver objects in the collection that have a Manhattan distance to the provided <code>client_position</code> that is less than or equal to <code>proximity_limit</code>. If <code>next()</code> is called but there is no next eligible driver, throw a <code>NoSuchElementException</code>.</p><p>Tips:</p><ul><li>In your constructor, use the <code>iterator</code> method of the provided driver_pool to create an iterator for all of the Driver objects in the collection. Store this iterator in an instance field.</li><li>Use an instance field to store the next driver that matches the proximity limit. Initialize this to null in your constructor</li><li>To implement hasNext(), first see if you already found the next appropriate driver by checking your next driver field (i.e., testing to see if it is not null). If you already found the next driver, just return true. If not, retrieve drivers from your driver pool iterator until you either find the next appropriate driver or you run out of drivers. If you find an appropriate driver, store it in your next driver instance field and return true. If the pool runs out of drivers, then return false.</li><li>To implement next(), first call hasNext(). If false, throw a NoSuchElementException. If true, then you know that the next eligible driver must be in your next driver instance field. Copy this to a local variable. Reset your next driver field to be null so that you don’t keep returning the same driver. Now return the value of the local variable that you copied the next driver to.</li></ul><h1 id="Adept-5-points"><a href="#Adept-5-points" class="headerlink" title="Adept (5 points)"></a>Adept (5 points)</h1><p>Create a class called <code>ExpandingProximityIterator</code> that implements the interface <code>Iterator&lt;Driver&gt;</code>. The constructor for ths class should be declared as:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ExpandingProximityIterator(Iterable&lt;Driver&gt; driver_pool, <span class="keyword">Position</span> client_position, <span class="built_in">int</span> expansion_step)</span><br></pre></td></tr></table></figure><p>An ExpandingProximityIterator should first iterate through all of the Driver objects in the collect that have a Manhattan distance to the provided <code>client_position</code> that is less than or equal to 1. After all such drivers have been exhausted, the iterator should start at the beginning of the pool and iterate through drivers that have a distance that is greater than one but less than or equal to 1+expansion_step. After all of these drivers have been exhausted, the iterator should start at the beginning of the pool and iterate through drivers that have a distance that is greater then 1+expansion_step but less than or equal to 1+2*expansion_step. After these have been exhausted, go through drivers that are greater than 1+2*expansion_step but less than or equal to 1+3*expansion_step. And so on and so forth until there are no drivers available whatsoever.</p><p>Tips:</p><ul><li>You will need to encapsulate <code>driver_pool</code> as an instance field because you will need to create a new iterator for the pool each time you run out of drivers for a particular “ring” size. </li><li>You will need to detect when you have run out of drivers completely so that hasNext() returns false eventually. There are a couple of different ways to do this. <ul><li>One way is to maintain a boolean flag that is set whenever a driver is encountered that is outside of the current ring while looking for the next driver. Then when you have run out of drivers at the current ring size, you can check this flag to make sure that at least one driver is still outside of the current ring and so you should keep expanding. Be sure to reset the flag each time you expand.</li><li>Another way to do this is to keep a count of the number of times next() has been successfully called. When this count is equal to the size of the driver pool, you know that every driver has been found at some ring size already and that expanding the ring won’t help (i.e., there are no more drivers).</li></ul></li></ul><h1 id="Jedi-5-points"><a href="#Jedi-5-points" class="headerlink" title="Jedi (5 points)"></a>Jedi (5 points)</h1><p>Create a class called <code>SnakeOrderAcrossPoolsIterator</code> that implements the interface <code>Iterator&lt;Driver&gt;</code>. The constructor for this class should be declared as:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public SnakeOrderAcrossPoolsIterator(<span class="built_in">List</span>&lt;<span class="built_in">Iterable</span>&lt;Driver&gt;&gt; driver_pools)</span><br></pre></td></tr></table></figure><p>The constructor to this class is given a List of iterable driver collections. This version of the iterator should retrieve the next driver from each pool in turn in “snake” order. Snake order means first going from first to last and then reversing and going from last to first. For example, let’s say there are 4 iterable collections in the driver_pools list. The first driver retrieved should come from pool 0, followed by the next driver from pool 1, then pool 2, then pool 3, then pool 3 again, then pool 2, then pool 1, then pool 0, then pool 0 again, then pool 1, and so on and so forth. The pools may have a different number of drivers in them. Once a pool runs out of drivers, it is simply skipped over. This iterator will run out of drivers once all of the pools in the list have run out.</p><p>Tips:</p><ul><li>In your constructor, use the list of driver pools provided to create a corresponding list of driver iterators for each pool and store this as an instance field. Keep track of an index into this list for which pool iterator should be used next.</li></ul>]]></content>
    
    <summary type="html">
    
      练习实现Java的迭代器
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundanmental" scheme="https://tk1307993.coding.me/tags/Fundanmental/"/>
    
  </entry>
  
  <entry>
    <title>CS177-Lab-Prep-6</title>
    <link href="https://tk1307993.coding.me/CS177-Lab-Prep-6.html"/>
    <id>https://tk1307993.coding.me/CS177-Lab-Prep-6.html</id>
    <published>2019-11-27T10:10:26.000Z</published>
    <updated>2019-11-27T10:12:55.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-Description"><a href="#Assignment-Description" class="headerlink" title="Assignment Description:"></a>Assignment Description:</h3><p>In this assignment you will write and submit the labprep6.py program. Complete and submit the file by 11:59<br>pm on the night before your lab to receive full credit.</p><h3 id="Python-Graphics-Library"><a href="#Python-Graphics-Library" class="headerlink" title="Python Graphics Library:"></a>Python Graphics Library:</h3><p>Carefully review the Graphics chapter in the Zelle text (Ch 4) covering this topic and the Python Graphics<br>library documentation found at: <a href="http://mcsp.wartburg.edu/zelle/python/graphics/graphics.pdf" target="_blank" rel="noopener">http://mcsp.wartburg.edu/zelle/python/graphics/graphics.pdf</a> before starting Lab<br>Prep 6. If you haven’t already, download the Graphics module graphics.py from Blackboard. Remember that it<br>must be in the same folder as labprep6.py</p><h3 id="Steps-For-This-Assignment"><a href="#Steps-For-This-Assignment" class="headerlink" title="Steps For This Assignment:"></a>Steps For This Assignment:</h3><ol><li>Setup your Python file labprep6.py with an appropriate comments header</li><li>Organize labprep6.py using comments for each block of planned code</li><li>In each block, write the necessary Python code to complete the task</li><li>Save, test, then upload your completed labprep6.py Python program to Blackboard</li></ol><h4 id="TO-DO-1-Setup-Your-Python-Program-File-labprep6-py"><a href="#TO-DO-1-Setup-Your-Python-Program-File-labprep6-py" class="headerlink" title="TO DO #1: Setup Your Python Program File labprep6.py"></a>TO DO #1: Setup Your Python Program File labprep6.py</h4><p>In Python, the # sign indicates a comment, which documents and organizes your code. Python does not<br>execute these commented lines; they are used to make the program easier to understand. In the Python IDLE<br>editor, open a new program window. At the top of the file, create a program header by typing in the following<br>text:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CS 177 – labprep6.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;insert your name, and Purdue ID here&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Following Coding Standards and Guidelines</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;insert a description of the program here&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><h4 id="TO-DO-2-Organize-labprep6-py-with-pseudo-code-comments"><a href="#TO-DO-2-Organize-labprep6-py-with-pseudo-code-comments" class="headerlink" title="TO DO #2: Organize labprep6.py with pseudo code comments"></a>TO DO #2: Organize labprep6.py with pseudo code comments</h4><p>Plan and comment your program. By now, you should have had enough<br>practice to writing good, descriptive pseudo code comments for each<br>section and function.</p><h4 id="TO-DO-3-The-main-Function"><a href="#TO-DO-3-The-main-Function" class="headerlink" title="TO DO #3: The main() Function"></a>TO DO #3: The main() Function</h4><p>Write a Python main() function that takes no arguments and returns no<br>values. This function should create a Graphics Window, of size 500x500<br>pixels. Set the background to light grey. Create a red Square (Rectangle<br>with equal sides measuring 30) in the center of the Graphics Window.<br>An example is shown in Figure 1.</p><h4 id="TO-DO-4-Animating-the-square’s-movement"><a href="#TO-DO-4-Animating-the-square’s-movement" class="headerlink" title="TO DO #4: Animating the square’s movement"></a>TO DO #4: Animating the square’s movement</h4><p>Edit your main() function, so that it now waits for the user to click anywhere within the Graphics window.<br>Once a mouse click is detected, the red square should move from its current location to the location of the<br>mouse click.</p><p>NOTE: To earn full credit, the square should not disappear and reappear to move across the screen – it must<br>appear to move smoothly across the window to the mouse click location. An example of this animation is<br>shown with the Lab Prep 6 assignment on Blackboard.</p><p>HINT: It could be helpful to write a separate function that animates the square which will be called<br>within the main() function after a mouse click.</p><p>The user will be able to click in the Window to move the square five (5) times. After the square reaches the fifth<br>mouse click location, display a Text object in the center of the Window: “Click to Exit”. One additional<br>click closes the Graphics window and ends the program without error messages.</p><h4 id="Save-and-Submit-your-Completed-labprep6-py-File-on-Blackboard"><a href="#Save-and-Submit-your-Completed-labprep6-py-File-on-Blackboard" class="headerlink" title="Save and Submit your Completed labprep6.py File on Blackboard:"></a>Save and Submit your Completed labprep6.py File on Blackboard:</h4><p>Save your program with the file name labprep6.py, and submit it by 11:59 pm on the night before lab.</p>]]></content>
    
    <summary type="html">
    
      使用Python Graphics绘图库完成作业
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Graphics" scheme="https://tk1307993.coding.me/tags/Graphics/"/>
    
      <category term="Fundanmental" scheme="https://tk1307993.coding.me/tags/Fundanmental/"/>
    
  </entry>
  
  <entry>
    <title>IFB104-Print-Your-Own-Periodical</title>
    <link href="https://tk1307993.coding.me/IFB104-Print-Your-Own-Periodical.html"/>
    <id>https://tk1307993.coding.me/IFB104-Print-Your-Own-Periodical.html</id>
    <published>2019-11-26T03:33:32.000Z</published>
    <updated>2019-11-26T03:36:28.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>Hardcopy periodicals such as newspapers, magazines, newsletters, etc. are all in decline as people increasingly turn to online media. Nonetheless, there is still a need for people to access regularly-updated information in an easy-to-read format. Here you will develop a program that produces a customised periodical in HTML format, using data downloaded from the World-Wide Web. The program will have a Graphical User Interface that allows the user to control production of the periodical, which can then be viewed in a standard web browser. Most importantly, your publication will comprise up-to-date data sourced from online “feeds” that are updated on a regular basis. To complete this assignment you will need to: (a) download web pages in Python and use regular expressions to extract particular elements from them, (b) create an HTML file containing the extracted elements, and (c) use Tkinter to provide a simple Graphical User Interface.</p><h3 id="Illustrative-Example"><a href="#Illustrative-Example" class="headerlink" title="Illustrative Example"></a>Illustrative Example</h3><p>For the purposes of this task you have a totally free choice of what kind of periodical to produce. It could be:</p><ul><li>a newspaper</li><li>a current affairs magazine</li><li>a fashion/lifestyle magazine</li><li>a newsletter for online gamers</li><li>a sports journal</li><li>a science and technology review</li><li>etc.</li></ul><p>However, whatever theme you choose, you must be able to find at least four different online web pages that contain regularly-updated stories or articles in different categories under the overall theme. Each such story must contain a heading, a photograph, some text and a publication date. A good source for such data is Rich Site Summary (RSS) web-feed documents. The appendix below lists some such sites, but you are encouraged to find your own of personal interest.</p><p>To demonstrate the idea, we will publish our own newspaper, using data extracted from News Limited’s web site. Our demonstration program allows users to select from several categories, National News, Sports, World News, Business News, Entertainment and Technology. The program then downloads relevant data from the Web and uses it to produce an HTML document which can be read in a standard web browser.</p><p>The screenshot below shows our example solution’s GUI when it first starts.</p><p>The user is invited to select which categories of information they want included in their newspaper. In this case this is done by selecting check buttons, but other solutions are possible. Below the user has selected four news categories of interest.</p><p>When ready the user then presses the button to start “printing” the newspaper (i.e., to create an HTML file containing its contents). The system downloads current data from the web site and generates the file. The user can follow the “printing” process’s progress in the small text window.</p><p>As well as printing the latest top news items in each of the four categories, the system also generates a “masthead” which identifies the periodical.</p><p>Once the file has been created the user can open it in their preferred web browser. Alternatively, pressing the “Read” button in the GUI above will open the file in the host operating system’s default browser.</p><p>The generated document contains the masthead and the current top story in each of the selected categories. It is shown overleaf as viewed in the Firefox browser.</p><p>Above you can see the masthead with the name of the periodical, The Daily Planet in this case, and an image indicating the nature of its contents. (Our fictional newspaper’s slogan and editor are also shown, but these features are optional.)</p><p>Scrolling down in the HTML document shows the current top news item in each of the four selected categories when the program was run. Three of these are shown below, as they were when this demonstration was run. (Some of the images downloaded at this time were small “thumbnails”, hence their blurry appearance when enlarged.)</p><p>Notice that each top news item displayed above contains:</p><ol><li>the category of story;</li><li>the URL where the original data was found;</li><li>the story’s title (headline);</li><li>a photo illustrating the story;</li><li>a short summary of the story; and</li><li>the date and time the story appeared online.</li></ol><p>Most importantly, items 3 to 6 are all extracted “live” from the online web document indicated. This was done by downloading the HTML source and using regular expressions to find the necessary elements needed to construct our own version of the story. The first part of the HTML code generated by our Python program is shown below (as displayed in the Firefox browser).</p><p>Although not intended for human consumption, the generated HTML code is nonetheless laid out neatly, and with comments indicating the purpose of each part.</p><p>To compose our HTML document, Rich Site Summary (RSS) web-feed files are downloaded from the web site. RSS documents are XML files specifically intended to be machine-readable. They have a simple structure that makes it reasonably easy to extract their elements. An example of such a web document as it appears when examined in a web broswer is shown below.</p><p>This was was the source of the data used to produce our National News story shown above. To compose the corresponding page for our newspaper we extracted the latest story’s headline, story text, date and the address of the associated JPEG image. This data was then integrated into our HTML code.</p><p>We also discovered that sometimes the downloaded text contained unusual characters that are not handled properly in Python strings, most notably “smart” quotes, so we replaced these with plain characters before “printing” our newspaper.</p><h3 id="Requirements-and-marking-guide"><a href="#Requirements-and-marking-guide" class="headerlink" title="Requirements and marking guide"></a>Requirements and marking guide</h3><p>To complete this task you are required to develop an application in Python similar to that above, using the provided publisher.py template file as your starting point. Your solution must support at least the following features.</p><p>Generating a masthead<br>Your program must be able to generate an HTML file, publication.html, which begins with a ‘masthead’ identifying the nature of your periodical. When viewed in a web browser, the masthead part of the document must contain at least the following elements:</p><ul><li>The name of the periodical.</li><li>An image evocative of the periodical’s theme.</li></ul><p>The image must be sourced from online (you cannot attach image files to your solution). Since it will never change, the URL for this particular image can be “hardwired” in your Python code. The HTML source generated by your Python program must be laid out neatly.</p><h3 id="Generating-four-stories"><a href="#Generating-four-stories" class="headerlink" title="Generating four stories"></a>Generating four stories</h3><p>Your Python program must be capable of generating at least four distinct “stories” as part of your periodical. Each such story must be derived from a different online web page, and must represent the latest story in a particular category at the time when the program runs. When viewed in a web browser, each story must contain at least the following elements:</p><ul><li>the category of story,</li><li>the URL where the original data was found,</li><li>the story’s title (headline),</li><li>an image illustrating the story,</li><li>a short summary of the story, and</li><li>the date and time the story appeared online.</li></ul><p>The last four of these items must all be extracted from the online document and must all belong together (i.e., you can’t have an image from one story and the headline from another). Each of the elements must be extracted from the original document separately. It is not acceptable to simply copy large chunks of the original document’s source code. The HTML source code generated by your Python program must be laid out neatly.</p><p>The precise visual layout, colour and style of the story elements is up to you and is determined by the design of your generated HTML code. The periodical must be easy to read. No HTML markup tags or other odd characters should appear in any of the text displayed to the user.</p><p>Data on the web changes frequently, so your solution must continue to work even after the web documents you use have been updated. For this reason it is unacceptable to “hardwire” your solution to the particular text and images appearing on the web on a particular day. Instead you will need to use text searching functions and regular expressions to actively find the text and images in the document, regardless of any updates that may have occurred since you wrote your program.</p><h3 id="Code-quality-and-presentation"><a href="#Code-quality-and-presentation" class="headerlink" title="Code quality and presentation"></a>Code quality and presentation</h3><p>Your Python program code must be presented in a professional manner. See the coding guidelines in the IFB104 Code Presentation Guide (on Blackboard under Assessment) for suggestions on how to achieve this. In particular, each significant code segment must be clearly commented to say what it does, e.g., “Create the masthead”, “Extract the first headline from the web page’s source code”, etc.</p><h3 id="Extra-feature"><a href="#Extra-feature" class="headerlink" title="Extra feature"></a>Extra feature</h3><p>Part B of this assignment will require you to make a ‘last-minute extension’ to your solution. The instructions for Part B will not be released until just before the final deadline for Assignment 2.</p><p>You can add other features if you wish, as long as you meet these basic requirements. For instance, in our example above we included a button in the GUI which opened the generated HTML document in the default web browser. We also supported more than four story categories.</p><p>You must complete the task using only basic Python features and the modules already imported into the provided template. In particular, you may not import any local image files. All displayed images and story text must be downloaded from online sources each time your program is run.</p><p>However, your solution is not required to follow precisely our example shown above. Instead you are strongly encouraged to be creative in the your choices of stories to display, the design of your Graphical User Interface, and the design of your periodical.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业比较冷门，用Python来写前端的Web页面，GUI部分需要用Tkinter库来实现。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>CPSC217-Climograph</title>
    <link href="https://tk1307993.coding.me/CPSC217-Climograph.html"/>
    <id>https://tk1307993.coding.me/CPSC217-Climograph.html</id>
    <published>2019-11-24T09:07:22.000Z</published>
    <updated>2019-11-24T09:10:01.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>A climograph is a visual representation of the climate for a location. it shows temperature data using a red line, and precipitation data using blue bars. One temperature point and one precipitation bar are plotted for each month of the year. An example climograph, using climate data from Victoria, BC, is shown below.</p><p>Your program will draw a climograph using data entered by the user. It will begin by drawing the graph components such as the axes, month names and labels. Then it will read 12 precipitation values, one for each month from January to December, and draw the appropriate bars. Your program will conclude by reading 12 temperature values for January through to December and plotting the temperature data.</p><p>Each temperature value will be plotted asa red dot. A red line will connect the dot for each month to the dot for the previous month (except for January).</p><h3 id="Additional-Requirements"><a href="#Additional-Requirements" class="headerlink" title="Additional Requirements"></a>Additional Requirements</h3><p>You must make appropriate use of loops. While it is acceptable to use a long series of statements to place the month names on the graph, the numeric labels for temperatures and precipitation must be displayed using a loop. You must also use loops to read input from the user and draw the precipitation bars / temperature lines. An assignment that uses 24 distinct input statements to read the precipitation and temperature data will receive a grade of D or less, even if everything works perfectly.</p><p>Your program must leave appropriate gaps between the bars.</p><p>Your graph must include small tick marks next to the temperature and rainfall numeric labels, as shown in the sample output.</p><p>Your program should use a temperature scale that ranges from -20 to +20 degrees Celsius, and a precipitation scale that ranges from 0 to 200 millimeters. If you receive a value outside of these ranges you should still plot it - it will just appear above or below the axes.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>You will probably find the dots for the temperature data easier to plot than the bars for the precipitation data. As such, you might want to tackle the dots for temperature data first, even though it is entered after the precipitation data.</p><p>You will probably find the precipitation data easier to plot than the lines for the temperature data. As such, you might want to tackle the precipitation data before trying to draw the lines for the temperature data.</p><p>The temperature data spacing will work out nicely if you represent 1 degree Celsius by 10 pixels.</p><p>The precipitation data spacing will work out nicely if you represent 1 millimeter of precipitation by 2 pixels.</p><p>The spacing will work out nicely if you allocate 50 pixels to each month of the year.</p><p>Every time you run your program you will need to enter 24 data values. You can automate this by using a feature known as l/O redirection, which will allow your program to read the values from a file instead of from the keyboard. For example, to use the values from the file named Calgary.txt instead of reading values from the keyboard, enter the command:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">A3n2</span><span class="selector-class">.py</span> &lt; <span class="selector-tag">Calgary</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>The details of how I/O redirection works aren’t important within the scope of this course. but your ability to use it by following the pattern above will save you a significant amount of typing. Several sample data sets saved in the correct format are available on the course website. Feel free to get as much help as you need on I/O redirection from the Us or instructor.</p><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><p>This assignment will be graded on a combination of functionality and style. A base grade will be determined from the general level of functionality of the program (Does it draw the axes and labels successfully? Does it plot the precipitation data correctly? Does it plot the temperature data correctly?). The base grade will be recorded as a mark out of 12.</p><p>Style will be graded on a subtractive scale from 0 to -3. For example, an assignment which receives a base grade of 12 (A), but has several stylistic problems resulting in a -2 adjustment will receive an overall grade of 10 (3+). Fractional marks will be rounded to the closest integer.</p><h3 id="Individual-Work"><a href="#Individual-Work" class="headerlink" title="Individual Work"></a>Individual Work</h3><p>All assignments in this course are to be completed individually. Students are advised to read the guidelines for avoiding plagiarism located on the course website. Students are also advised that electronic tools may be used to detect plagiarism.</p><h3 id="late-Penalty"><a href="#late-Penalty" class="headerlink" title="late Penalty"></a>late Penalty</h3><p>Late assignments will not be accepted.</p><h3 id="Submission-Instructions"><a href="#Submission-Instructions" class="headerlink" title="Submission Instructions"></a>Submission Instructions</h3><p>Your program must be submitted both on paper and electronically. Paper submissions, consisting of a printed copy of your .py file, should be deposited in the appropriate assignment drop box on the second floor of the math sciences building. Your electronic submission should be submitted to the Assignment 2 drop box in DZL.</p>]]></content>
    
    <summary type="html">
    
      Python的画图类型作业，用给的SimpleGraphics.py库来实现，这个库基于tkinter，但是相比前者要精简许多。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CS3350-Postfix-Expression-Evaluator</title>
    <link href="https://tk1307993.coding.me/CS3350-Postfix-Expression-Evaluator.html"/>
    <id>https://tk1307993.coding.me/CS3350-Postfix-Expression-Evaluator.html</id>
    <published>2019-11-21T15:11:46.000Z</published>
    <updated>2019-11-21T15:14:37.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this homework, you will create and turn in your second program on BGUnix. Please see the documentation below for instructions on obtaining and configuring a BGUnix account.</p><p>Once you have an account, SSH in and join the class by issuing the command:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="class"><span class="keyword">class</span> -<span class="title">join</span> <span class="title">cs3350</span></span></span><br></pre></td></tr></table></figure></p><p>This should create a directory in your home directory named ‘cs3350’. All your work this semester must occur inside this directory (do not create a subdirectory unless the homework specifically requests one). Any required files will be automatically collected from this directory at the due date/time for the assignment!</p><h3 id="Program-Details"><a href="#Program-Details" class="headerlink" title="Program Details"></a>Program Details</h3><p>In this program, you will implement a postfix expression evaluator. See the book and slides for the concrete algorithm you need to implement. You must use stacks (I provide LinkedStack.h/LinkedStack.cpp/StackInterface.h/Node.h/Node.cpp files in the class lib folder!).</p><p>You must provide a hw3.cpp driver file that contains the implementation of the algorithm and a main method that instantiates runs the algorithm. The driver program should:</p><ul><li>Loops, asking the user to provide either a number (can be more than 1 digit!) or an operator (+ - / *)</li><li>Stops the loop when -1 is entered (do not add -1 to the expression!)</li><li>Evaluates the given postfix expression</li><li>Displays the final result of evaluating the postfix expression (on a line by itself - this should be the last line displayed by your program!)</li></ul><h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><p>Your code should include proper documentation/comments where appropriate. A portion of the grade is attributed directly to documentation (see the grading rubric provided on Canvas).</p><p>Functions should be proceeded by a comment block documenting the function’s purpose.</p><p>Blocks of code should contain comments describing what that block is contributing to the overall solution.</p><h3 id="What-to-Turn-In"><a href="#What-to-Turn-In" class="headerlink" title="What to Turn In"></a>What to Turn In</h3><p>The automated turn-in collection script will save these files from your class directory:</p><ul><li>hw3.cpp</li></ul><p>The script will assume the following command line to compile your homework (your code must work with this exact command line!):<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">g</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">-</span><span class="comment">std=c</span><span class="literal">+</span><span class="literal">+</span><span class="comment">11</span> <span class="literal">-</span><span class="comment">Ilib</span> <span class="comment">hw3</span><span class="string">.</span><span class="comment">cpp</span></span><br></pre></td></tr></table></figure></p><p>This assumes that LinkedStack.<em>/StackInterface.h/Node.</em> are in the lib/ directory.</p>]]></content>
    
    <summary type="html">
    
      用Stack代写一个postfix expression evaluator，将数字压入stack，读到expression时弹出即可，属于比较常规的作业。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>COMP9021-Solve-Logical-Puzzles</title>
    <link href="https://tk1307993.coding.me/COMP9021-Solve-Logical-Puzzles.html"/>
    <id>https://tk1307993.coding.me/COMP9021-Solve-Logical-Puzzles.html</id>
    <published>2019-11-16T04:41:57.000Z</published>
    <updated>2019-11-16T04:45:02.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Aim-of-assignment-and-general-description"><a href="#Aim-of-assignment-and-general-description" class="headerlink" title="Aim of assignment and general description"></a>Aim of assignment and general description</h3><p>The aim of the assignment is to analyse English sentences and solve logical puzzles. The assignment will make you work with textual data and reinforce the fundamental programming skills and use of basic data structures that you are expected to have acquired.</p><p>Raymond Smullyan has designed many puzzles involving Knights and Knaves. Knights always tell the truth, whereas Knaves always lie. We refer to Knights and Knaves as Sirs. A puzzle, which is a set of English sentences, involves a finite number of Sirs. Solving the puzzle means:</p><ul><li>determining the names of all Sirs involved in the puzzle;</li><li>determining solutions to the puzzle, where a solution qualifies each Sir as either a Knight or a Knave.<br>Some puzzles have no solution, others have a unique solution, and others have at least 2 solutions. The following is an example of a puzzle with a unique solution.<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">One evening <span class="keyword">as</span> you are out <span class="keyword">for</span> a stroll, you walk <span class="keyword">by</span> a doorway labeled <span class="literal">no</span> normals</span><br><span class="line">allowed. Some people are talking inside. Curious, you listen, <span class="keyword">and</span> you hear Sir</span><br><span class="line">Paul who says: <span class="string">"all of us are Knaves."</span> <span class="string">"Exactly one of us is a Knight,"</span> replies</span><br><span class="line">Sir Jenny. As <span class="keyword">for</span> Sir John, who <span class="keyword">is</span> also inside, he just keeps quiet. Who <span class="keyword">is</span> a</span><br><span class="line">Knight, <span class="keyword">and</span> who <span class="keyword">is</span> a Knave?</span><br></pre></td></tr></table></figure></li></ul><p>The Sirs involved in this puzzle are Sir Jenny, Sir John, and Sir Paul. The unique solution is given by Sir Jenny being a Knight, Sir John being a Knave, and Sir Paul being a Knave.</p><h3 id="Detailed-description"><a href="#Detailed-description" class="headerlink" title="Detailed description"></a>Detailed description</h3><h4 id="Syntax-of-puzzles"><a href="#Syntax-of-puzzles" class="headerlink" title="Syntax of puzzles"></a>Syntax of puzzles</h4><p>A sentence starts with a capital letter and ends in a full stop, an exclamation mark, or a question mark, possibly followed by closing double quotes. Sir, Sirs, Sir names, Knight and Knave always start with a capital letter, and no other word inside a sentence is capitalised. A sentence in a puzzle contains at most one part enclosed between double quotes. When a sentence contains one part enclosed between double quotes, the part outside the double quotes contains a single occurrence of the form Sir Sir_Name, and what occurs between the double quotes is something said by Sir Sir_Name. A sentence that contains no part enclosed between double quotes might refer to a number of Sirs, always in the form Sir Sir_Name, or Sirs Sir_Name_1 and Sir_Name_2, or Sirs Sir_Name_1, Sir_Name_2, . . . and Sir_Name_n, where n ≥ 3, and Sir_Name_1, … , Sir_Name_n are pairwise distinct.</p><p>What is between double quotes is a sentence in one of the following forms, ending in either a comma, a full stop, an exclamation mark, or a question mark:</p><ul><li>At/at least one of Conjunction_of_Sirs/us is a Knight/Knave</li><li>At/at most one of Conjunction_of_Sirs/us is a Knight/Knave</li><li>Exactly/exactly one of Conjunction_of_Sirs/us is a Knight/Knave</li><li>All/all of us are Knights/Knaves</li><li>I am a Knight/Knave</li><li>Sir Sir_Name is a Knight/Knave</li><li>Disjunction_of_Sirs is a Knight/Knave</li><li>Conjunction_of_Sirs are Knights/Knaves</li></ul><p>where:</p><ul><li>Disjunction_of_Sirs is in one of the following forms:<ul><li>Sir_1 or Sir_2</li><li>Sir_1, Sir_2, … or Sir_n (n ≥ 3)</li></ul></li><li>Conjunction_of_Sirs is in one of the following forms:<ul><li>Sir_1 and Sir_2</li><li>Sir_1, Sir_2, … and Sir_n (n ≥ 3)</li></ul></li><li>Sir_1, … , Sir_n are pairwise distinct expressions of the form Sir Sir_Name or I.</li></ul><h3 id="Input-and-output-of-programs"><a href="#Input-and-output-of-programs" class="headerlink" title="Input and output of programs"></a>Input and output of programs</h3><p>Your program will prompt the user for a text file, assumed to be stored in the working directory, that stores the sentences that make up a puzzle. No assumption should be made on the number of English sentences provided as input, nor on the length of a sentence, nor on the length of a Sir name, nor on the number of Sirs involved in the puzzle.</p><p>Your program should:</p><ul><li>output the Sirs involved in the puzzle in lexicographic order;</li><li>output whether or not there is a solution, and in case there is one, whether the solution is unique;</li><li>outputs the solution in case a unique solution exists, with all Sirs being qualified as either Knight or Knave in alphabetical order.</li></ul><h3 id="Sample-outputs"><a href="#Sample-outputs" class="headerlink" title="Sample outputs"></a>Sample outputs</h3><p>Here are a few tests together with the expected outputs. The outputs of your program should be exactly in accordance with the following outputs. Outputs of your program will be matched against expected outputs line for line.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> test1.txt</span><br><span class="line">I have just seen Sirs Sanjay <span class="built_in">and</span> Eleonore!</span><br><span class="line"><span class="string">"I am a Knave,"</span> whispered Sir Eleonore.</span><br><span class="line">Who <span class="keyword">is</span> <span class="keyword">a</span> Knight <span class="built_in">and</span> who <span class="keyword">is</span> <span class="keyword">a</span> Knave?</span><br><span class="line">$ <span class="keyword">python3</span> solve.<span class="keyword">py</span></span><br><span class="line">Which text <span class="keyword">file</span> <span class="keyword">do</span> you want <span class="keyword">to</span> use <span class="keyword">for</span> the puzzle? test1.txt</span><br><span class="line">The Sirs are: Eleonore Sanjay</span><br><span class="line">There <span class="keyword">is</span> <span class="keyword">no</span> solution.</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">cat</span> test2.txt</span><br><span class="line">I have just met Sirs Frank, Paul <span class="built_in">and</span> Nina.</span><br><span class="line">Sir Nina said: <span class="string">"I am a Knight,"</span> but I <span class="keyword">am</span> not sure</span><br><span class="line"><span class="keyword">if</span> that <span class="keyword">is</span> true. What <span class="keyword">do</span> you think?</span><br><span class="line">$ <span class="keyword">python3</span> solve.<span class="keyword">py</span></span><br><span class="line">Which text <span class="keyword">file</span> <span class="keyword">do</span> you want <span class="keyword">to</span> use <span class="keyword">for</span> the puzzle? test2.txt</span><br><span class="line">The Sirs are: Frank Nina Paul</span><br><span class="line">There are <span class="number">8</span> solutions.</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">cat</span> test3.txt</span><br><span class="line">Yesterday, I visited Sirs Andrew <span class="built_in">and</span> Nancy. I asked Sir Andrew</span><br><span class="line">who he was, <span class="built_in">and</span> he answered impatiently: <span class="comment">"Sir Nancy and I</span></span><br><span class="line">are Knaves!<span class="comment">" Then I met Sir Bill who introduced me to his wife</span></span><br><span class="line"><span class="built_in">and</span> told <span class="keyword">me</span>: <span class="comment">"at least one of Sir Hilary</span></span><br><span class="line"><span class="built_in">and</span> I <span class="keyword">is</span> <span class="keyword">a</span> Knave.<span class="comment">" Should I trust them?</span></span><br><span class="line">$ <span class="keyword">python3</span> solve.<span class="keyword">py</span></span><br><span class="line">Which text <span class="keyword">file</span> <span class="keyword">do</span> you want <span class="keyword">to</span> use <span class="keyword">for</span> the puzzle? test3.txt</span><br><span class="line">The Sirs are: Andrew Bill Hilary Nancy</span><br><span class="line">There <span class="keyword">is</span> <span class="keyword">a</span> unique solution:</span><br><span class="line">Sir Andrew <span class="keyword">is</span> <span class="keyword">a</span> Knave.</span><br><span class="line">Sir Bill <span class="keyword">is</span> <span class="keyword">a</span> Knight.</span><br><span class="line">Sir Hilary <span class="keyword">is</span> <span class="keyword">a</span> Knave.</span><br><span class="line">Sir Nancy <span class="keyword">is</span> <span class="keyword">a</span> Knight.</span><br></pre></td></tr></table></figure></p><h3 id="Assessment-and-submission"><a href="#Assessment-and-submission" class="headerlink" title="Assessment and submission"></a>Assessment and submission</h3><h4 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h4><p>Up to eight marks will reward correctness of solutions by automatically testing your program on some tests, all different to the provided examples. Read carefully the part on program output to maximise your chances of not failing some tests for stupid reasons.</p><p>Up to one mark will reward good comments, good choice of names for identifiers and functions, readability of code, simplicity of statements, compactness of functions. This will be determined manually.</p>]]></content>
    
    <summary type="html">
    
      代写自动求解Logical Puzzles的Python程序，这个作业由于是求解逻辑问题，因此测试的时候相当烧脑。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS316-Large-Data-Sorting</title>
    <link href="https://tk1307993.coding.me/CS316-Large-Data-Sorting.html"/>
    <id>https://tk1307993.coding.me/CS316-Large-Data-Sorting.html</id>
    <published>2019-11-13T13:41:26.000Z</published>
    <updated>2019-11-13T13:45:29.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you will be performing some important data-processing operations, specifically sorting a large database file. Sorting data is a very important operation in computing for many reasons. One of those reasons is that it makes the data more accessible to humans once it is printed (imagine trying to use a telephone directory in which the names do not appear in any particular order). Another reason is that it makes the data more quickly searchable by the computer.</p><p>There are many large data files to use for this assignment, but you will only need the first one until you get on to the advanced parts. They are all available on blackboard, and are named people1.txt, people2.txt, people3.txt, people5.txt, people10.txt, people20.txt, people30.txt, people50.txt, and people100.txt. You must represent a person as an object of class PersonType, throughout the assignment.</p><p>Look at the file “people1.txt” with a text editor. You will see that it contains data about a number of people. Each line contains exactly five items: a person’s social security number, their first name, their last name, their date of birth, and state of residence. The five items are separated by spaces, but no item will ever contain a space. Here is a sample from the middle of the file:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">320990814 </span>Arthur Farmer <span class="number">19560424</span> NV</span><br><span class="line"><span class="symbol">322230050 </span>Eros Crandon <span class="number">19250819</span> TX</span><br><span class="line"><span class="symbol">324640114 </span>Lusitania Lissom <span class="number">19440104</span> IN</span><br><span class="line"><span class="symbol">325400784 </span>Rose Terwilliger <span class="number">19260122</span> WI</span><br><span class="line"><span class="symbol">327640597 </span>Jeffrey Stone <span class="number">19760801</span> DE</span><br><span class="line"><span class="symbol">327950765 </span>Mary Emmett <span class="number">19290224</span> CO</span><br><span class="line"><span class="symbol">328610085 </span>Heironymous Inchworm <span class="number">19661102</span> CA</span><br><span class="line"><span class="symbol">329310410 </span>William McCormick <span class="number">19550819</span> WV</span><br><span class="line"><span class="symbol">329320248 </span>Nicola Birchmore <span class="number">19230107</span> IA</span><br><span class="line"><span class="symbol">330270343 </span>Pauline McTaggart <span class="number">19290402</span> MN</span><br><span class="line"><span class="symbol">331130693 </span>Jim Trombone <span class="number">19411222</span> NE</span><br><span class="line"><span class="symbol">331960453 </span>Abraham Larch <span class="number">19750901</span> WY</span><br><span class="line"><span class="symbol">332040687 </span>Trixie Underwood <span class="number">19200516</span> UT</span><br></pre></td></tr></table></figure></p><p>As you may have noticed, the date of birth is provided as a single integer, in the format yyyymmdd; Arthur Farmer was born on the 24th of April 1956. The 1 in the filename people1.txt indicates that it contains exactly one thousand lines.</p><h3 id="Read-the-Data"><a href="#Read-the-Data" class="headerlink" title="Read the Data"></a>Read the Data</h3><p>Write a program that creates a list of type PersonType to read all the data from the file into that list. Of course, it will have to be a list of type Person that you will also need to define. Make your program close the file, then print out the first 10 items of data from the list, so that you can make sure everything was read correctly. You can use intermediate lists of lines while you are constructing the persons list if you would like.</p><h3 id="Basic-Search"><a href="#Basic-Search" class="headerlink" title="Basic Search"></a>Basic Search</h3><p>Make your program ask the user to enter a name. It should then search through the data in the list (don’t read the file again), finding any entry with a matching name. Correct matches with either first or last name should be accepted. For every matching entry that is found, print out all four data items: the social security number, first and last names, and date of birth of each matching person.</p><p>Remember that if you use the == operator to compare strings, the test is case-sensitive. The user (i.e. you) will have to type the name exactly correctly, with capital letters in the right places.</p><blockquote><p>Important: Good clean design will make this lab much easier. Write a separate function that searches the list, do not put all the work in main.</p></blockquote><h3 id="Find-the-Oldest"><a href="#Find-the-Oldest" class="headerlink" title="Find the Oldest"></a>Find the Oldest</h3><p>Modify your program so that after closing the file, instead of printing the first ten items of data, it searches through all of them to find the oldest person represented. It should print the social security number, first and last names, date of birth, and state of the oldest person found.</p><blockquote><p>Important: As for part two, good clean design will make this lab much easier. Write a separate function that searches the list to find the oldest person, do not put all the work in main.</p></blockquote><h3 id="Promote-the-Oldest"><a href="#Promote-the-Oldest" class="headerlink" title="Promote the Oldest"></a>Promote the Oldest</h3><p>For some unfathomable reason, the management wants the oldest person to occupy the first position in the list. Modify your program so that after finding the oldest person, it swaps his or her data with the data already occupying the first position in the list. Remember that the first position in a list is numbered zero, not one.</p><h3 id="Now-Promote-the-Second-Oldest"><a href="#Now-Promote-the-Second-Oldest" class="headerlink" title="Now Promote the Second Oldest."></a>Now Promote the Second Oldest.</h3><p>The management has now decided not only that the oldest person must occupy the first position in the list, but also that the second-oldest person must occupy the second position in the list. So, after searching for the oldest and moving their data to the front of the list, now search the remainder of the list (all except the first element), and move the oldest person you find (which must be the second oldest of all) into the second position of the list. Make sure you swap data, so that whoever was originally in the second position is not lost.</p><h3 id="More-of-the-Same"><a href="#More-of-the-Same" class="headerlink" title="More of the Same."></a>More of the Same.</h3><p>The management are going to keep on adding requirements like this, next putting the third-oldest in the third position, then the fourth, then the fifth. There is no knowing when they will grow out of this petty obsession, so make things easier for yourself. Modify your search function so that it can be told how much of the list to search. That is, give it two int parameters (let’s call them a and b); its job is now to search only the portion of the list between position a and position b, to find the oldest person therein. This makes it very easy to search the remainder of the list to find the second and third oldest.</p><h3 id="The-Ultimate-Demand"><a href="#The-Ultimate-Demand" class="headerlink" title="The Ultimate Demand."></a>The Ultimate Demand.</h3><p>Now the management make their final demand. You are to repeat the process of moving the nth-oldest person into the nth position 1000 times. (please remember, 1000 is the number of data records in the whole file).</p><p>This will result in the list being completely sorted. Do it, and check that it worked. Make your program print the contents of the list after it has finished. Look at the output to make sure that everyone is printed in order of their age.</p><p>Try to implement your own selection sort function – instead of using the Python sort.</p><p>(Research item/Optional – extra credit) Try again with bubble sort, insertion sort, quick sort, and compare the results in terms of the execution time of the sorting of records.</p><h3 id="Sorting-the-File"><a href="#Sorting-the-File" class="headerlink" title="Sorting the File."></a>Sorting the File.</h3><p>Once you have sorted the contents of the list, it might be a good idea to save the sorted data in a file. Make your program create a new file, and write all the contents of the list into that file in a sensible format. Use a text editor to look at the file and verify that it has the same format as the original file, and all the data is properly sorted.</p><h3 id="How-Fast-Is-It"><a href="#How-Fast-Is-It" class="headerlink" title="How Fast Is It?"></a>How Fast Is It?</h3><p>It is important to know how long computer operations are going to take when they have to work on a large amount of data.</p><p>Use a function (twice) to time how long it takes the computer to sort the list of 1000 data items. Do not include the time it takes to read the file or the time it takes to write the new file, just the pure sorting time. Note the time that you observe.</p><p>Now you know how long it takes to sort a database of 1000 items. How long do you think it would take to sort a database of 2000 names? 3000 names? 10,000 names?</p><p>Think about those questions, and work out what you believe the answer is. Then find out what the real answer is. The other files have exactly the same format as people1.txt, but are longer. PeopleN.txt contains N thousand data records. If your program was nicely written, it will be a few seconds’ work to change the list size and make it read a different file.</p><p>See how long it takes to sort these larger files, and compare the results to your predictions. If your predictions weren’t substantially correct, make sure you understand why. You have just demonstrated a very important phenomenon of computing.</p>]]></content>
    
    <summary type="html">
    
      分析在不同数据量情况下，各种排序算法的性能优劣，并且根据题目要求算出所需要的数据。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CS112-Grade-Distribution</title>
    <link href="https://tk1307993.coding.me/CS112-Grade-Distribution.html"/>
    <id>https://tk1307993.coding.me/CS112-Grade-Distribution.html</id>
    <published>2019-11-10T00:46:35.000Z</published>
    <updated>2019-11-10T00:51:15.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>From now on, all assignments will involve defining classes with instance variables and methods.</p><p>Instance variables are used to describe an object of the class. For example, to describe a rectangle, we need to have height and width, so should be instance variables of the Rectangle class.</p><p>Methods are used to manipulate the instance variables, for example to retrieve, or modify, or print out the instance variables etc.</p><p>When designing a class, you should answer the following question: What information is needed in order to describe an object?</p><p>This information should be defined as instance variables. If some information is not related with object, they SHOULD NOT be defined as instance variables. For example, Scanner object is needed for input, but it is not necessary to describe a rectangle, so it should not be an instance variable.</p><p>When some information is related with the object, but can be obtained from some other instance variables, you have to decide if you want to define them as instance variables. If you do define them as instance variables, you have to make sure the consistency of these variables when you modify some instance variables. For example, the area of a rectangle is a function of height and width, if you define the area as instance variable; you have to make sure the area is updated whenever you update height and width.</p><p>This information should be defined as instance variables. If some information is not related with object, they SHOULD NOT be defined as instance variables. For example, Scanner object is needed for input, but it is not necessary to describe a rectangle, so it should not be an instance variable.</p><p>When some information is related with the object, but can be obtained from some other instance variables, you have to decide if you want to define them as instance variables. If you do define them as instance variables, you have to make sure the consistency of these variables when you modify some instance variables. For example, the area of a rectangle is a function of height and width, if you define the area as instance variable; you have to make sure the area is updated whenever you update height and width.</p><p>This homework is based on Project 3 on page 372. Create a class that represents a grade distribution for a given course.</p><ol><li>Download the attached GradeDistribution.txt, rename it to GradeDistribution.java</li><li>Complete the class definition by<ul><li>Determine the needed instance variables</li><li>Define the set methods for each of the letter grades A, B, C, D, and F.<blockquote><p>Note: a set method should (1) have return type void<br>(2) take a parameter for the new value of the instance variable.<br>(3) assign the value of the instance variable to be the given parameter.</p></blockquote></li><li>Define get method for each of the letter grades A, B, C, D, and F.<blockquote><p>Note: a get method should (1) takes no parameter (2) returns the value of an instance variable (3) the return type should be the type of the instance variable.</p></blockquote></li><li>Define the following method which returns the total number of grades.</li><li>Method that returns the percentage of each letter grade as a whole number between 0 and 100, inclusive.</li><li>Draw a bar graph of the grade distribution.</li></ul></li></ol><p>For example, if the grades are 1 A, 4 Bs, 6 Cs, 2 Ds, and 1 F, the total number of grades is 14, the percentage of As is 7, the percentage of Bs is 29, the percentage of Cs is 43, the percentage of Ds is 14, and the percentage of Fs is 7. The A row would contain 4 asterisks (7 percent of 50 rounded to the nearest integer), the B row 14, the C row 21, the D row 7, and the F row 4.</p><h3 id="Test-the-class"><a href="#Test-the-class" class="headerlink" title="Test the class"></a>Test the class</h3><p>Download the GradesGraphTest.java, compile and run compare the output with the attached sample output, debug your code if it doesn’t look right.</p>]]></content>
    
    <summary type="html">
    
      代写Java基础课作业，做一个统计分数的小程序，打印出统计分布图即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP20003-2048-Game</title>
    <link href="https://tk1307993.coding.me/COMP20003-2048-Game.html"/>
    <id>https://tk1307993.coding.me/COMP20003-2048-Game.html</id>
    <published>2019-11-07T13:40:13.000Z</published>
    <updated>2019-11-08T14:57:33.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-description"><a href="#Assignment-description" class="headerlink" title="Assignment description"></a>Assignment description</h3><p>In this programming assignment you’ll be expected to build a solver for the 2048 game. The game has been described by the Wall Street Journal as “almost like Candy Crush for math geeks”. You can play the game compiling the code given to you using the keyboard, or using this web implementation <a href="http://2048game.com/" target="_blank" rel="noopener">http://2048game.com/</a>.</p><h3 id="The-2048-game"><a href="#The-2048-game" class="headerlink" title="The 2048 game"></a>The 2048 game</h3><p>2048 is played on a 4x4 grid, with numbered tiles that slide smoothly when a player moves them using the four arrow keys. Every turn, a new tile will randomly appear in an empty spot on the board with a value of either 2 or 4. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.</p><p>A scoreboard on the upper-right keeps track of the user’s score. The user’s score starts at zero, and is incremented whenever two tiles combine, by the value of the new tile.</p><p>The game is won when a tile with a value of 2048 appears on the board, hence the name of the game. After reaching the 2048 tile, players can continue to play (beyond the 2048 tile) to reach higher scores. In this assignment, your solver should continue playing after reaching tile 2048. When the player has no legal moves (there are no empty spaces and no adjacent tiles with the same value), the game ends.</p><h3 id="The-Algorithm"><a href="#The-Algorithm" class="headerlink" title="The Algorithm"></a>The Algorithm</h3><p>Each possible configuration of the 2048 4x4 grid is called a state. The 2048 Graph G = (V, E) is implicitly defined. The vertex set V is defined as all the possible 4x4 configurations (states), and the edges E connecting two vertexes are defined by the legal movements (right, left, up, down).</p><p>Your task is to find the path leading to the higest score, i.e. leading to the most rewarding vertex (state). A path is a sequence of movements. You are going to use a variant of Dijkstra to explore the most rewarding path first, up to a maximum depth D.</p><p>Every time the game asks you for a movement (action), you should explore all possible paths up to depth D. Once you finished generating all the paths, you should return the first action only of the path leading to the highest score vertex. This action will be then executed by the game engine.</p><p>You might have multiple paths with the same maximum score. If more than one action (left, right, up or down) begins paths with the same maximum score, you’ll have to break ties randomly.</p><p>Make sure you manage the memory well. Everytime you finish running the algorithm, you have to free all the nodes from the memory, otherwise you are going to run out of memory fairly fast.</p><p>When you applyAction you have to create a new node, that points to the parent, updates the board with the action chosen, updates the priority of the node with the new score, and updates any other auxiliary data in the node.</p><p>You are going to need some auxiliary data structures to update the scores of the first 4 applicable actions. The function propagateBackScoreToFirstAction takes the score of the newly generated node, and propagates back the score to the first action of the path.</p><p>This propagation can be either Maximeze or Average:</p><p>If you Maximize, you have to make sure that the first action is updated to reflect the maximum score of any of its children up to depth D.</p><p>If you Average, you have to make sure that the first action is updated to reflect the average score taking into account all its children up to depth D.</p><h3 id="Deliverables-evaluation-and-delivery-rules"><a href="#Deliverables-evaluation-and-delivery-rules" class="headerlink" title="Deliverables, evaluation and delivery rules"></a>Deliverables, evaluation and delivery rules</h3><p>Deliverable 1 – Solver source code<br>You are expected to hand in the source code for your solver, written in C. Obviously, your source code is expected to compile and execute flawlessly using the following makefile command: make generating an executable called 2048. Remember to compile using the optimization flag gcc -O3 for doing your experiments, it will run twice faster than compiling with the debugging flag gcc -g. For the submission, please submit your makefile with gcc -g option, as our scripts need this flag for testing.</p><p>Your implementation should achive scores higher than 5000 points.</p><p>Base Code<br>You are given a base code. You can compile the code and play with the keyboard. The default solver chooses an action randomly. You are going to have to program your solver in the file ai.c. Look at the file 2048.c to know which function is called to select an action to execute.</p><p>You are given the structure of a node, and also a priority queue implementation. Look into the utils.* files to know about the functions you can call to apply actions.</p><p>You are free to change any file.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>You can play the game with the keyboard by executing ./2048</p><p>In order to execute your solver use the following command:</p><p>./2048 ai &lt;max/avg&gt; <depth><br>for example:</depth></p><p>./2048 ai avg 6<br>Will run average updates up to depth 6. </p><p>If you append the option “slow” at the end, it will slow the ai so you can see it playing</p><p>./2048 ai avg 6 slow</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>Your solver will print into an output.txt file the following information:</p><p>Max Depth<br>Number of generated nodes.<br>Number of expanded nodes.<br>Number of expanded nodes per second.<br>Total Search Time, in seconds.<br>Maximum value in the board.<br>Score</p><h4 id="Deliverable-2-–-Experimentation"><a href="#Deliverable-2-–-Experimentation" class="headerlink" title="Deliverable 2 – Experimentation"></a>Deliverable 2 – Experimentation</h4><p>Besides handing in the solver source code, you’re required to provide a table with the mean score and deviation, mean max tile and deviation, and total execution time for each type of propagation (max/avg) you implement and each max depth from 0,..,6.<br>In order to test your solver, you have to average over multiple runs because 2048 has a random component: tiles can appear in different locations after each move. A sample of 10 runs is enough.</p><p>For each propagation type, plot a figure where the x axis is the depth, and y is the mean score.</p><p>Explain your results using your figures and tables. Which max depth works best? Is it better to propagate max or avg?</p>]]></content>
    
    <summary type="html">
    
      代写一个带AI功能的2048游戏，要求能自动玩，并且平均能得到5000分以上的成绩。作业中给出了2048的高分AI参考算法。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CS812-Inventory-Management-System</title>
    <link href="https://tk1307993.coding.me/CS812-Inventory-Management-System.html"/>
    <id>https://tk1307993.coding.me/CS812-Inventory-Management-System.html</id>
    <published>2019-11-03T11:06:24.000Z</published>
    <updated>2019-11-03T11:08:59.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Key to any retail shop, from Amazon to K-Mart to Coles, is its inventory management system - that is a system to decide what items to stock and how many should the stock be. In this assignment, we will see an application of Markov Decision Processes (MDPs) in such a system.</p><h3 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h3><p>You have been hired to setup the inventory management system for Retail (R). R sells various types of electronics goods, designed and developed by staffs and students. R has multiple retail stores of various sizes, at different locations. Your task is to create a system that uses historical customer behaviour data from a store, to decide what type of items to order/return and how many, so that the store makes the most profit. The rest of this document describes the detail of the problem.</p><p>Each retail store of R can be classified into one of five different classes of store, based on their capacities. The 5 types of stores, along with their stocking capacities and maximum ordering capabilities are:</p><ul><li><p>Tiny store. This store sells up to 2 types of items and can stock at most 3 items. It can order at most 2 items per week and can return at most 1 item per week.</p></li><li><p>Small store. This store sells up to 2 types of items and can stock up to 8 items. It can order at most 3 items per week and can return at most 2 items per week.</p></li><li><p>Medium store. This store sells up to 3 types of items and can stock up to 8 items. It can order at most 3 items per week and can return at most 2 items per week.</p></li><li><p>Large store. This store sells up to 5 types of items and can stock up to 10 items. It can order at most 4 items per week and can return at most 2 items per week.</p></li><li><p>Mega store. This store sells up to 7 types of items and can stock up to 20 items. It can order at most 5 items per week and can return at most 3 items per week.</p></li></ul><p>Each store can order items at no cost. Whenever an item is sold, the store keeps 75% of the payment and passes the rest to R headquarter. For each miss opportunity (i.e., failing to provide an item requested by a customer), the store is fined 25% of the price of the requested item by R headquarter. When a store returns an item, it must pay half of the price of the item to R headquarter.</p><p>To simplify the problem, R assumes:</p><ul><li><p>Stocking is done while the store is closed (Saturday-Sunday). Each store can only order the stocks once per week, which is on Saturday morning. The stock will be delivered and arrange on the shelves during the weekend, before it opens again for next week’s operation.</p></li><li><p>All items ordered will be delivered in good condition, on time. Also, the quality of the goods will not degrade over time.<br>When the order/return operation causes the store to have more items than its capacity, R will automatically cut the store’s order prior to delivery, so that there will be no excess items in the store. Assuming the types of items are indexed from 1, the items will be cut ascendingly, from items with the lowest index first. This cut will cost the store a penalty fee of $F per item cut.</p></li><li><p>The buying habit of the customers are independent between one another. Also, the buying habit of the customers of one store is independent from those of other stores. However, for each type of items in the store, the amount of items the customer buys do depend on the amount that is available in the store right after the most recent replenishment.</p></li><li><p>Within the week, the total number of items per type of goods that the customers of a store want to buy is at most equivalent to the total number of items that the store can stock.</p></li><li><p>The performance of the store is measured weekly, right after the store is closed for the week.</p></li><li><p>The inventory system should assume that the store will remain open forever.<br>Although for simplicity in computing the actual profit gained, the system will be tested on a finite number of weeks.</p></li></ul><p>Given the stochastic model of the customers’ behavior, the type of store, and information about the available items in the store immediately before the shopping order is made, the inventory management system should decide which types of items and how many should be ordered and returned, so that the store gains the maximum profit possible. Profit is defined as the income the store gets (i.e., 75% of the total payment received from customer) minus the sum of the cost of returning the items, the fines for miss opportunities, and the penalty fees for having items being cut from the order list by R headquarter.</p><h3 id="What-you-need-to-do"><a href="#What-you-need-to-do" class="headerlink" title="What you need to do"></a>What you need to do</h3><p>Your tasks in this assignment can be classified into 4 parts:</p><ol><li><p>Design the solution. This task contains two main components, i.e., framing the problem as an MDP problem and deciding how to solve the problem. Note that you should design the MDP components, i.e., what are the states, actions, etc., manually. However, the exact parameters of your MDP problem will depend on the given input file. Please be aware that how you define your MDP problem might help or hurt your ability to solve the problem.</p></li><li><p>Implement your design. Your program is allowed a maximum of 3 minutes computation prior to each simulation run. If you use an online method for solving MDP, at each step during run-time, your program is allowed a maximum of 30 seconds computation time for a tiny/small/medium store and a maximum of 1 minute computation time for a large/mega store. Your program will be run on a PC with the same specification as those in the tutorial rooms. The time requirement is for a program that runs as a single-threaded process. If you use multi-threading, then we will divide the aforementioned time limit with the number of threads you use. Note: You are not allowed to use any library for linear algebra, optimization, and MDP solver.</p></li><li><p>Implement the basic value iteration to compare your design with the baseline (at least for the tiny and small stores).</p></li><li><p>Write a report. you only need to answer the questions we post for the Report (see the last part of this document). However, to answer these questions well, you do need to do #3.</p></li></ol><h3 id="Input-and-Output-format"><a href="#Input-and-Output-format" class="headerlink" title="Input and Output format"></a>Input and Output format</h3><p>Input format. The input is a single .txt file, containing all the information about the store, the types and price of the items that can be sold at the store, and the store’s customers’ behaviour.</p><h3 id="Output-format"><a href="#Output-format" class="headerlink" title="Output format"></a>Output format</h3><p>Your program should output the state, the order list, and the return list at each week.</p>]]></content>
    
    <summary type="html">
    
      代写人工智能课程的作业，不用全部实现，但是需要有基础功能，比如读写的support code，马卡洛夫决策过程相关。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>COMPSCI101-Python-Lists</title>
    <link href="https://tk1307993.coding.me/COMPSCI101-Python-Lists.html"/>
    <id>https://tk1307993.coding.me/COMPSCI101-Python-Lists.html</id>
    <published>2019-10-30T14:05:03.000Z</published>
    <updated>2019-10-30T14:09:34.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-Assignment"><a href="#The-Assignment" class="headerlink" title="The Assignment"></a>The Assignment</h3><p>In this assignment, you will develop eight functions. Each function needs to be submitted into CodeRunner. When you press the check button, CodeRunner will give you feedback and a mark for that function.</p><h3 id="Question-1-get-ends-with-a-vowel-function"><a href="#Question-1-get-ends-with-a-vowel-function" class="headerlink" title="Question 1 - get_ends_with_a_vowel() function"></a>Question 1 - get_ends_with_a_vowel() function</h3><p>Define the get_ends_with_a_vowel() function which is passed a list of strings as a parameter. The function returns a list containing all the strings of the parameter list which have a last letter which is a vowel (the letters a, e, i, o, u). You can assume that none of the elements of the parameter list are the empty string. For example, the following code:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">print</span>(<span class="string">"1."</span>, get_ends_with_a_vowel([<span class="string">"Cain"</span>, <span class="string">"Jessie"</span>, <span class="string">"Robert"</span>, <span class="string">"Geoffrey"</span>, <span class="string">"Li"</span>]))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"2."</span>, get_ends_with_a_vowel([<span class="string">"Jess"</span>, <span class="string">"Cain"</span>, <span class="string">"Amity"</span>, Raeann<span class="string">"]))</span></span><br><span class="line"><span class="string">print("</span>3.<span class="string">", get_ends_with_a_vowel([]))</span></span><br></pre></td></tr></table></figure></p><p>prints:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> ['Jessie', 'Li']</span><br><span class="line"><span class="number">2.</span> []</span><br><span class="line"><span class="number">3.</span> []</span><br></pre></td></tr></table></figure></p><h3 id="Question-2-get-common-words-used-function"><a href="#Question-2-get-common-words-used-function" class="headerlink" title="Question 2 - get_common_words_used() function"></a>Question 2 - get_common_words_used() function</h3><p>Define the get_common_words_used() function which is passed a string of text and a list of commonly used words (strings) as parameters. The function returns a list containing all the words in the text string which are in the list of commonly used words. The returned list should contain no duplicates and should be sorted (use the list method, sort()). The string of text should be converted to lower case before you do any checking as the commonly used words are all in lower case. For example, the following code:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"1."</span>, get_common_words_used(<span class="string">"A bus station is where a bus stops A train station is where a train stops On my desk I have a work station"</span>, [<span class="string">"a"</span>, <span class="string">"is"</span>, <span class="string">"i"</span>, <span class="string">"on"</span>, <span class="string">"the"</span>])</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"2."</span>, get_common_words_used(<span class="string">"Easy come, easy go go go"</span>, [<span class="string">"a"</span>, <span class="string">"go"</span>, <span class="string">"i"</span>, <span class="string">"on"</span>, <span class="string">"the"</span>])</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"3."</span>, get_common_words_used(<span class="string">"Easy come, easy go go go"</span>, [<span class="string">"a"</span> , <span class="string">"is"</span>, <span class="string">"i"</span>, <span class="string">"on"</span>, <span class="string">"the"</span>])</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"4."</span>, get_common_words_used(<span class="string">""</span>, [<span class="string">"a"</span>, <span class="string">"is"</span>, <span class="string">"i"</span>, <span class="string">"the"</span>])</span></span>)</span><br></pre></td></tr></table></figure></p><p>prints:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> ['a' , 'i' , 'is' , 'on']</span><br><span class="line"><span class="number">2.</span> ['go']</span><br><span class="line"><span class="number">3.</span> []</span><br><span class="line"><span class="number">4.</span> []</span><br></pre></td></tr></table></figure></p><h3 id="Question-3-get-text-value-function"><a href="#Question-3-get-text-value-function" class="headerlink" title="Question 3 - get_text_value() function"></a>Question 3 - get_text_value() function</h3><p>Define the get_text_value() function which is passed a string of text as a parameter. The function returns an integer which is the total of the value of each word of the parameter string. The words of the parameter string are valued based on the value of the first letter added to the value of the last letter. If the word has only one letter then the value of the word is just the value of the first letter. The first two lines of code in this function are:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', k', '<span class="number">1</span>', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'V', 'w', 'x', 'y', 'z']</span><br><span class="line">letter_values = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>where the letters list contains every lowercase letter of the alphabet and the letter_values list contains the value corresponding to each letter of the alphabet, i.e., the first element is the value of the letter ‘a’, the second element is the value of the letter b’,and so on.</p><p>The string of text parameter should be converted to lower case before you do any checking as the letters of the alphabet are all in lower case. You can assume that the first and the last letters of all the words are alphabetic characters. For example, the following code:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"1. Text value:"</span>, get_text_value(<span class="string">"abracadabra"</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"2. Text value:"</span>, get_text_value(<span class="string">"a b"</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"3. Text value:"</span>, get_text_value(<span class="string">"enjoy Today"</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"4. Text value:"</span>, get_text_value(<span class="string">""</span>)</span></span>)</span><br></pre></td></tr></table></figure></p><p>prints:<br><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="built_in">Text</span> value: <span class="number">2</span></span><br><span class="line"><span class="number">2</span>. <span class="built_in">Text</span> value: <span class="number">5</span></span><br><span class="line"><span class="number">3</span>. <span class="built_in">Text</span> value: <span class="number">21</span></span><br><span class="line"><span class="number">4</span>. <span class="built_in">Text</span> value: <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-4-is-legitmate-code-function"><a href="#Question-4-is-legitmate-code-function" class="headerlink" title="Question 4 - is_legitmate_code() function"></a>Question 4 - is_legitmate_code() function</h3><p>Define the is_legitmate_code() function which is passed a string as a parameter. The function returns a boolean indicating whether the parameter string denotes a legitimate code or not. A legitimate code is a string made up of one letter followed by any<br>number of digits or spaces (at least one digit). The first three lines of code inside the function should be:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code-letters = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"Z"</span>, <span class="string">"T"</span>, <span class="string">"X"</span>]</span><br><span class="line">min_for_each_letter = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, O, <span class="number">4</span>] # inclusive</span><br><span class="line">max_for_each_letter = [<span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>] # inclusive</span><br></pre></td></tr></table></figure></p><p>where:</p><ul><li>code_letters is the list of code letters which are legitimate for the first letter of the code string,</li><li>min_for_each_letter is a list which contains the minimum number (inclusive) for each digit following that letter,</li><li>max_for_each_letter is a list which contains the maximum number (inclusive) for each digit following that letter.</li></ul><p>For example, the third element of the code_letters list is the letter ‘Z’, the corresponding third element of the min_for_each_letter list is 1 and the corresponding third element of the max_for_each_letter list is 6. This indicates that the code digits which follows the letter ‘Z’ can be any number made up of the digits 1, 2, 3, 4, 5 or 6. The number part of the code string can contain any number of spaces.</p><p>Note: The code number part of a parameter string to be tested could contain an alphabetic character thus making the code not legitimate. You will find it useful to use the isdigit() method which returns True if the string is a digit, False otherwise.For example, the following code:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"1."</span>, is_legitmate_code(<span class="string">'B747346'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"2."</span>, is_legitmate_code(<span class="string">'X 444 454'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"3."</span>, is_legitmate_code(<span class="string">'T 444854'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"4."</span>, is_legitmate_code(<span class="string">'X 444X454'</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"5."</span>, is_legitmate_code(<span class="string">'X '</span>)</span></span>)</span><br></pre></td></tr></table></figure></p><p>prints<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="literal">True</span></span><br><span class="line"><span class="number">2.</span> <span class="literal">True</span></span><br><span class="line"><span class="number">3.</span> <span class="literal">False</span></span><br><span class="line"><span class="number">4.</span> <span class="literal">False</span></span><br><span class="line"><span class="number">5.</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-5-get-fail-pass-average-function"><a href="#Question-5-get-fail-pass-average-function" class="headerlink" title="Question 5 - get_fail_pass_average() function"></a>Question 5 - get_fail_pass_average() function</h3><p>Define the get_fail_pass_average() function which is passed a list of integers as a parameter where each integer represents a mark out of 100. The function returns a tuple made up of the average of all the marks which are less than 50, followed by the average of all the marks which are 50 or more (both averages are rounded to the nearest whole number). If there are no fail marks then the average fail mark should be set to -1 and if there are no pass marks then the average pass mark should be set to -1. For example, the following code:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"1."</span>, get_fail_pass_average([<span class="number">63</span>, <span class="number">65</span>, <span class="number">33</span>]))</span><br><span class="line">print(<span class="string">"2."</span>, get_fail_pass_average([<span class="number">63</span>, <span class="number">62</span>, <span class="number">100</span>, <span class="number">100</span>]))</span><br><span class="line">print(<span class="string">"3."</span>, get_fail_pass_average([<span class="number">33</span>, <span class="number">42</span>, <span class="number">20</span>, <span class="number">10</span>]))</span><br><span class="line">print(<span class="string">"4."</span>, get_fail_pass_average([<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">0</span>]))</span><br><span class="line">print(<span class="string">"5."</span>, get_fail_pass_average([]))</span><br></pre></td></tr></table></figure></p><h3 id="Question-6-get-triple-sums-list-function"><a href="#Question-6-get-triple-sums-list-function" class="headerlink" title="Question 6 - get_triple_sums_list() function"></a>Question 6 - get_triple_sums_list() function</h3><p>Define the get_triple_sums_list() function which is passed a list of integers as a parameter. The function returns a new list containing all the sums of the parameter list elements taken three at a time, i.e., the sum of the first three elements, the sum of the next three elements, and so on. If there are elements of the parameter list which are left over, the final element of the returned list is the sum of these leftover elements (it could be that there is one or that there are two leftover elements). If the parameter list is empty, the function returns the empty list.</p><h3 id="Question-7-remove-doubles-function"><a href="#Question-7-remove-doubles-function" class="headerlink" title="Question 7 - remove_doubles() function"></a>Question 7 - remove_doubles() function</h3><p>Define the remove_doubles() function which is passed a list of integers as a parameter. The function removes any element in the list which is the same as the previous element.</p><h3 id="Question-8-get-dice-score-function"><a href="#Question-8-get-dice-score-function" class="headerlink" title="Question 8 - get_dice_score( ) function"></a>Question 8 - get_dice_score( ) function</h3><p>In a dice rolling game a hand is made up of eight random dice throws and is valued in the following way:</p><ul><li>Each dice which is part of a run of dice starting from a 1 is valued at 3 points.</li><li>If there is no 1 in a hand of eight dice then the score for the whole hand is 0.</li><li>A hand of dice can contain more than one run.<br>Study the following five example hands of eight dice and their corresponding valuation.</li></ul>]]></content>
    
    <summary type="html">
    
      代写关于List用法的Python基础作业，一共编写八个问题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS180-Repetition</title>
    <link href="https://tk1307993.coding.me/CS180-Repetition.html"/>
    <id>https://tk1307993.coding.me/CS180-Repetition.html</id>
    <published>2019-10-26T04:15:53.000Z</published>
    <updated>2019-10-26T04:18:59.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this project is to help you become more familiar with scanners, String manipulation, conditionals, and advanced usage of the for loop.</p><p>These skills will help you in job interviews and future projects.</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>One of the great unsolved problems of the 20th century was sequencing the entire human genome. Until our genome was sequenced we had an incomplete view of our evolution, diseases, migrations as a species and genetic differences.</p><p>One of the most challenging parts of sequencing the genome was putting it all together. This was left to computer scientists. Gene sequencing machines work by splitting DNA down into small fragments, replicating them thousands of times with radioactive nucleotices, and finally reading them back.</p><p>The problem is that a human genome has three billion (3,000,000,000) base pairs and the sequencer processes about 500 random pairs at a time. Sequencing software pieces all of these together matching the overlaps to reconstruct the whole thing.</p><p>You are going to build sequencing software that:</p><ul><li>Reads in and re-constructs overlapping sequences</li><li>Checks to make sure the DNA is valid</li><li>Looks for genes in the DNA</li><li><p>Prints out an analysis of the gene<br>Note:</p></li><li><p>Please do the project chronologically as you cannot test a section without first completely its predecessor.</p></li></ul><h3 id="Part-1-Reconstruction"><a href="#Part-1-Reconstruction" class="headerlink" title="Part 1 - Reconstruction"></a>Part 1 - Reconstruction</h3><p>Problem<br>The first part of your DNA analysis program is going to be finding the longest terminating overlap between the DNA you have so far and the new DNA the sequencer gives you. Look at the following example:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">We start with no <span class="string">DNA:</span></span><br><span class="line">Your <span class="string">DNA:</span>      <span class="string">""</span></span><br><span class="line">Sequencer <span class="string">DNA:</span> <span class="string">"ATATATATA"</span></span><br><span class="line">New <span class="string">Sequence:</span>  <span class="string">"ATATATATA"</span></span><br><span class="line"></span><br><span class="line">Your <span class="string">DNA:</span>      <span class="string">"ATATATATA"</span></span><br><span class="line">Sequencer <span class="string">DNA:</span>       <span class="string">"ATACATGA"</span></span><br><span class="line">New <span class="string">Sequence:</span>  <span class="string">"ATATATATACATGA"</span></span><br><span class="line"></span><br><span class="line">Your <span class="string">DNA:</span>      <span class="string">"ATATATATA"</span></span><br><span class="line">Sequencer <span class="string">DNA:</span>       <span class="string">"ATACATGA"</span></span><br><span class="line">New <span class="string">Sequence:</span>  <span class="string">"ATATATATACATGA"</span></span><br></pre></td></tr></table></figure></p><h4 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h4><p>Know how to use the Scanner</p><p>Know how to use the substring, startsWith and endsWith methods in String</p><p>Get a sheet of paper and write down instructions telling your roommate how to find the longest terminating overlap.</p><h4 id="Things-To-Do"><a href="#Things-To-Do" class="headerlink" title="Things To Do"></a>Things To Do</h4><ol><li>Create a class Sequencer</li><li>Create a public static void main(String[] args) method in Sequencer, this is where you will put all your code.</li><li>Ask the user for input by printing “Input lowercase DNA fragments one line at a time. End with a blank line.”<br>Read lines of DNA from the input</li><li>Convert the line to lower case</li><li>Join the line with the current DNA on their longest terminating overlap like the example above.</li><li>Stop scanning when the user enters a blank line.</li><li>If the input contains any characters that are not a, t, c or g print “DNA is invalid” and return otherwise print “Input DNA: “ followed by the joined DNA.</li></ol><h4 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h4><p>You may assume the input DNA is lower-case</p><p>You may assume that each line of input will have at lease one overlap</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Here is an example up to this point with the DNA ccatgctaatttag:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input lowercase DNA fragments <span class="literal">one</span> <span class="built_in">line</span> <span class="keyword">at</span> <span class="keyword">a</span> <span class="built_in">time</span>. End <span class="keyword">with</span> <span class="keyword">a</span> blank <span class="built_in">line</span>.</span><br><span class="line">ccatgctaa</span><br><span class="line">taatttag</span><br><span class="line"></span><br><span class="line">Input DNA: ccatgctaatttag</span><br></pre></td></tr></table></figure></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input lowercase DNA fragments <span class="literal">one</span> <span class="built_in">line</span> <span class="keyword">at</span> <span class="keyword">a</span> <span class="built_in">time</span>. End <span class="keyword">with</span> <span class="keyword">a</span> blank <span class="built_in">line</span>.</span><br><span class="line">atgaccggcagtctatatgactctgatgccgcaggctgcctctga</span><br><span class="line"></span><br><span class="line">Input DNA: atgaccggcagtctatatgactctgatgccgcaggctgcctctga</span><br><span class="line">Start codon position: <span class="number">0</span></span><br><span class="line">End codon position: <span class="number">42</span></span><br><span class="line">Gene: atgaccggcagtctatatgactctgatgccgcaggctgcctc</span><br><span class="line"></span><br><span class="line">Analysis Results</span><br><span class="line"></span><br><span class="line">Eye color: brown</span><br><span class="line">Hair color: red</span><br><span class="line">Can roll tongue? no</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础作业，练习基本的scanner, conditionals和for, loop操作。但是内容很多，分三个part.
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS3014-Shell</title>
    <link href="https://tk1307993.coding.me/CS3014-Shell.html"/>
    <id>https://tk1307993.coding.me/CS3014-Shell.html</id>
    <published>2019-10-22T14:47:01.000Z</published>
    <updated>2019-10-22T14:49:26.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This is an individual assignment. However, you are encouraged to help (and seek help from) your peers (except sharing code, of course). This assignment contains the following two parts: 1) observing the OS through the /proc file system; 2) building a shell. Everything you do in this warm-up assignment is at the user-level (outside of the OS kernel). Your code must be compiled for Linux, and our reference machines will be the ones in the CSIL lab(Make sure your code compiles and runs correctly on these machines).</p><h3 id="Building-a-shell"><a href="#Building-a-shell" class="headerlink" title="Building a shell"></a>Building a shell</h3><p>UNIX shells:<br>The OS command interpreter is the program that people interact with in order to launch and control programs. On UNIX systems, the command interpreter is often called shell: a user-level program that gives people a command-line interface to launching, suspending, and killing other programs. sh, ksh, csh, tcsh, bash, … are all examples of UNIX shells. You use a shell like this every time you log into a Linux machine at a CS computer lab and bring up a terminal. It might be useful to look at the manual pages of these shells, for example, type “man csh”.</p><p>The most rudimentary shell is structured as the following loop:</p><ul><li><p>Print out a prompt;</p></li><li><p>Read a line from the user;</p></li><li><p>Parse the line into the program name and an array of parameters;</p></li><li><p>Use the fork() system call to spawn a new child process;</p></li><li><p>The child process then uses the exec() system call (or one of its variants) to launch the specified program;</p></li><li><p>The parent process (the shell) uses the wait() system call (or one of its variants) to wait for the child to terminate;</p></li><li><p>Once the child (the launched program) finishes, the shell repeats the loop by jumping to 1.</p></li></ul><p>Although most commands people type on the shell prompt are the names of other UNIX programs (such as ps or cat), shells also recognize some special commands (called internal commands) that are not program names. For example, the exit command terminates the shell, and the cd command changes the current working directory. Shells directly make system calls to execute these commands, instead of forking a child process to handle them.</p><h3 id="Requirements-in-detail"><a href="#Requirements-in-detail" class="headerlink" title="Requirements in detail"></a>Requirements in detail</h3><p>Your job is to implement a very primitive shell that knows how to launch new programs in the foreground and the background. It should also recognize a few internal commands. More specifically, it should support the following features.</p><p>It should recognize the internal commands: exit, jobs, and cd. exit should use the exit() system call to terminate the shell. cd uses the chdir() system call to change to a new directory. If the command line does not indicate any internal commands, it should be in the following form:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">program</span> <span class="attr">name</span>&gt;</span> <span class="tag">&lt;<span class="name">arg1</span>&gt;</span> <span class="tag">&lt;<span class="name">arg2</span>&gt;</span> .... <span class="tag">&lt;<span class="name">argN</span>&gt;</span> [&amp;]</span><br></pre></td></tr></table></figure></p><p>Your shell should invoke the program, passing it the list of arguments in the command line. The shell must wait until the started program completes unless the user runs it in the background (with &amp;).</p><p>To allow users to pass arguments you need to parse the input line into words separated by whitespace (spaces and ‘\t’ tab characters). You might try to use strtok_r() for parsing (check the manual page of strtok_r() and Google it for examples of using it). In case you wonder, strtok_r() is a user-level utility, not a system call. This means this function is fulfilled without the help of the operating system kernel. To make the parsing easy for you, you can assume the ‘&amp;’ token (when used) is separated from the last argument with one or more spaces or ‘\t’ tab characters.</p><p>The shell runs programs using two core system calls: fork() and execvp(). Read the manual pages to see how to use them. In short, fork() creates an exact copy of the currently running process, and is used by the shell to spawn a new process. The execvp() call is used to overload the currently running program with a new program, which is how the shell turns a forked process into the program it wants to run. In addition, the shell must wait until the previously started program completes unless the user runs it in the background (with &amp;). This is done with the wait() system call or one of its variants (such as waitpid()). All these system calls can fail due to unforeseen reasons (see their manual pages for details). You should check their return status and report errors if they occur.</p><p>No input the user gives should cause the shell to exit (except when the user types exit or Ctrl+D). This means your shell should handle errors gracefully, no matter where they occur. Even if an error occurs in the middle of a long pipeline, it should be reported accurately and your shell should recover gracefully. In addition, your shell should not generate leaking open file descriptors. Hint: you can monitor the current open file descriptors of the shell process through the /proc file system.</p><p>Your shell needs to support pipes. Pipes allow the stdins and stdouts of a list of programs to be concatenated in a chain. More specifically, the first program’s stdout is directed to the stdin of the second program; the second program’s stdout is directed to the stdin of the third program; and so on so forth. Multiple piped programs in a command line are separated with the token “|’. A command line will therefore have the following form:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">program1</span>&gt;</span> <span class="tag">&lt;<span class="name">arglist1</span>&gt;</span> | <span class="tag">&lt;<span class="name">program2</span>&gt;</span> <span class="tag">&lt;<span class="name">arglist2</span>&gt;</span> | ... | <span class="tag">&lt;<span class="name">programN</span>&gt;</span> <span class="tag">&lt;<span class="name">arglistN</span>&gt;</span> [&amp;]</span><br></pre></td></tr></table></figure></p><p>Try an example like this: pick a text file with more than 10 lines (assume it is called textfile) and then type<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat textfile | <span class="type">gzip</span> -c | <span class="type">gunzip</span> -c | <span class="type">tail</span> -n <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>in a regular shell or in the working shell we provide. Pause a bit to think what it really does. Note that multiple processes need to be launched for piped commands and all of them should be waited on in a foreground execution. The pipe() and dup2() system calls will be useful.</p><p>Your compiled executable must be called my_shell.</p><h3 id="Administrative-policies"><a href="#Administrative-policies" class="headerlink" title="Administrative policies"></a>Administrative policies</h3><p>A note on the programming language:</p><p>C/C++ is the only choice for this assignment and all later programming assignments. We are not alone in this. Most existing operating system kernels (Linux and other UNIX variants) themselves are written in C; the remaining parts are written in assembly language. Higher-level languages (Java, Perl, …), while possible, are less desirable because C allows more flexible and direct control of system resources.</p>]]></content>
    
    <summary type="html">
    
      操作系统作业，代写一个类似于Unix的Shell的程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
</feed>
