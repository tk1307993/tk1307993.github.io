<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2018-09-25T12:37:31.239Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop代写：CA675-TF-IDF</title>
    <link href="https://tk1307993.coding.me/CA675-TF-IDF.html"/>
    <id>https://tk1307993.coding.me/CA675-TF-IDF.html</id>
    <published>2018-09-25T02:41:52.000Z</published>
    <updated>2018-09-25T12:37:31.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Tasks:</p><ol><li>Using MapReduce, carry out the following tasks:</li><li>Acquire the top 250,000 posts by viewcount (see notes)</li><li>Using pig or mapreduce, extract, transform and load the data as applicable</li><li>Using mapreduce calculate the per-user TF-IDF (just submit the top 10 terms for each user)</li><li>Bonus use elastic mapreduce to execute one or more of these tasks (if so, provide logs / screenshots)</li><li><p>Using hive and/or mapreduce, get:</p><ol><li>The top 10 posts by score</li><li>The top 10 users by post score</li><li>The number of distinct users, who used the word ‘java’ in one of their posts</li></ol></li></ol><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>The TF-IDF algorithm is used to calculate the relative frequency of a word in a document, as compared to the overall frequency of that word in a collection of documents. This allows you to discover the distinctive words for a particular user or document.</p><p>The formula is:</p><p>TF(t) = Number of times t appears in the document / Number of words in the document</p><p>IDF(t) = log_e(Total number of documents / Number of Documents containing t)</p><p>The TFIDF(t) score of the term t is the multiple of those two.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>用Hadoop去计算TF-IDF的时间复杂度还是挺高的，毕竟有很多临时数据要落地，而且Hadoop程序也不是一个就能解决问题的，如果换成Spark的话，应该会高效很多。</p>]]></content>
    
    <summary type="html">
    
      大数据作业，利用Hadoop去跑数据集，先是几个基本的MapReduce简单问题，当然也可以用Hive，然后是去计算TF-IDF，当然，数据集得自己下，Hadoop平台也得自己去搭。
    
    </summary>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/categories/Hadoop/"/>
    
    
      <category term="Hive" scheme="https://tk1307993.coding.me/tags/Hive/"/>
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS415-Blackjack</title>
    <link href="https://tk1307993.coding.me/CS415-Blackjack.html"/>
    <id>https://tk1307993.coding.me/CS415-Blackjack.html</id>
    <published>2018-09-24T02:41:52.000Z</published>
    <updated>2018-09-24T02:44:55.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>We have written several classes that set up the application, the cards and the game board. You will need to write a class named Game and other classes of your choice that will make the game functional. The game should follow the above rules and you should display a control panel that displays scores and control buttons to run the game.</p><h3 id="The-Starting-Files"><a href="#The-Starting-Files" class="headerlink" title="The Starting Files"></a>The Starting Files</h3><p>Start by downloading the files posted on the public 8P directory.</p><ul><li>Board.java Our class that represents the playing board, do not edit this file.</li><li>Card.java Our class that represents one card, do not edit this file.</li><li>BlackJackApp.java Our class, the main application, do not edit this file.</li><li>Game.java A skeleton for your main class.</li><li>cards_gif.jar A jar file containing the card images.</li></ul><p>You will be writing the Game class and other classes as required by your design. Do not change and do not submit Board.java, Card.java, BlackJackApp.java or any images. Submit only Game.java and other java files that you write.</p><h3 id="The-Game-Class"><a href="#The-Game-Class" class="headerlink" title="The Game Class"></a>The Game Class</h3><p>This is the primary class that you will write, as it is now it is just a skeleton that sends a few test messages to the Board. You will need to add the code that plays the game and displays the information. You will need to<br>create a display text box to show the following information:</p><ul><li>The amount of money the player has (starts at $500)<br>*The players current card count</li><li>The result and win/loss amount for the current deal and messages saying what to do next. (You will probably want to create a “Display” class to handle these tasks.)</li><li>You will need to add labeled buttons (clickable Rectangles) to get the users choices, the choice are:</li><li>Deal: Deal a new hand (A new hand can’t begin until the previous hand is finished)</li><li>Hit: Player gets another card</li><li>Stand: Player ends the hand (then dealer finished hand and bets are paid)</li></ul><h3 id="Chunking-and-Design"><a href="#Chunking-and-Design" class="headerlink" title="Chunking and Design"></a>Chunking and Design</h3><p>Don’t try to do everything in one method or one class, it will become much too complicated. Write multiple classes and many “helper” methods that handle some small part of the problem. Breaking a problem up into these smaller pieces is sometimes called “chunking”. Poorly chunked code may lose points.</p><p>As usual, think carefully about the class design, for example you probably want a separate class to represent the display and another class to represent the buttons, etc..</p><h3 id="Evaluation-and-Incremental-development"><a href="#Evaluation-and-Incremental-development" class="headerlink" title="Evaluation and Incremental development"></a>Evaluation and Incremental development</h3><p>Develop your program in small steps; the following suggests some useful steps and how we will evaluate your assignment. If, when you develop your program you cannot finish one of the following steps and it breaks the program, be sure to backup to where the program was working. A program that doesn’t compile or crashes is worth a lot less than a program that does just the first step below.</p>]]></content>
    
    <summary type="html">
    
      一个21点的扑克牌游戏，作业提供了框架以及游戏引擎，不过UI库是学校内部的，需要学习成本。刨除UI部分，整体不难，无非就是deal, hit, stand三个按钮，然后label显示得分。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>JS代写：CSE6242-D3GraphsAndVisualization</title>
    <link href="https://tk1307993.coding.me/CSE6242-D3GraphsAndVisualization.html"/>
    <id>https://tk1307993.coding.me/CSE6242-D3GraphsAndVisualization.html</id>
    <published>2018-09-19T13:25:34.000Z</published>
    <updated>2018-09-19T13:27:53.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1-Visualizing-Data-using-D3"><a href="#Part-1-Visualizing-Data-using-D3" class="headerlink" title="Part 1: Visualizing Data using D3"></a>Part 1: Visualizing Data using D3</h3><p>Q1</p><p>Create a scatter plot visualization with the provided data in the file Data.csv. According to the examples for scatter plot.<br>Attributes / features of the data:</p><p>Speed of wind in km/h.<br>Month of the year.<br>The forest burnt area.<br>Any appropriate range for scale is allowed, and any appropriate size for squares is allowed. Submit Q1.pdf with a screenshot of this page.</p><p>Q2</p><p>According to data provided in the file Q2.csv, a bar chart visualization should be drawn. Your task requires to visualize the number of students in Q2.csv.<br>Transfer the data in Q2.csv to Q2_transfer.csv, you can use a Python script or Java program to archive this goal.</p><p>Q3</p><p>Now you knows a lot of features in D3 for graph visualization. This time you need to use D3 to draw a graph.</p><ol><li>Using labels for each node.</li><li>All nodes can be pinned.</li><li>Draw links with different color.</li><li>Use tooltips when mouse over.</li></ol><h3 id="Part-2-Visualizing-Statistics-of-Refugees-in-Europe"><a href="#Part-2-Visualizing-Statistics-of-Refugees-in-Europe" class="headerlink" title="Part 2: Visualizing Statistics of Refugees in Europe"></a>Part 2: Visualizing Statistics of Refugees in Europe</h3><p>Q4</p><p>After Part1, this time you need to work on real data, and try to find out the appropriate data visualization technology.</p><ol><li>Your should transfer Q4.csv to Q4_transfer.csv, you can use a Python script or Java program to do this job.</li><li>Use a table to show the relationship inside this dataset, you can draw any graph you like.</li><li>Use D3 to visualize your data, you should use d3.slider library.</li></ol><h3 id="Part-3-Visualizing-College-Scorecard-data"><a href="#Part-3-Visualizing-College-Scorecard-data" class="headerlink" title="Part 3: Visualizing College Scorecard data"></a>Part 3: Visualizing College Scorecard data</h3><p>Q5</p><p>After Part2, this time you should find a real dataset, and use your data visualization technology to show it, good luck!</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>非常花时间的一次作业，csv数据集非常恶心，从一开始的给定数据，到复杂数据，最后自己找数据，整整花了两天吧。得分点很多，也很细，不过万幸的是Bonus很简单。</p>]]></content>
    
    <summary type="html">
    
      D3.js是Javascript中的一个利用Html5的SVG的图形库，主要用于数据可视化
    
    </summary>
    
      <category term="JS" scheme="https://tk1307993.coding.me/categories/JS/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>R代写：CSC120-EuclideanMinimumWeightMatching</title>
    <link href="https://tk1307993.coding.me/CSC120-EuclideanMinimumWeightMatching.html"/>
    <id>https://tk1307993.coding.me/CSC120-EuclideanMinimumWeightMatching.html</id>
    <published>2018-09-16T07:43:03.000Z</published>
    <updated>2018-09-16T07:46:41.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You should use an R script for grouping up all dots in a vector including an even number of dots in this assignment, in a way that tries to minimize the sum of the distances between the dots in each of the pairs. This problem can arise in many contexts, including design of experiments in statistics. Doing this will provide practice in basic R scriptming facilities such as vectors and matrices, and use of if and for, in use of R’s plotting facilities, and in how to divide a script into several functions that can be understood and sometimes used separately.</p><p>The output of the script is a vector of pairs of input dots, with each of the input dots being in exactly one pair. The order of the pairs and the order of dots in each pair are not important. The objective is to try to find a vector of pairs for which the total of the distances from one dot in a pair to the other is small. Ideally, this total distance would be as small as possible, but the method used in this assignment is not guaranteed to find a vector of groupings that achieve this minimum, it just tries to make the total distance as small as it can.</p><p>The input for this problem is a vector of n dots in k-dimensional Euclidean space. The number of dots, n, will always be even. For the actual data you will work with, k is two, so the input is a vector of dots in the plane, but except for the 2-dimensional plotting function described below, your script should work for any dimensionality, k, and for any even number of dots, n.</p><p>We also must specify how a function to find the groupings will work. For this assignment, you should write a function called find_groupings that can be called with a single argument that is a matrix of dots, as specified above, and which will return as its value a matrix giving the pairs of dots that we hope have a small total distance. (Below, some additional optional arguments to find_groupings will be specified.)</p><p>In designing this script, we must decide how to represent the input (a vector of dots) as an R data structure. For this assignment, we will use an n by k matrix, in which each row represents a dot in k-dimensional Euclidean space. We must also decide how to represent the vector of pairs of dots that is the output. We will use an n=2 by 2 matrix for this, in which each row contains two integers between 1 and n, which index the rows for the two dots in the input matrix.</p>]]></content>
    
    <summary type="html">
    
      一共写6个函数，运行后需要画10张图，然后找其中最优的欧氏距离。
    
    </summary>
    
      <category term="R" scheme="https://tk1307993.coding.me/categories/R/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>PHP代写：CPT270-Cinemas</title>
    <link href="https://tk1307993.coding.me/CPT270-Cinemas.html"/>
    <id>https://tk1307993.coding.me/CPT270-Cinemas.html</id>
    <published>2018-09-14T12:51:44.000Z</published>
    <updated>2018-09-14T12:54:29.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><h4 id="1-PHP-Conversion-Modularisation-and-SESSION"><a href="#1-PHP-Conversion-Modularisation-and-SESSION" class="headerlink" title="1. PHP Conversion, Modularisation and SESSION"></a>1. PHP Conversion, Modularisation and SESSION</h4><p>You were recommended to use fragments for Assignment 1, but this is now compulsory. Please make sure you have implemented fragments for Assignment 2.<br>All of your main pages must be converted to PHP and each page must be broken up into modules using functions such as include_once() ( or include() , require() , require_once() ).<br>You may elect to move common (ie repeated) sections of the website, such as the header, navigation, footer and even sidebar into a separate file.<br>The session must be running (ie available) on every page, ie session_start() should be near the top.</p><h4 id="2-jQuery-Image-Gallery-on-Home-Page"><a href="#2-jQuery-Image-Gallery-on-Home-Page" class="headerlink" title="2. jQuery Image Gallery on Home Page"></a>2. jQuery Image Gallery on Home Page</h4><p>Add an animated image gallery on the home page (index.php). The image gallery must be implemented using jQuery. The images featured in the image gallery should be contextual. Several implementations ( in terms of code and style ) exist on the Internet, please read about these and then implement one on the home page. An example will be covered during week 7’s collaborate chat.</p><h4 id="3-Movies-Selection-Page"><a href="#3-Movies-Selection-Page" class="headerlink" title="3. Movies Selection Page"></a>3. Movies Selection Page</h4><p>The client has selected set movies for the website. Your page should include content using jQuery OR Ajax to get the title, movie poster, movie trailer, plot summary, description, ratings information and times playing. Ideally, there should be Read More button next to each movie. When the user clicks on this button , a movie trailer and showtimes should be displayed.</p><h4 id="4-Movies-Reservation-Page-or-Facility"><a href="#4-Movies-Reservation-Page-or-Facility" class="headerlink" title="4. Movies Reservation Page or Facility"></a>4. Movies Reservation Page or Facility</h4><p>Some of you may wish to build this facility into a modal window or another page. It is up to you how you implement this part. You will not lose marks if this is not a separate page.<br>It is recommended that you design this page or facility to process the MovieID, day and time of the movie from the movie service page (ie do not allow customers to pick the movie, day and time here a it will lead to logical complications).</p><h4 id="5-Shopping-Cart-Page-or-Facility"><a href="#5-Shopping-Cart-Page-or-Facility" class="headerlink" title="5. Shopping Cart Page or Facility"></a>5. Shopping Cart Page or Facility</h4><p>Some of you may wish to build this facility into a modal window or another page. It is up to you how you implement this part. You will not lose marks if this is not a separate page.<br>The cart page must display a list of all the tickets that have been reserved, along with the quantity, pricing information, and with subtotals and total prices. Ideally, the client should be able to add seats and/or delete their reservations before finalising their bookings.<br>The total price for the cart must be calculated on the server side (ie using PHP) and the total price must be displayed on the cart page. This will ensure that the client can’t hack the price and give themselves cheap tickets or free tickets if the ticket price is calculated clientside.<br>At this stage, online purchasing is not required. The customers are only reserving the tickets, they must pay for them over the counter when they come to the cinema. There is also no need to check whether there are seats available in each session.</p><h3 id="Reservation-System"><a href="#Reservation-System" class="headerlink" title="Reservation System"></a>Reservation System</h3><p>The concept of the seating reservation system is that a customer can reserve / allocate seats of their choosing (based upon the type of seats they have purchased). Once that seat for that allocated movie has been reserved, no one else can book it.<br>You can use a database (or something similar if you like).<br>You will also get extra mark for the design and another extra mark if the system remembers previously booked seats. Please refer to the marking allocation guide for further information.</p>]]></content>
    
    <summary type="html">
    
      Web的裸写大作业，做一个Cinemas，包括Image Gallery，Movies Selection，Movies Reservation，Shopping Cart等等功能
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS308-Pipes</title>
    <link href="https://tk1307993.coding.me/CS308-Pipes.html"/>
    <id>https://tk1307993.coding.me/CS308-Pipes.html</id>
    <published>2018-09-09T03:51:48.000Z</published>
    <updated>2018-09-09T07:20:29.715Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>结合Unix的系统工具，甚至可以将输入输出流通过fd传给子进程。下面的作业便是通过nameless pipes将数据传递给Unix的sort和grep工具。</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This problem will require you to write two different, but similar, programs that each spawn a child, let the child process load itself with a Linux/UNIX type command (the grep and sort commands will be used in this assignment), and then send data to and retrieve data from the child process. Each of your programs will need to:<br>Create 2 nameless pipes</p><ol><li>Create a child process</li><li>The parent will be responsible for managing any data files that the child command will need sent via the pipe</li><li>The parent will collect all output from the child command sent through the pipe, process it as required and write required results to the standard output</li><li>The parent will terminate with success when the pipe being read from the child command shows EOF<br>Perform the appropriate channel management with the processes’ standard IO channels and the pipe channels to create a circular connection through the UNIX command</li><li>standard input to the command child will be sent as output from the parent</li></ol><h3 id="For-the-sort-command"><a href="#For-the-sort-command" class="headerlink" title="For the sort command"></a>For the sort command</h3><p>from your parent process, open the file for reading</p><ol><li>Read each line of the file and write it into (the parent’s) OUT pipe to the child process that has exec’d sort</li><li>Read the file back from the child running sort from the (parent’s) IN pipe, and write the required results to stdout (or a file if you choose)</li><li>sort must sort the data sent by the parent first by phone number area code and then by last name within each area code</li><li>Your equired output will be a summary of the sorted results returned by the child running sort that consists of a listing of each unique area code and the number of people found in the data sent to sort for that code</li></ol><h3 id="For-the-grep-command"><a href="#For-the-grep-command" class="headerlink" title="For the grep command"></a>For the grep command</h3><p>from your parent process, open the file for reading<br>Read each line of the file and write it into (the parent’s) OUT pipe to a child process that exec’d grep</p><ol><li>The child process running grep must filter its incoming lines, looking for any line that has the string “123” in it</li><li>The child process running grep must write back each matching line to the parent process by writing it into the (parent’s) IN pipe</li><li>You (the parent) must read back grep’s output from your IN pipe and print out a single number indicating how many lines had the matching string as your report. You must count the lines returned by grep in your parent process (do not have grep count the lines)</li><li>You must now repeat this grep exercise using the file</li></ol><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>熟悉父子进程和nameless pipe的话，这个作业难度并不高。不过需要注意的是，对EOF的处理，稍有不慎，程序将卡死在sort和grep中，无法退出。</p>]]></content>
    
    <summary type="html">
    
      Nameless pipes可以做很多事情，比如在父子进程中，通过nameless pipes进行父子进程的通信。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Database代写：ECS165A-NormalForm</title>
    <link href="https://tk1307993.coding.me/ECS165A-NormalForm.html"/>
    <id>https://tk1307993.coding.me/ECS165A-NormalForm.html</id>
    <published>2018-09-08T03:51:48.000Z</published>
    <updated>2018-09-08T03:54:20.974Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Normal From是数据库理论里面最恶心的问题，从1NF到6NF，加上BCNF，DKNF以及UF。不像编程作业，有运行结果作参考，做这种理论题简直是受罪，每一题都得反复推理。</p><p>像下面给出的这个作业，除了题量大以外，每个问题都是多解问题，拿满分几乎是不可能的事情。</p><p>1) For this problem you will consider following relation and set of FDs:<br>R(A,B,C,D,E)</p><p>AB → E</p><p>B → C</p><p>CE → A</p><p>AE → D</p><p>a) What are the keys of R?</p><p>b) Show that the set of FDs is a minimal basis; if it is not a minimal basis, find a minimal basis for the FDs.</p><p>c) What are all of the BCNF violations that follow from the FDs? (Don’t just consider the listed FDs, but all that follow).</p><p>d) Decompose R into BCNF. For each relation, list the keys, and make sure the set of FDs for each is a minimal basis.</p><p>e) What are all of the 3NF violations that follow from the FDs? (Don’t just consider the listed FDs, but all that follow).</p><p>f) Decompose R into 3NF. For each relation, list the keys, and make sure the set of FDs for each is a minimal basis.</p><p>g) What are all of the 4NF MVD violations that follow from the FDs?</p><p>h) Decompose R into 4NF. For each relation, list the keys, FDs and MVD.</p><p>i) If you project the relation R onto S(A,B,C) what nontrivial FDs and MVDs hold in S?</p><p>2) For this problem you will consider the following relations and FDs:<br>Courses(C,T,H,R,S,G)<br>C → T<br>HR → C<br>HT → R<br>HS → R<br>CS → G<br>Where C, T, H, R, S, and G are the course, teacher, hour, room, student, and grade respectively. With a proposed decomposition of:<br>R1(C, T, H)<br>R2(C, H, R, G)<br>R3(C, R, S)<br>a) Use the chase test to prove/disprove that holds HS → G in Courses.<br>b) Use the chase test to prove/disprove that holds THR → S in Courses.<br>c) Use the chase test to prove/disprove the proposed decomposition has a lossless join.<br>d) Decompose Courses into 3NF.<br>e) Which of your relations in 3NF are not in BCNF?<br>f) Which of your relations in 3NF are not in 4NF?</p><p>3) Design an academic genealogy database with one entity set: Academics.<br>Consider academics with doctoral degrees only. The information to record about academics includes their name, discipline, year of graduation, institution, dissertation title, dissertation chair, dissertation committee members (assume two others distinct from chair), and academic progeny.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>最后还是想说一下，这样的多个解的作业真的相当恶心，做的时候需要反复推导，查阅各种资料来证明，而且第二个问的chase test完全就是slides里面的方法，学习理解也花了不少时间。</p>]]></content>
    
    <summary type="html">
    
      Pathfinding是在平面上两点之间找出路径的问题。
    
    </summary>
    
      <category term="Other" scheme="https://tk1307993.coding.me/categories/Other/"/>
    
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：COMP3007 Pathfinding</title>
    <link href="https://tk1307993.coding.me/COMP3007-Pathfinding.html"/>
    <id>https://tk1307993.coding.me/COMP3007-Pathfinding.html</id>
    <published>2018-09-01T02:53:10.000Z</published>
    <updated>2018-09-01T02:57:44.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Pathfinding is the problem of finding a path between two points on a plane. It is a fundamental task in robotics and AI. Perhaps the most obvious usage of pathfnding is in computer games, when an object is instructed to move from its current position to a goal position, while avoiding obstacles (e.g., walls, enemy fire) along the way.</p><p>Pathfinding in commercial games is frequently accomplished using search algorithms. We consider a simplified version in this assignment. The following shows a 2D map drawn using ASCII characters:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span> X</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> X <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> X <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> X <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">7</span> <span class="number">1</span> X X X <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">8</span> <span class="number">8</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">X <span class="number">8</span> <span class="number">7</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Given a start position and an end position on the map, our aim is to find a path from the start position to the end position. The character “X” denotes an obstacle that cannot be traversed by a path, while the digits represent the elevation at the respective positions.</p><p>Any position is indicated by the coordinates (i, j), where i is the row number (ordered top to bottom) and j is the column number (ordered left to right). For example, the top left position is (1, 1), the bottom right is (10, 10), while the position with elevation “3” is (4, 9). Given start position (1, 1) and end position (10, 10), a possible path is</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* * * <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span> X</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> * <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> * * * * * * * <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> X <span class="number">1</span> <span class="number">1</span> * <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> X <span class="number">1</span> * * <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> * <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> X <span class="number">1</span> * * *</span><br><span class="line"><span class="number">7</span> <span class="number">7</span> <span class="number">1</span> X X X <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> *</span><br><span class="line"><span class="number">8</span> <span class="number">8</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> *</span><br><span class="line">X <span class="number">8</span> <span class="number">7</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> *</span><br></pre></td></tr></table></figure><p>Note that we use 4-connectedness for paths, which means any two points on the path are only connected if they are vertically or horizontally (but not diagonally!) adjacent.</p><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Following the lecture notes, we formulate the problem as follows:</p><ol><li>States: Any obstacle-free position (i; j) on the map.</li><li>Initial state: A position (i0, j0) given by the user.</li><li>Actions: Since we consider 4-connectedness, only four actions are available: Up, down, left and right (your program must expand each node in this order). Available actions for positions adjacent to the map boundary or obstacles are reduced accordingly.</li><li>Transition model: Moving left moves the current position to the left, etc.</li><li>Goal test: Check if the current state is the end position (i, j) given by the user.</li><li>Path cost: Given a map M and a path P = {(i0, j0), (i1, j1), … ,(iN, jN)}, the cost of the path is calculated. In words, the cost of a path is the sum of the costs between two adjacent points of the path, and the cost between adjacent points is 1 plus the difference between the elevation of the two points if we climb “uphill”, or simply 1 if we stay “level” or slide “downhill”.</li></ol><p>This means shorter paths which avoid climbing cost less. As an example, the cost in the path in the previous page is 25. What is the optimal (cheapest) path?</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>Solve pathfinding using Breadth-First Search (BFS), Uniform-Cost Search (UCS) and ASearch. You should base your program on the pseudocode GRAPH-SEARCH in the lecture slides, and carefully think about the appropriate data structures to use. For A Search, you must implement two heuristics:</p><ol><li>Euclidean distance between current position and end position.</li><li>Manhattan distance between current position and end position.</li></ol><p>For the map in Page 1 with start position (1, 1) and end position (10, 10), your program should help you answer these questions:</p><ol><li>Are the paths returned by the three methods different?</li><li>What about the optimality of the returned paths?</li><li>Which method is the most computationally and memory efficient?</li><li>Do the two heuristics for A* Search provide different solutions?</li><li>Does checking for repeated states matter in this problem?</li></ol>]]></content>
    
    <summary type="html">
    
      Pathfinding是在平面上两点之间找出路径的问题。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS207 Hotel Booking Application</title>
    <link href="https://tk1307993.coding.me/CS207-HotelBookingApplication.html"/>
    <id>https://tk1307993.coding.me/CS207-HotelBookingApplication.html</id>
    <published>2018-08-25T04:00:59.000Z</published>
    <updated>2018-08-25T04:04:18.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>一个成熟的酒店管理系统，还可以接入或被接入其他系统。只要做好接口设计，给出稳定、可拓展的接口，这类系统便可以反复利用。<br>当然，对于酒店管理系统的重构，也是十分头疼的一件事。由于要逐个梳理需求，在重构中要避免需求的落下。</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Below are the features of this project that you should implement in this course.</p><ol><li>As a user, he can login with a username and password and launch the hotel booking application.</li><li>As a user, he can search available rooms in the hotel by entering a departure date, and book the standard room, big bed room or business suite room.</li><li>As a user, he can display search results sorted by floor, cost and date.</li><li>As a user, he can cancel the reservation room.</li><li>This application will use a txt file to load the user’s information. The file should contains the following properties:<br>LastName, FirstName, Gender, Age, Email, CreditCardNumber, BillingAddress, ExpriyDate.</li></ol><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>本次作业需要实现酒店管理系统的一部分业务功能，即用户使用部分，包括了用户登录、预订查询、查询排序、预定房间和预订取消等功能。代码的实现需要结合所给出的框架来完成，因此熟悉框架的结构成为了一个不可缺少的过程。</p><p>需要注意的是，对于此类系统，一个通用的设计模型是：先判断传入参数和合法性，再判断是否拥有执行权限，最后再做相关业务逻辑。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>下面给出emailAddress地址的业务逻辑代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateEmailAddress</span><span class="params">(String emailAddress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (emailAddress == <span class="keyword">null</span> || emailAddress.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Pattern p = Pattern.compile(<span class="string">"\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*"</span>);</span><br><span class="line">    Matcher m = p.matcher(emailAddress);  </span><br><span class="line">    <span class="keyword">return</span> m.matches();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEmailAddress</span><span class="params">(String emailAddress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (validateEmailAddress(emailAddress) == <span class="keyword">false</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> EmailException(emailAddress);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// do business logic</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Hotel booking application，在软件工程中叫做Hotel reservation system，也就是酒店管理系统。这类系统的开发工作量，主要是根据需求，来实现其业务逻辑部分。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Programming Fundamentals" scheme="https://tk1307993.coding.me/tags/Programming-Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CSC120H Simulating Canadian Elections</title>
    <link href="https://tk1307993.coding.me/CSC120H-Simulating-Canadian-Elections.html"/>
    <id>https://tk1307993.coding.me/CSC120H-Simulating-Canadian-Elections.html</id>
    <published>2018-08-20T12:53:30.000Z</published>
    <updated>2018-08-20T12:58:23.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>高大上的Elections，特别是在大选中，投票往往会采用电子选箱，也就是智能选举系统。</p><p>相比纸质选票，电子计票有着快速计票、实时计票、节省人工成本、计票可回收利用等优点。尤其是差额票，对于候选人较多的情况，电子计票的优势就更大了。</p><p>电子计票系统中，最重要的部件就是识别有效选票、鉴别无效选票、统计选票，对识别器质量已经算法有较高的要求。</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>There are so many different kinds of voting systems, especial electronic voting system in the world. In this assignment you will be comparing four of them: Approval Voting; Plurality, also known as First Past the Post; Copeland’s Method and the Borda Count. You will be simulating Canadian elections, where voters are choosing between the four major federal parties (New Democratic Party, Green Party, Liberal Party, Conservative Party).</p><ol><li>Approval Voting: everyone can vote many options</li><li>Plurality: everyone can vote only one candidate</li><li>Copeland’s Method: everyone can rank the candidates</li><li>The Borda Count: everyone can rank the candidates</li></ol><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><h4 id="计票过程"><a href="#计票过程" class="headerlink" title="计票过程"></a>计票过程</h4><p>对于Approval Voting计票法，每人可投多个候选人，因此不需要考虑无效选票，检票时，当发现其中候选人之一出现选票时，记录下来<br>对于Plurality计票法，每人仅可投一位候选人，因此当出现多位时，该选票记为废票。有效票则记录在候选人票数中<br>对于Copeland’s Method计票法，每人给出排名，如果允许重复排名则不会出现无效选票，反之则需要剔除无效选票。根据选票中的票值排序，按照权值加到候选人票数，并记录下来<br>对于The Borda Count计票法，类似Copeland’s Method</p><h4 id="验票过程"><a href="#验票过程" class="headerlink" title="验票过程"></a>验票过程</h4><p>对于Approval Voting计票法，验票则是将候选人的票数从高到低排序<br>对于Plurality计票法，同Approval Voting，将候选人的票数从高到低排序<br>对于Copeland’s Method计票法，将候选人的加权和从高到低排序<br>对于The Borda Count计票法，类似Copeland’s Method，将候选人的加权和从高到低排序</p>]]></content>
    
    <summary type="html">
    
      高大上的Elections，特别是在大选中，投票往往会采用电子选箱，也就是智能选举系统。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS4410 GamesTechnologyAssignment</title>
    <link href="https://tk1307993.coding.me/CS4410-GamesTechnologyAssignment.html"/>
    <id>https://tk1307993.coding.me/CS4410-GamesTechnologyAssignment.html</id>
    <published>2018-08-15T12:17:47.000Z</published>
    <updated>2018-08-15T12:19:47.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>相比同时代的Space Invaders，由于Galaxian采用了当时的最新技术，游戏体验有了质的飞跃，是当时最受欢迎的街机游戏之一。</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment you develop an arcade style name Galaxian. The game needs to be implemented in OpenGL engine. You should define your own game objectives, such as final goals and the level of player interaction. Lives and scoring should also be planned.</p><p>The difficulty lies in how to manage the objects on the screen, the enemy flight path, in particular, and how they can track the ship. The algorithm can avoid the enemy collisions between each other, and how to aim at the player’s position.<br>Your program provide the following functions:</p><ol><li>OOP design</li><li>OpenGL graphics</li><li>a simple intro menu</li><li>texture animations</li><li>sound</li></ol><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Galaxian也就是FC小蜜蜂，需要实现的游戏元素有：</p><ol><li>我方飞机的交互，上下左右键，以及发射子弹，暂停等按键</li><li>敌方飞机生成，需要自动生成敌方飞机，以及敌方飞机被消灭后新敌方飞机的生成</li><li>碰撞检测，包括我方飞机和敌方飞机、我方子弹和敌方飞机、敌方子弹和我方飞机</li><li>得分、生命、关卡的逻辑，包括难度</li><li>音效、图像、画质等多媒体元素</li><li>AI，敌机需要有一定智能，包括躲避、跟踪、击落我方飞机</li></ol><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>下面给出鼠标键盘交互的逻辑<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Galaxian::HandleEvents(Event* event) &#123;</span><br><span class="line">  kbarray = GetKeyState(<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">switch</span>(event-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> KEYDOWN:</span><br><span class="line">      OnKeyDown(event-&gt;key.keysym.sym, event-&gt;key.keysym.mod, event-&gt;key.keysym.unicode);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> KEYUP:</span><br><span class="line">      OnKeyUp(event-&gt;key.keysym.sym, event-&gt;key.keysym.mod, event-&gt;key.keysym.unicode);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MOUSEBUTTONDOWN:</span><br><span class="line">      <span class="keyword">switch</span>(event-&gt;button.button) &#123;</span><br><span class="line">        <span class="keyword">case</span> BUTTON_LEFT:</span><br><span class="line">          OnLButtonDown(event-&gt;button.x, Height-event-&gt;button.y);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BUTTON_RIGHT:</span><br><span class="line">          OnRButtonDown(event-&gt;button.x, Height-event-&gt;button.y);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BUTTON_MIDDLE:</span><br><span class="line">          OnMButtonDown(event-&gt;button.x, Height-event-&gt;button.y);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MOUSEBUTTONUP:</span><br><span class="line">      <span class="keyword">switch</span>(event-&gt;button.button) &#123;</span><br><span class="line">        <span class="keyword">case</span> BUTTON_LEFT:</span><br><span class="line">          OnLButtonUp(event-&gt;button.x, Height-event-&gt;button.y);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BUTTON_RIGHT:</span><br><span class="line">          OnRButtonUp(event-&gt;button.x,Height-event-&gt;button.y);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BUTTON_MIDDLE:</span><br><span class="line">          OnMButtonUp(event-&gt;button.x,Height-event-&gt;button.y);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      第一代Galaxian游戏在1979年登场，之后在1981年推出了升级版Galara，以及1984年的加强版Gaplus。作为早期电子游戏，Galaxian在街机市场是十分火爆的。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS635-DigitalImageProcessing</title>
    <link href="https://tk1307993.coding.me/CS635-DigitalImageProcessing.html"/>
    <id>https://tk1307993.coding.me/CS635-DigitalImageProcessing.html</id>
    <published>2018-08-14T13:29:17.000Z</published>
    <updated>2018-08-14T13:34:08.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>市场上有一些成熟软件可以做Digital image process，如Matlab和R。这两款软件提供了丰富的图像处理函数，以及优秀的交互，和简易的调试功能，因此受到图像处理工程师的青睐。</p><p>C++虽然也可以使用二维数组的存储方法来存储图像，并实现等同于Matlab和R的算法。但是编程的复杂性远远大于前者。</p><p>虽然说，用C/C++编出的图像处理软件性能会超过Matlab和R，但是这种差异需要大规模的图像才会体现出来。而目前业内对于大规模的图像处理，往往会采用云计算分布式的做法，而不是单纯的使用一台计算机进行运算。</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you are required to build a simple software framework for digital image processing.<br>Your program should be able to read and write PPM / PGM image files (either binary or ASCII), and perform color or geometric transformation.</p><p>The programming language is C/C++. The preferred programming environment is Visual C++ (VC) 2012. If you choose to use a different platform, your submitted source code should be compatible with a Visual C++ .Net compiler, i.e., one can build a working executable for Windows from your source code.</p><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>本题的复杂的地方在于PPM / PGM图像格式的解码以及存储。<br>PPM格式由两部分组成：</p><ol><li>图像的存储格式以及图像的特征（包括魔数、图像大小）</li><li>图像的数据部分（从左到右、从上往下）</li></ol><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>下面给出PPM文件的读取函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> image&lt;rgb&gt; *PPM::loadPPM(<span class="keyword">const</span> <span class="keyword">char</span> *name) &#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">2048</span>];</span><br><span class="line">  <span class="comment">/* read header */</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="function">ifstream <span class="title">file</span><span class="params">(name, <span class="built_in">std</span>::ios::binary | <span class="built_in">std</span>::ios::in)</span></span>;</span><br><span class="line">  readHeader(file, buf);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strncmp</span>(buf, <span class="string">"P5"</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Version not support."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  readHeader(file, buf);</span><br><span class="line">  <span class="keyword">int</span> width = atoi(buf);</span><br><span class="line">  readHeader(file, buf);</span><br><span class="line">  <span class="keyword">int</span> height = atoi(buf);</span><br><span class="line">  readHeader(file, buf);</span><br><span class="line">  <span class="comment">/* read data */</span></span><br><span class="line">  image&lt;rgb&gt; *im = <span class="keyword">new</span> image&lt;rgb&gt;(width, height);</span><br><span class="line">  file.read((<span class="keyword">char</span>*)imPtr(im, <span class="number">0</span>, <span class="number">0</span>), width * height * <span class="keyword">sizeof</span>(rgb));</span><br><span class="line">  <span class="keyword">return</span> im;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本题在于PPM格式处理
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Image Processing" scheme="https://tk1307993.coding.me/tags/Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS251 Sorting</title>
    <link href="https://tk1307993.coding.me/CS251-Sorting.html"/>
    <id>https://tk1307993.coding.me/CS251-Sorting.html</id>
    <published>2018-08-12T03:22:06.000Z</published>
    <updated>2018-08-12T03:23:52.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Implement void quicksort(unsigned int *a, int n) as a “C” style function in the file quicksort.cc</p><ol><li>The pivot should always be chosen as the first element of the array.</li><li>See the given quicksort.cc file for how to determine running times. You can modify this file as you wish but I should be able to run it to get your output in the file specified.</li><li>The main function in quicksort.cc reads from the file “quicksortinput” the n integers and writes the n integers to the file “quicksortoutput” in ascending sorted order. See “quicksortsampleinput” and “quicksortsampleoutput” for formatting details. Please make sure that your program can EXACTLY reproduce that output file given the input file. You may want to use the “diff” program to test this.</li><li>The function sorts the array a of n positive integers with the quick sort algorithm.</li></ol><p>Implement void radixsort(unsigned int *a, int n) as a “C” style function in the file radixsort.cc</p><ol><li>The elements of the array are positive and are represented with 32 bits.</li><li>See the given radixsort.cc file for how to determine running times. You can modify this file as you wish but I should be able to run it to get your output in the file specified.</li><li>The main function in radixsort.cc reads from the file “radixsortinput” the n integers and writes the n integers to the file “radixsortoutput” in ascending sorted order. See “radixsortsampleinput” and “radixsortsampleoutput” for formatting details. Please make sure that your program can EXACTLY reproduce that output file given the input file. You may want to use the “diff” program to test this.</li><li>The function sorts the array a of n positive integers using the radix sort algorithm.</li></ol><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>需要实现Quicksort算法以及Radix sort算法。</p><p>本题难度不大，但需要理解和掌握这两种算法的原理和特点。</p><p>此外需要注意的是，测试集并非是结构化的数据，需要对测试集中字符进行分割，同时处理空行的问题。</p>]]></content>
    
    <summary type="html">
    
      工程编程中，Sorting通常都是出现在三方库中直接调用。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS251 AVLTree</title>
    <link href="https://tk1307993.coding.me/CS251-AVLTree.html"/>
    <id>https://tk1307993.coding.me/CS251-AVLTree.html</id>
    <published>2018-08-11T02:29:31.000Z</published>
    <updated>2018-08-11T02:31:40.006Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>AVL Tree也就是AVL树，是早的自平衡二叉查找树。其任意节点的两颗子树最大高度差仅为1，因此也被称为高度平衡树。</p><p>相对红黑树，AVL树目前的应用场景已经非常下了，大部分还是用于学习和研究。</p><p>AVL树最大的特点是，树的查找、插入和删除在平均和最坏情况下都是O(log n)，但增加和删除节点可能需要旋转这颗树，使其重新平衡。</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Implement a C++ AVL Tree class AVLTree in files AVLTree.h and AVLTree.cpp</p><ol><li>The constructor AVLTree () builds the AVLTree.</li><li>The destructor ~AVLTree() deallocates all dynamically allocated memory.</li><li>The void insert(int k) method inserts the key k into the AVLTree, and does not do anything if the key is already stored.</li><li>The void remove(int k) method removes key k from the AVLTree and does not do anything if AVLTree does not contain key k.</li><li>The items stored are positive integers which serve both as keys and as elements.</li><li>The void printInorder() method prints the tree to the standard output using an inorder traversal; it prints a (key, height) pair for each node and ends with a newline.</li><li>The void printPostorder() method prints the tree to the standard output using postorder traversal; it prints a (key, height) pair for each node and ends with a newline.</li></ol><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>本题需要用实现一个AVL树。AVL树本身代码不复杂，但是需要考虑到接口兼容STL库，这才是本题最大的难点。</p><p>STL库，作为C++中大量使用模板的库，对于初学者来说十分难以理解。</p><p>我的建议是可以参考一些简易的STL实现，有简入难，一步一步学习。</p>]]></content>
    
    <summary type="html">
    
      STL库，作为C++中大量使用模板的库，对于初学者来说十分难以理解。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="STL" scheme="https://tk1307993.coding.me/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP1001-MoreTextProcessing</title>
    <link href="https://tk1307993.coding.me/COMP1001-MoreTextProcessing.html"/>
    <id>https://tk1307993.coding.me/COMP1001-MoreTextProcessing.html</id>
    <published>2018-08-08T15:33:20.000Z</published>
    <updated>2018-08-08T15:35:51.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>用Python的一个优势便是十分适合Text processing，由于Python内建了许多函数，对于文字、字符的处理十分便捷，如字符串连接、字符串截取、字符串查找、字符串替换、字符串比较、字符串分割、字符串翻转、字符串编码等，都有对应的函数进行处理。相比C语言，节省了很多开发工作量。</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This question prints the leaves of a symmetric tree. A user will be prompted for a symbol and a positive position for the tip of the leaves. Starting from the tip, the tree will fan out on both sides symmetrically until left side of the leaves reaches the left edge, assuming that the right edge has no limit. For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Please enter a symbol: *</span><br><span class="line">Please enter a positive position</span><br><span class="line">of the symbol on the first line: 10</span><br><span class="line"><span class="code">         *</span></span><br><span class="line"><span class="code">        ***</span></span><br><span class="line"><span class="code">       *****</span></span><br><span class="line"><span class="code">      *******</span></span><br><span class="line"><span class="code">     *********</span></span><br><span class="line"><span class="code">    ***********</span></span><br><span class="line">   <span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span><br><span class="line">  <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br></pre></td></tr></table></figure><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>本题就是一个简单的字符串处理，注意逻辑处理就好，难度不大，直接上代码。</p><p>不过越是容易的题目，越不容易写出精简的代码，本题打印最简单的方法可由一行代码实现。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="comment"># user input</span></span><br><span class="line">  symbol = input(<span class="string">"Please enter a symbol: "</span>)</span><br><span class="line">  pos = eval(input(<span class="string">"Please enter a positive position \nof the symbol on the first line: "</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print the leaves</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(pos):</span><br><span class="line">      print((pos - <span class="number">1</span> - i) * <span class="string">" "</span> + (<span class="number">2</span> * i + <span class="number">1</span>) * symbol)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本题就是一个简单的字符串处理，注意逻辑处理就好，难度不大，直接上代码。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Programming Fundamentals" scheme="https://tk1307993.coding.me/tags/Programming-Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS3530 Rat In A Maze Problem</title>
    <link href="https://tk1307993.coding.me/CS3530-RatInAMazeProblem.html"/>
    <id>https://tk1307993.coding.me/CS3530-RatInAMazeProblem.html</id>
    <published>2018-08-07T12:19:28.000Z</published>
    <updated>2018-08-07T12:23:13.292Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Rat in a maze problem，是用回溯法求解迷宫问题的经典例题。回溯法是一种优选的搜索法，根据择优的条件向前或向后搜索，最终获得目标。当向前搜索到某一步，根据目标函数得到的结果不是最优时，进行回溯，重新选择探索方向。由此得到最优解。<br>回溯法解决问题的基本步骤一般为：</p><ol><li>根据给定问题，定义目标函数，并保证该问题至少有一个解</li><li>确定搜索的空间结构，确保回溯法可以遍历整个解空间</li><li>通过深度优先算法的形式，搜素整个解空间，并通过适当剪纸来减少冗余的搜索</li></ol><p>回溯法的一个应用场景便是解决迷宫问题。</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this problem you will solve the “Rat in a maze problem”, using Stacks and Queues (Lectures 12-14).<br>The main points we shall be covering are:</p><p>Using Stacks and Queues in an application</p><ol><li>Re-enforcement of the usage and advantages of makefiles / make utility in UNIX/Linux</li><li>Use of abstract data types in C++, and separate compilation</li><li>Use of header files and libraries for Stacks and Queues</li></ol><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>本题需要采用Stack和Queue来解决迷宫问题。</p><p>栈用于存放回溯算法中的搜索路径，由于栈的后进先出特性，可以很容易的实现回溯。</p><p>队列用于存放已经搜索过的最优路径，由于队列的先进先出特性，可以很容易的进行目标函数的计算。</p><p>目标函数：从(0, 0)走到(N, N)的Taxicab geometry，也就是曼哈顿距离。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>题目搜给的迷宫为<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">011101000100000</span></span><br><span class="line"><span class="number">010001100111100</span></span><br><span class="line"><span class="number">011001000000000</span></span><br><span class="line"><span class="number">001000010111111</span></span><br><span class="line"><span class="number">001011000010000</span></span><br><span class="line"><span class="number">001000101010100</span></span><br><span class="line"><span class="number">000010010000100</span></span><br></pre></td></tr></table></figure></p><p>我们需要利用回溯法，从左上角走到右下角</p><p>下面给出程序的回溯搜索算法部分的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> SearchEngine::DoMove(<span class="keyword">int</span> movePosition) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">switch</span> (movePosition) &#123;</span><br><span class="line">    <span class="keyword">case</span> MOVE_LEFT:  </span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_LEFT) &amp;&amp; SearchEngine::Search(MOVE_LEFT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_UP) &amp;&amp; SearchEngine::Search(MOVE_UP, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_DOWN) &amp;&amp; SearchEngine::Search(MOVE_RIGHT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;      </span><br><span class="line">      SearchEngine::DoMove(MOVE_RIGHT);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVE_UP:</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_LEFT) &amp;&amp; SearchEngine::Search(MOVE_LEFT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_UP) &amp;&amp; SearchEngine::Search(MOVE_UP, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_RIGHT) &amp;&amp; SearchEngine::Search(MOVE_RIGHT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      SearchEngine::DoMove(MOVE_DOWN);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVE_RIGHT:</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_UP) &amp;&amp; SearchEngine::Search(MOVE_UP, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_RIGHT) &amp;&amp; SearchEngine::Search(MOVE_RIGHT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_DOWN) &amp;&amp; SearchEngine::Search(MOVE_RIGHT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      SearchEngine::DoMove(MOVE_LEFT);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MOVE_DOWN:</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_LEFT) &amp;&amp; SearchEngine::Search(MOVE_LEFT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_RIGHT) &amp;&amp; SearchEngine::Search(MOVE_RIGHT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (SearchEngine::TryMove(MOVE_DOWN) &amp;&amp; SearchEngine::Search(MOVE_RIGHT, length - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      SearchEngine::DoMove(MOVE_UP);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Rat in a maze problem，是用回溯法求解迷宫问题的经典例题。回溯法是一种优选的搜索法，根据择优的条件向前或向后搜索，最终获得目标。
    
    </summary>
    
      <category term="Writing" scheme="https://tk1307993.coding.me/categories/Writing/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Written代写：COMP435 Multimedia Technologies TME5</title>
    <link href="https://tk1307993.coding.me/COMP435-Multimedia-Technologies-TME5.html"/>
    <id>https://tk1307993.coding.me/COMP435-Multimedia-Technologies-TME5.html</id>
    <published>2018-08-06T13:14:25.000Z</published>
    <updated>2018-08-06T13:16:19.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Glossary"><a href="#Glossary" class="headerlink" title="Glossary"></a>Glossary</h3><p>For TME 5, you will prepare a glossary of key terms presented throughout the course. You will write short descriptions of five terms from each unit in your own words as you progress through the course.<br>This assignment is intended to help you attain a deeper understanding of the various concepts developed in the course.<br>Deliverable<br>At the end of the course, you will compile a single list of all the terms you have defined and submit them in a Word document of pdf. Include a cover page that states your name, ID, course number, course name, date, and TME number.<br>Evaluation</p><ol><li>Correctness (80%): Have you correctly described the key terms?</li><li>Presentation (20%): Is the material presented in a manner that is easy to read?</li></ol>]]></content>
    
    <summary type="html">
    
      本题使用英文写作，总结多媒体技术
    
    </summary>
    
      <category term="Writing" scheme="https://tk1307993.coding.me/categories/Writing/"/>
    
    
  </entry>
  
  <entry>
    <title>Written代写：COMP435 Multimedia Technologies TME4</title>
    <link href="https://tk1307993.coding.me/COMP435-Multimedia-Technologies-TME4.html"/>
    <id>https://tk1307993.coding.me/COMP435-Multimedia-Technologies-TME4.html</id>
    <published>2018-08-05T02:15:49.000Z</published>
    <updated>2018-08-05T02:18:46.883Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>TME 4 is a written assignment. The purpose of this assignment is to help you understand the architecture of a media server and how it can be used in one of the multimedia applications. </p><p>The report should have two parts.</p><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>In this part you will evaluate one open source media server you may find. In case you are not sure, you may try VideoLan (<a href="http://www.videolan.org/" target="_blank" rel="noopener">http://www.videolan.org/</a>) or Icecast (<a href="http://www.icecast.org/)" target="_blank" rel="noopener">http://www.icecast.org/)</a>. </p><p>VideoLan is recommended, as the documentation is more readily available. However, you might want to choose Icecast if you are planning to write on Internet Radio (see part 2). All other open source projects are acceptable.<br>In the report you should have the following:</p><ol><li>A one- to two-page summary of a brief history of the server.</li><li>A three- to five-page summary of the functionalities of the media server. At a minimum you should describe all technical details including the streaming protocols used or available, the clients supported, the formats supported, support of multicast, any compliance issues, and platforms supported.</li><li>An installation and a system management example.</li><li>A list of references.</li><li>Total length of part 1 should be about 6 pages.</li></ol><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>In this part you will develop a strategy to implement one of the following applications using the media server you chose in Part 1:</p><ol><li>Video serving</li><li>Internet radio station</li><li>Videoconferencing</li><li>Live broadcasting</li></ol><p>In your report you should include:</p><ol><li>A graphic design of your application</li><li>Assumptions of your client machines (desktop or laptop computers, mobile devices).</li><li>Logging of user feedback.</li><li>A list of references.<br>Total length of part 2 should be about 6 pages. If you have a lot of graphs or pictures, you may extend the number of pages.</li></ol>]]></content>
    
    <summary type="html">
    
      本题使用英文写作，理解多媒体播放器的架构和应用
    
    </summary>
    
      <category term="Writing" scheme="https://tk1307993.coding.me/categories/Writing/"/>
    
    
  </entry>
  
  <entry>
    <title>Written代写：COMP435 Multimedia Technologies TME3</title>
    <link href="https://tk1307993.coding.me/COMP435-Multimedia-Technologies-TME3.html"/>
    <id>https://tk1307993.coding.me/COMP435-Multimedia-Technologies-TME3.html</id>
    <published>2018-08-04T02:16:30.000Z</published>
    <updated>2018-08-04T02:21:30.159Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>TME 3 is a written assignment. The idea of this exercise is to investigate details inside a codec using Theora and Vorbis.</p><p>All relevant information you may find in xiph: <a href="http://xiph.org/ogg/" target="_blank" rel="noopener">http://xiph.org/ogg/</a></p><h3 id="Part-1-Vorbis"><a href="#Part-1-Vorbis" class="headerlink" title="Part 1: Vorbis"></a>Part 1: Vorbis</h3><p>Your report should contain the following:</p><ol><li>A one- to two-page summary of Vorbis.</li><li>Technical details including, but not limited to, sample rate, bit rate, compression ratio, support of variable and constant bit rate, brief specification of Vorbis.</li><li>A comparison of Vorbis and MP3. You may search the Internet for any comparison reports of listening quality. Note that you should give the comparison of different bit rates.</li><li>A list of references</li><li>Total length of part 1 should be about 5 pages.</li></ol><h3 id="Part-2-Theora"><a href="#Part-2-Theora" class="headerlink" title="Part 2: Theora"></a>Part 2: Theora</h3><p>Your report should contain the following:</p><ol><li>A one- to two-page summary of Theora.</li><li>Technical details including, but not limited to, algorithms used, brief specification of Theora, bitrate and resolution supported, and o/s supported.</li><li>A comparison of Theora and MPEG-4. You may search the Internet for any comparison reports of viewing experience or quality of Theora and MPEG-4. Notice that the concept of video quality is very rich, diverse, and extensively studied. It is not the intention of this exercise to present a survey on the concept of video quality to compare Theora and MPEG-4. You only need to give one or two reports that help the reader understand at least one aspect of the viewing differences between the two codecs. Be sure to include in your report the scope and meaning of video quality.</li><li>A list of references</li><li>Total length of part 2 should be about 5 pages.</li></ol><h3 id="Part-3-Ogg"><a href="#Part-3-Ogg" class="headerlink" title="Part 3: Ogg"></a>Part 3: Ogg</h3><p>What is Ogg and how is it related to Vorbis and Theora? Also give a brief summary on the Ogg container format. Total length of part 3 should be about 3 pages.</p>]]></content>
    
    <summary type="html">
    
      本题使用英文写作，分析介绍对比Vorbis，Theora，Ogg
    
    </summary>
    
      <category term="Writing" scheme="https://tk1307993.coding.me/categories/Writing/"/>
    
    
  </entry>
  
  <entry>
    <title>Java代写：COMP435 Multimedia Technologies TME2</title>
    <link href="https://tk1307993.coding.me/COMP435-Multimedia-Technologies-TME2.html"/>
    <id>https://tk1307993.coding.me/COMP435-Multimedia-Technologies-TME2.html</id>
    <published>2018-08-03T13:06:55.000Z</published>
    <updated>2018-08-03T13:10:20.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The purpose of this exercise is to help you understand the various parameters that affect the quality of a compressed image. Using JPEG as an example, you are required to write a program to control the quantization matrices used for compression. A brief discussion of the impact is included as part of the assignment.</p><h3 id="Follow-these-steps"><a href="#Follow-these-steps" class="headerlink" title="Follow these steps:"></a>Follow these steps:</h3><ol><li><p>Download this image. Note that the image is in bitmap format and is quite large. If you are running on unstable Internet service and have a problem downloading the file, please contact your tutor for assistance. <strong>flower.bmp</strong></p></li><li><p>Write a Java class that converts the bitmap image to JPEG format.</p></li><li>Add a second viewable pane on your image viewer in TME 1. The original pane should display the original bitmap image, and the second pane should display the converted JPEG image. <strong>TME2_Sample_Screen.JPG</strong></li><li>Add a mechanism to input the quantization matrix. It should have three options: <ol><li>default JPEG matrix - the numbers can be found on Table 9.1 and Table 9.2 of the textbook; </li><li>a constant number;</li><li>DC component only (i.e. set all other numbers to zero).</li></ol></li><li>Add an option to the File menu to output the compressed JPEG image to the hard disk.</li></ol><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><ol><li>All source codes.</li><li>A setup guide to allow your tutor to set up the necessary environment and run the programs.</li><li>Four compressed output files: <ol><li>with default quantization matrix; </li><li>A low constant number (e.g. 1); </li><li>A absurdly high number (e.g. 200); </li><li>DC component only.</li></ol></li><li>A discussion document – discuss the various effects of the output file. Why are they like that? Will JPEG 2000 improve the quality?</li><li>All files must be zipped into one single file using Winzip. Do not include the original image.</li></ol>]]></content>
    
    <summary type="html">
    
      本题使用Java将BMP图片转换成JPEG格式
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="BMP" scheme="https://tk1307993.coding.me/tags/BMP/"/>
    
      <category term="JPEG" scheme="https://tk1307993.coding.me/tags/JPEG/"/>
    
  </entry>
  
</feed>
