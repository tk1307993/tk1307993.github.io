<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-10-06T08:51:39.730Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS812-Safari-Rush-Hour</title>
    <link href="https://tk1307993.coding.me/CS812-Safari-Rush-Hour.html"/>
    <id>https://tk1307993.coding.me/CS812-Safari-Rush-Hour.html</id>
    <published>2019-10-06T08:49:29.000Z</published>
    <updated>2019-10-06T08:51:39.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Safari Rush Hour is a variation on the popular Rush Hour game from Binary Arts. The object is to move your car through a tangle of obstacles to reach the exit. Your job is to write a program to find the best way out of the traffic.</p><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><p>Safari Rush Hour is played on a 7 x 7 game grid with up to 19 playing pieces (safari rover and animals). The object is to slide the safari rover through the exit gate in the playing grid frame. Each puzzle gives a configuration of animals and the safari rover. To play, you shift the animals and safari rover up, down, left, and right until the path is clear to make your escape. Note: lions, lionesses, impalas, zebras, rhinos, and elephants move only forward and reverse. The large square safari rover and the wild dogs (termite mound) may move up, down, right, and left. No lifting of playing pieces off of the gameboard grid surface once play has begun.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The predecessor game of Safari Rush Hour is Rush Hour. It is played on a smaller board, with a different number and different shaped pieces. Try playing the applet here. You can practice on this applet to get an idea of how to solve Safari Rush Hour puzzles.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>A sample problem input looks as follows:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">P J1</span><br><span class="line">.......</span><br><span class="line"><span class="selector-class">.rrrf</span>..</span><br><span class="line">hh.<span class="selector-class">.fq</span>.!</span><br><span class="line">o<span class="selector-class">.xx</span><span class="selector-class">.q</span>.!</span><br><span class="line">o<span class="selector-class">.xx</span><span class="selector-class">.q</span>.</span><br><span class="line">ob.<span class="selector-class">.ee</span>.</span><br><span class="line"><span class="selector-class">.bppp</span>..</span><br></pre></td></tr></table></figure></p><p>The first line indicates a problem (“P”) and the name of the problem (“J1”). The problems are all numbered, and the first letter indicates the difficulty of the problem: “J” is junior, “B” is beginner, “I” is intermediate, “A” is advanced, and “E” is expert. In the puzzle specification, the letters stand for the playing pieces: 2x2 pieces: termite mounds (u,v) and safari rover (x); 3x1 pieces: elephant (o, q, s) and rhino (p, r); 2x1 pieces: lion (a, f), lioness (d, g, j), impala (b, h, i, k) and zebra (c, e). The actual names do not matter; all that is important is the shape of each of the pieces and the way that they move. The “!” indicates the exit (the exit position is fixed and does not change from puzzle to puzzle).</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Using A<em> or IDA</em>, your assignment is to solve a given puzzle in the minimum number of moves with the smallest search tree possible. The latter implies enhancing A<em>/IDA</em> to eliminate as much of the search tree as possible using some of the standard techniques in the literature (or possibly some of your own application-dependent enhancements). Files a2-orig.data, a2-deep.data, a2-vast.data, a2-fiendish.data contain test sets of problems for evaluating your solutions.</p><p>Report solution using the following format:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solution <span class="string">[id]</span> <span class="string">[t]</span> <span class="string">[n]</span> <span class="string">[move_1]</span> ... <span class="string">[move_n]</span></span><br></pre></td></tr></table></figure></p><p>where [id] is the problem id, [t] is the wallclock time in seconds your program required to find the solution (or “timeout” if your program timed out - see -t options below) [n] is the number of moves and [move_i] is a move encoded by specifying the name of the piece, its move direction (“l”eft, “r”ight, “u”p, or “d”own) followed by the number of squares that the piece moves. For example, a solution line for the puzzle above is:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solution J1 <span class="number">0.15</span> <span class="number">5</span> el1 qd2 fu1 xu1 xr5</span><br></pre></td></tr></table></figure></p><p>The length of a solution is the number of move strings. Note that the rover must be moved off the board completely. Test your program on the junior/beginner problems. Then work your way up to the more difficult ones.</p><p>Your program should output the following. For each input problem, I want to see statistics on the number of nodes searched, execution time, average h-value for all nodes where an evaluation occurred in the tree, and min/average/max depth of nodes where a cutoff occurred. When the program successfully terminates, print out the solution.</p><h3 id="Specifications"><a href="#Specifications" class="headerlink" title="Specifications"></a>Specifications</h3><p>Your program should take input from stdin and output to stdout. The input is in the format given above possibly containing multiple positions which need to be solved by your program in turn.</p><p>You program must be single-threaded and use no more than 200 MB of RAM. You must implement command-line option -t n, where n is an integer. This option sets the program to stop searching a position after n seconds of real time. If a timeout occurs your program must report “timeout” as time and proceed with the next problem.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>A tar file that contains your source code, a makefile, and a report in pdf format. Your executable must be named safari. Late assignments will not be accepted!</p><p>In the report, give me a description of your program. Skip the basics (such as A<em>/IDA</em>). I want to know any search enhancements that you tried. Describe your heuristic function. Tell me what you did that was interesting. What problems did you encounter? How can your solution be improved? This document must be no longer than five pages. Include a table of experimental results that shows the (positive?) impact of your enhancements.</p>]]></content>
    
    <summary type="html">
    
      代写程序解决类似华容道的问题，用A*算法实现，很有意思的一个作业。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>CS110-Higher-Order-Functions</title>
    <link href="https://tk1307993.coding.me/CS110-Higher-Order-Functions.html"/>
    <id>https://tk1307993.coding.me/CS110-Higher-Order-Functions.html</id>
    <published>2019-10-04T00:57:10.000Z</published>
    <updated>2019-10-04T00:59:45.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In the problems from the last homework, we did a bit of rudimentary Scrabble scoring. Your ultimate task here is to write a function that takes as input a rack - a list of letters - and returns the highest scoring word that can be made with those letters. This is the key ingredient in a computerized Scrabble game!</p><p>In this problem, you may use recursion as well as the built-in higher-order functions map, filter, and reduce. In fact, if you write a function that needs to process a long list (e.g. a dictionary) with more than a few hundred items in it, you are much better off letting map, filter, or reduce cruise through those lists since they have been optimized to work very fast.</p><p>There will be a few places here where using anonymous functions (lambda) is probably the cleanest and nicest way to do business. Use it when it’s the cleanest way to proceed.</p><p>One of the objectives of this problem is to have you think about designing a more complicated program that involves several functions. You have complete autonomy in deciding what functions to write in order to reach the ultimate goal (see more on the two required functions below). Try to think carefully about which functions you will need and try to implement those functions so that they are as simple and clean as possible. Part of your score on this problem will be based on the elegance of your overall design and individual functions.</p><p>Our solution has fewer than 9 functions, two of which we modified from our solution to Homework 1. The remaining 7 (or so) functions range from one to four lines of code per function. While you are not required to have the same number of functions and you may have a few slightly longer functions, this is intended to indicate that there is not much code that needs to be written here!</p><p>Be sure to have a comment at the top of the file with your name(s), the filename, and the date. Any function that is even a bit complicated should at least have a short comment explaining to the reader how this function works. Also, include a docstring for every function that you write.</p><p>All of your work should go into a single file named scrabble.py. Any tests and their results should go into this file, commented out of course. Make sure your file loads without producing any output. We will test your program by loading this file and testing your functions. Be sure they are properly named.</p><ol><li>Firstly, rewrite your definition of letterScore(letter, scoreList&gt; so it makes use of the built-in function filter.</li><li>Secondly, rewrite your definition of wordScore(word, scoreList) so that it makes use of the built-in map and reduce.</li><li>As an exercise in writing list comprehensions, define the following variables, using expressions made up of list comprehensions:<br>words – all of the words in the list Dictionary.<br>twoLetterWords – all of the words in the list Dictionary having exactly two letters.<br>lengths – a list of only the lengths of all words in Dictionary.</li><li>Now the main problem.<br>A bit later in this problem, we’ll give you a fairly large dictionary of English words to use. For now, we recommend that you use the following tiny dictionary during the course of testing and development. Include this line near the top of your file. Now, it’s a global variable that can be used by any of your functions in that file. Similarly, you should include the scrabble letter score list from Homework 1.</li></ol><p>Don’t try to change the values of these global variables! As we’ll see soon, that can make Python angry. However, there’s no need to change the contents of the Dictionary or the scrabble letter scores during execution of the program.</p><h3 id="The-details"><a href="#The-details" class="headerlink" title="The details"></a>The details</h3><p>Ultimately, there are two functions that we will be testing.</p><p>scoreList(Rack) takes as input a Rack which is a list of lower-case letters and returns a list of all of the words in the global Dictionary that can be made from those letters and the score for each one. Specifically, this function returns a list of lists, each of which contains a string that can be made from the Rack and its Scrabble score. Here are some examples using the tiny Dictionary above:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scoreList([<span class="string">"a"</span>, <span class="string">"s"</span>, <span class="string">"m"</span>, <span class="string">"t"</span>, <span class="string">"p"</span>])</span><br><span class="line">[[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'am'</span>, <span class="number">4</span>], [<span class="string">'at'</span>, <span class="number">2</span>], [<span class="string">'spam'</span>, <span class="number">8</span>]]</span><br><span class="line">&gt;&gt;&gt; scoreList([<span class="string">"a"</span>, <span class="string">"s"</span>, <span class="string">"m"</span>, <span class="string">"o"</span>, <span class="string">"f"</span>, <span class="string">"o"</span>])</span><br><span class="line">[[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'am'</span>, <span class="number">4</span>], [<span class="string">'foo'</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure></p><p>The order in which the words are presented is not important.</p><p>bestWord(Rack) takes as input a Rack as above and returns a list with two elements: the highest possible scoring word from that Rack followed by its score. If there are ties, they can be broken arbitrarily. Here is an example, again using the tiny Dictionary above:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; bestWord([<span class="string">"a"</span>, <span class="string">"s"</span>, <span class="string">"m"</span>, <span class="string">"t"</span>, <span class="string">"p"</span>])</span><br><span class="line">[<span class="string">'spam'</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></p><p>Aside from these two functions, all of the other helper functions are up to you! Some of those helper functions may be functions that you wrote in Homework 1 or slight variants of those functions. However, you might find it useful to use a strategy in which you write a function that determines whether or not a given string can be made from the given Rack list. Then, another function can use that function to determine the list of all strings in the dictionary that can be made from the given Rack. Finally, another function might score those words.</p><p>Remember to use map, reduce, or filter where appropriate - they are powerful and they are optimized to be very fast.</p><p>Test each function carefully with small test inputs before you proceed to write the next function. This will save you a lot of time and aggravation!</p><p>A reminder about in: Imagine that you are writing a function that attempts to determine if a given string S can be made from the letters in the Rack list. You might be tempted to scramble (“permute” to use a technical term) the Rack in every possible way as part of this process, but that is more work than necessary. Instead, you can test if the first symbol in your string, S[0], appears in the rack with the statement:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> S[<span class="number">0</span>] <span class="keyword">in</span> Rack:</span><br><span class="line">  # <span class="keyword">if</span> <span class="literal">True</span> you will <span class="keyword">end</span> up here</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  # <span class="keyword">if</span> <span class="literal">False</span> you will <span class="keyword">end</span> up here</span><br></pre></td></tr></table></figure><p>That in feature is very handy. Now, recursion will let you do the rest of the work without much effort on your part!<br>Although we don’t expect that you will end up doing huge recursive calls, you should know that Python can get snippy when there are a lot of recursive calls. By default, Python generally complains when there are 1000 or more recursive calls of the same function. To convince Python to be friendlier, you can use the following at the top of your file.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure><p>sys.setrecursionlimit(10000)  # Allows up to 10000 recursive calls; the maximum permitted ranges from system to system</p><h3 id="Trying-it-with-a-bigger-dictionary"><a href="#Trying-it-with-a-bigger-dictionary" class="headerlink" title="Trying it with a bigger dictionary"></a>Trying it with a bigger dictionary</h3><p>Finally, if you want to test out a big dictionary (it’s more fun than the little one above), you can download the file. It contains a large list of words (a bit over 4000 words). The list is still called Dictionary. After you have downloaded the file and placed it in the same directory as your Python file, you should do the following at the top of your Python file:</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dict <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>Now, you can refer to Dictionary as a global variable. This is much nicer than cutting-and-pasting that very large list into your Python file. Here are some examples using that Dictionary.</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scoreList([<span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>])</span><br><span class="line">[[<span class="string">'leo'</span>, <span class="number">3</span>], [<span class="string">'low'</span>, <span class="number">6</span>], [<span class="string">'lowly'</span>, <span class="number">11</span>], [<span class="string">'ow'</span>, <span class="number">5</span>], [<span class="string">'owe'</span>, <span class="number">6</span>], [<span class="string">'owl'</span>, <span class="number">6</span>], [<span class="string">'we'</span>, <span class="number">5</span>], [<span class="string">'well'</span>, <span class="number">7</span>], [<span class="string">'woe'</span>, <span class="number">6</span>], [<span class="string">'yell'</span>, <span class="number">7</span>], [<span class="string">'yo'</span>, <span class="number">5</span>]]</span><br></pre></td></tr></table></figure><p>Notice that “yellow” is not in this dictionary. We “cropped” off words of length 6 or more to keep the dictionary from getting too large. Finally, here is an example of bestWord in action:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; bestWord([<span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>])</span><br><span class="line">[<span class="string">'lowly'</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; bestWord([<span class="string">"s"</span>, <span class="string">"p"</span>, <span class="string">"a"</span>, <span class="string">"m"</span>, <span class="string">"y"</span>])</span><br><span class="line">[<span class="string">'may'</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; bestWord([<span class="string">"s"</span>, <span class="string">"p"</span>, <span class="string">"a"</span>, <span class="string">"m"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>])</span><br><span class="line">[<span class="string">'zap'</span>, <span class="number">14</span>]</span><br></pre></td></tr></table></figure><p>And an even bigger dictionary!</p><p>Want to try this with an even bigger dictionary? We’ve got one! The bad news is that it causes IDLE to crash on some computers. However, if you are running Python without IDLE (e.g. from the Unix shell) then this dictionary should work just fine!</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">from</span> <span class="keyword">bigdict </span><span class="meta">import</span> *</span><br></pre></td></tr></table></figure><p>The dictionary is still called Dictionary and it is available as a global variable. Here is an example of it in use:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scoreList([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'v'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'z'</span>, <span class="string">'z'</span>])</span><br><span class="line">[[<span class="string">'ab'</span>, <span class="number">4</span>], [<span class="string">'aby'</span>, <span class="number">8</span>], [<span class="string">'ax'</span>, <span class="number">9</span>], [<span class="string">'ay'</span>, <span class="number">5</span>], [<span class="string">'ba'</span>, <span class="number">4</span>], [<span class="string">'bay'</span>, <span class="number">8</span>], [<span class="string">'by</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      虽然是入门级的Python作业，不过作业竟然要求使用lambda表达式来完成，而且还给了一个超大的数据集来做性能测试。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS5201-Quaternion</title>
    <link href="https://tk1307993.coding.me/CS5201-Quaternion.html"/>
    <id>https://tk1307993.coding.me/CS5201-Quaternion.html</id>
    <published>2019-10-01T00:50:21.000Z</published>
    <updated>2019-10-01T00:52:11.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-Concept"><a href="#The-Concept" class="headerlink" title="The Concept"></a>The Concept</h3><p>One of our goals this semester is to attain as much abstraction as possible in our data representation. To that end, we are first going to consider the concept of a “wrapper” for a basic? numeric type. The aim is to hide many of the implementation details from the user of the type. A programmer doesn’t need (or want) to know exactly what is happening when two integers or floats or complex numbers are added, multiplied, or disemboweled. They simply want the results of such actions. This assignment will have you “wrap” quaternions:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">h</span> = a + bi + cj + dk</span><br></pre></td></tr></table></figure></p><p>Now, you may be wondering what in the world is a quaternion. You can learn much (enough) about them by using one of the links on this webpage. It is not this one</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Your abstraction will be implemented with a class, of course. And, of course, your implementation should be transparent. This means that the functionality you build into your class should reflect the expected behavior of your type and that of the C++ primitives (int, float, etc.). So, in addition to the usual functions of a well defined and physiologically appealing class, you will need to overload operators so that operations such as<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h1 += h2</span><br></pre></td></tr></table></figure></p><p>make sense and indeed work. In addition, you want your quaternions to be able to be based in numeric types of varying kinds. That is, you want the ability to have the a’s, b’s, c’s and d’s be int or float or double or whatever. So, you will template the class.</p><p>Once you have your quaternion class, you will need to demonstrate how well it works. To do this, we want you to concurrently learn a little mathematics and to demonstrate your programming prowess by coding and applying a norm. Ok, so what is a norm? Loosely speaking, a norm is a way of measuring on a set of objects. It is a real-valued function of a set of things. The set of things you will be concerned with here is a set of quaternions. The norm you will implement is the L1 - norm (pr. “el 1 norm”) and is defined to be the sum of the “magnitudes” of the elements in that set. For a quaternion, we will define its magnitude as the square root of the sum of the squares of the component coefficients (a, b, c, d in the above example) of that quaternion. Thus, you must “pass” to your implementation of the norm a set of objects on which to operate. What, then, is the relationship between objects and operations here? This is your problem. You need to think carefully about your design. Use your UML. I passed out in class some sample code and UML to help you get your head around this idea. So you need to think about what class depends on what other class.</p><p>It is possible to implement your norm operation either as a function or as a class. However, we will require that you implement it as a class for this assignment. The concept of representing an operation as a class may be foreign to you. But the method has definite advantages. It boils down to this: define a class with no data (in this case) and one (public) overloaded operator, the function evaluation operator. Using the class object then appears to be the use of a function. I will speak about this in class.</p><p>We want you to use the STL vector class to contain your set of objects (quaternions). Then you will be able to do this and have a vector of quaternion values whose components are ints. Note: be careful to put that extra space between the two &gt; symbols if you are not compiling with c++11.</p><h3 id="Program-Specifications"><a href="#Program-Specifications" class="headerlink" title="Program Specifications"></a>Program Specifications</h3><p>You will include in your submission source code for your templated quaternion class. You will include a default constructor (initializing to 0 + 0i + 0j + 0k) and another constructor taking 4 args to initialize the 4 parts of a quaternion. You will also have a copy constructor and a destructor. You will overload the following operators: (h is the name we’ll use for an arbitrary quaternion)<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ =, +, -, - =, = =, ! = <span class="keyword">to</span> do <span class="keyword">the</span> obvious</span><br><span class="line">unary - so <span class="keyword">that</span> - h <span class="keyword">is</span> <span class="keyword">the</span> negative <span class="keyword">of</span> h</span><br><span class="line">* <span class="keyword">for</span> multiplying a quaternion <span class="keyword">by</span> a quaternion</span><br><span class="line">/ <span class="keyword">for</span> division <span class="keyword">of</span> quaternions h1 / h2 = h1 * (h2)<span class="number">-1</span></span><br><span class="line">= <span class="keyword">for</span> assignment</span><br><span class="line">[ ] <span class="keyword">to</span> <span class="literal">return</span> <span class="keyword">the</span> nth coefficient <span class="keyword">of</span> <span class="keyword">the</span> quaternion, <span class="keyword">with</span> <span class="number">0</span> <span class="keyword">returning</span> <span class="keyword">the</span> <span class="built_in">real</span> part, <span class="number">1</span> <span class="keyword">the</span> i part, <span class="number">2</span> <span class="keyword">the</span> j part, <span class="keyword">and</span> <span class="number">3</span> <span class="keyword">the</span> k part</span><br><span class="line">stream operators</span><br><span class="line">! <span class="keyword">to</span> <span class="literal">return</span> <span class="keyword">its</span> conjugate</span><br><span class="line">~ <span class="keyword">to</span> <span class="literal">return</span> <span class="keyword">the</span> magnitude</span><br></pre></td></tr></table></figure></p><p>You will also include a function called mag that returns the magnitude.</p><p>You will submit your implementation of the L1 - norm and a driver to test your constructs. The driver will read data values from a file. Here is a data set you may use for testing. It is in the format you are to assume:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">-3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">-2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span></span><br><span class="line"><span class="number">8</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">.1</span> <span class="number">.2</span> <span class="number">.1</span> <span class="number">.1</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>(Note: the first value in this file is the number of quaternions that are to follow. Each quaternion is a set of ordered quadruplets. White space will delimit each value in the file. Have your program read data according to this file format. Your program may be tested on other data sets using this format.) Apply the L1 - norm to the entire set of quaternions and output the result. Also, output the first two quaternions and then output. Include exception handling for division by zero, bad subscripting, and anything else clearly foolish. You will also submit during class a UML model of your code (hand-drawn if you like). Also submit during class the gradesheet. Be sure also to provide a makefile.</p><p>Submit your driver with classes templated on floats. Name your executable “driver”.</p>]]></content>
    
    <summary type="html">
    
      虽然是一个Lab作业，但由于测试特别多，导致这两个小程序编写时间长于一般的Lab作业。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC261-AVL-Tree</title>
    <link href="https://tk1307993.coding.me/CSC261-AVL-Tree.html"/>
    <id>https://tk1307993.coding.me/CSC261-AVL-Tree.html</id>
    <published>2019-09-28T08:27:32.000Z</published>
    <updated>2019-09-28T09:09:00.586Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>In this question, you must use the insertion and deletion algorithms as described in the “Balanced Search Trees: AVL trees” handout posted on the course web site.</p><p>a. Insert keys 17, 7, 8, 14, 19, 6, 10, 21, 15, 12, 9, 11 (in this order) into an initially empty AVL tree, and show the resulting AVL tree T , including the balance factor of each node.</p><p>b. Delete key 17 from the above AVL tree T , and show the resulting AVL tree, including the balance factor of each node.<br>In each of the above questions, only the final tree should be shown: intermediate trees will be disregarded, and not given partial credit.</p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><p>In this question, you must use the insertion and deletion algorithms described in the “Balanced Search Trees: AVL trees” handout posted on the course web site.</p><p>a. Prove or disprove: “For any AVL tree T and any key x in T , if we let T1 = Delete(T, x) and T2 = Insert(T1, x), then T2 = T1 .” State clearly whether you are attempting to prove or disprove the statement. If proving, give a clear general argument; if disproving, give a concrete example where you show clearly each tree T, T1, T2 with the balance factors indicated beside each node.</p><p>b. Find an AVL tree T and a key x in T such that calling Delete(T, x) causes two rebalancing operations to take place. Your tree T should be as small as possible, in terms of the number of nodes, so that this takes place (you do not have to prove that it is indeed the smallest). Show your original tree T and the key x, then show the result of each rebalancing operation. Make sure to clearly indicate the balance factor next to each node.</p><h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h3><p>Give a simple, linear-time algorithm that determines if a Binary Search Tree (BST) satisfies the AVL balancing condition. The algorithm’s input is a pointer to the root of a BST T where each node u has the following fields: an integer key, and lchild and rchild which are pointers to the left and right children of u in T (if u has no left or right child, then u.lchild = Nil or u.rchild = Nil, respectively). There is no balance factor or height information already stored in any node. The algorithm’s output is True if T satisfies the AVL balancing condition, and False otherwise.</p><p>The worst-case running time of your algorithm must be O(n) where n is the number of nodes in T.</p><p>Describe your algorithm by giving its pseudo-code, and explain why its worst-case running time is O(n).</p><h3 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h3><p>We want an efficient algorithm for the following problem. The algorithm is given an integer m &gt; 1, and then a (possibly infinite) sequence of distinct keys are input to the algorithm, one at a time. A query operation can occur at any point between any two key inputs in the sequence.</p><p>When a query occurs, the algorithm must return, in sorted order, the m smallest keys among all the keys that were input before the query. Assume that at least m keys are input before the first query occurs.</p><p>For example, suppose m = 3, and the key inputs and query operations occur in the following order:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">24</span>, query, <span class="number">10</span>, <span class="number">17</span>, query, <span class="number">9</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">11</span>, query, <span class="number">14</span>, ...</span><br></pre></td></tr></table></figure></p><p>Then the first query should return 6, 13, 15; the second query should return 6, 10, 13; the third query should return 5, 6, 9.</p><p>Describe a simple algorithm that, for every m &gt; 1, solves the above problem with the following worst-case time complexity:</p><ul><li>O(log m) to process each input key, and</li><li>O(m) to perform each query operation.</li></ul>]]></content>
    
    <summary type="html">
    
      关于AVL Tree的Data Structure作业，五个分析问答题。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CS240-Number-Conversion-and-Bit-Manipulation</title>
    <link href="https://tk1307993.coding.me/CS240-Number-Conversion-and-Bit-Manipulation.html"/>
    <id>https://tk1307993.coding.me/CS240-Number-Conversion-and-Bit-Manipulation.html</id>
    <published>2019-09-24T13:24:14.000Z</published>
    <updated>2019-09-24T13:32:48.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Step-0-Introduction"><a href="#Step-0-Introduction" class="headerlink" title="Step 0. Introduction"></a>Step 0. Introduction</h3><p>In this lab you will write a number converter, implement memdump to display memory content, introduction to pointers, implement string functions with pointers, and bit operations.</p><h3 id="Step-1-Writing-a-number-converter"><a href="#Step-1-Writing-a-number-converter" class="headerlink" title="Step 1. Writing a number converter"></a>Step 1. Writing a number converter</h3><p>Using convert.c write a program to convert a given number from one base to another. The format is:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert <span class="tag">&lt;<span class="name">basefrom</span>&gt;</span> <span class="tag">&lt;<span class="name">baseto</span>&gt;</span> <span class="tag">&lt;<span class="name">number</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>You now know how to access the arguments on the command line. Assume that basefrom and baseto are integers between 2 and 25 (both inclusive). Since base 16 uses the characters A, B, C, D, E, F to represent decimal numbers 10 through 15, bases 17 through 20 will involve additional characters. For example, base 20 will involve the additional characters G, H, I and J. Use defensive programming to make sure your command line arguments are what you would expect. You may assume that no number (in any base) has more than 32 digits, and all numbers are nonnegative.</p><p>To convert a number, say (123)9, from base 9 to another base such as base 8, simply convert from base 9 to decimal (i.e., base 10), to get the number, i.e.,</p><blockquote><p>(1 x 92) + (2 x 91) + (3 x 90) = (102) 10</p></blockquote><p>and then convert to base 8 by doing repeated division, just the way you convert from decimal to binary (base 2) - simple, because you understand decimal (base 10) arithmetic. In this case you should get (146)8. The following link may refresh your memory.</p><h3 id="Step-2-Implement-bit-operations"><a href="#Step-2-Implement-bit-operations" class="headerlink" title="Step 2. Implement bit operations."></a>Step 2. Implement bit operations.</h3><p>You will implement the bit operations described in the file lab4-src/bits.c . To test your implementation run testall.</p><p>Notice that the printbits() should prints the 1s and 0s in one line followed by another line with the indices (mod 10) of the bits.</p><h3 id="Step-3-Our-Tests"><a href="#Step-3-Our-Tests" class="headerlink" title="Step 3. Our Tests"></a>Step 3. Our Tests</h3><p>Also, make sure that your program passes our tests. To run the tests, compile your program and type<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./testall</span></span><br></pre></td></tr></table></figure></p><p>or run each individual test as indicated in the output.</p><p>Make sure that all tests pass and testall gives the maximum points.</p><h3 id="Step-4-Turning-In-your-Project"><a href="#Step-4-Turning-In-your-Project" class="headerlink" title="Step 4. Turning In your Project"></a>Step 4. Turning In your Project</h3><p>Follow these instructions to turn in lab4.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cs240</span><br><span class="line">turnin -c cs240 -v -<span class="selector-tag">p</span> lab4 lab4-src</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      虽然是一个Lab作业，但由于测试特别多，导致这两个小程序编写时间长于一般的Lab作业。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS1510-Data-Structures</title>
    <link href="https://tk1307993.coding.me/CS1510-Data-Structures.html"/>
    <id>https://tk1307993.coding.me/CS1510-Data-Structures.html</id>
    <published>2019-09-21T02:05:38.000Z</published>
    <updated>2019-09-21T02:49:51.825Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Using C++ Class and pointers, implement Single-Linked List of integers. You are not allowed to use STL. Consider the following for your linked list implementation:</p><ul><li>Update the List class implementations in the lecture slides so that the List does not have any duplicate value.</li><li>Also make the necessary updates to the List class to maintain a sorted list (i.e. the Nodes are in increasing order of data values). In particular, replace all the insert methods, and replace them with insert(int x), which inserts x in the right position so that the List remains sorted.</li><li>Implement DeleteMid() to delete the middle element (when the list contains an odd number of elements) or middle two elements (when the list contains an even number of elements).</li><li>Using recursion, implement Ascend() and Descend() to display the entire list in ascending and descending orders, respectively.</li></ul><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span>              // Total no of <span class="keyword">input</span> sets </span><br><span class="line"><span class="symbol">5 </span><span class="number">10</span> <span class="number">4</span> <span class="number">4</span>        // <span class="keyword">Input</span> set <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">9</span> -<span class="number">1</span> <span class="number">7</span>  // <span class="keyword">Input</span> set <span class="number">2</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> -<span class="number">999</span>    // <span class="keyword">Input</span> set <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Output-for-Input-set-1"><a href="#Sample-Output-for-Input-set-1" class="headerlink" title="Sample Output (for Input set 1)"></a>Sample Output (for Input set 1)</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sorted <span class="keyword">List</span>: 4 5 10</span><br><span class="line"></span><br><span class="line">After Deleting Middle Element:</span><br><span class="line"><span class="keyword">List</span>: 4 10</span><br><span class="line"></span><br><span class="line"><span class="keyword">Display</span> <span class="keyword">List</span> <span class="keyword">in</span> Ascending <span class="keyword">Order</span>:</span><br><span class="line">4 10</span><br><span class="line"></span><br><span class="line"><span class="keyword">Display</span> <span class="keyword">List</span> <span class="keyword">in</span> Descending <span class="keyword">Order</span>:</span><br><span class="line">10 4</span><br><span class="line"></span><br><span class="line">and <span class="keyword">so</span> <span class="keyword">on</span> <span class="keyword">for</span> other <span class="keyword">sample</span> <span class="keyword">input</span> sets 2 and 3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      代写数据结构里面的单链表实现，稍微麻烦一点的是，单链表排序需要用递归来实现。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CSCE310-Analytical-Problems</title>
    <link href="https://tk1307993.coding.me/CSCE310-Analytical-Problems.html"/>
    <id>https://tk1307993.coding.me/CSCE310-Analytical-Problems.html</id>
    <published>2019-09-18T13:25:30.000Z</published>
    <updated>2019-09-18T13:27:18.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>This assignment consists of 6 analytical problems and 2 programming problems. Your solutions to the analytical problems must be submitted, as one PDF, via webhandin. While handwritten (then scanned) solutions to the analytical problems are acceptable, you are strongly encouraged to typeset your solutions in L A TEX or a word processor with an equation editor. The legibility of your solutions is of great importance. It is required that your PDF’s filename not include spaces, percent signs, pound symbols, or parentheses.</p><h3 id="Programming-Assignment"><a href="#Programming-Assignment" class="headerlink" title="Programming Assignment"></a>Programming Assignment</h3><p>Your methods will be tested on the cse.unl.edu server, using<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc version <span class="number">4.8</span><span class="number">.1</span> <span class="number">20130909</span> [gcc<span class="number">-4</span>_8-branch revision <span class="number">202388</span>] (SUSE Linux).</span><br></pre></td></tr></table></figure></p><p>To ensure proper execution, you should test your submission in the webgrader<br>You will submit csce310hw002pt01.h, csce310hw002pt02.h, csce310hw002pt01.cpp, csce310hw002pt02.cpp (and maybe csce310hw002pt03.h and csce310hw002pt03.cpp), along with your PDF, via web handin.</p><h3 id="ourQuickSelect"><a href="#ourQuickSelect" class="headerlink" title="ourQuickSelect"></a>ourQuickSelect</h3><p>ourQuickSelect is a function that should take an integer value i and a vector of n integer values. ourQuickSelect should return the number of comparisions needed to find the i th smallest value in the vector using the quickselect algorithm. The first element in the vector should be used as the pivot. You may assume that each number in the vector is unique.</p><h3 id="sumToN"><a href="#sumToN" class="headerlink" title="sumToN"></a>sumToN</h3><p>sumToN is an adaptation of Exercise 6.1.7 on page 206. sumToN will take two arguments: a vector of integer values and another integer value. The function will return true if two unique values in the array sum to the quantitiy of the second input value. It may be assumed that the vector will be in ascending order.</p><h3 id="averageComparisions-10-Points-Extra-Credit-or-Honors-Contract"><a href="#averageComparisions-10-Points-Extra-Credit-or-Honors-Contract" class="headerlink" title="averageComparisions (10 Points Extra Credit or Honors Contract)"></a>averageComparisions (10 Points Extra Credit or Honors Contract)</h3><p>Given an array of n integers, return the average number of comparisons that would be required to successfully find an element in the array using binary search. You may assume that the values in the array will be provided in ascending order. When more than one element can be chosen in the search, choose the element with a smaller value.</p><h3 id="General-Guidelines"><a href="#General-Guidelines" class="headerlink" title="General Guidelines"></a>General Guidelines</h3><p>Sample header, source, and testing files have been provided. You may modify the .h and .cpp files as needed, but you will only be turning in the four/six files mentioned above. The webgrader will be compiling the code with the command g++ -o /path/to/executable.out /path/to/source/files/*.cpp for each part, but I will only be copying the files I asked for out of your submission and into separate directories for Part 1, Part 2, and Part 3.</p><h3 id="Written-Assignment"><a href="#Written-Assignment" class="headerlink" title="Written Assignment"></a>Written Assignment</h3><p>Question 1 (10 points)<br>Question 5.3.2 in The Design and Analysis of Algorithms</p><h3 id="Question-2-10-points"><a href="#Question-2-10-points" class="headerlink" title="Question 2 (10 points)"></a>Question 2 (10 points)</h3><p>(a) Draw a binary tree with 10 nodes labeled 0, 1, … , 9 in such a way that the inorder and preorder traversals of the tree yield the following lists: 3, 1, 7, 9, 5, 8, 2, 0, 6, 4 (Preorder) and 9, 7, 1, 5, 3, 8, 0, 6, 4, 2 (Inorder)</p><p>(b) Give an example of two permutations of the same n labels 0, 1, … , n − 1 that cannot be inorder and postorder traversal lists of the same binary tree.</p><p>(c) Design an algorithm that constructs a binary tree for which two given lists of n labels 0, 1, … , n − 1 are generated by the inorder and postorder traversals of the tree. Your algorithm should also indentify inputs for which the problem has no solution.</p><h3 id="Question-3-10-points"><a href="#Question-3-10-points" class="headerlink" title="Question 3 (10 points)"></a>Question 3 (10 points)</h3><p>Estimate how many searches will be needed to justify time spent on presorting an array of 10^6 elements if sorting is done by mergesort and searching is done by binary search. You may assume that all searches are for elements known to be in the array. What about an array of 10^9 elements?</p><h3 id="Question-4-10-points"><a href="#Question-4-10-points" class="headerlink" title="Question 4 (10 points)"></a>Question 4 (10 points)</h3><p>Question 6.1.1 in The Design and Analysis of Algorithms</p><h3 id="Question-5-10-points"><a href="#Question-5-10-points" class="headerlink" title="Question 5 (10 points)"></a>Question 5 (10 points)</h3><p>Question 6.1.9 in The Design and Analysis of Algorithms</p><h3 id="Question-6-10-points"><a href="#Question-6-10-points" class="headerlink" title="Question 6 (10 points)"></a>Question 6 (10 points)</h3><p>Question 6.5.1 in The Design and Analysis of Algorithms</p>]]></content>
    
    <summary type="html">
    
      代写两个算法程序以及六个算法分析题，代码题简单，但是分析题比较繁琐。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS4750-Minimax-Tic-Tac-Toe</title>
    <link href="https://tk1307993.coding.me/CS4750-Minimax-Tic-Tac-Toe.html"/>
    <id>https://tk1307993.coding.me/CS4750-Minimax-Tic-Tac-Toe.html</id>
    <published>2019-09-15T12:25:06.000Z</published>
    <updated>2019-09-15T12:27:52.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this programming assignment, you are asked to implement programs to play a two-player game similar to tic-tac-toe: two players, X and O, take turns marking the spaces in a 4×4 grid. The player who succeeds in placing 3 of their marks consecutively in a horizontal, vertical, or diagonal row wins the game.<br>You may form a team of up to three people. The team can be different from that for the HW#2. One solution is submitted by each team electronically in Blackboard. You may use any programming language in your implementation.</p><h3 id="Part-I-Beginner"><a href="#Part-I-Beginner" class="headerlink" title="Part I. Beginner"></a>Part I. Beginner</h3><p>Implement a simple player, called Beginner, who places marks sequentially in a blank square in increasing order of row number and then column number, i.e., (1,1), (1,2), (1,3), (1,4), (2,1), (2,2), …, unless it or the opponent wins the game immediately. Its algorithm is as follows:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Beginner-Decision</span> (<span class="title">state</span>) <span class="title">returns</span> <span class="title">an</span> <span class="title">action</span></span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">the</span> player has <span class="keyword">an</span> <span class="built_in">open</span> <span class="number">2</span>-<span class="keyword">in</span>-<span class="keyword">a</span>-row</span><br><span class="line">    <span class="literal">return</span> marking <span class="keyword">the</span> position <span class="built_in">to</span> <span class="built_in">get</span> <span class="keyword">a</span> <span class="number">3</span>-<span class="keyword">in</span>-<span class="keyword">a</span>-row<span class="comment"> // "Win"</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">the</span> opponent has <span class="keyword">an</span> <span class="built_in">open</span> <span class="number">2</span>-<span class="keyword">in</span>-<span class="keyword">a</span>-row</span><br><span class="line">    <span class="literal">return</span> marking <span class="keyword">a</span> position next <span class="built_in">to</span> <span class="keyword">the</span> <span class="number">3</span>-<span class="keyword">in</span>-<span class="keyword">a</span>-row <span class="built_in">to</span> block <span class="keyword">the</span> opponent</span><br><span class="line">  <span class="literal">return</span> marking sequentially <span class="keyword">a</span> blank square <span class="keyword">in</span> increasing order <span class="keyword">of</span> row <span class="built_in">number</span> <span class="keyword">and</span> <span class="keyword">then</span> column <span class="built_in">number</span>.</span><br></pre></td></tr></table></figure></p><p>“open 2-in-a-row” means that there is a blank space at one end of the 2-in-a-row, making it possible to become a 3-in-a-row.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ul><li>a) A brief description of your implementation.</li><li>b) Step-by-step of one game played between you (human) and the player Beginner. Beginner plays first.</li><li>c) Your code with appropriate comments.</li></ul><h3 id="Part-II-Advanced"><a href="#Part-II-Advanced" class="headerlink" title="Part II. Advanced"></a>Part II. Advanced</h3><p>Implement a minimax player, called Advanced, who runs the minimax algorithm on a 2-ply game tree, i.e., looking ahead 2 moves (one move by the player and one move by the opponent). The heuristic evaluation function for cutoff nodes is<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h(n) = [# <span class="keyword">of</span> <span class="keyword">open</span> <span class="number">2</span>-<span class="keyword">in</span>-a-row <span class="keyword">for</span> me] - [# <span class="keyword">of</span> <span class="keyword">open</span> <span class="number">2</span>-<span class="keyword">in</span>-a-row <span class="keyword">for</span> opponent].</span><br></pre></td></tr></table></figure></p><p>For example, for player ‘x’, the value of the following state is<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h = (<span class="number">2</span><span class="number">-1</span>) = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>When h values are the same, the search breaks tie randomly.</p><h3 id="Submission-1"><a href="#Submission-1" class="headerlink" title="Submission"></a>Submission</h3><ul><li>a) A brief description of your algorithm and implementation.</li><li>b) Step-by-step of one game played between Beginner and Advanced. Beginner plays first. For every step played by Advanced, print the # of expanded nodes and the CPU execution time in milliseconds.</li><li>c) Same as (b) except Advanced plays first.</li></ul><h3 id="Part-III-Master"><a href="#Part-III-Master" class="headerlink" title="Part III. Master"></a>Part III. Master</h3><p>Implement a player, called Master, who runs the minimax algorithm on a 4-ply game tree, i.e., looking ahead 4 moves (2 moves by the player and 2 moves by the opponent). The heuristic evaluation function for cutoff nodes is the same as in part II.</p><h3 id="Submission-2"><a href="#Submission-2" class="headerlink" title="Submission"></a>Submission</h3><ul><li>a) Step-by-step of one game played between Advanced and Master. Advanced plays first. For every step played by Advanced and Master, show the # of expanded nodes and the CPU execution time in milliseconds.</li><li>b) Same as (b) except Master plays first.</li><li>c) Your code with appropriate comments.</li></ul><p>Your submission should be a single pdf file with file name containing your name and assignment number. For example, firstnameInitial_lastname_hw4.pdf for HW4.</p>]]></content>
    
    <summary type="html">
    
      在对弈类游戏中，Minimax算的上是经典算法。这次需要代写的作业，需要用Minimax算法编写Tic-Tac-Toe的AI部分。根据Minimax树层数的不同，游戏分为三个不同难度。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMPSCI340-TinyDOS</title>
    <link href="https://tk1307993.coding.me/COMPSCI340-TinyDOS.html"/>
    <id>https://tk1307993.coding.me/COMPSCI340-TinyDOS.html</id>
    <published>2019-08-31T12:52:46.000Z</published>
    <updated>2019-09-03T14:33:06.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-you-have-to-do"><a href="#What-you-have-to-do" class="headerlink" title="What you have to do"></a>What you have to do</h3><p>You have to implement a very simple disk operating system called TinyDOS which provides the ability to store and retrieve data on a virtual drive and allows inspection of that data using cat or similar commands at any time during the execution of a program which uses the virtual drive.</p><p>The TinyDOS system creates files with full pathnames such as /dir1/dir2/file3 . The slashes represent separation into directories. The root directory is / . Each part of the pathname will be no more than 8 characters long.</p><p>There are classes you have to implement in order to get your file system working: a volume class is essential, but you probably want to have a directory entry class and possibly others. You also must write a TinyDOS program which the markers will use to pass commands to your implementation.</p><h3 id="Drive"><a href="#Drive" class="headerlink" title="Drive"></a>Drive</h3><p>The virtual drive is represented by an ordinary file on your computer. The Python code to implement the virtual drive is provided in the drive.py file (see later in the handout if you wish to use a different language). You make a drive by creating a Drive object and calling the format method. This creates the file on the real machine which represents your virtual drive. All of the data on the virtual disk should be stored as readable ASCII so that by opening the real machine file you can easily see the contents of your virtual drive.</p><p>The write_block method of the Drive class writes directly to the underlying real file. Similarly the read_block method reads from the real file. Your file system must do all of its work by writing entire blocks to the drive and reading blocks from the drive using only these functions. This is how drives work, they are block addressable devices. In this assignment a block is always 512 bytes long.</p><p>Every virtual drive contains 128 blocks (from 0 to 127).</p><p>If you run the following program which creates a drive file and then displays it using cat , you will see the structure of a virtual drive.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> drive</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> <span class="keyword">call</span></span><br><span class="line">vdrive = drive.Drive(<span class="string">'vdrive'</span>)</span><br><span class="line">vdrive.format()</span><br><span class="line"><span class="keyword">call</span>(<span class="string">'cat vdrive'</span>, shell=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>Initially each block is filled in with 512 spaces. These blocks are separated by a line like:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">** </span>1 *<span class="strong">*</span></span><br></pre></td></tr></table></figure></p><p>where the number is the block number of the block directly above the separator.</p><h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><p>A drive is represented to the operating system as a volume. Formatting a volume means putting extra information on the drive so that it can be recognised and used by the TinyDOS operating system. This is a second format. The drive format is like that performed by a drive manufacturer before shipping a drive. A volume format is like the format you can perform using your operating system.</p><p>The only access a volume has to a drive is through the methods in the Drive class.</p><p>A volume format should write the following information into block 0 of the drive. Block 0 is the volume info block.</p><p>The first 128 bytes of the block represent the bitmap of available blocks on the drive. If a block is free it is represented with the byte corresponding to ‘ - ‘. If the block is used it is ‘ + ‘.</p><p>The remaining 384 bytes of block 0 consist of 6 directory entries.</p><h3 id="Using-a-Volume"><a href="#Using-a-Volume" class="headerlink" title="Using a Volume"></a>Using a Volume</h3><p>A s you use a volume to create files you need to make modifications to the volume (which makes modifications to the drive).</p><p>To create a file you need to find an empty directory entry in the directory you are creating the file in. All directories except the root directory can grow as needed.</p><p>At first this is all a file consists of - a directory entry. When the file gets written to it must be allocated a block for data. Each block is taken from the free blocks indicated in the volume bitmap. The block number is inserted into its correct position in the 12 block numbers of the directory entry. The length of the file also needs to be updated in the directory entry and the block containing the directory entry needs to be written back to the drive, along with any other blocks which have been modified.</p><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><p>A directory (apart from the one in the volume info block) is just an ordinary file with a file type of “ d: “. Like ordinary files they have a maximum number of 12 blocks of data. Each block allocated to a directory consists of 8 directory entries. When a new block is allocated to a directory you can fill in all the 8 directory entries in that block (initially each should be the same as the default directory entries in the volume info block).</p><h3 id="A-File"><a href="#A-File" class="headerlink" title="A File"></a>A File</h3><p>When a file is created it has a size of zero. As data is appended to the file, blocks are allocated to the file and the file length goes up. Writing to a file normally requires reading a block, modifying the contents of the block and writing the updated block back to the drive. It also requires modifying the directory entry for the file and writing that to the drive as well.</p><h3 id="To-test"><a href="#To-test" class="headerlink" title="To test"></a>To test</h3><p>In order to test your TinyDOS implementation you need to provide a program which takes commands from stdin (usually the keyboard) and interprets them. You should call this program TinyDOS (e.g. TinyDOS.py , or TinyDOS.java etc.) and give the marker instructions on how to start it (because you might have written it in a variety of languages) in Question 1.</p><p>The TinyDOS program quits.</p><p>All commands in a command file will be legal. However you should write your program in such a way that all incorrect situations cause an error to be reported to the user, either by printing a message on the screen or by throwing or raising an exception. These exceptions are allowed to terminate the program.</p><p>The marker will have a second terminal open when testing your program. In this terminal he/she will be able to call commands such as cat to display the contents of the file which contains your drive information. This way the marker should see the effects of the commands modifying the underlying file. The reason for this is that it is possible to perform many of the commands in memory without using read_block or write_block and the assignment is to get you to implement a file system only with read_block and write_block.</p>]]></content>
    
    <summary type="html">
    
      代写一个文件系统，用Python写的TinyDos，一个一个的完成未实现的函数以及命令，最终做成一个可存/读/访问的文件系统。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS1591-Computational-Thinking</title>
    <link href="https://tk1307993.coding.me/CS1591-Computational-Thinking.html"/>
    <id>https://tk1307993.coding.me/CS1591-Computational-Thinking.html</id>
    <published>2019-08-31T12:52:46.000Z</published>
    <updated>2019-08-31T01:35:21.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem-Set-1-Correcting-Code"><a href="#Problem-Set-1-Correcting-Code" class="headerlink" title="Problem Set 1 - Correcting Code"></a>Problem Set 1 - Correcting Code</h3><p>Correct the following code, the function sum_list is intended to return the sum of the elements in the list. Add your corrected code to your submission file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_list</span><span class="params">(alist)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    sum = i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">  mylist = [<span class="number">45</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">-5</span>, <span class="number">100</span>]</span><br><span class="line">  print(sum_list(mylist))</span><br></pre></td></tr></table></figure><p>Correct the following code. Add your corrected code to your submission file.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def get_user_choice():</span><br><span class="line">  <span class="keyword">while</span> True:</span><br><span class="line">  <span class="keyword">command</span> = <span class="built_in">input</span>(<span class="string">"Command: "</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">command</span> = <span class="keyword">f</span> <span class="built_in">or</span> <span class="keyword">command</span> = <span class="keyword">m</span> <span class="built_in">or</span> <span class="keyword">command</span> = s <span class="built_in">or</span> <span class="keyword">command</span> = d <span class="built_in">or</span> <span class="keyword">command</span> = q:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">command</span></span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"Hey, that's not a command. Here are your options:"</span>)</span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"f - Full speed ahead"</span>)</span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"m - Moderate speed"</span>)</span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"s - Status"</span>)</span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"d - Drink"</span>)</span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"q - Quit"</span>)</span><br><span class="line">user_command = get_user_choice()</span><br><span class="line"><span class="keyword">print</span>(<span class="string">"You entered: "</span> + user_command)</span><br></pre></td></tr></table></figure><p>Correct the following code: (This almost reverses the string. What is wrong?) Add your corrected code to your submission file.<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">reverse</span>(<span class="built_in">text</span>):</span><br><span class="line">  <span class="literal">result</span> = <span class="string">""</span></span><br><span class="line">  text_length = len(<span class="built_in">text</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(text_length):</span><br><span class="line">    <span class="literal">result</span> = <span class="literal">result</span> + <span class="built_in">text</span>[i * <span class="number">-1</span>]</span><br><span class="line"><span class="built_in">  return</span> <span class="literal">result</span></span><br><span class="line"><span class="built_in">text</span> = <span class="string">"Programming is the coolest thing ever."</span></span><br><span class="line">print(<span class="built_in">reverse</span>(<span class="built_in">text</span>))</span><br></pre></td></tr></table></figure></p><h3 id="Problem-Set-2-Using-loops"><a href="#Problem-Set-2-Using-loops" class="headerlink" title="Problem Set 2 - Using loops"></a>Problem Set 2 - Using loops</h3><p>Using loops, write code that will print the following:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">         <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">         <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">         <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">         <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">         <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure></p><p>Using loops, write code that will print the following:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">  <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line">    <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line">      <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">        <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">          <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">            <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">              <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">                <span class="number">0</span> <span class="number">1</span></span><br><span class="line">                  <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>Hint: Two loops are needed inside the outer loop that controls each row. First, a loop prints spaces, then a loop prints the numbers. Loop both of these for each row.</p><h3 id="Problem-Set-3-Functions-using-sequences"><a href="#Problem-Set-3-Functions-using-sequences" class="headerlink" title="Problem Set 3 - Functions using sequences"></a>Problem Set 3 - Functions using sequences</h3><p>To complete these exercises, you can use any of the programming constructs that we have seen in lectures, including built-in Python sequence and list operations, functions and methods.</p><p>Write a function that takes a list, modifies it by removing the first and last elements, and returns None.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defchop</span><span class="params">(mylist)</span></span>:</span><br></pre></td></tr></table></figure><p>Add the code for your function to your submission file and then add the following code to demonstrate that your function works as required.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mylist)</span></span></span><br><span class="line"><span class="function"><span class="title">chop</span><span class="params">(mylist)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(mylist)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(chop(mylist)</span></span>)</span><br></pre></td></tr></table></figure></p><p>Write a function that, when given a list of items, returns a new list that contains every second element from the original list, that is, every element that has even index. Recall that a number n is even if n “mod” 2 is zero. The “mod” operator in Python is wriWen as %.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evens</span><span class="params">(mylist)</span></span><span class="symbol">:</span></span><br></pre></td></tr></table></figure><p>for example: evens([a, b, c, d, e]) should return [a, c, e].<br>Call your evens function on the argument [[“me”,”my”],[“you”,”yours”],[“them”],[“their”],[“theirs”]] and print<br>out the result.<br>Add the code for your function and your function call/print statement to your submission file.</p><p>Write a function inAlphabetOrder that returns True if the leWers in a word appear in alphabetical order (double leWers are ok). For inAlphabetOrder we have to compare adjacent leWers, which is a liWle tricky with a for loop. Try using a while loop.<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inAlphabetOrder</span><span class="params">(myword)</span></span><span class="symbol">:</span></span><br></pre></td></tr></table></figure></p><p>for example: inAlphabetOrder(“loop”) should inAlphabetOrder(“baby”) should return False.</p><p>Call your inAlphabetOrder function on the arguments “loops”, “looping” and “loopy” and print out the results. Add the code for your inAlphabetOrder function and your example function calls/print statements to your submission file.</p><h3 id="Problem-Set-4-Using-list-comprehensions"><a href="#Problem-Set-4-Using-list-comprehensions" class="headerlink" title="Problem Set 4 - Using list comprehensions"></a>Problem Set 4 - Using list comprehensions</h3><p>Using a list comprehension, write a function squares_list that returns a list of the squares of all the even numbers in the range 0-99.</p><p>Print out the result of calling this function. Add the code for your squares_list function and your function call/print statement to your submission file.</p><p>Using a list comprehension, write a function wordlengths that takes a list of words as its argument and returns a list of pairs containing 1. the capitalised word and 2. the length of the word.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordlengths</span><span class="params">(mywords)</span></span><span class="symbol">:</span></span><br></pre></td></tr></table></figure><p>for example: wordlengths([“The”, “quick”, “brown”, “fox”]) should return [(“THE”, 3), (“QUICK”, 5), (“BROWN”, 5), (“FOX”, 3)]</p><p>Add the code for your wordlengths function and a demonstration function call/print statement to your submission file.</p><p>Complete as many of these problems as you can. Partial solutions will be given partial credit.</p>]]></content>
    
    <summary type="html">
    
      代写四个Python小程序，start code已经给了，继续完善即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMPSCI105-HTML-Tag-Checker</title>
    <link href="https://tk1307993.coding.me/COMPSCI105-HTML-Tag-Checker.html"/>
    <id>https://tk1307993.coding.me/COMPSCI105-HTML-Tag-Checker.html</id>
    <published>2019-08-27T12:52:46.000Z</published>
    <updated>2019-08-27T15:22:51.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>A markup language is a language that annotates text so that the computer can manipulate the text. Most markup languages are human readable because the annotations are written in a way to distinguish them from the text. The most important feature of a markup language is that the tags it uses to indicate annotations should be easy to distinguish from the document content.</p><p>One of the most well-known markup languages is the one commonly used to create web pages, called HTML, or “Hypertext Markup Language”. In HTML, tags appear in “angle brackets”. When you load a Web page in your browser, you do not see the tags themselves: the browser interprets the tags as instructions on how to format the text for display.</p><p>Most tags in HTML are used in pairs to indicate where an effect starts and ends. For example:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">this <span class="keyword">is</span> a <span class="built_in">paragraph</span> <span class="keyword">of</span> <span class="built_in">text</span> written <span class="keyword">in</span> HTML</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>Here tag p represents the start of a paragraph, and tap p indicates where that paragraph ends.</p><p>Other tags include tag b that are used to place the enclosed text in bold font, and tag i indicate that the enclosed text is italic.<br>Note that “end” tags look just like the “start” tags, except for the addition of a backslash ‘/‘ after the symbol.</p><p>Sets of tags are often nested inside other sets of tags. For example, an ordered list is a list of numbered bullets.</p><p>You specify the start of an ordered list with the tag ol, and the end with /ol. Within the ordered list, you identify items to be numbered with the tags li (for “list item”) and /li. For example, the following specification:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>First item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Second item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Third item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>would result in the following:</p><ol><li>First item</li><li>Second item</li><li>Third item</li></ol><p>Notice how you start the ordered list with the ol tag, specify three line items with matching li and /li tags, and the close the ordered list with the /ol tag.</p><p>You may have noticed that the pattern of using matching tags strongly resembles the pattern of matching parentheses that we discussed in class: when you use parentheses, brackets, and braces, they have to match in reverse order, such as “{[()]}”. A pattern such as “[(])” would be incorrect since the right bracket does not match the left parenthesis. Similarly, an HTML pattern such as ol li /ol /li would be incorrect since the closing tags are in the wrong order.</p><p>The aim of this question is to write an “HTML Checker” program that takes as input an HTML file, and produces a report indicating whether or not the tags are correctly matched.</p><p>Just as the parenthesis checker uses a stack to store symbols waiting for a match to be found, your program should also use a stack. You should include the implementation of the Stack ADT discussed in class.</p><p>Input: As input for your program, the sample test files (test1.html, test2.html, test3.html, test4.html, test5.html) can be download from the course website. You can open the test files with a text editor i.e. Notepad++. The test files are created with different scenarios both test1.html and test2.html have balanced tags, whereas the rest of the test files have unbalanced tag.</p><h3 id="Processing-the-input-file"><a href="#Processing-the-input-file" class="headerlink" title="Processing the input file"></a>Processing the input file</h3><p>The first task your program must do is read in an HTML file and extract the tags. A simple strategy for doing this would be to write a function “getTags” that:</p><ul><li>reads one character at a time from the data file, throwing everything away until it gets to a “&lt;”. (Discard the “&lt;” as well.)</li><li>reads one character at a time, appending it to a string, until it gets to a “&gt;” or whitespace. (Discard the “&gt;” as well.)<br>append the tag to a list.</li><li>returns tags found.</li></ul><p>Make sure you account for end-of-file conditions in getTags. If you have completed everything correctly, you now have a list of tags, both start and end tags, once the getTags function is invoked.</p><h3 id="HTML-Tag-Checker"><a href="#HTML-Tag-Checker" class="headerlink" title="HTML Tag Checker"></a>HTML Tag Checker</h3><p>Write a function called “checkTags” that iterates through your list of tags, looking for matches.</p><ul><li>If there is a mismatch of beginning and ending tags, print an error message (see output section below) and terminate.</li><li>After processing the list of tags and there is no mismatch, print a confirmation message (see output section below).</li><li>At the end of the list, there are remaining tags on the stack, print a confirmation message (see output section below) and the remaining tags in the stack.</li></ul><p>In addition, have your program build a list called “VALIDTAGS”. As you iterate through your list of tags, check to see if the tag appears in VALIDTAGS. If it doesn’t, add it to VALIDTAGS and print a confirmation message (see output section below).</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>The output of your program should include the following:</p><ul><li>A printout of your list of tags (the result of getTags).</li><li>One line for each tag as you process it, explaining the action and showing the current contents of the stack. You may have to modify your ADT to allow for the information to be displayed properly. Some examples are:<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tag <span class="selector-tag">b</span> pushed: stack is now [<span class="selector-tag">html</span>, <span class="selector-tag">body</span>, b]</span><br><span class="line">Tag /<span class="selector-tag">b</span> matches <span class="attribute">top</span> of stack: stack is now [html, body]</span><br><span class="line">Tag <span class="selector-tag">ul</span> pushed: stack is now [<span class="selector-tag">html</span>, <span class="selector-tag">body</span>, ul]</span><br></pre></td></tr></table></figure></li></ul><p>A message every time you add a tag to VALIDTAGS. For example:</p><ul><li>New tag XXX found and added to list of valid tags</li></ul><h3 id="The-Twist"><a href="#The-Twist" class="headerlink" title="The Twist"></a>The Twist</h3><p>There are some tags that do not need matching start and end tags! One example is br. This tag is used to indicate a line break at the current location. Another is meta, which is used to provide special information (“metadata”) about a webpage, and one more (left for you to identify in your data files).</p><p>If you followed the instructions above correctly, your HTML checker will notice that there are three tags that don’t have a match. Teach your program that this is okay for these three cases by maintaining a list called EXCEPTIONS which you hard-code into your main program. They will appear in your list of tags just as any other tags. However, when you begin your iteration through the list and you encounter one of these, you do not need to push it on the stack since you won’t be waiting for a close tag. Instead, just print an output line such as:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Tag</span> br does <span class="literal">not</span> need <span class="keyword">to</span> <span class="keyword">match</span>: <span class="built_in">stack</span> is still <span class="meta">[</span>html, body, b<span class="meta">]</span></span><br></pre></td></tr></table></figure></p><p>and continue.</p>]]></content>
    
    <summary type="html">
    
      代写一个Html标签解析器，发现错误配对的标签，考察Stack的应用。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMPSCI105-A-Phone-Book-Management-Program</title>
    <link href="https://tk1307993.coding.me/COMPSCI105-A-Phone-Book-Management-Program.html"/>
    <id>https://tk1307993.coding.me/COMPSCI105-A-Phone-Book-Management-Program.html</id>
    <published>2019-08-25T12:52:46.000Z</published>
    <updated>2019-08-25T01:40:09.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Aims-of-the-assignment"><a href="#Aims-of-the-assignment" class="headerlink" title="Aims of the assignment"></a>Aims of the assignment</h3><p>solving problems using classes, lists of objects, stack, etc.</p><h3 id="A-Phone-Book-Management-Program"><a href="#A-Phone-Book-Management-Program" class="headerlink" title="A Phone Book Management Program"></a>A Phone Book Management Program</h3><p>In this question, you are going to use the class structures in Python to implement a simple phone book management program. Your program should display the contact records, assist the adding, removing, searching and updating records in the phone book.<br>The contact records are stored in a file called “contacts.txt” using the JSON format. As seen below, each line holds the information of a known contact including the name, phone number and email address. The information in this file is read into the program and stored (as a list of “Contact” objects) in an object of the “PhoneBook” class. When the program exists, it will automatically save the updated contact records into a file called “contacts2.txt”. Please DO NOT MODIFY the content of the “contacts.txt” file.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"John"</span>, <span class="string">"7589943"</span>, <span class="string">"john@amail.com"</span>]</span><br><span class="line">[<span class="string">"Kelly"</span>, <span class="string">"4344345"</span>, <span class="string">"kelly@bmail.com"</span>]</span><br><span class="line">[<span class="string">"Nicky"</span>, <span class="string">"8774104"</span>, <span class="string">"nicky@cmail.com"</span>]</span><br><span class="line">[<span class="string">"Sam"</span>, <span class="string">"5723943"</span>, <span class="string">"sam@dmail.com"</span>]</span><br></pre></td></tr></table></figure><p>You are provided with the following Python files in the ‘A1Q1Resource.zip’:</p><ul><li>Contact.py – contains the Contact class to store the information of a phone record. Please DO NOT MODIFY the content of this file.</li><li>PhoneBook.py – contains the PhoneBook class (TO BE COMPLETED) so that it stores and manages the phone records.</li><li>A1Q1abcd001.Py – contains the functions (TO BE COMPLETED) that display the menu and calls the methods defined in the PhoneBook class to fulfill the functions of the program.</li></ul><p>You need to understand all the files, but the only files that you are allowed to modify are the PhoneBook.py and A1Q1abcd001.py files.</p><p>Complete the required methods accordingly described in the following 6 tasks to achieve the functions of the program. IMPORTANT: Test each function after you have completed it and make sure that the program runs as described.</p><h3 id="Change-the-file-name-and-UPI-constant-and-implement-the-get-user-input-function"><a href="#Change-the-file-name-and-UPI-constant-and-implement-the-get-user-input-function" class="headerlink" title="Change the file name and UPI constant, and implement the get user input function"></a>Change the file name and UPI constant, and implement the get user input function</h3><p>Rename the ‘A1Q1.py’ file into A1Q1 followed by your UPI, e.g., ‘A1Q1abcd001.py’. Assign your own UPI to the UPI constant variable defined in the display_intro() function of the ‘A1Q1abcd001.py’ file.</p><p>Implement the get_user_input(start,end) function inside the ‘A1Q1abcd001.py’ program, which receives an user choice of the menu option. The function should only accept a valid user input, i.e., a number between 1 and 6 (both inclusive). Any other numbers or value (e.g., non-digit characters) will be ignored. Its exact layout should have the same format as shown below.<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------</span><br><span class="line"><span class="bullet">-- </span>A Phone Book Management Program by abcd001 --</span><br><span class="line">------------------------------------------------</span><br><span class="line">1. Look up a contact</span><br><span class="line">2. Add a new contact</span><br><span class="line">3. Change an existing contact</span><br><span class="line">4. Delete a contact</span><br><span class="line">5. Display all contacts</span><br><span class="line">6. Quit the program</span><br><span class="line">------------------------------------------------</span><br><span class="line">Enter your choice: 8</span><br><span class="line">Invalid menu option.</span><br><span class="line">Please try again: E</span><br><span class="line">Invalid menu option.</span><br><span class="line">Please try again: 0</span><br><span class="line">Invalid menu option.</span><br><span class="line">Please try again: hello</span><br><span class="line">Invalid menu option.</span><br><span class="line">Please try again: 6</span><br><span class="line">------------------------------------------------</span><br><span class="line">Thank you!</span><br><span class="line">------------------------------------------------</span><br></pre></td></tr></table></figure></p><h3 id="Search-for-an-existing-contact-in-the-phone-book"><a href="#Search-for-an-existing-contact-in-the-phone-book" class="headerlink" title="Search for an existing contact in the phone book"></a>Search for an existing contact in the phone book</h3><p>If the first option of the menu, i.e., ‘Look up a contact’, is selected, the program should allow the user to search for a known contact in the phone book. Its exact layout should have the same format as shown below.<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------</span><br><span class="line"><span class="bullet">-- </span>A Phone Book Management Program by abcd001 --</span><br><span class="line">------------------------------------------------</span><br><span class="line">1. Look up a contact</span><br><span class="line">2. Add a new contact</span><br><span class="line">3. Change an existing contact</span><br><span class="line">4. Delete a contact</span><br><span class="line">5. Display all contacts</span><br><span class="line">6. Quit the program</span><br><span class="line">------------------------------------------------</span><br><span class="line">Enter your choice: 1</span><br><span class="line">------------------------------------------------</span><br><span class="line">Enter the name: Kelly</span><br><span class="line">Name: Kelly</span><br><span class="line">Phone: 4344345</span><br><span class="line">Email: kelly@bmail.com</span><br><span class="line">------------------------------------------------</span><br><span class="line">1. Look up a contact</span><br><span class="line">2. Add a new contact</span><br><span class="line">3. Change an existing contact</span><br><span class="line">4. Delete a contact</span><br><span class="line">5. Display all contacts</span><br><span class="line">6. Quit the program</span><br><span class="line">------------------------------------------------</span><br><span class="line">Enter your choice: 1</span><br><span class="line">------------------------------------------------</span><br><span class="line">Enter the name: James</span><br><span class="line">James is not found in the phone book.</span><br><span class="line">------------------------------------------------</span><br><span class="line">1. Look up a contact</span><br><span class="line">2. Add a new contact</span><br><span class="line">3. Change an existing contact</span><br><span class="line">4. Delete a contact</span><br><span class="line">5. Display all contacts</span><br><span class="line">6. Quit the program</span><br><span class="line">------------------------------------------------</span><br><span class="line">Enter your choice:</span><br></pre></td></tr></table></figure></p><p>To achieve the above task, you need to implement the find_a_record(), display_a_record() and search_a_record() functions inside the PhoneBook class.</p><p>The find_a_record(self, name)function locates the contact record that matches the given name from its parameter. The function returns the Contact object has the same name, or the value None if no matching record was found.</p><p>The display_a_record(self, item)function prints out a contact record in the format illustrated in the above example.</p><p>The search_a_record(self)fulfills the function of searching for a contact record with an user input name. The function requests for an user input, then it makes use of the find_a_record() to determine whether the input name exists in the phone book or not. If a matching name is found, it will make use of the display_a_record() function to print out the contact record. Otherwise, if no matching name found, it prints out the not-found message. The sample input/output are shown in the above example.</p><h3 id="Add-a-new-contact-record-to-the-phone-book"><a href="#Add-a-new-contact-record-to-the-phone-book" class="headerlink" title="Add a new contact record to the phone book"></a>Add a new contact record to the phone book</h3><p>If the second option of the menu, i.e., ‘Add a new contact’, is selected, the program should allow the user to add a new contact record to the phone book. Its exact layout should have the same format as shown below.</p><p>To achieve the above task, you should implement the add_a_record() method in the PhoneBook class.</p><p>The add_a_record(self) fulfills the function of adding a new contact record by user input. The function requests for an user input name, then it makes use of the find_a_record() to determine whether the input name already exists in the phone book or not. If no matching name is found, it will further asking input for the phone number and email address, then add a new Contact object to the phone book. Otherwise, if the input name already exists in the phone book, it prints out the error message. The sample input/output are shown in the above example.</p><h3 id="Change-an-existing-contact-record"><a href="#Change-an-existing-contact-record" class="headerlink" title="Change an existing contact record"></a>Change an existing contact record</h3><p>If the third option of the menu, i.e., ‘Change an existing contact’, is selected, the program should allow the user to update the phone number and email address of a known contact in the phone book. Its exact layout should have the same format as shown below.<br>To achieve the above task, you should implement the update_a_record() method in the PhoneBook class.</p><p>The update_a_record(self)fulfills the function of changing an existing contact record with user input. The function requests for a user input name, then it makes use of the find_a_record() to determine whether the input name already exists in the phone book or not. If a matching name is found, it will further asking input for the new phone number and email address, then change the corresponding Contact object in the phone book. Otherwise, if the input name does not exists in the phone book, it prints out the error message. The sample input/output are shown in the above example.</p><h3 id="Remove-an-existing-contact-record"><a href="#Remove-an-existing-contact-record" class="headerlink" title="Remove an existing contact record"></a>Remove an existing contact record</h3><p>If the fourth option of the menu, i.e., ‘Delete a contact’, is selected, the program should allow the user to remove an existing contact record from the phone book. Its exact layout should have the same format as shown below.</p><p>To achieve the above task, you should implement the delete_a_record() method in the PhoneBook class.</p><p>The delete_a_record(self)fulfills the function of removing an existing contact record with user input. The function requests for a user input name, then it makes use of the find_a_record() to determine whether the input name already exists in the phone book or not. If a matching name is found, it will remove the corresponding Contact object in the phone book. Otherwise, if the input name does not exists in the phone book, it prints out the error message. The sample input/output are shown in the above example.</p><h3 id="Display-all-the-contacts-records"><a href="#Display-all-the-contacts-records" class="headerlink" title="Display all the contacts records"></a>Display all the contacts records</h3><p>If the fifth option of the menu, i.e., ‘Display all contacts’, is selected, the program should print out all the contact records in the phone book. Its exact layout should have the same format as shown below.</p><p>To achieve the above task, you should implement the display_records() function in the PhoneBook class.</p><p>The display_records(self)fulfills the function of printing out all contact records. The function will first sort the contact records by the name in an ascending order. It then iterate through the sorted phone book (i.e., the list self.__records) and makes use of the display_a_record() function to print out each contact record one by one in the required format. To sort the elements in a list structure, you can use the predefined function sort(). The sample input/output are shown in the above example.</p>]]></content>
    
    <summary type="html">
    
      代写一个电话簿管理系统，基本的console菜单类程序。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS101-Five-Questions</title>
    <link href="https://tk1307993.coding.me/CS101-Five-Questions.html"/>
    <id>https://tk1307993.coding.me/CS101-Five-Questions.html</id>
    <published>2019-08-21T12:52:46.000Z</published>
    <updated>2019-08-21T12:55:49.485Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Topics-covered"><a href="#Topics-covered" class="headerlink" title="Topics covered"></a>Topics covered</h3><ul><li>Arithmetic operators</li><li>Printing output</li><li>Manipulating string objects</li><li>Generating random numbers</li><li>Getting user input</li></ul><h3 id="QUESTION-1"><a href="#QUESTION-1" class="headerlink" title="QUESTION 1"></a>QUESTION 1</h3><p>Write a program which, given a start time and an end time, calculates the elapsed time (in hours, minutes and seconds). The times in this program use a 24 hour clock, e.g., 15:23:15 is 23 minutes and 15 seconds past 3pm. You can assume that the end time is always later than the start time. The first two lines of your program initialise the variables in the following way (you will need to change the values assigned to these two variables when you test your program):<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">start</span> = <span class="string">"06:55:55"</span></span><br><span class="line"><span class="attr">end</span> = <span class="string">"07:04:57"</span></span><br></pre></td></tr></table></figure></p><p>The time elapsed should always be a time between 00:00:00 and 23:59:59. The start time, the end time and time elapsed always have the form “hh:mm:ss”, i.e., a single digit hour, minute or second has a “0” in front of it. Below are four example outputs from the completed program (using different variable values).<br>Your program must give the correct output in the same format as the outputs in the example below:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Start</span> <span class="selector-tag">time</span>: 15<span class="selector-pseudo">:26</span><span class="selector-pseudo">:12</span>  <span class="selector-tag">End</span> <span class="selector-tag">time</span>: 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:36</span></span><br><span class="line"><span class="selector-tag">Total</span> <span class="selector-tag">time</span> <span class="selector-tag">elapsed</span>: 06<span class="selector-pseudo">:14</span><span class="selector-pseudo">:24</span></span><br></pre></td></tr></table></figure></p><p>Include this exercise in a module (file) named ‘YourUPIA1Q1.py’, e.g., afer023A1Q1.py.</p><h3 id="QUESTION-2"><a href="#QUESTION-2" class="headerlink" title="QUESTION 2"></a>QUESTION 2</h3><p>Write a program which simulates four transactions on a bank account. Initially the bank account has a balance of $11568. Each transaction is either a negative amount (a withdrawal) or a positive amount (a deposit). The amount of each transaction (withdrawal or deposit) is a random integer between 100 and 150 inclusive. Below is the statement which initialises the variable, balance:</p><p>balance = 11568<br>In the output, the amount of each transaction is displayed inside parentheses following the balance (after the transaction has been applied). The final line of output shows the overall sum of the four transactions.</p><blockquote><p>Hint: in order to create a transaction which is either a withdrawal or a deposit you will find it useful to generate a random number which is either -1 or 1. The random transaction amount is then multiplied by this number.</p></blockquote><p>Below are two example outputs using the completed program. Your program must give a correct output in the same format as the outputs in the example below:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Initial balance: $11568</span><br><span class="line">1: $11674 (106)</span><br><span class="line">2: $11816 (142)</span><br><span class="line">3: $11926 (110)</span><br><span class="line">4: $11815 (-111)</span><br><span class="line">==========================</span><br><span class="line">Sum of transactions: $247</span><br><span class="line">==========================</span><br></pre></td></tr></table></figure></p><p>Include this exercise in a module (file), named ‘YourUPIA1Q2.py’, e.g., afer023A1Q2.py</p><h3 id="QUESTION-3"><a href="#QUESTION-3" class="headerlink" title="QUESTION 3"></a>QUESTION 3</h3><p>Write a program which prints a 5 letter word (I have used names in my examples) in the form of a parallelogram as in the examples below. Nine lines of the output print sections of the word, the first line prints the first letter of the word, the next line prints the next two letters of the word, etc. , the fifth line prints the whole word and the next three lines contract the word until the last line which prints just the last letter of the word. Each of these 9 lines is indented by two spaces and the whole nine lines are enclosed inside four rows of stars.</p><p>word = “MARIA”<br>Below is example outputs using the completed program (using two different 5 letter words). Your program must give the correct output in the same format as the outputs in the two examples below:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">********<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*******<span class="strong">*</span></span><br><span class="line"><span class="strong">      M</span></span><br><span class="line"><span class="strong">     AR</span></span><br><span class="line"><span class="strong">    ARI</span></span><br><span class="line"><span class="strong">   ARIA</span></span><br><span class="line"><span class="strong">  MARIA</span></span><br><span class="line"><span class="strong">  ARIA</span></span><br><span class="line"><span class="strong">  RIA</span></span><br><span class="line"><span class="strong">  IA</span></span><br><span class="line"><span class="strong">  A</span></span><br><span class="line"><span class="strong">*</span>*******<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*******<span class="strong">*</span></span><br></pre></td></tr></table></figure></p><p>Include this exercise in a module (file), named ‘YourUPIA1Q3.py’, e.g., afer023A1Q3.py.</p><h3 id="QUESTION-4"><a href="#QUESTION-4" class="headerlink" title="QUESTION 4"></a>QUESTION 4</h3><p>Write a program which encrypts (or decrypts) a message. The message is always 25 letters in length. The last two lines of code below ensure that the message is always 25 letters in length.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">original_message</span> = <span class="string">"Pagg rm rfomieugisanrn t!"</span></span><br><span class="line"><span class="comment"># Makes sure the message is 25 letters in length</span></span><br><span class="line"><span class="attr">message</span> = original_message * <span class="number">25</span></span><br><span class="line"><span class="attr">message</span> = message[<span class="number">0</span>: <span class="number">25</span>]</span><br></pre></td></tr></table></figure><p>Copy the above statements which initialise the variables into your program. The program uses the following encryption method. First the 25 letter message is broken up into five 5 letter words, i.e., a five by five square of letters. Then the message is recreated by going down the five by five square of letters from left to right. For example, the message “abcdefghijklmnopqrstuvwxy” is reshaped into five rows:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abcde</span></span><br><span class="line"><span class="attribute">fghij</span></span><br><span class="line"><span class="attribute">klmno</span></span><br><span class="line"><span class="attribute">pqrst</span></span><br><span class="line"><span class="attribute">uvwxy</span></span><br></pre></td></tr></table></figure></p><p>and then the message is reconstructed going down each column starting from the first column to the last column: “afkpubglqvchmrwdinsxejoty”<br>Below is the three example outputs using the completed program (using three different starting messages).<br>Your program must give the output in the same format as the outputs in the three examples below.<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Origial <span class="keyword">message</span>: E l ntbidjhraaoiinyyslt!</span><br><span class="line">Encrypted <span class="keyword">message</span>: Enjoy this brilliant day!</span><br><span class="line">Original <span class="keyword">message</span>: Meet at <span class="number">11</span> <span class="keyword">in</span> the <span class="keyword">library</span></span><br><span class="line">Encrypted <span class="keyword">message</span>: Ma hbetiere n at1 lr <span class="number">1</span>tiy</span><br><span class="line">Original <span class="keyword">message</span>: Ma hbetiere n at1 lr <span class="number">1</span>tiy</span><br><span class="line">Encrypted <span class="keyword">message</span>: Meet at <span class="number">11</span> <span class="keyword">in</span> the <span class="keyword">library</span></span><br></pre></td></tr></table></figure></p><p>Include this exercise in a module (file), named ‘YourUPIA1Q4.py’, e.g., afer023A1Q4.py.</p><h3 id="QUESTION-5"><a href="#QUESTION-5" class="headerlink" title="QUESTION 5"></a>QUESTION 5</h3><p>Write a program which creates a word chain. The word chain starts with a word (of any length) and allows the player to create a new word by making one change (which affects two consecutive letters) to the current word. In this way the user creates four new words in the chain. The user is first prompted for the position of the first of the two letters they wish to change (the first letter is position 0), then prompted for the replacement two letters, and then the program prints the changed word. This process is repeated four times. Below is the statement which initialises the variable, word:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word</span> = <span class="string">"frank"</span></span><br></pre></td></tr></table></figure></p><p>Below are two example outputs using the completed program (using two different starting words). Your program must give the output in the same format as the outputs in the two examples below. Note that the string of “=” symbols is the same length as the final combined chain of words.<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Starting word: frank</span><br><span class="line">Position: 0</span><br><span class="line">Replacement letters: b1</span><br><span class="line">1 Word is now: blank</span><br><span class="line">Position: 3</span><br><span class="line">Replacement letters: me</span><br><span class="line">2 Word is now: blame</span><br><span class="line">Position: 3</span><br><span class="line">Replacement letters: st</span><br><span class="line">3 Word is now: blast</span><br><span class="line">Position: 2</span><br><span class="line">Replacement letters: un</span><br><span class="line">4 Word is now: blunt</span><br><span class="line">===================================</span><br><span class="line">frank-&gt;blank-&gt;blame-&gt;blast-&gt;blunt-&gt;</span><br><span class="line">===================================</span><br></pre></td></tr></table></figure></p><p>Include this exercise in a module (file), named ‘YourUPIA1Q5.py’, e.g., afer023A1Q5.py.</p>]]></content>
    
    <summary type="html">
    
      代写五个Python小问题的基础作业，入门级。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CSSE1001-Pokemon-Finding-Game</title>
    <link href="https://tk1307993.coding.me/CSSE1001-Pokemon-Finding-Game.html"/>
    <id>https://tk1307993.coding.me/CSSE1001-Pokemon-Finding-Game.html</id>
    <published>2019-08-17T01:02:45.000Z</published>
    <updated>2019-08-17T01:10:27.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>For this assignment, you will be writing code that supports a simple Pokemon finding game. The basic idea of the application is that you explore multiple levels in search for Pokemon, which are then registered in your Dex. Rather than using functions, like assignment 1, you will be using Object-Oriented Programming (OOP). Further, you will be using the Model View Controller (MVC) design pattern. Your task is to write the Model. The View and Controller are provided, along with support code.</p><p>As is typical with projects where more than one person is responsible for writing code, there needs to be a way of describing how the various components interact. This is achieved by defining an Application Programming Interface (API). For this assignment, you must implement your classes according to the API that has been specified, which will ensure that your code will interact properly with the supplied View/Controller code.</p><p>One benefit to adhering to MVC is that the model can be developed and tested independently of the view or controller. It is recommended that you follow this approach. This means testing your model iteratively as you develop your code.</p><h3 id="Assignment-Tasks"><a href="#Assignment-Tasks" class="headerlink" title="Assignment Tasks"></a>Assignment Tasks</h3><h4 id="Download-files"><a href="#Download-files" class="headerlink" title="Download files"></a>Download files</h4><p>The first task is to download a2.py and a2_files.zip. The file a2.py is for your assignment. Do not modify the assignment file outside the area provided for you to write your code.</p><h4 id="Important-Definitions"><a href="#Important-Definitions" class="headerlink" title="Important Definitions"></a>Important Definitions</h4><p>While Pokemon is an irregular plural (meaning that its plural takes the same form as its singular, like sheep and fish), for the purposes of this assignment, multiple Pokemon are referred to as Pokemons for clarity.</p><h4 id="Positions-amp-Coordinates"><a href="#Positions-amp-Coordinates" class="headerlink" title="Positions &amp; Coordinates"></a>Positions &amp; Coordinates</h4><p>A position is represented by a (row, column) pair of numbers.<br>A cell position is a position where the row and column are both integers. It represents the position of where an object in the game could be located.<br>A wall position is a position where either the row or column value is a float ending in .5 and the other is an integer. The .5 represents that the wall is located at a boundary betweeen two cell positions for that row or column.</p><h4 id="Expecting-Registering-amp-Catching"><a href="#Expecting-Registering-amp-Catching" class="headerlink" title="Expecting, Registering, &amp; Catching"></a>Expecting, Registering, &amp; Catching</h4><p>Catching a Pokemon refers to the player adding it to their collection. Whilst moving around the game world, the player catches a Pokemon by moving onto a cell in which that Pokemon exists. When a Pokemon is caught, it is removed from the game world.<br>A Pokedex, henceforth abbreviated as Dex, maintains a registry of Pokemon that the player is expected to catch. A Pokemon is registered in a Dex when the player catches that Pokemon. Registering a Pokemon that has already been registered has no effect.</p><h4 id="Game-Data"><a href="#Game-Data" class="headerlink" title="Game Data"></a>Game Data</h4><p>Game data can be loaded using either load\game_file(file) or load_game_url(url) from the support file. These functions will raise errors if the file/url do not exist or provide invalid JSON, as specified in their docstring comments. Game data consists of the following structure, comments added for clarity:<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  levels: [               # <span class="type">List</span> <span class="keyword">of</span> levels <span class="keyword">in</span> game</span><br><span class="line">    &#123;</span><br><span class="line">      terrain: str,       # <span class="type">Name</span> <span class="keyword">of</span> the terrain <span class="keyword">type</span></span><br><span class="line">      rows: <span class="built_in">int</span>,          # <span class="type">Number</span> <span class="keyword">of</span> rows</span><br><span class="line">      columns: <span class="built_in">int</span>,       # <span class="type">Number</span> <span class="keyword">of</span> columns</span><br><span class="line">      player: (<span class="built_in">int</span>, <span class="built_in">int</span>), # <span class="type">Player's</span> starting position</span><br><span class="line">      pokemons: [         # <span class="type">List</span> <span class="keyword">of</span> pokemon existing <span class="keyword">in</span> level</span><br><span class="line">        &#123;name: str, position: (<span class="built_in">int</span>, <span class="built_in">int</span>)&#125;,</span><br><span class="line">        ...</span><br><span class="line">      ],</span><br><span class="line">      walls: [            # <span class="type">List</span> <span class="keyword">of</span> walls existing <span class="keyword">in</span> level</span><br><span class="line">        (<span class="built_in">int</span>, <span class="built_in">int</span>),</span><br><span class="line">        ...</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>For example, game data is a dictionary, containing the string “levels” as a key, whose value is a list of level data. Further, level data is a dictionary with multiple keys. The string “terrain” is one key that has a value that is a string indicating the name of the terrain. The string “walls” is another key that has a value that is a list of pairs of integers, each representing the location of a wall in the level.</p><h4 id="Write-the-code"><a href="#Write-the-code" class="headerlink" title="Write the code"></a>Write the code</h4><p>There are several classes you need to write and these are described below. It is highly recommended that you review the support file, a2_support.py, before writing your code, as this contains many useful constants and functions. Do not use global variables in your code.</p><h4 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h4><p>Each class and method that you write must have a suitable docstring comment, as specified in the course notes.</p><h3 id="The-GameObject-Class"><a href="#The-GameObject-Class" class="headerlink" title="The GameObject Class"></a>The GameObject Class</h3><p>GameObject is the superclass for objects that exist in the game grid. Instances of GameObject are to be constructed with GameObject(name, position), where name is a string representing the name of the object and position is a grid position. Further, the following methods are to be implemented:</p><ul><li>set_position(self, position) Sets the position to position, which either is a cell position or None.</li><li>get_position(self) Returns the current position of the instance.</li><li>set_name(self, name) Sets the name to name.</li><li>get_name(self) Returns the name of the instance.</li><li><strong>str</strong>(self) Returns a human readable representation of this instance, according to GAME_OBJECT_FORMAT in the support file.</li></ul><h3 id="The-Pokemon-Class"><a href="#The-Pokemon-Class" class="headerlink" title="The Pokemon Class"></a>The Pokemon Class</h3><p>Pokemon inherits from GameObject and is used for managing the name and position of Pokemon within the game.<br>Instances of Pokemon are to be constructed with Pokemon(name, position, terrain), where name and position are as they are for GameObject, and terrain is a string representing the terrain in which the Pokemon exists.<br>Further, the following methods are to be implemented:</p><ul><li>set_terrain(self, terrain) Sets the terrain to terrain.</li><li>get_terrain(self) Returns the terrain of the instance.</li><li><strong>str</strong>(self) Returns a human readable representation of this instance, according to POKEMON_FORMAT in the support file.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; mew = Pokemon(<span class="string">"Mew"</span>, (<span class="number">20</span>, <span class="number">20</span>), <span class="string">"Mountain"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; str(mew)</span><br><span class="line"><span class="string">'Mew @ (20, 20) from Mountain'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; mew.get_terrain()</span><br><span class="line"><span class="string">'Mountain'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; mew.set_terrain(<span class="string">"Grass"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; str(mew)</span><br><span class="line"><span class="string">'Mew @ (20, 20) from Grass'</span></span><br></pre></td></tr></table></figure><h4 id="The-Wall-Class"><a href="#The-Wall-Class" class="headerlink" title="The Wall Class"></a>The Wall Class</h4><p>Wall inherits from GameObject and implements no additional functionality. It is used for representing a wall in the game.</p><h4 id="The-Player-Class"><a href="#The-Player-Class" class="headerlink" title="The Player Class"></a>The Player Class</h4><p>Player inherits from GameObject and is used for representing a player within a grid.<br>Instances are to be constructed with Player(name), where name is as it is for GameObject.<br>A Player must contain the following:</p><ul><li>A Dex to register all the Pokemon that the Player encounters.</li><li>A list of Pokemon that the Player has caught, in the order they were caught.</li></ul><p>The following methods are to be implemented:</p><ul><li>get_pokemons(self) Returns a list of all Pokemon that this Player has caught, in the order they were caught.</li><li>register_pokemon(self, pokemon) Catches the pokemon and adds to the Player’s Dex, where pokemon is a Pokemon, provided it is expected by the Player’s Dex. Otherwise, this method should raise an UnexpectedPokemonError.</li><li><strong>str</strong>(self) Returns a human readable representation of this instance, according to PLAYER_FORMAT in the support file.</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; mew = Pokemon(<span class="string">"Mew"</span>, (<span class="number">20</span>, <span class="number">20</span>), <span class="string">"Grass"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d1 = Pokemon(<span class="string">"Dragonite"</span>, (<span class="number">1</span>, <span class="number">1</span>), <span class="string">"Mountain"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d2 = Pokemon(<span class="string">"Dragonite"</span>, (<span class="number">1</span>, <span class="number">3</span>), <span class="string">"Mountain"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock = Player(DEFAULT_PLAYER_NAME)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; str(brock)</span><br><span class="line"><span class="string">'Ash @ None has caught 0'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock.set_name(<span class="string">"Brock"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock.set_position((<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock.register_pokemon(mew)</span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">    ... <span class="comment"># truncated for brevity</span></span><br><span class="line">a2_support.<span class="symbol">UnexpectedPokemonError:</span> Mew is <span class="keyword">not</span> expected by this Dex.</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock.get_dex().expect_pokemons([<span class="string">'Mew'</span>, <span class="string">'Dratini'</span>, <span class="string">'Dragonair'</span>, <span class="string">'Dragonite'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock.register_pokemon(mew)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock.register_pokemon(d1)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock.register_pokemon(d2)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; str(brock)</span><br><span class="line"><span class="string">'Brock @ (1, 1) has caught 3'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; for pokemon in brock.get_pokemons(): print(pokemon)</span><br><span class="line">Mew @ (<span class="number">20</span>, <span class="number">20</span>) from Grass</span><br><span class="line">Dragonite @ (<span class="number">1</span>, <span class="number">1</span>) from Mountain</span><br><span class="line">Dragonite @ (<span class="number">1</span>, <span class="number">3</span>) from Mountain</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(brock.get_dex())</span><br><span class="line"><span class="number">2</span> <span class="symbol">Registered:</span> Dragonite, Mew</span><br><span class="line"><span class="number">2</span> <span class="symbol">Unregistered:</span> Dragonair, Dratini</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; brock.reset_pokemons()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; str(brock)</span><br><span class="line"><span class="string">'Brock @ (1, 1) has caught 0'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(brock.get_dex())</span><br><span class="line"><span class="number">0</span> <span class="symbol">Registered:</span></span><br><span class="line"><span class="number">0</span> <span class="symbol">Unregistered:</span></span><br></pre></td></tr></table></figure><h4 id="The-Dex-Class"><a href="#The-Dex-Class" class="headerlink" title="The Dex Class"></a>The Dex Class</h4><p>The Dex class manages a registry of Pokemon that have been encountered. For the Dex class, pokemon refers only to the name of a pokemon, and not an instance of the Pokemon class.</p><p>Instances are to be constructed using Dex(pokemon_names), where pokemon_names is a list of poke- mon names to be expected by this Dex. In order for a Dex to be complete, all the Pokemon that are expected must also be registered.</p><p>A Dex must contain a dictionary whose keys are pokemon names that are expected by this Dex, and whose values indicate whether the corresponding pokemon is registered in this Dex (True: registered; False: unregistered).</p><p>Further, the following methods must be defined for the Dex class.</p><h4 id="The-Level-Class"><a href="#The-Level-Class" class="headerlink" title="The Level Class"></a>The Level Class</h4><p>The Level class manages data pertaining to an individual level in the game. A Level is considered complete when its Dex has no unregistered pokemon. N.b. It is possible to complete a level without having caught all pokemon that exist in that level, since there may be duplicate Pokemon.</p><p>Instances are to be constructed with Level(player, data), where player is an instance of Player, and data is a dictionary of a single level’s data. When initialised, a Level should instruct the player’s Dex to expect all the Pokemon that could be encountered in the current level. If a level contains an invalid position (player start, pokemon, wall, etc.), it must raise an InvalidPositionError.</p><h4 id="The-Game-Class"><a href="#The-Game-Class" class="headerlink" title="The Game Class"></a>The Game Class</h4><p>The Game class manages data pertaining to an entire game. Its constructor requires no arguments.</p><ul><li>An instance of the Player class, which will be used when instantiating each Level.</li><li>A list of Levels in the order in which they are loaded. This list will be empty until either the load_file or load_url method is called, but upon loading a game, this list must contain instances of the Level class, one for each level in the game data.</li></ul><h3 id="Assessment-and-Marking-Criteria"><a href="#Assessment-and-Marking-Criteria" class="headerlink" title="Assessment and Marking Criteria"></a>Assessment and Marking Criteria</h3><p>In addition to providing a working solution to the assignment problem, the assessment will involve discussing your code submission with a tutor. This discussion will take place in the practical session you have signed up to in week 10. You must attend that session in order to obtain marks for the assignment.</p><p>In preparation for your discussion with a tutor you may wish to consider:</p><ul><li>any parts of the assignment that you found particularly difficult, and how you overcame them to arrive at a solution;</li><li>whether you considered any alternative ways of implementing a given function;</li><li>where you have known errors in your code, their cause and possible solutions (if known).</li></ul>]]></content>
    
    <summary type="html">
    
      Pokemon系列游戏，本质上还是练习MVC和OOP的写法。Start code自带GUI，Player在地图中找到所有的Pokemon并集齐当前地图的图鉴，即可过关。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="MVC" scheme="https://tk1307993.coding.me/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS206-Very-Large-Integer</title>
    <link href="https://tk1307993.coding.me/CS206-Very-Large-Integer.html"/>
    <id>https://tk1307993.coding.me/CS206-Very-Large-Integer.html</id>
    <published>2019-08-15T12:43:26.000Z</published>
    <updated>2019-08-15T12:49:46.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives-abstract-data-type-ADT-encapsulation"><a href="#Objectives-abstract-data-type-ADT-encapsulation" class="headerlink" title="Objectives: abstract data type (ADT), encapsulation"></a>Objectives: abstract data type (ADT), encapsulation</h3><p>Integer types are very convenient, but their limited width makes them unsuitable for some applications where precise large values are more important than speed. Develop a class VeryLargeInteger that can handle arbitrary long integer numbers (both negative and positive) and the basic arithmetic operations (addition, subtraction, multiplication, division, and remainder).</p><blockquote><p>Hint: The number could be represented as string, the sign could be represented either as boolean or as part of the string.</p></blockquote><p>Note: Implementations of addition/subtraction through repeated use of a constant increment/decrement will not be accepted. Implementations of multiplication and division that rely on stepwise addition or subtraction will not be accepted.</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VeryLargeInteger (VLI) is a class for arbitrary precision integer computation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VeryLargeInteger</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs a new VLI object from a long integer.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> init initial value</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VeryLargeInteger(<span class="keyword">long</span> init) &#123; <span class="comment">/* YOUR CODE */</span> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs a new VLI object from a String.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> init initial value. Note, the string represents a valid VLI, but can</span></span><br><span class="line"><span class="comment">   *        be prefixed with a sign (either + or -).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VeryLargeInteger(String init) &#123; <span class="comment">/* YOUR CODE */</span> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Computes this+other and returns the result in a new object.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> other the left-hand side operand.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> a new VLI representing this+other</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VeryLargeInteger add(VeryLargeInteger other) &#123; <span class="comment">/* YOUR CODE */</span> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Computes this-other and returns the result in a new object.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> other the left-hand side operand.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> a new VLI representing this-other</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VeryLargeInteger sub(VeryLargeInteger other) &#123; <span class="comment">/* YOUR CODE */</span> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Computes this*other and returns the result in a new object.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> other the left-hand side operand.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> a new VLI representing this*other</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VeryLargeInteger mul(VeryLargeInteger other) &#123; <span class="comment">/* YOUR CODE */</span> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Computes this/other and returns the result in a new object.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> other the left-hand side operand.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> a new VLI representing this/other</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VeryLargeInteger div(VeryLargeInteger other) &#123; <span class="comment">/* YOUR CODE */</span> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Computes this%other and returns the result in a new object.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> other the left-hand side operand.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> a new VLI representing this%other</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VeryLargeInteger mod(VeryLargeInteger other) &#123; <span class="comment">/* YOUR CODE */</span> &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the textual representation of this VLI.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@result</span> a string representing this VLI</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  String toString() &#123; <span class="comment">/* YOUR CODE */</span> &#125;</span><br><span class="line">  <span class="comment">/* YOUR CODE */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Turn in a zip file named blazerid hw1.zip. The file should contain an exported Eclipse project with the following items.</p><ul><li>All files needed to compile and run your solution.</li><li>Your tests (test driver needs to be a separate file).</li><li>A document (or text file) that describes your design decisions, your tests, any difficulties you had. If you would like to get a graded version on paper, add a note at the top of the report saying “paper copy requested”. If you received help from somebody else in class, please give credit to them.</li></ul><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><ul><li>(10pts) Lab</li><li>(10pts) Assignment report.</li><li>(10pts) Turned in code compiles without error or warning and code is well documented (consider using -Xlint:all and/or checkStyle).</li><li>(10pts) Quality of test design.</li><li>(10pts) Constructors, addition, subtraction, multiplication, and toString work correctly.</li><li>(10pts) Division and remainder methods operations correctly.</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个小Lab作业，考察基本OOP概念，题目是比较经典的大数算法。由于Int，Long等类型总有最大上限，当一个数超过这个上限时，需要编程处理这类大数的加减乘除运算。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：Spell Checker</title>
    <link href="https://tk1307993.coding.me/Spell-Checker.html"/>
    <id>https://tk1307993.coding.me/Spell-Checker.html</id>
    <published>2019-08-13T16:04:52.000Z</published>
    <updated>2019-08-13T16:06:19.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Homework-4-Programming"><a href="#Homework-4-Programming" class="headerlink" title="Homework 4 Programming"></a>Homework 4 Programming</h1><p>Please remember that to submit the assignment you will need to the Education drop down menu and select<br>assignment complete.</p><h2 id="Problem-1-Implementing-a-Spell-Checker-35-points"><a href="#Problem-1-Implementing-a-Spell-Checker-35-points" class="headerlink" title="Problem 1 - Implementing a Spell Checker - 35 points"></a>Problem 1 - Implementing a Spell Checker - 35 points</h2><p>Implement a spell-checker by using a hash table. You will create a class called <code>SpellChecker</code> in the file <code>SpellChecker.java</code> that implements the interface <code>SpellCheckerInterface.java</code>.  The object will try to check for spelling errors in an input file, referencing a provided dictionary file. The <code>SpellChecker</code> object must accept the filename of the dictionary in its constructor. There is a sample dictionary file in the Codio workspace called <code>words.txt</code>.</p><p>The constructor of the object must (itself or by calling other methods) parse the dictionary file, storing the words in a <code>HashSet</code> instance. The <code>SpellChecker</code> object will use this dictionary as a reference when checking for spelling errors in a specified input file. Please note that <strong>every word added to the <code>HashSet</code> instance must be in lower case</strong>. In addition to the constructor, you must implement two methods to complete the functionality of your <code>SpellChecker</code> object.</p><ul><li><code>public List&lt;String&gt; getIncorrectWords(String filename)</code> - This method should return a list of all words in the input file that are incorrectly spelled according to the dictionary file provided to the constructor. The String <code>filename</code> contains the name of the file to be spell-checked.</li></ul><p>We define a word as a sequence of characters with whitespace (one or more spaces and/or tabs) on either side. To check for incorrectly spelled words, you must first read the file and process it into words. Note, however, that your program must <strong>convert the file to lowercase and remove all punctuation</strong> in generating its list of words. This means that the line <code>hey!! it&#39;s nice to see you--how are you?</code> should become <code>hey, its, nice, to, see, youhow, are, you</code>. No other input processing is necessary and there are no exceptions to these rules. Punctuation is defined as any character that is not an upper or lower case alphabet, or a number (0-9). Once you split the line into words by splitting by whitespace, remove all punctuation from every word (and don’t forget to lower case each word as well).</p><p>Your output list must contain the incorrect words that remain after processing input data (e.g. <code>youhow</code> in the above example).</p><ul><li><code>public Set&lt;String&gt; getSuggestions(String word)</code> - This method should return a set of all potential suggestions for the incorrectly spelled word that is provided as input.</li></ul><p>In order to generate a suggestion for a given word, implement the following spell checking techniques, where a character is defined as one of <code>a, b, c, ..., z</code>:</p><ul><li>Add one character - add a character at every point in the string (including at the very beginning and end)</li><li>Remove one character - remove one character at a time from each position in the string</li><li>Swap adjacent characters - swap every pair of adjacent characters in the string</li></ul><p>Your method should return all possible suggestions from each one of the techniques above. Note that the use of a <code>Set</code> object maintains only unique suggestions (i.e. no duplicates).</p><p>You may choose to write a tester file, which might print out each incorrectly spelled word in an input file and its suggestions. Any tester you write will, as usual, not be graded. This is an optional step to encourage you to ensure that your code is indeed functional and correct.</p><p>We have provided you a sample test file to spell-check. This file is called <code>test.txt</code>.</p><h2 id="Problem-2-K-Best-Values-30-points"><a href="#Problem-2-K-Best-Values-30-points" class="headerlink" title="Problem 2 - K-Best Values - 30 points"></a>Problem 2 - K-Best Values - 30 points</h2><p>Find the k-best (i.e. largest) values in a set of data. Assume you are given a sequence of values, one value at a time. We do not know how many elements there are in this sequence. In fact, there could be infinitely many. Implement the class<br><code>KBestCounter&lt;T extends Comparable&lt;? super T&gt;&gt; implements KBest&lt;T&gt;</code> that keeps track of the k-largest elements seen so far in a sequence of data. The class should have two methods:</p><ul><li><p><code>public void count(T x)</code> - process the next element in the set of data. This operation must run in at worst <code>O(log k)</code> time.</p></li><li><p><code>public List&lt;T&gt; kbest()</code> - return a sorted (smallest to largest) list of the k-largest elements. This must run in at worst <code>O(k log k)</code> time. The method must not clobber the state of your class. This means that if you run this method twice in a row, it should return the same values.</p></li></ul><p>Your <code>KBestCounter.java</code> class must implement the provided interface <code>KBest.java</code>.</p><p>Use a priority queue to implement this functionality. We suggest using the built-in <code>java.util.PriorityQueue</code>.</p><p>As always, feel free to implement your own tester file to ensure proper functionality.</p>]]></content>
    
    <summary type="html">
    
      Implementing a Spell Checker
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS204-Hashing</title>
    <link href="https://tk1307993.coding.me/CS204-Hashing.html"/>
    <id>https://tk1307993.coding.me/CS204-Hashing.html</id>
    <published>2019-08-10T01:35:23.000Z</published>
    <updated>2019-08-10T02:38:24.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Write a program that uses hashing for the following problem. Given a natural language text, generate a table of distinct words with the number of occurrences of each word in the text. A word is defined as a series of alphanumeric characters. Note that punctuation and spaces can both (separately or together) delineate a word. There are some hyphenated words in the text; for these words there will be no space before or after the hyphen and the hyphen should be considered part of the word. Capitalized versions of a word are considered the same as the lowercase version, so feel free to change all words to either upper- or lowercase. Plural possessives and contractions should remain and be counted as a unique word (such as can’t or widows’).</p><p>You must use the provided input file, which contains the first chapter of Tolkien’s “The Hobbit” found on herePreview the documentView in a new window.</p><p>Your resulting program will be an interactive one allowing the user to type in a word (that may or may not appear in the table) and receive the number of occurrences of that word in the text until the user wishes to quit.</p><h3 id="The-challenge"><a href="#The-challenge" class="headerlink" title="The challenge"></a>The challenge</h3><p>Find the combination of hash function and collision resolution that will minimize the collisions. A collision is defined as an attempt to store a new word in a location already occupied by another word. Consequently, it is possible for a new word to collide more than once before it is finally stored. To qualify for full credit on the assignment, you must have fewer than 625 collisions and your table size must be appropriate for the number of words (see below) and the collision resolution used. Your instructor was able to reach 514 collisions simply using a version of one of the hash functions discussed in class and linear probe. The student(s) with the least collisions and proper table size will receive 5 bonus points.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>There are 663 unique words in the file (using the above definition of a unique word). There are 1976 words in total.</p><h3 id="Program-description"><a href="#Program-description" class="headerlink" title="Program description"></a>Program description</h3><p>Your program should hash the values from the file and then print (neatly formatted) the number of collisions, number of unique words and total number of words to the standard output (screen) before allowing the user to input a word to see the number of times it appeared. The user should be able to input as many words as desired before choosing to quit.</p><h3 id="Suggestions-amp-Notes"><a href="#Suggestions-amp-Notes" class="headerlink" title="Suggestions &amp; Notes"></a>Suggestions &amp; Notes</h3><p>Reading in one word at a time from the file, create a function that pre-processes a word, changing capital letters to lowercase and removing any quotation marks or other unnecessary punctuation that may have been read from the file. Then send the pre-processed string into your hash function.</p><p>When counting collisions, do not count additional instances of a word. So you will want to keep a “temporary” collision count for a word until you know if the word is already in the table.</p><p>Note that the table size must be “reasonable” and depends upon the number of entries expected and the collision resolution used. Using a larger table than required by these factors (simply to reduce collisions) will mean a deduction. The final load factor must be between 0.5 and 0.7.</p><p>Get your program up and running by using one of the hash functions discussed in class and a simple collision resolution (such as linear probe). Make sure you are pre-processing your words correctly, etc. before attempting to minimize the collisions.</p>]]></content>
    
    <summary type="html">
    
      用Python代写一个Hashing的程序，对自然语言进行统计排序，由于是自然语言，存在大量的标点符号，以及大小写的处理。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS168-Chat</title>
    <link href="https://tk1307993.coding.me/CS168-Chat.html"/>
    <id>https://tk1307993.coding.me/CS168-Chat.html</id>
    <published>2019-08-03T01:35:23.000Z</published>
    <updated>2019-08-03T01:39:24.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Chat"><a href="#Chat" class="headerlink" title="Chat"></a>Chat</h3><p>In this assignment, you’ll build a simple application that connects users over a network: a chat server. Similar to chat programs like Slack and IRC, your finished chat server will allow users to converse in different channels. Users can create and join channels; once a user is in a particular channel, all messages that she sends will be relayed to all other users in that channel.<br>This assignment (and the rest of the assignments in this class) should be implemented in Python 2. This assignment will introduce you to the socket programming API.</p><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>There’s a demo of the finished project available here.</p><p>If you have questions, first take a look at the FAQ section. If your question isn’t answered there, post to Piazza.</p><p>The Python Socket Programming HOWTO is a useful introduction to socket programming.</p><p>We’ve provided two files to help you test your code:</p><p>client_split_messages.py is intended to help you ensure your server is correctly buffering messages, and is described in more detail below.</p><p>simple_test.py tests a basic scenario where two clients communicate in a simple channel. simple_test.py represents only a small fraction of the points that we’ll test for when we grade your assignment, and is intended only to help you verify the basic format of your client’s output.</p><h3 id="What-are-sockets"><a href="#What-are-sockets" class="headerlink" title="What are sockets?"></a>What are sockets?</h3><p>A socket is an endpoint of a connection between two programs running across a network. Each socket is associated with a particular port number. Sockets are an abstraction provided by operating systems: programs create sockets, read from those sockets, and write to those sockets. When a program writes to a socket, the operating system sends data out a particular port; similarly, with the operating system receives data on a port, that data can be read from the socket corresponding to that port.</p><p>In Python, you can create a socket and connect to a remote endpoint by using the socket library as follows:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">socket</span></span><br><span class="line"><span class="comment"># The socket constructor accepts a few arguments; the defaults are fine for this class.</span></span><br><span class="line">client_socket = <span class="built_in">socket</span>.<span class="built_in">socket</span>()</span><br><span class="line">client_socket.connect((<span class="string">"1.2.3.4"</span>, <span class="number">5678</span>))</span><br><span class="line">client_socket.sendall(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><p>The example above created a socket and connected it to port 5678 at IP address 1.2.3.4. Then, it sent a “Hello World” message to the server at 1.2.3.4:5678.</p><p>The example above created a client socket that was connected to exactly one remote endpoint. When you create a server, you’ll typically want to allow multiple remote clients to connect, and you don’t usually know the address of those clients when the socket is created. As a result, server sockets work differently:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server_socket = socket.socket()</span><br><span class="line">server_socket.bind((<span class="string">"1.2.3.4"</span>, <span class="number">5678</span>))</span><br><span class="line">server_socket.<span class="section">listen</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>After creating the socket, rather than connecting to a particular remote destination, the code above bound the socket to a particular IP address and port, which essentially tells the operating system to associate the given IP address and port with the socket. Finally, the listen call listens for connections made to the socket. When a new client connects to the socket, the socket library will create a new socket to use to communicate with that client, so that the server socket can continue to be used to wait for inbound connections from other clients:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(new_socket, address)</span> = server_socket.accept<span class="comment">()</span></span><br></pre></td></tr></table></figure></p><p>This call blocks until a client connects (using a connect() call, as in the example above), and then returns a newly created socket, new_socket, that can be used to send and receive data to and from the client. For example, the call</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="keyword">new</span><span class="type">_socket</span>.recv(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p>will block until there is data to receive from the client, and will return up to 1024 bytes of data.<br>You’ll need to do some reading to understand how all of these API calls work. In particular, be careful when using send and recv! send, for example, will not necessarily send all of the data passed into it. The Python Socket Programming HOWTO will likely be a useful resource.</p><h4 id="Part-0-to-be-completed-in-section"><a href="#Part-0-to-be-completed-in-section" class="headerlink" title="Part 0 (to be completed in section)"></a>Part 0 (to be completed in section)</h4><p>The first part of the assignment will help you get started with the socket programming API and introduce you to basic client-server interaction. This part of the assignment will not be graded, and you’ll complete it.</p><p>For this part of the assignment, you’ll write a simple client and server. The client will send a single message from stdin to the server and then disconnect. The server should print messages it receives to stdout. If multiple clients connect to the server, the server should handle them sequentially (i.e., it should print the complete message from one client and close that connection before handling the next client).</p><p>The server should accept one command line argument, stating the port that the server should use:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python basic_server<span class="selector-class">.py</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure></p><p>The client should accept two command line arguments: the hostname (or IP address) of the server to connect to, and the server port:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python basic_client.py localhost 12345</span></span><br></pre></td></tr></table></figure></p><p>Your server should be reachable from any IP address associated with the machine (see the FAQ).</p><h4 id="Blocking-sockets"><a href="#Blocking-sockets" class="headerlink" title="Blocking sockets"></a>Blocking sockets</h4><p>In this part of the assignment, it’s fine to use blocking sockets. “Blocking” means that a socket call may not return for a while, until the call completes. Cases when socket calls won’t complete immediately include:</p><ul><li>send: if the socket’s internal buffer is full so no data can be written</li><li>recv: if the internal buffer is empty, so there’s no data to read (e.g., if the client has paused sending)</li><li>accept: if these are no clients currently trying to connect</li></ul><h4 id="Example-use"><a href="#Example-use" class="headerlink" title="Example use"></a>Example use</h4><p>Here’s an example of how your client and server should work. Suppose two different clients connected sequentially:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> basic_client.<span class="keyword">py</span> localhost <span class="number">12345</span></span><br><span class="line">I <span class="keyword">am</span> <span class="keyword">a</span> student in CS168. This class <span class="keyword">is</span> awesome!</span><br><span class="line">$ <span class="keyword">python</span> basic_client.<span class="keyword">py</span> localhost <span class="number">12345</span></span><br><span class="line">Why <span class="keyword">is</span> Shenker <span class="keyword">so</span> <span class="keyword">bad</span> at drawing?</span><br></pre></td></tr></table></figure></p><p>If a server had been started on port 12345 before the client was run, it should have printed output as follows:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> basic_server.<span class="keyword">py</span> <span class="number">12345</span></span><br><span class="line">I <span class="keyword">am</span> <span class="keyword">a</span> student in CS168. This class <span class="keyword">is</span> awesome!</span><br><span class="line">Why <span class="keyword">is</span> Shenker <span class="keyword">so</span> <span class="keyword">bad</span> at drawing?</span><br></pre></td></tr></table></figure></p><h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><p>In the remainder of the assignment, you’ll build on your basic client and server to create a chat server with different channels that clients can communicate on. For a demo of how your server should behave, watch the video here.</p><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>We’ve provided a utils.py file that has error messages that you should use. These are intended to make your life easier, and also to enable testing. Be sure you use these messages; otherwise, your code will fail the tests!</p><p>Non-blocking sockets<br>You’ll need to use non-blocking sockets for this part of the assignment, because both your client and server need to receive data from multiple sources, in an unknown order. Consider what would happen if your client used blocking sockets, as in part 0, with a call like:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">message_from_server</span> = client_socket.recv(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>Now suppose that the server doesn’t send any messages for a while, but while the client is blocked waiting on the recv call to return, the user types some data into stdin. The client should read the data from stdin and send it to the server – but the client is stuck blocked waiting on data from the server socket! To address this problem, you can use non-blocking sockets.</p><p>To use non-blocking sockets, you’ll need to use the select call in the select library. For more about how to use select and a very relevant example, take a look at this page. While you are required to use non-blocking sockets for reading data and accepting connections, it’s fine to use blocking sockets for sending messages (since the messages you’re sending are short and you don’t need to handle sending a large number of messages in quick succession, send and sendall should not block for long periods of time).</p>]]></content>
    
    <summary type="html">
    
      Python版直接用socket包就好，也不需要像C语言一样处理大量的I/O异常，也算是比较省事的。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CPSC4660-Database-Management-Systems</title>
    <link href="https://tk1307993.coding.me/CPSC4660-Database-Management-Systems.html"/>
    <id>https://tk1307993.coding.me/CPSC4660-Database-Management-Systems.html</id>
    <published>2019-08-03T01:35:23.000Z</published>
    <updated>2019-08-05T13:23:31.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>Briefly describe (in your own words) each of the 7 RAID level, including one improvement that each RAID level makes over the previous levels.</p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><ol><li>Briefly describe one advantage and disadvantage of using fixed-length records in a file</li><li>Briefly describe one advantage and disadvantage of using variable-length records in a file</li></ol><h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h3><p>Construct a B+-tree for the following set of key values. Assume that a node size of 4 pointers (i.e. 3 keys) is used. (If you want to be considered for part marks in the even of a mistake, you should show some of the intermediate steps).<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">35</span>,<span class="number">39</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h3><p>Starting with the resulting B+-tree created from Question 3, show the resulting B+-tree after each of the following operations are performed.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Insert <span class="number">17</span></span><br><span class="line">Insert <span class="number">18</span></span><br><span class="line">Insert <span class="number">16</span></span><br><span class="line">Delete <span class="number">31</span></span><br><span class="line">Delete <span class="number">24</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h3><p>Construct an extendible Hashing Structure for the following set of key values. Assume that a bucket size of 3 entries, and the hashing function h(x) = x mod 8, are used. (If you want to be considered for part marks in the event of a mistake, you should show some of the intermediate steps).<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">35</span>,<span class="number">39</span></span><br></pre></td></tr></table></figure></p><h3 id="Question-6"><a href="#Question-6" class="headerlink" title="Question 6"></a>Question 6</h3><p>Starting with the resulting extendible hashing structure from Question 5, show the resulting structure after each of the following operations are performed.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Delete <span class="number">19</span></span><br><span class="line">Delete <span class="number">39</span></span><br><span class="line">Insert <span class="number">9</span></span><br><span class="line">Insert <span class="number">28</span></span><br></pre></td></tr></table></figure></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>这次作业前面两个问题主要涉及理论，后面四个问主要涉及B+树的编写。</p>]]></content>
    
    <summary type="html">
    
      主要是使用一个数据库系统(SQL语言)。这次作业由于是第一次，偏基础，主要是一些理论的东西，以及写一个B+树，难度不大。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CP164-Stacks</title>
    <link href="https://tk1307993.coding.me/CP164-Stacks.html"/>
    <id>https://tk1307993.coding.me/CP164-Stacks.html</id>
    <published>2019-08-02T02:25:25.000Z</published>
    <updated>2019-08-02T02:28:52.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Using-Versus-Extending-an-ADT"><a href="#Using-Versus-Extending-an-ADT" class="headerlink" title="Using Versus Extending an ADT"></a>Using Versus Extending an ADT</h3><p>Note: In this and future labs we make a distinction between using an ADT and extending an ADT. You must be clear on this distinction:</p><h3 id="Using-an-ADT"><a href="#Using-an-ADT" class="headerlink" title="Using an ADT"></a>Using an ADT</h3><p>When asked to use an ADT write a program that is implementation independent, i.e. the program uses only ADT methods (such as those for a stack) and works for either the array or linked implementation of a data structure. Do not change any code in the ADT implementation files such as stack_array.py.</p><h3 id="Extending-an-ADT"><a href="#Extending-an-ADT" class="headerlink" title="Extending an ADT"></a>Extending an ADT</h3><p>When asked to extend an ADT you are going to add new methods to an ADT, meaning that you are going to add code to one or both of the array or linked implementation of a data structure, such as stack_array.py.</p><h3 id="The-Stack-ADT-Abstract-Data-Type"><a href="#The-Stack-ADT-Abstract-Data-Type" class="headerlink" title="The Stack ADT (Abstract Data Type)"></a>The Stack ADT (Abstract Data Type)</h3><p>A stack is a data structure that follows LIFO (Last In, First Out) rules. Data is added to the top of a stack and removed from the top of a stack. The Stack ADT provides methods for manipulating data in a stack.<br>A reminder of some important points of ADT use are:</p><ul><li>No matter what the underlying implementation of the stack programs should access a stack only through these methods.</li><li>As a corollary to the first point, the stack can be implemented in any number of ways so long as any given implementation follows the ADT function requirements. The implementation must invisible to the program using the Stack ADT.</li><li>A stack may store any type of data, although all the data it stores should be of the same type.</li></ul><p>The following code imports a stack class and the Food class then initializes a stack:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> stack_array <span class="keyword">import</span> Stack</span><br><span class="line"><span class="keyword">from</span> food <span class="keyword">import</span> Food</span><br><span class="line"></span><br><span class="line">s = Stack()</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></p><h3 id="Project-References"><a href="#Project-References" class="headerlink" title="Project References"></a>Project References</h3><p>As we work through the term we will be creating a number of different data structures and adding more functionality to the Food library already written. Making sure that each new project has the latest version of a data structure or Food library is difficult to do if we are reduced to copying and pasting our pydev modules into each new project. Fortunately, Eclipse provides a much better mechanism to reference code. Setting up Project References allows you to link one Pydev project to another, and to use the code from one project in another with the import and from … import * statements already shown. Nothing needs to be changed in your source code.</p><p>To make a reference from one project to another in Eclipse, right click on a project name in the Navigator pane. From the resulting pop-up menu click on Properties and then on Project References in the resulting dialog box.</p><p>Click on the check box of all projects that you wish to reference from the current project. In this example the project album is already selected, and the project data_structures will be added as a reference. Once this is done all of the classes in both album and data_structures will be available through import statements.</p><p>A few things to keep in mind when using project references:</p><ul><li>All referenced projects must be open when attempting to run a program.</li><li>Submit all referenced projects as part of your Eclipse archive (.zip) file when submitting exercises or the markers will not be able to run your programs. You may select multiple projects to include in an Eclipse archive file.</li><li>Do not use the same Pydev module names in two different referenced projects or Eclipse will not know which one an import statement is supposed to be referring to.</li><li>Project references go one way only. If the project stacks references the project data_structures, then data_structures should not reference stacks. Circular references are a very bad idea.</li><li>Upon occasion referenced projects may become ‘out of sync’ with the project that references them. To fix this, right-click on the project and choose Refresh to update Eclipse from the file system.</li></ul><h3 id="Array-based-Stacks"><a href="#Array-based-Stacks" class="headerlink" title="Array-based Stacks"></a>Array-based Stacks</h3><p>The file stack_array.py is a text file containing the basic outline of the array-based Stack class. Copy this code into the Pydev module stack_array.py in your login_data_structures project (where login is your Network login). Thus, a student with the Network login barn4520 should name their projects barn4520_Food and barn4520_data_structures.) The Lab Instructor will walk you through this library and discuss its inner workings.</p><h3 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h3><p>(If you were unable to complete Lab 1 correctly, you may use these files: food.py, food_utilities.py, and foods.txt as the basis for your lab. These files will not be available until after the labs for the previous week are completed.)</p><p>For the appropriate tasks you may download and use the Food class definition in food.py from Lab 1.</p><p>For all of your data structures (stacks, queues, BSTs, etc.), put your code into libraries in your Pydev project login_data_structures.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的是一个关于Stack的Lab作业，由于是Lab作业，工作量并不大，都是基本的Stack操作。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
</feed>
