<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2022-09-02T03:11:48.023Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>COMPS311-Android-App</title>
    <link href="https://tk1307993.coding.me/COMPS311-Android-App.html"/>
    <id>https://tk1307993.coding.me/COMPS311-Android-App.html</id>
    <published>2022-09-02T03:09:53.000Z</published>
    <updated>2022-09-02T03:11:48.023Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1-Basics-and-resources"><a href="#Question-1-Basics-and-resources" class="headerlink" title="Question 1 - Basics and resources"></a>Question 1 - Basics and resources</h3><p>In this question, you create an Android app that displays your information according to the following requirements.</p><ul><li>The name of the app is “My Name”, and the package name of the app (i.e. app id)</li><li>By default, the app displays your name in English and your student ID.</li><li>If the locale of the device is traditional Chinese - Hong Kong, the app displays your name in Chinese and your student ID.<br>The following are sample outputs when the app is executed in locales of English (left) and traditional Chinese - Hong Kong (right), respectively.</li></ul><p>Submit one whole Android project that contains all your work for this question.</p><h3 id="Question-2-Layout-and-UI"><a href="#Question-2-Layout-and-UI" class="headerlink" title="Question 2 - Layout and UI"></a>Question 2 - Layout and UI</h3><p>Unit 6 contains an example app of a tip calculator. Enhance the app according to the following screenshots and requirements.</p><ul><li>a. Modify the portrait layout (existing in the project) to add 12 buttons under the “Bill Amount” input field, as shown in the left screenshot above.</li><li>b. Create a new landscape layout that contains the same components in the portrait layout (with the same IDs). Design the layout so that the components work properly in the landscape device orientation.</li><li>c. Implement the event handlers of the 12 new buttons as follows.</li><li>d. Create an “About” options menu item and show it as an action item. You may use a built-in Android drawable resource as its icon. When the item is selected, an “About” dialog box appears to show your name and your student ID, as in the middle screenshot above.</li><li>e. Create three options menu items “No fractional digits”, “One fractional digit”, and<br>“Two fractional digits”. These menu items are checkable, mutually exclusive, and in a group. They control the number of digits displayed after the decimal point for the output fields of “Total Bill Amount” and “Total Per Person”. The right screenshot above shows the output fields with one fractional digit.</li></ul><p>For simplicity, you may hard-code new strings in the programs, and don’t need to use primary or alternative string resources for them. Submit one whole Android project that contains all your work for this question.</p><h3 id="Question-3-Fragments-networking-and-concurrency"><a href="#Question-3-Fragments-networking-and-concurrency" class="headerlink" title="Question 3 - Fragments, networking and concurrency"></a>Question 3 - Fragments, networking and concurrency</h3><p>In this question, you develop an Android that checks the status of Web pages. A skeleton project, called WebChecker, is provided to you. Complete the project by working through the following tasks.</p><p>The following screenshots show the main screen (left) and log message screen (right) of the app. Submit one whole Android project that contains all your work for this question.</p>]]></content>
    
    <summary type="html">
    
      完成一个Android应用程序，做一个小费计算器。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS5005-Sorting-Algorithms</title>
    <link href="https://tk1307993.coding.me/CS5005-Sorting-Algorithms.html"/>
    <id>https://tk1307993.coding.me/CS5005-Sorting-Algorithms.html</id>
    <published>2022-09-01T09:27:04.000Z</published>
    <updated>2022-09-01T09:28:23.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>Sorting algorithms are arranging the given data in order. Several sorting techniques are used in almost every application to efficiently handle requests of many kinds. In this project, you would be implementing the Shell Sort and Adaptive sort techniques. You would also be measuring the time taken for each of them and plotting them as a line graph to visually compare.</p><h3 id="Implementation-of-the-class"><a href="#Implementation-of-the-class" class="headerlink" title="Implementation of the class"></a>Implementation of the class</h3><p>The sortData class defined in the sampleMainP3.cpp file will be used. The two fields we have here which are private are the number of elements(N) and the elements themselves(elements) which is an array of integers of either short or long(only for experimentation).<br>The methods(prototypes) that would be required for implementation of these sorting techniques are given to you in the sampleMain file.</p><h3 id="Generation-of-the-random-numbers-for-sorting"><a href="#Generation-of-the-random-numbers-for-sorting" class="headerlink" title="Generation of the random numbers for sorting"></a>Generation of the random numbers for sorting</h3><p>You are required to generate random numbers that are numElements number long. The numElements are given to you in the input file.<br>The way you would generate the random numbers is with the seed(srand()) that is given to you in the input file. This seed would make sure the random numbers that you generate are pseudo random. This means that with the same seed, every time you generate the numbers, it will be the same set of numbers.</p><p>The random numbers generated also need to be within the range(between lower and upper) given in the input file.<br>Input file<br>The first line in the input file is the number of elements(numElements). The line following that has the seed followed by the lower range and the upper range for random number generation.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>There will be 2 parts to the submission component in this project. To write the algorithms and sort the pseudo randomly generated numbers so that you pass the GradeScope autograding test cases(upload code saved as project4.cpp). The second would be to experiment and write a report on the sorting algorithms written for an array of short and long integers. More details follow.</p><h3 id="Autograder-submission"><a href="#Autograder-submission" class="headerlink" title="Autograder submission"></a>Autograder submission</h3><p>The code written for the autograding submission would be using the array of short integers. You are given a sample output file and you would need to write the algorithms and display the sorted numbers for the given input file. Nothing fancy here.</p><h3 id="Experimentation-and-Report-submission"><a href="#Experimentation-and-Report-submission" class="headerlink" title="Experimentation and Report submission"></a>Experimentation and Report submission</h3><p>For the experimentation part, you would change the class to having only the numElements and an array of long integers. And you would run both the sorting algorithms to sort these array of long integers.<br>You would have to plot the time taken for sorting(does not include random generation nor printing - use clock_t) 5000, 10000, 50000, 100000 number of elements for both short and long integers for both the algorithms(a graph(time vs numElements) with 4 lines).<br>You also need to explain the results you get by answering the question of why.</p><h3 id="Final-submission-requirement"><a href="#Final-submission-requirement" class="headerlink" title="Final submission requirement"></a>Final submission requirement</h3><p>You would need to submit 3 files at the end.</p><ol><li>project4.cpp - for autograding that uses array of short integers</li><li>project4_long.cpp - for review by grader and uses array of long integers</li><li>Report with plot.</li></ol><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><ol><li>You are allowed to use only the libraries given in the sampleMainP4.cpp.</li><li>You need to work individually in this project.</li><li>Any use of internet’s resources need to be cited in your code.</li></ol>]]></content>
    
    <summary type="html">
    
      排序算法Sorting Algorithm按顺序排列给定的数据。几乎在每个应用程序中都使用了几种排序技术来有效处理多种请求。本次作业将实现Shell Sort和Adaptive sort算法，同时计算每个所花费的时间，并绘制为折线图以进行直观比较。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>ECE175-Go-Fish</title>
    <link href="https://tk1307993.coding.me/ECE175-Go-Fish.html"/>
    <id>https://tk1307993.coding.me/ECE175-Go-Fish.html</id>
    <published>2022-08-31T09:11:34.000Z</published>
    <updated>2022-08-31T09:13:22.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You are to develop an interactive game of Go Fish between two players. In Go Fish, each player takes turns asking for a card with a specific rank or face from another player. The goal is to form a book (a set of 4 cards with the same face or rank). The player with the most books at the end of the game is declared the winner. The gameplay for Go</p><p>Fish is described at <a href="https://en.wikipedia.org/wiki/Go_Fish" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Go_Fish</a>. Your program should operate as follows.</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Go Fish cards are represented as variables of the following type:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">card_s</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> suit[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">card_s</span> *<span class="title">pt</span>;</span></span><br><span class="line">&#125; card;</span><br></pre></td></tr></table></figure><ol><li>You are allowed to add attributes to this definition, but not to remove any. You can represent colors by using card suits. Red: hearts; Yellow: diamonds; Green: clubs; Blue: spades. The action field is used to denote the function of action cards.</li><li>The game is played with a standard 52-card deck.</li><li>At the beginning, the user can choose to shuffle the deck or load a predefined sequence of cards from a file (for testing). The cards are stored in a file in a format of your choice. For instance, they could be stored in the form</li><li>The deck is implemented by a dynamic list of cards. This can be a singly-linked or a doubly-linked list (recommended). The cards drawn from the deck are deleted from the list.</li><li>Each player’s hand is implemented by a dynamic list of cards. The list is initially populated with the cards dealt to each player. The card drawn (played) by each player is added to (deleted from) the respective list.</li><li>The pool of cards in the center is implemented as a dynamic list of cards that is shuffled at the beginning of your game. The cards drawn or discarded in the pile is added/deleted in a dynamic fashion.</li></ol><h3 id="Game-Play"><a href="#Game-Play" class="headerlink" title="Game Play"></a>Game Play</h3><p>The gameplay is described at <a href="https://en.wikipedia.org/wiki/Go_Fish" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Go_Fish</a></p><h3 id="Optional-Features-for-Extra-Credit"><a href="#Optional-Features-for-Extra-Credit" class="headerlink" title="Optional Features for Extra Credit"></a>Optional Features for Extra Credit</h3><ol><li>Any number of players: Modify your code to work with more than two players. Look at the rule changes when more than 4 players participate (in terms of card dealing).</li><li>Game variations: Implement at least four game variations, as they are described in the game description.</li><li>Player automation: Automate one of the players to implement to play the game according to a winning strategy</li><li>Graphics. Add graphics to your game. You can print cards using ascii art. For example.</li></ol><h3 id="Sample-Execution"><a href="#Sample-Execution" class="headerlink" title="Sample Execution"></a>Sample Execution</h3><p>Note: You are encouraged to make your output look more appealing than what is given below. Your interface should display sufficient direction for a user to play the game. Get friends and family to play your game without much assistance.</p><p>It is very likely that you will not get the exact same code execution shown below. This is used to show you how the game should be played.</p>]]></content>
    
    <summary type="html">
    
      代写游戏Go Fish，练习基本的C语言程序设计思想。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS12B-Edit-Distance</title>
    <link href="https://tk1307993.coding.me/CS12B-Edit-Distance.html"/>
    <id>https://tk1307993.coding.me/CS12B-Edit-Distance.html</id>
    <published>2022-08-31T08:40:40.000Z</published>
    <updated>2022-08-31T08:43:13.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You are to write a client program that computes the edit distance between two words, i.e., the minimum number of operations needed to transform one string into the other.</p><p>For this program, an operation is a substitution of as single character, such as from “brisk” to “brick”. The edit distance between the words “dog” and “cat” is 3, because the chain of “dot”, “cot” and “cat” transforms “dog” to “cat”.</p><p>When computing the edit distance between two words, each intermediate word must be an actual valid word. Edit distances are useful in applications that need to determine how similar two strings are, such as spelling checkers.</p><p>Your program should ask the user for the name of a dictionary text file (we will provide this). From this file, you should compute a map from every word to its intermediate neighbors; that is, the words that have an edit distance of 1 from it. Once this map is built, you can ask the user to enter two words to compare and you “walk” the map to find paths from one word to another. This process should be done in a loop: once you compute the edit distance of two words, you prompt again the user for the next two words.</p><p>A good way to process paths to walk the map is to use a linked list of words to visit, starting from the beginning word, such as “dog” in the above example. Your algorithm should repeatedly remove the front word of the list and add all of its neighbors to the end of the list, until the ending word (such as “cat”) is found or until the list becomes empty, which indicates that no path exists between the two words.</p><p>Special cases: (1) If a word is not included in the dictionary your program should print out the message “Word does not exist”, (2) The edit distance of two words with different length is not defined. Therefore, if the two words given as an input by the user do not have the same length then your program should print the message “No solution”, (3) if both cases (1) and (2) occur, you may print either error message.</p><h3 id="General-Guidelines"><a href="#General-Guidelines" class="headerlink" title="General Guidelines"></a>General Guidelines</h3><p>You should download from LATTE two dictionary files. File text.txt has a dictionary of 8 words. You can use it to the your program with the “dog”/“cat” example (among others). File dict.txt is a larger file and you should use it to test your program with more complex examples. We will be using this file for testing your programs.</p><p>You don’t need to create any classes for this part. You only need to write one client program and you should name it EditDistance.java. You should however break your program into methods (e.g., one that builds the map, show transformation paths, calculates edit distance, etc)</p><p>You will be graded on correctness and programming style including the use of good variable names, comments on each class and each method, using local variables when possible, correct use of generics and the other standard style guidelines.</p><h3 id="User-Interaction"><a href="#User-Interaction" class="headerlink" title="User Interaction:"></a>User Interaction:</h3><p>While you choose how you want to break your code up into methods, we choose how your program needs to behave externally. You must follow the template we outline for you below.</p><p>Your program should first ask the user for the name of a dictionary file on one line. Your program should then loop through the following interactions, each of which should be on a separate line.</p><p>Ask the user for two words separated by a single space for which to compute the edit distance.<br>Print “Path = “ followed by each word in the edit path (starting with the first word the user entered), a comma, a space, then the next word. A comma or a space should not follow the last word.<br>Print “Edit distance = x”, where x is the edit distance.<br>Here is an example user interaction where everything in bold is input by the user, and everything not in bold is output by your program.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Enter name <span class="keyword">of</span> dictionary <span class="built_in">file</span>: dict.txt</span><br><span class="line">Enter <span class="literal">two</span> <span class="keyword">words</span> separated <span class="keyword">by</span> <span class="keyword">a</span> <span class="literal">space</span>: dog cat</span><br><span class="line">Path = dog, dot, cot, cat</span><br><span class="line">Edit distance = <span class="number">3</span></span><br><span class="line">Enter <span class="literal">two</span> <span class="keyword">words</span> separated <span class="keyword">by</span> <span class="keyword">a</span> <span class="literal">space</span>: brisk brick</span><br><span class="line">Path = brisk, brick</span><br><span class="line">Edit distance = <span class="number">1</span></span><br><span class="line">Enter <span class="literal">two</span> <span class="keyword">words</span> separated <span class="keyword">by</span> <span class="keyword">a</span> <span class="literal">space</span>: transportation cat</span><br><span class="line">No Solution</span><br><span class="line">Enter <span class="literal">two</span> <span class="keyword">words</span> separated <span class="keyword">by</span> <span class="keyword">a</span> <span class="literal">space</span>: foobar whobar</span><br><span class="line">Word does <span class="keyword">not</span> exist</span><br></pre></td></tr></table></figure><p>You may choose to implement a quit operating by listening for a single word from the user, such as “quit”, if you would like, but you do not have to.</p><h3 id="Design-Hints"><a href="#Design-Hints" class="headerlink" title="Design Hints"></a>Design Hints</h3><p>There are better algorithms for computing edit distance, but this approach runs reasonably quickly even for a large dictionary like dict.txt. The slow part is computing the neighbors, but that could be pre-computed and stored in a separate file. The program uses a LinkedList as a queue to keep track of candidate words to explore. A set is used to keep track of previously explored words. The algorithm keeps a count of how many words are at each distance from the original word so that it can report the edit distance. It also constructs a map each time it explores that keeps track of how it got to each word. That allows the program to report the path between the two words. All in all, this involves a LOT of data structure manipulation using the standard Java collections classes.</p><p>You DON’T need to follow this design. You are free to design your own program as you wish.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Your Java source code should be submitted via Latte the day it is due.</p>]]></content>
    
    <summary type="html">
    
      根据题目所给的算法，计算单词之间的编辑距离。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CSCI2110-Huffman-Coding</title>
    <link href="https://tk1307993.coding.me/CSCI2110-Huffman-Coding.html"/>
    <id>https://tk1307993.coding.me/CSCI2110-Huffman-Coding.html</id>
    <published>2022-08-31T08:17:49.000Z</published>
    <updated>2022-08-31T08:21:02.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The objective of this assignment is to implement the Huffman coding algorithm using the binary tree data structure.</p><p>Download BinaryTree.java, Frequency.txt and Pokemon.txt files given next to the Assignment link.</p><h3 id="Problem-Summary"><a href="#Problem-Summary" class="headerlink" title="Problem Summary"></a>Problem Summary</h3><p>You are given a table of letters of the English alphabet and their frequencies. Build a Huffman tree with the alphabet symbols and their probabilities. Derive the Huffman codes. Using the codes, encode a given text file with the codes. Decode the encoded text file and show that it is the same as the input text file.</p><h3 id="Problem-in-Detail"><a href="#Problem-in-Detail" class="headerlink" title="Problem in Detail"></a>Problem in Detail</h3><p>In order to help you with the assignment, here’s the Huffman algorithm step-by-step procedure (as discussed in the lectures).</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Read the text file frequency.txt. Its link is given next to this lab document. It contains the frequency of letters in the English alphabet based on a sample of 40,000 words as shown below. (The file actually contains each letter and its frequency on two separate lines).</p><p>To do this step, you will find it useful to create a class called Pair.java that defines the letter and its probability as an object.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">char</span> letter;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> prob;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//constructor</span></span><br><span class="line">  <span class="comment">//get and set methods</span></span><br><span class="line">  <span class="comment">//toString method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Using this set of letters and frequencies, build the Huffman tree.</p><h3 id="Step-3-1"><a href="#Step-3-1" class="headerlink" title="Step 3.1"></a>Step 3.1</h3><p>Create a queue of Binary Tree nodes. Each Binary Tree node is of type Pair. The queue can be implemented as another simple Arraylist, where enqueue means adding an item to the end of the Arraylist and dequeue means removing the item at index 0. That is, the queue is an Arraylist of type &lt;BinaryTree<pair>&gt;. The queue contains these sorted according to the increasing order of their frequencies. This is your Queue S. This is done by checking the Arraylist freqs for values in increasing order, creating the binary tree nodes and enqueueing them in the queue.</pair></p><p>If you enumerate the Queue S, it should have the Pair objects in increasing order of their frequencies</p><h3 id="Step-3-2"><a href="#Step-3-2" class="headerlink" title="Step 3.2"></a>Step 3.2</h3><p>Now initialize another queue T (another Arraylist) of type &lt;BinaryTree<pair>&gt;.</pair></p><h3 id="Step-3-3"><a href="#Step-3-3" class="headerlink" title="Step 3.3"></a>Step 3.3</h3><p>Build the Huffman tree according to the algorithm discussed in the lectures.</p><p>For instance, in the above example, first (‘Z’, 0.07) and (‘J’, 0.10), will be dequeued from S. Create a node with the combined frequency. What do you put as the character for the combined node? You can put a dummy character, say ‘&amp;’. So (‘&amp;’,0.17) will be the parent node, and (‘Z’, 0.07) and (‘J’, 0.10), will be the left and right children. This tree will be enqueued to Queue T.</p><p>Submit a zip file containing all the source codes (.java files), Frequency.txt, Pokemon.txt, Encoded.txt and Decoded.txt.</p>]]></content>
    
    <summary type="html">
    
      使用Binary Tree代写Huffman Coding算法。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>COMP1521-Virtual-Memory-Simulator</title>
    <link href="https://tk1307993.coding.me/COMP1521-Virtual-Memory-Simulator.html"/>
    <id>https://tk1307993.coding.me/COMP1521-Virtual-Memory-Simulator.html</id>
    <published>2022-07-11T01:28:35.000Z</published>
    <updated>2022-07-11T01:35:11.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><ul><li>to give you more practice writing C</li><li>to give you experience with a simulation</li><li>to learn more about virtual memory systems</li></ul><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Virtual memory is a powerful technique that allows the main memory of a computer system to be shared amongst a large number of processes. It also allows indivudual processes to have a process address space that is potentially larger than main memory.</p><p>The implementation of virtual memory requires the system to maintain, for each process, a mapping table (page table) that tells where each page is loaded in memory, or that it is not loaded. Whenever the process references an address in its address space, we use the page table to map this virtual address to a real location in the machine’s memory. If a referenced page is not currently loaded, then we need to place it in a memory frame. If there is a free frame, we can use that; if all frames are in use, then we need to make space, by replacing the contents of one of the existing frames.</p><p>For more details on page replacement strategies, see the lecture notes. For this exercise, we focus on:</p><ul><li>LRU … replace the page that hasn’t been accessed for longest time</li><li>FIFO … replace the page that was loaded earliest</li></ul><p>The following diagram shows a page table that maps the pages of a process with 8 pages into the 4 frames in main memory:</p><p>The aim of this assignment is to build a simple simulation of a system like the above, where we can measure how the system behaves if we change the number of pages, number of frames, and the page replacement policy.</p><p>We do not fully represent pages or frames in our system, nor do we “execute” programs. We provide data structures for the page table and a minimal representation of memory pages. This gives enough to read a sequence of page references and measure how the page table might behave in a real implementation.</p><h3 id="Setting-Up"><a href="#Setting-Up" class="headerlink" title="Setting Up"></a>Setting Up</h3><p>Create a new directory for working on the assignment, change into that directory, and then run the command:</p><p>$ unzip /home/cs1521/web/17s2/assigns/ass2/ass2.zip<br>This will add the following files into the directory:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Makefile        <span class="keyword">to</span> control compilation</span><br><span class="line">Stats.[ch]        implementation <span class="keyword">and</span><span class="built_in"> interface </span><span class="keyword">to</span> the summary statistics collection <span class="keyword">and</span> display</span><br><span class="line">Memory.[ch]        implementation <span class="keyword">and</span><span class="built_in"> interface </span><span class="keyword">to</span> the representation of physical memory frames</span><br><span class="line">PageTable.[ch]    implementation <span class="keyword">and</span><span class="built_in"> interface </span>of the<span class="built_in"> page </span>table (what you need <span class="keyword">to</span> modify) </span><br><span class="line">vmsim.c            the main program <span class="keyword">for</span> the virtual memory simulator</span><br><span class="line">mktrace.c        a program <span class="keyword">to</span> generate memory reference traces</span><br></pre></td></tr></table></figure></p><p>The page table is represented by an array of PTE structures which is dynamically created at the start of the simulation. Each PTE contains the following information:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> status;    <span class="comment">// NOT_USED, IN_MEMORY, ON_DISK</span></span><br><span class="line"><span class="keyword">char</span> modified;  <span class="comment">// boolean: has the page changed since loaded?</span></span><br><span class="line"><span class="keyword">int</span> frame;      <span class="comment">// memory frame holding this page</span></span><br><span class="line"><span class="keyword">int</span> accessTime; <span class="comment">// clock tick for last time the page was accessed</span></span><br><span class="line"><span class="keyword">int</span> loadTime;   <span class="comment">// clock tick for last time the page was loaded</span></span><br><span class="line"><span class="keyword">int</span> nPeeks;     <span class="comment">// total number times this page referenced for reading</span></span><br><span class="line"><span class="keyword">int</span> nPokes;     <span class="comment">// total number times this page referenced for writing</span></span><br></pre></td></tr></table></figure><p>You can find more details on the supplied code, and how to use it in the Assignment 2 Video.</p><h3 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h3><p>The aim of this exercise is to implement two page replacement strategies (LRU and FIFO) and collect statistics on the page table’s behaviour. Implementing the page replacement strategies requires you to complete the findVictim() function. Collecting he statiscs requires you to place calls to the statistics functions in the appropriate places. You can find out more details on what statistics need to be collected in the Stats.c file.</p><p>A simple, and extremely inefficient, implementation of LRU replacement would work as follows:<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">oldest</span> = now</span><br><span class="line"><span class="attr">victim</span> = NONE</span><br><span class="line">for (<span class="attr">i</span> = <span class="number">0</span>; i &lt; <span class="comment">#Pages; i++) &#123;</span></span><br><span class="line">  <span class="attr">P</span> = PageTable[i]</span><br><span class="line">  <span class="keyword">if</span> (P's accessTime &lt; oldest)</span><br><span class="line">    <span class="attr">oldest</span> = P's accessTime</span><br><span class="line">    <span class="attr">victim</span> = P's page</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A better strategy would be maintain a list of pages, ordered by access time from oldest (first in list) to most recent (last in list). The above code would then simply remove the first page from the list and use that as the page to be replaced. Of course, the list needs to be updated each time a page is accessed.</p><p>The list should not be implemented as a separate data structure, but could be done by incorporating a “link” to the next page in the list in each PTE. You would also need to maintain a global variable to hold the page number of the first page in the list.</p><p>Similarly, a simple and inefficient implementation of FIFO replacement would work as follows:<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">oldest</span> = now</span><br><span class="line"><span class="attr">victim</span> = NONE</span><br><span class="line">for (<span class="attr">i</span> = <span class="number">0</span>; i &lt; <span class="comment">#Pages; i++) &#123;</span></span><br><span class="line">  <span class="attr">P</span> = PageTable[i]</span><br><span class="line">  <span class="keyword">if</span> (P's loadTime &lt; oldest)</span><br><span class="line">    <span class="attr">oldest</span> = P's loadTime</span><br><span class="line">    <span class="attr">victim</span> = P's page</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>As above, a better strategy would be to maintain a list of pages, ordered by load time from oldest (first in list) to most recently loaded (last in list). The implementation would be similar to that for the LRU list.</p><p>What you are required to do (and you only need to change the PageTable.c file for this assignment) is specified in comments in the PageTable.c file.</p><h3 id="Sample-Outputs"><a href="#Sample-Outputs" class="headerlink" title="Sample Outputs"></a>Sample Outputs</h3><p>To get you started with debugging, sample outputs are available for the following test cases:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./vmsim lru <span class="number">5</span> <span class="number">4</span> &lt; trace1 &gt; out-lru<span class="number">-5</span><span class="number">-4</span>-trace1.txt</span><br><span class="line">./vmsim fifo <span class="number">5</span> <span class="number">4</span> &lt; trace1 &gt; out-fifo<span class="number">-5</span><span class="number">-4</span>-trace1.txt</span><br><span class="line">./vmsim lru <span class="number">8</span> <span class="number">4</span> &lt; trace2 &gt; out-lru<span class="number">-8</span><span class="number">-4</span>-trace2.txt</span><br><span class="line">./vmsim fifo <span class="number">8</span> <span class="number">4</span> &lt; trace2 &gt; out-fifo<span class="number">-8</span><span class="number">-4</span>-trace2.txt</span><br></pre></td></tr></table></figure></p><h3 id="Additional-Requirements"><a href="#Additional-Requirements" class="headerlink" title="Additional Requirements"></a>Additional Requirements</h3><p>You must not implement the process of finding a victim so that it requires a scan of PageTable entries. Similarly it must not require a scan of any list structure that you might define. Also, the process of updating the LRU or FIFO list must not be an O(n) process. A program that produces output that passes the auto-marking, but is scan-based, is worth only 1/4 marks for the auto-marking, and half marks for each of the list-related assessment criteria.</p><p>Do not add extra debugging output using #ifdef DBUG. If you want to add your own debugging output, enclose it in #ifdef MY_DBUG…#endif and add -DMY_DBUG to the line defining CFLAGS in the Makefile.</p><p>Do not change the “standard” behaviour of showPageTableStatus(). If you want to add extra output on the PageTable, enclose it in #ifdef MY_DBUG…#endif. We assume that showPageTableStatus() has the same behaviour as the supplied version for the purposes of auto-marking.</p>]]></content>
    
    <summary type="html">
    
      代写操作系统作业，实现一个虚拟内存仿真器，包括LRU和FIFO.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="OS" scheme="https://tk1307993.coding.me/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>CPSC231-Chasing-Alice</title>
    <link href="https://tk1307993.coding.me/CPSC231-Chasing-Alice.html"/>
    <id>https://tk1307993.coding.me/CPSC231-Chasing-Alice.html</id>
    <published>2022-06-11T01:28:35.000Z</published>
    <updated>2022-07-11T01:30:33.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Assignment-Objectives"><a href="#Assignment-Objectives" class="headerlink" title="Assignment Objectives"></a>Assignment Objectives</h3><p>This is an individual assignment. You must submit your own work. This assignment has three goals:</p><ol><li>Analyzing requirements and developing a solution</li><li>Reviewing python constructs including., if, if-else, if-elif-else, loops, and functions</li><li>Practicing basic python programming</li></ol><p>Start the assignment early and avoid procrastination.</p><h3 id="Chasing-Alice"><a href="#Chasing-Alice" class="headerlink" title="Chasing Alice"></a>Chasing Alice</h3><p>For this assignment, you develop a turn-based game where you control a blue turtle, Alex, to chase and catch a red turtle, Alice. Create a canvas (also known as screen) of size 500 x 500. Alex must appear at the middle of the canvas. Alice appears at a random location inside the canvas.</p><p>In each turn, Alice can move either forward by 20 pixels or she can change her direction randomly to left or right by 90 degrees. 2/3 of Alice’s movements should be forward movements and 1/3 should be the random direction changing left or right.</p><p>Alex moves as directed by the player using the keyboard. In each turn, the buttons w, a, s, and d lead Alex to move forward for 30 pixels, turn left for 45 degrees, back for 30 pixels, and right for 45 degrees, respectively. If Alex or Alice cross the canvas’s boundaries, they should reappear at a random1 location on the canvas. The game statistic needs to be provided on the screen as shown in the sample. The game ends if Alex comes within 30 pixels of Alice in any direction. See figure 2 to get an idea of how the game will look like.</p><h3 id="Submission-requirements"><a href="#Submission-requirements" class="headerlink" title="Submission requirements"></a>Submission requirements</h3><p>In order to receive a complete grade no global variable or codes outside functions should be in your program. Create a main function and control the program by calling other functions through main. The program starts with calling main() only. Use constants instead of magic numbers. Follow variable name conventions all through your code and be consistence. Use white lines to separate blocks of codes.</p><p>Name your program ChasingAlice.py then submit it to the D2L Assignment 2 dropbox by the deadline stated at the top of this document.</p><h3 id="Collaboration-Plagiarism-and-Cheating"><a href="#Collaboration-Plagiarism-and-Cheating" class="headerlink" title="Collaboration, Plagiarism, and Cheating"></a>Collaboration, Plagiarism, and Cheating</h3><p>This is an individual assignment and all work that you submit must be your own work. We encourage you to discuss this assignment with other students in the course and discourage you from sharing solutions and code with one another. Sharing solutions and code is a form of plagiarism.</p><p>We use automated procedures to detect plagiarism in assignment submissions. Any student who copies all or part of an assignment that belongs to another student or other sources will be reported to the Dean. The Dean enforces penalties, which may include failing the course and expulsion from the faculty and the university. Please refer to Plagiarism/Cheating/Other Academic Misconduct in the university calendar or the university website on plagiarism for more information.</p>]]></content>
    
    <summary type="html">
    
      代写Python作业，使用Turtle库绘制图像，完成追逐游戏。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CITS2002-Wifistats</title>
    <link href="https://tk1307993.coding.me/CITS2002-Wifistats.html"/>
    <id>https://tk1307993.coding.me/CITS2002-Wifistats.html</id>
    <published>2021-12-31T01:53:22.000Z</published>
    <updated>2021-12-31T01:55:37.290Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>This project will assess your understanding of introductory C99 programming language features, including its control­structures, simple data­ structures, and its standard library support for handling strings and text files. The project can be successfully completed using the information presented in CITS2002’s lectures, laboratories, and workshops, to the end of week­6.</p><p>Nearly all devices that connect to the Internet use networking hardware that conforms to IEEE­802 standards, commonly termed the Ethernet standards. It is common for desktop and laptop computers to have two Ethernet interfaces, one wired (the IEEE­802.3 standard) and one wireless (the IEEE­802.11 standard), while mobile devices and smartphones will typically have a single wireless Ethernet interface and a Bluetooth interface (the IEEE­802.15.1 standard).</p><p>To simplify communication between devices, each Ethernet interface has a unique networking address, termed its Media Access Control (MAC) address. Each MAC address is 6­bytes long but, to make them easier for humans to read and compare, they’re usually written as a sequence of hexadecimal characters separated by colons or hyphens, as in the example 74:e2:f5:20:f9:8b. When written this way, MAC addresses are case­ insensitive ­ that is to say that 74­E2­F5­20­F9­8B is the same address.</p><p>When devices communicate using WiFi (the IEEE­802.11 standard) they break their communication into many small packets of data. Each packet contains MAC addresses to identify the device which transmitted the packet (the transmitter’s address), and the device for which the packet is intended (the receiver’s address). The special MAC address, ff:ff:ff:ff:ff:ff, is termed the broadcast MAC address, and is used when all devices within range should receive the packet.</p><p>Each 6­byte MAC address comprises two 3­byte parts. The first 3­bytes are termed the Organizationally Unique Identifier (OUI), and they identify the vendor of the Ethernet interface. From the address 74:e2:f5:20:f9:8b, the 74:e2:f5 indicates that the interface was made by Apple (see <a href="http://www.macvendorlookup.com)" target="_blank" rel="noopener">www.macvendorlookup.com)</a>.</p><p>The goal of this project is to write a C99 program, named wifistats, that reports the number of bytes either transmitted or received by devices using WiFi. The program may be requested to generate reports sorted by either the device MACs or by the vendors’ names, from the largest transmitter (most bytes transmitted) to the smallest.</p><h3 id="Program-requirements"><a href="#Program-requirements" class="headerlink" title="Program requirements"></a>Program requirements</h3><p>Your program’s single C99 source file must be named wifistats.c</p><p>Your program will be invoked in one of two ways:</p><p>prompt&gt; ./wifistats what packets<br>where what is either the single character ‘t’ or ‘r’ to request statistics about WiFi transmitters, or receivers, respectively. For example, if the program is invoked as ./wifistats t packets then the program should produce statistics about the data transmissions of each transmitting device present in the packets file.</p><p>packets is the name of a text­file providing information about each WiFi packet, one packet per line. Here is a sample­packet file. Each line consists of 4 fields, providing the time that each packet was captured (in seconds and microseconds), the transmitter’s and receiver’s MAC addresses, and the length (in bytes) of the packet. Each of the fields will be separated by a single TAB (‘\t’) character.</p><p>If we ran:</p><p>prompt&gt; ./wifistats t sample-packets<br>this would be the required output.If we ran:</p><p>prompt&gt; ./wifistats r sample-packets<br>this would be the required output.</p><p>prompt&gt; ./wifistats what packets OUIfile<br>where OUIfile is the name of a text­file providing the OUIs and names of Ethernet hardware vendors. If an OUIfile is provided, the program should report its statistics not on individual device MAC addresses but on the vendor that produced each device. Here are two sample OUIfiles: sample­OUIfile­small (40 entries) and sample­OUIfile­large (23,000 entries). The 2 fields will be separated by a single TAB (‘\t’) character, and the vendors’ names may contain spaces.</p><p>For example, if we ran:</p><p>prompt&gt; ./wifistats t sample-packets sample-OUIfile-small<br>this would be the required output.<br>If we ran:</p><p>prompt&gt; ./wifistats r sample-packets sample-OUIfile-small<br>this would be the required output.</p><p>You may assume that all input data is in the correct format.<br>If your program encounters a broadcast MAC address, your program should ignore that input line.<br>If your program encounters an OUI not found in a provided OUI file, it should use/report the vendor’s name as UNKNOWN­VENDOR.</p><p>Your program must support these limits (you may assume that the input data never exceeds these limits):</p><p>maximum number of distinct MAC addresses -­ 500.<br>maximum number of distinct OUIs ­- 25000.<br>maximum length of any vendor name ­ 90 characters.<br>Your program must invoke the standard utility program /usr/bin/sort to sort the final results. Your program must use the system­calls fork() and execv() (and possibly others) to invoke /usr/bin/sort. Your program must not just call the C function system(). Note that the command­line options supported by /usr/bin/sort on OS­X, Linux, and cygwin(Windows) are often different.</p><p>If the data totals of two or more MAC addresses, or two or more vendors (via their OUIs), are identical, then the MAC addresses or vendors with identical totals should be printed in ascending alphabetical order.</p><p>Your program must employ sound programming practices, including the use of meaningful comments, well chosen identifier names, appropriate choice of basic data­structures and data­types, and appropriate choice of control­flow constructs.</p><h3 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h3><p>Projects will be marked using an automatic marking program (for correctness) and by visual inspection (for good programming practices). It is thus important that your program produces its output in the correct format. This project is worth 15% of your final mark for CITS2002. It will be marked out of 40. The project may be completed individually or in teams of two (working as a team is STRONGLY encouraged).</p><p>During the marking, attention will obviously be given to the correctness of your solution. However, a correct and efficient solution should not be considered as the perfect, nor necessarily desirable, form of solution. Preference will be given to well presented, well documented solutions that use the appropriate features of the language to complete tasks in an easy to understand and easy to follow manner. Your program must employ sound programming practices, including the use of meaningful comments, well chosen identifier names, appropriate choice of basic data­structures and data­types, and appropriate choice of control­flow constructs. Do not expect to receive full marks for your program simply because it works correctly. Remember, a computer program should not only convey a message to the computer, but also to other human programmers.</p><p>Your project will be marked on the computers in CSSE Lab 2.03, using the macOS environment. No allowance will be made for a program that “works at home” but not on CSSE Lab 2.03 under macOS, so be sure that your code compiles and executes correctly on these machines before you submit it.</p>]]></content>
    
    <summary type="html">
    
      代写一个网络嗅探器，可以获取网络数据包。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network" scheme="https://tk1307993.coding.me/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS103-Car-Rental</title>
    <link href="https://tk1307993.coding.me/CS103-Car-Rental.html"/>
    <id>https://tk1307993.coding.me/CS103-Car-Rental.html</id>
    <published>2021-10-22T11:06:40.000Z</published>
    <updated>2021-10-22T11:11:16.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You are tasked with creating a car-rental app.</p><p>There can be multiple cars with the same model and manufacturer.<br>The status of a car in the system may have one of the three values :<br>“reserved”<br>“checked out”<br>“available”</p><p>A user can reserve a car or rent a car without a previous reservation. A user is not allowed to have more than one car rented at a time. Only after canceling a reservation or returning a rented car, can a user can reserve or rent another car.</p><p>The reservation process is automatic, and does not require an admin to approve requests. If the status of a car is “available” and a user rents it, the status of that car immediately transitions to “reserved”. But an admin can edit the reservation later.</p><p>When a reservation is made, it must specify the time that the car is to be picked up (“checked out”) and returned. In order to simulate checkout and returns actions in the real world, there should be buttons that a user can manually click to indicate that a car has been checked out or returned.</p><p>The minimum rental period is 1 hour and the maximum is 10 hours. The system should cancel a reservation if a user doesn’t check out a car in time. The time elasticity is 30 minutes after the pickup time. For example, if a user reserved a car to pick up at 3:00pm, if the car was not checked out by 3:31pm, then the car should become “available” again.</p><p>If a user doesn’t return a car on the date promised when it was checked out, the system will sent a notification (e.g. system message) to the user and automatically change the car status to “available”.</p><p>A user can only reserve a car 7 days in the future.</p><p>A user can return a car before the specified return time by clicking the “return” button. If a user does this, then the car should become “available”.</p><p>There’s no elasticity in the return time. If the user doesn’t return the car in time (at the specified return time), the car will automatically become “available” and other users can check out this car. For example, user A reserves a car from 2pm to 4pm, user B reserves the same car from 4pm to 6pm. If A doesn’t return the car at 4pm, the system should automatically change the car status to “reserved” and user B can click “check out” button to pick up the car. If no user has reserved this car at 4pm, then the car should automatically become “available”.</p><p>There’s no penalty when a user doesn’t return a car. This app just has a simple payment system. A penalty would only make the calculation more complex.</p><p>The rental charge in user profile is not a deposit. It’s the total fee for the previous successful rental. The system doesn’t need to check if a user has enough on deposit to check out a car because there’s no deposit in this app.<br>A Car will have the following attributes</p><p>License-plate number (a 7-digit string unique for each Car)<br>Manufacturer<br>Model (String …this app doesn’t need to validate that the model is actually produced by the indicated manufacturer.)<br>Hourly Rental rate<br>Style (Coupe, Sedan or SUV)<br>Location (office where the car can be picked up)<br>Status to indicate availability:<br>Checked out - when a customer checks out the car or an admin checks out the car on behalf of a customer<br>Available - otherwise</p>]]></content>
    
    <summary type="html">
    
      代写汽车租赁的小程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CIS2750-LinkedList</title>
    <link href="https://tk1307993.coding.me/CIS2750-LinkedList.html"/>
    <id>https://tk1307993.coding.me/CIS2750-LinkedList.html</id>
    <published>2021-10-04T11:19:51.000Z</published>
    <updated>2021-10-04T11:20:49.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>For this assignment you must implement a list API that has been specified for you. You have been provided with a header file LinkedListAPI.h. You will need to create a file LinkedListAPI.c, which implements all of the functions specified in the header.</p><p>You cannot modify the header file and any way and all your functions must match the header exactly. Your assignment will be evaluated using an automated test suite, and deviations from the requirements specified in the header and the assignment description will result in severe penalties.</p><p>Note that while the list API is based on the one used in CIS*2520 this summer, that are a few differences. The biggest one is the addition of the iterator struct and related functions, but there are a few small changes here and there. Please read the header file carefully.</p><p>I have provided two sample main files that test the list API with two different types of contents. These must work with your list with absolutely no modifications. These files are meant as a guideline that will let you know whether you’re on the right track. They are not exhaustive test suites. You must test all of the functions provided by the list API yourself to make sure they match the requirements.</p><p>As mentioned in class, you are welcome to re-use your old list code from CIS<em>2520. If you did not take CIS</em>2520 with Judi McQuaig or Fangju Wang, make sure to contact your instructor to obtain their permission to use the code. In the header of the LinkedListAPI.c file state which course you are basing your list on.</p><p>A sample .c file with all the required submission headers and comments will be provided separately.</p><p>Compile your code with -Wall -std=c11 flags. Yes, we’ll be using C11 as the default C standard throughout the course. If you want to debug your code using gdb, remember to include the -g flag.</p><p>If you know how to use valgrind, make sure you find and fix all memory leaks. For this assignment, you will not lose marks for memory leaks, since we haven’t yet covered valgrind in class. However, starting with Assignment 1, memory leaks will result in deductions.</p><h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><p>Your code must compile, run, and have all of the specified functionality implemented. Any compiler errors will result in the automatic grade of zero (0) for the assignment.</p><p>Marks will be deducted for:</p><p>Incorrect and missing functionality<br>Deviations from the requirements<br>Run-time errors<br>Compiler warnings<br>Bad /inconsistent indentation<br>Bad variable names<br>Insufficient comments<br>Failure to follow submission instructions<br>To make it easier for you to test your code, I have provided two test files: StringListDemo.c and StructListDemo.c. Make sure that your list API complies and runs with both of them.</p><p>Make sure you compile and run your code in the lab or on the server. The course page will have a link to a Linux iso for VirtualBox that matches the SoCS Linux server. If the link isn’t up yet, it will be posted shortly.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit your LinkedListAPI.c file using Moodle. Additional submission guidelines will be added before the due date.</p><p>Late submissions: see course outline for late submission policies.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构中的Linked List，完成LinkedListAPI中的所有接口函数。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>ENGR30003-Numerical-Programming-for-Engineers</title>
    <link href="https://tk1307993.coding.me/ENGR30003-Numerical-Programming-for-Engineers.html"/>
    <id>https://tk1307993.coding.me/ENGR30003-Numerical-Programming-for-Engineers.html</id>
    <published>2021-09-27T12:51:43.000Z</published>
    <updated>2021-09-27T12:54:43.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>This project requires you to demonstrate your understanding of dynamic memory, linked lists and basic numerical computation. The key objective of this assignment is to solve a set of tasks which involve processing of flow around a flat plate.</p><h3 id="Flow-Around-a-Flat-Plate"><a href="#Flow-Around-a-Flat-Plate" class="headerlink" title="Flow Around a Flat Plate"></a>Flow Around a Flat Plate</h3><p>In the field of Fluid Mechanics, flow around a flat plate perpendicular to the flow direction is still an active area of research. With advent of high performance computing and supercomputers, it has now become possible to look at this simple case with a greater deal of accuracy. The problem consists of a flat plate that is perpendicular to the main flow direction as shown in Figure 1 (left). The blue arrows indicate the direction of the flow while the shaded object is the flat plate. This generates a wake behind the flat plate and exerts a pressure force on the plate, similar to the force you feel when you hold your hand out in a moving car. At a given instant the flow behind the flat plate is extremely complex and a snapshot of the flow domain is shown in Figure 1 (right).</p><h3 id="Working-with-the-Data"><a href="#Working-with-the-Data" class="headerlink" title="Working with the Data"></a>Working with the Data</h3><p>For this assignment, you will process the wake data from a flat plate case. The data has been provided to you in a CSV format file (flow data.csv) with the following form:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x, y, u, v</span><br><span class="line"><span class="number">10.028</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054866</span></span><br><span class="line"><span class="number">10.077</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054739</span></span><br><span class="line"><span class="number">10.126</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054612</span></span><br><span class="line"><span class="number">10.175</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054484</span></span><br><span class="line"><span class="number">10.224</span>, <span class="number">-20</span>, <span class="number">1.0079</span>, <span class="number">-0.0054357</span></span><br></pre></td></tr></table></figure></p><p>Each line corresponds to a point in the flow domain with coordinates (x,y). The velocities at that given point in x and y are given by u and v respectively.</p><h3 id="Processing-Tasks"><a href="#Processing-Tasks" class="headerlink" title="Processing Tasks"></a>Processing Tasks</h3><p>This assignment consists of four processing tasks which will be assessed independently. For each task you are to measure the run time it takes to complete the described task using your program (see program output below). Each of the four tasks must not require more than 60 seconds to run on dimefox. This means, in order to complete the task within this time limit, you may need to focus on the efficiency of your solution for each problem. Overall you have to write a single program, performing each of the four tasks sequentially. For each task you have to write your results to a file on the disk.</p><h3 id="Task-1-Maximum-Velocity-Difference"><a href="#Task-1-Maximum-Velocity-Difference" class="headerlink" title="Task 1: Maximum Velocity Difference"></a>Task 1: Maximum Velocity Difference</h3><p>It is sometimes helpful to understand what’s the range of velocities in the flow. For the first task, you must compute the maximum velocity difference in u and v after coordinate x = 20. Specifically, you must output first the two points in the domain where the magnitude of the u velocity difference is maximum followed by the two points in the grid where the magnitude of the v velocity difference is maximum. For each set of points, the point with the maximum of the given velocity must be first followed by the point with the minimum velocity. The output should be to the file called task1.csv and should be formatted as below. There must be no blank spaces between the values and around the commas. Each value must be written to 6 decimal places.</p><p>It is imperative that you write it out the way described above and shown below otherwise comparing your output to the solution would result in an error and you would lose marks.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y</span>, <span class="selector-tag">u</span>, <span class="selector-tag">v</span></span><br><span class="line">40<span class="selector-class">.512346</span>, <span class="selector-tag">-19</span><span class="selector-class">.595387</span>, 1<span class="selector-class">.007986</span>, <span class="selector-tag">-0</span><span class="selector-class">.001002</span></span><br><span class="line">66<span class="selector-class">.899192</span>, <span class="selector-tag">-0</span><span class="selector-class">.729056</span>, 0<span class="selector-class">.850117</span>, 0<span class="selector-class">.0005807</span></span><br><span class="line">69<span class="selector-class">.552467</span>, <span class="selector-tag">-0</span><span class="selector-class">.729056</span>, 0<span class="selector-class">.852483</span>, 0<span class="selector-class">.0004275</span></span><br><span class="line">60<span class="selector-class">.961891</span>, 0<span class="selector-class">.442134</span>, 0<span class="selector-class">.838355</span>, <span class="selector-tag">-0</span><span class="selector-class">.0006330</span></span><br></pre></td></tr></table></figure></p><p>The above is an example of what the file should look like and is not the actual solution. Also note that the data provided in flow data.csv is not in any chronological order and you must efficiently look only at points where the value of x is greater than 20. You can use file io.c to understand how to output data to a file.</p><h3 id="Task-2-Mean-Velocities-on-a-Coarser-Grid"><a href="#Task-2-Mean-Velocities-on-a-Coarser-Grid" class="headerlink" title="Task 2: Mean Velocities on a Coarser Grid"></a>Task 2: Mean Velocities on a Coarser Grid</h3><p>Each line in the file flow data.csv is a point location in the domain. These points when joined together will create a mesh (also called a grid). For this task, you will map these points onto a coarser grid, computing the new average coordinates (x,y) and the corresponding velocities (u,v). The flow domain can be thought as divided into a two dimensional grid such that each cell of the grid would contain multiple points, the number of which would depend on the cell upper and lower dimensions and the coordinates of the points. You would compute the average coordinates and velocities for each cell using the formula below for all points k within a given cell (this is for the x coordinate; same formula to be used for y, u, v).</p><p>Finally, you must output the results of the averaged values and the score to task2.csv in descending order based on the score for each cell. An example of what the output should look like is shown below. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y</span>, <span class="selector-tag">u</span>, <span class="selector-tag">v</span>, <span class="selector-tag">S</span></span><br><span class="line">20<span class="selector-class">.464390</span>, 19<span class="selector-class">.001188</span>, 1<span class="selector-class">.009472</span>, 0<span class="selector-class">.003123</span>, 3<span class="selector-class">.614885</span></span><br><span class="line">26<span class="selector-class">.493395</span>, <span class="selector-tag">-2</span><span class="selector-class">.917140</span>, 0<span class="selector-class">.950080</span>, 0<span class="selector-class">.003106</span>, 3<span class="selector-class">.564577</span></span><br><span class="line">26<span class="selector-class">.493395</span>, 2<span class="selector-class">.922365</span>, 0<span class="selector-class">.949606</span>, <span class="selector-tag">-0</span><span class="selector-class">.002937</span>, 3<span class="selector-class">.562721</span></span><br><span class="line">26<span class="selector-class">.493443</span>, 10<span class="selector-class">.961477</span>, 1<span class="selector-class">.016337</span>, 0<span class="selector-class">.001415</span>, 3<span class="selector-class">.544763</span></span><br><span class="line">26<span class="selector-class">.493443</span>, <span class="selector-tag">-11</span><span class="selector-class">.009443</span>, 1<span class="selector-class">.016268</span>, <span class="selector-tag">-0</span><span class="selector-class">.001393</span>, 3<span class="selector-class">.542255</span></span><br><span class="line">23<span class="selector-class">.490141</span>, <span class="selector-tag">-16</span><span class="selector-class">.954090</span>, 1<span class="selector-class">.010923</span>, <span class="selector-tag">-0</span><span class="selector-class">.002471</span>, 3<span class="selector-class">.489632</span></span><br><span class="line">23<span class="selector-class">.490141</span>, 16<span class="selector-class">.966158</span>, 1<span class="selector-class">.010908</span>, 0<span class="selector-class">.002496</span>, 3<span class="selector-class">.488729</span></span><br></pre></td></tr></table></figure></p><p>The size of the grid (number of cells in each direction) must be an input parameter, allowing the code to run different grid sizes. Your implementation would be checked for the grid resolution of 24 i.e. 24 cells in x and 24 cells in y. The domain extent for this coarse grid in x and y is 10 to 70 units and -20 to 20 units respectively. An example of the coarse grid is shown in Figure 2 (left). The 24 cells in x direction would span from -10 to 70 units while the 24 cells in y direction would span -20 to 20 units. Also shown is an example of a cell within this grid. As can be seen, the cell is of width x and height y and the black dots show the points in the original grid. Once you do the averaging for all these points, you will end up with one average point (shown in red).</p><h3 id="Task-3-Velocity-and-It’s-Statistics"><a href="#Task-3-Velocity-and-It’s-Statistics" class="headerlink" title="Task 3: Velocity and It’s Statistics"></a>Task 3: Velocity and It’s Statistics</h3><p>For this task, you have to compute the threshold statistics of u velocity magnitudes i.e. how many points in the domain have the magnitude of u under 0.5, under 0.6 and so on. Then you must compute the % of points under each band. An example of this is given below.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">threshold, points, percentage</span><br><span class="line"><span class="number">0.500000</span>, <span class="number">126</span>, <span class="number">11.012561</span></span><br><span class="line"><span class="number">0.600000</span>, <span class="number">256</span>, <span class="number">22.536942</span></span><br><span class="line"><span class="number">0.700000</span>, <span class="number">348</span>, <span class="number">30.613564</span></span><br><span class="line"><span class="number">0.800000</span>, <span class="number">582</span>, <span class="number">51.300236</span></span><br><span class="line"><span class="number">0.900000</span>, <span class="number">810</span>, <span class="number">71.352145</span></span><br><span class="line"><span class="number">1.000000</span>, <span class="number">902</span>, <span class="number">79.496213</span></span><br><span class="line"><span class="number">1.100000</span>, <span class="number">1136</span>, <span class="number">100.000000</span></span><br></pre></td></tr></table></figure></p><p>This example shows that there are 582 points in the domain where the magnitude of u is under 0.8. You must output the results in the same format as above to task3.csv. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown above.</p><h3 id="Task-4-Wake-Profile-Visualization"><a href="#Task-4-Wake-Profile-Visualization" class="headerlink" title="Task 4: Wake Profile Visualization"></a>Task 4: Wake Profile Visualization</h3><p>For this task, you will visualise the wake profile generated by writing the wake boundaries to a text file. To do this, you will first calculate the y coordinate of maximum u velocity. This is to be done for locations x = 10,15,20,25,30,35,40,45,50,55,60,65, i.e. you will look through all the relevant points for each specified x location to choose the maximum of u and pick the corresponding y coordinate. Since the data doesn’t contain exact x coordinates as described here, you will take the x coordinate which are closest to these these numbers. For instance, the closest number to x = 50 in the data file is x = 49.999. To pick the relevant x coordinate, you can use a bound of 0.05 about the specified location (Note that there is exactly one x coordinate that will fall inside the bound so you don’t have to worry about a tie). Output the chosen x location and the magnitude of the corresponding y coordinate in the following format to task4 1.csv. There must be no blank spaces between the values and around the commas. Any float value must be written to 6 decimal places as shown:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">x</span>, <span class="selector-tag">y_h</span></span><br><span class="line">29<span class="selector-class">.980000</span>, 5<span class="selector-class">.921400</span></span><br><span class="line">49<span class="selector-class">.999001</span>, 6<span class="selector-class">.739500</span></span><br><span class="line">54<span class="selector-class">.983002</span>, 6<span class="selector-class">.956200</span></span><br></pre></td></tr></table></figure></p><p>Now that you’ve obtained the y coordinates, calculate the spacing for each location using the following formula:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spacing = ceil(10 |<span class="string">y</span>|<span class="string">)</span></span><br></pre></td></tr></table></figure></p><p>A skeleton version has been provided to you, complete with the print statements to print out the wake boundary. All you need to to do is to obtain the spacings for these 12 x locations into the array yheight where yheight[0] corresponds to the spacing for x=10. The output should be written to the file task4_2.txt.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>You need to submit your program for assessment. Submissions will not be done via the LMS; instead you will need to log in to the server dimefox and submit your files using the command submit . You can (and should) use submit both early and often to get used to the way it works, and also to check that your program compiles correctly on our test system, which has some different characteristics to the lab machines. Only the last submission will be marked. The submission server may be very slow towards the deadline as many students are submitting. Therefore, please do not wait until the last few minutes to make the first attempt of submission. If you make a submission attempt a few minutes before the deadline but the submission was completed after the deadline, your submission will be treated as a submission AFTER the deadline.</p>]]></content>
    
    <summary type="html">
    
      代写工程领域中的数值编程，解决实际的工程问题。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP10002-Text-Search</title>
    <link href="https://tk1307993.coding.me/COMP10002-Text-Search.html"/>
    <id>https://tk1307993.coding.me/COMP10002-Text-Search.html</id>
    <published>2021-09-24T00:09:55.000Z</published>
    <updated>2021-09-24T00:12:51.808Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>In this project you will demonstrate your understanding of arrays, strings, and functions. You may also use typedefs and structs if you wish - and will find the program easier to assemble if you do - but you are not required to use them in order to obtain full marks. Nor do you need to make any use of malloc() in this project.</p><h3 id="Text-Search"><a href="#Text-Search" class="headerlink" title="Text Search"></a>Text Search</h3><p>The Unix command-line tool grep provides the ability to identify the lines in a file that exactly match a pattern supplied as a command-line argument. There are also useful options in grep for the search to be case-insensitive (“-i”) and to match on whole words only (“-w”).</p><p>However there are also times when we want to perform a less precisely defined search, looking for partial matches to (possibly multiple) strings, rather than exact matches relative to one string. For example, we might be unsure of how to spell “latitude” and “longitude”, and want to be able to use “lat long” as a query to identify - in some kind of decreasing-score order - the lines in an input document that contain one or more words that start with those two strings. Similarly, we might be unsure of how to spell someone’s name, and not be bothered if a search for “alis mof” finds all of “Alistair Moffat”, “Alison Mofet”, “Alistair, plus Bob Moffat”, and so on.</p><p>In this project you will write a program that reads text from stdin, generates a “match score” for each line relative to a query supplied on the command-line, and then prints out the lines that have the highest scores - a bit like documents are scored and ranked in web search engines. But, unlike Google and Bing, you will not use an index, and instead you are encouraged (in this project) to make use of obvious approaches. Over a query of up to a five or eight words, and an input text of up to a few megabytes (which is actually quite big), your program should (and had better!) still operate in a second or so. That is, you do not need to implement the pattern search algorithms that are being discussed in class; and may use straightforward matching techniques, including any suitable functions in string.h.</p><h3 id="Input-Data"><a href="#Input-Data" class="headerlink" title="Input Data"></a>Input Data</h3><p>Input to your program will come in two parts: a query, specified on the command-line (see Section 7.11 of the textbook) as a sequence of lowercase alphanumeric strings; and a stream of text, to be (always) read from stdin. If you vary away from these interface requirements the automated testing process will fail your program!</p><p>A range of text input data will be used during the post-submission testing. As you develop your program according to the stages listed below, the output will evolve. Output examples for both the alice-eg.txt and full Alice’s Adventures in Wonderland pg11.txt file are linked from the FAQ page. You should also check your program against other queries and inputs, of course. Testing and debugging is your responsibility.</p><h3 id="Stage-1-Checking-the-Command-Line"><a href="#Stage-1-Checking-the-Command-Line" class="headerlink" title="Stage 1 - Checking the Command-Line"></a>Stage 1 - Checking the Command-Line</h3><p>In this stage you are to demonstrate that you can access the first of the two required inputs, the query from the command-line. The query itself will be provided to you via argc and argv. If argc is zero when your program is called you should print the required error message and exit; and if any character in any of the strings making up the query is not a lowercase alphabetic or numeric character, you should print that particular string and the required error message. For example:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mac:</span> <span class="string">./ass1</span> <span class="string">&lt;</span> <span class="string">alice-eg.txt</span></span><br><span class="line"><span class="attr">S1:</span> <span class="literal">No</span> <span class="string">query</span> <span class="string">specified,</span> <span class="string">must</span> <span class="string">provide</span> <span class="string">at</span> <span class="string">least</span> <span class="string">one</span> <span class="string">word</span></span><br><span class="line"><span class="attr">mac:</span> <span class="string">./ass1</span> <span class="string">lat</span> <span class="number">66</span> <span class="string">loNg</span> <span class="number">32</span> <span class="string">words</span> <span class="string">&lt;</span> <span class="string">alice-eg.txt</span></span><br><span class="line"><span class="attr">S1:</span> <span class="string">query</span> <span class="string">=</span> <span class="string">lat</span> <span class="number">66</span> <span class="string">loNg</span> <span class="number">32</span> <span class="string">words</span></span><br><span class="line"><span class="attr">S1: loNg:</span> <span class="string">invalid</span> <span class="string">character(s)</span> <span class="string">in</span> <span class="string">query</span></span><br></pre></td></tr></table></figure></p><p>mac:<br>Note how each output line is prefixed by the stage number that generated it.</p><h3 id="Stage-2-Reading-the-Input"><a href="#Stage-2-Reading-the-Input" class="headerlink" title="Stage 2 - Reading the Input"></a>Stage 2 - Reading the Input</h3><p>In this next stage, you are to demonstrate that you can correctly access the text from stdin, by printing out each input line, its length in characters, and the number of words it contains. For the example query and text, the first few lines of your output should be (exactly):<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mac:</span> <span class="string">./ass1</span> <span class="string">lat</span> <span class="string">long</span> <span class="string">&lt;</span> <span class="string">alice-eg.txt</span></span><br><span class="line"><span class="attr">S1:</span> <span class="string">query</span> <span class="string">=</span> <span class="string">lat</span> <span class="string">long</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">Down,</span> <span class="string">down,</span> <span class="string">down.</span> <span class="string">Would</span> <span class="string">the</span> <span class="string">fall</span> <span class="string">NEVER</span> <span class="string">come</span> <span class="string">to</span> <span class="string">an</span> <span class="string">end!</span> <span class="string">'I wonder how</span></span><br><span class="line"><span class="string">S2: line = 1, bytes = 68, words = 14</span></span><br><span class="line"><span class="string">---</span></span><br></pre></td></tr></table></figure></p><p>and so on, see the FAQ page for the full required output. A word is defined to be a maximal length sequence of alphanumeric characters.</p><p>You may assume that no input line contains more than 1,000 characters. Note the item in the FAQ page about newline differences between PC and Unix systems. You should copy the mygetchar() function into your program and use it (and only it) when you are reading input lines.</p><h3 id="Stage-3-Scoring-Lines"><a href="#Stage-3-Scoring-Lines" class="headerlink" title="Stage 3 - Scoring Lines"></a>Stage 3 - Scoring Lines</h3><p>Each input line next needs to be given a score relative to the query. If there are q query words specified on the command-line (that is when argc = q + 1), if wi is the i th of the query words (that is, when argv[i] = wi), and if fi is the number of times that word wi is a case-insensitive prefix match against a word that appears in that input line, A prefix match occurs if every character of the query term matches at the beginning of a words in the input line. For example, “ali” is a prefix match of all of “Ali”, “Alistair”, “Alison”, and “alimentary”; and is not a prefix match of any of “alloy”, “al”, “ai”, or “malice”. Lines that have no matches against any query terms will automatically get a score of zero according to this formula. Scores are to be calculated and represented as doubles; be aware that rounding in double arithmetic might lead to your program giving slightly different values to mine in some cases. When printed to three decimal places, the values are probably going to agree, but small implementation-dependent (based primarily on the exact order the operations are carried out by the compiled program) differences in computed values are always possible.</p><p>The required output for this stage is a score per line, interleaved with the previous Stage 2 output. The FAQ shows example executions, so that you can confirm that you understand what it is that you are to compute and how it is to be output - look for the lines that commence with “S3:”. Note that log2 x can be computed via log(x)/log(2.0), with log (natural logs) available in math.h.</p><h3 id="Stage-4-Ranked-Summary-Output"><a href="#Stage-4-Ranked-Summary-Output" class="headerlink" title="Stage 4 - Ranked Summary Output"></a>Stage 4 - Ranked Summary Output</h3><p>Once you have the Stage 3 scoring regime working correctly, it is time to move on to the main goal - presenting lines in decreasing score order. Add data structures to your program that retain the (up to) five highest-scoring lines, and their scores. Then, once all of the input lines have been read, print those five lines (or up to five lines, if there are not five lines with non-zero scores) and their line numbers and scores, in decreasing score order. If the scores are tied (when doing simple comparisons on double values using == and &lt;=, don’t try and be clever), then lines should be presented in line number order.</p><p>For the test file alice-eg.txt and the three-term query “ali lat long”, the required output from this stage is:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-----------------------------------------------</span></span><br><span class="line"><span class="attr">S4:</span> <span class="string">line</span> <span class="number">9</span><span class="string">,</span> <span class="string">score</span> <span class="string">=</span> <span class="number">0.668</span></span><br><span class="line"><span class="string">or</span> <span class="string">Longitude</span> <span class="string">I've</span> <span class="string">got</span> <span class="string">to?'</span> <span class="string">(Alice</span> <span class="string">had</span> <span class="literal">no</span> <span class="string">idea</span> <span class="string">what</span> <span class="string">Latitude</span> <span class="string">was,</span> <span class="string">or</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="attr">S4:</span> <span class="string">line</span> <span class="number">10</span><span class="string">,</span> <span class="string">score</span> <span class="string">=</span> <span class="number">0.233</span></span><br><span class="line"><span class="string">Longitude</span> <span class="string">either,</span> <span class="string">but</span> <span class="string">thought</span> <span class="string">they</span> <span class="string">were</span> <span class="string">nice</span> <span class="string">grand</span> <span class="string">words</span> <span class="string">to</span> <span class="string">say.)</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="attr">S4:</span> <span class="string">line</span> <span class="number">4</span><span class="string">,</span> <span class="string">score</span> <span class="string">=</span> <span class="number">0.229</span></span><br><span class="line"><span class="string">thousand</span> <span class="string">miles</span> <span class="string">down,</span> <span class="string">I</span> <span class="string">think--'</span> <span class="string">(for,</span> <span class="string">you</span> <span class="string">see,</span> <span class="string">Alice</span> <span class="string">had</span> <span class="string">learnt</span> <span class="string">several</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="attr">S4:</span> <span class="string">line</span> <span class="number">8</span><span class="string">,</span> <span class="string">score</span> <span class="string">=</span> <span class="number">0.226</span></span><br><span class="line"><span class="string">'--yes, that'</span><span class="string">s</span> <span class="string">about</span> <span class="string">the</span> <span class="string">right</span> <span class="string">distance--but</span> <span class="string">then</span> <span class="string">I</span> <span class="string">wonder</span> <span class="string">what</span> <span class="string">Latitude</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>The FAQ page shows some other example interactions with the desired program.</p><p>Note that you may not retain every input line in an array of strings, and your program may not assume some maximum number of lines in the input. You can only retain five (as a #defined value, of course) lines and their scores at any given time, plus the current line that is being processed; plus access the supplied query via argv.</p><h3 id="General-tips"><a href="#General-tips" class="headerlink" title="General tips.."></a>General tips..</h3><p>You will probably find it helpful to include a DEBUG mode in your program that prints out intermediate data and variable values. Use #if DEBUG and #endif around such blocks of code, and then #define DEBUG 1 or #define DEBUG 0 at the top. Disable the debug mode when making your final submission, but leave the debug code in place. The FAQ page has more information about this.</p><p>Finally, note that the sequence of stages described in this handout is deliberate - it represents a sensible path though to the required program. You can, of course, ignore the advice and try and write final program in a single effort, without developing it incrementally and testing it in phases. You might even get away with it, this time and at this somewhat limited scale, and develop a program that works. But in general, one of the key things that makes some people better at programming than others is the ability to see a design path through simple programs, to more comprehensive programs, to final programs, that keeps the complexity under control at all times.</p>]]></content>
    
    <summary type="html">
    
      使用基础的C语言语法，代写一个文本查询工具。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP206-Graph-Traversal-and-Dijkstras-Algorithm</title>
    <link href="https://tk1307993.coding.me/COMP206-Graph-Traversal-and-Dijkstras-Algorithm.html"/>
    <id>https://tk1307993.coding.me/COMP206-Graph-Traversal-and-Dijkstras-Algorithm.html</id>
    <published>2021-09-17T01:45:50.000Z</published>
    <updated>2021-09-17T01:48:12.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this project you will use the Graph ADT and Dijkstra’s algorithm to compute the length of the shortest path (number of nodes visited), and for extra credit the path with the fewest turns. The input graphs are actual street map of Manhattan NY and Manhattan Kansas</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The goal of this programming project is for you to master (or at least get practice on) the following tasks:</p><ul><li>Establishing a Graph ADT from a real life application</li><li>Using Dijkstra’s algorithm to find length of a path.</li><li>Inputting user origination and destination information</li><li>working with existing code</li></ul><h3 id="Helpful-code"><a href="#Helpful-code" class="headerlink" title="Helpful code"></a>Helpful code</h3><p>The main class that will call methods the Graph ADT in chapter 10 which are also provided attached to the assignment. This java project ProgProject4 provides and application that creates a graph using the books graph ADT classes. There is also a package that contains a class to execute Dijkstra’s algorithm.</p><h3 id="Project-Steps"><a href="#Project-Steps" class="headerlink" title="Project Steps"></a>Project Steps</h3><ol><li>Create a graph based upon the given street map. Each expected vertex in your graph is represented by a blue dot. The blue dots represent a traffic intersection. Your vertex should be an instance of an Intersection Class, not a String as used in most class examples. Your program should read an input file containing all information about the intersection including all streets that meet at that intersection.</li><li>Traverse through the graph and find the length, or the number of nodes , of the shortest paths for the origination to destination path.</li><li>For 5 points extra credit, find the path with the shortest number of turns. A turn is defined as a path of 3 vertices where the edge street names are not the same.<br>Hint - for fewest number of turns, store the name of the street of the edge. A turn is when a vertex on the path is reached by 2 edges with different names.</li></ol><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>When inputting an intersection, always assume street names are sorted, and only the street name (not ave or road) is provided.</p><p>Ignore One Way arrows on maps</p><p>Expected Results:</p><p>Map 1: Manhattan Kansas<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Input</span>:</span><br><span class="line"><span class="attribute">Origination</span>:   Hudson,Kimball     <span class="attribute">Destination</span>:  Claflin,Denison </span><br><span class="line"><span class="attribute">Output</span>:</span><br><span class="line">Minimum Path <span class="attribute">Length</span>: <span class="number">6</span>    Minimum <span class="attribute">Turns</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Input</span>:</span><br><span class="line"><span class="attribute">Origination</span>:   College     <span class="attribute">Destination</span>:  Claflin,NManhattan</span><br><span class="line"><span class="attribute">Output</span>:</span><br><span class="line">Minimum Path <span class="attribute">Length</span>: <span class="number">4</span>    Minimum <span class="attribute">Turns</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>Map 2: Manhattan New York<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span></span><br><span class="line"><span class="string">Origination:</span> Canal, Spring     <span class="string">Destination:</span>  Spring, Thomson </span><br><span class="line"><span class="string">Output:</span></span><br><span class="line">Minimum Path <span class="string">Length:</span> <span class="number">5</span>    Minimum <span class="string">Turns:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>Since you will be using the ProgProject4 class provided, running your program should be produce a series of input prompts for the origination and destination locations.</p>]]></content>
    
    <summary type="html">
    
      代写Dijkstra算法，对地图上的任意两点，求最短路径。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CS322-Maze-Game</title>
    <link href="https://tk1307993.coding.me/CS322-Maze-Game.html"/>
    <id>https://tk1307993.coding.me/CS322-Maze-Game.html</id>
    <published>2021-09-05T03:23:31.000Z</published>
    <updated>2021-09-05T03:26:12.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You will complete this project in 2 parts. For the final assignment (#4) you will submit a design and the first increments of the program. The increments will be starting the program, opening a file and displaying it, prompting the user and opening each file in order and displaying it. The rest will be completed for the final project.</p><p>You will create a program that will enable the user to move through a maze. The maze will contain locked doors that require keys to be opened. Guarding the maze are roving killer wombats. To escape the maze, the player must navigate through the maze, wombats, and doors until they reach a ladder. Each maze level contains one ladder that takes the player to the next level of the maze until the final level is reached. On the final level there is an exit instead of a ladder.</p><p>An evil sorceress has captured the player. Her soulless minion didn’t lock the door correctly so the player can try to escape. She uses killer wombats as the guards. Each level starts with one wombat. She knows the player has left the cell but can only summon one new wombat at a time. For every 30 steps the player takes, a new wombat will randomly appear on the current level.</p><p>There are strange marks in the dungeon (indicated by the letter ‘T’). If the player moves on to one they are randomly transported within that level of the dungeon. If they land on another ‘T’ they are transported again! J The random placement of the player is otherwise the same as for the wombats. They cannot be placed on physical objects, such as walls or doors. If the player is placed on a key he can pick it up.</p><p>Your code will implement this game as follows:</p><p>When your program starts it will prompt the user for the number of levels. The floor files will be named floor_# where # indicates which floor it holds. Your program will always start reading with the first floor.</p><p>The maze is defined by a set of text files, each of which contains a single level. Whenever the game starts or the player reaches a new level, that data must be read from the appropriate text file. The first line of each file will have two integer values which describe the number of rows and columns for that level. You must use this to create a dynamic array of that size and then read in the data for the level. Perform input validation on all characters in the file as you read them. Do not load the file and inform the user there is a problem.</p><p>The following characters or symbols describe objects in the levels:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'#'</span>- walls</span><br><span class="line"><span class="string">'D'</span>- door</span><br><span class="line"><span class="string">'L'</span>- Ladder</span><br><span class="line"><span class="string">'P'</span>- Player</span><br><span class="line"><span class="string">'W'</span>- Wombat (<span class="keyword">the</span> starting location <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">first</span> wombat)</span><br><span class="line"><span class="string">'K'</span> Key</span><br><span class="line"><span class="string">'T'</span>- Teleport square</span><br><span class="line"><span class="string">'E'</span>- Starting location <span class="keyword">for</span> <span class="keyword">each</span> level</span><br><span class="line"><span class="string">'X'</span>- Exit(<span class="literal">one</span> way out)</span><br><span class="line"><span class="string">' '</span>- <span class="literal">empty</span> <span class="literal">space</span> (blank <span class="keyword">character</span>)</span><br></pre></td></tr></table></figure></p><p>You must concatenate the file name with the new floor number. You will not use an array of filenames? HINT: This will require string streams.</p><p>You must display that level to the user. Then you will accept the following commands from the user:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'w'</span> <span class="keyword">move</span> <span class="keyword">up</span></span><br><span class="line"><span class="string">'a'</span> <span class="keyword">move</span> <span class="keyword">left</span></span><br><span class="line"><span class="string">'s'</span> <span class="keyword">move</span> down</span><br><span class="line"><span class="string">'d'</span> <span class="keyword">move</span> <span class="keyword">right</span></span><br><span class="line"><span class="string">'u'</span> use ladder</span><br><span class="line"><span class="string">'q'</span> <span class="keyword">quit</span></span><br></pre></td></tr></table></figure></p><p>Each input from the user must be validated before any action takes place. After each command, you will update the array, then print the current status of the game to the screen. Each command is one “step” which you will use to coordinate movement and summoning of the wombats.</p><p>You will update the position of the player and all wombats after every move entered by the player. The K (key) and A (apple) symbols will be removed from the maze after the player picks them up. The D (door) is removed once the player enters that space with a key. To move between floors, the player must get to the space with the ladder. On the final level the player must reach the X to exit the maze and make their escape.</p><p>The position of each Actor (Wombat or Player) will not be stored in the array. It will be stored in the Player or Wombat object. When you read in the initial floor array the ‘W’ should be changed to a blank character. When you display the floor after each move you will print the array, adding a ‘P’ or ‘W’ as appropriate for each Actor.</p><p>Movement- To move around a level the players must use the ‘w’, ‘a’. ‘s, and ‘d’ keys. Your move function should prevent them from moving through walls, or a door if they don’t have a key. If the player has a key then they can move through a door. Simply remove a key from the player and convert the D space to an empty space.</p><p>When the player gets to a ladder space they climb it with a ‘U’ command. The ‘E’ character designates where the player starts on the new level. Time (i.e. the number of steps) is reset on each new level. When the player moves from the starting space, the E must remain. If a wombat catches a player, their location must be changed to the E square. After each move, the updated maze must be displayed for the user.</p><p>When the player moves into a space that contains a key (‘K’) they pick up the key to add it to their inventory. When a player moves into a space with a teleport square (‘T’) they are randomly positioned. A player can hold no more than 3 keys. If they enter a space and cannot hold the key it remains in that space.</p><p>Wombats (10 points): The Wombats will be similar to the Player, except they move randomly. They cannot move through walls or doors. They will ignore teleport squares. If a wombat is in a square adjacent to the player, the player will be moved back to the starting space for that level. The wombats cannot move between levels. For every 30 steps the player takes, place a new wombat at a random valid location in the current level.</p><h3 id="Design-your-Program"><a href="#Design-your-Program" class="headerlink" title="Design your Program"></a>Design your Program</h3><p>As always you should sit down with pencil and paper and sketch out the design. Develop the necessary algorithms. Do a desk test, i.e. walk through your algorithms and code to look for logic errors.</p><p>Nope! No keyboard yet! Now design your incremental development. Your program should be decomposed into functional units. If not, go back to the previous paragraph. Look at the pieces and decide on the order you should use to implement and test each part. Reading the floor into your program and then moving an actor are probably good places to start. Then add a level to test using the ladder. Once you have the development you are ready!</p><p>Nope! No keyboard yet. Design and organize the directories for your project. You should have a working directory. Maybe you need a subdirectory to hold the your floor plans. Have you designed your floor plans? What is there to design? Maybe you can have a floor that allows you to test only one function or command at a time? Be careful with file names. The default first file always has the same name. If you overwrite one then you’ll need to create it again. Always have one directory to save a copy of your code as you get each increment to compile. If you’re paranoid (I know I am) maybe you have more than one stash and on different devices?</p><p>Now, you’re ready to code!</p><p>The moral is: Always plan ahead and make it as complete as you can!</p>]]></content>
    
    <summary type="html">
    
      代写一款迷宫游戏，通过命令行界面进行控制即可。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>CS9223-Programming-for-Big-Data</title>
    <link href="https://tk1307993.coding.me/CS9223-Programming-for-Big-Data.html"/>
    <id>https://tk1307993.coding.me/CS9223-Programming-for-Big-Data.html</id>
    <published>2021-09-01T01:17:15.000Z</published>
    <updated>2021-08-31T00:52:06.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>You must use Hadoop (Map/Reduce Java or Python, or Pig, with Spark as extra credit) to analyze the Yelp data challenge: <a href="https://www.yelp.com/dataset_challenge" target="_blank" rel="noopener">https://www.yelp.com/dataset_challenge</a>.</p><p>Specifically, you must provide the answers (and code) to the 5 following questions:</p><ol><li><p>Summarize the number of reviews by US city, by business category.</p></li><li><p>Rank all cities by # of stars descending, for each category</p></li><li><p>is the average rank (# stars) for businesses within 20 miles of the University of Wisconsin Madison, by type of business?<br>Center: University of Wisconsin - Madison<br>Latitude: 43 04’ 30” N, Longitude: 89 25’ 2” W<br>Decimal Degrees: Latitude: 43.0766, Longitude: -89.4125<br>The bounding box for this problem is ~20 miles, which we will loosely define as 20 minutes. So the bounding box is a square box, 40 minutes long each side (of longitude and latitude), with UWM at the center.</p></li><li><p>Rank reviewers by number of reviews. For the top 10 reviewers, show their average number of stars, by category.</p></li><li><p>For the top 10 and bottom 10 food business near UWM (in terms of stars), summarize star rating for reviews in June through December.</p></li></ol><h3 id="Grading-total-150-points"><a href="#Grading-total-150-points" class="headerlink" title="Grading (total 150 points)"></a>Grading (total 150 points)</h3><p>This assignment MUST be completed on your own. Duplicate assignments will be flagged and failed.</p><ul><li>25 points each question (1-5) = 125 points</li><li>15 points for the submission report and presentation quality</li><li>10 points for code quality</li></ul><h3 id="Extra-Points-50-extra-points"><a href="#Extra-Points-50-extra-points" class="headerlink" title="Extra Points (50 extra points)"></a>Extra Points (50 extra points)</h3><ol><li>20 points: complete the assignment in Apache Spark and review the difference in approaches (you must still complete the original exercise).</li><li>10 points: provide suitable statistical analysis of your results with R.</li><li>20 points: provide visualizations for results (distributions, graphs, maps, in R).</li></ol><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>In a single zip package, submit:</p><ul><li>report, max 10 pages.</li><li>runnable code for all questions, clearly labeled (no dataset).</li><li>results data for each question.</li></ul><h3 id="Hints-References"><a href="#Hints-References" class="headerlink" title="Hints/References"></a>Hints/References</h3><ul><li>Apache Spark: <a href="http://spark.apache.org/" target="_blank" rel="noopener">http://spark.apache.org/</a></li><li>Pig JSON loader: <a href="https://pig.apache.org/docs/r0.10.0/func.html#jsonloadstore" target="_blank" rel="noopener">https://pig.apache.org/docs/r0.10.0/func.html#jsonloadstore</a></li><li>Pig Latin: <a href="http://infolab.stanford.edu/~olston/publications/sigmod08.pdf" target="_blank" rel="noopener">http://infolab.stanford.edu/~olston/publications/sigmod08.pdf</a></li><li>R maps - leaflet: <a href="https://rstudio.github.io/leaflet/" target="_blank" rel="noopener">https://rstudio.github.io/leaflet/</a></li></ul>]]></content>
    
    <summary type="html">
    
      用Hadoop代写大数据作业，对给定的Dataset进行分析。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Hadoop Mapreduce Spark" scheme="https://tk1307993.coding.me/tags/Hadoop-Mapreduce-Spark/"/>
    
  </entry>
  
  <entry>
    <title>FIT1043-Visualising-Airport-Traffic</title>
    <link href="https://tk1307993.coding.me/FIT1043-Visualising-Airport-Traffic.html"/>
    <id>https://tk1307993.coding.me/FIT1043-Visualising-Airport-Traffic.html</id>
    <published>2021-08-31T01:17:15.000Z</published>
    <updated>2021-08-31T00:47:13.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The aim of this assignment is to investigate and visualize data. In particular, we will identify trends, gain insights from how those trends change over time.</p><p>The data we will use contains Airport traffic data and comes from the Australian Bureau of Infrastructure, Transport and Regional Economics.</p><ul><li><p>The CSV file contains 30 years worth of monthly data listing international air traffic volumes in terms of passengers, freight and mail, to and from Australian airports.</p></li><li><p>The file is available on Moodle and publicly available from data.gov.au</p></li></ul><h3 id="Hand-in-Requirements"><a href="#Hand-in-Requirements" class="headerlink" title="Hand-in Requirements"></a>Hand-in Requirements</h3><p>Please hand in a PDF file containing your answers to all the questions.</p><ul><li><p>You can use Word or other word processing software to format your submission. Just save the final copy to a PDF before submitting.</p></li><li><p>Make sure to include screenshots/images of the graphs you generate in order to justify your answers to all the questions. (You will need to use screen-capture functionality to create appropriate images.)</p></li><li><p>We would like to see the Python code you write to format the data. Please include a copy your Python code in your submission, (either submitting scripts / Jupiter notebooks, or copying the code into your report).</p></li></ul><h3 id="Python-Availability"><a href="#Python-Availability" class="headerlink" title="Python Availability"></a>Python Availability</h3><p>You will need to use Python to complete the assignment. You can do this by either:</p><p>1) running a Jupyter Notebook on a computer in the labs; or<br>2) installing Python (we recommend Anaconda) on your own machine.</p><h3 id="Assignment-Tasks"><a href="#Assignment-Tasks" class="headerlink" title="Assignment Tasks"></a>Assignment Tasks</h3><p>This assignment involves building a visualisation using Motion Chart and then answering a series of questions about the data.</p><h3 id="Visualising-Airport-Traffic"><a href="#Visualising-Airport-Traffic" class="headerlink" title="Visualising Airport Traffic"></a>Visualising Airport Traffic</h3><p>The aim of the first part of the assignment is to build a Motion Chart showing passenger, freight and mail quantities over time for four different airports in Australia (Melbourne, Sydney, Brisbane and Perth). More specifically, you should:</p><ul><li><p>Generate a Motion chart with Passengers_Total on the x-axis, Freight_Total_(tonnes) on the y-axis and where the color and size of the bubbles is given by the Mail_Total_(tonnes).</p></li><li><p>Note that the CSV file is both too big and not in the right format to visualise directly, so you will first need to aggregate the data using Python at both the ‘Year’ and ‘AustralianPort’ level. (Code to help you do this was discussed during the lectures.) You need to select only four Australian airports before the aggregation.</p></li><li><p>You can then output the data as a CSV file, which you can use in order to create the appropriate visualisation (see Activity: Motion Chart - Motion Chart in Python in Alexandria).</p></li></ul><p>Having graphed the data as a Motion Chart, answer the following questions:</p><ol><li><p>Why are the values lower in 2016 than they were in 2015?</p></li><li><p>Which city has the largest number of international air passengers traveling through it in 2015?</p></li><li><p>In which year did Brisbane have almost the same number of passenger numbers as Melbourne?</p></li><li><p>(Bonus question) Has the number of passengers travelling through Sydney airport ever decreased from one year to the next? If so, when did it happen? Any idea why that might have occurred?</p></li></ol>]]></content>
    
    <summary type="html">
    
      代写Python作业，使用Motion Chart将数据可视化。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS313-Zombiquarium</title>
    <link href="https://tk1307993.coding.me/CS313-Zombiquarium.html"/>
    <id>https://tk1307993.coding.me/CS313-Zombiquarium.html</id>
    <published>2021-08-26T01:17:15.000Z</published>
    <updated>2021-08-26T07:45:19.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This is the Software Design Description (SDD) for the Zombiquarium mini-game application. Note that this document format is based on the IEEE Standard 1016-2009 recommendation for software design.</p><h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>This document is to serve as the blueprint for the construction of the Zombiquarium application. This design will use UML class diagrams to provide complete detail regarding all packages, classes, instance variables, class variables, and method signatures needed to build the application. In addition, UML Sequence diagrams will be used to specify object interactions post-initialization of the application, meaning in response to user interactions or timed events.</p><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>Zombiquarium will be one mini-game among many to be included in the Plants vs. Zombies application. Tools for its construction should be developed with this in mind such that additional mini-games may avoid duplication of work. As such, a framework called the MiniGame Framework, will be designed and constructed along with the Zombiquarium game such that it may be used to build additional mini-games. So, this design contains design descriptions for the development of both the framework and game. Note that Java is the target language for this software design.</p><h3 id="Definitions-acronyms-and-abbreviations"><a href="#Definitions-acronyms-and-abbreviations" class="headerlink" title="Definitions, acronyms, and abbreviations"></a>Definitions, acronyms, and abbreviations</h3><p>Class Diagram - A UML document format that describes classes graphically. Specifically, it describes their instance variables, method headers, and relationships to other classes.</p><p>IEEE - Institute of Electrical and Electronics Engineers, the “world’s largest professional association for the advancement of technology”.</p><p>Framework - In an object-oriented language, a collection of classes and interfaces that collectively provide a service for building applications or additional frameworks all with a common need.</p><p>Java - A high-level programming language that uses a virtual machine layer between the Java application and the hardware to provide program portability.</p><p>Mini-Game - A standalone game that is a subset of a larger game application, typically sharing the primary game theme with that parent game application.</p><p>Mini Game Framework - The software framework to be developed in tandem with the Zombiquarium game such that additional mini-games can easily be constructed. Note that in the Zombiquarium SRS this was sometimes called the “Mini Zombie Game Framework”, but has been renamed the “Mini Game Framework”, since it’s not Zombie-specific.</p><p>Plants vs. Zombies - The PopCap Games game that is the parent application of our Zombiquarium mini-game. Note that Zombiquarium is to be distributed as part of that program.</p><p>Sequence Diagram - A UML document format that specifies how object methods interact with one another.</p><p>Sprite - a renderable, and sometimes movable or clickable image in the game. Each Sun, Zombie, and Brain will be its own Sprite, as will GUI controls.</p><p>SpriteType - a type of Sprite, meaning all the artwork and states corresponding to a category of sprite. We do this because all the suns share artwork, so we will load all their artwork into a common Sprite Type, but each Sprite has its own position and velocity, so each will be its own Sprite that knows what Sprite Type it belongs to.</p><p>UML - Unified Modeling Language, a standard set of document formats for designing software graphically.</p><p>Zombie - An undead creature, meaning something that has died and then come back to life. These beings are typically slow moving and love to eat brains.</p><p>Zombiquarium - The title of the mini-game described by this document. Again, note that this game will be distributed as part of the Plants vs. Zombies application.</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>This Software Design Description document provides a working design for the Zombiquarium software application as described in the Zombiquarium Software Requirements Specification. Note that all parties in the implementation stage must agree upon all connections between components before proceeding with the implementation stage. Section 2 of this document will provide the Package-Level Viewpoint, specifying the packages and frameworks to be designed. Section 3 will provide the Class-Level Viewpoint, using UML Class Diagrams to specify how the classes should be constructed. Section 4 will provide the Method-Level System Viewpoint, describing how methods will interact with one another. Section 5 provides deployment information like file structures and formats to use. Section 6 provides a Table of Contents, an Index, and References. Note that all UML Diagrams in this document were created using the VioletUML editor.</p><h3 id="Package-Level-Design-Viewpoint"><a href="#Package-Level-Design-Viewpoint" class="headerlink" title="Package-Level Design Viewpoint"></a>Package-Level Design Viewpoint</h3><p>As mentioned, this design will encompass both the Zombiquarium game application and the Mini-Game Framework to be used in its construction. In building both we will heavily rely on the Java API to provide services. Following are descriptions of the components to be built, as well as how the Java API will be used to build them.</p><h3 id="Zombiquarium-and-Mini-Game-overview"><a href="#Zombiquarium-and-Mini-Game-overview" class="headerlink" title="Zombiquarium and Mini Game overview"></a>Zombiquarium and Mini Game overview</h3><p>The Zombiquarium and MiniGame framework will be designed and developed in tandem. Figure 2.1 specifies all the components to be developed and places all classes in home packages.</p><h3 id="Java-API-Usage"><a href="#Java-API-Usage" class="headerlink" title="Java API Usage"></a>Java API Usage</h3><p>Both the framework and the mini-game application will be developed using the Java programming languages. As such, this design will make use of the classes specified in Figure 2.2.</p><h3 id="Class-Level-Design-Viewpoint"><a href="#Class-Level-Design-Viewpoint" class="headerlink" title="Class-Level Design Viewpoint"></a>Class-Level Design Viewpoint</h3><p>As mentioned, this design will encompass both the Zombiquarium game application and the Mini-Game Framework. The following UML Class Diagrams reflect this. Note that due to the complexity of the project, we present the class designs using a series of diagrams going from overview diagrams down to detailed ones.</p><h3 id="Method-Level-Design-Viewpoint"><a href="#Method-Level-Design-Viewpoint" class="headerlink" title="Method-Level Design Viewpoint"></a>Method-Level Design Viewpoint</h3><p>Now that the general architecture of the classes has been determined, it is time to specify how data will flow through the system. The following UML Sequence Diagrams describe the methods called within the code to be developed in order to provide the appropriate event responses.</p><h3 id="File-Structure-and-Formats"><a href="#File-Structure-and-Formats" class="headerlink" title="File Structure and Formats"></a>File Structure and Formats</h3><p>Note that the Mini Game Framework will be provided inside MiniGameFramework.jar, a Java ARchive file that will encapsulate the entire framework. This should be imported into the necessary project for the Zombiquarium application and will be included in the deployment of a single, executable JAR file titled Zombiquarium.jar. Note that all necessary data and art files must accompany this program. Figure 5.1 specifies the necessary file structure the launched application should use. Note that all necessary images should of course go in the image directory.</p><p>The ZombiquariumGameData.txt provides the file and state names for all sprite states in the game. The file is a raw text file that can be used to describe M Sprite Types, each with their own N states as follows:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NumSpriteTypes</span><br><span class="line">SpriteType_1<span class="string">|NumStatesFor_1</span></span><br><span class="line">SpriteType_1STATE_1<span class="string">|SpriteType_1STATE_1_FileNameAndPath</span></span><br><span class="line">SpriteType_1STATE_N1<span class="string">|SpriteType_1STATE_N1_FileNameAndPath</span></span><br><span class="line">SpriteType_M<span class="string">|NumStatesFor_M</span></span><br><span class="line">SpriteType_MSTATE_1<span class="string">|SpriteType_MSTATE_1_FileNameAndPath</span></span><br><span class="line">SpriteType_MSTATE_N2<span class="string">|SpriteType_MSTATE_N2_FileNameAndPath</span></span><br></pre></td></tr></table></figure></p><h3 id="Supporting-Information"><a href="#Supporting-Information" class="headerlink" title="Supporting Information"></a>Supporting Information</h3><p>Note that this document should serve as a reference for those implementing the code, so we’ll provide a table of contents to help quickly find important sections.</p>]]></content>
    
    <summary type="html">
    
      代写游戏Zombiquarium，对软件设计方法论进行实践。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>CS206-Stacks-Queues-and-Binary-Search-Trees-with-Duplicates</title>
    <link href="https://tk1307993.coding.me/CS206-Stacks-Queues-and-Binary-Search-Trees-with-Duplicates.html"/>
    <id>https://tk1307993.coding.me/CS206-Stacks-Queues-and-Binary-Search-Trees-with-Duplicates.html</id>
    <published>2021-08-20T01:17:15.000Z</published>
    <updated>2021-08-20T01:19:49.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>In this assignment you will implement data structures that provide an implementation for four abstract data types: A double-ended singly linked list, a stack, a queue, and a binary search tree that allows duplicates. Along the way you will get more experience with implementing Java interfaces, writing JUnit test cases, and using the Adapter design pattern.</p><h3 id="Part-1-Double-Ended-Singly-Linked-List"><a href="#Part-1-Double-Ended-Singly-Linked-List" class="headerlink" title="Part 1 - Double Ended Singly Linked List"></a>Part 1 - Double Ended Singly Linked List</h3><h4 id="DoubleEndedLLTester"><a href="#DoubleEndedLLTester" class="headerlink" title="DoubleEndedLLTester"></a>DoubleEndedLLTester</h4><p>Create DoubleEndedLLTester.java to test all public methods in DoubleEndedLL.java class, which implements DoubleEndedLLInterface. You must have at least one test for every method, but for some methods it is better to create multiple tests for separate conditions. For example, removing from an empty list should have a separate test from removing from a non-empty one.</p><p>You do not need to completely write your DoubleEndedLLTester before starting to define DoubleEndedLL. In fact, it is recommended that you use an iterative test-driven development process: write some tests in DoubleEndedLLTester, implement the functionality in DoubleEndedLL, test your implementation with DoubleEndedLLTester, write more tests, etc.</p><h4 id="DoubleEndedLL"><a href="#DoubleEndedLL" class="headerlink" title="DoubleEndedLL"></a>DoubleEndedLL</h4><p>Read the documentation in the source code file for the DoubleEndedLLInterface. You will be creating DoubleEndedLL.java class to implement this interface. Think of the “implements” as a contract - it is your responsibility to ensure all of the methods in the interface are present and functional in your class. For method headers, you may simply copy over the appropriate comments from the interface file. However, you must still comment the constructor and any other methods not present in the interface.</p><p>DoubleEndedLL must be a Generic class that implements a singly-linked list with a head and tail reference, using an inner class Node. You may find it helpful to copy over your Node class from PA1 and modify it for this assignment. The only public methods you may have are the no-arg constructor and the interface methods.</p><p>Files to Submit</p><ol><li>DoubleEndedLLTester.java</li><li>DoubleEndedLL.java</li></ol><h4 id="Part-2-Implementing-Stacks-and-Queues"><a href="#Part-2-Implementing-Stacks-and-Queues" class="headerlink" title="Part 2 - Implementing Stacks and Queues"></a>Part 2 - Implementing Stacks and Queues</h4><p>Now that DoubleEndedLL is fully built and tested, use it to implement a Stack and a Queue. Both MyStack and MyQueue are generic classes that implement Stack_QueueInterface, however their functionality will differ.</p><p>In order to get full credit for this section, you must use the Adaptive Design Pattern to implement these classes. To do that, create an instance variable of type DoubleEndedLLInterface (instantiated to a DoubleEndedLL) and use it to perform all of the necessary class methods. If these classes are complicated, you are overthinking the problem.</p><p>As is often the case when the Adapter pattern is used, if the adapted class (DoubleEndedLL in this case) is thoroughly tested and debugged, the adapting class shouldn’t need much testing because almost all of the work is being handled by delegation to the adapted class’s methods. We provide you with a few simple tests (MyStackTester.java and MyQueueTester.java) which should be sufficient but you are welcome to write your own tests as well.</p><h4 id="MyStack"><a href="#MyStack" class="headerlink" title="MyStack"></a>MyStack</h4><p>Stacks are first-in last-out data structures, which you will implement using your internal DoubleEndedLL object by mapping the appropriate methods to your MyStack class methods. One choice of mappings is better than another. You must choose the most efficient mapping. In HW3.txt, indicate what methods were chosen to perform stack operations efficiently and why. You must mention every method in the MyStack class.</p><p>MyQueue<br>Queues are first-in first-out data structures, which you will implement using your internal DoubleEndedLL object by mapping the appropriate methods to your MyQueue class methods. One choice of mappings is better than another. You must choose the most efficient mapping. In HW3.txt, indicate what methods were chosen to perform stack operations efficiently and why. You must mention every method in the MyQueue class.</p><p>Files to Submit</p><ol><li>MyStack.java</li><li>MyQueue.java</li><li>HW3.txt</li></ol><h4 id="Part-3-Duplicate-Key-BST"><a href="#Part-3-Duplicate-Key-BST" class="headerlink" title="Part 3 - Duplicate Key BST"></a>Part 3 - Duplicate Key BST</h4><p>Most often it is assumed that a binary search tree does not contain duplicate keys. However, sometimes we need to deal with problems that contain duplicates. For example, a database of car services might contain one record for each service for every car; so if a car got serviced twice, there will be two records with the same key (car’s VIN) and different dates (service dates). To accomplish this, we might use a data structure called a “BST with duplicates”, or BSTDup.</p><p>Your node class might look something like this:<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> class BSTDupNode &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">key</span>;</span><br><span class="line">  <span class="keyword">private</span> ArrayList&lt;T&gt; elements;</span><br><span class="line">  <span class="keyword">private</span> BSTDupNode left;</span><br><span class="line">  <span class="keyword">private</span> BSTDupNode right;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constructor</span></span><br><span class="line">  <span class="keyword">public</span> BSTDupNode(<span class="built_in">int</span> <span class="built_in">key</span>, T elem, BSTDupNode left, BSTDupNode right) &#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">key</span> = <span class="built_in">key</span>;</span><br><span class="line">    elements = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    elements.<span class="built_in">add</span>(elem);</span><br><span class="line">    <span class="keyword">this</span>.left = left;</span><br><span class="line">    <span class="keyword">this</span>.right = right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Think about what other methods you might need...</span></span><br><span class="line"><span class="comment">   * accessors (data, key, left, right)</span></span><br><span class="line"><span class="comment">   * mutators (add/remove data, updates children)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The image on the left is an example of just the tree structure, and each node displays only the key. The image on the right is an example of how your BST would actually be used, in this case to store the names of sweets. For your implementation, nodes will contain an ArrayList of elements, rather than a single one. That allows the BST structure to be preserved, while still allowing duplicate keys.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构，包括Stacks，Queues，以及Binary Search Trees.
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Java代写CSCI112-Connect4</title>
    <link href="https://tk1307993.coding.me/CSCI112-Connect4.html"/>
    <id>https://tk1307993.coding.me/CSCI112-Connect4.html</id>
    <published>2021-08-04T02:56:11.000Z</published>
    <updated>2021-08-03T03:09:47.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this project you will help determine the best moves for an abbreviated game of Connect4. The program will analyze the best starting position to make a move. Due to processing times our Connect4 board will be 4 x 4, versus the actual 7x7 board of the game.</p><p>The program will explore making its first move in each of the four columns. The first action will be to make a move in one of the four columns. The program will then pass the Board, and the next player to a Play method. The Play method will analyze the board and call itself up to 4 times, representing the possible number of next moves. At times the Play method may call itself less than four times due to the condition that a column is full. The Play method will return a 1 if the game is won by the first player, -1 if won by the second player, and zero, if that moves leads to a tie. Hence Play (board, clr) gives you the Net wins for first player, given the board position represented by board, and the next move is to be taken by clr.</p><p>A game is won if 4 discs of the same color appear in a column, row or diagonal.</p><h3 id="Helpful-code"><a href="#Helpful-code" class="headerlink" title="Helpful code"></a>Helpful code</h3><p>Code is provided to do the same type of logic as this problem, except with a Tic Tac Toe Board. In the Tic Tac Toe game, after the first move, there are 8 possible moves by the second player. In Connect4, with our abridged board, there are always a maximum of 4 next moves. Also in the Tic Tac Toe game the next move can be anywhere on the Board, while in Connect4, only the bottom of an open column can be chosen for the next move.</p><h3 id="Tic-Tac-Toe-Program-Logic"><a href="#Tic-Tac-Toe-Program-Logic" class="headerlink" title="Tic Tac Toe Program Logic"></a>Tic Tac Toe Program Logic</h3><p>The logic of the program provided prints out information for X making the first move in one of the three spaces of a diagonal. In the Main method, within a loop iterating through the 3 diagonal spaces, the program makes a first move and then calls Play , passing the current board state, and next player.</p><p>Within Play, the method first checks to see if the current board has a winning position for either player. If so, 1(X) or -1(O) is returned. Also a non-winning full board is checked. If the board is full, with no winner, then zero is returned. The CheckBoard method does this analysis of the board.</p><p>If the board is not a complete game, CheckBoard returns 3. This result prompts Play to recursively call itself with all possible moves for the current player. The current board array is copied to another array. to ensure future executions of the method do not alter the current board.</p><h3 id="Expected-Results"><a href="#Expected-Results" class="headerlink" title="Expected Results"></a>Expected Results</h3><p>It is advised to make your Connect4 program also work on a 3 by 3 matrix. This is easier to test with, since the 4x4 does take more processing. If you run a 3x3 Connect4 game , these are the results you should achieve:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NetWins for column 0:</span>  <span class="number">112</span></span><br><span class="line"><span class="attr">Number of recursion calls:</span> <span class="number">1087</span></span><br><span class="line"><span class="attr">Red Wins:224   Blue Wins:</span> <span class="number">112</span></span><br><span class="line"><span class="string">******************</span></span><br><span class="line"><span class="attr">NetWins for column 1:</span>  <span class="number">6</span></span><br><span class="line"><span class="attr">Number of recursion calls:</span> <span class="number">1103</span></span><br><span class="line"><span class="attr">Red Wins:168   Blue Wins:</span> <span class="number">162</span></span><br><span class="line"><span class="string">******************</span></span><br><span class="line"><span class="attr">NetWins for column 2:</span>  <span class="number">112</span></span><br><span class="line"><span class="attr">Number of recursion calls:</span> <span class="number">1087</span></span><br><span class="line"><span class="attr">Red Wins:224   Blue Wins:</span> <span class="number">112</span></span><br><span class="line"><span class="string">******************</span></span><br></pre></td></tr></table></figure></p><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>The zipped java project file, which contains all your source code, input files and Eclipse related projects, is to be submitted You may include more than one test file to indicate your program is working.</p><h3 id="Working-on-This-Assignment"><a href="#Working-on-This-Assignment" class="headerlink" title="Working on This Assignment"></a>Working on This Assignment</h3><p>You should modularize your design so that you can test it regularly. Make sure that at all times you have a working program. You can implement methods that perform one task at a time. This way, if you run out of time, at least parts of your program will be functioning properly.</p><h3 id="Final-step-optional"><a href="#Final-step-optional" class="headerlink" title="Final step (optional)"></a>Final step (optional)</h3><p>When considering the next possible moves, if the player can win, have that player only make that move. For example, if all four columns have an opening, but moving in column 3 wins the game, only recursively call moving in column 3.</p>]]></content>
    
    <summary type="html">
    
      代写游戏Connect4，一款消除类游戏。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：INFO1156-Text-To-Html</title>
    <link href="https://tk1307993.coding.me/INFO1156-Text-To-Html.html"/>
    <id>https://tk1307993.coding.me/INFO1156-Text-To-Html.html</id>
    <published>2021-08-03T02:56:11.000Z</published>
    <updated>2021-08-03T02:59:07.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h3><p>Start with the following code:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span> </span>&#123;</span><br><span class="line">  <span class="function">ifstream <span class="title">infile</span><span class="params">( argv[<span class="number">1</span>] )</span></span>;</span><br><span class="line">  <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( infile.<span class="built_in">get</span>( ch ) ) &#123;</span><br><span class="line">    <span class="built_in">cout</span>.<span class="built_in">put</span>( ch );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create a C++ application that converts an old-style text file into a format more appropriate for use in a computer, smart-phone, or e-book reader. Specially, this program converts an UTF-8 text file (for example, PlatoTest.txt) to an xhtml 1.0 file (for example, PlatoTest.html) containing the same textual content as the original UTF-8 text file.</p><p>Note: If the input file has three newlines in a row, the output file should have only two <br> tags replacing the three newlines. Overall, the number of break tags is always one less than the number of consecutiveor singlenewlines.</p><p>The executable file must be named: txt2html.exe</p><p>The program will operate as a command-line utility (not a console input program).</p><h3 id="An-Example-Convert-PlatoTest-txt-to-PlatoTest-html"><a href="#An-Example-Convert-PlatoTest-txt-to-PlatoTest-html" class="headerlink" title="An Example - Convert PlatoTest.txt to PlatoTest.html"></a>An Example - Convert PlatoTest.txt to PlatoTest.html</h3><p>Below is an UTF-8 text file named “PlatoTest.txt”. Note that represents an <enter> in the text.<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">The Project Gutenberg EBook <span class="keyword">of</span> The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">This eBook is <span class="keyword">for</span> <span class="keyword">the</span> use <span class="keyword">of</span> anyone anywhere <span class="keyword">at</span> no cost <span class="keyword">and</span> <span class="keyword">with</span> almost no restrictions whatsoever. You may copy <span class="keyword">it</span>, give <span class="keyword">it</span> away <span class="keyword">or</span> re-use <span class="keyword">it</span> under <span class="keyword">the</span> terms <span class="keyword">of</span> <span class="keyword">the</span> Project Gutenberg License included <span class="keyword">with</span> this eBook <span class="keyword">or</span> online <span class="keyword">at</span> www.gutenberg.org</span><br><span class="line">Title: The Republic</span><br><span class="line">Author: Plato</span><br></pre></td></tr></table></figure></enter></p><p>The UTF-8 text file should convert to the html file named “PlatoTest.html” with the following source code:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>PlatoTest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">The Republic, by Plato</span><br><span class="line">The Project Gutenberg EBook of The Republic, by Plato</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">This eBook is for the use of anyone anywhere at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this eBook or online at www.gutenberg.org</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">Title: The Republic</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">Author: Plato</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This example would be run from the command prompt by typing:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.html</span></span><br></pre></td></tr></table></figure></p><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p>If the user provides an optional command line parameter “-r”, print the report (described in the next section) to the console:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">-r</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.html</span> <span class="selector-tag">-r</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span> <span class="selector-tag">-r</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.html</span></span><br></pre></td></tr></table></figure></p><h3 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h3><p>Provided the “-r” switch your program will display to the console a report that displays:</p><ul><li>The number of complete lines read from the input file.</li><li>The number of paragraphs (indicated by <br> tags)</li></ul><h3 id="Additional-Examples"><a href="#Additional-Examples" class="headerlink" title="Additional Examples"></a>Additional Examples</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">-r</span> "<span class="selector-tag">War</span> <span class="selector-tag">and</span> <span class="selector-tag">Peace</span><span class="selector-class">.txt</span>"</span><br></pre></td></tr></table></figure><p>or<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> "<span class="selector-tag">War</span> <span class="selector-tag">and</span> <span class="selector-tag">Peace</span><span class="selector-class">.txt</span>" <span class="selector-tag">-r</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> "<span class="selector-tag">War</span> <span class="selector-tag">and</span> <span class="selector-tag">Peace</span><span class="selector-class">.txt</span>" <span class="selector-tag">W</span>&amp;<span class="selector-tag">P</span><span class="selector-class">.html</span> <span class="selector-tag">-r</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">War</span>&amp;<span class="selector-tag">Peace</span><span class="selector-class">.txt</span> <span class="selector-tag">-r</span> <span class="selector-tag">War</span>&amp;<span class="selector-tag">Peace</span><span class="selector-class">.html</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      用C++代写一个文本转HTML的工具。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
</feed>
