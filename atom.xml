<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2020-06-11T00:52:58.357Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CIT325-Authentification-Server</title>
    <link href="https://tk1307993.coding.me/CIT325-Authentification-Server.html"/>
    <id>https://tk1307993.coding.me/CIT325-Authentification-Server.html</id>
    <published>2020-06-11T00:51:12.000Z</published>
    <updated>2020-06-11T00:52:58.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><p>The goal of this lab is to develop a deeper understanding of how objects can be moved around the Internet by developing a useful, but small, system to store data on multiple computers. You will develop a graphical client that will allow you create, edit and delete student data. The data will be stored on a Student Server and login data will be stored on the Authentication Server.</p><h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>You will begin with the GUI and code used to complete the previous lab. You will add a JButton to the toolbar and a menu item under the File menu called Login. When selected or pressed:</p><ol><li>Show a dialog with userid and password fields</li><li>When the fields are populated and the dialog OK button is clicked, connects to the Authentification Server.</li><li>If the userid/password combination is valid user is allowed to login to the Student Server.</li><li>if the userid/password combination is invalid, another dialog is shown, informing the user the userid/password is invalid.<br>Once connected, the user will be able to do all functions they could do with the previous lab. Now, the system will connect to the Student Server to get the data instead of storing it locally.</li></ol><h3 id="Authentification-Server"><a href="#Authentification-Server" class="headerlink" title="Authentification Server"></a>Authentification Server</h3><p>The Authentification Server will receive a request which has a userid/password combination. It will compare these 2 fields to its own data to see if this is a valid user login. If it is valid, it will send a login OK message to the Student Server, allowing the user to begin adding, editing and changing student data.<br>The data is kept in a text file, that will need to be loaded when the server is started. The data can be read in and stored in any structure that the designer deems worthy.<br>This server is located at:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCP<span class="built_in">/IP </span>Address: 127.0.0.1</span><br><span class="line">Port: 8189</span><br></pre></td></tr></table></figure></p><h3 id="Student-Server"><a href="#Student-Server" class="headerlink" title="Student Server"></a>Student Server</h3><p>The Student Server is similar as to what was used in Lab 7 to store student data. It is basically an ArrayList of objects wrapped in a server. The 4 classes are: Student, Undergrad, Graduate, NonDegree and are the same design as they were in Lab 7.<br>In Lab 7, the arraylist was part of the GUI object. Now, the arraylist is wrapped in a server and the object must be passed back and forth each time the user, via the GUI, wants to compete a transaction.<br>This server is located at:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCP<span class="built_in">/IP </span>Address: 127.0.0.1</span><br><span class="line">Port: 8190</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      用Java代写一个Authentification Server，包含GUI与交互。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="Swing" scheme="https://tk1307993.coding.me/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>ECE244-Binary-Search-Trees</title>
    <link href="https://tk1307993.coding.me/ECE244-Binary-Search-Trees.html"/>
    <id>https://tk1307993.coding.me/ECE244-Binary-Search-Trees.html</id>
    <published>2020-06-03T01:01:03.000Z</published>
    <updated>2020-06-03T01:02:17.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The objectives of this assignment are to provide you with more practice on the use of the various C++ concepts/constructs introduced in the lectures so far, including classes, dynamic memory allocation, pointers, I/O, and dynamic data structures. This will be done in the context of implementing a binary search tree class.</p><h3 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h3><p>In this assignment, you will implement a simple database to store and retrieve data. You are creating a simple “domain name server” - a database that can rapidly look up string names, such as <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a>, and return a 32-bit integer that is the Internet Protocol (IP) address corresponding to that “domain name”. This is the function performed by the domain name servers that allow you to type in easy to remember website names and have your web browser automatically go to the correct IP address (computer) to retrieve the web data.</p><p>You will implement three classes: DBentry, TreeNode and TreeDB. The DBentry class will be used to create objects that hold an entry of the database. Each entry has a key (a string, corresponding to the name of the internet domain) and some data (a 32-bit integer that gives the IP address and a boolean flag that indicates whether the computer at that IP address is active or not). The TreeDB and TreeNode classes will be used to create a binary search tree database of DBentry objects. TreeDB represents the entire binary tree, while each TreeNode represents a single node in the tree.</p><p>In a real domain names server, we would have to rapidly search billions of domain names (strings) as we looked for the IP address corresponding to a name. The fact that a binary search tree can find entries in large datasets very efficiently, and can also add new entries efficiently, makes it a very appropriate data structure for this application.</p><h3 id="Command-and-Output-Specification"><a href="#Command-and-Output-Specification" class="headerlink" title="Command and Output Specification"></a>Command and Output Specification</h3><p>Your database will be exercised by a simple parser. Whenever the parser expects the user to enter a command, it should prompt the user for input by outputting a greater than sign followed by a space:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in"> user </span>input would appear here</span><br></pre></td></tr></table></figure></p><p>The parser reads commands from cin, calls the appropriate TreeDB and DBentry functions, and sends the appropriate output to cout. Each command consists of an operation, followed by zero or more arguments. The command and the arguments are separated by white spaces, and will always appear on the same line. You parser should process commands until the end-of-file (eof) is encountered. You may assume that all the input is syntactically correct - your program will not be tested with invalid commands, the wrong number of arguments, or misspelt arguments. The only error messages you need to generate are those listed below. The commands and their parameters are:<br>insert name IPaddress status<br>This command creates a new entry with name (a string) as the key and IPaddress (a non-negative integer) and status (active or inactive) as specified. You may assume that the name, IPaddress, and active arguments are separated by spaces and that there are no spaces within an argument. The new entry is then inserted into the database. If there already exists an entry with the same key, the error message “Error: entry already exists” is printed to cout. Otherwise “Success” is printed.</p><p>find name<br>This command finds the entry with the key name in the database, and prints its contents to cout as name : IPaddress : status. Name and IPaddress are printed as a string and an unsigned integer, respectively, while status is either active or inactive. Between values a space, colon and space should be printed.<br>If no such entry exists, the error message “Error: entry does not exist” is printed to cout.</p><p>remove name<br>This command deletes the entry with the key name from the database. If no such entry exists, the error message “Error: entry does not exist” is printed to cout. Otherwise “Success” is printed.</p><p>printall<br>This command prints all the entries in the database, sorted in ascending order of keys, one entry per line.</p><p>printprobes name<br>This command finds the entry with the key name in the database.<br>If no such entry exists, the error message “Error: entry does not exist” is printed to cout. Otherwise, the number of probes (DBentries examined during the tree search) is printed to cout.</p><p>removeall<br>This command deletes all the entries in the database, returning it to the empty state. When done, “Success” is printed.</p><p>countactive<br>This command counts the number of entries in the database that are active and prints this count to cout.</p><p>updatestatus name status<br>This command updates the status of the entry with the given name; status must be either active or inactive. If no entry with name exists, the error message “Error: entry does not exist” is printed to cout.<br>Otherwise “Success” is printed.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构中的Binary Search Tree，很常见的一类作业，补充实现class中的方法即可。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>EE312-Little-Toy-Programming-Language</title>
    <link href="https://tk1307993.coding.me/EE312-Little-Toy-Programming-Language.html"/>
    <id>https://tk1307993.coding.me/EE312-Little-Toy-Programming-Language.html</id>
    <published>2020-05-29T02:44:46.000Z</published>
    <updated>2020-05-29T00:49:38.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p>For our final project we will write our own little toy programming language. The language will have functions, loops, conditional statements, arithmetic and will even support recursion. For Phase B of the project, we’re introducing real program statements (well, I suppose “real” here is a relative term). In addition to output and assignment statements from Phase A, we’ll have conditional statements (if), loops (do) and functions (defun and call). We’ll also introduce the concept of statement blocks, since loops, functions and conditions have “bodies” consisting of a sequence of statements (i.e., a block).</p><h3 id="The-Blip-do-statement"><a href="#The-Blip-do-statement" class="headerlink" title="The Blip do statement"></a>The Blip do statement</h3><p>While if statements are conceptually easier than loops, it’s perhaps best to start with the do construct. At the very least, the do statement is more straightforward to parse than an if.</p><p>As you can see, the syntax consists of the do keyword followed by a loop condition expression, followed by a block of statements followed by the od keyword. As always in Blip, the spacing, indenting and new lines are all irrelevant. Please note that the block of statements can consist of zero or more statements. In Blip, a do loop with zero statements in the block is always silly (an infinite loop with no output). However, technically that is a legal loop.</p><p>The semantics of a do statement in Blip are essentially the same as a while loop in C. First evaluate the expression. If the expression is true (i.e., any integer value other than 0), then execute the block of statements. Then re-evaluate the expression and continue repeating the block of statements until the expression evaluates to false.</p><h3 id="Parsing-the-do-statement"><a href="#Parsing-the-do-statement" class="headerlink" title="Parsing the do statement"></a>Parsing the do statement</h3><p>Parsing do loops in Blip is not incredibly hard. Once you recognize the do keyword, you know the next thing in the input will be an expression, so that’s easy (about the same as an output statement in Blip). The challenge comes when you start parsing the block of statements. Depending on how you wrote your parser during Phase A, you may have no problems at all with the statement block, but if your code is highly structured, you might find it a pain in the neck to deal with the od. The issue is that by the time you realize that the next token is an od, you’ve already read the token (duh). But, if the token is not od, then that token is the first token in a regular statement, by which time you may wish that you hadn’t already read it. To help with this situation, the Input.cpp file now has a function “peek_next_token”, which returns a C string representing the next token in the stream. To first approximation, peek_next_token works a lot like the sequence read_next_token(); next_token(). However, peek_next_token does not actually remove the token from the input stream. So, after you have “peeked” at the token, you still have to actually read the token to remove it. I used peek_next_token a lot in my solution. Some of you will find it useful, some of you will have no idea what it’s supposed to be for. If it doesn’t appear really, really useful to you, then your code probably doesn’t benefit from it - it will be obvious how to use this function if it’s useful to you. And if it’s not useful, please don’t feel obligated to use it.</p><h3 id="Delaying-and-Repeating-execution"><a href="#Delaying-and-Repeating-execution" class="headerlink" title="Delaying and Repeating execution"></a>Delaying and Repeating execution</h3><p>The big change from Phase A to Phase B is that when you implement Phase B you’re forced to parse and save Blip statements. In Phase A, you could parse, execute and throw away each statement as you executed it. Statements could only be executed once, so there was no need to save them. However, in Phase B we have loops that force us to repeatedly execute the same statement(s). Obviously, the statements appear only once in the input stream even though we’re executing them repeatedly in the loop. So, you’re forced to save those statements somehow and then re-execute them later. We strongly recommend that you use a parse tree to store your statements. In fact, we recommend that you use a parse tree to store ALL your statements, even those statements that are not inside a loop. Read/parse with one (recursive) function, and then execute with another (recursive) function. If you used a parse tree in Phase A, you’re probably in good shape to extend that parse tree for Phase B. Please note that you will probably have two different types of parse trees: trees of statements and trees of expressions. A do statement is a perfect example. The condition for the do is an expression. If you have an expression parse tree, that’s a great way to store that expression. The body of the loop is a block (hint, a vector) of statements. Each of those statements can be any Blip statement, including do or if statements! So, a vector of statement parse trees is the right way to store the body of a do loop.</p><h3 id="If-statements"><a href="#If-statements" class="headerlink" title="If statements"></a>If statements</h3><p>Once you’ve figured out how to do a loop (no pun intended), if statements are pretty easy.</p><p>Where, as before, expr is an expression and there is a block of statements in between the start of the if and the end of the if. Note that the end of the if is marked with “fi” (if spelled backwards). The semantics of a basic if statement is the same as in C. If expr evaluates to any integer other than zero, then all the statements in the body are executed. If expr evaluates to 0, then none of the statements in the body are executed.</p><h3 id="The-else-statement"><a href="#The-else-statement" class="headerlink" title="The else statement"></a>The else statement</h3><p>Just as in C, if statements can have an optional else attached.</p><p>The semantics of an if-then-else in Blip are just like those in C. If expr evaluates to true then execute all the statements inside the first statement block, but none of the statements in the else block. If expr evaluates to false, then evaluate none of the statements in the first block, but evaluate all the statements in the else block. Please keep in mind that the else construct will not appear on every if statement.</p><h3 id="And-that’s-all-there-is-for-Project-8"><a href="#And-that’s-all-there-is-for-Project-8" class="headerlink" title="And that’s all there is for Project 8"></a>And that’s all there is for Project 8</h3><p>The rest of this document describes additions to Blip. Please note that the effort implied by the requirements below (i.e., how much time it takes to finish everything) is outside the bounds of what’s reasonable for a programming project. So, it really is extra credit, and I would not expect very many (if any) students to undertake the entire project. With that caveat, we will test the following requirements, including the quality of your solution (e.g., testing for memory leaks) and assign up to five additional extra credit points for extraordinarily good solutions.</p><h3 id="Functions-oh-my"><a href="#Functions-oh-my" class="headerlink" title="Functions (oh my)"></a>Functions (oh my)</h3><p>The complicated part of Phase B starts with functions. Adding functions to Blip means adding three new commands, two statements and one expression type. But the hard part of functions is implementing their semantics. We suggested you approach functions as follows.</p><p>Implement basic functions with no parameters. These functions, when called, always run to the end of their function bodies - i.e., the return statement will always be the last line in the function.</p><p>Implement functions with parameters. Note that parameters require that you have a new “local” scope for your variables, so if there’s a variable “x” defined and then there’s a parameter “x”, the parameter and the original variable are different. We’ll approximate the rules that C uses for variable scoping. Once you implement parameters, implementing local variables are relatively easy.</p><p>Implement return statements that happen in the middle of your function. A return statement can appear anywhere inside a function (or even anywhere inside the main program), including inside loops or if statements. When the return statement is executed, the function immediately stops executing and control returns to the calling function.</p><p>You can actually swap the order you implement #2 and #3 above, depending on how you’re feeling. I just strongly recommend that you do #1 to completion, and then pick either #2 or #3 to work on next. Don’t try to do 2 and 3 simultaneously - build the project incrementally!</p><h3 id="Basic-Functions-and-defun-nufed"><a href="#Basic-Functions-and-defun-nufed" class="headerlink" title="Basic Functions and defun/nufed"></a>Basic Functions and defun/nufed</h3><p>A function can be defined anywhere, at any time. In fact, we can nest functions in functions in Blip (you can’t do that in C). When you define a function (with the defun keyword), you create a list of statements (the function body) that are not executed yet, but will be executed when the function is called (with the call expression).</p><p>In this example, a new function called “sayHello” is created. The function has zero parameters (there is nothing between the params and smarap markers), and one statement (there is one statement between the parameter list and the nufed marker). When this function is parsed, you should build a parse tree for it. As a hint, since my implementation always parses and then executes statements, my defun statements are also both parsed and executed. However, “executing” a defun statement does not execute the body. Rather executing a defun statement simply adds the function to the symbol table once my defun has been executed, the symbol “sayHello” is bound to the function. There are many other ways to implement the semantics, but however you do it, you must not execute the body of the function until it is actually called.</p><h3 id="Call-expressions"><a href="#Call-expressions" class="headerlink" title="Call expressions"></a>Call expressions</h3><p>The only way to invoke a function in Blip is to use a call expression. This is actually similar to what C does. However, in Blip, every function has a return value. If you don’t include a return statement in your Blip function, then the value 0 must be returned by that function (when it ends). Most importantly, the return value cannot be ignored by the caller - C allows the function return values to be ignored. So, calling the sayHello function requires that we do something with the returned value (zero for that example since there’s no explicit return statement).</p><p>Here I’ve used a var statement. I have a bogus variable “not_used” and I’m initializing this variable to the value returned by sayHello. I use this technique extensively in my Blip programs to simulate “void” functions. Anyway, since Blip functions always return a value and since that value can never be ignored, our task to execute them is relatively easy. We have a new expression type “call”. The call expression invokes the function using the arguments from the argument list and then evaluates to the value returned by the function.</p><h3 id="Params-and-variable-scoping"><a href="#Params-and-variable-scoping" class="headerlink" title="Params and variable scoping"></a>Params and variable scoping</h3><p>Blip functions can have an arbitrary number of parameters. The parameter list is marked with params/smarap in the defun statement. The corresponding set of arguments is marked with args/sgra. Just like in C, the first argument is bound to the first parameter, the second argument is bound to the second parameter and so forth. The first step in implementing parameters is to modify your call expression so that, when it is executed, each of the arguments is evaluated and the value is assigned to a variable with the name of the parameter.</p><p>There are many possible implementations of variable scoping. You’re free to choose any implementation strategy that you would like. However, my personal favorite involves using multiple symbol tables. When the parameter x comes into existence, it is placed into its own symbol table - the local variables for function fun. When the function returns, its local-variable symbol table is completely erased. However you decide to implement local variables, the correct behavior in Blip is defined as follows</p><h3 id="Early-return-statements"><a href="#Early-return-statements" class="headerlink" title="Early return statements"></a>Early return statements</h3><p>Blip function can have multiple return statements. If there are zero return statements, then the function returns the value 0. Otherwise, the first return statement that is executed supplies the returned value. Additionally, as soon as a function executes a return statement, the function must immediately stop executing and return control to its caller. To make things consistent, return statements can also appear in the “main program” (i.e., the Blip statements that appear outside of any functions constitute the main program). The first of these return statements that are executed forces the Blip program to immediately stop.</p><p>How you go about implementing the return statement depends entirely on how you structured your program - how you execute statements and functions. I have no specific advice. There are no fancy data structures or complex semantics to worry about. Please do keep in mind that we prefer clean and well-designed code over sloppy code and that your style is part of your grade for this project.</p>]]></content>
    
    <summary type="html">
    
      代写一个精简版的interpreter，可以解析functions, loops, conditional statements, arithmetic和recursion等。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Compiler" scheme="https://tk1307993.coding.me/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>CS3014-Responsive-Web-Design</title>
    <link href="https://tk1307993.coding.me/CS3014-Responsive-Web-Design.html"/>
    <id>https://tk1307993.coding.me/CS3014-Responsive-Web-Design.html</id>
    <published>2020-05-23T02:44:46.000Z</published>
    <updated>2020-05-23T02:48:09.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><ul><li>Become familiar with the AJAX and JSON technologies</li><li>Use a combination of HTML5, CSS, Bootstrap, jQuery, AngularJS and PHP</li><li>Get hands-on experience in Google Cloud App Engine or Amazon Web Services</li><li>Get hands-on experience on how to use Bootstrap to enhance the user experience</li><li>Provide an interface to perform congress search using Sunlight Congress APIs</li></ul><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><h4 id="AJAX-and-JSON"><a href="#AJAX-and-JSON" class="headerlink" title="AJAX and JSON"></a>AJAX and JSON</h4><p>Ajax (short for Asynchronous JavaScript and XML) is a mechanism which enables the communication between the client and the server without the need for a post-back or a complete page refresh. It can also be defined as a method of exchanging data with a server, and updating some parts of a web page without reloading the entire page.</p><p>In this exercise, you have to use the AJAX component provided in JQuery.</p><p>JSON, short for JavaScript Object Notation, is a lightweight data interchange format. Its main application is in AJAX web application programming, where it serves as an alternative to the use of the XML format for data exchange between client and server.</p><h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><p>Bootstrap is a free collection of tools for creating responsive websites and web applications. It contains HTML and CSS-based design templates for typography, forms, buttons, navigation and other interface components, as well as optional JavaScript extensions. To learn more details about Bootstrap please refer to the lecture material on Responsive Web Design (RWD).</p><h4 id="Sunlight-Congress-API"><a href="#Sunlight-Congress-API" class="headerlink" title="Sunlight Congress API"></a>Sunlight Congress API</h4><p>The Sunlight Congress API is a live JSON API for the people and work of Congress, provided by the Sunlight Foundation. With the API you can:</p><ul><li>Look up members of Congress by location or by zip code.</li><li>Obtain the official Twitter, YouTube, and Facebook accounts.</li><li>Look up the daily work of Congress: bills, amendments, nominations.</li><li><p>Get the live activity of Congress: past and future votes, floor activity, heari ngs.<br>In order to make requests to Sunlight Congress API, you need to get an API key:</p></li><li><p>Go to <a href="http://sunlightfoundation.com/api/" target="_blank" rel="noopener">http://sunlightfoundation.com/api/</a></p></li><li>Click on “Get a key!”</li><li>Fill the sign up form</li><li>You will get a confirm email. Click on the link in the email.<br>Then login at the Sunlight Foundation website and go to your “Profile Settings”. You will see your API key string right above you name.</li></ul><p>For information about the Sunlight Congress API, please go to: <a href="https://sunlightlabs.github.io/congress/" target="_blank" rel="noopener">https://sunlightlabs.github.io/congress/</a></p><h4 id="Amazon-Web-Services-AWS"><a href="#Amazon-Web-Services-AWS" class="headerlink" title="Amazon Web Services (AWS)"></a>Amazon Web Services (AWS)</h4><p>AWS is Amazon’s implementation of cloud computing. AWS includes Amazon Elastic Compute Cloud (EC2), which delivers scalable, pay-as-you-go compute capacity in the cloud, and AWS Elastic Beanstalk, an even easier way to quickly deploy and manage applications in the AWS cloud. You can simply upload your application, and Elastic Beanstalk automatically handles the deployment details of capacity provisioning, load balancing, auto-scaling, and application health monitoring. Elastic Beanstalk is built using familiar software stacks such as the Apache HTTP Server, PHP, and Python, Passenger for Ruby, IIS 7.5 for .NET, and Apache Tomcat for Java.</p><p>The Amazon Web Services homepage is available at: <a href="http://aws.amazon.com/" target="_blank" rel="noopener">http://aws.amazon.com/</a></p><h4 id="Google-App-Engine-GAE"><a href="#Google-App-Engine-GAE" class="headerlink" title="Google App Engine (GAE)"></a>Google App Engine (GAE)</h4><p>Google App Engine applications are easy to create, easy to maintain, and easy to scale as your traffic and data storage needs change. With App Engine, there are no servers to maintain. You simply upload your application and it’s ready to go. App Engine applications automatically scale based on incoming traffic. Load balancing, micro services, authorization, SQL and noSQL databases, memcache, traffic splitting, logging, search, versioning, roll out and roll backs, and security scanning are all supported natively and are highly customizable.</p><p>To learn more about GAE support for PHP visit the page: <a href="https://cloud.google.com/appengine/docs/php/" target="_blank" rel="noopener">https://cloud.google.com/appengine/docs/php/</a></p><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>Similar to homework 6, in this exercise you will create a webpage that allows users to search for congress information using the Sunlight Congress API.</p><p>The difference being, in this homework you will create a PHP script to return a JSON formatted data stream to the front-end. The client parses the JSON data and renders it in a nicer-looking, responsive UI (using Bootstrap).</p><p>A user first opens a page as shown below in Figure 1. The page includes a navigation bar at the left and the legislators’ information table at the right.</p><p>Once the user opens this page, all of the legislators’ information data is loaded using the AJAX component in JQuery. The AJAX-JQuery code calls your PHP script. The webpage must then use JavaScript to extract data from the JSON response and display the results on the same webpage. Description of how to display the results is given in the Hints section.</p><h4 id="Page-Header"><a href="#Page-Header" class="headerlink" title="Page Header"></a>Page Header</h4><p>At the top of the webpage, there is a page header which contains a stack icon at left and an image link in the center.</p><h4 id="Navigation-Bar"><a href="#Navigation-Bar" class="headerlink" title="Navigation Bar"></a>Navigation Bar</h4><p>The navigation bar should contain 4 items (Legislators, Bills, Committees and Favorites), each item starts with an icon, followed by the text.</p><p>When the user clicks on an item in this navigation bar, the corresponding content should be loaded. For example, when the user clicks on Legislators, the legislators’ information table should be loaded to the content part.</p><h3 id="FAQ’s"><a href="#FAQ’s" class="headerlink" title="FAQ’s"></a>FAQ’s</h3><p>Q1. Which server should I use, where would server be hosted?</p><p>You can use either host it in Google App Engine or Amazon Web Services. While grading we just need to see the data.</p><p>Q2. Can I use any other way to store data?</p><p>You are allowed only to use browsers local storage. No other way of storing data like cookies, session storage is allowed.</p><p>Q3. How long should the local storage be persistent?</p><p>The local storage data should be persistent until the browser is closed. Even if the page is refreshed, the local storage data should not be deleted.</p><p>Q4. Is it required to use Bootstrap Carousel?</p><p>Yes. It is mandatory to use bootstrap carousel.</p><p>Q5. Facing issues with Cross Origin Request?</p><p>There are several ways to avoid cross origin issues. You can use CORS. If you like to use $.ajax() you can use datatype: jsonp with callback function appended with the URL.Q6. If there is a scroll issue in iPhone or iPad? Use the following style to the parent or body tag -webkit-overflow-scrolling: touch;</p>]]></content>
    
    <summary type="html">
    
      代写一个完整的大型网站，主题不限。技术方面需要使用HTML5, CSS, Bootstrap, jQuery, AngularJS和PHP，最终部署到AWS上，并且可供公网访问。
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="AWS" scheme="https://tk1307993.coding.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>CS314-Multi-Threaded-Program</title>
    <link href="https://tk1307993.coding.me/CS314-Multi-Threaded-Program.html"/>
    <id>https://tk1307993.coding.me/CS314-Multi-Threaded-Program.html</id>
    <published>2020-05-16T01:45:24.000Z</published>
    <updated>2020-05-16T01:47:43.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>In this lab we will create a simple multi-threaded program that merges two files. The usage of the program is:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./merge <span class="tag">&lt;<span class="name">fi161</span>&gt;</span> <span class="tag">&lt;<span class="name">file2</span>&gt;</span> <span class="tag">&lt;<span class="name">mergedfife</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>The program will create 2 threads, one for file1 and one for file2. Each thread will read a line from the file (use getline()) and write it to the merged file in the following format:</p><p>filename: line_number: line_of_text<br>Here is an example of what the merged file should look like:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">tami@cs:0~]./merge roses.txt knock.txt merged.txt</span></span><br><span class="line"><span class="section">tami@cs:0~]cat merged.txt</span></span><br><span class="line"><span class="section">roses.txt: 1: Roses are red.</span></span><br><span class="line"><span class="section">knock.txt: 1: Knock, knock!</span></span><br><span class="line"><span class="section">roses.txt: 2: Violets are blue.</span></span><br><span class="line"><span class="section">knock.txt: 2: Who's there?</span></span><br><span class="line"><span class="section">roses.txt: 3: O/S is hard.</span></span><br><span class="line"><span class="section">knock.txt: 3: Art.</span></span><br><span class="line"><span class="section">roses.txt: 4: This is so true!</span></span><br><span class="line"><span class="section">knock.txt: 4: Art who?</span></span><br><span class="line"><span class="section">knock.txt: 5: R2-D2.</span></span><br></pre></td></tr></table></figure></p><p>Please notice how the threads alternate in sequence until the end of a file is reached. In the example above, roses.txt has 4 lines and knock.txt has 5 lines (merged.txt thus has 9 lines). The threads and the program will terminate when it is complete. You may not use sleep(), busy waiting, or IPC to synchronise the threads and instead, must use semaphores.</p><p>Please note that NOTHING is output to the monitor. When the program functions correctly, a merged file (as displayed above) is created and nothing is printed to stdout.</p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>Please ensure that the following requirements are met:</p><p>Your code must exist in your home directory on Bash in a file named<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$HOME</span><span class="regexp">/lab8/m</span>erge.c</span><br></pre></td></tr></table></figure></p><p>The file specified in item 1 must compile to create an executable that properly merges two files of any length. The command to compile the program is:<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -Wextra -Werror -pthread -o <span class="keyword">merge</span> <span class="keyword">merge</span>.c</span><br></pre></td></tr></table></figure></p><ul><li>Your program must perform reasonable error checking. It should be as robust as possible and detect all errors.</li><li>You must use threads and semaphores to accomplish the task.</li><li>Your code must be well formatted, attractive, readable, and maintainable. Good programming practice requires that your code is properly formatted and commented at all times, not just when it is “done” and submitted for marking.</li></ul><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Please create your own test files to thoroughly test your program on a Wide variety of different input conditions. The C code you write must adhere to good programming practices. It must be indented, contain suitable comments, use preprocessor directives, and have intuitive variable names. Code that merely works and does not follow good practice DOES NOT meet the requirements. Marking and help during office hours Will only be performed on code that executes on Bash.</p>]]></content>
    
    <summary type="html">
    
      使用threads和semaphores，代写多线程程序，进行数据处理。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CS314-Parallel-Computation</title>
    <link href="https://tk1307993.coding.me/CS314-Parallel-Computation.html"/>
    <id>https://tk1307993.coding.me/CS314-Parallel-Computation.html</id>
    <published>2020-05-12T10:16:28.000Z</published>
    <updated>2020-05-12T10:18:08.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>In this lab we will create a multi-process program that uses a mutually exclusive shared variable to perform parallel computation. The usage of the program is<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./average <span class="tag">&lt;<span class="name">fileflame</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>where filename is the name of a 1000 line long input file, with each line containing a 9 digit number (plus a newline). There is no leading whitespace before any value. The file is therefore 10001 characters long (10 chars per line times 1000 lines plus an EOF marker). You may assume the file is correctly formatted and do not have to error check for invalid data. An example file is provided on the course web page.</p><p>Your program will spawn 5 processes. Each process will (simultaneously) read a different 200 lines from the input file and compute the sum of these 200 lines. The processes then add the sum to a variable in shared memory (as well as printing it to the screen) and terminate. The parent process (of all 5 children) waits until the 5 children have completed and divides the stored value by 1000 to compute an average. The average is then printed to the screen with 2 decimal places of precision.</p><p>Here is an example of use:<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tami@<span class="symbol">cs:0</span>~]./<span class="built_in">average</span> testdata.txt</span><br><span class="line">Child <span class="number">1</span> <span class="built_in">sum</span> is <span class="number">47606451980</span></span><br><span class="line">Child <span class="number">2</span> <span class="built_in">sum</span> is <span class="number">48722283695</span></span><br><span class="line">Child <span class="number">3</span> <span class="built_in">sum</span> is <span class="number">46980337615</span></span><br><span class="line">Child <span class="number">4</span> <span class="built_in">sum</span> is <span class="number">49206486425</span></span><br><span class="line">Child <span class="number">5</span> <span class="built_in">sum</span> is <span class="number">47751953548</span></span><br><span class="line"><span class="built_in">Average</span> <span class="number">381648245485.22</span></span><br></pre></td></tr></table></figure></p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>Please ensure that the following requirements are met:</p><ul><li><p>Your code must exist in your home directory on Bash in a file named $HOME/lab7/average.c and must compile to create an executable. The compilation command will be</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc <span class="params">-Wall</span> <span class="params">-Wextra</span> <span class="params">-Werror</span> <span class="params">-o</span> <span class="keyword">average</span> <span class="keyword">average</span>.c</span><br></pre></td></tr></table></figure></li><li><p>Your program must perform error checking on the file name and command line parameters.</p></li><li>You must have a total of 6 processes (not threads). Do not use sleep() to synchronise your processes and instead, use wait(), synchronous system calls, or semaphores.</li><li>You must have a single variable in shared memory to hold the five sums and you must use the 5 child processes to add to that variable.</li><li>To function correctly, the shared variable must be a mutually exclusive resource and protected with a semaphore.</li><li>Your code must be well formatted, attractive, readable, and maintainable. Changing the number of lines in the file or number of processes used should be trivial.</li><li>The C code you write must adhere to good programming practices. It should be indented, contain suitable comments, use preprocessor directives, and have intuitive variable names. Code that merely works and does not follow good practice DOES NOT meet the requirements. Marking and help during office hours will only be performed on code that executes on Bash.</li></ul><h4 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h4><p>Begin by writing a program that reads the command line arguments, forks off the correct number of processes, and has each process print out its PID and exit. Then, add shared memory and a semaphore to make the shared memory a mutually exclusive resource. Have each process print a constant value into the shared memory just to ensure that it is being used correctly. Get the parent process to wait for the five child processes and then divide the value to compute an average. Finish off by adding code to the children to read the correct part of the file and add the values. As you are only storing a sum, you do not need to store the file’s contents in memory.</p><p>Test your program on data other than the sample data. To do that, you may have to write a program to generate data files (and compute the average of the values).</p><p>Please be aware that the values in the sample output are incorrect. The purpose of the sample output is to demonstrate the format and use of the program, not to give you values that you must duplicate. All source code must be written from scratch.</p>]]></content>
    
    <summary type="html">
    
      代写并行算法小作业，对数据进行并发处理。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>CS112-Yet-Another-Calculator</title>
    <link href="https://tk1307993.coding.me/CS112-Yet-Another-Calculator.html"/>
    <id>https://tk1307993.coding.me/CS112-Yet-Another-Calculator.html</id>
    <published>2020-05-06T11:42:49.000Z</published>
    <updated>2020-05-06T11:46:06.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This consists of just one problem as a Part B. In addition to the requirements for the Java problems, you must observe the following requirements (for all homework submitted in this course):</p><ul><li>All programs should be literate, i.e., easily understandable by a human (say, your grader) and follow the Java Style Guidelines for CS112 posted on the class web site;</li><li>All files for this homework should be submitted using WebSubmit, following the instructions on the class web site;</li><li>You may not use data structure libraries such as ArrayList, since we are learning to write Java from the ground up and you must learn how these libraries are built; however, you are free to use (unless specifically directed otherwise) the basic libraries String, Character, Scanner, and Math; for this assignment, you may also use Double.parseDouble(….);</li><li>You may freely use code from the class web site, the textbook, or lecture (unless specifically directed otherwise) as long as you cite the source in your comments; but you may NEVER use code from the web or other students’ programs—this will be considered plagiarism and penalized accordingly.</li></ul><h3 id="Problem-B-1-YAC-Yet-Another-Calculator"><a href="#Problem-B-1-YAC-Yet-Another-Calculator" class="headerlink" title="Problem B.1: YAC (Yet Another Calculator)"></a>Problem B.1: YAC (Yet Another Calculator)</h3><p>This problem will be an exercise in hierarchical linked lists and in recursive evaluation of arithmetic expressions. There is not all that much coding to do (my solution added less than 50 lines of code to the template), but you will need to understand how to represent expressions using hierarchical or nested linked lists. As I explained in lecture, this is how Python and many other interpreted languages represent programs, and it is an important way to think about representing data and algorithms.</p><p>The primary data structure will be hierarchical linked lists, as described in lecture on Tuesday 10/25. As explained at that time on the board, an expression will consist of three different kinds of nodes, for operators (*, +, -, and /), positive numbers (doubles), and expressions (nested, fully-parenthesized expressions). For example, an infix expression such as<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( ( 3<span class="selector-class">.4</span> + 0<span class="selector-class">.0</span> ) * ( 1<span class="selector-class">.2</span> <span class="selector-tag">-</span> 2<span class="selector-class">.3</span> ) )</span><br></pre></td></tr></table></figure></p><p>which can equivalently be represented in prefix form as<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*( +( 3<span class="selector-class">.4</span>, 0<span class="selector-class">.0</span> ), <span class="selector-tag">-</span>( 1<span class="selector-class">.2</span>, 2<span class="selector-class">.3</span> ) )</span><br></pre></td></tr></table></figure></p><h3 id="Representing-Arithmetic-Expressions-by-Hierarchical-Linked-Lists"><a href="#Representing-Arithmetic-Expressions-by-Hierarchical-Linked-Lists" class="headerlink" title="Representing Arithmetic Expressions by Hierarchical Linked Lists"></a>Representing Arithmetic Expressions by Hierarchical Linked Lists</h3><p>There are three different kinds of nodes in such a hierarchical list, all represented by different configurations of Node objects:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">privatestaticclassNode&#123;</span><br><span class="line">    <span class="keyword">String</span> <span class="keyword">op</span>;</span><br><span class="line">double num;</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">exp</span>;</span><br><span class="line">    <span class="keyword">Node</span> <span class="title">next</span>;</span><br><span class="line"></span><br><span class="line">      ..... constructors <span class="keyword">and</span> toString() ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Operator Nodes represent one of the four arithmetic operators *, +, -, or / and have an op field storing the operator as a String.</p><p>Note that the num field, a double, has to have some value, and since it is meaningless in this kind of node, we give it the default value 0.0; similarly, the exp field is not used, and is assigned null. The next field, as we show below, will point to null when the operator is pushed on the Ops stack and point to the two operands of the operator when it is part of an expression.</p><p>Expression Nodes are placeholders for expressions, and have default values for op and num, and a pointer to an operator node which starts a subexpression.</p><p>Therefore, it is easy to tell which kind of node is being represented:</p><ul><li>Operator nodes have a non-empty String in the op field, a 0.0 in the num field, and a null pointer in the exp field;<br>Number nodes have an empty String in the op field, a double value in the num field (could, of course, be 0.0), and a null pointer in the exp field; and</li><li>Expression nodes have a non-null pointer in the exp field.<br>Each of these nodes may have a next field which is null or non-null, depending on context (see below for examples).</li></ul><h3 id="Evaluating-Hierarchical-Lists"><a href="#Evaluating-Hierarchical-Lists" class="headerlink" title="Evaluating Hierarchical Lists"></a>Evaluating Hierarchical Lists</h3><p>You must also write a method eval( … ) which takes a pointer to a hierarchical linked list, and returns a double which is the result of the expression represented by the hierarchical list. This method must be recursive, does not use a stack, and is actually fairly simple if you understand the recursive structure of the lists:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">eval(Node e) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> e <span class="keyword">is</span> a <span class="built_in">number</span></span><br><span class="line"><span class="built_in">        return</span> <span class="keyword">the</span> <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> e <span class="keyword">is</span> an expression (<span class="keyword">the</span> <span class="keyword">first</span> node <span class="keyword">is</span> an operator)</span><br><span class="line">        evaluate <span class="keyword">the</span> subexpressions recursively <span class="keyword">and</span> <span class="literal">return</span></span><br><span class="line">        <span class="keyword">the</span> <span class="literal">result</span> <span class="keyword">of</span> applying <span class="keyword">the</span> operator <span class="keyword">to</span> <span class="keyword">the</span> values <span class="keyword">of</span> <span class="keyword">the</span> subexpressions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      这次的作业需要使用链表结构，代写一个计算器应用程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CSE214-Classroom</title>
    <link href="https://tk1307993.coding.me/CSE214-Classroom.html"/>
    <id>https://tk1307993.coding.me/CSE214-Classroom.html</id>
    <published>2020-04-27T07:12:26.000Z</published>
    <updated>2020-04-27T07:14:46.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>After many years of dealing with incomplete and inaccurate information about the classrooms on campus, the faculty of Stony Brook have decided to band together to create a system that will allow them to quickly reference the facilities present in each room, and search for rooms that fulfil certain criteria. In order to have fast access to their large database of rooms and buildings, they have decided to hire you to build a room information system that is based on hash maps. You will be modelling the hash maps on the physical structure of campus, with one hash map relating each building’s name to its content hashmap. The content hashmap will relate the room number to a classroom object containing all the relevant features of the room. You must be able to add and remove buildings from the campus, as well as add and remove classrooms from each building, and edit classrooms to reflect changes.</p><p>Additionally, you must implement a search function that will either search a building or the whole campus for classes fulfilling certain criteria. For this assignment, you may use sequential search (however, if the search involves only one building you definitely shouldn’t search the whole campus).</p><p>Finally, as the monkeys in the basement sometimes take a break from using the treadmill power turbine generators, the power occasionally goes out and system must be shut down and then restarted without losing data. You must use Java Serialization to achieve this.</p><p>NOTE: All exceptions explicitly thrown in Required Classes except for IllegalArgumentException are custom exceptions that need to be made by you.</p><h3 id="Required-Classes"><a href="#Required-Classes" class="headerlink" title="Required Classes"></a>Required Classes</h3><h4 id="Classroom"><a href="#Classroom" class="headerlink" title="Classroom"></a>Classroom</h4><p>Write a fully documented class named Classroom that contains four private data fields: boolean hasWhiteboard, boolean hasChalkboard, int numSeats, and String[] AVEquipmentList. This class will be used to represent a classroom within Stony Brook.</p><p>This class must implement the Serializable interface.</p><p>private boolean hasWhiteboard<br>This field is true if the classroom has a whiteboard, false otherwise.<br>private boolean hasChalkboard<br>This field is true if the classroom has a chalkboard, false otherwise.<br>private int numSeats<br>This field holds the number of seats the classroom has.<br>private String[] AVEquipmentList<br>This field holds the names of the AV Equipment that are supported in the room.<br>OPTIONAL: You can use List as the data type, whichever is easier.<br>Getter and Setter methods for the above four member variables.</p><h4 id="Building-or-Building-HashMap"><a href="#Building-or-Building-HashMap" class="headerlink" title="Building or Building HashMap"></a>Building or Building HashMap</h4><p>The database of Classrooms will be stored in a HashMap. Use the room number of the classrooms as the key for the HashMap. In this assignment, you must use the HashMap/HashTable implementation provided by the Java API. You may use inheritance if you wish.</p><p>This class should also implement the Serializable. interface.</p><p>public void addClassroom(int roomNumber, Classroom classroom)<br>This method adds a Classroom into the Building using the specified room number as the key.<br>Throws an IllegalArgumentException if the given roomNumber = null or if the room number is already in the Building.<br>public Classroom getClassroom(int roomNumber)<br>Retrieves the Classroom from the table having the indicated room number. If the requested room number does not exist in the Building, return null.<br>public void removeClassroom(int roomNumber)<br>This method removes a classroom from the Building.<br>Throws an IllegalArgumentException if the given roomNumber = null or if it doesn’t exist in the building.</p><h4 id="Campus-or-Campus-HashMap"><a href="#Campus-or-Campus-HashMap" class="headerlink" title="Campus or Campus HashMap"></a>Campus or Campus HashMap</h4><p>Write a fully-documented class named Campus. The database of Buildings will be stored in a HashMap. Use the name of the Building objects as the key for hashing. In this assignment, like the Building class, you may provide your own implementation for the School class, or you may use the HashTable (or HashMap) implementation provided by the Java API.</p><p>Just as the above classes, this class should implement the Serializable interface.</p><p>public void addBuilding(String buildingName, Building building)<br>This method adds a Building into the Campus using the specified building name as the key.<br>Throws an IllegalArgumentException if the given buildingName = null or if the building name is already in the Campus.<br>public Building getBuilding(String buildingName)<br>Retrieves the Building from the table having the indicated building name. If the requested building name does not exist in the Campus, return null.<br>public void removeBuilding(String buildingName)<br>This method removes a Building from the Campus.<br>Throws an IllegalArgumentException if the given buildingName = null or if the building name is not in the Campus.</p><h4 id="RoomLookup"><a href="#RoomLookup" class="headerlink" title="RoomLookup"></a>RoomLookup</h4><p>This is the driver class that shows the user the menu detailed in UI Required Functions. It must have a public static main(String[] args), but you can add extra methods to help you organize each part of the menu.</p><h4 id="General-Recommendations"><a href="#General-Recommendations" class="headerlink" title="General Recommendations"></a>General Recommendations</h4><p>You might want to implement a toString() method for classes to make debugging and printing easier. You do not have to do this, but it will help you.<br>You can feel free to add any extra methods and variables as you see fit (public and private).</p><h4 id="Serializable-Interface"><a href="#Serializable-Interface" class="headerlink" title="Serializable Interface"></a>Serializable Interface</h4><p>You will also work with the idea of persistence. This means that our program should save all data from session to session. When we terminate a program, normally the data will be lost. We will preserve this data by using Serializable Java API and binary object files. All your classes should simply implement the java.io.Serializable interface.</p><p>Example: (note - class names here intentionally are different than the homework description above)</p><p>Example: A StorageTable class contains information for all Storage objects saved in the electronic database. You would want to preserve this data, so you can load this data the next time you run your program. You would do the following:</p><p>Modify the StorageTable so that it implements the Serializable interface. Also, the Storage class should also make this implementation. No other changes are necessary.<br>In your application that contains the StorageTable, you can include code that will save that class’s data into a file so it can be read in again later. To do this, you need to create an ObjectOutputStream to send the data to, and then use the writeObject method to send the data to the stream, which is stored in the specified file.</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StorageTable storage = <span class="keyword">new</span> <span class="type">StorageTable</span>(<span class="comment">/*Constructor Parameters*/</span>);</span><br><span class="line"><span class="comment">// missing code here adds Storage objects to the table.</span></span><br><span class="line"></span><br><span class="line">FileOutputStream file = <span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">"storage.obj"</span>);</span><br><span class="line">ObjectOutputStream outStream = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(file);</span><br><span class="line"><span class="comment">// the following line will save the object in the file</span></span><br><span class="line">outStream.writeObject(storage);</span><br><span class="line">outStream.close();</span><br></pre></td></tr></table></figure><p>When the same application (or another application) runs again, you can initialize the member using the serialized data saved from step 2 so you don’t have to recreate the object from scratch. To do this, you need to create an ObjectInputStream to read the data from, and then use the readObject method to read the hash from the stream.<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream file = new FileInputStream(<span class="string">"storage.obj"</span>)<span class="comment">;</span></span><br><span class="line">ObjectInputStream inStream = new ObjectInputStream(file)<span class="comment">;</span></span><br><span class="line">StorageTable storage<span class="comment">;</span></span><br><span class="line"><span class="attribute">storage</span> = (StorageTable) inStream.readObject()<span class="comment">;</span></span><br><span class="line">inStream.close()<span class="comment">;</span></span><br><span class="line">// missing code here can use StorageTable constructed previously</span><br></pre></td></tr></table></figure></p><p>Note: If you change any data fields or structure of the serialized class, old saved objects will become incompatible.</p>]]></content>
    
    <summary type="html">
    
      代写资产录入软件，能够对学校Classroom的资产进行管理。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CIT591-Philadelphia-Bike-Share-Data-and-Jeopardy</title>
    <link href="https://tk1307993.coding.me/CIT591-Philadelphia-Bike-Share-Data-and-Jeopardy.html"/>
    <id>https://tk1307993.coding.me/CIT591-Philadelphia-Bike-Share-Data-and-Jeopardy.html</id>
    <published>2020-04-19T09:23:31.000Z</published>
    <updated>2020-04-19T03:26:51.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1-Philadelphia-Bike-Share-Data-and-Jeopardy"><a href="#Part-1-Philadelphia-Bike-Share-Data-and-Jeopardy" class="headerlink" title="Part 1 - Philadelphia Bike Share Data and Jeopardy"></a>Part 1 - Philadelphia Bike Share Data and Jeopardy</h3><p>Analyzing Data from the Internet: Real-world data sets are becoming increasingly available for a large variety of domains. E.g., <a href="http://www.data.gov" target="_blank" rel="noopener">www.data.gov</a> has datasets ranging from education and agriculture to manufacturing and energy. <a href="https://www.opendataphilly.org/" target="_blank" rel="noopener">https://www.opendataphilly.org/</a> provides a lot of datasets for the Philadelphia region.</p><p>For this assignment, we will use the Indego Bike Share Data on bike rentals and trips in Philadelphia. You<br>can download the datasets and read more about what’s available here <a href="https://www.rideindego.com/about/data/" target="_blank" rel="noopener">https://www.rideindego.com/about/data/</a>. In particular, you’ll need to download and use the following two files:</p><ol><li>Trip Data for the third quarter of 2016</li><li>Station Table</li></ol><p>You’ll write a program in Java to read and analyze this information Once you have a basic program that can read in the data files, use it to answer the following questions. Describe in detail the algorithm you used for each question and the answers in your readme.txt file.</p><ol><li>How many Walk-Up trips were there in 2016?</li><li>How many stations that had a Go-Live Date in 2015 are still Active?</li><li>What percentage of trips started in Rittenhouse Square?</li><li>What percentage of trips made by Indego30 riders are round trips?</li><li>What is the ID of the bike that has traveled the most in terms of duration?</li><li>On 8/3/16 at 7:00am, how many bikes were being used?</li><li>Print all the trip information for the longest trip by distance. To make things easier (and not worry about spherical geometry), we’ll assume that the latitude and longitude are points in 2-d space and use Euclidean distance.</li><li>Print the list of trip ids of all trips that involved a station which was the only station to go live on its respective go-live date.</li><li>Wild card - come up with an interesting question. List the question and find the answer to it.</li></ol><p>Software Design: An important part of this homework is designing your classes and methods. Using the “Nouns and Verbs” approach and keeping good design principles in mind, create CRCs. This should be done before you start implementing your code in Java and you need to submit the original CRCs as part of the submission.</p><p>When you start implementing your code, it’s perfectly fine to go back and change the design, if needed.</p><p>You should explain what you changed and why in the readme.txt file.</p><p>Note: For the italicized parts in the above, your code should be able to deal with any similar input (e.g., from a user). This should not be hard coded.</p><h3 id="Part-2-Extra-Credit"><a href="#Part-2-Extra-Credit" class="headerlink" title="Part 2 - Extra Credit"></a>Part 2 - Extra Credit</h3><p>In addition to the questions above, answer the following questions:</p><ol><li>Stations can be located using the longitude and latitude coordinates provided in the dataset. We can define “closeness” as follows: Two stations are considered close to each other if the average difference between their longitudes and latitudes, i.e., (difference longitude + difference latitude) / 2, is less than 0.02 points. Find all pairs of stations that are considered close to each other.</li><li>What is the least popular end station?</li><li>Wild card - come up with an interesting question. List the question and find the answer to it.<br>As before, for the EC part, you cannot have any help from the TAs/instructor.</li></ol><h3 id="Submission-Instructions"><a href="#Submission-Instructions" class="headerlink" title="Submission Instructions"></a>Submission Instructions</h3><p>We recommend submitting the theory part electronically also. However, you can turn in a physical copy at the start of class, if you prefer. Please do not print out the Java source.</p><p>In addition to the theory writeup, you should also submit a text file titled readme.txt. That is, write in plain English and instructions for using your software. You should also include explanations/rationale for why you chose to design your code the way you did and whether you deviated from your original design and why. The readme.txt file is also an opportunity for you to get partial credit when certain requirements of the assignment are not met. Think of the readme as a combination of instructions for the user and a chance for you to get partial credit.</p><p>Please create a folder called YOUR_PENNKEY. Places all your files inside this - theory writeup, the Java files, the CRCs, the readme.txt file, the ec.txt file. Zip up this folder. It will thus be called YOUR_PENNKEY.zip. So, e.g., my homework submission would be swapneel.zip. Please submit this zip file via canvas.</p>]]></content>
    
    <summary type="html">
    
      根据作业提供的Trip data，编写程序分析数据，最后回答关于数据的十几个问题即可。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS201-Information-Retrieval</title>
    <link href="https://tk1307993.coding.me/CS201-Information-Retrieval.html"/>
    <id>https://tk1307993.coding.me/CS201-Information-Retrieval.html</id>
    <published>2020-04-16T09:23:31.000Z</published>
    <updated>2020-04-16T03:19:24.119Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><ul><li>Translate written descriptions of behavior into code.</li><li>Practice representing state in a class.</li><li>Practice interacting with the Map, Set, and List abstractions.</li><li>Test code using unit tests.</li></ul><h3 id="Downloading-and-importing-the-starter-code"><a href="#Downloading-and-importing-the-starter-code" class="headerlink" title="Downloading and importing the starter code"></a>Downloading and importing the starter code</h3><p>As in previous assignments, download and save (but do not decompress) the provided archive file containing the starter code. Then import it into Eclipse in the same way; you should end up with a information-retrieval- project in the “Project Explorer”.</p><h3 id="Search-engine-behavior"><a href="#Search-engine-behavior" class="headerlink" title="Search engine behavior"></a>Search engine behavior</h3><p>For the purposes of this assignment, a search engine is a stateful object that “knows about” a set of documents and supports various queries on those documents and their contents.</p><p>Documents are identified by a unique ID and consist of a sequence of terms. Terms are (always) the lowercase version of words; operations on the search engine and documents are should therefore be case-insensitive. Documents are added one-by-one to the search engine.</p><p>The search engine function as an index. That is, given a term, the search engine can return the set of documents (that it knows about) that contain that term.</p><p>The search engine can also find a list of documents (again, from among the set it knows about) relevant to a given term, ordered from most-relevant to least-relevant. It does so using a specific version of the tf-idf statistic, which sounds intimidating but is actually fairly straightforward to calculate - so long as you have the data structures to support doing so.</p><h3 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do"></a>What to do</h3><p>The SearchEngine needs to keep track of the documents for two things: to do index lookups of terms, returning a set of documents (in indexLookup), and to compute the two components of the tf-idf statistics (in termFrequency and inverseD). You can hold this state with whatever data structures you like, but my suggestions follow.</p><p>I suggest you get addDocument and indexLooku working first. To support the index, a straightforward mapping of terms to DocumentIDs will work. (To be clear: a Map). It turns out you don’t need to create this structure; you can use the one you’ll make to support tf-idf instead, but creating this Map might be a good warmup. In any case, declare the structure(s) as instance variables, create the empty structure(s) you’ll use in the constructor, fill it/them in addDocument, and examine it/them in indexLookup. When turning the document itself into terms, use the same approach as in Assignment 05: String.split using “\W+“, and remember toLowercase the result.</p><p>termFrequency requires that you compute the number of times a given term appears in a given document. This suggests you should have a data structure that keeps track of the count of terms per document: a Map. But this frequency-counting structure is per-document; you need to keep track of each document’s counts. So overall, I suggest a Map. The outer map goes from DocumentIds to the inner frequency-counting structure. You’ll have to update addDocument to populate and update these structures. Be sure to get clear in your head the different times you’ll use get, put, containsKey, and getOrDefault.</p><p>Once you have the structure described above, inverseDocumentFrequenc is fairly straightforward. Be sure to read the javadoc comment above the method for the exact equation the tests are expecting. Use Math.log to compute the logarithm (not Math.log10 or Math.log2).</p><p>Use these two methods to compute a given document-term pair’s tfIdf.</p><p>Finally, implement relevanceLookup, which returns a list of all documents containing a given term, sorted from largest tf-idf to smallest. You’ll probably need to implement TfIdfComparator., but note that no tests test the comparator directly, so if you have another method in mind to sort the list, go ahead. If you do implement it, make sure it returns a value that will result in the list being sorted largest-to-smallest, and mind the tie-breaker requirement.</p>]]></content>
    
    <summary type="html">
    
      用TF-IDF算法，结合数据结构的Map, Set和List，代写一个信息检索系统。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CSE214-Decision-Tree-Classifier</title>
    <link href="https://tk1307993.coding.me/CSE214-Decision-Tree-Classifier.html"/>
    <id>https://tk1307993.coding.me/CSE214-Decision-Tree-Classifier.html</id>
    <published>2020-04-10T09:23:31.000Z</published>
    <updated>2020-04-10T09:51:43.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>In this homework you will be implementing a decision tree classifier. A decision tree classifier is used in rule-based machine learning to classify data based on a predefined set of attributes. In our case, we will be classifying text based on the terms it contains (or does not contain). Decision trees can be used for real-life applications ranging from answering FAQs to classifying a piece of data.<br>In order to be able to make decisions using the decision tree classifier, we must first build the decision tree. Your program will be able to import existing decision trees from text files, and edit them in the program. Additionally, it will have to read input text and classify it based on the decision tree, printing the decisions that were made in order to reach the final verdict.<br>NOTE: All exceptions explicitly thrown in Required Classes except for IllegalArgumentException are custom exceptions that need to be made by you.</p><h3 id="Required-Classes"><a href="#Required-Classes" class="headerlink" title="Required Classes"></a>Required Classes</h3><h4 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h4><p>private String[] keywords<br>This field holds the message only if it is a leaf, otherwise this is a list of words to trigger going down this path.<br>These keywords are joined as if OR’ed together:<br>Example: {“Fat”; “Orange”}: if text contains Fat or text contains Orange, then go down “yes” path, otherwise “no” path.<br>private TreeNode left<br>private TreeNode right<br>These two fields hold the left and right subtrees respectively.<br>You should have getters/setters for the three fields above.<br>public Boolean isLeaf():<br>function that returns true if the node is a leaf and its left and right subtrees are null, otherwise false.<br>Preconditions: This node is initialized<br>Postconditions: The tree remains unchanged<br>TreeNavigator<br>private TreeNode root<br>A reference to the root TreeNode of this tree.<br>private TreeNode cursor<br>A reference to the currently selected TreeNode in the tree.<br>The cursor should select the root node by default.<br>public static TreeNavigator buildTree(String treeFile)<br>Reads in a text file describing a TreeNavigator. See sample input for an example.<br>Preconditions: treeFile is a non-null, non-empty String that points to a file that exists that is readable and valid.<br>Returns a new TreeNavigator generated by the passed in text file.<br>public String classify(String text)<br>Classifies the text with the given tree and returns the classification as a String.<br>public String getPath()<br>Gets the current path of the cursor. For example, if cursor referred to a TreeNode at position “Garfield” in the example below, this method should return “NOT red, NOT coyote,wolf, IS cat, IS orange, DECISION: Garfield”<br>Note the comma above: This is how you can show multiple keywords.<br>public void resetCursor()<br>Resets the cursor to the root node.<br>Postconditions: Cursor references root node. Cursor contents are printed.<br>public void cursorLeft()<br>Moves cursor to its left child.<br>Postconditions: Cursor contents are printed.<br>public void cursorRight()<br>Moves cursor to its right child.<br>Postconditions: Cursor contents are printed.<br>public TreeNode getCursor()<br>This gets the Cursor so you can modify the keywords or the Left or the Right child links.<br>Precondition: Cursor is not null (return null if it is null)<br>Postcondition: Cursor is returned to the caller.<br>public void editCursor(String text)<br>Sets the keywords for the current cursor.</p><h4 id="DecisionTreeClassifier-Driver"><a href="#DecisionTreeClassifier-Driver" class="headerlink" title="DecisionTreeClassifier (Driver)"></a>DecisionTreeClassifier (Driver)</h4><p>public static void main (String args[])<br>This will drive the program and present a menu like shown below.<br>You can and should write helper functions for each menu option if not already present in the TreeNavigator.<br>General Recommendations<br>You might want to implement a toString() method for classes to make debugging and printing easier. You do not have to do this, but it will help you.<br>You can feel free to add any extra methods and variables as you see fit (public and private).</p><p>Text file format<br>The input file will be formatted like the following example:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>;;Red;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span>;Coyote,Wolf;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span>;Cat;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-0</span>;snoopy;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span>;fat,orange;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-0</span>;tom;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span>;garfield;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span>;big,bad,evil,mean;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-0</span>;Wolf Blitzer;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span>;ACME;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span><span class="number">-0</span>;Big Bad Wolf;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-0</span><span class="number">-1</span><span class="number">-1</span><span class="number">-1</span>;Wile E. Coyote;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span>;Dog;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span>;plumber;nonleaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span><span class="number">-0</span>;Little Red Riding Hood;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-0</span><span class="number">-1</span>;Mario;leaf</span><br><span class="line"><span class="number">0</span><span class="number">-1</span><span class="number">-1</span>;Clifford;leaf</span><br></pre></td></tr></table></figure></p><h3 id="UI-Required-Functions"><a href="#UI-Required-Functions" class="headerlink" title="UI Required Functions"></a>UI Required Functions</h3><p>Menu:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Classify (<span class="name">Sentence</span>)</span><br><span class="line">Path (<span class="name">Sentence</span>)</span><br><span class="line">Import (<span class="name">file</span>)</span><br><span class="line">Cursor To Root (<span class="name">print</span> cursor)</span><br><span class="line">Cursor Left (<span class="name">print</span> cursor)</span><br><span class="line">Cursor right (<span class="name">print</span> cursor)</span><br><span class="line">Edit Cursor (<span class="name">print</span> cursor)</span><br><span class="line">Add Left Child (<span class="name">doesn</span>’<span class="literal">t</span> move cursor)</span><br><span class="line">Add Right Child (<span class="name">doesn</span>’<span class="literal">t</span> move cursor)</span><br></pre></td></tr></table></figure></p><h3 id="Sample-IO"><a href="#Sample-IO" class="headerlink" title="Sample IO"></a>Sample IO</h3><h4 id="Example-1-Working-with-the-following-tree"><a href="#Example-1-Working-with-the-following-tree" class="headerlink" title="Example 1 - Working with the following tree:"></a>Example 1 - Working with the following tree:</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the DecisionTree Classifier</span><br><span class="line">Menu:</span><br><span class="line">        I)Import a tree from a file</span><br><span class="line">        E)Edit current tree</span><br><span class="line">        C)Classify a Description</span><br><span class="line">        P)<span class="keyword">Show</span> decision <span class="keyword">path</span> <span class="keyword">for</span> a Description</span><br><span class="line">        Q) Quit.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: E</span><br><span class="line"><span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: tree <span class="keyword">is</span> <span class="keyword">empty</span> Root node <span class="keyword">is</span> <span class="keyword">initialized</span> <span class="keyword">with</span> this value.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:</span><br><span class="line">        E)Edit Keywords</span><br><span class="line">        C)<span class="keyword">Add</span> Children Children <span class="keyword">are</span> automatically <span class="keyword">leaves</span>, can be edited later.</span><br><span class="line">        D)<span class="keyword">Delete</span> Children, <span class="keyword">and</span> Make Leaf Ask <span class="keyword">user</span> <span class="keyword">for</span> <span class="keyword">new</span> <span class="keyword">value</span> <span class="keyword">for</span> keyword(<span class="keyword">only</span> one, <span class="keyword">no</span> commas).</span><br><span class="line">        N)<span class="keyword">Cursor</span> <span class="keyword">to</span> <span class="keyword">No</span> <span class="keyword">Child</span></span><br><span class="line">        Y)<span class="keyword">Cursor</span> <span class="keyword">to</span> Yes <span class="keyword">Child</span></span><br><span class="line">        R)<span class="keyword">Cursor</span> <span class="keyword">to</span> Root</span><br><span class="line">        P)<span class="keyword">Cursor</span> <span class="keyword">to</span> <span class="keyword">Parent</span> Extra credit. May <span class="keyword">not</span> <span class="keyword">use</span> <span class="keyword">parent</span> <span class="keyword">reference</span> <span class="keyword">for</span> extra credit.</span><br><span class="line">M)<span class="keyword">Main</span> Menu</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:smelly,dim</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: smelly, dim.</span><br><span class="line">//Edit menu <span class="keyword">not</span> shown again <span class="keyword">in</span> <span class="keyword">sample</span> IO</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: C</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: tempNo</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: tempYes</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'tempYes'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'tempNo'</span></span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: Y</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> leaf, message <span class="keyword">is</span> <span class="string">'tempYes'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: A</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: Javits</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: <span class="keyword">Old</span> CS</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'Old CS'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'Javits'</span></span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:asbestos,broken</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: smelly, dim.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:R</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: smelly, dim</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:N</span><br><span class="line"><span class="keyword">Cursor</span> moved. <span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> leaf, message <span class="keyword">is</span> <span class="string">'tempNo'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>:E</span><br><span class="line">Please enter keywords <span class="keyword">for</span> this node, separated <span class="keyword">by</span> a comma:sick,food,bad,activities</span><br><span class="line">Keywords <span class="keyword">updated</span> <span class="keyword">to</span>: sick,food,bad,activities.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: A</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the <span class="keyword">no</span> leaf: <span class="keyword">New</span> CS</span><br><span class="line">Please enter terminal <span class="built_in">text</span> <span class="keyword">for</span> the yes leaf: SAC</span><br><span class="line">Children <span class="keyword">are</span>: yes - <span class="string">'New CS'</span> <span class="keyword">and</span> <span class="keyword">no</span> - <span class="string">'Javits'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: M</span><br><span class="line">//<span class="keyword">Main</span> menu <span class="keyword">not</span> shown <span class="keyword">in</span> <span class="keyword">sample</span></span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: C</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: <span class="keyword">Where</span> can I <span class="keyword">go</span> <span class="keyword">if</span> I want <span class="keyword">to</span> sit <span class="keyword">in</span> a broken chair <span class="keyword">in</span> a dim room?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: <span class="keyword">Old</span> CS</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: P</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: I would <span class="keyword">like</span> <span class="keyword">to</span> <span class="keyword">get</span> sick <span class="keyword">before</span> my <span class="keyword">test</span> tomorrow. <span class="keyword">Where</span> should I eat <span class="keyword">to</span> increase my chances?</span><br><span class="line">Decision <span class="keyword">path</span>:<span class="keyword">NOT</span> smelly, dim, <span class="keyword">IS</span> sick, DECISION: SAC</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: E</span><br><span class="line"><span class="keyword">Cursor</span> <span class="keyword">is</span> <span class="keyword">at</span> root.</span><br><span class="line"><span class="keyword">Current</span> node keywords: smelly, dim</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: D</span><br><span class="line">Please enter a terminal <span class="built_in">text</span> <span class="keyword">for</span> this node: Chuck Norris</span><br><span class="line"><span class="keyword">Current</span> node <span class="keyword">is</span> leaf. <span class="built_in">Text</span> <span class="keyword">is</span>: <span class="string">'Chuck Norris'</span>.</span><br><span class="line">Please <span class="keyword">select</span> an Edit <span class="keyword">option</span>: M</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: C</span><br><span class="line">Please enter <span class="keyword">some</span> <span class="built_in">text</span>: Who can <span class="keyword">kill</span> two stones <span class="keyword">with</span> one bird?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Chuck Norris</span><br><span class="line">Please enter a menu <span class="keyword">option</span>: Q</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h4 id="Example-2-Working-with-the-following-tree"><a href="#Example-2-Working-with-the-following-tree" class="headerlink" title="Example 2 - Working with the following tree:"></a>Example 2 - Working with the following tree:</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the DecisionTree Classifier</span><br><span class="line">Menu:</span><br><span class="line">        I)Import a tree <span class="keyword">from</span> a file</span><br><span class="line">        E)Edit current tree</span><br><span class="line">        C)Classify a Description</span><br><span class="line">        P)Show decision path <span class="keyword">for</span> a Description</span><br><span class="line">        Q)Quit.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>: I</span><br><span class="line">Please enter a filename: sampletree.txt</span><br><span class="line">Tree Loaded.</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:P</span><br><span class="line">Please enter some <span class="keyword">text</span>:This Character <span class="keyword">is</span> an orange cat who likes lasagna.</span><br><span class="line">Decision path: <span class="keyword">NOT</span> red, <span class="keyword">NOT</span> coyote,wolf, <span class="keyword">IS</span> cat, <span class="keyword">IS</span> orange, DECISION: Garfield</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:C</span><br><span class="line">Please enter some <span class="keyword">text</span>:I<span class="comment">'m looking for a plumber, but I insist that he wears a red hat, so I know how to tell  him apart from his brother.</span></span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Mario</span><br><span class="line">Please <span class="keyword">select</span> an <span class="keyword">option</span>:C</span><br><span class="line">Please enter some <span class="keyword">text</span>: Who <span class="keyword">is</span> the unlucky coyote who always tries <span class="keyword">to</span> use ACME products <span class="keyword">to</span> <span class="keyword">catch</span> a bird?</span><br><span class="line">Your request <span class="keyword">is</span> classified <span class="keyword">as</span>: Wile E. Coyote</span><br><span class="line">Please enter a menu <span class="keyword">option</span>: Q</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h3 id="Extra-Credit-GUI-OR-Android-–-NOT-BOTH-–-Requirements"><a href="#Extra-Credit-GUI-OR-Android-–-NOT-BOTH-–-Requirements" class="headerlink" title="Extra Credit: GUI OR Android – NOT BOTH – Requirements"></a>Extra Credit: GUI OR Android – NOT BOTH – Requirements</h3><p>You must make a nice visualization of all the components. For example this can include a graphical representation of the tree and what each node contains, along with connecting lines to each node.<br>All the menu options should be buttons, and all inputs should be graphical (ie: in a TextField in JavaFX) for any extra credit.</p><h3 id="Extra-Credit-Child-to-Parent-can-be-done-with-or-without-a-GUI-for-credit"><a href="#Extra-Credit-Child-to-Parent-can-be-done-with-or-without-a-GUI-for-credit" class="headerlink" title="Extra Credit: Child to Parent (can be done with or without a GUI for credit)"></a>Extra Credit: Child to Parent (can be done with or without a GUI for credit)</h3><p>Implement a Cursor to Parent function as in the sample WITHOUT putting a parent reference in the TreeNode class.</p>]]></content>
    
    <summary type="html">
    
      练习ADT中Tree的用法，代写一个决策树分类器的应用程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>COMP2370-Midpoint-Pivot-Quicksort</title>
    <link href="https://tk1307993.coding.me/COMP2370-Midpoint-Pivot-Quicksort.html"/>
    <id>https://tk1307993.coding.me/COMP2370-Midpoint-Pivot-Quicksort.html</id>
    <published>2020-04-06T05:22:17.000Z</published>
    <updated>2020-04-06T00:27:43.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Non-Reversing-Permutation"><a href="#Non-Reversing-Permutation" class="headerlink" title="Non-Reversing Permutation"></a>Non-Reversing Permutation</h3><p>The pseudocode in the textbook for RANDOMIZE-IN-PLACE (p. 126) generates a permutation of an array such that any ordering is equally likely. Write pseudocode for PERMUTE-WITHOUT-REVERSAL, which should generate any ordering with equal likelihood except for the exact reverse of the original ordering. In other words, if the original array is A = {1, 5, 3, 2, 4}, then any permutation should be possible with equal likelihood except for {4, 2, 3, 5, 1}, which should not be a possible result. Your algorithm should not use any additional storage beyond the original array and a fixed number of temporary variables (no temporary arrays). Hint: it may help to think about how to correctly implement PERMUTE-WITHOUT-IDENTITY from problem 5.3-2 in the textbook (p. 128), and think about how you might use that code as part of your implementation of PERMUTE-WITHOUT-REVERSAL.</p><h3 id="Inversions-and-Insertion-Sort"><a href="#Inversions-and-Insertion-Sort" class="headerlink" title="Inversions and Insertion-Sort"></a>Inversions and Insertion-Sort</h3><p>An array A is said to have an inversion at (i, j). Exercise 5.2-5 in the text (p. 122) asks for the expected number of inversions in an array A if the elements of the array A are a uniform random permutation. The solution of exercise 5.2-5 is provided.</p><p>Let A be an array of integers with no repeated values. The rank of an element of A is the index at which the value appears in the sorted permutation of A. For example, if A = &lt;17, 6, 10, 9&gt;, then A has inversions at (1, 2), (1, 3), (1, 4), and (3, 4), for a total of 4 inversions. The ranks of the elements 17, 6, 10, and 9 are 4, 1, 3, and 2, respectively. Suppose all permutations of the ranks of values in A are equally likely.</p><p>Use the result of Exercise 5.2-5 to give a Θ bound on the average case running time of INSERTION-SORT (p. 18) on A (for the general case, not just the example above). Be sure to describe the relationship between the number of inversions in A and the running time of INSERTION-SORT on A.</p><h3 id="Sorting-Probabilities"><a href="#Sorting-Probabilities" class="headerlink" title="Sorting Probabilities"></a>Sorting Probabilities</h3><p>For an array A (using 1-based indexing) containing the integers 1 through n in random order, in regard to sorting the integers into ascending order, answer the following (give an explanation for each answer):</p><ul><li>What is the probability before sorting that A[i] = i for all 1 ≤ i ≤ n?</li><li>For any given j such that 1 ≤ j ≤ n, what is the probability before sorting that A[j] = j?</li><li>What is the probability before sorting that A[k] ≠ k for all 1 ≤ k ≤ n?</li><li>For a given value m, where 1 ≤ m ≤ n, what is the probability before sorting that A[i] = i for all 1 ≤ i ≤ m?</li><li>If Q UICKSORT (p. 171) is used to sort A, what is the probability that the top-level call P ARTITION (A, 1, n) will result in a return value of either 1 or n?</li></ul><h3 id="Midpoint-Pivot-Quicksort"><a href="#Midpoint-Pivot-Quicksort" class="headerlink" title="Midpoint-Pivot Quicksort"></a>Midpoint-Pivot Quicksort</h3><p>Consider the pseudocode below for a version of quicksort which always picks the middle item to use as the pivot:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MID-QUICKSORT (A, <span class="selector-tag">p</span>, r)</span><br><span class="line">  <span class="keyword">if</span> <span class="selector-tag">p</span> &lt; r</span><br><span class="line">    mid = [(<span class="selector-tag">p</span> + r)/<span class="number">2</span>]</span><br><span class="line">    swap A[mid] with A[r] <span class="comment">// move middle element to pivot</span></span><br><span class="line">    <span class="selector-tag">q</span> = P ARTITION (A, <span class="selector-tag">p</span>, r)</span><br><span class="line">    MID-QUICKSORT (A, <span class="selector-tag">p</span>, <span class="selector-tag">q</span> - <span class="number">1</span>)</span><br><span class="line">    MID-QUICKSORT (A, <span class="selector-tag">q</span> + <span class="number">1</span>, r)</span><br></pre></td></tr></table></figure><p>This code uses the version of P ARTITION on p. 171 of the textbook.</p><p>Find a permutation of the five numbers 11, 22, 33, 44, 55 which generates worst-case behavior when given as input to MID-QUICKSORT; that is, a sequence such that every partition result will have 0 elements in either the low or high range. Show the input, output, and q value for every call to P ARTITION using your worst-case input.</p>]]></content>
    
    <summary type="html">
    
      代写四个算法小程序，不需要写具体编程代码，使用伪代码即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS1210-Educational-Data</title>
    <link href="https://tk1307993.coding.me/CS1210-Educational-Data.html"/>
    <id>https://tk1307993.coding.me/CS1210-Educational-Data.html</id>
    <published>2020-04-03T05:22:17.000Z</published>
    <updated>2020-04-03T05:25:10.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>For this two-part project you will be working with a medium-size dataset (about 800K records) of education statistical indicators obtained from the World Bank. The dataset consists of two file:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f308b71c<span class="number">-00</span>be<span class="number">-4519</span><span class="number">-9</span>b0c<span class="number">-0</span>d3100b75092_Data.csv</span><br><span class="line">f308b71c<span class="number">-00</span>be<span class="number">-4519</span><span class="number">-9</span>b0c<span class="number">-0</span>d3100b75092_Definition and Source.csv</span><br></pre></td></tr></table></figure></p><p>both in csv or comma-separated value format. The first file contains the data, with each record having five fields, described in the first line of this file as:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country,CountryCode,SeriesCode,<span class="number">2015</span> <span class="string">[YR2015]</span></span><br></pre></td></tr></table></figure></p><p>The next 762,000 lines contain records of this form, while the last five lines look like:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Data from database:</span> Education Statistics - All Indicators,,,,</span><br><span class="line"><span class="symbol">Last Updated:</span> <span class="number">10</span> / <span class="number">04</span> / <span class="number">2016</span>,,,,</span><br></pre></td></tr></table></figure><p>and can safely be ignored (these lines are either blank - hence the rows of commas - or contain data provenance information).<br>The second file contains information about the data contained in the first file. Each line is a record consisting of four fields, described in the first line of this file as:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code, Indicator Name, <span class="keyword">Long</span> definition, <span class="keyword">Source</span></span><br></pre></td></tr></table></figure></p><p>Each of these lines can be quite long, especially (and not surprisingly) the field called “Long definition.” Using the elipsis (“…”) to shorten the line, a sample field (the 10th line of the file to be precise) looks like:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIS<span class="selector-class">.NERA</span>.<span class="number">3</span>, <span class="string">"Adjusted..."</span>, <span class="string">"Total..."</span>, UNESCO Institute <span class="keyword">for</span> Statistics</span><br></pre></td></tr></table></figure></p><p>Aside from the textual descriptions, the most interesting field here is the first, which by design contains interesting information about the type of data represented, and which is also appears as the third field in the data file. The key idea is that records in the data file that share the same “Series Code” (or simply “Code” as its called in the definitions file file) are by definition directly comparable. So, for example, if I am interested in the adjusted net enrollment rate for females in primary school (SE.PRM.TENR.FE) across different countries or populations, I could compare all the records from the data file with this “Series Code” (there are 254 of these).</p><h3 id="Reading-Data"><a href="#Reading-Data" class="headerlink" title="Reading Data"></a>Reading Data</h3><p>Your first task is to read these data into Python and construct an appropriate representation of these records. You will write two functions to achieve this end.<br>First, write a function</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defreadDefinitions</span><span class="params">(filename)</span></span>:</span><br></pre></td></tr></table></figure><p>which opens file filename of the second type described above, that is:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code, Indicator Name, Long definition, Source</span><br><span class="line"><span class="keyword">and</span> returns <span class="keyword">a</span> dictionary D <span class="keyword">with</span> entries <span class="keyword">of</span> <span class="keyword">the</span> form:</span><br></pre></td></tr></table></figure></p><p>Code: [ Indicator Name, Long definition, Source ]<br>Reading csv files can be tricky, because it is quite possible that some fields may contain explicit commas embedded in a single field (see, e.g., the “Long definition” field). In such cases, these extraneous commas are protected by enclosing the field in quotes. For example, consider the following line taken from a hypothetical csv file representing Olympic gold medalists:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Fencing</span>, <span class="string">"Garozzo, Daniele"</span>, <span class="keyword">ITA, </span><span class="number">2016</span></span><br></pre></td></tr></table></figure></p><p>Here, the correct interpretation is a single record (or line) containing four fields (and not five) because the comma in the gold medalist’s name is not semantically equivalent to the other three commas in the line. Fortunately, because this is such a common issue, Python provides a library for reading csv files while honoring the semantics of commas embedded in quoted fields. To use the library, you must first:<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br></pre></td></tr></table></figure></p><p>You will need to read up on how to use the csv library: more information can be found here:<br><a href="https://docs.python.org/3.5/library/csv.html" target="_blank" rel="noopener">https://docs.python.org/3.5/library/csv.html</a><br>Important: do not attempt to split() the line, as I can guarantee this will fail. To be successful, you will need to use the csv library. Also, be wary of the first line in the csv file, which is a “header” and should not be included in the dictionary as data.<br>The second function you should write:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defreadData</span><span class="params">(filename)</span></span>:</span><br></pre></td></tr></table></figure><p>should open a file filename of the first type above, that is:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country, CountryCode, SeriesCode, <span class="number">2015</span> <span class="string">[YR2015]</span></span><br></pre></td></tr></table></figure></p><p>and return a tuple of two dictionaries, C and V . The first dictionary, C, should have entries of the form:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Country</span> <span class="meta">Code</span>: Country</span><br></pre></td></tr></table></figure></p><p>and therefore should look like, e.g.,<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'USA'</span>: <span class="string">'United States'</span>, <span class="string">'ITA'</span>: <span class="string">'Italy'</span>, <span class="string">'PRT'</span>: <span class="string">'Portugal'</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>while the second dictionary, V , in the tuple should have entries of the form:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Series</span> <span class="meta">Code</span>: &#123;Country <span class="meta">Code</span>: <span class="number">2015</span> [YR2015], ...&#125;</span><br></pre></td></tr></table></figure></p><p>and thus look like, e.g.,<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'UIS.LR.AG15T99.GPI'</span>: &#123;<span class="string">'ARE'</span>: <span class="string">'1.02945005893707'</span>, ...&#125;, ...&#125;</span><br></pre></td></tr></table></figure></p><p>Again, be wary of the fact that the first line in this csv file is also a “header” and should not be include in the dictionary as data, but nor should the last five lines of this file, which represent summary information and not real data.<br>In constructing the readData() function, it is important not to include entries where the corresponding value is missing (missing values in this data file are indicated by a string, ‘..’); there will be many fewer values than the 762000 rows in the data file might imply. To get to the heart of the matter, you will write a third function:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defmakeProfiles</span><span class="params">(C, V)</span></span>:</span><br></pre></td></tr></table></figure><p>which will return a dictionary, P, indexed by country code with values consisting of the number of datapoints present in V for that particular country. Thus part of P produced by your first implementation of makeProfiles() might look like:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'MAR'</span>: <span class="number">307</span>, <span class="string">'IBT'</span>: <span class="number">0</span>, <span class="string">'WSM'</span>: <span class="number">293</span>, <span class="string">'URY'</span>: <span class="number">269</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>Indicating that there is no data about ‘IBT’ present in this dataset. You will note that ‘IBT’ is defined in C as ‘IDA &amp; IBRD total’ rather than some country name; IDA and IBRD stand for International Development Association and International Bank for Reconstruction and Development, respectively, two branches of the World Bank from which these data were obtained. Given that no data is provided, your complete version of makeProfiles() should alter C to remove the entry for IBT and any other similar code that has no data associated with it. Thus the value of P produced by your final version of makeProfiles() might look like:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'SMR'</span>: <span class="number">14</span>, <span class="string">'UMC'</span>: <span class="number">28</span>, <span class="string">'ARG'</span>: <span class="number">263</span>, ...&#125;</span><br></pre></td></tr></table></figure></p><p>should not contain any entries with 0 values, and should also modify C to remove those entries. If your code is like mine, final versions of both P and C should contain 241 entries.<br>Finally, you will implement a plotting function:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">defplotProfile</span><span class="params">(P)</span></span>:</span><br></pre></td></tr></table></figure><p>that will reproduce the figure shown here below.<br>Note how all of the country codes are arranged alphabetically along the x axis, with the y values corresponding to the number of datapoints for that particular country code. You will need to study the matplotlib pyplot documentation:<br><a href="http://matplotlib.org/api/pyplot_api.html" target="_blank" rel="noopener">http://matplotlib.org/api/pyplot_api.html</a><br>to learn how to make your code work.<br>Once this code is complete, we’ll turn our attention to a more interesting analysis of the data.</p>]]></content>
    
    <summary type="html">
    
      练习使用Python处理数据，以及matplot库的使用。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CSCI4150-File-System-Server</title>
    <link href="https://tk1307993.coding.me/CSCI4150-File-System-Server.html"/>
    <id>https://tk1307993.coding.me/CSCI4150-File-System-Server.html</id>
    <published>2020-03-28T02:39:31.000Z</published>
    <updated>2020-03-28T02:42:06.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RequirementRequirement"><a href="#RequirementRequirement" class="headerlink" title="RequirementRequirement"></a>RequirementRequirement</h3><p>This project is intended to integrate many aspects of OS design and implementation, from scheduling, to synchronization, to memory management, and file systems. You are to implement this in the xv6 OS (I’ll provide a repo link via Piazza). You will implement microkernel services on top of xv6 which is a monolithic OS! This is a large and hard project and is scoped around three team members. If you choose a smaller team, you’re still responsible for the entire project, so I suggest you form your team soon. The most important thing you can do to ensure you finish on time is to ​start early. Like now. To the keyboard!</p><h3 id="Final-goal-OS-Service-to-do-File-system-Checkpoint-Restore"><a href="#Final-goal-OS-Service-to-do-File-system-Checkpoint-Restore" class="headerlink" title="Final goal: OS Service to do File-system Checkpoint-Restore"></a>Final goal: OS Service to do File-system Checkpoint-Restore</h3><p>The final goal of the project is to implement a File-System Server (FSS) – implemented as a normal process – that communicates with the other processes in the system (called “clients), receiving requests for file system services (e.g. similar to open, read, write, close, mkdir, unlink), and it will make those calls on behalf of the requesting process. However, it will also be smart enough to enable the “undo” of any changes made to the file system by those processes. It will do this by saving the contents of files and directories to a “checkpoint/“ subdirectory when modifications are made. To restore this checkpoint, a simple program can simply copy everything incheckpoint/into the normal file system. The communication with the FSS is through shared memory regions coordinated with mutexes and condition variables (which xv6 does not already provide).</p><h3 id="Specification-and-Implementation-Plan"><a href="#Specification-and-Implementation-Plan" class="headerlink" title="Specification and Implementation Plan"></a>Specification and Implementation Plan</h3><p>There are three main modules to this project.</p><ol><li><p>The FSS which uses the normal kernel API to provide access to the file-system, and also to perform the operations to save files/directories when they are modified for checkpointing. This requires zero kernel programming.</p></li><li><p>The shared memory support between the FSS, and the processes that are using the FSS’s checkpointing support. This shared memory region is used to pass both the request being made (i.e. which type of call is it, read, open, etc…), and the corresponding data that is required for that call (the path and flags for open, the buffer and its length for read, etc…). This will require kernel hacking to make a shared memory region between the client and the FSS.</p></li><li><p>The synchronization code necessary to provide synchronization on that shared buffer. This will include both mutexes, and the ability to block waiting for an event (i.e. a new client request) – a function normally provided by condition variables. This will require kernel hacking to implement mutexes for user-level, and to add logic for condition variables. The FSS process should always execute with high priority as it is providing a service to other processes in the system.</p></li></ol><p>There are varying levels of support for each of these three components, and you should be able to develop each relatively independently, so if one person does not meet their commitment, the others should be able to still make progress. Level 1 is intended to be very basic functionality. Leveling up from there strengthens your project. Only a project at project level 5 will receive full credit. Each level assumes the functionality from the previous levels (i.e. you can’t get level 2 without achieving level 1).</p><p>A note on group work and collaboration: I designed these modules to be independent, but that does not mean that they are of equal difficulty. Do not plan on simply assigning one to each team member, and when one of the modules is complete assume that team member is “done”. After a module is done, you must help the other members on the other modules. Each team member must stay up-to-date with each other teammate. You should use github to coordinate your code modifications. In fact, I highly​ suggest that once each of the implementations get to Level 1, that you start integrating them together. Once integrated, you can keep leveling up in each module.</p><h3 id="Module-1-File-System-Server"><a href="#Module-1-File-System-Server" class="headerlink" title="Module #1: File-System Server"></a>Module #1: File-System Server</h3><p>The FSS uses the normal kernel API and is a normal process. It uses IPC to talk to clients. Those clients make requests to it to access the file system on their behalf. This is not very useful on its own, but the FSS is smart because it provides a checkpoint and restore functionality. This means that when the FSS starts, it begins recording all files and directories that are modified by clients. It will record these files/directories in the /checkpoint/ directory. So for example, if /hw.txt exists, and you wrote a program to write to that file (via IPC with the FSS), then the FSS would copy the /hw.txt file to /checkpoint/hw.txt, and then perform the write on the client’s behalf. If you write a program to remove a directory, /foo/, then the FSS would add /checkpoint/foo/ before removing the directory for the client. A separate program called restore can be executed to restore all files and directories in the /checkpoint/ directory into their original location. This will undo all edits made in the mean-time. You do not have to track files and directories that are created and remove them upon restore. This module requires no kernel programming.</p><p>You’ll first need to understand how the client and the FSS communicate via IPC. Each of the file-system system calls need a corresponding FSS operation, prepended with fss_. The client will call these operations instead of the normal system calls. Thus, you will need to provide your implementations for fss_read, fss_write, fss_open, fss_close, fss_mkdir, fss_unlink. Note that open and mkdir are used to create files and directories, respectively, and unlink isused to remove files and directories. These functions will be used to pass through IPC to the FSS, which function is being performed (e.g. you could pass it as a string), and the arguments being passed to the function. For example, you could define a structure:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fss_request</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> operation[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> arg;</span><br><span class="line"><span class="keyword">char</span> data[<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Where the operation field contains the operation (“mkdir”, “close”, etc…), arg contains any numerical argument passed to the function, and data contains any actual data that is meant to be passed. Once you fill out this structure, you can pass it over IPC to the FSS, and it can read the structure and convert the request into its own logic for making real file-system system calls to the kernel. It is cleaner to use an enumerated type for the operation.</p><p>A difficult part of this arrangement is that the FSS must return the return value from the kernel back to the client, and in the case of read, we must return the data that was read. So you’ll likely want a fss_response structure that holds that response as well (e.g. an couple of ints, and a array for the data). It can send this structure via IPC back to the client that made the request</p><h3 id="Module-2-Shared-Memory"><a href="#Module-2-Shared-Memory" class="headerlink" title="Module #2: Shared Memory"></a>Module #2: Shared Memory</h3><p>Shared memory is often used for IPC between processes. It is more efficient than message passing (e.g. pipes) as you can often have fewer memcpy operations (e.g. zero or one vs. two). This module will add shared memory to your project. Xv6 does not support shared memory, so this will require understanding the xv6 mechanisms for mapping memory into processes, and how that interacts with calls to sbrk (extending the amount of memory accessible by a process), and fork/exec/exit. </p><h3 id="Module-3-Synchronization-and-Scheduling"><a href="#Module-3-Synchronization-and-Scheduling" class="headerlink" title="Module #3: Synchronization and Scheduling"></a>Module #3: Synchronization and Scheduling</h3><p>Module 2 provides shared memory between processes. Now that we have shared memory, we must synchronize access to it! We want to provide a means for passing requests to the FSS, and for synchronizing the return value being passed to the client. Xv6 does not provide any memory sharing between user-level processes, so you’re job is to implement a set of mutex system calls, and to enable processes to block waiting for requests/responses, you’ll also provide condition variable system calls. </p><h3 id="Overall-Project"><a href="#Overall-Project" class="headerlink" title="Overall Project"></a>Overall Project</h3><p>The levels for the overall project are:</p><ul><li>Level 0: Level 1 in one module.</li><li>Level 1: Level 1 at least two modules.</li><li>Level 2: Level 1 in three modules, and level 2 in at least two. Two of the modules must be integrated together.</li><li>Level 3: All three modules must be integrated together.</li><li>Level 4: Highest level - 1 in each module.</li><li>Level 5: Highest level in all modules.</li></ul>]]></content>
    
    <summary type="html">
    
      代写大型的OS作业，实现一个文件系统服务。全方面考察调度、同步、内存管理以及文件系统方面的知识。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Operating System" scheme="https://tk1307993.coding.me/tags/Operating-System/"/>
    
      <category term="File System" scheme="https://tk1307993.coding.me/tags/File-System/"/>
    
  </entry>
  
  <entry>
    <title>CSCA08-UnitTests</title>
    <link href="https://tk1307993.coding.me/CSCA08-UnitTests.html"/>
    <id>https://tk1307993.coding.me/CSCA08-UnitTests.html</id>
    <published>2020-03-25T01:39:39.000Z</published>
    <updated>2020-03-25T01:40:58.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In our final exercise of the term, we’re going to be practicing writing UnitTests. The structure of the tests isn’t really as important as the testing plan, but we get to test both.</p><h3 id="What-to-Test"><a href="#What-to-Test" class="headerlink" title="What to Test"></a>What to Test</h3><p>We wanted to come up with a function for you to test that had a bit of everything: loops, selection, lists, strings, dictionaries, objects, etc. But we had a bit of a conundrum. We wanted something complicated enough to be interesting, but knew you were busy with your assignment, and didn’t want everyone to have to spend lots of time writing a new function in order to test it.</p><p>That’s when it hit us. You’re already writing a function that you’ll probably want to test anyway… cartesian product! It’s got everything we need, you already have to write it, and now it can help you test your own code for A2. (A pretty smart move if I do say so myself).</p><h3 id="How-to-Start"><a href="#How-to-Start" class="headerlink" title="How to Start"></a>How to Start</h3><p>Before you start writing any code, you should think about coverage testing, and how we came up with a test plan in lecture. Figure out all of the parameters, and the important ranges they fall into. Then write one test for each possible combination of ranges. The goal here is to find one example test case for all possible regions of your testing space.</p><p>Most of your actual tests will probably involve code that looks like this (now do you see why we made you write set dict and get dict?<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">d1 = <span class="meta">&#123;...&#125;</span></span><br><span class="line">d2 = <span class="meta">&#123;...&#125;</span></span><br><span class="line">t1 = <span class="type">Table</span>()</span><br><span class="line">t2 = <span class="type">Table</span>()</span><br><span class="line">t1.set_dict(d1)</span><br><span class="line">t2.set_dict(d2)</span><br><span class="line">result_table = squeal.cartesian_product(t1, t2)</span><br><span class="line">result_dict = result_table.get_dict()</span><br><span class="line">expected_dict = <span class="meta">&#123;...&#125;</span></span><br><span class="line">self.assertEqual(result_dict, expected_dict)</span><br></pre></td></tr></table></figure></p><h3 id="What-to-Do"><a href="#What-to-Do" class="headerlink" title="What to Do"></a>What to Do</h3><p>In a file called ex10.py, you should write a UnitTest to thoroughly test cartesian product. Your tests will actually be run on a version of the code that I have written. Therefore, you will be doing black box testing (you don’t know if I implemented the cartesian product or the Table class in the same way you will… in fact, you can bet that I probably won’t). My cartesian product function will be in a file called squeal.py, and my Table class will be in a file called database.py. Both will be placed into the same directory as your UnitTest. We’ve provided you with some starter code, just to make sure you can access everything correctly.</p><h3 id="What-to-Submit"><a href="#What-to-Submit" class="headerlink" title="What to Submit"></a>What to Submit</h3><p>Submit your ex10.py file to MarkUs as usual. Your UnitTest methods do not need any DocStrings, and unless you’re doing something particularly unusual, you probably don’t need any internal comments either. However, your method names and error messages should be descriptive enough to properly explain what each test case does and why it’s useful. Remember that writing frivolous test cases is no better than missing useful ones.</p>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业，考察Python的Unit tests的使用方法，关注测试的code coverage。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSCA08-Inheritance</title>
    <link href="https://tk1307993.coding.me/CSCA08-Inheritance.html"/>
    <id>https://tk1307993.coding.me/CSCA08-Inheritance.html</id>
    <published>2020-03-23T07:37:13.000Z</published>
    <updated>2020-03-25T02:34:56.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this exercise, we will be working with inheritance, and thinking about how we can set up our inheritance hierarchy to make our lives easier. There is an easy way and a difficult way to complete this exercise. If you plan appropriately, you’ll find you won’t have to write very much code at all.</p><h4 id="Shapes"><a href="#Shapes" class="headerlink" title="Shapes"></a>Shapes</h4><p>Consider the following 4 shapes:</p><h4 id="Parallelogram"><a href="#Parallelogram" class="headerlink" title="Parallelogram"></a>Parallelogram</h4><p>A four sided figure with parallel pairs of sides. A Parallelogram is defined by the lengths of its two pairs of sides (labelled base and side in the picture below) and the interior angle (in degrees) between adjacent sides (labelled theta in the picture below).</p><h4 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h4><p>A parallelogram with four right angles. A Rectangle is defined by the lengths of its two pairs of sides (labelled base and side in the picture below).</p><h4 id="Rhombus"><a href="#Rhombus" class="headerlink" title="Rhombus"></a>Rhombus</h4><p>A parallelogram with four equal sides. A Rhombus is defined by the length of its sides (labelled base in the picture below) and the interior angle (in degrees) between adjacent sides (labelled theta in the picture below).</p><h4 id="Square"><a href="#Square" class="headerlink" title="Square"></a>Square</h4><p>A parallelogram with four equal sides and four right angles; both a Rectangle and a Rhombus. A Square is defined by the length of its sides (labelled base in the picture below).</p><p>Your first task is to figure out the IS-A hierarchy of these shapes. Draw it out in a piece of paper. Are there any instances of multiple parents?</p><h3 id="Your-Task"><a href="#Your-Task" class="headerlink" title="Your Task"></a>Your Task</h3><p>You must write four classes: Parallelogram, Rectangle, Rhombus and Square, ensuring that the class hierarchy follows your diagram from the previous step. You may create additional classes if you wish (are there any good reasons why you might want to do this?). The parameters of init methods should always be input in the following order: (base, side, theta) (theta being given in degrees), though of course, not every class’ init will take all three. So for example, a Rectangle will only take (base, side).</p><p>Objects of these classes must have the following methods:</p><ul><li>area() - returns the area of the shape<br>Note: The area of a parallelogram is computed by base side sin(theta)<br>Warning: function math.sin in Python expects its argument to be an angle given in radians - take a look at the function math.radians to convert between degrees and radians.</li><li>bst() - returns a list of three floats: [base, side, theta]. Even if a shape doesn’t need one of the parameters for its input, it should still be able to return it. (e.g., a 10 x 10 square would return: [10.0, 10.0, 90.0]).</li><li>When printed, each shape should return a string with text in the following format “I am a shape with area area”. Four example, a 10 x 10 square would return the string: “I am a Square with area 100”.</li></ul><h3 id="Be-Lazy"><a href="#Be-Lazy" class="headerlink" title="Be Lazy"></a>Be Lazy</h3><p>One way to solve this would be to write four completely independent classes, and have each class completely implement all of their own functions. This would be a bad idea (why?). If you use inheritance correctly, you should find the exercise much simpler. Remember, you should never calculate something when you can just get another method to do the work for you. Hint: It’s possible to set more than one parent for your class. Are there any shapes here for which that would be a sensible thing to do?</p><h3 id="What-to-Submit"><a href="#What-to-Submit" class="headerlink" title="What to Submit"></a>What to Submit</h3><p>All of your code should be submitted to MarkUs in a file called ex9.py that doesn’t import anything other than math, and does not ask for input or print anything when imported.</p>]]></content>
    
    <summary type="html">
    
      代写Interitance的小练习作业，求图形的边长和面积。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC401-ATM-Machine</title>
    <link href="https://tk1307993.coding.me/CSC401-ATM-Machine.html"/>
    <id>https://tk1307993.coding.me/CSC401-ATM-Machine.html</id>
    <published>2020-03-18T07:37:13.000Z</published>
    <updated>2020-03-18T02:59:54.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this assignment is to assess your understanding of</p><ul><li>Encapsulation in functions</li><li>Namespaces: global vs local</li><li>Exception handling</li><li>Program modularity<br>Next week, we will continue with chapter 10 recursion.</li></ul><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ul><li>Include your full name as a comment on the first line of your Python program.</li><li>Submit (upload) to the dropbox one file labeled as YourName_HW7.py</li></ul><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>You are to simulate a simple ATM machine. An account holder (user) should be able to enter their pin number and select from a menu of transactions: Deposit, Withdraw, Balance or Quit. You are to assume that the user has only one account on which these transactions can be performed. This account is associated with the user’s pin number. The ATM should properly and regularly communicate with the user. The ATM should get information on current account information from a file. An accounts.txt file is posted with this assignment. Examine the structure of each line of the file which contains a 4-digit code, first and last names, and the current account balance.</p><h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Note: whenever I use ‘Code the exception’, this means you need to include code in a ‘try’ block to catch the exception caused by a runtime error.<br>You may not use global variables; all variables must be local.</p><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>Write a function startUp(fname) that takes as input a filename that contains the account holder information and current balance. The file should be read and the data stored in a dictionary with the pin as the key and the remaining information as the value.<br>Note: the current balance is a float data type. Do an explicit conversion to float on that list item. Code an exception (‘Cannot get to the file’). The function should return two values: Boolean, dictionary; for example: if you named your dictionary, daccts, and the file was successfully read and the dictionary successfully created, then return (True, daccts); if the file was not successfully read, return (False, daccts).</p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>Write a function getUser(proceed, dictionary) that takes as input a Boolean value and the dictionary you created in startUp. Prompt the user to enter a pin number. If the pin is valid, the function should return (user, proceed), where user is the dictionary key value; if the pin is invalid, print (‘Incorrect pin’) and return (None, False).</p><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>Write a function menu(name) that takes as input the user’s first name, greets the user and displays the menu options: 1. Deposit, 2: Withdraw, 3.Check Balance, 4. Quit. If the user enters an invalid value (i.e. not 1, 2, 3 or 4) display the menu option again and give the user a chance to enter a value again. Once a valid number is entered, the function should return the number of the chosen option.</p><h4 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h4><p>Write a function getAmount() that takes no input. Inside a loop, prompt the user for an amount to be either deposited or withdrawn, at this point it does not matter which it is. The amount must be converted to float. Code an exception (‘You entered an incorrect amount. Please try again’). An interruption would be caused if the user enters a string instead of a numeric value, or presses the enter key without entering anything. Stay in the loop until a valid number is entered and return amount.</p><h4 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h4><p>Write a function deposit(balance) that takes as input the user’s account balance. The function calls getAmount(), calculates and displays the new balance. The function returns the new balance.</p><h4 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h4><p>Write a function withdraw(balance) that takes as input the user’s account balance. The function calls getAmount(). If the amount to be withdrawn is greater than the balance display (‘Insufficient funds to complete the transaction’). The user should be prompted to enter a new amount, until the amount entered is less than the balance. The function calculates and displays the new balance. The function returns the new balance.</p><h4 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h4><p>Write a function balance(name, balance) that takes as input the user’s name and balance and prints the message ‘Your current balance is $xxxx.xx’ where xxxx.xx is the current balance amount. This function does not return a value.</p><h4 id="Step-8"><a href="#Step-8" class="headerlink" title="Step 8"></a>Step 8</h4><p>Write a function main() that will control the flow of your program. You will build this code as you continue to create functions. main() should call startup, getUser and menu. It should contain a loop that determines which transaction the user has chosen to process and allows the user to process as many transactions as desired.</p><ul><li>If the user chooses to make a deposit, the deposit function is called and the dictionary is updated with the returned balance.</li><li>If the user chooses to make a withdrawal, the withdraw function is called and the dictionary is updated with the returned balance.</li><li>If the user chooses to check the account balance, the balance function is called.</li><li>If the user chooses to quit, exit the loop and print (‘Goodbye’). Once, the user quits, the program should terminate. Note: suggestion - use a Boolean data type to determine when the loop should terminate</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The following is only one test case. You should do several test cases to evaluate all the exceptions you have coded and other possible data entry errors.</p><p>Sample execution:<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Welcome -- Please enter your pin number 4466</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Kay :</span></span><br><span class="line"><span class="attribute">1</span>: Deposit</span><br><span class="line"><span class="attribute">2</span>: Withdrawal</span><br><span class="line"><span class="attribute">3</span>: Check Balance</span><br><span class="line"><span class="attribute">4</span>: Quit</span><br><span class="line"></span><br><span class="line"><span class="attribute">Enter number</span>: 3</span><br><span class="line"><span class="attribute">Your current balance is $356.00</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Kay :</span></span><br><span class="line"><span class="attribute">1</span>: Deposit</span><br><span class="line"><span class="attribute">2</span>: Withdrawal</span><br><span class="line"><span class="attribute">3</span>: Check Balance</span><br><span class="line"><span class="attribute">4</span>: Quit</span><br><span class="line"></span><br><span class="line"><span class="attribute">Enter number</span>: 2</span><br><span class="line"><span class="attribute">Amount</span>: 600</span><br><span class="line"><span class="attribute">Insufficient funds to complete the transaction</span></span><br><span class="line"><span class="attribute">Amount</span>: 300</span><br><span class="line"><span class="attribute">Your new balance is $56.00</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Kay :</span></span><br><span class="line"><span class="attribute">1</span>: Deposit</span><br><span class="line"><span class="attribute">2</span>: Withdrawal</span><br><span class="line"><span class="attribute">3</span>: Check Balance</span><br><span class="line"><span class="attribute">4</span>: Quit</span><br><span class="line"></span><br><span class="line"><span class="attribute">Enter number</span>: 1</span><br><span class="line"><span class="attribute">Amount</span>: 100</span><br><span class="line"><span class="attribute">Your new balance is $156.00</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Kay </span>:    </span><br><span class="line"><span class="attribute">1</span>: Deposit</span><br><span class="line"><span class="attribute">2</span>: Withdrawal</span><br><span class="line"><span class="attribute">3</span>: Check Balance</span><br><span class="line"><span class="attribute">4</span>: Quit</span><br><span class="line"></span><br><span class="line"><span class="attribute">Enter number</span>: 4</span><br><span class="line"><span class="attribute">Goodbye</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      代写一个ATM机的模拟器，实现ATM机基本的存钱/提现/查询等功能。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSC401-Recursive</title>
    <link href="https://tk1307993.coding.me/CSC401-Recursive.html"/>
    <id>https://tk1307993.coding.me/CSC401-Recursive.html</id>
    <published>2020-03-15T07:37:13.000Z</published>
    <updated>2020-03-15T06:45:42.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this assignment is to assess your understanding of</p><p>Recursive functions<br>Recursive thinking<br>Next week, we will continue with topics in Chapter 10.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Include your full name as a comment on the first line of your Python program.<br>Submit (upload) to the dropbox one file labeled as YourName_HW8.py</p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>All of the following problems use recursion. So, you are cannot use any types of loops, string processing functions other than slicing, global variables, remove, replace, etc.</p><h4 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h4><p>Write a recursive function stars(n) that takes an input a nonnegative integer and generates the pattern of stars shown below:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; stars(4)</span><br><span class="line">***<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>**<span class="strong">*</span></span><br><span class="line"><span class="strong">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure></p><p>Your function should produce a pattern for any nonnegative integer.</p><h4 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h4><p>Write a recursive function alt(s,t) that takes as input two strings and mixes string s and t with alternating characters from each string.. Check that s and t have the same length; if not, return immediately.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; alt(<span class="string">'abc```de'</span>, <span class="string">'vwxyz'</span>)</span></span><br><span class="line">avbwcxdyez</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; alt(<span class="string">'hello'</span>, <span class="string">'world'</span>)</span></span><br><span class="line">hweolrllod</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem 3"></a>Problem 3</h4><p>Write a recursive function check(s) that take a string representing a password as input and returns all the characters that are digits ( 0 -9)<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; check(<span class="string">'abc'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; check(<span class="string">'1abc2efg'</span>)</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; check(<span class="string">'a0b8nd79'</span>)</span><br><span class="line"><span class="number">9</span> <span class="number">7</span> <span class="number">8</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h4 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem 4"></a>Problem 4</h4><p>Write a recursive function prompt() that asks the user to enter a password. If the user simply hits return without entering anything, the function should prompt again, until the user enters a string. The string is then returned (not printed). Do not use any type of loop.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; prompt()</span><br><span class="line">Enter <span class="string">password:</span></span><br><span class="line">Enter <span class="string">password:</span></span><br><span class="line">Enter <span class="string">password:</span></span><br><span class="line">Enter <span class="string">password:</span></span><br><span class="line">Enter <span class="string">password:</span>abc1ghki9$%funny</span><br><span class="line"><span class="string">'abc1ghki9$%funny'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      代写四个小函数，所有的函数只能用recursion实现，练习基础的recursive的用法。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS7106-Speech-Synthesiser</title>
    <link href="https://tk1307993.coding.me/CS7106-Speech-Synthesiser.html"/>
    <id>https://tk1307993.coding.me/CS7106-Speech-Synthesiser.html</id>
    <published>2020-03-11T07:37:13.000Z</published>
    <updated>2020-03-11T03:28:22.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction-Speech-Synthesiser"><a href="#Introduction-Speech-Synthesiser" class="headerlink" title="Introduction - Speech Synthesiser"></a>Introduction - Speech Synthesiser</h3><p>For this assignment you will be required to create a Speech Synthesiser Python program. This will be a very basic waveform concatenation system, whereby the acoustic units are recordings of monophones. You will be provided with several files that you must use to do this:</p><h4 id="SimpleAudio-py"><a href="#SimpleAudio-py" class="headerlink" title="SimpleAudio.py"></a>SimpleAudio.py</h4><p>This is a version of the SimpleAudio.py module that we have used in the lab sessions. The Audio class will allow you to save, load and play .wav files as well as perform some simple audio processing functions. You should not modify this file.</p><h4 id="synth-py"><a href="#synth-py" class="headerlink" title="synth.py"></a>synth.py</h4><p>This is a skeleton structure of the program. Your task is to fill in the missing components to make it work. You are free to add any classes, methods or functions that you wish but you must not change the existing argparse arguments.</p><h4 id="monophones"><a href="#monophones" class="headerlink" title="monophones/"></a>monophones/</h4><p>A folder containing .wav files of monophones.</p><h4 id="examples"><a href="#examples" class="headerlink" title="examples/"></a>examples/</h4><p>A folder containing example .wav files of how the synthesiser should sound.</p><h3 id="Task-1-Basic-Synthesis"><a href="#Task-1-Basic-Synthesis" class="headerlink" title="Task 1 - Basic Synthesis"></a>Task 1 - Basic Synthesis</h3><p>The primary task for this assignment is to design a program that takes an input phrase and synthesises it. The main steps in the procedure are as follows:</p><ul><li>normalise the text (convert to lower/upper case, remove punctuation, etc.)</li><li>convert the word sequence to a phone sequence - you should make use of nltk.corpus.cmudict to do this.</li><li>concatenate the monophone wav files together in the right order to produce synthesised audio.<br>Your program should work by executing the synth.py script from the command line with arguments, e.g. the following should play “hello”:-</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python synth<span class="selector-class">.py</span> -<span class="selector-tag">p</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>If a word is not in the cmudict then you should print a warning to the user and exit the program. You can also listen to the examples hello.wav and rose.wav which were created as follows:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python synth<span class="selector-class">.py</span> -o hello<span class="selector-class">.wav</span> <span class="string">"hello nice to meet you"</span></span><br><span class="line">python synth<span class="selector-class">.py</span> -o rose<span class="selector-class">.wav</span> <span class="string">"A rose by any other name would smell as sweet"</span></span><br></pre></td></tr></table></figure></p><p>If you execute the same commands with your program and the output sounds the same then it is likely you have a functioning basic synthesiser.</p><h3 id="Task-2-Extending-the-Functionality"><a href="#Task-2-Extending-the-Functionality" class="headerlink" title="Task 2 - Extending the Functionality"></a>Task 2 - Extending the Functionality</h3><p>Implement at least two of the following extensions:-</p><h4 id="Extension-A-Volume-Control"><a href="#Extension-A-Volume-Control" class="headerlink" title="Extension A - Volume Control"></a>Extension A - Volume Control</h4><p>Allow the user to set the volume argument (–volume, -v) to a value between 0.0 and 1.0.<br>You should use the rescale method from the Audio class to do this.</p><h4 id="Extension-B-Punctuation"><a href="#Extension-B-Punctuation" class="headerlink" title="Extension B - Punctuation"></a>Extension B - Punctuation</h4><p>If the input phrase contains a comma - insert 250ms of silence.<br>If it contains a period, question mark or exclamation mark - insert 500ms of silence.<br>Strip all other punctuation.</p><h4 id="Extension-C-Spelling"><a href="#Extension-C-Spelling" class="headerlink" title="Extension C - Spelling"></a>Extension C - Spelling</h4><p>Allow the user to set the spell argument (–spell, -s) that will synthesise spelling instead of pronunciation. Do this by converting a string into a sequence of letters, then to an appropriate phone sequence to pronounce for each letter in its alphabetic form.</p><h4 id="Extension-D-Text-Normalisation-for-Numbers"><a href="#Extension-D-Text-Normalisation-for-Numbers" class="headerlink" title="Extension D - Text Normalisation for Numbers"></a>Extension D - Text Normalisation for Numbers</h4><p>If the input phrase contains numbers in numerical form, convert them to word sequences, e.g.<br><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"The meaning <span class="keyword">of</span> life <span class="keyword">is</span> 42"</span><br><span class="line">-&gt; "the meaning <span class="keyword">of</span> life <span class="keyword">is</span> forty two"</span><br></pre></td></tr></table></figure></p><p>You should include the ability to normalise numbers from 0 up to at least 999 (“nine hundred and ninety nine”).<br>Decimal points can be handled by reciting “point” and then reading the numbers after the point as individual digits, e.g.<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Pi is about 3.14159"</span></span><br><span class="line">-&gt; <span class="string">"pi is about three point one four one five nine"</span></span><br></pre></td></tr></table></figure></p><p>Take care not to treat decimal points as periods (see Punctuation).</p><h4 id="Extension-E-Text-Normalisation-for-Dates"><a href="#Extension-E-Text-Normalisation-for-Dates" class="headerlink" title="Extension E - Text Normalisation for Dates"></a>Extension E - Text Normalisation for Dates</h4><p>If the string contains dates in the form DD/MM, DD/MM/YY or DD/MM/YYYY, then convert them to word sequences, e.g.<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Burns Night is 25/01"</span></span><br><span class="line">-&gt; <span class="string">"burns night is the twenty fifth of january"</span></span><br><span class="line"><span class="string">"John Lennon died on 1/12/80"</span></span><br><span class="line">-&gt; <span class="string">"john lennon died on the first of december nineteen eighty"</span></span><br></pre></td></tr></table></figure></p><p>You may wish to make use of the built-in datetime and/or re packages to do this.</p><h3 id="Rules-and-Assessment"><a href="#Rules-and-Assessment" class="headerlink" title="Rules and Assessment"></a>Rules and Assessment</h3><p>Your submission should abide by the following rules:-</p><ul><li>you are encouraged to discuss the assignment together but all submissions must be written individually and be your own work.</li><li>you may only use numpy, nltk, the provided files, and any packages that are built-in to Python.</li><li>you may not change any of the existing arguments provided in synth.py.</li></ul>]]></content>
    
    <summary type="html">
    
      用NLTK库，在所给的代码框架上，代写一个语言合成器的程序。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>CS4117-Music-Artist-Lyrics-Model</title>
    <link href="https://tk1307993.coding.me/CS4117-Music-Artist-Lyrics-Model.html"/>
    <id>https://tk1307993.coding.me/CS4117-Music-Artist-Lyrics-Model.html</id>
    <published>2020-03-08T07:37:13.000Z</published>
    <updated>2020-03-08T01:12:44.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Core-Description"><a href="#Core-Description" class="headerlink" title="Core Description"></a>Core Description</h3><p>For the core, you will implement a program that creates a model of a music artist’s lyrics. This model receives lyric data as input and ultimately generates new lyrics in the style of that artist. To do this, you will leverage an NLP concept called an n-gram and use an NLP technique called language modeling.<br>Your understanding of the linked concepts and definitions is crucial to your success, so make sure to understand n-grams, language modeling, Python dictionaries as taught in the warmup, and classes and inheritance in Python before attempting to implement the core.<br>The core does not require you to include any external libraries beyond what has already been included for you. Use of any other external libraries is prohibited on this part of the project.</p><h3 id="Core-Structure"><a href="#Core-Structure" class="headerlink" title="Core Structure"></a>Core Structure</h3><p>In the language-models/folder, you will find four files which contain class definitions: nGramModel.py, unigramModel.py, bigramModel.py, and trigramModel.py. You must complete the prepData, weightedChoice, and getNextToken functions in nGramModel.py. You must also complete the trainModel, trainingDataHasNGram, and getCandidateDictionary functions in each of the other three files.<br>In the root CreativeAI repository, there is a file called generate.py, which will be the driver for generating both lyrics and music. For the core, you will implement the trainLyricsModels, selectNGramModel, generateSentence, and runLyricsGenerator functions; these functions will be called, directly or indirectly, by main, which is written for you.<br>We recommend that you implement the functions in the order they are listed in the spec; start with prepData and work your way down to runLyricsGenerator.</p><h3 id="Getting-New-Lyrics-Optional"><a href="#Getting-New-Lyrics-Optional" class="headerlink" title="Getting New Lyrics (Optional)"></a>Getting New Lyrics (Optional)</h3><p>If your group chooses to use lyrics from an artist other than the Beatles, you can use the web scraper we have written to get the lyrics of the new artist and save them in the data/lyrics directory for you. A web scraper is a program that gets information from web pages: ours, which lives in the data/scrapers directory.<br>If you navigate to the data/scrapers folder and run the lyricsWikiaScraper.py file, you will be prompted to input the name of an artist. If that artist is found on lyrics.wikia.com, the program will make a folder in the data/lyrics directory for that artist, and save each of the artist’s songs as a .txt file in that folder.</p><h3 id="Explanation-of-Functions-to-Implement"><a href="#Explanation-of-Functions-to-Implement" class="headerlink" title="Explanation of Functions to Implement"></a>Explanation of Functions to Implement</h3><h4 id="prepData"><a href="#prepData" class="headerlink" title="prepData"></a>prepData</h4><p>The purpose of this function is to take input data in the form of a list of lists, and return a copy of that list with symbols added to both ends of each inner list.<br>For the core, these inner lists will be sentences, which are represented as lists of strings. The symbols added to the beginning of each sentence will be ^::^ followed by ^:::^, and the symbol added to the end of each sentence will be $:::$. These are arbitrary symbols, but make sure to use them exactly and in the correct order.<br>For example, if the function is passed this list of lists:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ [<span class="symbol">'hey</span>', <span class="symbol">'jude</span>'], [<span class="symbol">'yellow</span>', <span class="symbol">'submarine</span>'] ]</span><br></pre></td></tr></table></figure></p><p>Then it would return a new list that looks like this:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ [<span class="symbol">'^::^</span>', <span class="symbol">'^:::^</span>', <span class="symbol">'hey</span>', <span class="symbol">'jude</span>', <span class="symbol">'$:::$</span>'], [<span class="symbol">'^::^</span>', <span class="symbol">'^:::^</span>', <span class="symbol">'yellow</span>', <span class="symbol">'submarine</span>', <span class="symbol">'$:::$</span>'] ]</span><br></pre></td></tr></table></figure></p><p>The purpose of adding two symbols at the beginning of each sentence is so that you can look at a trigram containing only the first English word of that sentence. This captures information about which words are most likely to begin a sentence; without these symbols, you would not be able to use the trigam model at the beginning of sentences because there would be no trigrams to look at until the third word.<br>The purpose of adding a symbol to the end of each sentence is to be able to generate sentence endings. If you ever see $:::$ while generating a sentence in the generateSentence function, you know the sentence is complete.</p><h4 id="trainModel"><a href="#trainModel" class="headerlink" title="trainModel"></a>trainModel</h4><p>This function trains the NGramModel child classes on the input data by building their dictionary of n-grams and respective counts, self.nGramCounts. Note that the special starting and ending symbols also count as words for all NGramModels, which is why you should use the return value of prepData before you create the self.nGramCounts dictionary for each language model.</p><ul><li>For the unigram model, self.nGramCounts will be a one-dimensional dictionary of {unigram: unigramCount} pairs, where each unique unigram is somewhere in the input data, and unigramCount is the number of times the model saw that particular unigram appear in the data. The unigram model should not consider the special symbols ‘^::^’ and ‘^:::^’ as words, but it should consider the ending symbol $:::$ as a word. The bigram and trigram modles should consider all special symbols as words.</li><li>For the bigram model, the dictionary will be two-dimensional. It will be structured as {unigramOne: {unigramTwo: bigramCount}}, where bigramCount is the count of how many times this model has seen unigramOne + unigramTwo appear as a bigram in the input data. For example, if the only song you were looking at was Strawberry Fields Forever, part of the BigramModel’s self.nGramCounts dictionary would look like this.</li><li>For the trigram model, the dictionary will be three-dimensional. It will be structured as {unigramOne: {unigramTwo: {unigramThree: trigramCount}}}, where trigramCount is the count of how many times this model has seen unigramOne + unigramTwo + unigramThree appear as a trigram in the input data.</li></ul><h4 id="getCandidateDictionary"><a href="#getCandidateDictionary" class="headerlink" title="getCandidateDictionary"></a>getCandidateDictionary</h4><p>This function returns a dictionary of candidate next words to be added to the current sentence. More specifically, it returns the set of words that are legal to follow the sentence passed in, given the particular language model’s training data. So it looks at the sentence, figures out what word the model thinks can follow the last words in the sentence, and returns that set of words and counts. Note: when you write this function, you may assume that that the trainingDataHasNGram function for this specific language model instance has returned True.</p><p>For each n-gram model, this function will look at the last n - 1 words in the current sentence, index into self.nGramCounts using those words, and return a dictionary of possible n-th words and their counts. For example, the unigram model is an n-gram model for which n = 1, so the unigram model looks at the previous 0 words in the sentence. Therefore, the unigram model sees every word in its training data as a candidate; in other words, the unigram model version of getCandidateDictionary should return its entire self.nGramCounts dictionary. Based on this knowledge, what dictionaries should the bigram and trigram models return?<br>Hint: the indexing method you use here will be syntactically very similar to what you did in trainingDataHasNGram.</p><h4 id="printSongLyrics"><a href="#printSongLyrics" class="headerlink" title="printSongLyrics"></a>printSongLyrics</h4><p>This function takes three parameters which are lists of lists of strings: verseOne, verseTwo, and chorus. It then prints out the song in this order: verse one, chorus, verse two, chorus.</p><h4 id="getUserInput"><a href="#getUserInput" class="headerlink" title="getUserInput"></a>getUserInput</h4><p>This function takes three parameters: teamName, which should be the name of your group; lyricsSource, which should be the name of the artist that you’re generating lyrics for; and musicSource, which should be the name of the source from which you got your music data for the reach.<br>The function returns a user’s choice between 1 and 3, looping while the user does not input a valid choice. Choice 1 is for generating lyrics; choice 2 is for generating music; and choice 3 is to quit the program.</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>This function first trains instances of language models on the lyrics and music data by calling the trainLyricsModels and trainMusicModels functions. Then, it calls getUserInput and uses the return value of that function to either generate new lyrics by calling runLyricsGenerator, or generate a song by calling runMusicGenerator. Note that the trainMusicModels and runMusicGenerator functions don’t need to be touched for the core.<br>At the beginning of main there are several string variables to hold your group’s name, the name of the artist you’re using, etc. Make sure to update these values with your team’s name and your choices of data.</p><h3 id="Tips-for-Speeding-Up-Your-Program"><a href="#Tips-for-Speeding-Up-Your-Program" class="headerlink" title="Tips for Speeding Up Your Program"></a>Tips for Speeding Up Your Program</h3><p>If your program is taking a long time to load the data and train the models, it’s likely that inefficiencies in your code are slowing down your program. The most common cause of inefficiency is too many nested loops in your trainModel functions. For example, if you have 10 words, and you run through the words once for each word in the list (i.e. 10 times), that will be 100 steps total, which is not too bad. But if you have 10,000 words in the dataset, and you look at each one 10,000 times, then that will be 100,000,000, which is bad.<br>Each version of the trainModel function can be written correctly with at most two levels of nested for loops, and a typical program should not take more than around 30 seconds to load. Try experimenting with different loop structures if your program is taking too long to load.</p><h3 id="How-to-Run-Your-Program-to-Generate-Lyrics"><a href="#How-to-Run-Your-Program-to-Generate-Lyrics" class="headerlink" title="How to Run Your Program to Generate Lyrics"></a>How to Run Your Program to Generate Lyrics</h3><p>If you are using PyCharm, open generate.py and click “Run…” in the top navigation bar. If you are working from the command line, navigate to the root directory where your CreativeAI project is stored and type:<br>python generate.py</p><p>Even if you have not implemented any of the functions in the project, the starter code should work out of the box. Therefore, you can play around with it and get a feel for how the driver in main works.</p>]]></content>
    
    <summary type="html">
    
      代写NLP作业，对音乐的作者进行分类与识别。作业提供了框架以及相关文档，按照要求一步一步往下写即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
</feed>
