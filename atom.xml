<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2022-11-18T04:12:02.975Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSC108H-Working-With-arxiv-Metadata</title>
    <link href="https://tk1307993.coding.me/CSC108H-Working-With-arxiv-Metadata.html"/>
    <id>https://tk1307993.coding.me/CSC108H-Working-With-arxiv-Metadata.html</id>
    <published>2022-11-18T04:09:48.000Z</published>
    <updated>2022-11-18T04:12:02.975Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goals-of-this-Assignment"><a href="#Goals-of-this-Assignment" class="headerlink" title="Goals of this Assignment"></a>Goals of this Assignment</h3><p>In this assignment, you will practise working with files, building and using dictionaries, designing functions using the Function Design Recipe, and writing unit tests.</p><h3 id="Introduction-arxiv-org"><a href="#Introduction-arxiv-org" class="headerlink" title="Introduction: arxiv.org"></a>Introduction: arxiv.org</h3><p>arxiv.org (<a href="https://arxiv.org/" target="_blank" rel="noopener">https://arxiv.org/</a>) is a free distribution service and an open-access archive for nearly two million scholarly articles in the fields of physics, mathematics, computer science, quantitative biology, quantitative finance, statistics, electrical engineering and systems science, and economics. arXiv is pronounced as “archive” (<a href="https://en.wikipedia.org/wiki/ArXiv" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/ArXiv</a>) .</p><p>arxiv.org (<a href="https://arxiv.org/" target="_blank" rel="noopener">https://arxiv.org/</a>) maintainers believe in open, free, and accessible information. In addition to free and easy access to the articles themselves, arxiv.org also provides ways to access its metadata (<a href="https://arxiv.org/help/bulk_data" target="_blank" rel="noopener">https://arxiv.org/help/bulk_data</a>) . This metadata includes information such as the article’s unique identification number, author(s), title, abstract, the date the article was added to the arxiv and when it was last modified, licence under which the article was published, etc. This metadata is used by a variety of research tools that investigate scientific research trends, provide intelligent scientific search techniques, and in many other areas.</p><p>To make this assignment more manageable for you, we have extracted a sample of arxiv’s metadata, simplified it, and created a text file you will use as input to your program.</p><h3 id="The-Metadata-File"><a href="#The-Metadata-File" class="headerlink" title="The Metadata File"></a>The Metadata File</h3><p>The metadata file contains a series of one or more article descriptions, one after the other. Each article description has the following elements, in order:</p><p>A line containing a unique identifier of the article. An identifier will not occur more than once in the file, and it does not contain any whitespace.<br>A line containing the article’s title. If we do not have title information, this line will be blank.<br>A line containing the date the article was created, or a blank line if this information is not provided. The date is formatted YYYYMM-DD.<br>A line containing the date the article was last modified, or a blank line if this information is not provided. The date is formatted YYYY-MM-DD.<br>Zero or more lines with the article’s author(s). Each line contains an author’s last name followed by a comma , followed by the author’s first name(s). There is always exactly one comma , on the author line. Note, that there may be white space and/or punctuation other than commas included in an author’s last name and/or first name. Immediately after the zero or more author lines, the file contains a single blank line. If we do not have any author information for an article, then the blank line will come immediately after the modification date line.<br>Zero or more lines of text containing the abstract of the article. Immediately after the abstract, the file contains a line with the keyword END on it (and nothing else other than perhaps whitespace). You may assume that a line with only END in it does not occur in any other context in the metadata file, i.e. it always signifies that an article description is over. Unless this is the last line in the file, the next line will contain the identifier of the next article, and so on.<br>You can assume that any file we test your code with has this structure. You do not need to handle any invalid file formats.</p><h3 id="Example-Metadata-File"><a href="#Example-Metadata-File" class="headerlink" title="Example Metadata File"></a>Example Metadata File</h3><p>Here is an example metadata file (also provided in the starter code later (a3.zip) ):<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">008</span></span><br><span class="line"><span class="string">Intro</span> <span class="string">to</span> <span class="string">CS</span> <span class="string">is</span> <span class="string">the</span> <span class="string">Best</span> <span class="string">Course</span> <span class="string">Ever</span></span><br><span class="line"><span class="number">2021</span><span class="number">-09</span><span class="number">-01</span></span><br><span class="line"></span><br><span class="line"><span class="string">Ponce,Marcelo</span></span><br><span class="line"><span class="string">Tafliovich,Anya</span> <span class="string">Y.</span></span><br><span class="line"></span><br><span class="line"><span class="string">We</span> <span class="string">present</span> <span class="string">clear</span> <span class="string">evidence</span> <span class="string">that</span> <span class="string">Introduction</span> <span class="string">to</span></span><br><span class="line"><span class="string">Computer</span> <span class="string">Science</span> <span class="string">is</span> <span class="string">the</span> <span class="string">best</span> <span class="string">course.</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="number">031</span></span><br><span class="line"><span class="string">Calculus</span> <span class="string">is</span> <span class="string">the</span> <span class="string">Best</span> <span class="string">Course</span> <span class="string">Ever</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-09</span><span class="number">-02</span></span><br><span class="line"><span class="string">Breuss,Nataliya</span></span><br><span class="line"></span><br><span class="line"><span class="string">We</span> <span class="string">discuss</span> <span class="string">the</span> <span class="string">reasons</span> <span class="string">why</span> <span class="string">Calculus</span> <span class="string">I</span></span><br><span class="line"><span class="string">is</span> <span class="string">the</span> <span class="string">best</span> <span class="string">course.</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="number">067</span></span><br><span class="line"><span class="string">Discrete</span> <span class="string">Mathematics</span> <span class="string">is</span> <span class="string">the</span> <span class="string">Best</span> <span class="string">Course</span> <span class="string">Ever</span></span><br><span class="line"><span class="number">2021</span><span class="number">-09</span><span class="number">-02</span></span><br><span class="line"><span class="number">2021</span><span class="number">-10</span><span class="number">-01</span></span><br><span class="line"><span class="string">Pancer,Richard</span></span><br><span class="line"><span class="string">Bretscher,Anna</span></span><br><span class="line"></span><br><span class="line"><span class="string">We</span> <span class="string">explain</span> <span class="string">why</span> <span class="string">Discrete</span> <span class="string">Mathematics</span> <span class="string">is</span> <span class="string">the</span> <span class="string">best</span> <span class="string">course</span> <span class="string">of</span> <span class="string">all</span> <span class="string">times.</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="number">827</span></span><br><span class="line"><span class="string">University</span> <span class="string">of</span> <span class="string">Toronto</span> <span class="string">is</span> <span class="string">the</span> <span class="string">Best</span> <span class="string">University</span></span><br><span class="line"><span class="number">2021</span><span class="number">-08</span><span class="number">-20</span></span><br><span class="line"><span class="number">2021</span><span class="number">-10</span><span class="number">-02</span></span><br><span class="line"><span class="string">Ponce,Marcelo</span></span><br><span class="line"><span class="string">Bretscher,Anna</span></span><br><span class="line"><span class="string">Tafliovich,Anya</span> <span class="string">Y.</span></span><br><span class="line"></span><br><span class="line"><span class="string">We</span> <span class="string">show</span> <span class="string">a</span> <span class="string">formal</span> <span class="string">proof</span> <span class="string">that</span> <span class="string">the</span> <span class="string">University</span> <span class="string">of</span></span><br><span class="line"><span class="string">Toronto</span> <span class="string">is</span> <span class="string">the</span> <span class="string">best</span> <span class="string">university.</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="number">042</span></span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-05</span><span class="number">-04</span></span><br><span class="line"><span class="number">2021</span><span class="number">-05</span><span class="number">-05</span></span><br><span class="line"><span class="string">This</span> <span class="string">is</span> <span class="string">a</span> <span class="string">very</span> <span class="string">strange</span> <span class="string">article</span> <span class="string">with</span> <span class="literal">no</span> <span class="string">title</span></span><br><span class="line"><span class="string">and</span> <span class="literal">no</span> <span class="string">authors.</span></span><br><span class="line"><span class="string">END</span></span><br></pre></td></tr></table></figure></p><p>This metadata file contains information on five articles with unique identifiers ‘008’ , ‘031’ , ‘067’ , ‘827’ , and ‘042’ . Notice that the following information is not provided in the file: modified date in article ‘008’ , created date in article ‘031’ , and title and authors in article ‘042’ . All these are valid cases and your code should deal with them. Also notice that an abstract can occupy zero or one or more lines in the input file.</p><h3 id="Storing-the-Arxiv-Metadata"><a href="#Storing-the-Arxiv-Metadata" class="headerlink" title="Storing the Arxiv Metadata"></a>Storing the Arxiv Metadata</h3><p>We will use a dictionary to maintain the arxiv metadata. Let us look in detail at the format of this dictionary. The types below are defined in constants.py and we have imported them into arxiv_functions.py for use in your type contracts.</p><h4 id="Type-NameType"><a href="#Type-NameType" class="headerlink" title="Type NameType"></a>Type NameType</h4><p>We will store the names of authors as tuples of two strings: the author’s last name(s) and the author’s first name(s). For example, the author Anna Bretscher would be listed in the metadata file as ‘Bretscher,Anna’ and will be stored as (‘Bretscher’, ‘Anna’) . Note, that there may be punctuation and/or white space included in an author’s last name and/or first name, and we need to keep all this information. The only exception is: there are no commas in author’s first nor last names. For example, Tafliovich,Anya Y. , Van Dyke,Mary-Ellen and Sklodowska Curie,Marie Salomea are all valid input lines, and should be stored as (‘Tafliovich’, ‘Anya Y.’) , (‘Van Dyke’, ‘Mary-Ellen’) and (‘Sklodowska Curie’, ‘Marie Salomea’) , respectively. A line like Tafliovich,Anya,Y. is not valid, since it contains two commas and we cannot tell which is supposed to be the first and which is the last name. You will only have to deal with valid input in this assignment. We will also make the simplification that all authors will have both first and last names.</p><h4 id="Type-ArticleType"><a href="#Type-ArticleType" class="headerlink" title="Type ArticleType"></a>Type ArticleType</h4><p>The file constants.py in the starter code defines the following constants that you should use instead of the literal strings. Below are the current values of the constants.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ID</span> = <span class="string">'identifier'</span></span><br><span class="line"><span class="attr">TITLE</span> = <span class="string">'title'</span></span><br><span class="line"><span class="attr">CREATED</span> = <span class="string">'created'</span></span><br><span class="line"><span class="attr">MODIFIED</span> = <span class="string">'modified'</span></span><br><span class="line"><span class="attr">AUTHORS</span> = <span class="string">'authors'</span></span><br><span class="line"><span class="attr">ABSTRACT</span> = <span class="string">'abstract'</span></span><br></pre></td></tr></table></figure><p>We will store information about a single article in a dictionary that maps ID , TITLE , CREATED , MODIFIED , AUTHORS , and ABSTRACT to the corresponding values. The value for each piece of information is of type str , except for the value associated with key AUTHORS , which is a List of NameType . If an element is not provided in the metadata file, then the value associated with that key will be empty (i.e. the empty string, or in the case of no authors, an empty list). The list of authors will be sorted in lexicographic order. (removed Nov 12)</p><p>Notice that since the fourth line in the specification is blank, the value corresponding to key MODIFIED is the empty string. Also notice that the final newline character on each line is not included in any of the stored values, except for the newline characters inside the abstract we keep those! Take a careful look at the starter file example_data.txt (same as the example above) and the corresponding dictionary EXAMPLE_ARXIV defined in the file arxiv_functions.py for more examples.</p><h4 id="Type-ArxivType"><a href="#Type-ArxivType" class="headerlink" title="Type ArxivType"></a>Type ArxivType</h4><p>Finally, we will store the entire arxiv metadata in a dictionary that maps article identifiers to articles, i.e. to values of type<br>ArticleType . The key/value pair in this dictionary that corresponds to the above article</p><h3 id="Required-Functions"><a href="#Required-Functions" class="headerlink" title="Required Functions"></a>Required Functions</h3><p>In the starter code file arxiv_functions.py , follow the Function Design Recipe to complete the following functions. In addition, you must add some helper functions (i.e. functions that you design yourself) to aid with the implementation of these required functions. Helper functions also require complete docstrings. We strongly recommend you also use the suggested helper functions in the table below; we give you these hints to make your programming task easier.</p><p>Some indicators that you should consider writing a new helper function</p><p>For each of the functions below, other than read_arxiv_file , write at least two examples that use the constant EXAMPLE_ARXIV . If your helper function takes an open file as an argument, you do NOT need to write any examples in that function’s docstring. Otherwise, for any helper functions you add, write at least two examples in the docstring.</p><p>Your functions should not mutate their arguments, unless the description says that is what they do.</p><p>A note on sorting: Throughout the assignment, we ask for lists to be sorted in lexiocographic order. This is the order that Python sorts in (such as when you call list.sort ). You do not have to write your own sorting code (unless you want to!)</p><p>We have broken the components of the assignment down into five Tasks, grouping related functions together. Some tasks are easier than others, and you can do the tasks in any order. As in the previous assignments, we’ll be marking each function mostly separately (however there will be some overlap when functions call other functions).</p>]]></content>
    
    <summary type="html">
    
      完成Python基础作业，练习Dict的使用，对arXiv.org的数据进行分析。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSCC11-Classification</title>
    <link href="https://tk1307993.coding.me/CSCC11-Classification.html"/>
    <id>https://tk1307993.coding.me/CSCC11-Classification.html</id>
    <published>2022-11-14T01:43:11.000Z</published>
    <updated>2022-11-14T01:44:34.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>Download the starter file on the course webpage. The file requires the same login and password as the video lectures. Once downloaded and unpacked, a directory called Exam will exist. Please do not change the directory structure or the headers of functions in python files. All modified python files and others you generate (e.g., plots) should be left in the Exam directory (which you’ll submit). Remember to read all instructions and comments in the python files very carefully.</p><h3 id="Written-work"><a href="#Written-work" class="headerlink" title="Written work"></a>Written work</h3><p>For written answers you can either write on paper or use an editor that supports equations (eg Word or Latex). If writing on paper, please scan or photograph and save as a png file or perhaps pdf (and make sure it is easily legible). If formatting your answers in Word or latex etc, please save as pdf. All such png or pdf files should be left in the Exam directory for submission.</p><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>You’ll use the same environment you’ve been using on assignments. You will need Python3,<br>Numpy, Matplotlib, and Pickle; you may not use any other python packages. Please pre-install if working on your own computer. If you’d rather work on a UTSC machine, remote login to one of these lab machines:</p><p>IC lab (ranging from 01 to 50): i406-[01-50]<br>BV lab (ranging from 01 to 40): b473-[01-40]</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Submit your exam on the Mathlab server (like assignments). Do not modify the Exam directory tree or method/function headers therein.</p><p>Q1. Classification with Gaussian Class Conditionals<br>In Chapter 8.4 of the online course lecture notes, we introduced the Gaussian class-conditional (GCC) model for classification. The generative model for a data point x, in the two class case. Where c is the class random variable; it takes on the value 0 for one class, and 1 for the other. The decision function for the CC model is the log posterior ratio.</p><p>To learn the model, given N data points, we estimate the class priors. For GCC models the likelihoods are Gaussian, for which we estimate the means and covariances.</p><p>For the problem below you are asked implement the GCC model. You will then apply your algorithm to three datasets, each having a training set and a test set. You will train this model, visualize the Gaussians, and identify the properties of the GCC model. Starter code is in directory gcc.</p><p>Implementing GCC: You should implement the GCC model by completing the methods train and predict in gcc.py :</p><p>train fits the GCC model. The means and covariances for the likelihoods should be stored in self.means and self.covariances. The learned priors are stored in self.priors.<br>predict takes inputs and computes the probability of each input being assigned to each class.<br>You can test your code by running debug_gcc.py. It provides simple test cases and feedback to help debug your code. Once you are confident with your implementation, run train_gcc.py on the three datasets mentioned above by modifying the dataset variable in the main block. This code trains a GCC model on the specified dataset, computes the test accuracy, and displays the Gaussian likelihoods with the training and test data.</p><p>Provide a brief answer (no more than 3 or 4 sentences) for each of the following questions in Questions.txt:</p><p>Does GCC perform well on generic_1? Why or why not?<br>Does GCC perform well on generic_2? Why or why not?<br>Does GCC perform well on generic_3? Why or why not?<br>If input feature vectors have length D, how many parameters do we need to learn for each Gaussian?<br>Suppose you decide to use Naive Bayes with GCC. In words, what would you have to change in your code? How many parameters would you need to learn for each Gaussian in this case?<br>Suppose certain elements of the input feature vectors are highly correlated. Why is this problematic for Naive Bayes?<br>How could you transform the data to mitigate this problem with Naive Bayes?<br>Q2. Multi-Line Regression with Expectation-Maximization<br>In Assignment 4 we fit a Gaussian mixture model (GMM) to data using the EM Algorithm. The mixture model provides a way to assign points to clusters in a probabilistic sense. That is, we compute the posterior probability that point i should be owned by (i.e., assigned to) the jth component of the mixture. Where K is the number of components in the mixture. Given the ownership probabilities, we then computed weighted means and covariances, the parameters of the Gaussian components. This works well for density estimation and clustering, but is actually much more general. To that end, here we’re going to consider the use of EM for parametric model fitting; i.e., a mixture of regressors.</p><p>Suppose you have a bunch of points in the plane, like those shown in the plot below. Normally you might not know how many lines are in any given dataset, but here it seems clear enough that you should be able to fit two lines. But to do this you need to figure out a way to determine which points belong to which line. And this is where the EM algorithm comes in, since we can use the posterior probability that a given point comes from a given line. This will allow us to simultaneously regress to multiple lines (not just two).</p><p>To find the model parameters we minimize the negative log likelihood with the added constraint that mixing probabilities sum to 1. For this we add a Lagrange multiplier.</p><p>We’ll treat the noise variance 2 as a hyper-parameter, and set it manually in the code.</p><p>The EM algorithm alternates between inferring the posterior over the assignment of points to lines in the E-step, and the estimation of the model parameters in the M-step. For the E-step, as with the GMM in A4, we’ll write the posterior ownership probability.</p><p>Written Part<br>The questions below ask you to derive the equations for the E-step and the M-step. Save your answers as written.pdf in the directory em_line_fitting. E.g., you could take pictures of written work on paper, or format electronically, e.g., with LateX.</p><p>Programming Part<br>Implement multi-line fitting using the EM algorithm described above. The starter code is in directory em_line_fitting. The associated methods are:</p><p>_fit: fits K linear models to training data. Each iteration contains the E-step and the M-step. The iteration terminates when there is negligible change in the ownership probabilities.<br>_e_step: computes the ownership probabilities for each data point.<br>_m_step: computes the mixing probabilities and the parameters of each of the linear models.<br>_visualize: visualizes training data with fitted lines and ownership probabilities for each point.<br>You will need to complete the methods _e_step and _m_step. The equations for these steps are given above. The starter code includes a way to specify initial conditions for the optimization; this includes the initial line parameters and the mixing probabilities.</p><p>You can run train_em_line_fitting.py to debug your code with pre-defined test cases (test_case = [i], where [i] = 0, 1, 2, 3). This script determines whether your learned model parameters, mixing probabilities, and ownership probabilities are correct. If you set visualize = True, this method will display at each iteration the current estimates of the fitted lines, along with a plot that shows, for each model, the ownership probability for each data point. Once you’re confident in the code, we’ll analyze the results.</p><p>The EM algorithm will find one of several local optima. Some are good, and some are not great. The chance of getting “stuck” in poor minima often depends on the initial guess and the value of the model standard deviation. To explore this, we’ve pre-specified several test cases, with different numbers of lines and values of . Run train_em_line_fitting.py for each test case, setting test_case to be 0 through 4. If you set test_case = False, you can play with the algorithm by manually changing the seed, stddev, num_lines.</p><p>When your code works correctly, the first four test cases should produce the following plots. In these plots, each component (line) and its associated ownership probabilities (the bar graph) have a unique colour.</p><p>Now, reflect on these estimates and how they change with each iteration as the model fit evolves from the initial guess to the final estimate. And provide brief answers (no more than 5 sentences) to the following questions in Questions.txt :</p><p>In test case 0, the two lines fit well. The ownership probabilities are either 0 or 1 near the right and left sides of the plot, but near 0.5 closer to the middle. Explain why this occurs and why it’s useful.<br>In test case 1, the lines do not fit the data well. Explain what might be the source of the problem in this case.<br>Test cases 2 and 3 fit two and three lines, but in both cases not all lines appear to fit the data well. Select one of these two test cases and explain what might be the source of the problem, making reference to the model variance and the ownership probabilities.</p>]]></content>
    
    <summary type="html">
    
      完成Machine Learning中关于Classification的练习题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Machine Learning" scheme="https://tk1307993.coding.me/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>CSCI1200-Jagged-Arrays</title>
    <link href="https://tk1307993.coding.me/CSCI1200-Jagged-Arrays.html"/>
    <id>https://tk1307993.coding.me/CSCI1200-Jagged-Arrays.html</id>
    <published>2022-10-26T03:27:29.000Z</published>
    <updated>2022-10-26T03:29:33.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment you will build a custom data structure named JaggedArray. A JaggedArray is a 1D array of n bins, and each bin stores a collection of elements of templated type T. Building this data structure will give you practice with pointers, dynamic array allocation and deallocation, and writing templated classes. The implementation of this data structure will involve writing one new class. You are not allowed to use any of the STL container classes in your implementation or use any additional classes or structs. Please read the entire handout before beginning your implementation. Also, be sure to review the Lecture 8 notes.</p><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>The JaggedArray class is found in many real-world applications where a variable number of elements are stored in a collection of bins. This data structure is helpful to ensure high performance for applications needing frequent read and write access to this organizational information.</p><p>For example, let’s consider a physical simulation with hundreds of ping pong balls bouncing around inside a box. We will need to calculate the collisions of the balls with the sides of the box, but also the collisions of the balls with each other. A naive, brute-force implementation will require consideration of all pairwise collisions - for n balls, this is n^2 !</p><p>A relatively straightforward optimization will instead consider the interaction of each ball with only its nearest k neighbors = k n total potential collisions (a great improvement for large n!). How do we efficiently find each ball’s nearest neighbors? If we divide space into a large grid of bins and sort all the balls into the bins, we can find the nearest neighbors of a particular ball by collecting the balls in the same bin (and the adjacent bins). How many balls are in each bin? Some bins are empty. Some bins have several or many balls. As the simulation progresses and the balls move around, balls move in and out of bins and the number of balls in each bin changes. A JaggedArray is an obvious choice for storing this data for efficient collision detection.</p><h3 id="The-Data-Structure"><a href="#The-Data-Structure" class="headerlink" title="The Data Structure"></a>The Data Structure</h3><p>The JaggedArray class you will implement has two fundamental representation modes: unpacked and packed. In the unpacked representation, the JaggedArray stores an array of integers containing the counts of how many elements are in each bin and an array of pointers to arrays that hold these elements. In the packed representation, the JaggedArray stores an array of offsets for the start of each bin. These offsets refer to a single large array that stores all of the elements grouped by bin but all packed into the same large array. We can convert a JaggedArray from unpacked to packed mode by calling the pack member function and similarly convert from packed to unpacked by calling unpack. Below is an illustration of both representations for a small example with 7 bins storing 6 total elements (unpacked on the left, packed on the right)</p><p>The JaggedArray stores elements of template type T. In the examples in this handout, T is type char. The representation consists of the six member variables presented in these diagrams and you should exactly follow this representation (variable names, types, and data). Depending on the mode (unpacked or packed) of the JaggedArray, two of the variables are set to NULL. The JaggedArray contains the expected accessor functions numElements, numBins, numElementsInBin, getElement, and isPacked and modifiers addElement, removeElement, and clear. See the provided main.cpp code for example usage and details on the arguments and return values for these functions.</p><p>In the packed version of the data structure, the first element in bin i is stored at the index stored in offsets[i]. The number of elements in the bin is equal to offsets[i+1] - offsets[i]. Except the last bin, which contains num_elements - offsets[i] elements.</p><h3 id="Modifying-the-Data-Structure"><a href="#Modifying-the-Data-Structure" class="headerlink" title="Modifying the Data Structure"></a>Modifying the Data Structure</h3><p>The JaggedArray can only be edited while in unpacked mode. The left diagram illustrates the necessary changes to the representation for the call addElement(3,’g’), which adds the element ‘g’ to bin 3 (the bins are indexed starting with 0). And the diagram on the right illustrates the changes to the representation for the subsequent call to removeElement(1,1) which removes the element in slot 1 (element ‘b’) from bin 1.</p><p>Note how the variables holding the total number of elements in the JaggedArray and the count of the elements for the specific bin are updated appropriately.</p><p>For our implementation we will always size each of the arrays to exactly contain the required information. This will ensure you get plenty of practice with proper allocation and de-allocation. When the new array is allocated, the necessary data from the old array is copied and then the old array is de-allocated.</p><p>Attempting to access the non-existent bins or elements (out-of-bounds indices) is an error. Similarly, attempting to edit a JaggedArray while the array is in packed mode is an error. Your program should check for these situations, and if a problem is detected, your program should print an appropriate warning message to std::cerr and call exit(1).</p><h3 id="Testing-Debugging-and-Printing"><a href="#Testing-Debugging-and-Printing" class="headerlink" title="Testing, Debugging, and Printing"></a>Testing, Debugging, and Printing</h3><p>We provide a main.cpp file with a wide variety of tests of your data structure. Some of these tests are initially commented out. We recommend you get your class working on the basic tests, and then uncomment the additional tests as you implement and debug the key functionality of the JaggedArray class. Study the provided test cases to understand what code triggers calls to your JaggedArray copy constructor, assignment operator, and destructor and verify that these functions are working correctly.</p><p>It is your responsibility to add additional test cases, including examples where the template class type T is something other than char. You must also implement a simple print function to help as you debug your class. Include examples of the use of this function in your new test cases. Your function should work for JaggedArrays containing char, int, and reasonably short strings. The print function does not need to work for more complex types. Please use the example output as a guide (we will grade this output by hand).</p><h3 id="Performance-Analysis"><a href="#Performance-Analysis" class="headerlink" title="Performance Analysis"></a>Performance Analysis</h3><p>The data structure for this assignment (intentionally) involves a lot of memory allocation &amp; deallocation. Certainly it is possible to revise this design for improved performance and efficiency or adapt the data structure to specific applications. For this assignment, please implement the data structure exactly as described.</p><p>In your README.txt file include the order notation for each of the JaggedArray member functions described above: numElements, numBins, numElementsInBin, getElement, isPacked, clear, addElement, removeElement, pack, unpack, and print and don’t forget the constructors, destructor, and assignment operator. For each function determine the performance for each of the representation modes (packed and unpacked), as appropriate. You will be graded on the order notation efficiency of your implementation, so carefully consider any significant implementation choices.</p><p>You should assume that calling new [] or delete [] on an array will take time proportional to the number of elements in the array. In your answers use the variables b = the number of bins, e = the number of elements, and k = the number of elements in the largest bin.</p><h3 id="Looking-for-Memory-Leaks"><a href="#Looking-for-Memory-Leaks" class="headerlink" title="Looking for Memory Leaks"></a>Looking for Memory Leaks</h3><p>To help verify that your data structure does not contain any memory leaks and that your destructor is correctly deleting everything, we include a batch test function that repeatedly allocates a JaggedArray, performs many operations, and then deallocates the data structure. To run the batch test case, specify 2 command line arguments, a file name (small.txt, medium.txt, or large.txt) and the number of times to process that file. If you don’t have any bugs or memory leaks, this code can be repeated indefinitely with no problems.</p><p>On Unix/Linux/OSX, open another shell and run the top command. While your program is running, watch the value of “RES” or “RPRVT” (resident memory) for your program. If your program is leaking memory, that number will continuously increase and your program will eventually crash. Alternately, on Windows, open the Task Manager (Ctrl-Shift-Esc). Select “View” “Select Columns” and check the box next to “Memory Usage”. View the “Processes” tab. Now when your program is running, watch the value of “Mem Usage” for your program (it may help to sort the programs alphabetically by clicking on the “Image Name” column). If your program is leaking memory, that number will continuously increase.</p><h3 id="Memory-Debuggers"><a href="#Memory-Debuggers" class="headerlink" title="Memory Debuggers"></a>Memory Debuggers</h3><p>We also recommend using a memory debugging tool to find errors. Information on installation and use of the memory debuggers “Dr. Memory” (available for Linux/MacOSX/Windows) and “Valgrind” (available for Linux/OSX) is presented on the course webpage.</p><p>The homework submission server is configured to run your code with Dr. Memory to search for memory problems. Your program must be memory error free to receive full credit.</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>Do all of your work in a new folder named hw3 inside of your Data Structures homeworks directory. Use good coding style when you design and implement your program. Be sure to make up new test cases and don’t forget to comment your code! Please use the provided template README.txt file for any notes you want the grader to read.</p>]]></content>
    
    <summary type="html">
    
      实现Jagged Array, 一种不定长数组。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CSE510-Database-Management-System</title>
    <link href="https://tk1307993.coding.me/CSE510-Database-Management-System.html"/>
    <id>https://tk1307993.coding.me/CSE510-Database-Management-System.html</id>
    <published>2022-10-22T07:27:22.000Z</published>
    <updated>2022-10-22T07:31:57.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>The version of the MiniBase I have distributed to you implements various modules of a relational database management system. Our goal this semester is to use these modules of MiniBase as building blocks for implementing a user preference sensitive DBMS to support e-commerce applications:</p><p>S. Borzsony, D. Kossmann and K. Stocker, “The Skyline operator,” Proceedings 17th International Conference on Data Engineering, Heidelberg, Germany, 2001, pp. 421-430, doi: 10.1109/ICDE.2001.914855.<br>Chomicki J., Godfrey P., Gryz J., Liang D. (2005) Skyline with Presorting: Theory and Optimizations. In: Kopotek M.A., Wierzcho S.T., Trojanowski K. (eds) Intelligent Information Processing and Web Mining. Advances in Soft Computing, vol 31. Springer, Berlin, Heidelberg.<br>K.L. Tan, P.K. Eng and B. C. Ooi. “Efficient Progressive Skyline Computation.” 27th Int. Conference on Very Large Data Bases (VLDB), Roma, Italy, 301-310, September 2001.</p><h3 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h3><p>The following is a list of tasks that you need to perform for this phase of the project: Note that getting these working may involve other changes to various modules not described below.</p><h4 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h4><p>Create a new tuple comparison method, Dominates,<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> Dominates(Tuple t1,</span><br><span class="line">                         AttrType[] type1,</span><br><span class="line">                         Tuple t2,</span><br><span class="line">                         AttrType[] type2,</span><br><span class="line">                         <span class="keyword">short</span> len_in,</span><br><span class="line">                         <span class="keyword">short</span>[] str_sizes,</span><br><span class="line">                         <span class="keyword">int</span>[] pref_list,</span><br><span class="line">                         <span class="keyword">int</span> pref_list_length)</span><br></pre></td></tr></table></figure></p><p>which returns</p><p>1 if t1 dominates t2 in the list of preference attributes<br>0 otherwise.<br>Create a new tuple comparison method, CompareTupleWithTuplePref,<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> CompareTupleWithTuplePref(Tuple t1,</span><br><span class="line">                                         AttrType[] type1,</span><br><span class="line">                                         Tuple t2,</span><br><span class="line">                                         AttrType[] type2,</span><br><span class="line">                                         <span class="keyword">short</span> len_in,</span><br><span class="line">                                         <span class="keyword">short</span>[] str_sizes,</span><br><span class="line">                                         <span class="keyword">int</span>[] pref_list,</span><br><span class="line">                                         <span class="keyword">int</span> pref_list_length)</span><br></pre></td></tr></table></figure></p><p>which returns</p><p>0 if they are equal<br>1 if the tuple, t1, is greater<br>-1 if the tuple, t1, is smaller<br>on the “sum” of their preference attributes.</p><h4 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h4><p>Modify Sort in such a way that the tuples are sorted according to the new CompareTupleWithTuplePref on their preference attributes:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SortPref(AttrType[] in,</span><br><span class="line">         <span class="keyword">short</span> len_in,</span><br><span class="line">         <span class="keyword">short</span>[] str_sizes,</span><br><span class="line">         Iterator am,</span><br><span class="line">         TupleOrder sort_order,</span><br><span class="line">         <span class="keyword">int</span>[] pref_list,</span><br><span class="line">         <span class="keyword">int</span> pref_list_length,</span><br><span class="line">         <span class="keyword">int</span> n_pages)</span><br></pre></td></tr></table></figure><p>Here, pref list is the list of attributes that are going to be used for preference sorting, pref list length is the number of preference attributes, and n pages is the number of buffer frames (each of the size of a single disk page) allocated for this operation.</p><h4 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h4><p>Implement NestedLoopsSky BlockNestedLoopsSky and SortFirstSky iterators, which compute skylines</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NestedLoopsSky(AttrType[] in1, <span class="built_in">int</span> len_in1, short[] t1_str_sizes,</span><br><span class="line">               <span class="built_in">Iterator</span> am1, java.lang.<span class="built_in">String</span></span><br><span class="line">               relationName, <span class="built_in">int</span>[] pref_list, <span class="built_in">int</span> pref_list_length,</span><br><span class="line">               <span class="built_in">int</span> n_pages)</span><br><span class="line"></span><br><span class="line">BlockNestedLoopsSky(AttrType[] in1, <span class="built_in">int</span> len_in1, short[] t1_str_sizes,</span><br><span class="line">                    <span class="built_in">Iterator</span> am1, java.lang.<span class="built_in">String</span></span><br><span class="line">                    relationName, <span class="built_in">int</span>[] pref_list, <span class="built_in">int</span> pref_list_length,</span><br><span class="line">                    <span class="built_in">int</span> n_pages)</span><br><span class="line"></span><br><span class="line">SortFirstSky(AttrType[] in1, <span class="built_in">int</span> len_in1, short[] t1_str_sizes,</span><br><span class="line">             <span class="built_in">Iterator</span> am1, java.lang.<span class="built_in">String</span></span><br><span class="line">             relationName, <span class="built_in">int</span>[] pref_list, <span class="built_in">int</span> pref_list_length,</span><br><span class="line">             <span class="built_in">int</span> n_pages)</span><br></pre></td></tr></table></figure><h4 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h4><p>Implement a BTreeSky iterator which computes skylines using BTrees on individual preference attributes.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">BTreeSky</span>(<span class="selector-tag">AttrType</span><span class="selector-attr">[]</span> <span class="selector-tag">in1</span>, <span class="selector-tag">int</span> <span class="selector-tag">len_in1</span>, <span class="selector-tag">short</span><span class="selector-attr">[]</span> <span class="selector-tag">t1_str_sizes</span>,</span><br><span class="line">         <span class="selector-tag">Iterator</span> <span class="selector-tag">am1</span>, <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.String</span></span><br><span class="line">         <span class="selector-tag">relationName</span>, <span class="selector-tag">int</span><span class="selector-attr">[]</span> <span class="selector-tag">pref_list</span>, <span class="selector-tag">int</span><span class="selector-attr">[]</span> <span class="selector-tag">pref_list_length</span>,</span><br><span class="line">         <span class="selector-tag">IndexFile</span><span class="selector-attr">[]</span> <span class="selector-tag">index_file_list</span>,</span><br><span class="line">         <span class="selector-tag">int</span> <span class="selector-tag">n_pages</span>)</span><br></pre></td></tr></table></figure><p>Related publication [Borzsonyi et al. 2001]. This operator will assume that the BTree indexes on the preference attributes have already been created.</p><h4 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h4><p>Implement a BTreeSortedSky iterator which computes skylines using a combined BTree on preference attributes.<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BTreeSortedSky(AttrType[] in1, <span class="built_in">int</span> len_in1, short[] t1_str_sizes, <span class="built_in">int</span></span><br><span class="line">               <span class="built_in">Iterator</span> am1, java.lang.<span class="built_in">String</span></span><br><span class="line">               relationName, <span class="built_in">int</span>[] pref_list, <span class="built_in">int</span>[]</span><br><span class="line">               pref_list_length, IndexFile index_file,</span><br><span class="line">               <span class="built_in">int</span> n_pages)</span><br></pre></td></tr></table></figure></p><h4 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h4><p>Implement a program which, given a data file [format described below], stores and indexes the data in<br>Minibase. The program should then let the user specify attributes that will be used for skyline computation and the number of memory pages available for the operation.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input data format:</span> <span class="comment"># of attributes in the first line, followed by rows of values between 0.0 and 1.0. For example</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0.4</span> <span class="number">0.6</span> <span class="number">0.2</span> <span class="number">0.8</span></span><br><span class="line"><span class="number">0.3</span> <span class="number">0.4</span> <span class="number">0.2</span> <span class="number">0.4</span></span><br><span class="line"><span class="string">.....</span> <span class="string">or</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0.100</span> <span class="number">0.345</span> <span class="number">0.3456</span></span><br><span class="line"><span class="number">0.2345</span> <span class="number">0.222</span> <span class="number">0.347</span></span><br><span class="line"><span class="string">....</span></span><br></pre></td></tr></table></figure></p><p>The program should output both the resulting skylines and the number of read and write pages accesses during the operation (see Task 7).</p><p>Note: You may need to modify the Minibase BTree index structure to support creation of a combined BTree index on preference attributes.</p><p>Note: The operators that you are implementing cannot use more buffer frames than specified in the input.</p><h4 id="Task-7"><a href="#Task-7" class="headerlink" title="Task 7"></a>Task 7</h4><p>Modify Minibase disk manager in such a way that counts the number of reads and writes. One way to do this is as follows:</p><p>First create add pcounter.java, where<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> diskmgr;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PCounter</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> rcounter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> wcounter;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rcounter = <span class="number">0</span>;</span><br><span class="line">wcounter = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rcounter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">wcounter++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>into your code.</p><p>Then, modify the read_page() and write_page() methods of the diskmgr to increment the appropriate counter upon a disk read and write request.</p><h3 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h3><p>You will be provided with a sample data set. You have to return the following before the deadline:<br>Your source code properly commented, tared and ziped.<br>The output of your program with the provided test data and the driver.<br>A report which describes who did what. This will be taken very seriously! So, be honest. Be prepared to explain on demand (not only your part) but the entire set of modifications. See the report specifications.<br>A confidential document (individually submitted by each group member) which rates group members’ contributions out of 10 (10 best; 0 worst). Please provide a brief explanation for each group member.</p>]]></content>
    
    <summary type="html">
    
      按照要求实现Database Management System中的功能。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>CSCI1200-DVD-Preference-Lists</title>
    <link href="https://tk1307993.coding.me/CSCI1200-DVD-Preference-Lists.html"/>
    <id>https://tk1307993.coding.me/CSCI1200-DVD-Preference-Lists.html</id>
    <published>2022-10-21T01:14:42.000Z</published>
    <updated>2022-10-21T01:16:12.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment you will write a program to manage the physical DVD media inventory of Netflix and ship DVDs to customers according to their specified movie preferences. Your program will handle several different operations: adding a number of copies of a DVD to the inventory, signing up a new customer with their initial preferences, shipping DVDs to the customers, restocking DVDs as they are returned by customers, modifying the customer preference lists, and printing information about specific DVDs and customers. We provide the code to parse an input file that specifies these operations. Furthermore, we provide the core implementation of the DVD shipping algorithm. You will use the STL list class heavily in your implementation of this program. Please carefully read the entire assignment before beginning your implementation.</p><p>The input for the program will come from a file and the output will also go to a file. These file names are specified by command-line arguments. Here’s an example of how your program will be called:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">preferences</span><span class="selector-class">.exe</span> <span class="selector-tag">requests</span><span class="selector-class">.txt</span> <span class="selector-tag">results</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>The form of the input is relatively straightforward. Each request begins with a keyword token. There are eight different requests, described below. You may assume that the input file strictly follows this format (i.e., you don’t need to worry about error checking the formatting). Here is a sample input file and the corresponding output file:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">requests small.txt                      results small.txt</span><br><span class="line">dvd <span class="string">"Into the Wild"</span> 3                   3 copies of <span class="string">"Into the Wild"</span> added</span><br><span class="line">dvd <span class="string">"Forrest Gump"</span> 2                    2 copies of <span class="string">"Forrest Gump"</span> added</span><br><span class="line">dvd <span class="string">"Gone with the Wind"</span> 2              2 copies of <span class="string">"Gone with the Wind"</span> added</span><br><span class="line">dvd <span class="string">"Raiders of the Lost Ark"</span> 1         1 copy of <span class="string">"Raiders of the Lost Ark"</span> added</span><br><span class="line">dvd <span class="string">"Toy Story"</span> 3                       3 copies of <span class="string">"Toy Story"</span> added</span><br><span class="line">customer Carol Adams 4                  new customer: Carol Adams</span><br><span class="line">  <span class="string">"Raiders of the Lost Ark"</span>             new customer: Kim Smith</span><br><span class="line">  <span class="string">"Gone with the Wind"</span>                  new customer: Wayne Evans</span><br><span class="line">  <span class="string">"Forrest Gump"</span>                        Ship DVDs</span><br><span class="line">  <span class="string">"Into the Wild"</span>                         Carol Adams receives <span class="string">"Raiders of the Lost Ark"</span></span><br><span class="line">customer Kim Smith 3                      Kim Smith receives <span class="string">"Into the Wild"</span></span><br><span class="line">  <span class="string">"Raiders of the Lost Ark"</span>               Carol Adams receives <span class="string">"Gone with the Wind"</span></span><br><span class="line">  <span class="string">"Into the Wild"</span>                         Kim Smith receives <span class="string">"Gone with the Wind"</span></span><br><span class="line">  <span class="string">"Gone with the Wind"</span>                    Carol Adams receives <span class="string">"Forrest Gump"</span></span><br><span class="line">customer Wayne Evans 1                  Carol Adams returns <span class="string">"Forrest Gump"</span></span><br><span class="line">  <span class="string">"Raiders of the Lost Ark"</span>             Kim Smith returns <span class="string">"Into the Wild"</span></span><br><span class="line">ship                                    Ship DVDs</span><br><span class="line">return_newest Carol Adams                 Carol Adams receives <span class="string">"Into the Wild"</span></span><br><span class="line">return_oldest Kim Smith                 Carol Adams returns <span class="string">"Into the Wild"</span></span><br><span class="line">add_preference Carol Adams <span class="string">"Toy Story"</span>  Ship DVDs</span><br><span class="line">ship                                      Carol Adams receives <span class="string">"Toy Story"</span></span><br><span class="line">return_newest Carol Adams               Carol Adams has 3 movies:</span><br><span class="line">ship                                      <span class="string">"Raiders of the Lost Ark"</span></span><br><span class="line">print_customer Carol Adams                <span class="string">"Gone with the Wind"</span></span><br><span class="line">print_customer Wayne Evans                <span class="string">"Toy Story"</span></span><br><span class="line">print_dvd <span class="string">"Toy Story"</span>                   Wayne Evans has <span class="literal">no</span> movies</span><br><span class="line">print_dvd <span class="string">"Gone with the Wind"</span>            preference list:</span><br><span class="line">                                            <span class="string">"Raiders of the Lost Ark"</span></span><br><span class="line">                                        <span class="string">"Toy Story"</span>:</span><br><span class="line">                                          1 copy checked out <span class="keyword">and</span> 2 copies available</span><br><span class="line">                                        <span class="string">"Gone with the Wind"</span>:</span><br><span class="line">                                          2 copies checked out</span><br></pre></td></tr></table></figure></p><p>And here are the details on each command:</p><p>dvd “movie title” copies Adds the specified number of copies of this movie DVD to the inventory. Movie titles may consist of one or more words, so they are always placed in double quotes. If the movie is already in the inventory, simply add more copies to the record.<br>customer first_name last_name num_movies “1st movie” “2nd movie” … “nth movie” Each customer is described by two strings, their first and last names. The name is followed by an integer, the number of movies in their initial ranking, and then the titles of those movies in preference order. Your program should print a warning message if a customer of this name is already stored in the system or if the movie preference list contains duplicates, or includes movies not in the DVD inventory.<br>add_preference first_name last_name “movie_title” This command allows the customer to add an additional movie to their preference list. The new request is added at the end of their preference list. A customer is allowed to request a movie they have already been shipped and returned. Your program should print a warning message if the customer already has this movie in their preference list, if no customer with this name exists in the system, or the movie is not in the DVD inventory.<br>ship This command simulates the shipment algorithm that is run once a day. The customers are organized by priority to receive a new movie. Higher priority goes to customers who have been waiting longer since they last received a new movie. The customers are examined in priority order. For each customer, if they do not already hold three movies (Netflix’s original cap on the number of movies a customer could hold at one time) and they have at least one movie in their preference list, the algorithm attempts to ship them a movie. The algorithm looks through their preference list in order, from first choice down to last choice and ships the first movie that has at least one copy available (not held by another customer). If the customer is shipped a movie, the customer priority queue is rearranged to put this customer at the back. If none of their requested movies are available, the customer stays where they are in the queue. The algorithm repeats until each customer either has three movies or no copies of their requested movies are available.<br>return_oldest first_name last_name<br>return_newest first_name last_name These two commands examine the movies currently held by the specified customer and return either the DVD they have held the longest (oldest), or the DVD they received most recently (newest). When a DVD is returned, that copy is again available to be shipped out to another customer. Your program should print a warning message if no customer with this name exists in the system, or if the specified customer does not currently have any DVDs.<br>print_customer first_name last_name Prints the DVDs currently held by the specified customer (in order from oldest to newest) and prints the DVDs remaining in the customer’s preference list (from first choice through last). A warning message is printed if no customer by this name exists. For extra credit: When the “–analysis” command line argument is specified, customer satisfaction information for this customer is printed.<br>print_dvd “movie title” For the specified movie, prints the number of available copies and the number of copies currently held by customers. A warning message is printed if no movie with this name is in the inventory. For extra credit: When the optional “–analysis” command line argument is specified, rental information about this movie is printed.<br>All of the normal output of the program, as well as warning messages about invalid requests, are saved to the output file specified on the command line. Note: Warning messages do not cause the program to crash or exit.</p><p>Extra Credit<br>For extra credit, analyze the performance of the algorithm in satisfying customer requests. For example: How many movies were shipped to each customer? What percentage of DVD shipments were the customer’s first choice? How many days was each customer waiting while holding fewer than 3 DVDs, with at least one DVD on their list, but no DVD was shipped to them? How many times was each movie title shipped?</p><p>How many people request each movie title? Use the optional argument “–analysis” to specify that this additional information should be printed with each customer and DVD. Your code should also summarize the overall performance of the algorithm after processing the last request in the input file.</p><p>Discuss in your README.txt an alternate algorithm that you believe would better satisfy the customer demand. Implement your new algorithm and run the same customer satisfaction analysis. Paste the summary output information into your README.txt file and discuss your conclusions. Your new shipping algorithm should run when the optional command line argument “–improved” is specified:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">preferences</span><span class="selector-class">.exe</span> <span class="selector-tag">requests</span><span class="selector-class">.txt</span> <span class="selector-tag">results</span><span class="selector-class">.txt</span> <span class="selector-tag">--analysis</span> <span class="selector-tag">--improved</span></span><br></pre></td></tr></table></figure></p><h3 id="Assignment-Requirements-Hints-and-Suggestions"><a href="#Assignment-Requirements-Hints-and-Suggestions" class="headerlink" title="Assignment Requirements, Hints, and Suggestions"></a>Assignment Requirements, Hints, and Suggestions</h3><p>You may not use vectors or arrays for this assignment. Use STL lists instead. You may not use maps, or sets, or things we haven’t seen in class yet.<br>We have provided a partial implementation of this program, focusing on input parsing and the DVD shipping algorithm. There are member function calls to our versions of the DVD and Customer classes, so you can deduce how some of the member functions in our solution work. You are strongly encouraged to examine this code carefully and follow the interfaces suggested in the provided code.<br>In your README.txt file, provide an order notation analysis of each operation assuming d different movie DVD titles, an average or maximum of k copies of each DVD, c customers, and an average or maximum of p movies ranked on each customer’s preference list.<br>Do all of your work in a new folder named hw4 inside of your homeworks directory. Use good coding style when you design and implement your program. Be sure to make up new test cases to fully test your program and don’t forget to comment your code! Use the template README.txt to list your collaborators, your time spent on the assignment, and any notes you want the grader to read. You must do this assignment on your own, as described in the “Collaboration Policy &amp; Academic Integrity” handout. If you did discuss the problem or error messages, etc. with anyone, please list their names in your README.txt file.</p>]]></content>
    
    <summary type="html">
    
      练习list的使用方法，编写DVD租赁店铺程序。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CSC108-Phrase-Puzzler</title>
    <link href="https://tk1307993.coding.me/CSC108-Phrase-Puzzler.html"/>
    <id>https://tk1307993.coding.me/CSC108-Phrase-Puzzler.html</id>
    <published>2022-10-18T03:36:16.000Z</published>
    <updated>2022-10-18T00:45:43.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This handout explains the problem you are to solve, and the tasks you need to complete for the assignment. Please read it carefully.</p><h3 id="Goals-of-this-Assignment"><a href="#Goals-of-this-Assignment" class="headerlink" title="Goals of this Assignment"></a>Goals of this Assignment</h3><p>Use the Function Design Recipe to plan, implement, and test functions.<br>Write function bodies using variables, numeric types, strings, and conditional statements. (You can do this whole assignment with only the concepts from Weeks 1, 2, and 3 of the course.)<br>Learn to use Python 3, Wing 101, provided starter code, a checker module, and other tools.</p><h3 id="Phrase-Puzzler"><a href="#Phrase-Puzzler" class="headerlink" title="Phrase Puzzler"></a>Phrase Puzzler</h3><p>In this assignment, you’ll be writing a Phrase Puzzler game. To see how the game is played, please watch the demo below.</p><p>The video demonstrates playing the one-player version of the game, but your code will eventually also have a two-player human vs. human version and also a human vs. computer version.</p><p>If you have trouble viewing the video above, you can click here to watch it on MS Stream (Links to an external site.).</p><h3 id="Starter-code"><a href="#Starter-code" class="headerlink" title="Starter code"></a>Starter code</h3><p>For this assignment, we are giving you some files, including Python starter code files. Please download the Assignment 1 filesand extract/unzip the zip file.</p><p>There are three starter code Python files, two sample text input files, and a Python program that helps you check (not fully test!) your solutions for Python style violations:<br>puzzler_functions.py<br>This file contains constants for you to use in your code, a provided function (is_game_over), and the complete docstrings (but not the function bodies) for the first two functions you are to write. Note that we have provided extra docstring examples for these functions to help you, however you only need to write two for your own docstrings.<br>You can find the full table of functions to implement below. Your job is to complete this file.<br>puzzler.py<br>This is the main program. You will not modify this file (with one exception stated in the next section), and you will not submit it. Rather, you will run this file to play the Phrase Puzzler game. Please note that puzzler.py depends on functions you will write in puzzler_functions.py, so this program won’t run properly until you’ve implemented the functions.<br>puzzles_small.txt and puzzles.txt<br>Each of these files contains puzzle phrases used by puzzler.py to select a puzzle for a game and also to provide a pool of phrases that the computer player “knows”. You may want to use puzzles_small.txt when you are in the beginning of developing and debugging your solution, and puzzles.txt to play the game.<br>To change which of these files you are using, edit the string that the constant DATA_FILE refers to inpuzzler.py. This is the only change you should make topuzzler.py.<br>a1_checker.py<br>This is a checker program that you should use to check your code. See below for more information about a1_checker.py.<br>There are some other files and folders in the zip file. You do not need to do anything with them, other than leave them where they are.</p><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><p>Constants are special variables whose values should not change once assigned. A different naming convention (uppercase pothole) is used for constants, so that programmers know to not change their values. For example, in the starter code, the constant CONSONANT_POINTS is assigned the value 1 at the beginning of the module and the value of CONSONANT_POINTS should never change in your code. When writing your code, if you need to use the number of points awarded for a guessed consonant, you should use CONSONANT_POINTS. The same goes for the other constant values.</p><p>Using constants simplifies code modifications and improves readability and changeability. For example, if we later decide to use a different character to represent a hidden index in our puzzle, we would only have to make a change in one place (the HIDDEN assignment statement), rather than throughout the program. This also makes our code more readable – whether we use’^’or any other character to represent a hidden index, we write our code using the constant HIDDEN so it is clear to the reader what we mean.</p><h3 id="More-about-the-Phrase-Puzzler-program"><a href="#More-about-the-Phrase-Puzzler-program" class="headerlink" title="More about the Phrase Puzzler program:"></a>More about the Phrase Puzzler program:</h3><p>Two strings are used to represent information about a Phrase Puzzler puzzle:<br>puzzleis made up of alphabetic and non-alphabetic characters (e.g., spaces, punctuation, and digits). An example puzzle string is ‘e-mail inbox’.<br>view is the current view of the puzzle as seen by the players. In it, the alphabetic characters are either displayed (if they have been revealed) or hidden (using a special character (a caret’^’by default), if they have not yet been revealed). Non-alphabetic characters (spaces, punctuation, and digits) are always displayed. For example, at the beginning of the game, the view string for the puzzle above would be (with a caret to represent a hidden character):’^-^^^^ ^^^^^’.<br>As the game progresses and players guess letters to be revealed, the view is updated. Continuing with the example above, if the player guesses “m”, the view becomes’^-m^^^ ^^^^^’and then if “i” is guessed, it becomes’^-m^i^ i^^^^’.<br>There are three types of games that your program will play: human, human vs human, and human vs computer. We will use the constants HUMAN,HUMAN_HUMAN, and HUMAN_COMPUTER respectively, to represent the type of game being played.<br>When a player guesses a consonant, each occurrence of that consonant in the puzzle earns a certain number points for that player: the value of the constant CONSONANT_POINTS. If a player correctly guesses a consonant, they play again in the next turn. If the guess is incorrect, the turn goes to the next player (in a two-player game).<br>Players have to pay to guess a vowel. The cost does not depend on the number of occurrences of the vowel, and is always equal to the value of the constant VOWEL_PRICE. Thus, guessing a vowel decreases the player’s points. A player is not allowed to guess a vowel if they do not have sufficient points to pay for it. After paying to guess a vowel, the player plays again if the vowel is in the puzzle. If the guessed vowel is not in the puzzle, the turn goes to the next player (in a two-player game).<br>When a player solves the puzzle, CONSONANT_BONUS bonus points are added to their score for each occurrence of a consonant that is still HIDDEN.<br>All puzzles are always lower-case. That is, the puzzles will not contain any upper-case letters.<br>You should read the constants defined at the top of puzzler_functions.py carefully to understand the purpose of each defined constant. You must use these constants in your code and NOT the literal values. For example, you must use HIDDEN instead of’^’.</p><h3 id="What-to-do"><a href="#What-to-do" class="headerlink" title="What to do"></a>What to do</h3><p>In the starter code file puzzler_functions.py, complete the following function definitions. Use the Function Design Recipe that you have been learning in this course. We have included the type contracts in the following table; please read through the table to understand how the functions will be used.<br>We will be evaluating your docstrings in addition to your code. Please include two examples in your docstrings. You will need to paraphrase the full descriptions of the functions to get an appropriate docstring description.</p><h3 id="Using-Constants"><a href="#Using-Constants" class="headerlink" title="Using Constants"></a>Using Constants</h3><p>As we discuss in section Constants above, your code should make use of the provided constants. If the value of one of those constants were changed, and your program rerun, your functions should work with those new values.</p><p>For example, if CONSONANT_POINTS were changed, then your functions should work according to the new number of bonus points that should be earned for guessing a consonant. Using constants in your code means that this happens automatically.</p><p>Your docstring examples should reflect the given values of the constants in the provided starter code, and do not need to change.</p><h3 id="Preconditions"><a href="#Preconditions" class="headerlink" title="Preconditions"></a>Preconditions</h3><p>You can assume that your functions will be called with arguments as described in the table above. For example, you can assume that is_human will only be passed one of the three constants representing the type of game being played.<br>If this hand out states that a parameter represents a particular value, then you can assume that will be the case and you do not need to state it as a precondition.</p><h3 id="No-Input-or-Output"><a href="#No-Input-or-Output" class="headerlink" title="No Input or Output"></a>No Input or Output</h3><p>Your puzzler_functions.py file should contain the starter code, plus the function definitions specified above. puzzler_functions.py must not include any calls to the print and input functions. Do not add any import statements. Also, do not include any function calls or other code outside of the function definitions.</p><h3 id="How-should-you-test-whether-your-code-works"><a href="#How-should-you-test-whether-your-code-works" class="headerlink" title="How should you test whether your code works"></a>How should you test whether your code works</h3><p>First, run the checker and review ALL output you may need to scroll. You should also test each function individually by writing code to verify your functions in the Python shell. For example, after defining functionis_human, you might call it from the shell (e.g.,is_human(‘Player One’, ‘HC’)) to check whether it returns the right value (True). One call usually isn’t enough to thoroughly test the function for example, we should also testis_human(‘Player Two’, ‘HC’) where it must return False.</p><h3 id="Running-the-checker-program-on-Markus"><a href="#Running-the-checker-program-on-Markus" class="headerlink" title="Running the checker program on Markus"></a>Running the checker program on Markus</h3><p>In addition to running the checker program on your own computer, run the checker on MarkUs as well. You will be able to run the checker program on MarkUs once every 12 hours (note: we may have to revert to every 24 hours if MarkUs has any issues handling every 12 hours). This can help to identify issues such as uploading the incorrect file.</p><p>First, submit your work on MarkUs. Next, click on the “Automated Testing” tab and then click on “Run Tests”. Wait for a minute or so, then refresh the webpage. Once the tests have finished running, you’ll see results for the Style Checker and Type Checker components of the checker program (see both the Automated Testing tab and results files under the Submissions tab). Note that these are not actually marks – just the checker results. This is the same checker that we have provided to you in the starter code. If there are errors, edit your code, run the checker program again on your own machine to check that the problems are resolved, resubmit your assignment on MarkUs, and (if time permits) after the 24 hour period has elapsed, rerun the checker on MarkUs.</p>]]></content>
    
    <summary type="html">
    
      完善一个Puzzler游戏，补全函数。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>CS345-Blockchain</title>
    <link href="https://tk1307993.coding.me/CS345-Blockchain.html"/>
    <id>https://tk1307993.coding.me/CS345-Blockchain.html</id>
    <published>2022-10-14T03:36:16.000Z</published>
    <updated>2022-10-14T03:37:36.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>In this lab we are going to get an old block from the BitCoin block chain and demonstrate how any changes would be caught by the BitCoin network.</p><p>Connect to a peer in the P2P BitCoin network and get the block number that corresponds to your SU<br>ID number (your number modulo 650000).<br>Display the transactions in the block.<br>Have your program manipulate one of the transactions in the block to change its output account, then fix up the block to correctly represent this modified data (fix the merkle-tree hashes, etc.).<br>Then show with a program-generated report how the hash of the block has changed and the ways in which this block would be rejected by peers in the network.<br>Program written in Python 3 with no use of publicly available BitCoin libraries (except as shown below).<br>Use TCP/IP to communicate with a full node in the network.<br>Submit the program in the usual way on cs1 , all in one file,<br>Start by reading about blockchains in general, the original paper the developer documentation (<a href="https://bitcoin.org/bitcoin.pdf" target="_blank" rel="noopener">https://bitcoin.org/bitcoin.pdf</a>) , and (<a href="https://bitcoin.org/en/developer-reference" target="_blank" rel="noopener">https://bitcoin.org/en/developer-reference</a>) .</p><h3 id="Getting-Connected"><a href="#Getting-Connected" class="headerlink" title="Getting Connected"></a>Getting Connected</h3><p>To get a list of bitcoin nodes, use makeseeds (<a href="https://github.com/bitcoin/bitcoin/tree/master/contrib/seeds" target="_blank" rel="noopener">https://github.com/bitcoin/bitcoin/tree/master/contrib/seeds</a>) . You may need to install dnspython for this to work (</p><p>[NOTE: On Windows, the command is usually python and on a Mac python3 . The -W directive is to get around their use of a deprecated method in the DNS resolver library. The process can take 5 minutes or more.]</p><p>Pick nodes from that are not onion nodes (<a href="https://en.wikipedia.org/wiki/Onion_routing" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Onion_routing</a>) and just choose one at random that is currently working. You may have to try several before you get a working node. You can leave the host you are using hard-coded in your submitted program.</p><h3 id="Guidance"><a href="#Guidance" class="headerlink" title="Guidance"></a>Guidance</h3><p>Here is the beginning dialog I recorded with one of the BitCoin peers:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">sending MESSAGE</span><br><span class="line">(110) f9beb4d976657273696f6e0000000000560000003b9840b27f11010000000000000000007833d25d0000000001000000000000000000000000000000<span class="built_in">..</span>.</span><br><span class="line">  HEADER</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">    f9beb4d9                         MAGIC</span><br><span class="line">    76657273696f6e0000000000         COMMAND: version</span><br><span class="line">    56000000                         PAYLOAD size: 86</span><br><span class="line">    3b9840b2                         checksum (verified)</span><br><span class="line">  VERSION</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">    7f110100                         version 70015</span><br><span class="line">    0000000000000000                 my services</span><br><span class="line">      7833d25d00000000                 epoch time Mon, 18 Nov 2019 06:00:24 GMT</span><br><span class="line">    0100000000000000                 your services</span><br><span class="line">    00000000000000000000ffff5c3fc0d1 your host 92.63.192.209</span><br><span class="line">    8d20                             your<span class="built_in"> port </span>8333</span><br><span class="line">    0000000000000000                 my services (AGAIN)</span><br><span class="line">    00000000000000000000FFFF0A000048 my host 10.0.0.72</span><br><span class="line">    9ee8                             my<span class="built_in"> port </span>59550</span><br><span class="line">    0000000000000000                 nonce</span><br><span class="line">    00                              <span class="built_in"> user </span>AGENT size 0</span><br><span class="line">                                    <span class="built_in"> user </span>AGENT <span class="string">''</span></span><br><span class="line">    00000000                         START height 0</span><br><span class="line">    00                               RELAY <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">received MESSAGE</span><br><span class="line">(126) f9beb4d976657273696f6e000000000066000000c6d922107f1101000d040000000000007833d25d0000000000000000000000000000000000000000<span class="built_in">..</span>.</span><br><span class="line">  HEADER</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">    f9beb4d9                         MAGIC</span><br><span class="line">    76657273696f6e0000000000         COMMAND: version</span><br><span class="line">    66000000                         PAYLOAD size: 102</span><br><span class="line">    c6d92210                         checksum (verified)</span><br><span class="line">  VERSION</span><br><span class="line">  ------------------------------------------------------</span><br><span class="line">    7f110100                         version 70015</span><br><span class="line">    0d04000000000000                 my services</span><br><span class="line">    7833d25d00000000                 epoch time Mon, 18 Nov 2019 06:00:24 GMT</span><br><span class="line">    0000000000000000                 your services</span><br><span class="line">    00000000000000000000ffff4961e4ed your host 73.97.228.237</span><br><span class="line">    e89e                             your<span class="built_in"> port </span>40680</span><br><span class="line">    0d04000000000000                 my services (AGAIN)</span><br><span class="line">    00000000000000000000000000000000 my host 0.0.0.0</span><br><span class="line">    0000                             my<span class="built_in"> port </span>0</span><br><span class="line">    C1F685008A419236                 nonce</span><br><span class="line">    10                              <span class="built_in"> user </span>AGENT size 16</span><br><span class="line">    2F5361746F7368693A302E31382E302F<span class="built_in"> user </span>AGENT <span class="string">'/SATOSHI:0.18.0/'</span></span><br><span class="line">    A4380900                         START height 604324</span><br><span class="line">    01                               RELAY <span class="literal">True</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      搭建开源BitCoin节点，完成实验内容。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
  </entry>
  
  <entry>
    <title>CS345-Algorithms</title>
    <link href="https://tk1307993.coding.me/CS345-Algorithms.html"/>
    <id>https://tk1307993.coding.me/CS345-Algorithms.html</id>
    <published>2022-10-11T00:28:30.000Z</published>
    <updated>2022-10-10T17:50:34.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exercise-01"><a href="#Exercise-01" class="headerlink" title="Exercise 01"></a>Exercise 01</h3><h4 id="About"><a href="#About" class="headerlink" title="About"></a>About</h4><p>The PerformanceTest program in the empirical package, contains three methods that implement the algorithms(solutions) for computing the range of numbers in an array.</p><p>For this exercise, we will look at algorithm performance by observing which of the three algorithm runs the fastest. We will compare each algorithm using data sets that increase in size. This performance is determined by running the algorithm and measuring how long it takes to complete each data set in milliseconds (ms).</p><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><p>The range is the difference between the highest and lowest numbers in the array.</p><h4 id="Algorithm-1-Range-1"><a href="#Algorithm-1-Range-1" class="headerlink" title="Algorithm 1 : Range$1"></a>Algorithm 1 : Range$1</h4><p>Description: This algorithm uses nested loops to examine every pair of elements in the array, computing their difference and remembering the largest difference found.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">maxDiff = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (each index <span class="built_in">i</span>)</span><br><span class="line">  <span class="keyword">for</span> (each index <span class="built_in">j</span>)</span><br><span class="line">    update maxDiff, <span class="keyword">if</span> elements <span class="built_in">i</span> and <span class="built_in">j</span> differ more than <span class="built_in">max</span>.</span><br></pre></td></tr></table></figure><h4 id="Algorithm-2-Range-2"><a href="#Algorithm-2-Range-2" class="headerlink" title="Algorithm 2 : Range$2"></a>Algorithm 2 : Range$2</h4><p>Description: This algorithm reduces the amount of computations performed by disregarding one of the (i, j) and (j, i) pairs, that give identical comparisons. It still uses nested loops to examine every pair of elements in the array but now only once, computes their difference and remembering the largest difference found.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">maxDiff = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (each index <span class="built_in">i</span>)</span><br><span class="line">  <span class="keyword">for</span> (each index <span class="built_in">j</span> = <span class="built_in">i</span> + <span class="number">1</span>)</span><br><span class="line">    update maxDiff, <span class="keyword">if</span> elements <span class="built_in">i</span> and <span class="built_in">j</span> differ more than <span class="built_in">max</span>.</span><br></pre></td></tr></table></figure><h3 id="Algorithm-3-Range-3"><a href="#Algorithm-3-Range-3" class="headerlink" title="Algorithm 3 : Range$3"></a>Algorithm 3 : Range$3</h3><p>Description: This algorithm uses a loop to find the largest value and smallest value in the array, compute their difference and return this difference.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">max</span> = element[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">min</span> = <span class="built_in">max</span></span><br><span class="line"><span class="keyword">for</span> (each index <span class="built_in">i</span>)</span><br><span class="line">  <span class="built_in">find</span> <span class="built_in">max</span>.</span><br><span class="line">  <span class="built_in">find</span> <span class="built_in">min</span>.</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span> - <span class="built_in">min</span></span><br></pre></td></tr></table></figure><h4 id="Analysis-Questions"><a href="#Analysis-Questions" class="headerlink" title="Analysis/Questions"></a>Analysis/Questions</h4><p>Instructions: Answer the questions on in a document/spreadsheet and submit to your github repository.<br>Download and examine the L2_Range_RunTimes EXCEL file, which contains the location to populate the run time data of the three (3) algorithms listed above. There are three (3) different spreadsheets, one for each algorithm. Note the fourth (4th) spreadsheet combines the data for all three algorithms on one graph, however, algorithm 3 uses the secondary scale at top and right of graph.</p><p>Run the PerformanceTest program and input the out of the show run time for the data sets listed for each of the range algorithms in L2_Range_RunTimes EXCEL file.<br>If you are experiencing an OutOfMemoryError : Java heap space for your PerformanceTest program. This is possibly due to your Java Virtual Machine (JVM) needing more memory to run this application. A quick fix for this might be to do the following: Go to Run &gt; Run Configurations &gt; select PerformanceTest from left window &gt; select (x) = Arguments<br>Type in the box below in the VM arguments window: -Xmx3200m.<br>This sets a 3.2GB allocation, which should be enough, but if you need more you can just replace 3200 with a larger number like 3800 etc…<br>What do observe for each of the algorithms shown with their corresponding data set? Can you tell which algorithm was the most efficient?<br>For algorithms 1 and 2, did reducing the amount of computations by half improve the runtime significantly? Explain your reasoning, if you felt it had a small or large change.<br>For algorithms 2 and 3, did reducing the number of loops improve the runtime significantly? Explain your reasoning, if you felt it had a small or large change.</p><h3 id="Exercise-02"><a href="#Exercise-02" class="headerlink" title="Exercise 02"></a>Exercise 02</h3><h4 id="About-1"><a href="#About-1" class="headerlink" title="About"></a>About</h4><p>The Fibonacci sequence/series is a mathematical model that is often used in numeric optimization. It is based on a sequence of numbers in which the first two numbers in the series are 0 and 1, and each subsequent number is the sum of the previous two numbers.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">n</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">value:</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span><span class="string">...</span></span><br></pre></td></tr></table></figure></p><p>Update the recursive method fib to compute the Fibonacci value of n, in FibonacciTest of<br>L2_AlgorithmsLab. This should be the Fibonacci sequence solution in its most basic form.<br>Modify the program FibonacciTest so that it finds the number of times the fib method is called. Use a static variable to keep track of the calls and increment it every time the method is called.<br>Create a performance test, similar to that shown for the ranges in Activity 1 for the method in Question 1 for fib(50). Plot 5-6 (five to six) data points in your L2_Range_RunTimes EXCEL file , what do you observe? Are the results as expected? How does this fit with the theoretical model of the series?<br>The code in Question 1 was inefficient, because it takes too many recursive calls. It ends up re- computing each Fibonacci number many times. This code runs very slow for even relatively small values of n. It can take minutes or hours to compute even the 40 th or 50 th Fibonacci number on certain computers. Write a new version of the Fibonacci method _fib that is still recursive but is more efficient than the one in Question 1. Do this by creating a helper method that accepts an additional parameter, the storage for the previous Fibonacci numbers, that you can carry through and modify during each recursive call.<br>Write a new version of the Fibonacci method fbn that uses iteration to generate the result for the nth value in the Fibonacci sequence.<br>Update the program FibonacciTest to run a similar empirical tests for the three Fibonacci sequence algorithms in this activity (Q1, Q4, Q5) and update your L2_Range_RunTimes EXCEL file to show the results.</p><h3 id="Exercise-03"><a href="#Exercise-03" class="headerlink" title="Exercise 03"></a>Exercise 03</h3><p>About<br>A fractal is a geometric figure that is recursively constructed i.e. it can be divided into parts, each of which is a reduced-size copy of the whole. In fact, when one observes a fractal shape, one observes that the shape contains smaller versions of itself, so that it looks similar at all magnifications.</p><p>In this activity, we will describe a recursive method for drawing various levels of a Sierpinski triangle. A Sierpinski triangle (named after a famous Polish mathematician), is a fractal that is composed of infinitely many sub-triangles. We cannot draw the actual fractal, because it is composed of infinitely many sub-triangles, but we can write a method that produces a number of levels that approximates the actual fractal.</p>]]></content>
    
    <summary type="html">
    
      分析比较不同算法之间的性能。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>ENSC251-CPU-Simulator</title>
    <link href="https://tk1307993.coding.me/ENSC251-CPU-Simulator.html"/>
    <id>https://tk1307993.coding.me/ENSC251-CPU-Simulator.html</id>
    <published>2022-10-08T00:28:30.000Z</published>
    <updated>2022-10-08T00:30:50.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>Students will develop an in-order, fully functional C++ CPU simulator that executes appropriately binary-formatted programs. The CPU supports flexible hardware structures and program parameters, may run in debug or execution mode, and provides performance statistics on executed programs. The simulator will be coded and realized using various classes and structures in C++’s Standard<br>Template Library (STL).</p><h3 id="Background-Information"><a href="#Background-Information" class="headerlink" title="Background Information"></a>Background Information</h3><h4 id="CPU-Simulator"><a href="#CPU-Simulator" class="headerlink" title="CPU Simulator"></a>CPU Simulator</h4><p>Object-oriented programmers are often required to code simulators that model a simulated representation of a physical system. In this project, we will simulate a simple in-order Central Processing Unit (CPU) which will replicate very basic processor functionality in software. We will recreate various parts of the CPU and observe its states, instruction, and data-flow using a Debug Mode. This will allow us to trace instructions as they flow through the CPU to ensure proper functionality, while obtaining an appreciation for computer architecture. Once the simulator is completely coded and bug free, it may be run in execution mode, reflecting al terminal environment where the program will be executed on a simulated CPU.</p><p>There are numerous CPU simulators that have been created over the past decades. Many of the simulators are designed either for 1) educational purposes, or 2) for research/commercial purposes.</p><p>In the context of education, CPU simulators are mainly used to study single and multi-processor systems, where one may tune various parameters to view performance effects of design choices, and study CPU structure optimization. In the context of research/commercial simulators, computer architects must first simulate a physical system and observe potential performance gains before proceeding to create the actual hardware system and fabricating the chip. If performance is negligible, another route or design must be considered. Since tuning or redesigning a simulator is associated with minimal in cost in comparison to fabricating a processor chip (that may or may not work), simulators are widely used as a gateway for determining performance potential before proceeding to the actual hardware design.</p><p>The CPU simulator we will be designing in this project will not be modeling a complete physical system: a computing system comprises of many layers beyond the scope of this project. Instead, we will be simulating a very simple CPU for educational purposes, however the processor will still be capable of executing various programs and obtaining respective performance statistics from varying parameters. You may refer to this simulator and CPU design principles in your future engineering courses as well, such as ENSC254 and ENSC350.</p><h4 id="Overview-of-a-simple-CPU-pipeline"><a href="#Overview-of-a-simple-CPU-pipeline" class="headerlink" title="Overview of a simple CPU pipeline"></a>Overview of a simple CPU pipeline</h4><p>An instruction which enters a CPU is processed incrementally in a series of steps. All instructions are assigned a number, or ID, as they enter the CPU. Our CPU is an in-order processor, meaning that instructions must be processed in the order which they enter the CPU. Therefore instructions must be identified using a numbering system to process instructions in-order; the younger the instruction, the greater the instruction’s ID value.</p><p>The series of steps required to execute an instruction is referred to as a pipeline. Since each instruction is divided and processed in a series of steps, several successive instructions may overlap in the pipeline at a given time.</p><p>Our CPU consists of two memory units: 1) instruction memory which contains all the programs instructions, and 2) a register file, which holds the program’s variable data (data is signed integers)</p><p>Consider the CPU as an assembly line for processing instructions with the following stages:</p><h5 id="Instruction-Fetch-IF"><a href="#Instruction-Fetch-IF" class="headerlink" title="Instruction Fetch (IF)"></a>Instruction Fetch (IF)</h5><p>The first step is to read an instruction of our program (fetched) from instruction memory according to the address specified by a variable (or “register” in hardware terminology) called the Program Counter (PC). The PC is incremented every time an instruction is fetched from the instruction memory. Therefore, the value held by the PC dictates the location, or address, of the next instruction to be read from the instruction memory. We will assume the first instruction of a program is located at PC=0, where instruction_memory[0] contains the first instruction that will be fetched and processed in the pipeline.</p><p>A “fetch width” parameter may be specified as well, indicating the number of instructions that may be obtained from instruction memory simultaneously at a given time. One unit of time is referred to as a clock cycle in CPU terminology.</p><h5 id="Instruction-Decode-ID"><a href="#Instruction-Decode-ID" class="headerlink" title="Instruction Decode (ID)"></a>Instruction Decode (ID)</h5><p>Once an instruction is fetched, it is decoded according to the processor’s Instruction Set Architecture (ISA). The ISA stipulates the CPU’s supported “instruction set” i.e. instruction operations and their formats recognized and used by the processor to interpret instructions. The decoding process allows the CPU to extract information from the fetched instruction. Specifically, the decoder extracts an instruction’s i) input data locations to be read from the register file (referred to as source operands), ii) operation, and iii) the output destination/location where the result will be written to in the register file.</p><p>Once the instruction’s information is extracted, it is placed in two separate CPU structures: 1) Instruction Queue (IQ), and 2) Retire/Commit Buffer, or more commonly referred to as the Reorder Buffer (ROB).</p><p>The IQ is a finite entry queue which buffers instructions until they are ready for execution. An instruction is ready once all its source operands are marked as “valid”.</p><p>The ROB is a finite FIFO list which manages and ensures the safe eviction or “retirement” of instructions from the pipeline after execution. This retirement process is completed during the Retirement / Commit stage. The ROB has a much bigger role in complex CPUs, as its name implies, however in the context of our project, the ROB will only be used to guarantee that the instructions are executed and released from the pipeline in the order from which they were fetched.</p><p>Instruction fetch and decode will be performed as one step in our CPU simulator.</p><h5 id="Dispatch-Read-Execute-Writeback-Rd-EXE-WB"><a href="#Dispatch-Read-Execute-Writeback-Rd-EXE-WB" class="headerlink" title="Dispatch/Read/Execute/Writeback (Rd/EXE/WB)"></a>Dispatch/Read/Execute/Writeback (Rd/EXE/WB)</h5><p>The term issue, interchangeable with the term dispatch, is the process of releasing an instruction from the IQ and proceeding to execution.</p><p>In this step, instructions in the IQ wait until all previous instruction have been issued. An instruction may be issued once all of its source operands are ready to be read from the register file, and resources are available for execution.</p><p>Accordingly in this second pipeline stage, when an instruction is ready in the IQ: i) the instruction is released from the IQ (dispatch) , ii) its input operands are read from the register file, the iii) operation is executed using source operand data, iv) the result is written back to the register file at the instruction’s specified destination register, and v) the destination register is broadcasted to the IQ to inform younger instructions that the contents in the register are ready to be read.</p><p>The CPU will implement all 5 of these substeps as one pipeline stage in the CPU simulator. More details pertaining to each step of this multi-step process are provided below:</p><p>Dispatch (Issue): The instructions in the IQ are monitored for operand readiness. Since instructions are dependent on one another, a “consumer” instruction can not execute before a “producer” instruction has finished executing. For instance:<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Instruction <span class="number">1</span>: Z = A + B; (<span class="string">"produces"</span> results of <span class="keyword">variable</span> Z)</span><br><span class="line">Instruction <span class="comment">2: C = Z + F</span>; (<span class="string">"consumes"</span> the contents of <span class="keyword">variable</span> Z)</span><br></pre></td></tr></table></figure></p><p>As the example illustrates, Instruction 2 can not execute until the contents of Z are computed and written to the variable Z, signifying that instruction 1 must first execute. Instruction 2 may thereafter proceed in the next cycle to read the contents of the Z operand and executed its operation. Consequently, these two instructions can not dispatch nor execute in the same cycle due to this read-after-write (RAW) dependency. We refer to this issue validation process as monitoring an instruction for “valid” operands.</p><p>Once a given instruction’s operands are valid, the instruction may be dispatched (or “issued”) for execution. Since we are implementing an in-order CPU, this implies that the oldest instruction in the IQ must be ready for execution, implementing a FIFO (First-In, First-Out) scheme; if the oldest instruction is not ready, subsequent younger instructions can not proceed to execute even if they have valid operand data.</p><p>An “ISSUE_WIDTH” parameter may also be specified at this stage, indicating the maximum number of ready/valid in-order instructions that the may execute on the CPU in one clock cycle. This also implies that there are “ISSUE_WIDTH” number of functional units that exist to execute the instructions simultaneously. If multiple execution units exist, the processor model is referred to as Superscalar.</p><p>Read: As previously mentioned, the working set of program variables are held in the register file. Registers are the fastest access memory in a computing system, yet the most expensive to implement.</p><p>Once an instruction is dispatched, an instruction’s source operands must be read from the register file to obtain their respective data values. For instance, in the example above, variable Z is associated with a value, let’s say 5. This value must be read from the register file, and hence Z represents a memory address which holds the data content of our variable. In this case, Z would represent an address (or location) in the register file which must be accesses to obtain the value of the variable. In the case of our CPU simulator, we use a finite set of numbered “registers” representing our program variables, which are named with the prefix “r”. We will work with a set of 16 registers, and our operands will be named r0, r1… r15 accordingly.</p><p>Execute: Once the input operand contents have been read from the register file, they are passed to an Arithmetic Logic Unit (ALU). The ALU is a functional unit which performs a specified input operation on the values input to the unit. Our CPU’s ALU takes 3 inputs: two input operands, and a code representing the operation to be performed on the input values, referred to as an opcode. Based on this information, the ALU computes the operation on the input operand values, and produces an output result.</p><p>Writeback: The result generated by the ALU is redirected and written back to the register file, at the address specified by the “destination” operand extracted from the instruction at decode.</p><p>Once the contents have been written, the instruction is marked in the ROB as valid.</p><h5 id="Retirement-Commit"><a href="#Retirement-Commit" class="headerlink" title="Retirement/Commit"></a>Retirement/Commit</h5><p>Retiring an instruction refers to the safe eviction of an instruction from the pipeline. As mentioned previously, the role of the ROB is to guarantee that the instructions are executed and released from the pipeline in the order from which they were fetched. Accordingly, in the Commit stage, the ROB’s head entry, considering a FIFO list structure, is accessed first. If the head of the list is valid, i.e. has been successfully executed, then it may be safely popped from the ROB. Once popped, the instruction is no longer present in the pipeline. If it is not valid, then it must wait in the ROB until it has been successfully executed.</p><p>A “COMMIT_WIDTH” parameter may also be specified in the CPU which indicates how many valid in-order instructions may be popped off the list simultaneously.</p><p>Referring back to Fig. 1, it is evident that since instructions are processed in a series of stages, assuming a FETCH_WIDTH and ISSUE_WIDTH of 1 instruction, up to three instructions may be in the midst of being processed by the CPU pipeline simultaneously. As FETCH_WIDTH and ISSUE_WIDTH parameter increase, it is possible that the CPU may increase performance as more instructions exist in the pipeline. This however depends on the number of RAW dependencies and “branch” instructions inherit of the program.</p><h4 id="Instruction-Set-Architectures-ISA"><a href="#Instruction-Set-Architectures-ISA" class="headerlink" title="Instruction Set Architectures (ISA)"></a>Instruction Set Architectures (ISA)</h4><p>The ISA is a functional definition of the operations, instruction encodings, and storage that must be supported by a given processor. The role of the ISA is to divide labour between hardware and software1, allowing for universal software compatibility across various generations and styles of processor models.<br>Using the ISA, the programmer may design a software program which is compiled and converted to a set of instructions encoded for a given ISA as machine language. The processor which supports the target ISA obtains the formatted instructions and executes the software program. Thus, the ISA acts as a hardware/software interface allowing programmers and computer architects to work independently with the same computing objective.</p><p>The simulated CPU designed in this project will abide by an Instruction Set Architecture (ISA) referred to as the Two Fifty One (TFO) ISA. Instructions are read as machine language by the CPU, which we will interpret as assembly language in this document. For our sake, the general format for reading assembly is as follows: operation destination_reg, operand_source1, operand_source2<br>For instance, if an assembly statement were written as follows: add r5, r6, r7</p><p>This would translate to r5 = r6+r7, where our variables are expressed in terms of register locations.</p><p>Side Note: A word on binary for those who have not yet taken ENSC252: A binary number is expressed in the base-2 numeral system, and represents a decimal number as a set of 1s and 0s. Each 1 or 0 digit in a binary number is referred to as a bit. Depending on the position of the bit, b i , a given decimal number may be expressed using the following formula, assuming a binary number consisting of n bits.</p><p>Where bit i may only take the value of 1 or 0 and is multiplied by a power of 2 depending on the location of the digit. The left most bit represents the most significant bit/value, whereas the right-most bit signifies the least significant bit. If you were given the binary number “01010” for instance, this would equate to the decimal value.</p><p>The TFO ISA supports four instruction type formats: 1) Register type (R-type), 2) Immediate type (I-type),</p><p>3) Jump type (J-type) and 4) Prompt type (P-type). The instruction format type may be obtained from the two left-most bits (or Most Significant Bits (MSB) 31 and 30) of the given instruction as shown below. Instructions are represented in this section in binary.</p><p>All programs and their respective instructions will be provided to you for this project as unsigned integers.<br>To extract each instruction’s information, the unsigned integer must be converted to its binary equivalent, and processed as a string of 1s and 0s, each digit referred to as a bit. The bits must be decoded as shown above to obtain the field encodings, depending on the type of instruction extracted from bits[31,30]. Specifications for each instruction format are provided here.</p><p>If an instruction’s left most bits are “00”, the instruction is processed by the decoder as an R-Type instruction. Rtype instructions only operate on registers. In this case, both source operands must be read from the register file. The address of the input operands src1 and src2 may be obtained from instruction bits 20 through 16, and 15 through 11, respectively. The bits 29 through 26 represent the opcode operation performed on the input operand data, which are all passed to the functional unit during execute. Once the instruction has executed, the result is written back to the dest register specified in bits 25 through 21. Bits 10 through 0 remain unused for this instruction type.</p><p>Supported instructions: add, sub, mult, div, mod, mov (see Table I for specific formats and descriptions)</p><p>A special type of instruction is also supported by R-Types, called print, which prints the src1 value to standard output (cout). This is used to present the user with the program’s final result.</p><p>If an instruction’s left most bits are “01”, the instruction is processed by the decoder as an I-Type instruction. I-type instructions have one register source operand, and one 16bit immediate source operand. The address of the input operand src1 is obtained from bits 20 through 16, and the immediate value from bits 15 through 0, respectively. In the case, only one value must be read from the register file, and the second operand will be the immediate value extracted from the instruction, passed directly to the ALU. Bits 29 through 26 represent the opcode (operation code) to be passed to the functional unit during execute. Once the instruction is executed, the result is written back to the dest register specified in bits 25 through 21.</p><p>Note that there are special types of I-type instructions in the TFO ISA, referred to as branches, which redirect a program’s flow. More details and processing specifications of these types of I-instructions will be provided in the next section for a full elaboration on the topic.</p>]]></content>
    
    <summary type="html">
    
      用C++实现一个CPU的简易指令模拟器，需要使用STL库。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="STL" scheme="https://tk1307993.coding.me/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>CS6300-Basic-Java-Coding-And-JUnit</title>
    <link href="https://tk1307993.coding.me/CS6300-Basic-Java-Coding-And-JUnit.html"/>
    <id>https://tk1307993.coding.me/CS6300-Basic-Java-Coding-And-JUnit.html</id>
    <published>2022-10-06T01:42:12.000Z</published>
    <updated>2022-10-06T01:43:50.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>This assignment assesses your basic knowledge of Java and JUnit, which you will need for future assignments and projects.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>To complete the assignment, you must complete the following tasks:<br>Clone your individual GitHub repository in your local workspace. This is the same repository that you used for the previous assignment and will use for all future individual assignments.<br>Download the archive assignment3.tar.gz<br>Extract the archive in the root directory of the repository, which will create a directory called Assignment3 and several subdirectories. Hereafter, we will refer to the directory Assignment3 in your local repo as dir . (If you do not know how to extract a “tar.gz” archive, you should be able to find plenty of resources on how to do that online–ask on Piazza otherwise.)<br>Directory src contains, in a suitable directory, Java interface MyCustomStringInterface . It also contains an exception class MyIndexOutOfBoundsException , which is used by the interface.<br>Directory test contains, in a suitable directory, a template JUnit test class MyCustomStringTest .<br>dir/lib/junit-4.12.jar and dir/lib/hamcrest-core-1.3.jar, JUnit and Hamcrest libraries to be used for the assignment.<br>Your first task is to develop a Java class called MyCustomString that suitably implements the MyCustomStringInterface interface that we provided. (The semantics of the methods in the interface should be obvious from their name, the JavaDoc comments in the code, and the test examples in class MyCustomStringTest–ask on Piazza otherwise.) Class MyCustomString should be in the same package as the interface and should also be saved under [dir]/src/edu/seclass .<br>Your second task is to develop a set of JUnit 4 test cases for class MyCustomString by completing the provided template test class MyCustomStringTest , which contains 3 complete test cases and 13 to-be-completed test cases. For each test case in class MyCustomStringTest whose body simply consists of the placeholder “ fail(“Not yet implemented”); “, you must do the following:<br>Replace the placeholder instruction with a meaningful test case for the corresponding method , which is indicated in the comments and name of the test.<br>Replace the text “ [Add test description here] “ in the test comment with a concise description of the purpose of the test (e.g., “Count strings in an empty string”) without modifying anything else in the comment and making sure that your comment consists of a single line (i.e., does not contain newlines) and does not contain quotes or other special characters.<br>Make sure that every test method has a suitable oracle (i.e., either an assertion or an expected exception) and that the tests are not trivial (i.e., are not a copy of the provided one and have a specific purpose). In other words, each test should (1) test a specific piece of the functionality, and (2) check that such a piece of functionality behaves as expected.<br>It should be obvious, but please also make sure that all the test cases you created pass when run against your code.<br>In addition, at least two of the tests that you develop must result in an expected exception (e.g., NullPointerException ). When testing for an expected exception, make sure to use the “ @Test(expected = <exception class>) “ notation (e.g., @Test(expected = NullPointerException.class) ), rather than catching the exception within the test body.</exception></p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>To submit your solution, you should:</p><p>Commit dir and push it to the individual remote GitHub repository we assigned to you . Make sure not to push your work to any other repo, especially public ones. In the best case, you may end up submitting a commit ID we cannot find. In the worst case, you may be violating the honor code.<br>Make also sure to commit and push the provided libraries (lib directory). To do so, you may need to force add the jar files (i.e., “ git add -f lib/* “), which are typically excluded by the “ .gitignore “ file.<br>Submit on gradescope a file, called submission.txt that contains, in two separate lines (1) your GT username and (2) the commit ID for your submission. For example, the content of file submission .txt for George P. Burdell could look something like the following: submission.txt<br>As soon as you submit, your assignment will be graded by compiling your code and running it against both your test cases and a set of test cases, written by the instructors. All tests must pass. 1 After that, which should take a few minutes at most, you will see a report with your grade and some corresponding feedback. The feedback should be self-explanatory (e.g., “ERROR: You have 16 tests instead of 15.”), but please let us know otherwise.<br>The grade you will see on gradescope is your actual grade for the assignment , unless we find some issues with your submission (e.g., hardcoding of the results, identical tests, or similar).<br>You can resubmit as many times as you want before the deadline , so you have a chance to address issues with your assignments if gradescope finds an issue with your submission.</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Make sure to submit only the test cases in the template and do not add extra tests. If you feel compelled to add additional tests, feel free to do so in a separate test file, which you can add to your repo but won’t be graded.<br>Do not use any external library other than the provided JUnit 4 and the associated<br>Hamcrest library. You can obviously use all the standard JDK libraries, 2 and you really should not need any external one.<br>You cannot modify any of the following:<br>The provided interface ( MyCustomStringInterface )<br>The already provided test cases (except for those that you are supposed to implement, obviously, whose body is simply “ fail(“Not yet implemented”) “).<br>The test class name, the names of the test cases, and the test comments, except for replacing “ [Add test description here] “ with a concise description of the purpose of the test. (We understand that it may be advisable to use more meaningful names for the tests, but having numbered tests helps the grading.)<br>The declaration of mycustomstring in the test class.<br>You should use Java version 11 or 12 to solve the assignment.<br>Before submitting, make sure to compile and run your test cases as a group (not only individually) and to check that they all pass. Although gradescope performs the same checks, it is much faster to do that locally, on your machine, beforehand.<br>Verify that your final commit ID contains what you intend, and is pushed to the repository, by cloning it in a separate location or viewing it on github.<br>More specifically, you can check that you committed and pushed all the files you needed by doing the following:<br>Clone a fresh copy of your personal repo in another directory<br>Go to directory Assignment3 in this fresh clone<br>Compile your code.<br>Run your tests. Again, from a Unix-like shell<br>You can perform multiple commits as you produce your solution. This is not only fine, but actually very much encouraged.<br>We also encourage you to use a “development” branch and merge your stable version(s) into the “master” branch. If interested, see this site for an example of a possible branching model of this kind. (There are many others.)<br>From this point on in the course, you should NOT run the git repository reset commands given in Assignment 2, any version of force –push , or any commands deleting branches, tags, or prior commits on your repository, as these commands could cause you to lose prior work.</p>]]></content>
    
    <summary type="html">
    
      练习JUnit的使用方法，实现代码功能并完成覆盖率测试。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS20-Karatsuba-Algorithm</title>
    <link href="https://tk1307993.coding.me/CS20-Karatsuba-Algorithm.html"/>
    <id>https://tk1307993.coding.me/CS20-Karatsuba-Algorithm.html</id>
    <published>2022-10-04T04:40:21.000Z</published>
    <updated>2022-10-04T04:41:55.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task-Description"><a href="#Task-Description" class="headerlink" title="Task Description"></a>Task Description</h3><p>You should carry out this work as a group of 2 students. You should work together but each student has to do their own submission to the websubmission system and marks will be automatically allocated individually.<br>You are asked to use C++ to implement</p><ul><li>School Method for Integer Addition</li><li>Karatsuba Algorithm for Integer Multiplication</li></ul><h3 id="Submission-Guideline"><a href="#Submission-Guideline" class="headerlink" title="Submission Guideline"></a>Submission Guideline</h3><p>You must follow this guideline! Your submission will be marked automatically. Failure to follow this guideline will result in 0.<br>Your submission should contain exactly one file: main.cpp. You do not need to submit a design.</p><p>Your program takes one line as input. The input line contains three integers separated by spaces. Let the three integers be “I1 I2 B”. I1 and I2 are both nonnegative integers up to 100 digits long. B represents I1 and I2’s base (B is from 2 to 10).</p><p>Your program should output the sum of I1 and I2, using the school method, then the product of I1 and I2, using the Karatsuba algorithm. The results should still use base B. Please separate the results using one space.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Sample input 1:</span> <span class="number">101</span> <span class="number">5</span> <span class="number">10</span></span><br><span class="line"><span class="attr">Sample output 1:</span> <span class="number">106</span> <span class="number">505</span></span><br><span class="line"><span class="attr">Sample input 2:</span> <span class="number">10</span> <span class="number">111</span> <span class="number">2</span></span><br><span class="line"><span class="attr">Sample output 2:</span> <span class="number">1001</span> <span class="number">1110</span></span><br></pre></td></tr></table></figure></p><h3 id="Marking"><a href="#Marking" class="headerlink" title="Marking"></a>Marking</h3><p>Marking will be done automatically. We trust that you’d indeed implement the school method for addition and the Karatsuba algorithm for multiplication. We will randomly pick some submissions to verify whether it is the case. If you use other methods in your submission, it will be considered cheating and you will receive 0.</p><p>Submit to Websubmission before the above deadline. The websubmission system for this assignment will be open on 6 August. Websubmission will run an automatic testing script immediately after each submission. Your mark is simply the fraction of test cases that you pass. E.g., if there are 100 test cases, and your code passes 78 of them, then your mark is 78/100. You can submit as many times as you want. The last submission before the deadline will be your “official” submission.</p><h3 id="SVN-Instructions"><a href="#SVN-Instructions" class="headerlink" title="SVN Instructions"></a>SVN Instructions</h3><p>First of all, you need to create a directory under version control.<br>To check out a working copy, type svn checkout.</p><p>SVN helps keeping track of file changes (over different commits). You should commit your work early and often.</p><h3 id="Websubmission"><a href="#Websubmission" class="headerlink" title="Websubmission"></a>Websubmission</h3><p>You are asked to submit via the web interface. The submission steps should be self-explanatory. Simply choose the correct semester, course, and assignment. The websubmission system will automatically fetch the latest version of your work from your SVN repository (you may also choose to submit older versions). Once your work is submitted, the system will launch a script checking the format of your submission. Click “View Feedback” to view the results. You are welcome to resubmit for as many times as you wish (before the deadline).</p><p>We will compile your code using g++ -o main.out -O2 -Wall main.cpp. It is your responsibility to ensure that your code compiles on the university system.</p>]]></content>
    
    <summary type="html">
    
      使用C++完成Karatsuba Algorithm算法的实现。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>DSA2020-Zombie-Simulator</title>
    <link href="https://tk1307993.coding.me/DSA2020-Zombie-Simulator.html"/>
    <id>https://tk1307993.coding.me/DSA2020-Zombie-Simulator.html</id>
    <published>2022-10-01T11:34:07.000Z</published>
    <updated>2022-10-01T11:35:34.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1-Zombie-Simulator-recommended-readings-1-3-1-4"><a href="#Question-1-Zombie-Simulator-recommended-readings-1-3-1-4" class="headerlink" title="Question 1 - Zombie Simulator (recommended readings 1.3, 1.4)"></a>Question 1 - Zombie Simulator (recommended readings 1.3, 1.4)</h3><p>Using the UML below, create a class called Human which represents a human being whom can walk around a simulated world.<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Human</span><br><span class="line"><span class="meta"># x,y : double</span></span><br><span class="line"><span class="meta"># dx,dy : double</span></span><br><span class="line"><span class="meta"># size : double</span></span><br><span class="line"><span class="meta"># isAlive : boolean</span></span><br><span class="line">+ world_width, world_height : <span class="keyword">int</span></span><br><span class="line">---------------------------------</span><br><span class="line"><span class="meta"># max_speed : double</span></span><br><span class="line"><span class="meta"># sightDistance : int</span></span><br><span class="line"><span class="meta"># generator : Random</span></span><br><span class="line"><span class="meta"># others : List&lt;Human&gt;</span></span><br><span class="line">---------------------------------</span><br><span class="line">+ Human(others:List&lt;Human&gt;, x:<span class="keyword">double</span>, y:<span class="keyword">double</span>)</span><br><span class="line">+ run(): <span class="keyword">void</span></span><br><span class="line">+ getX(): <span class="keyword">double</span></span><br><span class="line">+ getY(): <span class="keyword">double</span></span><br><span class="line">+ getSize() : <span class="keyword">double</span></span><br><span class="line">+ kill() : <span class="keyword">void</span></span><br><span class="line">+ draw(g : Graphics) : <span class="keyword">void</span></span><br></pre></td></tr></table></figure></p><p>Each Human can run as a separate thread and maintains an x,y position with periodic movements using dx, dy which change slightly after a number of iterations. A Human can be instantiated using an initial position and a list of all other humans in the world. A Human can be drawn using the draw method and passing a Graphics object around its x,y position and size. There are also a static public fields which can be set to determine the size of the world in which humans roam.</p><p>Create a Zombie class which extends a Human. Try to work out what Human fields/methods should be overridden. A Zombie has a sight distance of the entire panel and will actively seek and search out the nearest human, it will then alter its dx,dy movements towards the closest human for a fixed period of time before checking if there is any other targets it could possibly chase. A Zombie can only move half of the max speed as a human. If a Zombie manages to catch a human it will bite and kill the human.</p><p>Modify the human class so that it tries to move away from the closest zombie within its sight distance by modifying its dx,dy speed. A Human sight distance is only of the world size.</p><p>Create a GUI called ZombieSimulator with two buttons, starting either a zombie or a human as a thread. The GUI should periodically redraw all Human and Zombie objects moving within the world. It should maintain a single thread safe data structure for all Zombie and Human objects. It should also periodically check if a human has been killed by a zombie, in which case it re-instantiates the object as a new Zombie thread. See below for an example screenshot, where zombies are red squares and humans’ blue circles.</p><p>Feel free to add any private/protected helper methods across any of the classes which you feel would improve the design of your program and play with any of the formula constants (eg sight distance, max speed, sleep time) to improve the feel of the simulator.</p><h3 id="Question-2-Skip-List-Set-recommended-readings-2-2"><a href="#Question-2-Skip-List-Set-recommended-readings-2-2" class="headerlink" title="Question 2 - Skip List Set (recommended readings 2.2)"></a>Question 2 - Skip List Set (recommended readings 2.2)</h3><p>A skip list data structure is a modification of a singly linked list so that the add, contains, and remove methods are O(log2 n). Essentially it consists of a series of singly-linked lists L0, L1, …, Lk, usually visualized one on top of another with L0 at the bottom. The list L0 holds all the (nonnull) elements of the collection in order with null at the start and end of the list. Each list Li+1 holds a subset of the previous list Li and has links from each element down to the same element in the previous list. These links enable elements in the collection to be found more efficiently than by just traversing the list L0. The illustrated skip list holds three elements e0, e1, e2 in comparable order:</p><p>When an element is added to the skip list it is first randomly decided in how many of the lists it will appear (it is always placed in the list L0, and if in a list Li it has a 50-50 chance of also being in Li+1 and so on). Then the correct insertion place is found in the topmost list to which it will be added (which might result in a new top list being created), and then working downward it is added to each of the lists below. An element is found by starting at the top list (referenced by firstNode), following the next links until either the element is found, the end of the list would be reached, or else the element would be passed. If not yet found, a down link is followed to continue the process with the list below. To remove an element the element should be removed from each list in which it appears (starting with the topmost list).</p><p>Using the UML below as a guide, prepare a class called SkipListSet that extends AbstractSet (and so implements the Set interface) using a skip list data structure and the following UML diagram as a guide. Include a suitable main method which effectively tests your skip list implementation.</p><p>A screenshot of an example test is shown below, note that for convenience and debugging purposes the skip list toString prints all node elements on each level.</p><h3 id="Question-3-Deque-implementations-recommended-readings-3-3"><a href="#Question-3-Deque-implementations-recommended-readings-3-3" class="headerlink" title="Question 3 - Deque implementations (recommended readings: 3.3)"></a>Question 3 - Deque implementations (recommended readings: 3.3)</h3><p>A deque (pronounced deck) or double-ended queue, is a linear collection that allows insertion and removal at both ends. The interface above called DequeADT, available from Blackboard, is an abstract data type which can hold any generic element E, it also describes operations for a deque.</p><p>Create two data structure implementations of the Deque, one which uses an underlying array called ArrayDeque and one which uses an underlying dynamic doubly-linked structure called DoublyLinkedDeque. Implement the deque data structures yourself, do not use extra Java Collection classes!</p><p>For efficiency first, last, enqueueRear, enqueueFront, dequeueRear, dequeueFront, clear, size, and isEmpty should all be O(1) operations. Feel free to add any necessary private helper methods and a suitable toString which returns a string representation for your deque implementation.</p><p>Further enhance your classes to make sure all methods are safe from unexpected events using appropriate exception handling (example, if user code tries to remove something from the deque when empty, it should throw an appropriate exception). Create a test class with a suitable main method which effectively tests all operations on one or both deque implementations.</p><p>See the screenshot below for an example of testing one of the deque implementations.</p><h3 id="Question-4-Bitwise-Radix-Sort-recommended-readings-3-5-3-6"><a href="#Question-4-Bitwise-Radix-Sort-recommended-readings-3-5-3-6" class="headerlink" title="Question 4 - Bitwise Radix Sort (recommended readings 3.5, 3.6)"></a>Question 4 - Bitwise Radix Sort (recommended readings 3.5, 3.6)</h3><p>Radix sort is a sorting algorithm that focuses on sorting parts that comprise the number rather than the whole number directly. Usually it can only be used on fixed digit or character inputs such as post codes or county codes. Radix sort focusses on each digit/char at a time and placing it in a desired queue shared with other parts of the same value. After all elements are queued, it polls all elements back into an original list. It repeats this process k times where k is the amount of digits/chars that comprise the element. However, if we had to sort a single digit element across a larger range of possibilities (eg Ascii or Unicode values) then a different strategy for radix sort can be utilised at a bit level, instead focussing on the bits which make up the data type.</p><p>Create a simple static method called bitwiseRadixSort which takes a char[] of Unicode values and sorts them looking at the individual bits which form each char data type. Include a main method to test using randomly generated char values as demonstrated with the screenshot below. Note it may be beneficial to print out the Unicode number as well as the printed char so that you know your sort is working.</p>]]></content>
    
    <summary type="html">
    
      完成数据结构作业，包括Zombie Simulator, Skip List Set, Deque以及Redix Sort, 量比较大。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>COMP20003-K-D-Trees</title>
    <link href="https://tk1307993.coding.me/COMP20003-K-D-Trees.html"/>
    <id>https://tk1307993.coding.me/COMP20003-K-D-Trees.html</id>
    <published>2022-09-28T02:08:03.000Z</published>
    <updated>2022-09-28T02:10:30.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this assignment is for you to:</p><p>Increase your proficiency in C programming, your dexterity with dynamic memory allocation and your understanding of more advanced data structures (K-D trees).<br>Increase your understanding of how computational complexity can affect the performance of an algorithm by conducting orderly experiments with your program and comparing the results of your experimentation with theory.<br>Increase your proficiency in using UNIX utilities.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Interactive navigation tools like Google Maps and GPS navigation systems are commonplace, but how do these systems actually work? Spatial datasets can be very large: OpenStreetMap, an opensource global mapping dataset, contains over 10 million points of interest. Various algorithms and data structures have been developed to allow users to quickly search and navigate these large spatial datasets.</p><h3 id="Your-task"><a href="#Your-task" class="headerlink" title="Your task"></a>Your task</h3><p>In this assignment, you will create a K-D tree to support interactive map functionality for the City of Melbourne Census of Land Use and Employment (CLUE) dataset. A user will be able to query locations to find nearby businesses.</p><p>In Assignment 1, you wrote code to read the census data from a file, insert the records as nodes in a linked list, and allow users to search for records by trading name. In this assignment, you should modify your code to insert records into a K-D tree and allow users to search by x,y coordinates. You can use your own Assignment 1 code for this assignment or the sample solution we have provided.</p><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><p>This assignment uses the same dataset as Assignment 1, which is a subset of the Business Establishment Trading Name and Industry Classification 2018 dataset, accessed from: <a href="https://data.melbourne.vic.gov.au/Business/Business-establishment-trading-nameand-industry-c/vesm-c7r2" target="_blank" rel="noopener">https://data.melbourne.vic.gov.au/Business/Business-establishment-trading-nameand-industry-c/vesm-c7r2</a></p><p>The x coordinate and y coordinate columns should be used as the 2-D key to store and query records. The other columns can be treated as the associated data.</p><h3 id="Deliverable-1-Source-code"><a href="#Deliverable-1-Source-code" class="headerlink" title="Deliverable 1 - Source code"></a>Deliverable 1 - Source code</h3><p>Stage 1 - What’s here?<br>In stage 1, you will implement the basic functionality for an interactive map that allows a user to click on locations and retrieve data about the nearest point of interest. Instead of clicks, your code will accept (x,y) pairs from stdin, find the closest business establishment to that location in the dataset, and output the information about that establishment to a file.</p><p>Your Makefile should produce an executable program called map1. This program should take two command line arguments: (1) the name of the data file used to build the tree, and (2) the name of an output file.</p><p>Your map1 program should:</p><p>Construct a K-D tree to store the information contained in the data file specified in the command line argument. Each record (row) should be stored in a separate Node.<br>Handle duplicates (businesses located at exactly the same x,y coordinates) by chaining them together in a linked list connected to a single Node in the K-D tree. Exact duplicate locations should not be added as separate Nodes in the tree.<br>Accept locations queries from stdin and search the tree for the location nearest to the query point. The record(s) of the business(s) at this location should be printed to the output file. If there are multiple businesses at this location, all of them must be included in the output.<br>In addition to outputting the record(s) to the output file, the number of key comparisons performed during the search should be written to stdout.<br>For testing, it may be convenient to create a file of keys to be searched, one per line, and redirect the input from this file. Use the UNIX operator &lt; to redirect input from a file.</p><p>Example input<br>map1 datafile outputfile then type in queries; or<br>map1 datafile outputfile &lt; queryfile<br>Queries should be entered as x,y pairs separated by a space: x y</p><p>Example output<br>Note that the key is output to both the file and to stdout, for identification purposes. Also note that the number of comparisons is only output at the end of the search, so there is only one number for key comparisons per key, even when multiple records have been located for that key.</p><p>The format need not be exactly as above; variations in whitespace/tabs are permitted. The number of comparisons above has been made up, do not take it as an example of a correct execution!</p><h3 id="Stage-2-Radius-search"><a href="#Stage-2-Radius-search" class="headerlink" title="Stage 2 - Radius search"></a>Stage 2 - Radius search</h3><p>In stage 2, you will code a function that allows the user to find all of the business establishments within some distance of a query point. Your code will accept (x,y,radius) triplets from stdin, find all business establishments within the requested radius of the x,y point, and output the information about those establishments to a file.</p><p>Your Makefile should produce an executable program called map2. This program should take two command line arguments: (1) the name of the data file used to build the tree, and (2) the name of an output file.</p><p>Your map2 program should:<br>Construct a K-D tree to store the information contained in the data file specified in the command line argument, exactly as in Stage 1. Note that you can (and should!) reuse your code from Stage 1 to do this step.<br>Accept x,y,radius queries from stdin and search the tree for all locations within the requested radius of the x,y point. These records should be printed to the output file. When there are multiple businesses at the same location, all of these records should be included in the output.<br>If no business establishments are located with the query radius, your code must output the word NOTFOUND.<br>In addition to outputting the above data to the output file, the number of key comparisons performed during the search should be written to stdout.</p><h4 id="Example-input"><a href="#Example-input" class="headerlink" title="Example input"></a>Example input</h4><p>map2 datafile outputfile then type in queries; or<br>map2 datafile outputfile &lt; queryfile<br>Queries should be entered as x,y,radius triplets separated by spaces: x y r</p><p>Example output<br>Note that the key is output to both the file and to stdout, for identification purposes. Also note that the number of comparisons is only output at the end of the search, so there is only one number for key comparisons per key, even when multiple records have been located for that key.</p><p>The format need not be exactly as above; variations in whitespace/tabs are permitted. The number of comparisons above has been made up, do not take it as an example of a correct execution!</p><h3 id="Programming-Style"><a href="#Programming-Style" class="headerlink" title="Programming Style"></a>Programming Style</h3><p>Programming style will be assessed as in Assignment 1 and is worth 2 marks.</p><h3 id="Deliverable-2-Experimentation"><a href="#Deliverable-2-Experimentation" class="headerlink" title="Deliverable 2 - Experimentation"></a>Deliverable 2 - Experimentation</h3><p>You will run various files through your program to test its accuracy and also to examine the number of key comparisons used when searching. We have provided a few different versions of the .csv file that can be used to build the tree. You should test your code with a variety of inputs and report on the number of key comparisons used by your code in Stage 1 and Stage 2. You will compare these results with each other and, importantly with what you expected based on theory (big-O).</p><p>Your experimentation should be systematic, varying the size and characteristics of the files you use (e.g. sorted or random), and observing how the number of key comparisons varies. Repeating a test case with different keys and taking the average can be useful.</p><p>Some useful UNIX commands for creating test files with different characteristics include sort, sort -R (man sort for more information on the -R option), and shuf. You can randomize your input data and pick the first x keys as the lookup keywords.</p><p>If you use only keyboard input for searches, it is unlikely that you will be able to generate enough data to analyze your results. You should familiarize yourself with the powerful UNIX facilities for redirecting standard input (stdin) and standard output (stdout). You might also find it useful to familiarize yourself with UNIX pipes ‘|’ and possibly also the UNIX program awk for processing structured output. For example, if you pipe your output into echo ‘’abc:def’’ | awk -F ‘:’ ‘{print $1}’, you will output only the first column (abc). In the example, -F specifies the delimiter. Instead of using echo you can use cat filename.csv | awk -F ‘;’ ‘{print $1}’ which will print only the first column of the filename.csv file. You can build up a file of numbers of key comparisons using the shell append operator &gt;&gt;, e.x. your command &gt;&gt; file to append to.</p><p>You will write up your findings and submit this report separately from your code. You should present your findings clearly, in light of what you know about the data structures used in your programs and their known computational complexity. Tables and/or graphs are recommended for presenting numeric results. You may find that your results are what you expected, based on theory. Alternatively, you may find your results do not agree with theory. In either case, you should state what you expected from the theory, and if there is a discrepancy you should suggest possible reasons.</p><h3 id="Notes-on-K-D-Trees"><a href="#Notes-on-K-D-Trees" class="headerlink" title="Notes on K-D Trees"></a>Notes on K-D Trees</h3><p>K-D trees are an extension of binary search trees for k-dimensional keys. When searching, each layer of the tree checks a different dimension of the key. In the 2-D case, the root of the tree should consider only the first element of the key (x) and split left or right depending on whether the first element of the search key is less than or greater than the first element of the root’s key. The second layer of nodes should consider only the second element of the key (y). The third layer should consider the first element, etc. To illustrate, consider how the key (6, 0) would be inserted into the K-D tree shown below.</p><p>The root node compares the first elements of the keys and since 6 &gt; 3, it directs the search right. The next node compares the second elements of the keys and since 0 &lt; 2, it directs the search left. The new node (6, 0) is then inserted as a left child.</p><p>Note that it is possible for a key to match an existing node on either x or y but not both. These partial matches are not duplicates and should be inserted as new nodes in the tree. For example, suppose the next node inserted was (2, 8). This would go left from the root because 2 &lt; 3 and be compared to (1, 8). The second element of the keys match: 8 = 8, but the keys are not exactly the same (2, 8) = (1, 8). So (2, 8) could be inserted as either a left or right child of (1, 8) (for consistency with our testing code, please put equal value keys to the right).</p><h4 id="Searching-for-the-nearest-point-to-a-query"><a href="#Searching-for-the-nearest-point-to-a-query" class="headerlink" title="Searching for the nearest point to a query"></a>Searching for the nearest point to a query</h4><p>To find the nearest node to a query point, you will need to search through the tree, keeping track of the closest match found so far, and the squared distance d to that closest match. Start at the root of thepK-D tree. At each node, check the distance between the current node and the query location. If this distance is lower than the current d, replace the current “closest” match with the current node and set d = D. Then compare the current node’s key to the query. (As in insertion, only one element of the node’s key should be compared to the query - for example, at the root node, compare x values only, and in the first layer nodes compare y values only.) Proceed down one or both branches of the tree depending on the distance between the current node’s key and the query:<br>If the current node’s key is &gt; d from the query, proceed down either the left or right branch of the tree depending on whether the query is less or greater than the current node’s key.<br>If the current node’s key is &lt;= d from the query, proceed down both branches of the tree.<br>These two cases are illustrated in the images below. In this example, M is a node of the K-D tree which splits the data along the x dimension (indicated by the black line) and Q is the query location. d is the distance to the current “closest” match. In the first case (a), the x distance between M and Q is larger than d, so no points left of M could be closer to Q than the current “closest” match. There is no need to search the left children of M . In the second case, the x distance between M and Q is less than d, so there is a chance that there could be a point left of M that is closer than the current match. In order to guarantee that we find the closest possible point to Q, it is necessary to search both the left and right children of M .</p><h4 id="Searching-for-points-in-a-radius"><a href="#Searching-for-points-in-a-radius" class="headerlink" title="Searching for points in a radius"></a>Searching for points in a radius</h4><p>Searching for points within a radius of a query is similar to searching for the nearest point. Start at the root of the K-D tree, and at each node, check the distance between the current node and the query location. If this distance is within the requested radius, output the information related to this node and proceed down both branches to look for further matches. If the current node is outside the requested radius, check the distance between the current node’s key and the query coordinates as above, and proceed down the left, right, or both branches of the tree accordingly.</p><h4 id="Conventions-and-recommendations"><a href="#Conventions-and-recommendations" class="headerlink" title="Conventions and recommendations"></a>Conventions and recommendations</h4><p>For easier testing and debugging, we ask that you follow these conventions:</p><p>The root of the tree should check the x coordinate of the key.<br>Equal keys (meaning, keys that match the current node on the portion of the key it checks, but differ from the current node on the other value) should be grouped with the keys greater than the current node, so each node splits keys into values &lt; and &gt;= the node’s key.<br>The x and y coordinates should be stored as double type.</p><p>Math functions like sqrt() and pow() can be found in the &lt;math.h&gt; library.</p><p>Until you are confident your code is working, you might want to test the radius search function with small radius values (e.g., around 0.0005).</p><h3 id="Additional-Support"><a href="#Additional-Support" class="headerlink" title="Additional Support"></a>Additional Support</h3><p>Your tutors will be available to help with your assignment during the scheduled workshop times. Questions related to the assignment may be posted on the Piazza forum, using the folder tag assignment1 for new posts. You should feel free to answer other students’ questions if you are confident of your skills.</p><p>A tutor will check the Discussion Forum regularly, and answer some questions, but be aware that for some questions you will just need to use your judgment and document your thinking. For example, a question like, “How much data should I use for the experiments?”, will not be answered; you must try out different data and see what makes sense.</p>]]></content>
    
    <summary type="html">
    
      实现K-D Tree, 使用并完成一个类似Google Map的应用程序。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS210-Word-Search</title>
    <link href="https://tk1307993.coding.me/CS210-Word-Search.html"/>
    <id>https://tk1307993.coding.me/CS210-Word-Search.html</id>
    <published>2022-09-25T03:19:59.000Z</published>
    <updated>2022-09-25T03:22:16.649Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Since words were etched in stone, people have loved to do word searches. The game is to search for words in a grid of letters. As you may know, it can be difficult to find every single word in the grid though. So let’s write a program to do just that!</p><p>Your task is to read in a file representing a grid of characters and a file representing a dictionary of valid words. You will then search through the grid of letters to find all the valid words in the grid.</p><p>Important details to note:</p><p>Our program will only search in the vertical and horizontal directions. Do not search for words in the diagonal direction.<br>Our grids can be any size. The file specifying the grid will have a number as its first line which represents the number of rows, and another number as the second line representing the number of columns. See the example file below. You are guaranteed that both the number of rows and the number of columns will always to 4.<br>If a word exists in a grid multiple times, print it out each time you find it.<br>A word is a valid word if</p><p>It is at least three letters long.<br>It can be formed from letters in the grid that are adjacent along a row (left-to-right or right-to-left) or along a column (top-to-bottom or bottom-to-top). Note we are not worrying about diagonal words in this assignment.<br>It can be found in the dictionary file.</p><h3 id="Expected-Behavior"><a href="#Expected-Behavior" class="headerlink" title="Expected Behavior"></a>Expected Behavior</h3><p>Read in the dictionary file and the file specifying the grid of letters. The names of these files will be in command-line arguments 0 and 1 respectively. The dictionary file name will be in args[0] and the filename specifying the grid will be in args1. For examples discussing command-line arguments see the class examples on github here.<br>Read the dictionary file into a Java collection. You will use this collection to check if a word found in the grid is a valid word or not. What data structure makes sense here?<br>Read the grid file to create a grid of strings. You know exactly how many rows and columns your grid has before creating it. What data structure makes sense here? Remember that Java collections can store other collections. So you can have a list of lists or a set of sets or an array of arrays for instance.<br>Search your grid to find valid words. Matching words from the grid to the dictionary file should be done case-insensitive. i.e. if there exists a word Abe in the dictionary, a sequence of letters in the grid “a”, “b”, “e” should match that word.<br>Collect the legal words found into a list and print them out as indicated below. The order in which you print them matters.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>The following is an example of the grid of letters file:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">y h l l w p</span><br><span class="line">c s <span class="selector-tag">p</span> o o l</span><br><span class="line">o e h <span class="selector-tag">b</span> <span class="selector-tag">b</span> y</span><br><span class="line">d y <span class="selector-tag">b</span> w <span class="selector-tag">a</span> y</span><br><span class="line">e <span class="selector-tag">p</span> w x <span class="selector-tag">a</span> c</span><br><span class="line">j k <span class="selector-tag">a</span> z <span class="selector-tag">i</span> g</span><br></pre></td></tr></table></figure></p><p>In this example, you know you have 6 rows (from the first line) and 6 columns (from the second line). You would then read in the grid. Note that in general the input grid could have a mix of uppercase or lowercase letters. For this grid, and the dictionary.txt included in the starter code, your program would find the below words:<br>cod, code, ode, ply (horizontal, L-to-R)<br>jed, doc, yes, abo, bow (horizontal, R-to-L)<br>spool, pool, way (vertical, top-to-bottom)<br>loop, loops (vertical, bottom-to-top)</p><p>View the dictionary.txt file in the starter code to see an example of this type of file. Note your program should not print the ‘(horizontal, L-to-R)’ part. It should only print the words one per line in the same order as above though. So the expected output for the above example would be:</p><h3 id="Input-Files"><a href="#Input-Files" class="headerlink" title="Input Files"></a>Input Files</h3><p>We have provided sample input files for you to test your program in the starter code. It is important to note though that you should test your program on lots of other files. We certainly will.</p><h3 id="Tips-and-Hints"><a href="#Tips-and-Hints" class="headerlink" title="Tips and Hints"></a>Tips and Hints</h3><p>You will certainly need to think carefully about the strategy for checking for words in a row or column of the grid. And this strategy must output words in the same order that we expect them. Start by thinking about searching from left to right. Consider the first row:</p><p>Notice that this row contains the words cod, code, and ode. Suppose that the row is represented as the array [“y”, “c”, “o”, “d”, “e”, “j”]. A simple way to explore all the possible words (going L to R) in this list would be as follows (the process for the other rows is similar).</p><p>Starting at the first element (i.e., “y”), check whether the sequence of length 3 starting at that position is a legal word (we start with length 3 because a legal word has to be at least three letters long). Then check for length 4, then for length 5, etc., until you reach the end of the list.<br>Now repeat this step, but starting at the second element (i.e., “c”). Notice that this time you will come to the end of the list one step sooner. Then repeat for the third element, and so on.</p><p>Note that the above process can be made easier by first converting the array of individual letters into one concatenated string. This could also lead to some great reuse of code. Then for all different types of searches you would produce a string representing that sequence of characters that you want to search and you can use one function to check a sequence for any valid words.</p><p>Everyone solves problems differently, but I thought it would be helpful to highlight a few functions I used in case you find them helpful as well.</p><p>str.toLowerCase()<br>Integer.valueOf(…). When reading in the number of rows and columns, I recommend using Integer.valueOf(scanner.nextLine()) instead of trying to use scanner.nextInt().<br>str.split(…)<br>str.charAt(…)<br>str.substring(…, …)</p>]]></content>
    
    <summary type="html">
    
      完成游戏Word Search的实现。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>CSCI1200-Crossword-Checker</title>
    <link href="https://tk1307993.coding.me/CSCI1200-Crossword-Checker.html"/>
    <id>https://tk1307993.coding.me/CSCI1200-Crossword-Checker.html</id>
    <published>2022-09-22T14:34:51.000Z</published>
    <updated>2022-09-22T14:37:06.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this homework you will work with command line arguments, file input and output, and the C++ STL string and vector classes to check the words in a class crossword puzzle board. Please read the entire handout for the assignment before starting to program. In addition to the lecture notes, you will also want to refer to the “Helpful C++ Programming Information” and “Good Programming Practices” sections of the course webpage.</p><p>Here’s a very small example of a classic crossword puzzle. The board consists of a grid of squares with some of the squares blacked out. The remaining white squares need to be filled with 1 letter per square forming words of 2 or more letters that run in the horizontal (left to right) and vertical (top to bottom) directions. The traditional crossword puzzle provides clues/definitions for each of these words. Each white square that is the first letter of one or more words is numbered. White squares that are the middle or end of words are not numbered. Can you solve this crossword puzzle by hand?</p><p>Your task for this assignment is to write a tool to help confirm that a filled in crossword puzzle contains real English words by picking out the letters from the board and checking them against a list of allowed words. This tool could be useful both to crossword puzzle solvers and also to crossword puzzle designers.</p><p>NOTE: We will not be tackling the much harder problem of matching words to clues or generating clues for words, which would requires a large vocabulary, clever use of puns, knowledge of pop culture, etc. and is an active area of Artificial Intelligence (AI) and Natural Language Processing (NLP) research.</p><h3 id="Command-Line-Arguments"><a href="#Command-Line-Arguments" class="headerlink" title="Command Line Arguments"></a>Command Line Arguments</h3><p>To check the validity of a filled-in crossword puzzle board, your program will expect two required arguments and one optional argument. The first argument is the puzzle filename containing the grid of characters in the proposed board. The second argument is the dictionary filename containing all of the allowed words. If provided, the third argument will specify how to display the puzzle using ASCII art. Here are a few example command lines:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./crossword_checker<span class="selector-class">.out</span> puzzle6<span class="selector-class">.txt</span> linux_dict_words.txt</span><br><span class="line">./crossword_checker<span class="selector-class">.out</span> puzzle6<span class="selector-class">.txt</span> linux_dict_words<span class="selector-class">.txt</span> --print</span><br><span class="line">./crossword_checker<span class="selector-class">.out</span> puzzle6<span class="selector-class">.txt</span> linux_dict_words<span class="selector-class">.txt</span> --print_coordinates</span><br><span class="line">./crossword_checker<span class="selector-class">.out</span> puzzle6<span class="selector-class">.txt</span> linux_dict_words<span class="selector-class">.txt</span> --print_numbered</span><br></pre></td></tr></table></figure></p><p>You must exactly follow the specifications for the command line and output to ensure you receive full credit for your work. We provide sample input and output files on the course website, and the automated testing and autograding on Submitty will also help you check your work. We recommend starting with the lower numbered puzzles first, and working to higher numbered puzzles as you debug your work.</p><p>The file puzzle6.txt contains the filled-in crossword puzzle for the example above. The black squares of the board are represented with the number character, ‘#’.<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a##b</span><br><span class="line">pale</span><br><span class="line">e#ad</span><br></pre></td></tr></table></figure></p><p>The file of allowed words used in the example command lines is the contents of the Ubuntu Linux American English dictionary - a version of this file may already be on your computer in /usr/share/dict/words. This file is simple plaintext with one word per line. You are encouraged to copy and add or remove words from this file or create a new file with alternate words as you test your program. Note that the allowed words file may contain words with lowercase and uppercase letters. Crossword puzzles are usually case insensitive, so your program should ignore capitalization when checking if a word is on the accepted list. The allowed words file may include words containing punctuation characters - you should ignore those words.</p><h3 id="Note-on-Error-Checking"><a href="#Note-on-Error-Checking" class="headerlink" title="Note on Error Checking"></a>Note on Error Checking</h3><p>You should implement simple error checking to ensure that the arguments provided are appropriate. You should also check to make sure that the files exist and your program can successfully open and read the contents. Your program should exit gracefully with a useful error message sent to std::cerr, Standard Error (STDERR), if there is a problem with the arguments or the filenames.</p><h3 id="Note-on-Viewing-ASCII-Art-amp-Plaintext-Files"><a href="#Note-on-Viewing-ASCII-Art-amp-Plaintext-Files" class="headerlink" title="Note on Viewing ASCII Art &amp; Plaintext Files"></a>Note on Viewing ASCII Art &amp; Plaintext Files</h3><p>Make sure you’re using a good file viewer/editor to look at these files. It should correctly display the UNIX/GNU Linux ‘\n’ line ending. Use one of the “Plaintext &amp; Code Viewers/Editors” listed on the “C++ Development” page. Don’t attempt use the Windows line ending character ‘\m’ or ‘\r’ because this will fail validation tests on Submitty</p><h3 id="Basic-Output"><a href="#Basic-Output" class="headerlink" title="Basic Output"></a>Basic Output</h3><p>If all of the horizontal or vertical sequences of 2 or more contiguous white box letters are present in the acceptable words file and the optional third argument is not provided, then your program should print this simple success message to std::cout, Standard Output (STDOUT):<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">valid crossword puzzle</span></span><br></pre></td></tr></table></figure></p><p>If one or more of the letter sequences is not present in the acceptable words file, then your program should print all of those non-words to std::cout, Standard Output (STDOUT). The lines of your output may be in a different order, but the output otherwise must match exactly. Here is the expected output for the provided input file puzzle2.txt:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abcd'</span> is <span class="keyword">not</span> <span class="keyword">a</span> <span class="built_in">word</span></span><br><span class="line"><span class="string">'aei'</span> is <span class="keyword">not</span> <span class="keyword">a</span> <span class="built_in">word</span></span><br><span class="line"><span class="string">'bfj'</span> is <span class="keyword">not</span> <span class="keyword">a</span> <span class="built_in">word</span></span><br><span class="line"><span class="string">'cgk'</span> is <span class="keyword">not</span> <span class="keyword">a</span> <span class="built_in">word</span></span><br><span class="line"><span class="string">'dhl'</span> is <span class="keyword">not</span> <span class="keyword">a</span> <span class="built_in">word</span></span><br><span class="line"><span class="string">'efgh'</span> is <span class="keyword">not</span> <span class="keyword">a</span> <span class="built_in">word</span></span><br><span class="line"><span class="string">'ijkl'</span> is <span class="keyword">not</span> <span class="keyword">a</span> <span class="built_in">word</span></span><br></pre></td></tr></table></figure></p><h3 id="ASCII-Art-Output"><a href="#ASCII-Art-Output" class="headerlink" title="ASCII Art Output"></a>ASCII Art Output</h3><p>If a third argument is specified, you will print an ASCII art representation of the empty puzzle board. The output for the –print option is shown on the right. For full credit, your output must match this sample output exactly.</p><p>The next step is to prepare a template for the list of word clues. When the –print_coordinates option is specified each clue is listed with the position (row and column) of the starting letter of the word and the word direction. This output is shown to the left. Note that the upper left corner of the puzzle grid is position (0,0). It’s ok if your words appear in a different order than this sample output, but the output must otherwise match exactly.</p><p>This output can be used by a crossword puzzle designer, who would take this output and replace the words with clever clues (something probably still best done by humans).</p><h3 id="Submission-Details"><a href="#Submission-Details" class="headerlink" title="Submission Details"></a>Submission Details</h3><p>Do all of your work in a new folder inside of your Data Structures homeworks directory. You should use the C++ STL string and vector classes in your implementation. Use good coding style when you design and implement your program. Review the “Good Programming Practices” section on the course webpage to be sure that the TAs will be able give you credit for your hard work. Organize your program into functions: don’t put all the code in main! Use good variable and function names. Be sure to make up new test cases and don’t forget to comment your code!</p><p>Download and fill out the provided template README.txt file, adding any notes you want the grader to read. You must do this assignment on your own, as described in the “Collaboration Policy &amp; Academic Integrity” handout. If you discuss the problem or error messages, etc. with anyone, please list their names in your README.txt file. Prepare and submit your assignment as instructed on the course webpage. Please ask a TA if you need help preparing your assignment for submission or if you have difficulty writing portable code.</p>]]></content>
    
    <summary type="html">
    
      完成游戏Crossword中的Checker逻辑部分的实现。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>COMP1201-Base-Convertor</title>
    <link href="https://tk1307993.coding.me/COMP1201-Base-Convertor.html"/>
    <id>https://tk1307993.coding.me/COMP1201-Base-Convertor.html</id>
    <published>2022-09-21T03:30:33.000Z</published>
    <updated>2022-09-21T03:32:11.940Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>A grade school teacher wants to develop a program to generate values to a series of numbers in different base systems. The teacher is limiting the bases to be between 2 and 9, inclusive. Each line of input will have a base value and a sequence of characters representing a nonnegative number in that base. However, each number (sequence of characters) has been placed “backwards”. That is the rightmost digit is first in the sequence, the second digit from the right is encountered next, and so on.</p><p>The program reads the digits one a time. As each digit is read, the program should translate that digit into its corresponding decimal value, and then multiply it by the appropriate power of the base. There is an arbitrary number of blanks between the base and the first digit in the sequence.</p><p>Suppose that the teacher wants the students to convert the binary number 1011.</p><p>The first number, 2, represents the base. Base 2 is designated as binary. The 1101 represents a character sequence of binary digits of the number to convert. IT IS BACKWARDS! This means that the first 1 is in the one’s position or 2 to the 0 power. The second 1 is in the two’s position or 2 to the 1 power. The 0 is in the four’s position or 2 to the second power. And lastly, the rightmost 1 is in the eight’s position or 2 to the third power. Remember the number that was to be converted was 1011.</p><p>The value of this number is 1 1 + 1 2 + 0 4 + 1 8 which equals 11. Please see the sample output on how values are to be displayed.</p><p>Ask your instructor to give another example in a different base.</p><p>However, the teacher’s grade school students have entered the data values. This data CANNOT be trusted as being valid data.</p><p>Your program needs to check for valid bases and if the base is invalid write out a message that says,</p><p>Invalid base given, throwing away the rest of the line.<br>To throw away a line of input use cin.ignore( ). Your instructor will talk about this in class. In addition, your program needs to check for valid digits in the given base. For example, if the base is 2, any digit equal to 2 or higher is NOT legitimate. Your error message should say (i.e. input line is : 2 234510)</p><p>For the given base 2, the number is NOT valid!<br>You will need to throw away the rest of the line here as well.</p><p>Lastly, your program is supposed to add up the values of all valid numbers given and print this value as the final part of the output. If there are NO valid inputted numbers given, then the sum is zero (0).</p><p>Again, please see the sample output on how values are to be displayed.</p><p>The following additional requirements must be followed:</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>Your main function should adhere to the following pseudocode:</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>The above pseudocode suggests some functions. Keep these functions single-minded, performing a focused task that can be well-named. You should design pseudocode for each of these functions. All function bodies, including the body of main, should be NO more than 30 lines long, including braces, blank lines and comments.</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>You must NOT use arrays. You will lose ALL points if you do.</p><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>You must follow the programming standards.</p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>You must follow the formatting of the sample I/O below.</p><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>You must thoroughly test your program.</p><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p>You must use the following functions and you MUST add the documentation for the parameters for functions that have parameters.</p><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>To get credit for the assignment, your solution must minimally work on Test Case # 1 below.</p><p>Sample I/O<br>Below are two sample runs.<br>They do NOT cover all cases.</p>]]></content>
    
    <summary type="html">
    
      完成任意进制数字Base转换器。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS122-Searching</title>
    <link href="https://tk1307993.coding.me/CS122-Searching.html"/>
    <id>https://tk1307993.coding.me/CS122-Searching.html</id>
    <published>2022-09-19T07:42:24.000Z</published>
    <updated>2022-09-19T07:43:30.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>For this assignment, you will compare the efficiency of searching a sorted linked list and a hash table.</p><p>You should use a variation of your code for Mini-Assignment 3 for this.</p><h3 id="Modifications-from-Mini-Assignment-3"><a href="#Modifications-from-Mini-Assignment-3" class="headerlink" title="Modifications from Mini-Assignment 3"></a>Modifications from Mini-Assignment 3</h3><p>Instead of getting the words to load into the hash table from the user, you must load at least 2000 words from a file called words.txt as input (using file I/O). It is OK if you share the words with classmates for this. Make sure that your words are sorted in random order (more about this later). The words.txt file must be in the same directory as your source code.<br>It’s OK to use more than 2000 words but don’t have more than 10000.<br>The hash table’s buckets must point to sorted linked lists. When you load a word into the hash table, also load the words into one very long sorted linked list. You must call the same function for inserting into the sorted linked list as for inserting into the hash table bucket’s linked list. Do not duplicate code for linked list insertion.<br>Make the hash table 127 buckets in size.<br>You must create a function called searchLinkedList that searches a sorted linked list for a word and returns a pointer to the node containing the word (if found) or NULL.<br>This function must return NULL immediately after you pass the point in the linked list where the word would have been found if it was in the linked list.<br>The function takes three parameters:<br>char <em> searchWord (or you can use a string object): word to search for (entered by the user)<br>struct linkedList </em> linkedList: linked list to search (in your program, you can call the linked list node struct anything that makes sense)<br>int <em> comparisonCount: pointer to int filled in by the function with the count of strcmp comparisons done in searching the linked list<br>Create a search function called searchForWordTwice. It returns nothing and will have the following parameters:<br>char </em> searchWord (or you can use a string object): word to search for (entered by the user)<br>struct linkedList <em> linkedList: linked list to search<br>struct linkedList </em> hashTable[]: hash table to search<br>int comparisonCount[2]: array containing the count of strcmp comparisons done in searching the extremely-long sorted linked list (element 0) and in searching the hash table (element 1)<br>It must call your linked list search function and then displays one of the following messages once the search is done:<br>“word was found in the list in number comparisons”, where word is the word being searched for, list is either “linked list” or “hash table bucket” and number equals the number of times that strcmp was called<br>“word was NOT found in the list in number comparisons”<br>You will use this search function to search the hash table bucket and the sorted linked list.<br>Don’t worry about the grammatical inconsistency of possibly displaying “1 comparisons”.<br>Indent the message displayed by one TAB (‘\t’).<br>Once you are finished the loop, display the total number of searches, the total number of comparisons done by searching the sorted linked list, and the total number of comparisons done by searching the hash table.</p><h3 id="Other-Requirements"><a href="#Other-Requirements" class="headerlink" title="Other Requirements"></a>Other Requirements</h3><p>Design your linked list code so that you do not have to duplicate code unnecessarily. This is very important.<br>Clean up all allocated memory before exiting.<br>Use constants to avoid magic numbers.<br>You can assume that all words will be in lowercase.<br>Your program must compile without warnings. If you have to use a #pragma as stated in the C course notes in order to get rid of the Microsoft-specific warnings, you should do so.<br>Your project must be named dsA2.<br>The source file that contains your main() function must be called dsA2.cpp. Put all hash table-related code in hashing.cpp. Put all linked list-related code in linkedlist.cpp (and linkedlist.h if you are using a class). Create other .h files as needed to support compilation. Do not create any other source files.<br>Remember to put appropriate header comments at the top of ALL source files.<br>Create a JPG file called compare.jpg that contains a screenshot of your program running with a full screen of sample output (so that I can see the difference in comparison count between the methods for at least two successful and three unsuccessful searches (do not skimp on the number of searches)). Make sure that it includes the final summary output. Put this file in the top directory of your project (so that it is submitted with your submission). A sample of this file is provided for you. Please follow the output format and contents exactly. Not providing this file as required could produce an automatically-failing mark in this assignment.<br>Provide your words.txt file in the same directory as your source code.<br>Submit your submission to the appropriate dropbox as required by the SET Submission Standards document.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>An easy way to sort the input words in random order is the following:</p><p>Get 2000+ words, one per line. Copy the words to the clipboard.<br>Start Excel.<br>Paste the words into Excel (so that you have one column of 2000+ rows).<br>In the next column, put random numbers using =rand().<br>Select all of the data.<br>Sort the data using the column with the random number as the sorting key.<br>Delete the random number column.<br>Save the data into a text file.<br>Here is a 500 word sample input file.<br>Unit testing your functions is a really good idea. You should not leave your unit testing code in your submitted source.<br>Don’t forget that malloc() does not support C++ string objects so you must use new instead if you have strings as part of a dynamically-allocated struct or class.<br>You can use the examples provided on the DS website and C website as long as you attribute credit in a comment. You must attribute credit for the djb2 hash function (credit the real author Dan Bernstein and state that you got it from lecture).</p>]]></content>
    
    <summary type="html">
    
      对比分析Sorted linked list和Hash table的搜索效率。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CS208-AVL-Tree</title>
    <link href="https://tk1307993.coding.me/CS208-AVL-Tree.html"/>
    <id>https://tk1307993.coding.me/CS208-AVL-Tree.html</id>
    <published>2022-09-16T23:49:30.000Z</published>
    <updated>2022-09-16T23:51:12.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>For this project, you will be implementing both a modified AVL tree and a 2-5 tree (this is a 2-4 tree but you are allowed to have up to 5 children as apposed to 4). The code is to be uploaded to gradescope under Programming Assignment 3, where you may test your code against the autograder. Gradescope should be able to run your program using the command “make” followed by “./prog1.out”. Be sure to include all .cpp/.h files that make up your program, the dataset provided a Makefile, and name the executable prog1.out Gradescope has clang++ (clang 10) and a g++ compiler available. Please note that it is possible that your program could have some unexpected behavior on gradescope’s auto grader compared to whatever machine you wrote the code on, so submit your program early and make sure it is bug free on gradescope. You are to implement your own AVL/2-5 trees, so you may not use any libraries that automatically do this for you.</p><h3 id="Implement-AVL-Tree-and-2-5-Tree-classes"><a href="#Implement-AVL-Tree-and-2-5-Tree-classes" class="headerlink" title="Implement AVL Tree and 2-5 Tree classes."></a>Implement AVL Tree and 2-5 Tree classes.</h3><p>Each node in the AVL or 2-5 trees is a pair of (word,counter) where counter shows the number of occurrence of the word in the dataset.</p><p>The AVL trees we will be implementing in this assignment are identical to the AVL trees you learned in class, except that here the height constraint will allow for a height dierence of the subtrees of a given node to be at most 2 (as apposed to 1, which is the version you learned in class. The tree should NOT balance itself if the height dierence is only 2), So your code should only perform rotations if the height dierence is over 2.</p><p>Each class should have at least the following functions:</p><p>A constructor and a destructor.<br>A function for searching a word (the word may or may not exist).<br>A function for inserting a new word or incrementing the counter if the word is already inserted.<br>A function for doing a range search. The function takes as input two words. Given two words, the function should find all the words in between. The resulting words should be sorted.<br>Additionally, in order to verify your data structures, you will need to implement the following methods for both classes:</p><p>A print function that prints out a pre-order traversal of the tree.<br>A function that prints out the height of the tree.</p><p>These last two functions will not be apart of gradescope’s autograder test, but will be used by us to ensure that you have properly implemented the data structures using a modified AVL tree and a 2-5 tree. Please comment your code so it is clear how to use your print and height functions.</p><p>For this project, you should use PA3 dataset.txt available on piazza and gauchospace to initially build your data structures. You are expected to parse the dataset and insert the words contained in it. Insert each word using the insert method you implemented for both trees.</p><p>There should be no output when inserting words from PA3 dataset.txt. For your gradescope submission to be able to access the data set you must upload it and use the path:</p><p>/autograder/submission/PA3 dataset.txt</p><h3 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h3><p>Your code should build a modified AVL tree as described before and a 2-5 tree out of the dataset provided. Gradescope will pass a string of commands via argv1. Each command will be separated by a comma. Your code may receive the following commands: search, insert, range search from [word 1] to [word 2]. Your output should follow this structure EXACTLY to ensure full credit.</p><p>Gradescope will pass a string of commands via argv1. Each command will be separated by a comma. Your code may receive the following commands:</p><p>(a) Search a given word. Both the AVL tree and the 2-5 tree should be searched to find the word. The program should print out “[word] found”, along with the count of the word, once for each data structure. If the word is not found the program should output “[word] not found”, once for each data structure.</p><p>Ex:<br>search hello<br>hello found, count = 2<br>hello found, count = 2</p><p>or if hello is not in the data structure<br>hello not found<br>hello not found<br>(b) Insert a word. If the word is already present then its counter should be increased by one. The program should output “[word] inserted, new count = [count]”, once for each data structure.</p><p>Ex:<br>insert goodbye<br>goodbye inserted, new count = 1<br>goodbye inserted, new count = 1<br>(c) Do a range search. The program should print out all words alphabetically in between (an including) the two words provided in the range search that are in the data structures. Note that the two words given to perform the range search may or may not be in your data structures. The program should do this once for both data structures.</p><p>(d) Print out a traversal of the tree. The program should print out the values of the tree using a pre-order traversal. For each node, you must do the following: print an open parenthesis, the node’s data, print the nodes’ children from left to right, followed by a close-parenthesis.<br>For each datum, you must print the key and value separated by a colon. If a node has multiple data elements, you should delimit them using commas. For any children that are null, you should print empty parentheses.</p><p>(e) Print the height of the tree. The code should simply output: “Height = [height of tree]”</p><h3 id="Full-Test-example"><a href="#Full-Test-example" class="headerlink" title="Full Test example"></a>Full Test example</h3><p>Your program receives the commands through argv1. In the following example we have that that the starting count of hello is 2, of yesterday is 3, and goodbye is not present in the data structure. We also have that the only words in between band and cat in the data structure are band, bankers, bat, and cab. gradescope passes the following commands through argv1:</p><p>search hello, insert goodbye, insert hello, range search band to cat<br>We expect the following output:</p><p>hello found, count = 2<br>hello found, count = 2<br>goodbye inserted, new count = 1<br>goodbye inserted, new count = 1<br>hello inserted, new count = 3<br>hello inserted, new count = 3<br>band<br>bankers<br>bat<br>cab<br>band<br>bankers<br>bat<br>cab</p>]]></content>
    
    <summary type="html">
    
      实现AVL树，以及改进后的2-5树。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>CS162-File-IO</title>
    <link href="https://tk1307993.coding.me/CS162-File-IO.html"/>
    <id>https://tk1307993.coding.me/CS162-File-IO.html</id>
    <published>2022-09-14T23:43:57.000Z</published>
    <updated>2022-09-14T23:45:19.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In order to get credit for the lab, you need to be checked off by the end of lab. You can earn a maximum of 5 points for lab work completed outside of lab time, but you must finish the lab before the next lab. For extenuating circumstances, contact your lab TAs and the instructor.</p><p>This lab is worth 10 points total. Here’s the breakdown:</p><p>4 point: Design for the problem<br>6 points: Implement your design</p><h3 id="Step-1-Design"><a href="#Step-1-Design" class="headerlink" title="Step 1: Design"></a>Step 1: Design</h3><p>In this lab, you will practice reading and writing to a file, a.k.a. File I/O. You can copy and paste or download this example file.</p><p>The input file provides details for a student database in the following format:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Number_of_students</span><br><span class="line">ID_Number Student_First_Name Student_Last_Name Major</span><br><span class="line">...&lt;Repeats n <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">times</span>&gt;...</span><br><span class="line">ID_Number Student_First_Name Student_Last_Name Major</span><br></pre></td></tr></table></figure></p><p>Your program will read specific information from the file and continue reading the contents of the body from the file until the EOF (end of file) character. You will write the following information to an output file:</p><p>Sort students by ID number<br>Sort students by last name<br>The number of unique majors</p><p>Each section of information should be labeled in the output file in all capital letters. A struct should be used to store and manipulate the file information between reading and writing the file. You must include the follow three functions with the exact prototypes:</p><p>student <em> create_student_db(int);<br>This function will create the array of student based on the number of students in the file<br>void populate_student_db_info(student </em>, int, ifstream &amp;);<br>This function should do the work of actually reading through the ifstream that represents your opened file and storing the information in a pre-allocated array of student that’s passed in<br>void delete_student_db_info(student **, int);<br>This function will delete all dynamic memory created in your program<br>Your main function needs to check to make sure the file you open exists before moving forward. If the file doesn’t exist, then you need to provide an error message and get a file name that does exist.</p><p>Write a design for the main function in the driver file, driver.cpp.<br>Write a design for the create_student_db(), populate_student_db_info(), and delete_student_db_info() as well as the functions needed to satisfy the above bulleted output functions in the implementation file, student_db.cpp<br>Here’s some documentation that will help you get going with File I/O:</p><p>C++ Basic file I/O: <a href="http://www.learncpp.com/cpp-tutorial/186-basic-file-io/" target="_blank" rel="noopener">http://www.learncpp.com/cpp-tutorial/186-basic-file-io/</a><br>ifstream: <a href="http://www.cplusplus.com/reference/fstream/ifstream/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/fstream/ifstream/</a><br>ofstream: <a href="http://www.cplusplus.com/reference/fstream/ofstream/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/fstream/ofstream/</a><br>fstream: <a href="http://www.cplusplus.com/reference/fstream/fstream/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/fstream/fstream/</a></p><h3 id="Step-2-Implementation"><a href="#Step-2-Implementation" class="headerlink" title="Step 2: Implementation"></a>Step 2: Implementation</h3><p>Now, implement the driver.cpp, student_db.cpp, and student_db.h files. Create a Makefile to manage the compilation of all these files. You can adapt the Makefile that was posted on the Calendar page in Canvas.</p><p>Remember, you will not receive lab credit if you do not get checked off before leaving each lab. Once you have a zero on a lab, then it cannot be changed because we have no way of knowing if you were there or no t.</p><p>Show your completed work and answers to the TAs for credit. You will not get points if you do not get checked off!</p><p>Submit your work to TEACH for our records (Note: you will not get points if you don’t get checked off with a TA!!!)</p><p>Create a tar archive that contains all files you’ve created in this lab: tar -cvf lab2.tar student_db.h student_db.cpp driver.cpp makefile<br>Transfer the tar file from the ENGR server to your local laptop.<br>Go to TEACH.<br>In the menu on the right side, go to Class Tools Submit Assignment.<br>Select CS162 Lab2 from the list of assignments and click “SUBMIT NOW”<br>Select your files and click the Submit button</p>]]></content>
    
    <summary type="html">
    
      练习C++中基础I/O处理，读写文件。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>CMPT130-Binary-Arithmetic</title>
    <link href="https://tk1307993.coding.me/CMPT130-Binary-Arithmetic.html"/>
    <id>https://tk1307993.coding.me/CMPT130-Binary-Arithmetic.html</id>
    <published>2022-09-11T01:11:14.000Z</published>
    <updated>2022-09-11T01:12:41.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Read this document in its entirety and carefully before you start anything and understand it. If you have any questions, don’t hesitate to email me.</p><p>In this assignment, we will work on arithmetic of integers in two’s complement binary arithmetic. To store the two’s complement representations of integers, we will use the C++ string data type. You are not allowed to use any ARRAY variable in this assignment. Read the restriction section below.<br>Consider the main program given below:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Read in the bit pattern size</span></span><br><span class="line">    <span class="keyword">int</span> L;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter positive integer for the bit pattern size "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; L;</span><br><span class="line">    &#125; <span class="keyword">while</span> (L &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in two integers a and b</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter an integer a "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter an integer b "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate the decimal arithmetic sum of a and b and print the result</span></span><br><span class="line">    <span class="keyword">int</span> c1 = a + b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"In decimal "</span> &lt;&lt; a &lt;&lt; <span class="string">" + "</span> &lt;&lt; b &lt;&lt; <span class="string">" is "</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// Compute the two's complement representations of a and b</span></span><br><span class="line">    <span class="comment">// Each integer must be represented in L-bits pattern</span></span><br><span class="line">    <span class="comment">// Also these two's complement representations must be returned as string data types</span></span><br><span class="line">    <span class="built_in">string</span> A = decimalToTwocomplementString(a, L);</span><br><span class="line">    <span class="built_in">string</span> B = decimalToTwocomplementString(b, L);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print the two's complement representations of a and b</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The two's complement of "</span> &lt;&lt; a &lt;&lt; <span class="string">" is\t "</span> &lt;&lt; A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The two's complement of "</span> &lt;&lt; b &lt;&lt; <span class="string">" is\t "</span> &lt;&lt; B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute the binary sum of the two's complement representations of a and b</span></span><br><span class="line">    <span class="comment">// The result must be returned as L-bit pattern string data type</span></span><br><span class="line">    <span class="built_in">string</span> C = TwoComplementStringAddition(A, B);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print the two's complement representation binary sum</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The binary sum of "</span> &lt;&lt; A &lt;&lt; <span class="string">" and "</span> &lt;&lt; B &lt;&lt; <span class="string">" is "</span> &lt;&lt; C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert the two's complement representation binary sum to decimal and print</span></span><br><span class="line">    <span class="keyword">int</span> c2 = TwoComplementStringToDecimal(C);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"In two's complement arithmetic, "</span> &lt;&lt; a &lt;&lt; <span class="string">" + "</span> &lt;&lt; b &lt;&lt; <span class="string">" is "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print some concluding results</span></span><br><span class="line">    <span class="keyword">if</span> (c1 == c2)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="string">" is equal to "</span> &lt;&lt; c2 &lt;&lt; <span class="string">". Good Job!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="string">" is not equal to "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Either "</span> &lt;&lt; c1 &lt;&lt; <span class="string">" cannot be represented by the given bit pattern OR we have made some mistake!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"Pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Your-Task"><a href="#Your-Task" class="headerlink" title="Your Task"></a>Your Task</h3><p>The main program shown above is uploaded together with this problem statement onto Moodle under Topic 8. Download the main program code and copy and paste it to a new project. You are required to copy the given main program exactly as it is with no change whatsoever. Do not change any function signature. Then implement the missing functions so that the program works correctly. Some sample runs are given below for your reference. Of course, you can write additional helper functions that you can call from within your functions; but you are not allowed to make any change to the given main program.</p><h3 id="Restrictions"><a href="#Restrictions" class="headerlink" title="Restrictions"></a>Restrictions</h3><p>You are required to use C++ string Data Type to represent the two’s complement binary representations. You are not allowed to use any ARRAY variable for any purpose. If you use ARRAY variable for any purpose in your program, you will automatically get zero mark.</p><h3 id="Submission-Format"><a href="#Submission-Format" class="headerlink" title="Submission Format"></a>Submission Format</h3><p>You are required to submit your program online through Moodle. You will find a submission button for Assignment 2 on Moodle under Topic 7 and you are required to upload the source code of your C++ program. No assignment is submitted through email or hard copy; you must upload your work onto Moodle before the due date. Make sure to upload your .cpp file.</p><h3 id="Marking"><a href="#Marking" class="headerlink" title="Marking"></a>Marking</h3><p>A nonworking program will automatically get zero. A program that works but does not give right output or gives partial right output will lose marks depending how severe its shortcoming is.</p><h3 id="Some-sample-runs-of-the-program-are-shown-below"><a href="#Some-sample-runs-of-the-program-are-shown-below" class="headerlink" title="Some sample runs of the program are shown below"></a>Some sample runs of the program are shown below</h3><p>Remark: The user input values and the pressing of the enter key symbol are shown in red color for clarity.</p><p><code>`</code><br>Enter positive integer for the bit pattern size 5<br>Enter an integer a 9<br>Enter an integer b -14<br>In decimal 9 + -14 is -5<br>The two’s complement of 9 is 01001<br>The two’s complement of -14 is 10010<br>The binary sum of 01001 and 10010 is 11011<br>In two’s complement arithmetic, 9 + -14 is -5</p><h2 id="5-is-equal-to-5-Good-Job"><a href="#5-is-equal-to-5-Good-Job" class="headerlink" title="-5 is equal to -5. Good Job!"></a>-5 is equal to -5. Good Job!</h2><p>Enter positive integer for the bit pattern size 2<br>Enter an integer a -100<br>Enter an integer b 98<br>In decimal -100 + 98 is -2<br>The two’s complement of -100 is 00<br>The two’s complement of 98 is 10<br>The binary sum of 00 and 10 is 10<br>In two’s complement arithmetic, -100 + 98 is -2</p><h2 id="2-is-equal-to-2-Good-Job"><a href="#2-is-equal-to-2-Good-Job" class="headerlink" title="-2 is equal to -2. Good Job!"></a>-2 is equal to -2. Good Job!</h2><p>Enter positive integer for the bit pattern size 2<br>Enter an integer a 100<br>Enter an integer b -98<br>In decimal 100 + -98 is 2<br>The two’s complement of 100 is 00<br>The two’s complement of -98 is 10<br>The binary sum of 00 and 10 is 10<br>In two’s complement arithmetic, 100 + -98 is -2<br>2 is not equal to -2</p><h2 id="Either-2-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake"><a href="#Either-2-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake" class="headerlink" title="Either 2 cannot be represented by the given bit pattern OR we have made some mistake!"></a>Either 2 cannot be represented by the given bit pattern OR we have made some mistake!</h2><p>Enter positive integer for the bit pattern size 8<br>Enter an integer a 62<br>Enter an integer b -99<br>In decimal 62 + -99 is -37<br>The two’s complement of 62 is 00111110<br>The two’s complement of -99 is 10011101<br>The binary sum of 00111110 and 10011101 is 11011011<br>In two’s complement arithmetic, 62 + -99 is -37</p><h2 id="37-is-equal-to-37-Good-Job"><a href="#37-is-equal-to-37-Good-Job" class="headerlink" title="-37 is equal to -37. Good Job!"></a>-37 is equal to -37. Good Job!</h2><p>Enter positive integer for the bit pattern size 5<br>Enter an integer a 11<br>Enter an integer b 9<br>In decimal 11 + 9 is 20<br>The two’s complement of 11 is 01011<br>The two’s complement of 9 is 01001<br>The binary sum of 01011 and 01001 is 10100<br>In two’s complement arithmetic, 11 + 9 is -12<br>20 is not equal to -12</p><h2 id="Either-20-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake"><a href="#Either-20-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake" class="headerlink" title="Either 20 cannot be represented by the given bit pattern OR we have made some mistake!"></a>Either 20 cannot be represented by the given bit pattern OR we have made some mistake!</h2><p>Enter positive integer for the bit pattern size 5<br>Enter an integer a -321<br>Enter an integer b 305<br>In decimal -321 + 305 is -16<br>The two’s complement of -321 is 11111<br>The two’s complement of 305 is 10001<br>The binary sum of 11111 and 10001 is 10000<br>In two’s complement arithmetic, -321 + 305 is -16</p><h2 id="16-is-equal-to-16-Good-Job"><a href="#16-is-equal-to-16-Good-Job" class="headerlink" title="-16 is equal to -16. Good Job!"></a>-16 is equal to -16. Good Job!</h2><p>Enter positive integer for the bit pattern size 3<br>Enter an integer a 2<br>Enter an integer b 2<br>In decimal 2 + 2 is 4<br>The two’s complement of 2 is 010<br>The two’s complement of 2 is 010<br>The binary sum of 010 and 010 is 100<br>In two’s complement arithmetic, 2 + 2 is -4<br>4 is not equal to -4</p><h2 id="Either-4-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake"><a href="#Either-4-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake" class="headerlink" title="Either 4 cannot be represented by the given bit pattern OR we have made some mistake!"></a>Either 4 cannot be represented by the given bit pattern OR we have made some mistake!</h2><p>Enter positive integer for the bit pattern size 6<br>Enter an integer a 45<br>Enter an integer b -17<br>In decimal 45 + -17 is 28<br>The two’s complement of 45 is 101101<br>The two’s complement of -17 is 101111<br>The binary sum of 101101 and 101111 is 011100<br>In two’s complement arithmetic, 45 + -17 is 28</p><h2 id="28-is-equal-to-28-Good-Job"><a href="#28-is-equal-to-28-Good-Job" class="headerlink" title="28 is equal to 28. Good Job!"></a>28 is equal to 28. Good Job!</h2><p>Enter positive integer for the bit pattern size 1<br>Enter an integer a -99<br>Enter an integer b 100<br>In decimal -99 + 100 is 1<br>The two’s complement of -99 is 1<br>The two’s complement of 100 is 0<br>The binary sum of 1 and 0 is 1<br>In two’s complement arithmetic, -99 + 100 is -1<br>1 is not equal to -1</p><h2 id="Either-1-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake"><a href="#Either-1-cannot-be-represented-by-the-given-bit-pattern-OR-we-have-made-some-mistake" class="headerlink" title="Either 1 cannot be represented by the given bit pattern OR we have made some mistake!"></a>Either 1 cannot be represented by the given bit pattern OR we have made some mistake!</h2><p>Enter positive integer for the bit pattern size 1<br>Enter an integer a -100<br>Enter an integer b 99<br>In decimal -100 + 99 is -1<br>The two’s complement of -100 is 0<br>The two’s complement of 99 is 1<br>The binary sum of 0 and 1 is 1<br>In two’s complement arithmetic, -100 + 99 is -1<br>-1 is equal to -1. Good Job!<br><code></code></p>]]></content>
    
    <summary type="html">
    
      使用C++对Binary Number进行算术运算。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
</feed>
