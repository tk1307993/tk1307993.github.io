<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2018-11-11T04:18:41.411Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C代写：CS104-Matrix</title>
    <link href="https://tk1307993.coding.me/CS104-Matrix.html"/>
    <id>https://tk1307993.coding.me/CS104-Matrix.html</id>
    <published>2018-11-11T02:58:30.000Z</published>
    <updated>2018-11-11T04:18:41.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Repeat the mat_add problem from homework 3. Write a program called mat_add.c that asks the user for 2 matrices A, and B, and displays their sum, C.</p><ol><li>Name your executable mat_add.out</li><li>All numbers entered will be integers</li><li>All matrices will be valid</li><li>Changes There is now no max size for each matrix. You must dynamically allocate space for all arrays used.<br>This means you must use malloc to create your arrays.</li><li>int A[rows][cols] will not be accepted</li><li>Each row of the matrix will be entered 1 line at a time</li><li>The formula for calculating C[i][j] is C[i][j]=A[i][j]+B[i][j]</li><li>Examples:<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Please enter the number of rows: <span class="number">2</span></span><br><span class="line">Please enter the number of columns: <span class="number">2</span></span><br><span class="line">Enter Matrix <span class="keyword">A</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">Enter Matrix B</span><br><span class="line"><span class="number">100 200</span></span><br><span class="line"><span class="number">200 400</span></span><br><span class="line"><span class="keyword">A</span> + B =</span><br><span class="line"><span class="number">101 202</span></span><br><span class="line"><span class="number">203 404</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Please enter <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> rows: <span class="number">2</span></span><br><span class="line">Please enter <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> columns: <span class="number">3</span></span><br><span class="line">Enter Matrix A</span><br><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">-30</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">7</span></span><br><span class="line">Enter Matrix B</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">30</span></span><br><span class="line"><span class="number">-3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">A + B =</span><br><span class="line"><span class="number">11</span> <span class="number">22</span> <span class="number">0</span></span><br><span class="line"><span class="number">-2</span> <span class="number">6</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="Requirement-2"><a href="#Requirement-2" class="headerlink" title="Requirement 2"></a>Requirement 2</h2><p>Write a program to implement the game connect-n. Connect-n is like Connect-4 except instead of having the board be a constant 6 X 7 we will allow the user to enter the size of the board they would like to play on. In addition we will also allow the user to choose how many pieces in a row are necessary to win. The game is played as follows. Two players take turns dropping their pieces into a column until either player gets N of their pieces in a row either horizontally, vertically, or diagonally, or until their or no more spaces to play.</p><p>Your program must accept 3 command line parameters in this order: number of rows, number of columns, number of pieces in a row to win, If the user does not enter enough arguments or enters too many arguments your program should tell them the proper usage of your program and terminate.<br>You may find the exit function helpful.<br>The user should be allowed to create an unwinable game.<br>For example a board that is 3 X 3 but requires 4 pieces in a row to win.</p><p>Your program should not allow the user to make an impossible play but should continue to ask the user for a play until a valid play is entered<br>Invalid plays consist of plays made outside the board or in to columns that are already full.</p><p>The token used to represent Player 1 is X</p><p>The token used to represent Player 2 is O, a capitol oh and not a zero</p><p>After the game is over the winner should be declared or if there is no winner a tie should be declared<br>You must split your code up into at least 2 files.</p><p>I personally had 4 separate c files</p><p>You must submit a make file named Makefile that when run compiles your program</p><p>The executable created by your make file should be named connectn.out</p><p>Hints<br>This is your first “large” program. It took me around 300 lines of code to complete. You will want to break your problem down into many small manageable functions to make the problem easier to deal with.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">../connectn.out</span><br><span class="line"><span class="number">1</span><span class="selector-class">.Not</span> enough arguments entered</span><br><span class="line"><span class="number">2</span><span class="selector-class">.Usage</span> connectn<span class="selector-class">.out</span> num_rows num_columns</span><br><span class="line">number_of_pieces_in_a_row_needed_to_win</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">../connectn<span class="selector-class">.out</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span><span class="selector-class">.Too</span> many arguments entered</span><br><span class="line"><span class="number">2</span><span class="selector-class">.Usage</span> connectn<span class="selector-class">.out</span> num_rows num_columns</span><br><span class="line">number_of_pieces_in_a_row_needed_to_win</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">../connectn.out <span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> * * *</span><br><span class="line"><span class="number">1</span> * * *</span><br><span class="line"><span class="number">0</span> * * *</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">0</span></span><br><span class="line"><span class="number">2</span> * * *</span><br><span class="line"><span class="number">1</span> * * *</span><br><span class="line"><span class="number">0</span> X * *</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">1</span></span><br><span class="line"><span class="number">2</span> * * *</span><br><span class="line"><span class="number">1</span> * * *</span><br><span class="line"><span class="number">0</span> X O *</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">0</span></span><br><span class="line"><span class="number">2</span> * * *</span><br><span class="line"><span class="number">1</span> X * *</span><br><span class="line"><span class="number">0</span> X O *</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">0</span></span><br><span class="line"><span class="number">2</span> O * *</span><br><span class="line"><span class="number">1</span> X * *</span><br><span class="line"><span class="number">0</span> X O *</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">0</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">0</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">-2</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">4</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">1</span></span><br><span class="line"><span class="number">2</span> O * *</span><br><span class="line"><span class="number">1</span> X X *</span><br><span class="line"><span class="number">0</span> X O *</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">2</span></span><br><span class="line"><span class="number">2</span> O * *</span><br><span class="line"><span class="number">1</span> X X *</span><br><span class="line"><span class="number">0</span> X O O</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">2</span></span><br><span class="line"><span class="number">2</span> O * *</span><br><span class="line"><span class="number">1</span> X X X</span><br><span class="line"><span class="number">0</span> X O O</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">Player <span class="number">1</span> Won!</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">../connectn.out <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> * *</span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">0</span></span><br><span class="line"><span class="number">0</span> X *</span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line">Enter a column <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">to</span> play <span class="keyword">in</span>: <span class="number">1</span></span><br><span class="line"><span class="number">0</span> X O</span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line">Tie game!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      很基础的C程序，实现线性代数中的矩阵运算。然后再实现一个简单的Tic-Tac-Toe.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CITS1001-2048</title>
    <link href="https://tk1307993.coding.me/CITS1001-2048.html"/>
    <id>https://tk1307993.coding.me/CITS1001-2048.html</id>
    <published>2018-11-09T02:58:30.000Z</published>
    <updated>2018-11-09T03:02:10.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>2048 is a recent online computer game. Play takes place on a 4x4 board of squares on which a sequence of tiles appears, each holding a number. Players move tiles around by sliding rows and columns, with the aim of combining identical tiles to make higher numbers. The player’s score is determined largely by the tiles on the final board.<br>You can play 2048 online to get familiar with the game. In this project you will construct a computer player for a simplified version of 2048, and also an interface for a human player.</p><h2 id="The-rules-of-2048"><a href="#The-rules-of-2048" class="headerlink" title="The rules of 2048"></a>The rules of 2048</h2><p>Tiles</p><p>2048 is played on a 4x4 grid of squares. Each square is either empty, or it holds a tile holding a number in {2, 4, 8, 16, 32, 64, …}, i.e. a power of two. At the start of the game the board holds between one and<br>sixteen 2tiles.</p><p>Moves</p><p>The player makes a sequence of moves, each of which is Left, Right, Up, or Down. The description below is for Up moves probably you can translate for the other three possibilities, otherwise they are described here.</p><p>An Up move causes all columns on the board to attempt to slide upwards.</p><ul><li>If no column can legally slide, nothing happens.</li><li>Otherwise all legal slides are implemented, and then a new 2-tile appears in the leftmost empty square of the bottom row.</li></ul><p>Testing slides<br>A column’s attempt to slide upwards is deemed legal if either or both of the following apply.</p><ul><li>A nonempty square in that column has an empty square above it.</li><li>Two adjacent squares in that column hold identical tiles.</li><li>A column cannot slide upwards if it has X tiles at the top with no adjacent identical tiles, and 4X empty squares at the bottom.</li></ul><p>Implementing slides</p><p>When a slide is implemented, the following occurs.</p><ul><li>All squares slide to the top of the column, then</li><li>where there are two adjacent squares holding identical tiles K, those tiles combine into a single tile 2K on the higher square, and all lower tiles slide up again. </li><li>A tile can participate in only one combination in a given move.</li></ul><h2 id="Game-over"><a href="#Game-over" class="headerlink" title="Game over"></a>Game over</h2><p>The game is over when no more successful (i.e. legal) moves are possible.</p><h2 id="Scoring"><a href="#Scoring" class="headerlink" title="Scoring"></a>Scoring</h2><p>Each successful move gets one point, and each unsuccessful move loses one point so the score can go up or down as the game proceeds.</p><h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h2><p>Each link above gives you a skeleton of the required class, including instance variables, constructors, and methods. You are required to complete the methods and constructors whose bodies are marked with the comment TODO, in Play2048.java, GameState.java, and Square.java. Make sure you understand the connections between the classes, and where each method fits into the scheme described above.</p><p>I suggest you tackle these tasks in roughly the order above, although it may be helpful to write a constructor for Play2048 and a board display method early, to make testing easier. Here are some tips. If</p><p>I add to this list, I will update the document version number.</p><ul><li>The move description on the main page is for an Up move; whereas the first move you are likely to implement is a Left move. Make sure that this discrepancy doesn’t cause you any problems!</li><li>When performing moves, you need to update the existing board. Creating new array(s) will not make the tester happy.</li><li>You may add instance variables to Play2048, although make sure that the information being stored really needs an instance variable. Do not add instance variables to the other classes.</li><li>Avoid repetitious code! There is much less work here than it may appear…</li></ul>]]></content>
    
    <summary type="html">
    
      做一个2048的游戏，和手机上的类似。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL代写：CSCI336-3DArtGallery</title>
    <link href="https://tk1307993.coding.me/CSCI336-3DArtGallery.html"/>
    <id>https://tk1307993.coding.me/CSCI336-3DArtGallery.html</id>
    <published>2018-11-07T14:54:49.000Z</published>
    <updated>2018-11-07T14:57:36.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Create and display an interesting 3D virtual environment of an art gallery. Place a variety of pictures, pedestals, ornaments, etc. around the environment. The scene should be fully textured, using several different textures, and lit.</p><p>The scene should contain a number of:</p><ul><li>Animations (e.g. rotating fans, moving ornaments, moving lights, blinking lights, etc.)</li><li>Light sources – with at least two spotlights</li><li>Translucent surfaces (using alpha blending)</li></ul><p>The scene should also have a night time and a day time setting (i.e. the same scene illuminated differently to represent two different times of the day).</p><p>Implement a ‘help’ display which can be toggled on/off when the user presses the ‘h’ key. This should show the frame rate, whether it is currently night or day, the current display state (described below), user interaction controls, etc.</p><h2 id="User-Intraction"><a href="#User-Intraction" class="headerlink" title="User Intraction"></a>User Intraction</h2><p>The user must be able to cycle through the following states with the scene drawn in:</p><ol><li><p>Wireframe mode with a<br>Black background with white lines<br>White background with black lines<br>Blue background with yellow lines</p></li><li><p>Solid mode with primitives<br>Coloured differently but without lighting or textures<br>Shaded using lighting only<br>Textured without lighting<br>Shaded using lighting and textured</p></li><li><p>The user should also be able to<br>Turn individual lights on/off<br>Toggle the translucent surfaces (i.e. toggle between translucent and opaque)</p></li></ol><p>Implement a free roaming camera for user viewpoint navigation. The user must be able to move the camera around in the environment. The camera must also be able to rotate in all directions.</p><p>Also implement a flash light feature (a spotlight orientated in the direction of the camera and moves with the camera) that can be switched on/off. The user should also be given the option to change the intensity and colour of the flash light.</p><h2 id="Advanced-Features"><a href="#Advanced-Features" class="headerlink" title="Advanced Features"></a>Advanced Features</h2><p>Implement the following features:</p><p>A screenshot feature – whereby the user can take screenshots that will be saved as image files. The user must be able to take multiple images that are saved into a screenshot folder without overwriting previously saved screenshot image files that are already in that folder.</p><p>Screenshots should be taken by reading the contents of the front buffer.<br>Display the screenshot – the last screenshot taken should be displayed as a picture somewhere in the art gallery (please indicate where this picture is located in your readme file)</p><p>Motion blurring – this feature should allow the user to turn motion blurring on/off for the animated components in the scene (use the accumulation buffer)</p><p>Reflective surface – Make the gallery’s floor a reflective surface that is blended in with the textured floor (the stencil buffer should be used for this)</p><p>Full scene anti-aliasing – use the accumulation buffer and jitter the scene a number of times to create full scene anti-aliasing (note that the frame rate will definitely drop when this feature is turned on)</p>]]></content>
    
    <summary type="html">
    
      用OpenGL做一个3D Art Gallery，实现包括Animations, Light sources和Translucent surfaces等功能。
    
    </summary>
    
      <category term="OpenGL" scheme="https://tk1307993.coding.me/categories/OpenGL/"/>
    
    
      <category term="Image Process" scheme="https://tk1307993.coding.me/tags/Image-Process/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：ImageProcessing3</title>
    <link href="https://tk1307993.coding.me/Java-ImageProcessing3.html"/>
    <id>https://tk1307993.coding.me/Java-ImageProcessing3.html</id>
    <published>2018-11-03T07:18:59.000Z</published>
    <updated>2018-11-03T07:19:41.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Assignment-5"><a href="#Assignment-5" class="headerlink" title="Assignment 5"></a>Assignment 5</h1><p>In this repository, you should find the following complete interfaces and classes:</p><ul><li>The basic underlying interface Pixel and its implementations GrayPixel and ColorPixel from assignments 3 and 4.</li><li>The Picture and SubPicture interfaces as defined and described in assignment 4.</li><li>My implementations of MutablePixelArrayPicture and ImmutablePixelArrayPicture from the assignemnt 4 solution.</li></ul><p>The appropriate code for the following classes from my assignment 4 solution is missing in these classes:</p><ul><li>The SubPicture interface called SubPictureImpl</li><li>The Pixel iterators called SampleIterator and ZigZagIterator</li><li>The SubPicture interators called WindowIterator and TileIterator</li></ul><p>In this assignment, you’ll fill out these missing implementations in order to recreate my a4 solution. Additionally, you will be asked to refactor the code of MutablePixelArrayPictrue, ImmutablePixelArrayPicture, and SubPictureImpl using inheritance.</p><p>The first thing you should do is read the implementations of MutablePixelArrayPicture and ImmutablePixelArrayPicture carefully to understand how they work. A lot of the code in these classes is repeated. You should note the ways in which the code is similar and is different. In particular, notice that the rectangle, circle, and picture paint methods of ImmutablePixelArrayPicture go through an extra step of creating an immutable result picture at the very end of these methods using a helper function called copyAsImmutable.</p><h2 id="Novice"><a href="#Novice" class="headerlink" title="Novice"></a>Novice</h2><p>Fill out the code for SubPictureImpl. You can and should copy much of this code from the other picture implementations as appropriate. Be sure to reread the A4 description for how this interface should work. In particular, pay attention to the fact that a subpicture’s mutabiliity (or immutability) with respect to pixel operations should reflect the underlying source picture and that a subpicture maintains caption information independently of the underyling source picture. </p><h2 id="Adept"><a href="#Adept" class="headerlink" title="Adept"></a>Adept</h2><p>Fill out the code for the various iterators (i.e., SampleIterator, ZigZagIterator, WindowIterator, and TileIterator). Again, look to the A4 description for how these iterators are supposed to work.</p><h2 id="Jedi"><a href="#Jedi" class="headerlink" title="Jedi"></a>Jedi</h2><p>Refactor the code of MutablePixelArrayPicture, ImmutablerPixelArrayPicture, and SubPictureImpl into the following class hierarchy:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PictureImpl</span><br><span class="line">     |</span><br><span class="line"><span class="string">     </span>|<span class="string">-------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">     </span>|<span class="string">                                                                        </span>|</span><br><span class="line">PixelArrayPicture                                                        SubPictureImpl</span><br><span class="line">     |</span><br><span class="line"><span class="string">     </span>|<span class="string">------------------------------</span></span><br><span class="line"><span class="string">     </span>|<span class="string">                             </span>|</span><br><span class="line">MutablePixelArrayPicture      ImmutablePixelArrayPicture</span><br></pre></td></tr></table></figure><p>The above graph indicates that PictureImpl should be the root parent class of all Picture implementations including SubPictureImpl. PixelArrayPicture should be the common parent class of both MutablePixelArrayPicture and ImmutablePixelArrayPicture.</p><p>You should refactor the code from MutablePixzelArrayPicture, ImmutablePixelArrayPicture, and SubPictureImpl as appropriate. Please use these class names (i.e., PictureImpl and PixelArrayPicture) exactly. </p><h2 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h2><ul><li>Novice: 5 points</li><li>Adept: 15 points</li><li><p>Jedi: 5 points</p><p>NOTE: all code should be in the a5 package. Do not refer to any code in any prior assignment packages.</p></li></ul>]]></content>
    
    <summary type="html">
    
      使用Java实现可变及不可变图像相关处理
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Image Process" scheme="https://tk1307993.coding.me/tags/Image-Process/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：ImageProcessing2</title>
    <link href="https://tk1307993.coding.me/Java-ImageProcessing2.html"/>
    <id>https://tk1307993.coding.me/Java-ImageProcessing2.html</id>
    <published>2018-11-03T00:01:43.000Z</published>
    <updated>2018-11-03T00:02:49.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Assignment-4"><a href="#Assignment-4" class="headerlink" title="Assignment 4"></a>Assignment 4</h1><p>For this assignment, you will write at least 10 JUnit tests that test some aspect of the code described below. </p><p>In this repository, you’ll find an a4 package with the following interfaces and classes already written:</p><ul><li>The Pixel interface along with two implementations GrayPixel and ColorPixel.<ul><li>These are the same as in a3.</li></ul></li><li><p>The Picture interface.</p><ul><li><p>This is mostly the same as before with the following changes:</p><ul><li>There is a new form of the paint method which allows the pixel information of one Picture object<br>to be painted on to another Picture object.</li><li>Pictures now have a String caption that can be set or retrieved. Note that from now on, when<br>an implementation of Picture is described as “immutable”, we mean that only with respect to<br>pixel information. All Picture implementations are mutable with respect to caption information.</li><li>The extract method of a Picture object can be used to create a SubPicture object that represents a<br>rectangular region within the picture. See below for more information about SubPicture objects.</li><li><p>The sample method of a Picture object creates a Pixel iterator that produces Pixel objects from the<br>picture. The iterator begins with the specified initial pixel location and then samples left to right<br>the specified dx columns and then top to bottom by the specified dy rows. For example, suppose<br>picture p is 15 pixels wide and 10 pixels tall and a pixel iterator is created by calling<br>the sample method as follows:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Pixel&gt; sample_iter = p.sample(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>You should expect sample_iter to produce pixels from p at the following coordinates in this order:<br>(2,3) (5,3) (8,3) (11,3) (14,3) (2,7) (5,7) (8,7) (11,7) (14,7)</p></li><li><p>The window and tile methods produce SubPicture iterators. The window method should produce a sequence of<br>SubPicture objects as if you were sliding a “window” that was window_width wide and window_height tall across the picture<br>starting from the upper left corner and proceeding from left to right and top to bottom until the window hits<br>the lower right corner.</p><p>For example, if picture p is 5 pixels wide and 5 pixels tall, and the window method was called as follows:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Iterator</span>&lt;SubPicture&gt; window_iter = p.<span class="built_in">window</span>(<span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>The resulting iterator (i.e, window_iter) should produce a sequence of SubPicture objects that is<br>equivalent to the results of the following sequence of calls to extract():</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p.extract(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">p.extract(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>  The tile method should produce a sequence of SubPicture objects as if you had cut the original picture   into tiles that were tile_width wide and tile_height tall. Again, the SubPicture for the upper left tile is  produced first and the iterator proceeds left to right and top to bottom. Partial tiles if the original   picture width/height is not a perfect multiple of the tile width/height are not produced. (i.e.,   portion of the picture at the right or bottom that does not fit into a whole tile are not included in any  tile produced by the iterator).  For example, if the picture p is 5 pixels wide and 5 pixels tall, and the tile method was called as follows:   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;SubPicture&gt; tile_iter = p.tile(<span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>  The resulting iterator (i.e, tile_iter) should produce a sequence of SubPicture objects that is equivalent to   the results of the following sequence of calls to extract():  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.extract(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">p.extract(<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">p.extract(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">p.extract(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>* The zigzag method produces a Pixel iterator that iterates over the pixels of a Picture in zigzag order as shown  in this example:  ![Zig Zag Order Example](http://www.cs.unc.edu/~kmp/comp401fall18/assignments/a4/zigzag.gif &quot;Zig Zag Order Example&quot;)  Note that the first move is to go from the upper-left corner across to the right if possible.   The pattern will work for any size picture (it need not be a perfect square). A good way of looking at the pattern is to   think of the picture as a series of diagonals that are either &quot;even&quot; or &quot;odd&quot; where the coordinate (0,0)   is on an even diagonal. Generally, the pattern traverses the pixels going up and to the right on even diagonals   and down and to the left on odd diagonals. </code></pre><ul><li><p>The SubPicture interface.</p><ul><li><p>The idea behind SubPicture is that it represents a subarea of some other Picture object. When a<br>SubPicture object is created, a source picture and an offset (xOffset, yOffset) is specifed.<br>The origin (i.e., pixel at coordinates (0,0)) of the subpicture corresponds to the pixel<br>(xOffset, yOffset) of the source picture. These values can be retrieved via the getter methods<br>defined in the SubPicture interface. </p><p>Because the SubPicture interface is an extension of the Picture<br>interface, a SubPicture object also implements all of the methods in Picture including the getters<br>getWidth, getHeight, and getPixel along with all of the various forms of paint and the getter/setter for<br>the caption. The getWidth and getHeight methods return the width and height of the subpicture region.<br>The getPixel method of a SubPicture will translate the (x,y) coordinates provided by<br>xOffset and yOffset and retrieve the corresponding pixel from the source picture.<br>The paint operations are delegated to the underlying source picture object and the result<br>of a paint operation for a SubPicture will either be itself if the underlying source Picture<br>object is mutable with respect to pixel information or a new SubPicture object if the<br>underlying source Picture object is immutable with respect to pixel information. </p><p>A SubPicture maintains its own caption information independently of the underlying source Picture.<br>A SubPicture created as a result of the extract() method on a Picture will start with a caption that<br>is the same as the source picture.</p></li></ul></li></ul><h2 id="What-To-Do"><a href="#What-To-Do" class="headerlink" title="What To Do"></a>What To Do</h2><p>In the package a4test you will find the class A4Test. This class is already setup to import the corresponding a4 package it is meant to test. You will need to add JUnit 4 to your project setup. In A4Test is a static method called getTestNames. This method needs to return an array of strings that correspond to each JUnit test in the class. You will see that A4Test currently contains an empty example test method which should serve as an example of the correct way to declare a JUnit test within the class. In particular, you must have the “@Test” annotation and the correct signature (i.e., public void). You can remove the example test if you want to. If you do, however, be sure to remove its name from the array of test names returned by getTestNames.</p><p>Write 10 JUnit tests that test various aspects of the interfaces described above in A4Test. Submit by pushing a ‘submit’ branch to GitHub. Your tests will be tested against an implementation of these interfaces that is known to work. This means if any of your tests fail, it is because there is a bug in your test (not the implementation). This implementation will be made available to you as a downloadable, precompiled, JAR file that you can add to your project so that you can run the tests yourself. The link to this implementation will be made available on Piazza soon. </p><p>The implementation will include the following two implementations of Picture:</p><ul><li><p>a4.MutablePixelArrayPicture<br>This will be a mutable (with respect to pixel information) implementation with the following constructor:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MutablePixelArrayPicture(Pixel<span class="string">[]</span><span class="string">[]</span> pixels, String caption);</span><br></pre></td></tr></table></figure></li><li><p>a4.ImmutablePixelArrayPicture<br>This will be an immutable (with respect to pixel information) implementation with the following constructor:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImmutablePixelArrayPicture(Pixel<span class="string">[]</span><span class="string">[]</span> pixels, String caption);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h2><p>   Each test will be worth one point for a maximum of 10 points.</p>]]></content>
    
    <summary type="html">
    
      使用Java实现可变及不可变图像相关处理
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Image Process" scheme="https://tk1307993.coding.me/tags/Image-Process/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS221-Shell</title>
    <link href="https://tk1307993.coding.me/CS221-Shell.html"/>
    <id>https://tk1307993.coding.me/CS221-Shell.html</id>
    <published>2018-10-28T01:37:48.000Z</published>
    <updated>2018-10-28T15:44:47.142Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>You are to write a C program that provides functionality similar to the shell. Your starting point is the supplied code smsh.c (and associated headers and files implementing some functions).</p><p>Compile this first and then run it. You should discover that it basically provides the functionality that allows a user to type in commands (like “ls” “ls –l” “cat filename” etc. – or names of binaries with the complete path specified, possibly with options). You should also see what it doesn’t do<br>(here is a partial list):</p><ol><li>It doesn’t allow for I/O redirection:</li><li>It doesn’t allow for single command redirect of stdin, stdout or stderr.</li><li>It doesn’t allow for commands to be piped together</li><li>It doesn’t allow for any job control (^Z will stop the program itself, not the last job it started)</li><li>It doesn’t handle builtins. Builtins are not commands exec’d but are commands that the shell handles directly rather than forking and exec’ing. See man builtin.</li><li>It doesn’t do globbing/wildcard expansion (e.g., “cat *” ).</li><li>It doesn’t allow variables to be set, doesn’t have an environment as an object you can manipulate etc</li><li>It doesn’t understand the syntax of shell programs/scripts – no loops, no conditionals, etc etc.</li></ol><p>You task is to add to this functionality, incrementally, in the order given:</p><ol><li>Produce a source file smshv1.c that will be compiled to the binary smshv1 that allows cmds to be piped together. In essence, this is assignment2 integrated into this “shell”. Assignment 2 didn’t parse a command line with the “|” symbols in it. You are given, in addition to the files for the starting version of the shell, a file which is a basic solution to assignment2 – this is provided for those people that didn’t manage to get a working solution to assignment2: you are welcome to use this in your code or, of course, you can use your code from assignment2. This introduces the concept of a job. A job is either a single cmd (with or without args) or a combination of commands piped together. To appreciate this try (in the real shell) cat | more (which will of course “just sit there” as cat has no input until you type). Then press ^Z and you see that the combination of cmds is stopped as a single job, which can be resumed.</li><li>Produce a source file smshv2.c that adds functionality to smshv1 to allow for parsing of (and implementation of!) redirection of I/O. This should work for a single command (with or without args) and with redirection of two or three streams, and with this form of indirection in a pipe.</li><li>Produce a source file smshv3.c that adds functionality to smshv2 to allow for limited job control. The functionality is merely that when one types something like “cat myfilename &amp;” that the prompt returns automatically so the user can type in another command without having to wait until that job completes. Note this should work for single commands and for multi-command jobs.</li></ol>]]></content>
    
    <summary type="html">
    
      实现类似Linux Shell的功能，并能够运行诸如ls, cat之类的命令。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CSE231-RenderingColors</title>
    <link href="https://tk1307993.coding.me/CSE231-RenderingColors.html"/>
    <id>https://tk1307993.coding.me/CSE231-RenderingColors.html</id>
    <published>2018-10-26T01:37:48.000Z</published>
    <updated>2018-10-26T01:41:03.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>You will use Turtle graphics to draw a picture containing multiple shapes of multiple colors and arranged to be visually pleasing. Although you are free to decide the precise shape(s) and layout for your picture, some aspect of the picture must depend on a numeric value input by the user. For example, the input might determine the size of the shapes, the number of shapes, or their spacing.</p><h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>Originally written as a part of the logo programming language, Turtle graphics is one of the oldest graphics programs. It is a 2D graphics package that uses a Cartesian coordinate system and a “turtle,” which you can imagine has a pen attached to its body. The turtle can move around the plane, drawing as it goes. Python has a module that implements the behavior of the original turtle graphics program and this module is simply called “turtle” (see Appendix B of the text and the comments in the sample file turtleSample.py).</p><h3 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h3><p>Your program must:</p><ol><li>Output a brief descriptive message of what the program does.</li><li>Repeatedly prompt for the input until the user supplies values of the correct form (discard incorrect inputs). Your prompt should say what form of input is needed.</li><li>Draw a picture containing multiple shapes of multiple colors, where the input value(s) is (are) used to determine some aspect of the shapes and/or their layout.</li><li>Adhere to 1-6 of the Coding Standard</li></ol><p>In programming your solution, you must:</p><ol><li>Use at least two repetition (while or for) statements.</li><li>Use at least one selection (if) statement.</li></ol><p>We show example output produced by two different programs that meet these requirements at the end of this write-up. You may be creative and create your own program, or you may choose to mimic one of these two examples. The second example shows error checking being tested.</p><h3 id="Creating-Colors"><a href="#Creating-Colors" class="headerlink" title="Creating Colors"></a>Creating Colors</h3><p>There are many ways to create a color but a common one used in computer graphics is the process of additive color. Combining different amounts of red, green and blue can create most (but not all) colors. In turtle, you can specify a color by giving three floating-point values, each in the range from 0.0 to 1.0, indicating the amount (fraction or percent) of each color. For instance, (1.0, 0.0, 0.0) is red, (0.0, 1.0, 0.0) is green, and (0.5, 0.5, 0.0) is brown.</p><p>You can find the codes for many colors on a color chart.</p><p>A convenient way to generate different colors is to repeatedly call the random function in the random module to obtain values for the color amounts. First, import the random module: import random<br>Then, each call to random.random() returns a pseudo random (floating-point) number in the range 0.0 to 1.0. A sample program using this method to create a color and draw a figure is provided in the project directory: turtleSample.py</p><h3 id="Using-turtle-graphics"><a href="#Using-turtle-graphics" class="headerlink" title="Using turtle graphics"></a>Using turtle graphics</h3><p>In order to use turtle graphics in Python you must first import the turtle module. You can then use the help function in the shell to find out what methods this module includes and what they do. Just type import turtle in the Python Shell window, hit enter, and then type help(turtle) and scroll up through the list and information. For more details Google “Python 3 turtle.” A sample Python program, turtleSample.py, is provided in the project directory. The comments in this file describe methods that you might want to use for this project. When running your program in Spyder, you may need to look under other windows to find the turtle drawing window.</p><h3 id="Keeping-the-window-up"><a href="#Keeping-the-window-up" class="headerlink" title="Keeping the window up"></a>Keeping the window up</h3><p>If the drawing window has a tendency to disappear too quickly, you can “hold” the window by using the sleep function in the time module, as follows:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"><span class="selector-tag">time</span>.sleep(seconds)</span><br></pre></td></tr></table></figure></p><p>The program will wait the number of seconds indicated before it ends.</p>]]></content>
    
    <summary type="html">
    
      基础的Python作业，主要就是用while和if结合三方库来画图。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP9021-Tangram</title>
    <link href="https://tk1307993.coding.me/COMP9021-Tangram.html"/>
    <id>https://tk1307993.coding.me/COMP9021-Tangram.html</id>
    <published>2018-10-24T14:08:04.000Z</published>
    <updated>2018-10-24T14:11:08.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The assignment consists of three parts, from easiest to more difficult. Each part is worth 3 marks.<br>For each test, the automarking script will let your program run for 30 seconds.</p><p>As all output is True or False, each test will actually consist of a number of subtests of similar difficulty, and passing one test will mean passing all associated subtests; failing at least one of the subtests of a test will result in scoring 0 to that test.<br>Up to one mark will reward good comments, good choice of names for identifiers and functions, readability of code, simplicity of statements, compactness of functions. This will be determined manually.</p><p>One extra mark will be awarded for making available to the class a good test case, consisting of two similar sets of pieces and two solved tangrams built from such a set, which can then be used by everyone for testing purposes.</p><p>Late assignments will be penalised: the mark for a late submission will be the minimum of the awarded mark and 10 minus the number of full and partial days that have elapsed from the due date.</p><h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>The game of tangram consists in creating shapes out of pieces. We assume that each piece has its own colour, different to the colour of any other piece in the set we are working with. Just for reference, here is the list the colours that are available to us</p><h3 id="Pieces"><a href="#Pieces" class="headerlink" title="Pieces"></a>Pieces</h3><p>Here is an example of the contents of the file pieces A.xml, typical of the contents of any file of this kind (so only the number of pieces, the colour names, and the various coordinates can differ from one such file to another - we do not bother with allowing for variations, in the use of space in particular).</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg version ="1.1" xmlns ="http://www.w3.org/2000/svg"&gt;</span><br><span class="line">  &lt;path d="M<span class="number"> 50 </span>50 L<span class="number"> 50 </span>90 L<span class="number"> 90 </span>90 z" fill="red" /&gt;</span><br><span class="line">  &lt;path d="M<span class="number"> 160 </span>170 L<span class="number"> 160 </span>130 L<span class="number"> 120 </span>130 z" fill="green" /&gt;</span><br><span class="line">  &lt;path d="M<span class="number"> 200 </span>30 L<span class="number"> 180 </span>30 L<span class="number"> 180 </span>50 L<span class="number"> 220 </span>50 z" fill="blue" /&gt;</span><br><span class="line">  &lt;path d="M<span class="number"> 40 </span>100 L<span class="number"> 40 </span>140 L<span class="number"> 60 </span>140 L<span class="number"> 60 </span>120 z" fill="yellow" /&gt;</span><br><span class="line">  &lt;path d="M<span class="number"> 210 </span>70 L<span class="number"> 230 </span>90 L<span class="number"> 270 </span>90 L<span class="number"> 270 </span>50 L<span class="number"> 230 </span>50 z" fill="purple" /&gt;</span><br><span class="line">  &lt;path d="M<span class="number"> 180 </span>130 L<span class="number"> 180 </span>170 L<span class="number"> 220 </span>210 L<span class="number"> 240 </span>190 z" fill="olive" /&gt;</span><br><span class="line">  &lt;path d="M<span class="number"> 100 </span>200 L<span class="number"> 120 </span>180 L<span class="number"> 80 </span>140 L<span class="number"> 80 </span>180 z" fill="magenta" /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p>Note that the coordinates are nonnegative integers. This means that the sets of pieces we consider rule out those of the traditional game of tangram, where 2 is involved everywhere…</p><p>We require every piece to be a convex polygon. An .xml file should represent a piece with n sides (n &gt; 3) by an enumeration of n pairs of coordinates, those of consecutive vertices, the first vertex being arbitrary, and the enumeration being either clockwise or anticlockwise.</p><h3 id="First-Task"><a href="#First-Task" class="headerlink" title="First Task"></a>First Task</h3><p>You have to check that the pieces represented in an .xml file satisfy our constraints. So you have to check that each piece is convex, and if it represents a polygon with n sides (n &gt; 3) then the representation consists of an enumeration of the n vertices, either clockwise or anticlockwise. Here is the expected behaviour of your program.</p><h3 id="Second-Task"><a href="#Second-Task" class="headerlink" title="Second Task"></a>Second Task</h3><p>You have to check whether the sets of pieces represented in two .xml files are identical, allowing for pieces to be flipped over and allowing for different orientations. Here is the expected behaviour of your program.</p><h3 id="Third-Task"><a href="#Third-Task" class="headerlink" title="Third Task"></a>Third Task</h3><p>You have to check whether the pieces represented in an .xml file are a solution to a tangram puzzle represented in another .xml file. Here is the expected behaviour of your program.</p>]]></content>
    
    <summary type="html">
    
      用Python解一个Tangram，也就是七巧板问题，作业给基本框架，往里面填写逻辑即可。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：FIT2071-VisualTextQuest</title>
    <link href="https://tk1307993.coding.me/FIT2071-VisualTextQuest.html"/>
    <id>https://tk1307993.coding.me/FIT2071-VisualTextQuest.html</id>
    <published>2018-10-20T02:59:11.000Z</published>
    <updated>2018-10-20T03:03:45.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Unlike previous assignments where we revealed the required functionality lab-by-lab in “portfolio tasks” as you were taught the required concepts, for this assignment we are giving you the full specification up front. This is because we have now covered all the language features you need.</p><p>Recap (the story so far!):<br>In Assignment 1 you created a very simple turn based adventure game where the player created a character, choosing a name and a vocation for the character in order to set some default statistics. The main game loop simply applied events from a file that affected the player’s health. The game ended when the player died. You could also save the current state of the character at any time.</p><p>In Assignment 2 you used what you had learned about OO and classes to better structure the code. You modelled Events and Vocations with simple classes. You added a Character class, and Player and Enemy subclasses of Character. Possibly you added further subclasses of Enemy. Then you added the notion of turn-based Fights involving a collection of Character subclasses.<br>For Assignment 3 (the final instalment of the TextQuest trilogy) you will start to add some visual elements to the game. It will still be text-based but we will introduce the notion of a 2D map.</p><h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>You can start with your code from Assignment 2 – or if you are unhappy with it (or it is non-existant) you are welcome to start with our sample solution for Assignment 2 (available on Moodle).</p><p>If you haven’t already, then introduce a Game class to hold all the data, state and functions not already associated with other classes. Introduce a Room class.</p><p>Introduce a Room class. A room contains a collection of 0 or more Events that occur in that room and also a collection of 0 or more Enemies that attack the player. Also, a room will have four nullable pointers to other Rooms (e.g. north, east, south and west).</p><p>Create a 10x10 grid (e.g. a 2D array) of Rooms. Then you will need to create “doors” between adjacent rooms. You can do this randomly to create a maze. Remember to connect the rooms in both directions. For example: if the east pointer of the Room at array position 1,5 points to the Room at array position 1,6 then room 1,6 should have a west pointer back to 1,5.</p><p>So the player can see where they are, you will need to display the map. You can be as fancy with this as you like, but here’s an example of a basic ASCII representation that you might use (this one is 4x4, yours will be bigger):<br>Now, the player starts the game in a particular room (could be random) and at the beginning of each turn in the game they can choose an open door (N,S,E or W) to pass through. If there are enemies in the room then there will be a fight (as in Assignment 2). If there are events (e.g. a health potion, a trap, a magic sword) then these can happen after the fight.</p><p>The game will be more fun if the player has to explore. Implement a “fog of war” feature. That is, the map starts off obscured (e.g. covered in *) with only the exits to the current room visible, and is gradually revealed as the player moves around.<br>REQUIREMENT: Please allow the player to choose a “cheat” mode on startup where the full map is shown all the time. This will make your life easier in debugging but will also make it easier for us to mark!</p><p>Save and load should be extended to store the full state of the map and rooms</p><h3 id="Further-Functionality"><a href="#Further-Functionality" class="headerlink" title="Further Functionality"></a>Further Functionality</h3><p>The above is a bare minimum we will expect to see. Implementing it perfectly will get you CR (~60%). To get D or above, you will need to add some more interesting elements. Here are some suggestions – but feel free to go further:</p><p>Add navigation within a room: when you enter a room, pop up a small (e.g. 5x5) map showing the location of enemies and events within the room. The player can move around inside the room to see what the events are and attack enemies in adjacent squares.<br>Have the enemies move around! From room to room or just within a room. They could move randomly or you could give them some simple AI (e.g. always move towards the player).</p><p>We have already suggested events can involve items. Make this a more formal notion (e.g. with an Item class) and give the character an inventory.</p><p>We will reward creativity but ultimately you will be marked based on clean, functional, working code that demonstrates a good understanding of the C++ language features and OO design as covered in the course.</p><p>This is reflected in the sample marking guide that is provided.</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>For this assignment, you are also required to submit a diagram showing your overall Object-Oriented approach to solving this assignment. Your diagram does not have to be completed with any formal tools (it can be hand drawn as long as it is legible) but you must submit a PNG/JPG or PDF file that shows what classes you have and how they are related (inheritance for example). NO OTHER FILE FORMAT MAY BE SUBMITTED. This is important for us to look at as we grade your assignment so we can have a basic understanding of how your program has been designed.</p>]]></content>
    
    <summary type="html">
    
      做一个文本界面的RPG游戏，包含一个2D地图，地图上有陷阱，有武器等等，随意发挥。由于直接是第三次作业，虽然给了前面的答案，不过信息量还是略大。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS214-SinglyLinkedList</title>
    <link href="https://tk1307993.coding.me/CS214-SinglyLinkedList.html"/>
    <id>https://tk1307993.coding.me/CS214-SinglyLinkedList.html</id>
    <published>2018-10-19T13:04:54.000Z</published>
    <updated>2018-10-19T13:06:52.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>This practical will once again test your knowledge on linked list, with an emphasize on computational complexity.</p><h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>Create a singly linked list for storing positive integers. Each node will store one integer.</p><p>For example, 12-&gt;3-&gt;5-&gt;777-&gt;111 is such a list. There are hive nodes in this list. 12 is the head node and 111 is the tail node. (111 points to NULL.)</p><p>Your linked list starts empty. It should support the following three operations:</p><ul><li>Add x to tail: Create a new node whose data field contains x. Append this node at the end of the list.<br>For example, for the list 12-&gt;3-&gt;5-&gt;777-&gt;111, if we add 2 to the tail, then the list becomes 12-&gt;3-&gt;5-&gt;777-&gt;111-&gt;2.</li><li>Remove from head: If the list is empty, then do nothing. Otherwise, remove the head node from the list.<br>For example, for the list 12-&gt;3-&gt;5-&gt;777-&gt;111, if we remove a node from its head, then it becomes 3-&gt;5-&gt;777-&gt;111.</li><li>Find middle node: Find the middle node(s) from the list and returns the corresponding data field(s).<br>If the number of nodes is odd, then the middle node is just the one in the middle of the list. For the list 12-&gt;3-&gt;5-&gt;777-&gt;111, there are ve nodes, the middle node’s data field contains 5.<br>If the number of nodes is even, then the middle nodes are the two nodes in the middle of the list. For the list 12-&gt;3-&gt;5-&gt;777-&gt;111-&gt;2, there are six nodes, the middle nodes’ data fields contain 5 and 777.<br>If the number of nodes is zero, then return 0.</li></ul><p>Your implementation should satisfy that all the above three operations take O(1) (constant) time.</p><p>Create a main function that takes in one line. The line contains a list of operations. An operation is either of the form “Aint” (e.g., A123, A23, A111) or of the form “R”. A123 means add 123 to the tail. R means remove a node from head. Your output should be the status of the list after all the operations (use the form int1-&gt;int2-&gt;int3 if there are multiple nodes in the list; use the form int1 if there is only one node in the list; output “empty” if the list is empty). Your output should be followed by the middle value(s).</p><p>Please separate your results by space.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: A888 A111 R A777 A5 A3</span><br><span class="line"><span class="keyword">Sample</span> output: 111-&gt;777-&gt;5-&gt;3 777 5</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: A888 A111 R A777 A5 A3 <span class="built_in">R</span></span><br><span class="line"><span class="keyword">Sample</span> output: 777-&gt;5-&gt;3 5</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: R A777</span><br><span class="line"><span class="keyword">Sample</span> output: 777 777</span><br><span class="line"><span class="keyword">Sample</span> <span class="keyword">input</span>: A777 <span class="built_in">R</span></span><br><span class="line"><span class="keyword">Sample</span> output: empty 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      实现一个单链表，也就是Singly Linked List，算是基础的数据结构了。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="MangoDB" scheme="https://tk1307993.coding.me/tags/MangoDB/"/>
    
      <category term="NodeJS" scheme="https://tk1307993.coding.me/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS代写：CSC309-SharingEconomy</title>
    <link href="https://tk1307993.coding.me/CSC309-SharingEconomy.html"/>
    <id>https://tk1307993.coding.me/CSC309-SharingEconomy.html</id>
    <published>2018-10-14T10:18:14.000Z</published>
    <updated>2018-10-14T10:29:23.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>In this project, (i) first, you specify what you want to implement (e.g., a car rental platform, a room sharing platform, etc.), (ii) then you design the details of your application (e.g., the software web-page mock-ups, project task allocation among team members) and (iii) finally you specify an architecture for your project, plan your tests, and implement it ensuring it will scale and will be secure. Submit Phase (i) and (ii) as part 1 and Phase (iii) as Part 2. Submit a complete project report with Part 2.</p><p>Although there is no specific project topic here, you have to deliver a list of common features no matter what topic you choose. We provide two sample projects in the appendix. These are provided to inspire you. That is, you will not receive the creativity mark, if you choose any one of these two projects. Also, these projects are sample only, use your imagination to create an application that users can easily use.</p><h3 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h3><p>Your application should be built using NodeJS or any framework depended on NodeJS as backend programming language and you should try to host on any hosting server of your choice (e.g., Heroku provides free hosting). Follow this tutorial to get yourself familiar with Heroku.</p><p>Your project must include the following features:</p><ol><li>Profiling: You must design and implement a set of features representing user profiles. Using the profiling features, users can update their personal information, and can see the profile of other users.</li><li>User Authentication and Authorization: Your system must authenticate users based on passwords. Your application also needs to support at least one 3rd party authentication such as Google/Facebook/Github sign-in, or two-factor authentication. Users have different roles in your system, and you must authorize them when they are conducting certain tasks. For instance, a normal user cannot change the password of other users, or update someone else’s personal information.</li><li>Social Network: In any sharing economy platform, we will have a social network. In AirBNB, hosts and guests form a social network; In Uber, drivers and passengers form a social network. In such networks, users can interact with one another: can review each other, provide references, and other users make decision based on those reviews and interactions.</li><li>Rating and Commenting: When users use a shared resource provided by another user, they must be able to rate and comment on that offering. Using this commenting and rating features, others can decide whether to use that resource or not. For example, on AirBNB, a guest can review the host and the place. Others will read reviews and decide whether to rent that place or not.</li><li>Search and Recommendation System: Y our system should provide the basic functionalities to search the shared economy. Using this feature, users should be able to search and discover what they want to use. It is really important that you use a smart recommendation system that ranks the matching entries according to user’s query and personal data. Moreover, using the same recommendation system, the system should show similar things when a user is browsing a certain item. For instance, when one is looking at a room on AirBNB, the system lists similar properties on the same page.</li><li>Admin: You should provide basic admin functionalities, including but not limited to changing passwords, updating and deleting information, and initializing/repopulating the database.</li><li>Note that you will get up to extra 10 points for any significant additional features.</li></ol><p>All feature functionality should have proper test cases with good comments in code.</p><p>You should take care of at least two well known security vulnerability, using a framework is fine. In your project report, you should document how this requirement is meet.</p><p>Once you have finished the first version of your project, measure the performance. Apply performance improvement techniques and show how much performance you have improved.</p>]]></content>
    
    <summary type="html">
    
      基于Web的Sharing Economy System，不过后端需要用NodeJS，数据库要用MongoDB，前端自然也是JavaScript，算是比较少见的组合。
    
    </summary>
    
      <category term="NodeJS" scheme="https://tk1307993.coding.me/categories/NodeJS/"/>
    
    
      <category term="MangoDB" scheme="https://tk1307993.coding.me/tags/MangoDB/"/>
    
      <category term="NodeJS" scheme="https://tk1307993.coding.me/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：Image Process</title>
    <link href="https://tk1307993.coding.me/Java-ImageProcessing.html"/>
    <id>https://tk1307993.coding.me/Java-ImageProcessing.html</id>
    <published>2018-10-13T10:18:14.000Z</published>
    <updated>2018-10-14T10:26:34.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pixels-and-Pictures"><a href="#Pixels-and-Pictures" class="headerlink" title="Pixels and Pictures"></a>Pixels and Pictures</h2><p>Digital pictures are usually represented as a two-dimensional grid of “picture elements” or “pixels”. Each pixel represents the color of a particular spot on the picture and the resolution of a picture can be expressed in terms of how wide and tall the picture is in pixel units.  </p><h3 id="Pixels"><a href="#Pixels" class="headerlink" title="Pixels"></a>Pixels</h3><p>A color (to a computer) is a specific formula of three components: red, green, and blue. We will be using values in the range of 0.0 up to 1.0 for each of these components. A 0.0 value represents no amount of that component and 1.0 is the maximum amount of that component. When the red, green, and blue components all equal each other, you get a color on the “grayscale” spectrum from black (all 0.0’s) to white (all 1.0’s). The chromatic colors are formed when the values for red, green, and blue differ from each other.</p><p>You can read more about the RGB color model here if you want to learn more: <a href="http://en.wikipedia.org/wiki/Red_green_blue" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Red_green_blue</a></p><p>In this assignment, I have provided classes for both color pixels and grayscale pixels (i.e., pixels where the red, green, and blue components by definition are aways equal to each other) as two possible implementations of a common Pixel interface. Instances of these classes will be immutable, so they won’t change once created. </p><p>You should read through the code for Pixel, ColorPixel, and GrayPixel to understand what the methods of the interface do and how these two classes implement that interface.</p><h3 id="Pictures"><a href="#Pictures" class="headerlink" title="Pictures"></a>Pictures</h3><p>The Picture interface defines an abstraction for representing a 2-dimensional frame of pixels. This abstraction will provide a number of methods to query and possibly set various properties including individual pixel values. Individual pixel values are addressed by their position (i.e., x and y coordinates) within the frame. The x-coordinate represents the column of the pixel and the y-coordinate represents the row of the pixel. The top of the picture is the first (i.e., 0th row) and the bottom is the last row. This means the upper left corner of the picture has the (x,y) coordinate (0,0) and the lower right picture has the coordinate (w-1, h-1) where w and h are the width and height of the picture.</p><p>Read through the code for Picture and be sure you understand what each of the methods is supposed to do. In particular:</p><ul><li>Notice that the various forms of the paint method return a Picture object with the required changes if any.  If the underlying implementation of Picture is mutable (i.e., is allowed to change the value of one or more of its fields including element values of arrays), then the return value of these methods will be the original object since that object reflects the change. Getting back the same object that you started with implies that the object was mutated. However, immutable implementations of picture are possible. Such an implementation will need to create a new Picture object that reflects the result of the paint operation and return that new object as the result. Getting back a different object than you started with thus implies immutability. For this assignment, the resulting object returned as a result of a paint method is allowed to be either mutable or immutable. This will come up again later. </li><li>The form of the paint method that paints a region specifies two opposite corners, namely (ax, ay) and (bx, by). Depending on the values of ax, ay, bx, and by these might represent the upper left and lower right corners or these might represent the lower left and upper right corners. Which situation is in effect is determined by the values provided and you should not make any assumptions about which corner will be which when the method is called. </li><li>All parameters should be checked for being within their legal values (i.e., coordinates are all non-negative and within the picture’s dimensions, pixel values are non-null, factor values are between 0.0 and 1.0, etc.). Any illegal values should result in throwing an IllegalArgumentException. </li></ul><h2 id="Novice"><a href="#Novice" class="headerlink" title="Novice"></a>Novice</h2><p>Create two implementations of Picture as follows.</p><ul><li><p>MutablePixelArrayPicture</p><ul><li>MutablePixelArrayPicture should implement Picture by encapsulating a 2D array of pixels that are mutable (i.e., allowed to change). It should have the following constructor forms:   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates new object using values provided by pixel_array, matching in size. </span></span><br><span class="line"><span class="keyword">public</span> MutablePixelArrayPicture(Pixel[][] pixel_array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates new object by providing geometry of picture and an initial value for all pixels.</span></span><br><span class="line"><span class="keyword">public</span> MutablePixelArrayPicture(<span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, Pixel initial_value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates new object by providing geometry of picture. </span></span><br><span class="line"><span class="comment">// Initial value of all pixels should be medium gray (i.e., a grayscale pixel with intensity 0.5)</span></span><br><span class="line"><span class="keyword">public</span> MutablePixelArrayPicture(<span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>);</span><br></pre></td></tr></table></figure></li></ul><p>The first dimension of pixel_array is the width and the second is the height. In other words, pixel_array.length will be the width of the picture and pixel_array[0].length will be the height of the picture. The pixel at coordinate (x,y) is located at pixel_array[x][y]. </p></li><li><p>MonochromePicture</p><ul><li>MonochromePicture should implement a Picture that has the same value for Pixel in every position. This value is provided to the constructor along with the width and height of the picture. The constructor should have the following form:<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MonochromePicture(<span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, Pixel value)</span><br></pre></td></tr></table></figure></li></ul><p>MonochromePicture should NOT create and encapsulate an array of Pixel objects. The three values provide to the constructor are the only fields it should need to encapsulate. This kind of Picture is immutable by definition and should create new objects to return as the result of its paint methods.</p></li></ul><p>Submit novice as a branch called ‘submit-novice’.</p><h2 id="Adept"><a href="#Adept" class="headerlink" title="Adept"></a>Adept</h2><p> Create four more implementations of Picture as follows.</p><ul><li>ImmutablePixelArrayPicture<ul><li>ImmutablePixelArrayPicture should implement Picture by encapsulating a 2D array of pixels that are immutable (i.e., NOT allowed to change). It should have the following constructor forms:   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates new object using values provided by pixel_array, matching in size.</span></span><br><span class="line"><span class="keyword">public</span> ImmutablePixelArrayPicture(Pixel[][] pixel_array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates new object by providing geometry and initial value for all pixels.</span></span><br><span class="line"><span class="keyword">public</span> ImmutablePixelArrayPicture(<span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, Pixel initial_value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates new object by providing geometry. Initial value should be medium gray.</span></span><br><span class="line"><span class="keyword">public</span> ImmutablePixelArrayPicture(<span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>GradientPicture</p><ul><li>GradientPicture should implement a Picture that is a smooth blend of pixel values specified for its four corners. In other words, any pixel in the middle of the picture is a proportional blend of the pixel values associated with its corners. The blend is inversely proportional to the distance of the pixel to those corners. For example, pixel values along the top row of the picture start off as the specified upper_left value and then become more and more like the upper_right value as you go across (HINT: use the blend method of Pixel). The constructor of GradientPicture should have the form:<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GradientPicture(<span class="keyword">int</span> <span class="built_in">width</span>, <span class="keyword">int</span> <span class="built_in">height</span>, Pixel upper_left, Pixel upper_right, Pixel lower_left, Pixel lower_right)</span><br></pre></td></tr></table></figure></li></ul><p>Like MonochromePicture, GradientPicture should only need to encapsulate the values of the parameters provided to the constructor and should be immutable once created.</p><p>When calculating a pixel value in the middle of the picture at (x,y), your best approach is to first calculate the value of the pixel at the beginning of the desired row (i.e., at (0,y)) as the appropriate blend of the upper left and lower left corners. Then calculate the value of the pixel at the end of the row (i.e. at (getWidth()-1,y)). Now calculate the value of (x,y) as the appropriate blend of the beginning and end of the row.</p></li><li><p>HorizontalStackPicture and VerticalStackPicture</p><ul><li>These implementations will encapsulate references to two Picture objects and will represent them as if they were a larger Picture object that resulted from “stacking” them either horizontally or vertically. The constructors for these new classes should have the following form:</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public HorizontalStackPicture(Picture <span class="built_in">left</span>, Picture <span class="built_in">right</span>)</span><br><span class="line">public VerticalStackPicture(Picture <span class="built_in">top</span>, Picture <span class="built_in">bottom</span>)</span><br></pre></td></tr></table></figure></li></ul><p>   For example, if I have two Picture objects that are 5 pixels tall and 10 pixels wide (call them A and B), and then create a new HorizontalStackPicture object using A as my “left” and B as my “right”, then the resulting object will be a Picture object that is 20 pixels wide and 5 pixels tall. In the new object, the upper left pixel at (0,0) will correspond to the pixel at (0,0) in A and the lower right pixel at (19,4) will correspond to the pixel at (9,4) in B. The following picture may help illustrate the situation:</p><p>   <img src="http://www.cs.unc.edu/~kmp/comp401fall18/assignments/a3/horiz-stack-example.png" alt="Horizontal Stack Picture Example" title="Horizontal Stack Picture Example"></p><p>   The constructors should throw an IllegalArgumentException if any of the parameters are null or if the geometry of the objects provided are not compatible (i.e., if the heights of left and right differ for HorizontalStackPicture or if the widths of top and bottom differ for VerticalStackPicture).</p><p>   These classes should be implemented as mutable and the value returned from paint should be the original object updated to reflect the appropriate changes.</p><p>Submit adept as a branch called ‘submit-adept’.</p><h2 id="Jedi"><a href="#Jedi" class="headerlink" title="Jedi"></a>Jedi</h2><p>Create an interface called PixelTransformation as follows:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>PixelTransformation &#123;</span><br><span class="line">   Pixel transform(Pixel p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now create two implementations of PixelTransformation called: Threshold and GammaCorrect</p><p>The constructor for Threshold should have this signature:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Threshold</span> <span class="params">(<span class="keyword">double</span> threshold)</span></span></span><br></pre></td></tr></table></figure><p>The transform method of a Threshold object should produce either a white pixel or a black pixel depending on the intensity (i.e., brightness) of the pixel p passed to it. If p’s brightness is strictly above the threshold value specified in the constructor, then a white pixel is returned. Otherwise, a black pixel is returned.</p><p>The constructor for GammaCorrect should have this signature:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GammaCorrect (<span class="keyword">double</span> <span class="built_in">gamma</span>)</span><br></pre></td></tr></table></figure><p>The transform method of a GammaCorrect object should produce a “gamma corrected” version of pixel p passed to it. The components (i.e., red, green, and blue) of the gamma corrected pixel are the result of raising them to the (1.0/gamma) power. In other words, if “old” is the original component value in the range from 0.0 to 1.0, then “new” can be calculated as:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> = Math.<span class="built_in">pow</span>(old, (<span class="number">1.0</span>/gamma));</span><br></pre></td></tr></table></figure><p>Create a new implementation of Picture called TransformedPicture. The constructor should have the following signature:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TransformedPicture (Picture <span class="keyword">source</span>, PixelTransformation xform)</span><br></pre></td></tr></table></figure><p>A TransformedPicture should encapsulate the provided source Picture object and PixelTransformation object. A TransformedPicture object is expected to transform the pixel values of the source frame on demand when getPixel is called using the pixel transformation object provided to the constructor.</p><p>The implementation of TransformedPicture is expected to be immutable. </p><h1 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h1><p>Start by trying to implement as many of the methods of the Picture interface as default implementations defined in the interface itself. This will reduce the number of methods you actually need to implement for each type of Picture. </p><p>The easiest way to implement the paint methods for any of the immutable picture types is to create a 2D array of pixels, copy all of the pixels from the current object to this new 2D array, make the changes needed for the paint operation, and then return a new MutablePixelArrayPicture object created from this 2D array. With this approach, the first paint operation on any immutable implementation will require copying everything into a new mutable implementation and then any subsequent paint operations will not since the mutable implementation can make changes directly.</p><p>However, there is another approach for immutable picture types that involves creating new classes that implement Picture which represent the result of applying a particular paint operation on a picture object without actually changing any pixels or creating a 2D array of pixels for a new object. In fact, in this approach the resulting objects returned by the paint methods are themselves also immutable. This approach makes the paint operations very efficient computationally at the cost of having to do more work when the values of the pixels are retrieved (i.e., getPixel() becomes less efficient). In terms of memory, this alternate approach may or may not use less memory depending on the overall number and type of paint operations that occur. I’m purposefully not describing this approach in more detail to leave it as an exercise to the student. I recommend completing the assignment the easy way first and then if you are up to it, thinking about how this alternate approach might work and trying to implement it.</p><h1 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h1><ul><li>2 points for Novice</li><li>6 points for Adept</li><li>2 points for Jedi</li></ul>]]></content>
    
    <summary type="html">
    
      使用Java实现可变及不可变图像相关处理
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Image Process" scheme="https://tk1307993.coding.me/tags/Image-Process/"/>
    
  </entry>
  
  <entry>
    <title>Database代写：CSC370-Database</title>
    <link href="https://tk1307993.coding.me/CSC370-Database.html"/>
    <id>https://tk1307993.coding.me/CSC370-Database.html</id>
    <published>2018-10-05T10:18:14.000Z</published>
    <updated>2018-10-05T10:20:43.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ex-1"><a href="#Ex-1" class="headerlink" title="Ex.1"></a>Ex.1</h3><p>Consider a disk with average seek time of 10 ms, average rotational latency of 5 ms, and a transfer time of 1 ms for a 4KB block. The cost of reading/writing a block is the sum of these values (i.e. 16 ms). We are asked to sort a large relation consisting of 10,000,000 blocks of 4KB each. For this, we use a computer on which the main memory available for buffering is 320 blocks (somewhat small memory). We begin as usual by creating sorted runs of 320 blocks each in phase 1. Then, we do 319-way merges. Determine the number of phases needed, and evaluate the cost of the Multi Phase Multiway Merge Sort.</p><h3 id="Ex-2"><a href="#Ex-2" class="headerlink" title="Ex.2"></a>Ex.2</h3><p>Build a B+ tree index with n=3 using the following sequence of keys:<br>2, 15, 31, 32, 6, 18, 19, 20, 3, 4, 5, 40, 41, 42</p><p>Redraw the tree each time an insertion is done.</p><h3 id="Ex-3"><a href="#Ex-3" class="headerlink" title="Ex.3"></a>Ex.3</h3><p>Consider the following query plan.</p><p>What is the cost in terms of number of I/Os for this plan?</p><p>Notes. The result of the left selection, being small, is kept in main memory, where it is sorted. The result of the right selection is pipelined to the join operator, i.e. the generation of the sorted sublists for the first phase of sort is done on the fly.<br>Do not count the I/Os for writing the final results (after projection).</p><p>Consult queryeval.pdf for the table statistics.</p><h3 id="Ex-4"><a href="#Ex-4" class="headerlink" title="Ex.4"></a>Ex.4</h3><p>For each of the schedules of transactions T1, T2, and T3 below:</p><ol><li>r1(A); r2(B); r3(C); r1(B); r2(C); r3(D); w1(A); w2(B); w3(C);</li><li>r1(A); r2(B); r3(C); r1(B); r2(C); r3(A); w1(A); w2(B); w3(C);</li></ol><p>do each of the following:</p><ul><li>Insert shared and exclusive locks, and insert unlock actions. Place a shared lock immediately in front of each read action that is not followed by a write action of the same element by the same transaction. Place an exclusive lock in front of every other read or write action. Place the necessary unlocks at the end of every transaction.<br>Tell what happens when each schedule is run by a scheduler that supports shared and exclusive locks.</li><li>Insert shared and exclusive locks in a way that allows upgrading. Place a shared lock in front of every read, an exclusive lock in front of every write, and place the necessary unlocks at the ends of the transactions.<br>Tell what happens when each schedule is run by a scheduler that supports shared locks, exclusive locks, and upgrading.</li><li>Insert shared, exclusive, and update locks, along with unlock actions. Place a shared lock in front of every read action that is not going to be upgraded, place an update lock in front of every read action that will be upgraded, and place an exclusive lock in front of every write action. Place unlocks at the ends of transactions, as usual.</li><li>Tell what happens when each schedule is run by a scheduler that supports shared, exclusive, and update locks.</li></ul>]]></content>
    
    <summary type="html">
    
      这个作业是个大杂烩，sort，B+ tree，query，transactions，log，BCNF，总之什么都要涉及一点。
    
    </summary>
    
      <category term="Database" scheme="https://tk1307993.coding.me/categories/Database/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Database" scheme="https://tk1307993.coding.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS2401 STLContainer</title>
    <link href="https://tk1307993.coding.me/CS2401-STLContainer.html"/>
    <id>https://tk1307993.coding.me/CS2401-STLContainer.html</id>
    <published>2018-09-30T10:31:26.000Z</published>
    <updated>2018-09-30T10:33:47.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>The purpose of this lab is to gain some familiarity with an STL Container, and the use of an external iterator. For this lab you will NOT be creating any classes of your own. In fact you can do the whole lab in the main, although I think that you will see that it is highly advisable to have at least one non-member function since there is a task that is repeated.</p><p>Begin by copying the file names.txt to your working directory. This file has a long list of first names, all taken from some of my classes. Briefly open it and look at it, or just skim through it with more names.txt</p><p>At the top of your program #includeas well as iostream, string, and fstream. Declare a multiset that is capable of holding strings.</p><p>Fill the multiset with all the names in the file. (Since there are no spaces in the names you can use &gt;&gt; or getline.)</p><p>Now declare an iterator that is appropriate for traversing the multiset. Set it to the beginning of the multiset full of names, and walk through the list, outputting each name it finds. (There are a lot of them, so you may want to separate them with spaces instead of putting one on each line.)</p><p>Run and test this program. Your name should be somewhere in the list. (Note that the names are now in alphabetical order.)</p><p>Here is the place where you want to pass your STL container to a non-member function, since we are doing something that is basically the same three times in a row. If you do you should pass the container by const and reference, since it is large. You will probably want one additional parameter.</p><p>Declare two iterators.</p><p>Move one of them through the list to the first name that begins with ‘M’. Since you know it is returning a string, you will know that (it).at(0) will return the first character in that string.</p><p>Now set the second iterator equal to the first. Use it to count how many M names there are in the list. Print this number out.</p><p>Using the second iterator, print out all the M names in reverse alphabetical order. (Remember that these are bidirectional iterators, so you –it works to go backwards.)</p><p>If I had asked for ‘Y’ (I didn’t) the output would look like:</p><p>There are 3 Y names in the list</p><p>They are:Yujia Yuanhang Yingjie</p><p>This program has no user interaction. When you have it working, simply start a script file, run the program once, and close the script file.</p><p>Submit your source code and the script file to Blackboard.</p>]]></content>
    
    <summary type="html">
    
      STL容器的Lab作业，基础用法，并不难，只不过要过测试集，细节方面还是要注意的。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="STL" scheme="https://tk1307993.coding.me/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：Greedy Alrithm</title>
    <link href="https://tk1307993.coding.me/CS406-GreedyAlgorithm.html"/>
    <id>https://tk1307993.coding.me/CS406-GreedyAlgorithm.html</id>
    <published>2018-09-28T12:27:49.000Z</published>
    <updated>2018-09-28T12:32:41.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Consider the following solitaire game: you are given a list of moves, x1, x2…xm, and their costs, y1, y2…ym. Moves and their costs both take the form of positive integers. Such a list of moves and their costs is called an instance of the game. To play the game, you start with a positive integer n. On each turn of the game you have two choices: subtract 1 from n incurring a cost of 1 or pick some move xi such that n is divisible by xi and divide n by xi incurring a cost of yi. The goal is to get to 0 while incurring the minimum possible cost.</p><ol><li>Divide 20 by 4 to get 5, incurring a cost of 1</li><li>Subtract 1 from 5 to get 4 incurring a cost of 1</li><li>Divide 4 by 4 to get 1, incurring a cost of 1</li><li>Subtract 1 from 1 to get 0, incurring a cost of 1</li></ol><p>So the final cost is 4. One suboptimal strategy for this game is as follows:</p><ol><li>Divide 20 by 5 to get 4, incurring a cost of 3</li><li>Divide 4 by 4 to get 1, incurring a cost of 1</li><li>Subtract 1 from 1 to get 0, incurring a cost of 1</li></ol><p>which gives us a total cost of 5.<br>One possible greedy algorithm for this game is as follows: On each turn, simply divide the current number by the legal move x of cost y which maximizes x / y - the ratio of move to cost (and subtract 1 from the current number if it is not divisible by any move). If two legal moves have the same ratio of move to cost then the greedy algorithm will take the larger move. Unfortunately, this greedy algorithm does not always give the optimal strategy. In this problem you will find counterexamples that show the greedy algorithm is not optimal in different instances of this game.</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li><p>To find instances where the greedy algorithm fails, you will probably need to be able to find the optimal strategy in all instances. What kind of algorithm can you use to do this?</p></li><li><p>Most of the difficulty of this assignment is in coming up with the right approach. The code you write does not need to be especially long or complex to solve the problem.</p></li><li><p>It may take some time for your code to find a counterexample, particularly for the last couple instances. But if it takes more than a couple of minutes, you probably need to rethink your approach.</p></li><li><p>When searching for instances of where the greedy algorithm fails, it is useful to avoid redoing work.</p></li><li><p>For reference, the optimal cost for the instance (3, 1), (2, 1) when n is 321 is 10, and the greedy algorithm gives 11. The smallest value of n for which the greedy algorithm fails on the instance (211, 2), (210, 1) is 4740960.</p></li><li><p>Start early. You have two weeks to do this problem, so you shouldn’t try to do it all in the last day.</p></li></ul>]]></content>
    
    <summary type="html">
    
      Greedy Algorithm，也就是贪心算法，局部最优化的算法，虽然可以快速得到解，但是这个解往往不会是全局最优解。不过这个算法的思想倒是挺有趣的。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop代写：CA675-TF-IDF</title>
    <link href="https://tk1307993.coding.me/CA675-TF-IDF.html"/>
    <id>https://tk1307993.coding.me/CA675-TF-IDF.html</id>
    <published>2018-09-25T02:41:52.000Z</published>
    <updated>2018-09-28T12:32:39.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Tasks:</p><ol><li>Using MapReduce, carry out the following tasks:</li><li>Acquire the top 250,000 posts by viewcount (see notes)</li><li>Using pig or mapreduce, extract, transform and load the data as applicable</li><li>Using mapreduce calculate the per-user TF-IDF (just submit the top 10 terms for each user)</li><li>Bonus use elastic mapreduce to execute one or more of these tasks (if so, provide logs / screenshots)</li><li><p>Using hive and/or mapreduce, get:</p><ol><li>The top 10 posts by score</li><li>The top 10 users by post score</li><li>The number of distinct users, who used the word ‘java’ in one of their posts</li></ol></li></ol><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>The TF-IDF algorithm is used to calculate the relative frequency of a word in a document, as compared to the overall frequency of that word in a collection of documents. This allows you to discover the distinctive words for a particular user or document.</p><p>The formula is:</p><p>TF(t) = Number of times t appears in the document / Number of words in the document</p><p>IDF(t) = log_e(Total number of documents / Number of Documents containing t)</p><p>The TFIDF(t) score of the term t is the multiple of those two.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>用Hadoop去计算TF-IDF的时间复杂度还是挺高的，毕竟有很多临时数据要落地，而且Hadoop程序也不是一个就能解决问题的，如果换成Spark的话，应该会高效很多。</p>]]></content>
    
    <summary type="html">
    
      大数据作业，利用Hadoop去跑数据集，先是几个基本的MapReduce简单问题，当然也可以用Hive，然后是去计算TF-IDF，当然，数据集得自己下，Hadoop平台也得自己去搭。
    
    </summary>
    
      <category term="Hadoop" scheme="https://tk1307993.coding.me/categories/Hadoop/"/>
    
    
      <category term="Hive" scheme="https://tk1307993.coding.me/tags/Hive/"/>
    
      <category term="MapReduce" scheme="https://tk1307993.coding.me/tags/MapReduce/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS415-Blackjack</title>
    <link href="https://tk1307993.coding.me/CS415-Blackjack.html"/>
    <id>https://tk1307993.coding.me/CS415-Blackjack.html</id>
    <published>2018-09-24T02:41:52.000Z</published>
    <updated>2018-09-24T02:44:55.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>We have written several classes that set up the application, the cards and the game board. You will need to write a class named Game and other classes of your choice that will make the game functional. The game should follow the above rules and you should display a control panel that displays scores and control buttons to run the game.</p><h3 id="The-Starting-Files"><a href="#The-Starting-Files" class="headerlink" title="The Starting Files"></a>The Starting Files</h3><p>Start by downloading the files posted on the public 8P directory.</p><ul><li>Board.java Our class that represents the playing board, do not edit this file.</li><li>Card.java Our class that represents one card, do not edit this file.</li><li>BlackJackApp.java Our class, the main application, do not edit this file.</li><li>Game.java A skeleton for your main class.</li><li>cards_gif.jar A jar file containing the card images.</li></ul><p>You will be writing the Game class and other classes as required by your design. Do not change and do not submit Board.java, Card.java, BlackJackApp.java or any images. Submit only Game.java and other java files that you write.</p><h3 id="The-Game-Class"><a href="#The-Game-Class" class="headerlink" title="The Game Class"></a>The Game Class</h3><p>This is the primary class that you will write, as it is now it is just a skeleton that sends a few test messages to the Board. You will need to add the code that plays the game and displays the information. You will need to<br>create a display text box to show the following information:</p><ul><li>The amount of money the player has (starts at $500)<br>*The players current card count</li><li>The result and win/loss amount for the current deal and messages saying what to do next. (You will probably want to create a “Display” class to handle these tasks.)</li><li>You will need to add labeled buttons (clickable Rectangles) to get the users choices, the choice are:</li><li>Deal: Deal a new hand (A new hand can’t begin until the previous hand is finished)</li><li>Hit: Player gets another card</li><li>Stand: Player ends the hand (then dealer finished hand and bets are paid)</li></ul><h3 id="Chunking-and-Design"><a href="#Chunking-and-Design" class="headerlink" title="Chunking and Design"></a>Chunking and Design</h3><p>Don’t try to do everything in one method or one class, it will become much too complicated. Write multiple classes and many “helper” methods that handle some small part of the problem. Breaking a problem up into these smaller pieces is sometimes called “chunking”. Poorly chunked code may lose points.</p><p>As usual, think carefully about the class design, for example you probably want a separate class to represent the display and another class to represent the buttons, etc..</p><h3 id="Evaluation-and-Incremental-development"><a href="#Evaluation-and-Incremental-development" class="headerlink" title="Evaluation and Incremental development"></a>Evaluation and Incremental development</h3><p>Develop your program in small steps; the following suggests some useful steps and how we will evaluate your assignment. If, when you develop your program you cannot finish one of the following steps and it breaks the program, be sure to backup to where the program was working. A program that doesn’t compile or crashes is worth a lot less than a program that does just the first step below.</p>]]></content>
    
    <summary type="html">
    
      一个21点的扑克牌游戏，作业提供了框架以及游戏引擎，不过UI库是学校内部的，需要学习成本。刨除UI部分，整体不难，无非就是deal, hit, stand三个按钮，然后label显示得分。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>JS代写：CSE6242-D3GraphsAndVisualization</title>
    <link href="https://tk1307993.coding.me/CSE6242-D3GraphsAndVisualization.html"/>
    <id>https://tk1307993.coding.me/CSE6242-D3GraphsAndVisualization.html</id>
    <published>2018-09-19T13:25:34.000Z</published>
    <updated>2018-09-19T13:27:53.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Part-1-Visualizing-Data-using-D3"><a href="#Part-1-Visualizing-Data-using-D3" class="headerlink" title="Part 1: Visualizing Data using D3"></a>Part 1: Visualizing Data using D3</h3><p>Q1</p><p>Create a scatter plot visualization with the provided data in the file Data.csv. According to the examples for scatter plot.<br>Attributes / features of the data:</p><p>Speed of wind in km/h.<br>Month of the year.<br>The forest burnt area.<br>Any appropriate range for scale is allowed, and any appropriate size for squares is allowed. Submit Q1.pdf with a screenshot of this page.</p><p>Q2</p><p>According to data provided in the file Q2.csv, a bar chart visualization should be drawn. Your task requires to visualize the number of students in Q2.csv.<br>Transfer the data in Q2.csv to Q2_transfer.csv, you can use a Python script or Java program to archive this goal.</p><p>Q3</p><p>Now you knows a lot of features in D3 for graph visualization. This time you need to use D3 to draw a graph.</p><ol><li>Using labels for each node.</li><li>All nodes can be pinned.</li><li>Draw links with different color.</li><li>Use tooltips when mouse over.</li></ol><h3 id="Part-2-Visualizing-Statistics-of-Refugees-in-Europe"><a href="#Part-2-Visualizing-Statistics-of-Refugees-in-Europe" class="headerlink" title="Part 2: Visualizing Statistics of Refugees in Europe"></a>Part 2: Visualizing Statistics of Refugees in Europe</h3><p>Q4</p><p>After Part1, this time you need to work on real data, and try to find out the appropriate data visualization technology.</p><ol><li>Your should transfer Q4.csv to Q4_transfer.csv, you can use a Python script or Java program to do this job.</li><li>Use a table to show the relationship inside this dataset, you can draw any graph you like.</li><li>Use D3 to visualize your data, you should use d3.slider library.</li></ol><h3 id="Part-3-Visualizing-College-Scorecard-data"><a href="#Part-3-Visualizing-College-Scorecard-data" class="headerlink" title="Part 3: Visualizing College Scorecard data"></a>Part 3: Visualizing College Scorecard data</h3><p>Q5</p><p>After Part2, this time you should find a real dataset, and use your data visualization technology to show it, good luck!</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>非常花时间的一次作业，csv数据集非常恶心，从一开始的给定数据，到复杂数据，最后自己找数据，整整花了两天吧。得分点很多，也很细，不过万幸的是Bonus很简单。</p>]]></content>
    
    <summary type="html">
    
      D3.js是Javascript中的一个利用Html5的SVG的图形库，主要用于数据可视化
    
    </summary>
    
      <category term="JS" scheme="https://tk1307993.coding.me/categories/JS/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>R代写：CSC120-EuclideanMinimumWeightMatching</title>
    <link href="https://tk1307993.coding.me/CSC120-EuclideanMinimumWeightMatching.html"/>
    <id>https://tk1307993.coding.me/CSC120-EuclideanMinimumWeightMatching.html</id>
    <published>2018-09-16T07:43:03.000Z</published>
    <updated>2018-09-16T07:46:41.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>You should use an R script for grouping up all dots in a vector including an even number of dots in this assignment, in a way that tries to minimize the sum of the distances between the dots in each of the pairs. This problem can arise in many contexts, including design of experiments in statistics. Doing this will provide practice in basic R scriptming facilities such as vectors and matrices, and use of if and for, in use of R’s plotting facilities, and in how to divide a script into several functions that can be understood and sometimes used separately.</p><p>The output of the script is a vector of pairs of input dots, with each of the input dots being in exactly one pair. The order of the pairs and the order of dots in each pair are not important. The objective is to try to find a vector of pairs for which the total of the distances from one dot in a pair to the other is small. Ideally, this total distance would be as small as possible, but the method used in this assignment is not guaranteed to find a vector of groupings that achieve this minimum, it just tries to make the total distance as small as it can.</p><p>The input for this problem is a vector of n dots in k-dimensional Euclidean space. The number of dots, n, will always be even. For the actual data you will work with, k is two, so the input is a vector of dots in the plane, but except for the 2-dimensional plotting function described below, your script should work for any dimensionality, k, and for any even number of dots, n.</p><p>We also must specify how a function to find the groupings will work. For this assignment, you should write a function called find_groupings that can be called with a single argument that is a matrix of dots, as specified above, and which will return as its value a matrix giving the pairs of dots that we hope have a small total distance. (Below, some additional optional arguments to find_groupings will be specified.)</p><p>In designing this script, we must decide how to represent the input (a vector of dots) as an R data structure. For this assignment, we will use an n by k matrix, in which each row represents a dot in k-dimensional Euclidean space. We must also decide how to represent the vector of pairs of dots that is the output. We will use an n=2 by 2 matrix for this, in which each row contains two integers between 1 and n, which index the rows for the two dots in the input matrix.</p>]]></content>
    
    <summary type="html">
    
      一共写6个函数，运行后需要画10张图，然后找其中最优的欧氏距离。
    
    </summary>
    
      <category term="R" scheme="https://tk1307993.coding.me/categories/R/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>PHP代写：CPT270-Cinemas</title>
    <link href="https://tk1307993.coding.me/CPT270-Cinemas.html"/>
    <id>https://tk1307993.coding.me/CPT270-Cinemas.html</id>
    <published>2018-09-14T12:51:44.000Z</published>
    <updated>2018-09-14T12:54:29.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><h4 id="1-PHP-Conversion-Modularisation-and-SESSION"><a href="#1-PHP-Conversion-Modularisation-and-SESSION" class="headerlink" title="1. PHP Conversion, Modularisation and SESSION"></a>1. PHP Conversion, Modularisation and SESSION</h4><p>You were recommended to use fragments for Assignment 1, but this is now compulsory. Please make sure you have implemented fragments for Assignment 2.<br>All of your main pages must be converted to PHP and each page must be broken up into modules using functions such as include_once() ( or include() , require() , require_once() ).<br>You may elect to move common (ie repeated) sections of the website, such as the header, navigation, footer and even sidebar into a separate file.<br>The session must be running (ie available) on every page, ie session_start() should be near the top.</p><h4 id="2-jQuery-Image-Gallery-on-Home-Page"><a href="#2-jQuery-Image-Gallery-on-Home-Page" class="headerlink" title="2. jQuery Image Gallery on Home Page"></a>2. jQuery Image Gallery on Home Page</h4><p>Add an animated image gallery on the home page (index.php). The image gallery must be implemented using jQuery. The images featured in the image gallery should be contextual. Several implementations ( in terms of code and style ) exist on the Internet, please read about these and then implement one on the home page. An example will be covered during week 7’s collaborate chat.</p><h4 id="3-Movies-Selection-Page"><a href="#3-Movies-Selection-Page" class="headerlink" title="3. Movies Selection Page"></a>3. Movies Selection Page</h4><p>The client has selected set movies for the website. Your page should include content using jQuery OR Ajax to get the title, movie poster, movie trailer, plot summary, description, ratings information and times playing. Ideally, there should be Read More button next to each movie. When the user clicks on this button , a movie trailer and showtimes should be displayed.</p><h4 id="4-Movies-Reservation-Page-or-Facility"><a href="#4-Movies-Reservation-Page-or-Facility" class="headerlink" title="4. Movies Reservation Page or Facility"></a>4. Movies Reservation Page or Facility</h4><p>Some of you may wish to build this facility into a modal window or another page. It is up to you how you implement this part. You will not lose marks if this is not a separate page.<br>It is recommended that you design this page or facility to process the MovieID, day and time of the movie from the movie service page (ie do not allow customers to pick the movie, day and time here a it will lead to logical complications).</p><h4 id="5-Shopping-Cart-Page-or-Facility"><a href="#5-Shopping-Cart-Page-or-Facility" class="headerlink" title="5. Shopping Cart Page or Facility"></a>5. Shopping Cart Page or Facility</h4><p>Some of you may wish to build this facility into a modal window or another page. It is up to you how you implement this part. You will not lose marks if this is not a separate page.<br>The cart page must display a list of all the tickets that have been reserved, along with the quantity, pricing information, and with subtotals and total prices. Ideally, the client should be able to add seats and/or delete their reservations before finalising their bookings.<br>The total price for the cart must be calculated on the server side (ie using PHP) and the total price must be displayed on the cart page. This will ensure that the client can’t hack the price and give themselves cheap tickets or free tickets if the ticket price is calculated clientside.<br>At this stage, online purchasing is not required. The customers are only reserving the tickets, they must pay for them over the counter when they come to the cinema. There is also no need to check whether there are seats available in each session.</p><h3 id="Reservation-System"><a href="#Reservation-System" class="headerlink" title="Reservation System"></a>Reservation System</h3><p>The concept of the seating reservation system is that a customer can reserve / allocate seats of their choosing (based upon the type of seats they have purchased). Once that seat for that allocated movie has been reserved, no one else can book it.<br>You can use a database (or something similar if you like).<br>You will also get extra mark for the design and another extra mark if the system remembers previously booked seats. Please refer to the marking allocation guide for further information.</p>]]></content>
    
    <summary type="html">
    
      Web的裸写大作业，做一个Cinemas，包括Image Gallery，Movies Selection，Movies Reservation，Shopping Cart等等功能
    
    </summary>
    
      <category term="PHP" scheme="https://tk1307993.coding.me/categories/PHP/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
</feed>
