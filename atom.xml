<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2019-01-26T05:06:04.765Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part2</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part2.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part2.html</id>
    <published>2019-01-26T05:03:58.000Z</published>
    <updated>2019-01-26T05:06:04.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>he Wolfie Chat program will allow users logged into the the Wolfie Chat server to send messages to each other. Chats between users will each be displayed on the client machine in independent windows, just as Google Hangouts does.</p><p>Clients will attempt to establish a connection with the server through the accept thread. The accept thread on the server will create a connection with the Client and spawn the Login Thread. The Login thread will then communicate with the client via the Wolfie Protocol to successful/unsuccessfully log the user into the Wolfie Chat system. Upon successful/unsuccessful login, the Login thread will terminate. A Login thread will be created for each connection attempt and terminated upon completion. Multiple login threads can exist simultaneously if multiple users are attempting to login.</p><p>If the user is successfully logged on, then the server will act as the middle man for all communications between the users connected to the server. A Communication thread on the server will be spawned when the first user logs onto the server and terminate when no user is logged in. This thread will then service all additional users who connect. An overview of the architecture is shown below.</p><h3 id="Part-I-Establishing-a-connection"><a href="#Part-I-Establishing-a-connection" class="headerlink" title="Part I - Establishing a connection"></a>Part I - Establishing a connection</h3><p>In this part we will work on establishing a simple login procedure between the client and server program. At the end of it you should have multiple users logged in who can simply ask the server “how long have I been connected”. The server should then respond to the correct user and let them know how long. Also the client should be able to ask “who else is connected” and the server will return a list of connected users. Once this part is completed, you should be able to extend the concepts to make a more complex application which will allow users connected with the server to communicate with each other.</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>Below is a diagram representing the internal control flow of the server program. As discussed above this is the main accept thread which is running when the server program is run. Login threads are spawned as necessary to handle each user’s login attempt. A successfully logged in user then communicates with the server via the communication thread.</p><h3 id="Accept-Thread-main"><a href="#Accept-Thread-main" class="headerlink" title="Accept Thread (main())"></a>Accept Thread (main())</h3><p>The primary server program will accept commands from the user via stdin and connections from the client program via the bound “listen” socket. When the server accepts an incoming connection from a client it should spawn a new login thread and begin the login process. If it detects input from the keyboard, it should parse that input for a list of commands and handle it accordingly. This section of the process will use a form of I/O multiplexing to listen for input on both the server socket and from stdin.</p><p>I/O multiplexing is exposed via the following interfaces - select, poll, or epoll. They all have their pros and cons, but it is up to you to choose which technique you should use. You will use I/O multiplexing in both the server and your client program. In your server, you will multiplex on each socket for the connected users in the communication thread, and in the accept thread you will multiplex on the accept socket and stdin.</p><p>The benefits of I/O multiplexing are that the program will be put into a suspended state while no activity is being performed on the fd’s, and when one of the fd’s is written to, it will alert your program that something happens, and you can then act on it. The other benefits to these techniques is that they work in a synchronous manner, but allow you to have behavior similar to doing things concurrently, without the overhead of spawning new threads, or starting new processes.</p><h3 id="Login-Thread"><a href="#Login-Thread" class="headerlink" title="Login Thread"></a>Login Thread</h3><p>When a client connects to the server, the server should spawn a thread to handle the login protocol with the server. The login protocol is defined later in Part I. The Login thread will need to check the list of users on the server (shared resource between server threads) to see if the username is already in use. If the name is not in use, the login thread will then complete the protocol to log the user into the server. We will simply treat login for this part as a first come first serve process. If student1 logs in as user1 then student2 tries to login as user1, student1 will successfully log in and student2 will be rejected. Any relevant data about the connecting user should be a of structure you define that makes their information easily accessible. An in-exhaustive list of things relevant to save are: the time of login, the socket on which they communicate, the username, and the ip address. You are encouraged to add any other fields of data that assist in your implementation.</p><h3 id="Communication-Thread"><a href="#Communication-Thread" class="headerlink" title="Communication Thread"></a>Communication Thread</h3><p>When there is at least one user logged in to the server a thread must be spawned to handle the communication to and from the server and later between all of the clients. In your communication thread you will use I/O multiplexing on the set of file descriptors (fds) used to communicate with the clients.</p><blockquote><p>You must use I/O multiplexing.</p></blockquote><h3 id="Server-commands"><a href="#Server-commands" class="headerlink" title="Server commands"></a>Server commands</h3><p>Aside from handling connections from various clients, the server also has to handle input from stdin. This input should represent commands that the person operating the server might want to use. These commands are transparent to the clients connected and are mainly used as a way to gather information by the server operator.</p><h5 id="users"><a href="#users" class="headerlink" title="/users"></a>/users</h5><p>When /users is typed into the server’s terminal it should dump a list of currently logged in users to stdout (NOTE: this does not send anything over the network, this is only on the server side.). This can be a great way to debug your program, it is advised you take some time to make neatly formatted print statements that print out relevant data. (Think, toString() function for your user structs).</p><h5 id="help"><a href="#help" class="headerlink" title="/help"></a>/help</h5><p>When /help is typed into the server’s terminal it should list all the commands which the server accepts and what they do.</p><h5 id="shutdown"><a href="#shutdown" class="headerlink" title="/shutdown"></a>/shutdown</h5><p>When /shutdown is typed into the server’s terminal it should cleanly disconnect all connected users. Save any state that it must and then close all the sockets and files which it is using and free any heap memory allocated.</p>]]></content>
    
    <summary type="html">
    
      这是接上次作业的第二部分，需要实现整个聊天通信的大体框架，包括服务端Server和客户端Client的编程。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CSE320-Wolfie-Chat-Part1</title>
    <link href="https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part1.html"/>
    <id>https://tk1307993.coding.me/CSE320-Wolfie-Chat-Part1.html</id>
    <published>2019-01-23T11:55:39.000Z</published>
    <updated>2019-01-23T11:58:12.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In this assignment you will be creating a chat service much like Google’s Hangouts, called Wolfie Chat. The goal is to learn about network programming in C. You will implement the service so that it adheres to the Wolfie Protocol.</p><p>The concept of a protocol is an important one to understand. When implementing the protocol you need to follow the requirements and description TO THE LETTER. The idea is to create a standard so that anyone implementing the Wolfie Protocol will be able to connect and operate with any other program implementing the same protocol. Any client and chat should work with any server if the protocol is used correctly (HINT HINT think grading).</p><p>Certain public networks like wolfienet secure or starbucks will not allow you to connect your client and server together over the network. You may also want to test your client by connecting to another group’s server, and your server by having other group’s clients connect to it. This is a good way to ensure that the protocol is implemented correctly in your client/server programs. While we encourage testing this way, THIS IS NOT an open invitation to share code with other groups. You should not be showing or sharing code with anyone else. To perform these tests you should simply be telling your client programs to connect to the IP address and port number at which these servers are running at. You have been warned!</p><h3 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h3><p>In this assignment you are allowed groups of two members. Unless stated otherwise, we will assume that you are in the same group as the previous assignment. If you wish to divorce your partner from the previous assignment and assemble a new group please follow the directions in hw4.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>Make the directory hw5 in the root of your git repository. All files which you create for this assignment should be placed in this directory. You should also create a Makefile, which generates the server program called server, a client program called client, and your chat program called chat. When we navigate to the hw5 directory and type make these three programs should be generated.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd hw5</span><br><span class="line">$ make</span><br><span class="line">gcc -Wa11 -Werror server.c -o server</span><br><span class="line">gcc -Wal1 -Werror client.c -o client</span><br><span class="line">gcc -Wa11 -Werror chat.c -o chat</span><br><span class="line">$ ls</span><br><span class="line">chat chat.c<span class="built_in"> client </span>client.c Makefile README.md<span class="built_in"> server </span>server.c</span><br></pre></td></tr></table></figure><p>A good strategy for splitting up the work in this assignment should be to have one partner create the client/chat program and the other partner create the server. Test out each part as you implement it to ensure that it works (don’t just build the entire thing separately and hope it all works in the end.) It’s also okay to test both the server and client locally on your own machine, but you really should test it out over a real network as well.</p><h3 id="Helpful-Resources"><a href="#Helpful-Resources" class="headerlink" title="Helpful Resources"></a>Helpful Resources</h3><p>You should make sure you understand chapter 11, 12.2, and 12.3 in your textbook. Also if you didn’t understand files, fork, execute, and pipes from the previous homework, make sure you review chapter 10.1-10.4 and 10.6-10.12.</p><p>An AMAZING reference on sockets which summarizes the man pages can be found here (Don’t worry that the site is called python). Additionally you may also want to read Bee’s Guide to Network Programming. It has a good mix of tutorials, explanations, and descriptions of the functions you need to use for this assignment. You may also want to consider using wireshark or tcpdump to monitor the network packets.</p><h3 id="Things-to-be-aware-of"><a href="#Things-to-be-aware-of" class="headerlink" title="Things to be aware of"></a>Things to be aware of</h3><p>Aside from the issues which occur in the protocol (such as a user with duplicate names), you also need to handle other external errors such as connections getting lost, client program getting killed, server program getting killed, etc. You should look to handle:</p><ul><li>EINTR</li><li>EPIPE</li><li>ECONNREFUSED</li><li>ECHILD</li><li>EJNVAL</li><li>SIGCHILD</li></ul>]]></content>
    
    <summary type="html">
    
      这是一个两周的超级大作业，用Linux Network Programming的知识写一个聊天软件。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Network Programming" scheme="https://tk1307993.coding.me/tags/Network-Programming/"/>
    
      <category term="SQLite" scheme="https://tk1307993.coding.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS341-Timing-Instructions</title>
    <link href="https://tk1307993.coding.me/CS341-Timing-Instructions.html"/>
    <id>https://tk1307993.coding.me/CS341-Timing-Instructions.html</id>
    <published>2019-01-19T02:03:20.000Z</published>
    <updated>2019-01-19T02:05:50.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="I-OBJECTIVES"><a href="#I-OBJECTIVES" class="headerlink" title="I. OBJECTIVES"></a>I. OBJECTIVES</h3><p>The purpose of this assignment is to build a package of timing routines for the SAPC and use it to time code on the SAPC to determine memory access time on the SAPC with and without caching. This code does not run on UNIX. Read the Intel 8254 Programmable Interval Timer (PIT) Data Sheet. Look at $pcex/timer.c for an example of C code for accessing the timer. Copy all the files needed for this project.</p><h3 id="II-The-timing-package"><a href="#II-The-timing-package" class="headerlink" title="II. The timing package"></a>II. The timing package</h3><p>A package is a set of utilities that can be called by a program that wants to use them. When designing a package we carefully consider the things in it that must be visible to the caller, specify those, and require that everything else be internal and invisible. The visible parts of the timing package you will build are in “timepack.h”. A customer for the package’s services includes that header file (using #include) in the program for compilation and links his or her object code with “timepack_sapc.opc” to build the executable. You are asked to modify “timepack_sapc.c” to provide a high resolution timer service for programs running on the SAPC.</p><h3 id="Existing-Code"><a href="#Existing-Code" class="headerlink" title="Existing Code"></a>Existing Code</h3><p>Every package should have a test program showing that it works by calling it in all important ways. This test program is called a “driver” because it sits on top of the package and drives it like we test-drive a car – start up, do this, do that, stop, shut down. It is also called a “unit test” program because it tests just this one package separate from any other package in a bigger program. If you suspect something is wrong in a certain package, you’ll try to make its unit test fail, and then you debug the problem in the relatively simple environment of the unit test, rather than in the bigger program. The test program for timepack is testpack.c. You can build testpack and testpack.lnx right away and run them. Note what is printed out by testpack.lnx. Capture this in a typescript1 file. It shows that the timing package (as provided) can time things on the SAPC to 55-ms accuracy, but not to the microsecond accuracy we want. The next step is to get your timepack_sapc.c fixed up for the higher resolution and the unit test executable testpack.lnx will show it.</p><p>Modifed Code<br>You’re working directly with the hardware device, the Programmable Interval Timer (PIT) with its interrupt handler. This code has been provided to you in a). The timepack_sapc.c as provided can measure time in timer “ticks” at an 18.2-Hz (55 ms/tick) standard PC tick rate.To use the PIT to measure higher precision, you make use of “downcounts” within the timer chip. What you need to do is determine how many counts have downcounted in the timer since the last tick and compute a higher accuracy time. By doing this at both the start and the end of the time interval being measured, you can compute the elapsed time accurate to a few microseconds, a very respectable timer service. You’ll need to modify the timepack_sapc.c to achieve this.</p><p>Since timer downcounts count down from 64K at the tick, you need to subtract the register value from 65536 to get the number of downcounts since last tick:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">number</span> <span class="keyword">of</span> downcounts <span class="keyword">since</span> tick = <span class="number">65536</span> - observed_count (<span class="keyword">in</span> register)</span><br></pre></td></tr></table></figure></p><p>Thus the accurate time between A and B is<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= 202<span class="built_in"> clock </span>ticks + (65536 – 43000) downcounts - (200<span class="built_in"> clock </span>ticks + (65536 – 35000) downcounts)</span><br><span class="line">= 2<span class="built_in"> clock </span>ticks – 8000 downcounts</span><br></pre></td></tr></table></figure></p><h3 id="III-Timing-i486-instructions-and-a-C-loop"><a href="#III-Timing-i486-instructions-and-a-C-loop" class="headerlink" title="III. Timing i486 instructions and a C loop"></a>III. Timing i486 instructions and a C loop</h3><p>In this part of the assignment you will use the timing package to time x86 instructions. Instruction execution time is measured in system clock cycles, here 2.5 nsecs for our 400Mhz Pentium systems. The PC timer 0 is accurate only in the usec (microsecond) range so you will need to loop many times and divide by the loop count to get the accuracy needed.</p><p>The actual instructions to be timed appear in loops in “itests.s”, which is an x86 assembler source. These are called from itimes.c.</p><p>Finish “itests.s”, so that the third instruction to be timed (immediate move of IDATA to register) is properly implemented. Add a fourth instruction of your choice “itests.s” and “itimes.c”</p><p>You can use the provided makefile to build an optimized version of the SAPC executable file. The provided makefile has the following definitions:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># development build: -g provides debugging support, slows down execution</span><br><span class="line"># <span class="keyword">Use</span> -O2 optimization, no -g on <span class="keyword">final</span> timing runs<span class="comment">!</span></span><br><span class="line">PC_CFLAGS_DEV = -g -Wall -Wno-<span class="keyword">implicit</span> -Wshadow -I$(PC_INC) -I$(TIMING)</span><br><span class="line">PC_CFLAGS_OPT = -O2 -Wall -Wno-<span class="keyword">implicit</span> -Wshadow -I$(PC_INC) -I$(TIMING)</span><br><span class="line"># make <span class="keyword">default</span> PC_CFLAGS be PC_CFLAGS_DEV</span><br><span class="line">O = DEV</span><br><span class="line"># allow user to override DEV via O=OPT on the command line</span><br><span class="line">PC_CFLAGS = $(PC_CFLAGS_$(O))</span><br></pre></td></tr></table></figure></p><h3 id="FINAL-NOTE"><a href="#FINAL-NOTE" class="headerlink" title="FINAL NOTE"></a>FINAL NOTE</h3><p>In the event that you are unable to correctly complete this assignment by the due date, do not remove the work you were able to accomplish – partial credit is always better than none.</p>]]></content>
    
    <summary type="html">
    
      这个作业属于硬件作业了，要求阅读芯片手册，然后写一个时钟驱动。难度的话其实比不过同期的软件作业难度，已经提供了大部分的代码，不过硬件调试需要一定的功底。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Hardware" scheme="https://tk1307993.coding.me/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL代写：CA1-Computer-Animation-and-Visualisation</title>
    <link href="https://tk1307993.coding.me/CA1-Computer-Animation-and-Visualisation.html"/>
    <id>https://tk1307993.coding.me/CA1-Computer-Animation-and-Visualisation.html</id>
    <published>2019-01-09T11:25:02.000Z</published>
    <updated>2019-01-09T11:27:11.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>OpenGL is a relative low-level 3d API which does not support object/scene management. This is usually left to the user of the API. For example, importing and exporting data to and from OpenGL has to be implemented by the application programmer. Hierarchical structures although indirectly supported using Push and Pop matrix operations have no direct support in OpenGL.<br>You task is to develop a set of C++ classes / data structures and algorithms that provide a high level OpenGL object/scene management for one of the following:</p><ol><li>Develop a small library that provide an interface that allows the simulation of real world physic such as gravity, friction springs; To demonstrate the library a simple particle system with physics and collisions could be written.</li><li>A simple 3D game using OpenGL which should allow for the detection of object collisions in 3D space and user control of the game characters. (3D space invaders would be a good example).</li><li>Develop a framework that allows the simulation of a Craig Reynolds-like flocking system using OpenGL. The system should allow for any number of boids to be added to the scene, with detection of objects within a scene.<br>.4 Develop a system that provide an interface that allows L-systems (Lindermayer systems) based modelling of plant like structures using OpenGL. The L system should read in the grammar of the system from a file.</li><li>A simple raytracing framework that will read a scene file and render out the scene using materials / lights supplied in the scene file.</li><li>Other project Ideas may be discussed with the unit leader.</li></ol><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>You are required to use the NGL graphics library as part of the assignment, if more functionality is required a software update request can be made to Jon Macey or you may use other libraries but this must be justified in the design of the project. It is also expected that the project uses the main Qt development system and is capable of running within this environment. Third party libraries such as GLUT should not be used, however if you are developing a game SDL could be considered.</p><p>It is suggested that the program be written using C++ and OpenGL however any system may be used for the final program.<br>For example Python exporting to renderman for rendering would be acceptable, however realtime visualisation with OpenGL for the system would be a bonus.</p><h3 id="Part-1-Research-and-Design"><a href="#Part-1-Research-and-Design" class="headerlink" title="Part 1: Research and Design"></a>Part 1: Research and Design</h3><p>For the first part of the project a report should be submitted containing initial research into the topic including references to sources and initial design consideration for the project. Marks will be awarded for clarity of research and use of images / algorithms. Initial design of the C++ data structures and algorithms required should also be carried out however no code is expected to be submitted at this stage. Note that it is expected that most of the design will be in the form of a “programming sketch book” using hand drawn data diagrams, a full written report is not expected at this stage. The main emphasis is the research and design into the area chosen. At this stage we are more interested in Code design and the algorithmic approach to the problem and not the cosmetic / artistic design of the program.</p><h3 id="Part-2-Implementation"><a href="#Part-2-Implementation" class="headerlink" title="Part 2: Implementation"></a>Part 2: Implementation</h3><p>The 2nd part of the assignment involves the implementation of the system based on the initial research and design. As software design is an iterative process it is expected that the actual program will have evolved from the initial report and this process should be reflected on in the final project report. Marks will be awarded for good use of C++, data structure design and documentation of the code with respect to and algorithms and techniques used.</p><p>The program must be able to be configured by the use of a text based configuration file to set-up initial program states or values.</p><h3 id="INTENDED-LEARNING-OUTCOMES"><a href="#INTENDED-LEARNING-OUTCOMES" class="headerlink" title="INTENDED LEARNING OUTCOMES"></a>INTENDED LEARNING OUTCOMES</h3><p>This assignment will allow you to demonstrate your ability of the following learning outcomes.</p><ul><li>understand and apply Object Oriented concepts and techniques to the design and implementation of CGI systems</li><li>demonstrate an ability to analyze and select suitable data structures for program development.</li><li>demonstrate an ability to understand and implement computer animation related algorithms using OOP</li><li>develop GUI based systems using a suitable API for animation</li></ul>]]></content>
    
    <summary type="html">
    
      这次需要代写的作业是一个OpenGL的3D小游戏，另外编程的时候不仅需要使用QT，还需要使用提供的NGL图形库来开发。
    
    </summary>
    
      <category term="OpenGL" scheme="https://tk1307993.coding.me/categories/OpenGL/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="QT" scheme="https://tk1307993.coding.me/tags/QT/"/>
    
      <category term="OpenGL" scheme="https://tk1307993.coding.me/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CMPT115-Huffman-Tree-Part4</title>
    <link href="https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part4.html"/>
    <id>https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part4.html</id>
    <published>2019-01-05T03:55:54.000Z</published>
    <updated>2019-01-05T04:00:19.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exercise-7-Completing-the-Huffman-Codec-ADT"><a href="#Exercise-7-Completing-the-Huffman-Codec-ADT" class="headerlink" title="Exercise 7 Completing the Huffman Codec ADT"></a>Exercise 7 Completing the Huffman Codec ADT</h3><p>To complete the C The other ADT in Huffman.cc is called the Huffman Codec. The word “codec” is a contraction of two words: “COde” and “DECode”. This ADT does the work of coding and decoding using a Huffman tree. The Huffman Codec is a record that stores two records: the Huffman Tree thatwas created in the previous exercise, and a codebook, which was created by analysing the Huffman tree. The codebook has a place to store a C-string for every ASCII character, though most of the codebook will be filled with NULL references; only the characters in the original message will have a code. The function find_codes() builds the codebook using the Huffman Tree.</p><p>In this exercise, you’ll complete the encode() operations for the Huffman Codec. Here’s what it looks like currently:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// encode(hcdc, message)</span></span><br><span class="line"><span class="comment">// encode a message using the Huffman Codec</span></span><br><span class="line"><span class="comment">// Pre: hcdc is a referene to a HuffmanCodec</span></span><br><span class="line"><span class="comment">//      message:: a cstring to encode</span></span><br><span class="line"><span class="comment">// Return a cstring containing the encoded message</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">encode</span><span class="params">(HuffmanCodec *h, <span class="keyword">const</span> <span class="keyword">char</span> message[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Your job is to complete this function.</p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>The operation has to encode each character in the given message. The output of this function is a reference to a C-string, so we have to allocate a C-string big enough to fill with the encoded message. Use a large size, just to be sure.</p><p>To encode the message, you have to look at each character in the message, and copy its code from the Codec’s codebook to the encoded C-string. It’s possible to use strcat() for this, but it’s just as easy to write your own loop to copy the code for a character from the codebook to the coded C-string. Remember that you’re looking at the message one character at a time, but you are copying several characters into the coded C-string.</p><p>The encoded C-string is probably twice as long as the original message. That’s because we’re using ‘0’ and ‘1’ in the codebook; a real compression utility would use bits 0 and 1, not characters. That’s okay for us; seeing the code is much easier to debug.</p><h3 id="Exercise-Summary"><a href="#Exercise-Summary" class="headerlink" title="Exercise Summary"></a>Exercise Summary</h3><p>Complete encode() as indicated.</p><p>Build the testADT app, and run it.</p><p>If your code does the right things, tests 45-48 should all report “Passed.”</p><h3 id="Exercise-8-Completing-the-Huffman-Codec-ADT"><a href="#Exercise-8-Completing-the-Huffman-Codec-ADT" class="headerlink" title="Exercise 8 Completing the Huffman Codec ADT"></a>Exercise 8 Completing the Huffman Codec ADT</h3><p>To complete the Huffman Codec, we need an algorithm to decode a coded string. The operation to decode a coded string is called decode(). We’ve given it to you in the file Huffman.cc. It calls a function called decode_char(), whose job it is to step through the Huffman tree, starting at the root, and winding up at a leaf; decode_char() returns the character stored in the Frequency record stored at the leaf. (We cannot use the codebook for decoding! We have to use the Huffman Tree. To decode a character using the Huffman tree requires us to step down from tbhe root to a leaf, which should be fairly short. The complexity of stepping through the tree is O(h) where h is the height of the Huffman Tree. If we used the codebook, we’d have to look at each possible code, and try to figure out if the code we’re looking at is a code in the codebook. This would require at least O(nh) time, where n is the number of characters in the message. So use the tree!</p><p>Here’s what decode_char() looks like currently:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decode_char(tnode, message, d) &#123;</span></span><br><span class="line"><span class="comment">// decode one character from the message.</span></span><br><span class="line"><span class="comment">// Pre: tnode is a node in a huffman tree</span></span><br><span class="line"><span class="comment">//      message:: cstring, the whole message to decode</span></span><br><span class="line"><span class="comment">//      d:: a reference to an int containing the current</span></span><br><span class="line"><span class="comment">//          index in the message</span></span><br><span class="line"><span class="comment">// Post: d has been increased by the number of 0s and 1s used to</span></span><br><span class="line"><span class="comment">//       encode the character</span></span><br><span class="line"><span class="comment">// Return: the decoded character</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">decode_char</span><span class="params">(TreeNode *t, <span class="keyword">char</span> message[], <span class="keyword">int</span> *d)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'.'</span>; <span class="comment">// dot returned for no good reason</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Your job is to complete this function.</p>]]></content>
    
    <summary type="html">
    
      这是Huffman作业的第四部分，也是最后一部分，同样分为三个小练习。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CMPT115-Huffman-Tree-Part3</title>
    <link href="https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part3.html"/>
    <id>https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part3.html</id>
    <published>2019-01-02T03:03:37.000Z</published>
    <updated>2019-01-02T03:06:34.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exercise-4-Constructor-for-FrequencyList"><a href="#Exercise-4-Constructor-for-FrequencyList" class="headerlink" title="Exercise 4 Constructor for FrequencyList"></a>Exercise 4 Constructor for FrequencyList</h3><p>The Huffman tree algorithm uses a list of trees, each tree storing a number of Frequency records. The way we’ll manage this list is to build a “wrapper” ADT around the List ADT.</p><p>The file FrequencyList.cc contains the implementation of this wrapper ADT. Notice that most of the List operations are simply delegations to the contained List.</p><p>We want to give the wrapper a new constructor operation, and a new operation called remove_smallest(), which is the next exercise. Because these are very specific operations for the Huffman tree algorithm, it is better to build a wrapper ADT than to put these special purpose operations in the List ADT.</p><p>The FrequencyList constructor currently looks like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createFrequencyList(message)</span></span><br><span class="line"><span class="comment">// Pre: message:: refToChar, the message to be encoded</span></span><br><span class="line"><span class="comment">// Return: a reference to the generated list.</span></span><br><span class="line"><span class="comment">// post: a new list is allocated</span></span><br><span class="line"><span class="comment">// return: reference to the new list</span></span><br><span class="line"></span><br><span class="line"><span class="function">FrequencyList *<span class="title">createFrequencyList</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (message == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Error in createFrequencyList(): NULL message!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The constructor should do the following:</p><ol><li>Walk through the message, character by character, counting how many times each character is used. Use an integer array for this.</li><li>Once the whole message has been seen, use the array to build a Frequency record for each character seen at least once.</li><li>Build a TreeNode for each Frequency record, and then store the TreeNode in the List. Each Tree will be a leaf node for now. We’ll use the initialized list in a later exercise.</li><li>Return the FrequencyList full of TreeNodes.</li></ol><p>In the lecture slides on Huffman trees, the character and frequency data were attributes of the Tree record itself.</p><p>In this assignment, we are using Frequency records to store the character and frequency values. This adds another ADT to think about, but it allows us to reuse the ordinary tree that simply stores a single Element. This is good software reuse (of Trees) and adaptability: if we want to store other data in the Tree, we can change the Frequency ADT, and most if not all of the rest of the application would not need to change.</p><h3 id="Hints-on-counting-characters"><a href="#Hints-on-counting-characters" class="headerlink" title="Hints on counting characters"></a>Hints on counting characters</h3><p>Each character you can type or use on a computer has an integer value; for letters and digits and normal keyboard symbols, this is called the ASCII value. For example, the letter ‘c’ has an ASCII value of 99. Because of this, we can use a character as an index into a characeter count array like this: counts[‘c’]. We can do this for any character, whether it’s ‘c’ or ‘&amp;’.</p><p>To calculate the frequency of each letter in a message, we use an array of counts (initialized to 0). Each time we observe a character in a message, we can increase its count. For example to increase the count for the letter ‘c’, we would do the following:<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">counts['c'] </span>+= <span class="number">1</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>This will increase the count of the integer at index 99 (the one corresponding to the letter ‘c’). The letter ‘c’ is the 99th character in the ASCII character set, and its counter is the 100th in our counts array. To initialize the counts array, we have the following:</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> counts[<span class="type">ASCII_SIZE</span>]; // <span class="type">ASCII_SIZE</span> <span class="keyword">is</span> defined <span class="keyword">in</span> <span class="type">LOCALE</span>.h</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="type">ASCII_SIZE</span>; i++) &#123;</span><br><span class="line">  counts[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we’re using integers, not characters, to index into the array. This is okay, because in a sense, characters are integers. Characters have special status when we want to think of them as characters, but they also have integer values which we use when that’s handy.</p><p>One problem remains: with compiler flags -Wall and -pedantic, the compiler may complain when you use a character as an array index:<br>warning: array subscript has type ‘char’ [-Wchar-subscripts]</p><p>To get rid of these warnings, we can use a technique called typecasting. Typecasting tells the compiler to treat a variable of one type as though it has a different type. For example, we can typecast a character to an integer as follows:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counts[(<span class="keyword">int</span>) <span class="string">'c'</span>] += <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>The use of (int) in brackets in front of a value tells the compiler that it’s not a mistake to try to use the value ‘c’ as an integer (99). Typecasting can also be done when you want to force a float to be truncated into a integer, or something like that. We’ll only use it for characters in this asignment.</p><h3 id="Exercise-Summary"><a href="#Exercise-Summary" class="headerlink" title="Exercise Summary"></a>Exercise Summary</h3><ol><li>Complete createFrequencyList() as indicated.</li><li>Build the testADT app, and run it.</li><li>If your code does the right things, tests 33-34 should all report “Passed.”</li></ol>]]></content>
    
    <summary type="html">
    
      这是Huffman作业的第三部分，同样分为三个小练习。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CMPT115-Huffman-Tree-Part2</title>
    <link href="https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part2.html"/>
    <id>https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part2.html</id>
    <published>2018-12-29T01:23:12.000Z</published>
    <updated>2018-12-29T01:27:05.805Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Exercise-1-Warmup-Completing-Frequency-cc"><a href="#Exercise-1-Warmup-Completing-Frequency-cc" class="headerlink" title="Exercise 1 Warmup: Completing Frequency.cc"></a>Exercise 1 Warmup: Completing Frequency.cc</h3><p>We’ll use the Frequency ADT to store a character, e.g., ‘a’, and a count of how many times it appears in some text, e.g., 7. The frequency record will be stored in the Huffman trees.</p><p>The Frequency interface is complete, and defined in Frequency.h. It’s basically a storage unit for characters and integers. The implementation is almost complete, but the constructor, createFrequency() is incomplete. Here’s what is in the Frequency.cc file:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CONSTRUCTOR</span></span><br><span class="line"><span class="comment">// pre: d is the character data being counted,</span></span><br><span class="line"><span class="comment">//      c is the count.</span></span><br><span class="line"><span class="comment">// post: allocates memory for a new frequency record</span></span><br><span class="line"><span class="comment">// return: a reference to the new record</span></span><br><span class="line"><span class="function">Frequency *<span class="title">createFrequency</span><span class="params">(<span class="keyword">char</span> d, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It currently does nothing. Complete this operation, by allocating a record, and storing the appropriate data.</p><h3 id="Exercise-Summary"><a href="#Exercise-Summary" class="headerlink" title="Exercise Summary"></a>Exercise Summary</h3><ol><li>Complete createFrequency() as indicated.</li><li>Build the testADT app, and run it.</li><li>If your code does the right things, the first 4 tests should all report “Passed.”</li></ol><h4 id="What-to-hand-in"><a href="#What-to-hand-in" class="headerlink" title="What to hand in:"></a>What to hand in:</h4><p>The file Frequency.cc containing your code for createFrequency() described above.</p><h4 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h4><p>5 marks: createFrequency() builds a Frequency record and correctly initializes it with the given data.</p><h3 id="Exercise-2-Warmup-Completing-TreeNode-cc"><a href="#Exercise-2-Warmup-Completing-TreeNode-cc" class="headerlink" title="Exercise 2 Warmup: Completing TreeNode.cc"></a>Exercise 2 Warmup: Completing TreeNode.cc</h3><p>We’ll use the TreeNode ADT to help us build Huffman trees. In our application, a TreeNode will store a reference to a Frequency record; see TreeNode.h and TreeElement.h. Most of the TreeNode implementation is complete. There are two operations that are currently incomplete: the constructor, createTreeNode(), and the operation height().</p><p>The constructor currently looks like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CONSTRUCTOR</span></span><br><span class="line"><span class="comment">// pre: d is a reference to a TreeElement</span></span><br><span class="line"><span class="comment">// post: allocates memory for the TreeNode</span></span><br><span class="line"><span class="comment">// return: reference to the TreeNode record</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">createTreeNode</span><span class="params">(TreeElement d)</span></span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complete it so that it allocates a correctly initialize TreeNode record.<br>The height operation currently looks like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// height(n)</span></span><br><span class="line"><span class="comment">// pre: n is a reference to a TreeNode</span></span><br><span class="line"><span class="comment">// return: the height of the tree</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode *n)</span></span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> complete this function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complete this function so that it returns the height of a tree whose root is given as the parameter n.<br>Hints:</p><ul><li>This function must be recursive.</li><li>The height of a NULL tree is 0.</li><li>There is a function called max(a,b) you can use. It returns the larger of a or b. This function is defined in a C++ library called “algorithm” which we’ve already #included for you.</li></ul><h3 id="Exercise-Summary-1"><a href="#Exercise-Summary-1" class="headerlink" title="Exercise Summary"></a>Exercise Summary</h3><ol><li>Complete createTreeNode() as indicated.</li><li>Complete height() as indicated.</li><li>Build the testADT app, and run it.</li></ol><p>If your code does the right things, tests 5-16 should all report “Passed.”</p><h4 id="What-to-hand-in-1"><a href="#What-to-hand-in-1" class="headerlink" title="What to hand in:"></a>What to hand in:</h4><p>The file TreeNode.cc containing your code for the two operations described above.</p>]]></content>
    
    <summary type="html">
    
      这是Huffman作业的第二部分，分为三个小练习。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CMPT115-Huffman-Tree-Part1</title>
    <link href="https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part1.html"/>
    <id>https://tk1307993.coding.me/CMPT115-Huffman-Tree-Part1.html</id>
    <published>2018-12-25T11:48:01.000Z</published>
    <updated>2018-12-25T11:51:15.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task-description"><a href="#Task-description" class="headerlink" title="Task description"></a>Task description</h3><p>This is a programming assignment. Get started early! Unanticipated problems will arise in your work, and you will need time to sort them out.</p><p>Clarifying questions can be posted on the CMPT 115 Moodle forums. Help with debugging can be obtained by working in the lab during Help Desk hours of your instructors and TAs. Expect high demand for this kind of help on Fridays.</p><p>All C++ source code files must contain your name, student number, and NSID; and the course, assignment number, and question number as comments at the top of the file. All C++ programs must compile with g++ on the command line without errors or warnings, using the standard flags described in tutorial, namely -Wall -pedantic.</p><p>You may, of course, work on your assignment using Eclipse, or any other C++ IDE, on your personal notebooks or desktops, or on any computer in the Spinks labs. We cannot always help you with problems arising specifically from the IDE, but C++ should have the same bahaviour on all these systems. There are good reasons to use an IDE like Eclipse or MSVS, but there are good reasons to learn to use the command-line too. Learn both!</p><p>Use of String class or string or other object-oriented code (except for cin or cout and any others explicitly allowed in an assignment specification) will result in a flat deduction of 25%. (That means: don’t use advanced techniques to avoid learning the concepts we are attempting to teach you!)</p><h3 id="The-Big-Picture"><a href="#The-Big-Picture" class="headerlink" title="The Big Picture"></a>The Big Picture</h3><p>For this assignment, you will be implementing the Huffman Tree encoding algorithm for file compression. We’re giving you 2 weeks for all of this work. It’s crucial that you do not leave it to the last minute. (All this talk about code is confusing; sometimes the word code refers to C++ code. Sometimes it refers to the Huffman code. And, unfortunately, we will have to refer to ASCII code as well. We’ll try to be clear.)</p><p>The main application here to read a file, say message.txt, containing some text, and then to translate (“encode”) the text using the Huffman code. Your program will write the Huffman coded text to a new file, say coded-message.txt. Your program will also be required to read the very same Huffman coded text from coded-message.txt, and decode it, resulting in an exact duplicate of original message. This will demonstrate that your application uses the Huffman code correctly.</p><p>This is almost a real application. It’s artificial in the sense that your main program will encode and decode the same message. A real file-compression application will either encode a file, or decode it, but usually not both. Students who want a challenge can go beyond the requirements to write a file compression utility. Another unrealistic aspect is that we’re using a text-file as the compressed file, which actually causes the “compressed file” to be larger than the original. Don’t worry about that; the Huffman code, and the use of lists and trees is what we’re interested in.</p><h3 id="Files-and-more-files"><a href="#Files-and-more-files" class="headerlink" title="Files and more files"></a>Files and more files</h3><p>We’re giving you a lot of material to start with, by providing partially implemented ADTs:</p><ul><li>List.cc, List.h: These files have List and Iterator ADT defined.</li><li>TreeNode.cc, TreeNode.h: These files define the TreeNode ADT, which is similar to the material on Trees in Lecture Topic 10.</li><li>Frequency.cc, Frequency.h: These files define an ADT to store a character and an integer.</li><li>FrequencyList.cc, FrequencyList.h: These files define an ADT wrapper for Lists, with two special operations that you have to define.</li><li>Huffman.cc, Huffman.h: These files define two new ADTs: The HUffmanTree, and the HuffmanCodec. These are explained in more detail below.</li></ul><p>For consistency, all of the ADT implementation files have the extension “.cc” so you can recognize them.</p><p>You should find List.cc and TreeNode.cc familiar, as you’ve seen variations of it in previous lectures and assignments. We have made a few simple exercises using Lists and TreeNodes to get started, but most of the List and TreeNode ADT is given. You should review the ADT definitions, to become familiar with the operation names, and to know the details of how the operations are called (i.e., parameters and return values).</p><p>There are some utility files that we provided:</p><ul><li>Element.h, TreeElement.h: These define the data that get stored in our Lists and Trees. You won’t have to change them for this assignment.</li><li>copy.cc, copy.h: These define a useful funciton for making safe copies of C-strings. We’ve used this function several times.</li><li>LOCALE.h: A file with 2 symbols defined. We’ve used #include “LOCALE.h” in all of the other files.</li><li>message.txt: You can use any message file you like, but we’ve provided one that is roughly at the size limit of what the application should be able to do. It’s also topical.</li></ul><p>There are two application files for your use:</p><ul><li>testADTs.cpp: a program that tests almost everything about the ADTs above. There are more than 50 tests, and if they all come back as “Passed” you are almost finished!</li><li>a9app.cpp: This is the application program. Once you have passed all the tests, build this, and see if your work is finished! YOu may make alterations to this file, but you can leave it as given, and the application will run just fine if your ADT operations are working properly.</li></ul><h3 id="Steps-briefly"><a href="#Steps-briefly" class="headerlink" title="Steps (briefly)"></a>Steps (briefly)</h3><p>Each of the following steps is explained more carefully below!</p><ol><li>Download the files, and make sure everything runs right.</li><li>Follow the Exercises in this assignment. The first few are warm-ups, so that you become familiar with the process you should follow. For each exercise:<br>a. Read the exercise.<br>b. Add some code to one or more of the files.<br>c. Build the testADT program, and check if the output shows that your work was successful. The testing in testADT is pretty thorough.</li><li>The final exercise tests your work using the a9app.cc program, which should prove to you that everything is working well.</li></ol><h3 id="Download-all-the-files-and-build"><a href="#Download-all-the-files-and-build" class="headerlink" title="Download all the files and build"></a>Download all the files and build</h3><p>Moodle has the complete set of files. It will help a lot if do this work in a new folder. The complete list of files to download is here:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Element.h</span><br><span class="line">Frequency.cc</span><br><span class="line">Frequency.h</span><br><span class="line">FrequencyList.cc</span><br><span class="line">FrequencyList.h</span><br><span class="line">Huffman.cc</span><br><span class="line">Huffman.h</span><br><span class="line">LOCALE.h</span><br><span class="line">List.cc</span><br><span class="line">List.h</span><br><span class="line">TreeElement.h</span><br><span class="line">TreeNode.cc</span><br><span class="line">TreeNode.h</span><br><span class="line">a9app.cpp</span><br><span class="line">copy.cc</span><br><span class="line">copy.h</span><br><span class="line">message.txt</span><br><span class="line">testADTs.cpp</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      作业分四部分，需要实现Huffman coding，当然也就是构造Huffman Tree了。 通常的Huffman作业不会这么复杂，这次这么复杂是因为增加了许多工程性的功能，数据格式也是五花八门。这次主要是搭建环境，熟悉整个项目框架结构。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C代写：COMP2129-Minesweeper</title>
    <link href="https://tk1307993.coding.me/COMP2129-Minesweeper.html"/>
    <id>https://tk1307993.coding.me/COMP2129-Minesweeper.html</id>
    <published>2018-12-22T13:34:47.000Z</published>
    <updated>2018-12-22T13:38:53.830Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task-description"><a href="#Task-description" class="headerlink" title="Task description"></a>Task description</h3><p>In this assignment you will develop a variation of the Minesweeper game in the C programming language. We recommend that you play the game to gain an overall understanding of how it works.</p><p>In each game, mines are hidden in a two dimensional mine field and the object of the game is to uncover the empty cells and flag the cells containing mines. To simplify your implementation, regions without mines should not be automatically expanded and players are not allowed to unflag cells once they have been flagged. Each game will contain a total of 10 mines, regardless of the grid size.</p><p>You are encouraged to ask questions on Ed using the assignments category. As with any assignment,<br>make sure that your work is your own, and you do not share your code or solutions with other students.</p><h3 id="Working-on-your-assignment"><a href="#Working-on-your-assignment" class="headerlink" title="Working on your assignment"></a>Working on your assignment</h3><p>You can work on this assignment on your own computer or the lab machines. It is important that you continually back up your assignment files onto your own machine, external drives, and in the cloud.</p><p>You are encouraged to submit your assignment on Ed while you are in the process of completing it. By submitting you will obtain some feedback of your progress on the sample test cases provided.</p><h3 id="Implementation-details"><a href="#Implementation-details" class="headerlink" title="Implementation details"></a>Implementation details</h3><p>Your program must be contained in one file called minesweeper.c and produce no errors when compiled using clang on the lab machines and Ed. Your program will be run from the command line using ./minesweeper and read input from standard input and write output to standard output.</p><blockquote><p>Important – your program will be marked automatically, so make sure that you follow the assignment specifications carefully. Your program output must match the exact output shown in the examples.</p></blockquote><h3 id="Program-input"><a href="#Program-input" class="headerlink" title="Program input"></a>Program input</h3><p>The program input consists of two sections. The first section defines the mine field and the second section describes the moves of the player. Each line of the input is one instruction. You are also required to check for whether any invalid input is encountered.</p><ol><li>The first line of the input will be of the form g [width] [height] where width and height are integers in the range [1, 100]. This defines the size of the grid to width cells wide and height cells high. The grid must have at least 10 cells, so this instruction is only valid if width x height &gt; 10</li><li>The next 10 lines will be of the form b [x] [y] where x and y are integers in the range [0, width) and [0, height) respectively. 3. This places a mine at cell (x, y) in the grid.<ol><li>The next lines will describe the moves of the player – either u [x] [y] or f [x] [y].</li><li>A u instruction means that the player uncovers the cell (x, y)</li><li>A f instruction means that the player flags the cell (x, y)</li></ol></li></ol><p>There must be exactly one player instruction for each grid cell. That is, if the grid is of size width x height then there should be exactly width x height u and f instructions in total.</p><p>No two instructions should refer to the same grid cell, and no more than 10 flags can be placed.</p><p>The input should be processed one line at a time. After reading a line of input your program should immediately act on the line of input as described before proceeding to the next line of input.</p><h3 id="Sample-input"><a href="#Sample-input" class="headerlink" title="Sample input"></a>Sample input</h3><p>In the following test case we construct a 4 x 4 mine field and then play the game.</p><p>The player successfully flags all of the mines and uncovers the remaining cells in this game.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">g <span class="number">4</span> <span class="number">4</span></span><br><span class="line">b <span class="number">0</span> <span class="number">0</span></span><br><span class="line">b <span class="number">1</span> <span class="number">0</span></span><br><span class="line">b <span class="number">3</span> <span class="number">0</span></span><br><span class="line">b <span class="number">1</span> <span class="number">1</span></span><br><span class="line">b <span class="number">1</span> <span class="number">2</span></span><br><span class="line">b <span class="number">0</span> <span class="number">2</span></span><br><span class="line">b <span class="number">3</span> <span class="number">2</span></span><br><span class="line">b <span class="number">0</span> <span class="number">3</span></span><br><span class="line">b <span class="number">1</span> <span class="number">3</span></span><br><span class="line">b <span class="number">3</span> <span class="number">3</span></span><br><span class="line">u <span class="number">2</span> <span class="number">3</span></span><br><span class="line">u <span class="number">2</span> <span class="number">0</span></span><br><span class="line">f <span class="number">0</span> <span class="number">3</span></span><br><span class="line">u <span class="number">2</span> <span class="number">1</span></span><br><span class="line">f <span class="number">3</span> <span class="number">0</span></span><br><span class="line">f <span class="number">0</span> <span class="number">2</span></span><br><span class="line">u <span class="number">0</span> <span class="number">1</span></span><br><span class="line">f <span class="number">3</span> <span class="number">2</span></span><br><span class="line">f <span class="number">3</span> <span class="number">3</span></span><br><span class="line">f <span class="number">0</span> <span class="number">0</span></span><br><span class="line">f <span class="number">1</span> <span class="number">1</span></span><br><span class="line">f <span class="number">1</span> <span class="number">0</span></span><br><span class="line">f <span class="number">1</span> <span class="number">2</span></span><br><span class="line">u <span class="number">3</span> <span class="number">1</span></span><br><span class="line">u <span class="number">2</span> <span class="number">2</span></span><br><span class="line">f <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="Program-output"><a href="#Program-output" class="headerlink" title="Program output"></a>Program output</h3><ol><li>After reading a g [width] [height] instruction, output the instruction that was inputted.</li><li>After reading a b [x] [y] instruction, output the instruction that was inputted. In addition, after reading the tenth b [x] [y] line, the state of the grid should be displayed.</li><li>After reading a correct player instruction, output the same instruction.<ol><li>If the player uncovers a bomb, output the message lost and immediately exit.</li><li>If every mine has been flagged and every other empty cell has been uncovered, then display the final state of the grid, output the message won and then exit.</li></ol></li><li>Otherwise, the state of the grid after the instruction should be outputted.</li><li>If an invalid, out of place, or otherwise incorrect instruction is read at any time, error should be outputted and your program should exit immediately. Make sure that you do not output the instruction or the grid following an erroneous instruction.</li></ol><h3 id="Displaying-the-grid"><a href="#Displaying-the-grid" class="headerlink" title="Displaying the grid"></a>Displaying the grid</h3><p>The grid is represented using 1 character per cell, with a 1 character border. A 4 x 4 grid looks like:<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+</span><br><span class="line">|<span class="string">****</span>|</span><br><span class="line">|<span class="string">****</span>|</span><br><span class="line">|<span class="string">****</span>|</span><br><span class="line">|<span class="string">****</span>|</span><br><span class="line">+----+</span><br></pre></td></tr></table></figure></p><ul><li>The border consists of - or | characters, with a + character in each corner.</li><li>The * character represents a covered cell.</li><li>The f character represents a flagged cell.</li><li>An uncovered cell is represented by a number that corresponds to the total number of bombs in the 8 adjacent cells that surround the uncovered cell.</li></ul><p>The top left corner of the grid should have coordinates (0, 0) and the bottom right corner of the grid should have coordinates ([width] - 1, [height] - 1). The first coordinate is the x coordinate, and the second is the y coordinate. A 4 x 4 grid where the player has flagged (3, 1) and uncovered (0, 2) with 2 mines in the adjacent cells would look like:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+</span><br><span class="line">|<span class="string">****</span>|</span><br><span class="line">|<span class="string">***f</span>|</span><br><span class="line">|<span class="string">2***</span>|</span><br><span class="line">|<span class="string">****</span>|</span><br><span class="line">+----+</span><br></pre></td></tr></table></figure><h3 id="Writing-your-own-testcases"><a href="#Writing-your-own-testcases" class="headerlink" title="Writing your own testcases"></a>Writing your own testcases</h3><p>We have provided you with some sample testcases but these do not test all the functionality described in the assignment. It is important that you thoroughly test your code by writing your own testcases.</p><p>You should place all of your test cases in a tests/ directory. Ensure that each test case has the .in input file along with a corresponding .out output file. We recommend that the names of your test cases are descriptive so that you know what each is testing, for example: too-many-mines.in</p>]]></content>
    
    <summary type="html">
    
      作业需要用C编程实现Minesweeper，和其他的Minesweeper不同的是，这个Minesweeper的board不太一样，独树一帜。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS1101-Gate</title>
    <link href="https://tk1307993.coding.me/CS1101-Gate.html"/>
    <id>https://tk1307993.coding.me/CS1101-Gate.html</id>
    <published>2018-12-18T13:52:32.000Z</published>
    <updated>2018-12-18T13:56:14.140Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Aim"><a href="#1-Aim" class="headerlink" title="1. Aim"></a>1. Aim</h3><p>The purpose of this assignment is to:</p><ol><li>Practice basic object-orient programming.</li><li>Read a UML diagram and build the corresponding class.</li><li>Create a class file that includes instance variables and methods necessary to interact with objects of the class.</li></ol><p>It is recommended that you read and understand all the instructions below before starting the exercises.</p><h3 id="2-Files-Needed"><a href="#2-Files-Needed" class="headerlink" title="2. Files Needed"></a>2. Files Needed</h3><p>You will not be provided with any starter files for this assignment. Create a project in Eclipse for this assignment. For this assignment, you will not want Eclipse to create the public static void main method for you. Be sure to include the standard header comments at the top of each file.</p><h3 id="3-To-be-Handed-In"><a href="#3-To-be-Handed-In" class="headerlink" title="3. To be Handed In"></a>3. To be Handed In</h3><p>The files Gate.java should be submitted on-line via the Blackboard. Be sure to name the file/class exactly as specified. There is no MPL component for this assignment.</p><h3 id="4-Programming-Exercise"><a href="#4-Programming-Exercise" class="headerlink" title="4. Programming Exercise"></a>4. Programming Exercise</h3><p>Create a Gate class that can be used to represent a gate for a livestock pen. The members of the Gate class are listed in the diagram below. You must use the same field names and method names (and class constant names) as listed in the diagram. This will insure that the included test program will work for your implemented class.</p><h4 id="Step-1-create-the-Gate-class"><a href="#Step-1-create-the-Gate-class" class="headerlink" title="Step 1: create the Gate class"></a>Step 1: create the Gate class</h4><p>In your Eclipse project for this assignment, create a new class called Gate. Do not indicate that you want Eclipse to create a main method for you.</p><h4 id="Step-2-add-the-instance-variables-and-class-constants"><a href="#Step-2-add-the-instance-variables-and-class-constants" class="headerlink" title="Step 2: add the instance variables and class constants"></a>Step 2: add the instance variables and class constants</h4><p>There will be two states for this gate, locked, which would be a boolean variable, and swingDirection, which we will create as an int. The field swingDirection will indicate which direction the gate is able to swing. To make our program more readable, create two integer class constants (public static final int) to indicate the swing direction:</p><blockquote><p>IN = 1 (to swing in, i.e., to let animals enter the pen)<br>OUT = -1 (to swing out, i.e., to let animals leave the pen)</p></blockquote><p>Be sure to use these class constants as much as possible in your class. When a gate is first constructed, it should be locked and the swing direction should be set to 0, the default value.</p><h4 id="Step-3-add-the-methods"><a href="#Step-3-add-the-methods" class="headerlink" title="Step 3: add the methods"></a>Step 3: add the methods</h4><ol><li><p>Create mutator methods that will change the state of a Gate object.<br>a. close() – to close the gate by “locking” it (i.e., locked is true),<br>b. open() – to (i) open the gate by “unlocking” it (i.e., locked is false), (ii) set the swing direction to either swing in or out (i.e., swingDirection is either IN or OUT based on the input parameter), and (iii) return a boolean value indicating if the setting of the swing direction was successful (see the next point),<br>c. setSwingDirection() – to (i) set the swing direction of the gate based on the input parameter and (ii) return a boolean value to indicate if the setting the swing direction was successfully set (true), or if an invalid swing direction was given (false, not set), and<br>d. thru() – described in No. 3 below.</p></li><li><p>Create accessor methods that will return information about the state of a Gate object.<br>a. getSwingDirection() – returns the swing direction of the gate,<br>b. isLocked() – returns whether the gate is locked, and<br>c. toString() – returns the string representation of the Gate object that should match the output of the provided example execution of the test program.</p></li><li><p>Another behavior of the gate is that animals will go through it. Suppose n animals attempt to go through the gate. If the gate is set to the swing OUT position, the animals will leave the pen and the total number of animals in the pen will be decreased. If the gate is set to the swing IN position, animals will be entering the pen and the number of animals will be increased. If the gate is locked, there should be no change to the number of animals in the pen. Create a method thru() that given the input parameter n, will return n, -n, or 0 depending on the locked status and the swing direction of the gate. Note: the class you are writing only represents a gate and not a pen. Here you should be thinking like the author of the class—making your class as useful and general as possible. Instead of attempting to alter some total that is in or out of the facility that the gate is controlling, we are simply going to return the net change, to be used by the client as needed.</p></li></ol><h4 id="Step-4-write-Javadoc-comments"><a href="#Step-4-write-Javadoc-comments" class="headerlink" title="Step 4: write Javadoc comments"></a>Step 4: write Javadoc comments</h4><p>Now that you have completed the Gate class, make sure you document it by adding Javadoc comments. First, add the standard comment header (see section 2 above) at the top of the file. Then add a Javadoc comment just before the class itself, describing the purpose of the class. Then add a Javadoc comment for each method, describing what that method does.</p><p>Example execution of TestGate.java<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Test </span>locked status of gate upon creation ===============================</span><br><span class="line"><span class="keyword">SUCCESS: </span>A new gate was successfully created.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Test </span>opening gate to OUT ===============================================</span><br><span class="line">Gate opened.</span><br><span class="line">- SUCCESS: Gate not locked.</span><br><span class="line">- SUCCESS: Gate set to swing in the right direction.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Test </span>opening gate to IN ================================================</span><br><span class="line">Gate opened.</span><br><span class="line">- SUCCESS: Gate not locked.</span><br><span class="line">- SUCCESS: Gate set to swing in the right direction.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Test </span>closing gate ======================================================</span><br><span class="line"><span class="keyword">SUCCESS: </span>Gate closed.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Test </span>setting of swing direction ========================================</span><br><span class="line"><span class="keyword">SUCCESS: </span>Gate set to swing IN.</span><br><span class="line"><span class="keyword">SUCCESS: </span>Gate set to swing OUT.</span><br><span class="line"><span class="keyword">SUCCESS: </span>Gate swing direction was not set to an invalid direction.</span><br><span class="line"><span class="keyword">SUCCESS: </span>Gate swing direction was set to a valid direction.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Test </span>thru() method =====================================================</span><br><span class="line">Current count = 10</span><br><span class="line"><span class="keyword">SUCCESS: </span>Animals have successfully left the pen.</span><br><span class="line"><span class="keyword">SUCCESS: </span>Animals have successfully entered the pen.</span><br><span class="line"><span class="keyword">SUCCESS: </span>This gate is locked, no animals can pass through.</span><br><span class="line"></span><br><span class="line">toString() method output ===============================================</span><br><span class="line">Locked: Yes</span><br><span class="line">Swing direction: In</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本次作业考察Object Oriented Programming的概念，需要按照需求定义编写一个Gate的Class，总体难度偏简单。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CMPT120-Mario</title>
    <link href="https://tk1307993.coding.me/CMPT120-Mario.html"/>
    <id>https://tk1307993.coding.me/CMPT120-Mario.html</id>
    <published>2018-12-14T02:10:48.000Z</published>
    <updated>2018-12-14T02:12:59.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problam-Statement"><a href="#Problam-Statement" class="headerlink" title="Problam Statement"></a>Problam Statement</h3><p>Over our next two assignments, we shall build our own version of the game Mario. Well, a simple TUI version. TUI means Text-based User Interface or Textual User Interface as opposed to GUI, which stands for Graphical User Interface.</p><p>The goal of our Assignment 4 is to set up our game, i.e., set up the maze Mario is meant to travel through. This maze will contain obstacles, Mario himself and an exit gate. The goal of our Assignment 5 will be to allow the user to play our game by moving Mario around the maze.</p><p>Let’s start with Assignment 4, shall we. In order to develop our Assignment 4 in an incremental fashion, I propose the following scheme: considering the algorithm below, let’s develop, test and debug each of its steps, one at a time, and move on to the next step only when the step we have been working on is completed. Here is our algorithm:</p><ol><li>Welcome the user.</li><li>Create a maze with a width of mazeWidth and a height of mazeHeight.<ol><li>a. Assign the value 15 to the variable mazeWidth and the value 12 to the variable mazeHeight. Note that the values of these two variables will change, so let’s make sure we develop our program such that modifying the values of these variables can be done easily.</li><li>b. Originally, each cell must contain this string “ . “. Note that the content of our cells will change, so let’s make sure we develop our program such that we can easily change the content of our cells.<br>Display a boundary around our maze.</li><li>a. Originally, we must use the “-“ symbol to create the top and the bottom parts of the boundary around our maze. Note that this symbol will change, so let’s make sure we develop our program such that we can easily change this symbol.</li><li>b. Originally, we must use the “|” symbol to create the side sections of the boundary around our maze. Note that this symbol will change, so let’s make sure we develop our program such that we can easily change this symbol. The side sections of the boundary may be tricky to construct! Suggestion: One way to build them is to create a string for each of the row of our maze. This string will contain blank spaces, a number (see 4. b. below), 2 symbols indicating a side section of the boundary and the actual row of our maze.</li><li>c. This boundary is not part of our maze, it is outside our maze.</li></ol></li><li>At the top and left of the boundary, display numbers. These numbers will help the user to select a cell in our maze.<br>a. To produce the top row of numbers, we can build and print a string that will be made of blank spaces and numbers.<br>b. To produce the left-side column of numbers may be tricky! See the suggestion described in 3. b. above.<br>Add aNumOfRewardingObstacles of rewarding obstacles to our maze.<br>a. Assign the value 20 to aNumOfRewardingObstacles. Note that this number will change, so let’s make sure we develop our program such that we can easily change this number.<br>b. Originally, we must use the symbol “R” to indicate that a cell of our maze contains a rewarding obstacle. Note that this symbol will change, so let’s make sure we develop our program such that we can easily change this symbol.<br>c. All these obstacles must be randomly located in our maze.<br>d. We cannot position more than 1 obstacle (of any types) in a cell.</li><li>Add aNumOfExplodingObstacles of exploding obstacles to our maze.<br>a. Assign the value 20 to aNumOfExplodingObstacles. Note that this number will change, so let’s make sure we develop our program such that we can easily change this number.<br>b. Originally, we must use the symbol “E” to indicate that a cell of our maze contains an exploding obstacle. Note that this symbol will change, so let’s make sure we develop our program such that we can easily change this symbol.<br>c. All these obstacles must be randomly located in our maze.<br>d. We cannot position more than 1 obstacle (of any types) in a cell.</li><li>Ask the user for Mario’s initial location in the maze.<br>a. Let’s make sure that the user has entered a location that makes sense:<br>i. The user has entered 2 integers separated by a blank space. The user has<br>1) not simply pressed the Enter key, or<br>2) entered a string, or<br>3) entered 1 integer or 1 float, or<br>4) entered 2 numbers of which one or both are floats, or<br>5) entered more than 2 integers or floats.<br>ii. The row number entered by the user does not exceed the maximum number of rows of our maze.<br>iii. The column number entered by the user does not exceed the maximum number of columns of our maze.<br>iv. Finally, the user has entered the row number and column number of an empty cell.<br>b. Add Mario at that location. Originally, we must use the symbol “M” to indicate the location of Mario in our maze. Note that this symbol will change, so let’s make sure we develop our program such that we can easily change this symbol.</li><li>The Sample Run 1, posted on our course web site below the description of this assignment, illustrates how the program responds to the user when s/he has entered invalid data described in the step (7.) above.<br>Based on Mario’s location, our program is to place the exit gate on the top or bottom part of our boundary according to the following rule:<br>a. Imagine we divide our maze into 4 quadrants: top right, top left, bottom right, bottom left.<br>i. If the user has placed Mario in the top right quadrant, then our program positions the exit gate on the bottom section of the boundary to the left of the median (imaginary vertical line dividing our maze in two).<br>ii. If the user has placed Mario in the top left quadrant, then our program positions the exit gate on the bottom section of the boundary to the right of the median.<br>iii. If the user has placed Mario in the bottom right quadrant, then our program positions the exit gate on the top section of the boundary to the left of the median.<br>iv. If the user has placed Mario in the bottom left quadrant, then our program positions the exit gate on the top section of the boundary to the right of the median.<br>b. Originally, we must use the symbol “=” to indicate the exit gate on the top or bottom part of the boundary of our maze. Note that this symbol will change, so let’s make sure we develop our program such that we can easily change this symbol.</li><li>The code we create for Assignment 4 must produce exactly the same output as the one shown in the images included above and the Sample Runs. Of course, the position of our obstacles (both types), of Mario and of the exit gate will be different but everything else must be the same.</li></ol><h3 id="Caution"><a href="#Caution" class="headerlink" title="Caution"></a>Caution</h3><p>Remember that indices of list elements start at 0, while the numbers displayed above and to the left of our maze start at 1. Therefore, when the user selects the cell in which Mario is to be placed on our maze, once we read these two numbers (the row and column numbers), we may have to decrement them by 1 in order to use these numbers as indices.</p><h3 id="Marking"><a href="#Marking" class="headerlink" title="Marking"></a>Marking</h3><p>When marking Assignment 4, we will look at how well our solution satisfies the description and requirements of this assignment as described in the problem Statement section above as well as the criteria listed here:</p>]]></content>
    
    <summary type="html">
    
      代写一个Python的游戏作业，做一个带UI的叫Mario的游戏。这次作业只是整个游戏的第一部分。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C#代写：INM378-Digital-Signal-Processing</title>
    <link href="https://tk1307993.coding.me/INM378-Digital-Signal-Processing.html"/>
    <id>https://tk1307993.coding.me/INM378-Digital-Signal-Processing.html</id>
    <published>2018-12-11T12:22:46.000Z</published>
    <updated>2018-12-11T12:24:45.461Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>This coursework has a games stream and a data stream, which have some common and some specific tasks.</p><p>For the common task, implement a filter either in FMOD with C++ or C# (games stream) or in Matlab (data stream).</p><p>For the Data part, choose a dataset and apply prediction and classification using Fourier analysis, filtering and correlation.</p><p>For the Games part, implement the sound and music elements listed below your coursework for INM379 or INM376 with C++ or a new demo built using XNA and C# with the stub provided on Moodle.</p><ol><li>Common: DSP, controllable filter. Program a controllable filter based on a delay line If you do the Games track, implement the filter for real time use with a circular buffer in an FMOD custom DSP. If you do the Data track, implement a filter function offline use with filter modulated by a sine function at 2Hz.</li><li>a. Games: 3D Sound: Place a sound source in a 3D world where it can be moved around using the mouse and/or keyboard. Make sure that the sound in the 3D world is adapted with distance roll-off including filtering, occlusion, and Doppler effect.<br>Implement dynamic filter control for an object of your choice, e.g. for the engine of your car, based on the speed.</li><li>b. Data: Character recognition: Program a character classifier using 2d-correlation to classify digits.<br>Time series prediction: Use Fourier analysis for implementing a time series predictor.</li><li>c. Games 2 (for pairs): 3D Occlusion: Implement a 3D objects in your game/demo, that you register with the FMOD framework to achieve an occlusion effect.<br>Flanger: Implement a Flanger effect (time-varying delay) as an FMOD custom DSP effect, that apply to a sound source in your game.</li><li>d. Theory (for pairs): Frequency domain filtering: Implement the filter from task 1 in the frequency domain. Use the SFFT and compare the results with task 1. Explain what the advantages and disadvantages of processing in the frequency and the time domain are.</li><li>Give a presentation of your program. This serves to communicate your work to your fellow students and the lecturers, to verify that you did write the program yourself, and to give you feedback. If you do not give a presentation, you will receive 0 marks for the whole coursework.</li></ol><p>Report: Write a short report that explains how you solved the tasks, where to find the solutions in your submitted code and any specific points you would like me to pay attention to (no more than 600 words)</p><h3 id="Background-Information-and-Support"><a href="#Background-Information-and-Support" class="headerlink" title="Background Information and Support"></a>Background Information and Support</h3><p>For every step of the coursework, relevant information, examples and data will be provided in the lectures and tutorials.</p><h3 id="Coding-Style"><a href="#Coding-Style" class="headerlink" title="Coding Style"></a>Coding Style</h3><ol><li>Your code must be properly indented.</li><li>Every method in your code must be commented w.r.t. its purpose, its parameters and its return values.</li><li>Comments and style will be marked together with the code.</li></ol>]]></content>
    
    <summary type="html">
    
      这个作业要求处理游戏中的Digital Signal Processing，即数字信号，特别是对音频信号的处理。信号都是流式信号(stream)，处理的时候需要一帧一帧的进行。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CIS2500-Rogue-like-Part2</title>
    <link href="https://tk1307993.coding.me/CIS2500-Rogue-like-Part2.html"/>
    <id>https://tk1307993.coding.me/CIS2500-Rogue-like-Part2.html</id>
    <published>2018-12-08T06:07:11.000Z</published>
    <updated>2018-12-08T06:10:25.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>You will implement additional features to a simple “Rogue-like” computer game that was described in the CIS 2500: Assignment 2 Specification (further referred to as A2 Spec). You are encouraged to reuse your code from Assignment 2, but don’t be afraid to rewrite portions of it.</p><p>It is assumed that the program described by this specification also follows the A2 Spec. In the event a requirement described in this document directly conflicts with another described in the A2 Spec, the requirement in this document is to be followed.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Your program must implement all features described in the A2 Spec, in addition to the following:</p><ol><li>Status bar and notifications</li><li>Hallways</li><li>Inventory, item stats, and item use</li><li>Player and enemy stats</li><li>Combat</li></ol><p>Refer to the following sections for the definition of each feature. As previously stated: In the event a requirement described in this document directly conflicts with another described in the A2 Spec, the requirement in this document is to be followed.</p><h3 id="Status-bar-and-notifications"><a href="#Status-bar-and-notifications" class="headerlink" title="Status bar and notifications"></a>Status bar and notifications</h3><p>During level loading, your program should reserve a blank line at the top and bottom of the screen. The program will use the top line for notifications, and the bottom line as a status bar.</p><p>The notification bar will be responsible for printing messages for the user. A message should be printed in this bar after an event occurs. Messages should automatically be cleared every time the player presses a key. The following tables document events, when they occur, and what message should be displayed.</p><p>The status bar will be responsible for displaying the hero’s health, potion count, attack, and inventory count. This information should be displayed at all times, and get updated each time the player presses a key. It should be formatted as follows:<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Health: <span class="string">[A]</span>, Potions: <span class="string">[B]</span>, Attack: <span class="string">[C]</span>, Inv: <span class="string">[D]</span>/<span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>Where:<br>[A] is the hero’s current health</p><p>[B] is the hero’s current potion count</p><p>[C] is the hero’s current attack rating</p><p>[D] is the number of items in the hero’s inventory, excluding potions. The value has a maximum of 5.</p><h3 id="Hallways"><a href="#Hallways" class="headerlink" title="Hallways"></a>Hallways</h3><p>Your program should no longer teleport the hero when they step on a door. Instead, the hero will open the door, triggering a Door event, and be able to use Hallways to traverse the level.<br>During game initialization, before, during, or after your program draws rooms to the screen it should also draw hallways. Hallways, denoted by the symbol #, can be walked on by the hero. They should be drawn extending from doors, and should be generated in a manner that ensures every room is accessible by the hero through at least one path. Every door must have a hallway.<br>Notes:</p><ul><li>You can wrap hallways around the screen (similar to pacman mazes), if you want.</li><li>Hallways can connect to other hallways.</li><li>Hallways can have deadends, as long as there is some path that leads to every room.</li><li>It’s easiest to map each door to its closest adjacent room.</li><li>You can assume every room will have at least one door. You cannot assume the location of that door.</li><li>Don’t forget to leave room for hallways when you draw your rooms, including the top and bottom edges of the terminal.</li></ul><h3 id="Inventory-item-stats-and-item-use"><a href="#Inventory-item-stats-and-item-use" class="headerlink" title="Inventory, item stats, and item use"></a>Inventory, item stats, and item use</h3><p>Your program should keep track of items that the hero picks up during the game, and print out the players inventory at the end of the game underneath their gold. This print out should include the items stat. The stat should be randomly generated when parsing the level file, and fall within the specified range. The following is a list of items that can be added to the hero’s inventory.</p><p>The hero can have a maximum of 5 items in their inventory. In a case where a hero has 5 items in their inventory, and steps on an item that can be added to their inventory, a BagFull event should occur, and the item should be removed from the screen without it being added to the hero’s inventory.</p><p>Potions and gold can always be picked up by the hero, and should be added to the potion count and gold count respectively, instead of the inventory. When the game starts, the hero should start with 1 potion, and 0 gold.</p><p>Your program should now allow the player to use potions. Figure 1 describes the activity that should occur when the p key is pressed.</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Aquator: No cycles. Monster does <span class="built_in">not</span> <span class="built_in">move</span>.</span><br><span class="line">Bat: <span class="number">1</span> cycle. <span class="built_in">Move</span> <span class="built_in">in</span> a <span class="built_in">random</span> <span class="built_in">direction</span>.</span><br><span class="line">Snake: <span class="number">4</span> cycles. <span class="number">1</span>: <span class="built_in">Move</span> right. <span class="number">2</span>: <span class="built_in">Move</span> right. <span class="number">3</span>: <span class="built_in">Move</span> left. <span class="number">4</span>: <span class="built_in">Move</span> left.</span><br><span class="line">Zombie: <span class="number">2</span> cycles. <span class="number">1</span>: <span class="built_in">Move</span> up. <span class="number">2</span>: <span class="built_in">Move</span> down.</span><br><span class="line">Troll: <span class="number">4</span> cycles. <span class="number">1</span>: <span class="built_in">Move</span> up. <span class="number">2</span>: <span class="built_in">Move</span> right. <span class="number">3</span>: <span class="built_in">Move</span> down. <span class="number">4</span>: <span class="built_in">Move</span> left.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      代写一个Rogue-like的游戏，是C代写：CIS2500 Rogue-like的Part3部分，Rogue-like属于RPG游戏中的一类，游戏最大的特点就是每次生成迷宫的都是随机的。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CIS2500-Rogue-like</title>
    <link href="https://tk1307993.coding.me/CIS2500-Rogue-like.html"/>
    <id>https://tk1307993.coding.me/CIS2500-Rogue-like.html</id>
    <published>2018-12-06T12:42:53.000Z</published>
    <updated>2018-12-06T12:46:38.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>You will implement the basic features of a “Rogue-like” computer game. Your program will accept an input file describing the layout of a single level with 6 rooms in it, and your program should draw all six rooms in a single window. Your program will also have a hero that the user can control, and move around the level.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>When started, your program should accept one command line argument (using argc and argv). The command line argument is a path to the level file. This file is a description of the level to be drawn.</p><p>Your program should start by opening the file, parsing the room descriptions line by line, and storing the data in an appropriate struct. Once done, close the file.</p><p>The program should then initialize ncurses, draw the level to the screen, and enter a “game loop”. While in the game loop, your program should accept input from the user to manipulate the world and update the screen appropriately. If the user presses the quit key, your program should exit the game loop, clean up ncurses, print the player’s amount of gold and return.<br>While in the game loop, the user is able to move the hero around the level. If the hero steps on a door, they should be teleported. Stepping on a door in room 1, should teleport the hero to a door in room 2. Stepping on a door in room 2, should teleport the hero to a door in room 3. Room 4 doors teleport the hero to room 5 doors. Room 5 doors teleport the hero to room 6 doors. And room 6 doors teleport the hero to room 1 doors. See Figure 1 for room numbering.</p><h3 id="Additional-Notes"><a href="#Additional-Notes" class="headerlink" title="Additional Notes"></a>Additional Notes</h3><ol><li>The hero should be unable to step on walls, and should therefore be unable to walk outside of rooms.</li><li>The hero should be unable to walk on weak monsters or strong monsters.</li><li>If the hero steps on a small gold or big gold, the value of that gold piece should be added to the hero’s gold amount. The hero starts with 0 gold.</li><li>If the hero steps on a collectable, it should be removed from the screen. The following elements are collectable: Small gold, Big gold, Common weapon, Rare weapon, Equipment, Potion.</li><li>If the hero steps on stairs going up or down, the program should execute the normal quitting procedure.</li></ol><h3 id="Level-File"><a href="#Level-File" class="headerlink" title="Level File"></a>Level File</h3><ul><li>The input file will contain 6 rooms. You are expected to draw the rooms 3 across and 2 down. No room will be larger than 18 rows X 23 columns.</li><li>Each line of the file will consist of a space-delimited line of text.</li><li>Each line of the file will be less than 150 characters.</li><li>No room will have more than 10 elements (excluding room dimensions, and doors).</li><li>Lines will always have a newline at the end.</li><li>The first element of the input string will ALWAYS be the room dimensions given as rowsXcolumns (i.e. 10X12). The dimensions given are the dimensions of the floor of the room. The walls must surround the floor.</li><li>Following the room dimensions are room elements. These elements can be in any order.</li><li>Door elements will begin with a lowercase d followed by a letter representing the wall that the door is in. For example, de3 is a door in the east wall in position three from the north edge (where the floor corner is position 0, and walls start at 1). There will never be more than one door per wall.</li><li>All other (not room dimension or door) elements will begin with a lowercase letter followed by coordinates. For example: w6,8 means there is a weapon at row 6 column 8 where the northwest floor corner of the room is 0,0.</li><li>For this assignment, you can assume the file inputted will follow this specification as closely as possible.</li></ul>]]></content>
    
    <summary type="html">
    
      代写一个Rogue-like的游戏，Rogue-like属于RPG游戏中的一类，游戏最大的特点就是每次生成迷宫的都是随机的。 这只是Part 2的作业，后续还有更复杂的Part 3。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CSC521-MonteCarloSimulate</title>
    <link href="https://tk1307993.coding.me/CSC521-MonteCarloSimulate.html"/>
    <id>https://tk1307993.coding.me/CSC521-MonteCarloSimulate.html</id>
    <published>2018-12-02T04:13:36.000Z</published>
    <updated>2018-12-02T04:15:56.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem1"><a href="#Problem1" class="headerlink" title="Problem1"></a>Problem1</h3><p>Your have N servers behind a load balancer. When a request arrives it is automatically assigned to one of the available servers. Requests arrive at random intervals according with the exponential distribution with an average of 100 requests per second. When a server receives a request, it processes the request and this takes a random time described by the pareto distribution. </p><p>The minimum time is 2 seconds and the average time is 3 seconds. Each server can process only one request at the time. One server costs $2000/month. If a request arrives and all servers are busy the request is dropped. You earn $0.01 for every request you process and you pay $0.10 in penalties for every request you drop. What is the value of N that allows you to guarantee that 90% of the requests are processed? What is the value of N that maximizes profit? What is the value of N below which you would operate at a loss?</p><p>Write a short paper (10 pages), explaining the problem, your solution, answers to the above questions with explanations, and an appendix containing the code (commented and indented).<br>The paper should contain at least one graph of income vs time for one simulated scenario.</p><p>I recommend that each simulate once simulates one minute. Also each call to simulate many should run at least 100 simulate once.</p><h3 id="Problem2"><a href="#Problem2" class="headerlink" title="Problem2"></a>Problem2</h3><p>Consider the following stocks of the 5 Large-Cap hardware manufacturers in 2016: AAPL, EMC, HPQ, QCOM, STX. Download the historical daily closing prices for these stocks for the last 5 years. For each compute the average yearly return and yearly volatility (average over the past 5 years). You invest $1M in each of these stocks ($5M total). </p><p>Implement a Monte Carlo simulation to compute the value of the portfolio in one year. What is the average portfolio value in one year? What is the 5% VAR (defined as the amount such that in no more than 5% of the simulated scenarios, the portfolio value in one year is below said value). Perform the simulation computation in two ways:</p><ol><li>simulate each stock separately using a gaussian model for the logreturn.</li><li>use resampling. Which is of the two methods is correct and why? What would be the price of a call option that pays you $1M if, after three months, 4 of the 5 stocks have a value below their current value?</li></ol><p>Write a short paper (10 pages), explaining the problem, your solution, answers to the above questions with explanations, and an appendix containing the code (commented and indented).</p><p>The paper should contain at least one graph showing the simulated stock prices in one simulated scenario and one plot of the distribution from which the VAR is computed.</p>]]></content>
    
    <summary type="html">
    
      用MonteCarlo算法解决两个Problem，start code中提供了所需的算法lib。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS141-LangtonsAntColony</title>
    <link href="https://tk1307993.coding.me/CS141-LangtonsAntColony.html"/>
    <id>https://tk1307993.coding.me/CS141-LangtonsAntColony.html</id>
    <published>2018-11-29T12:19:28.000Z</published>
    <updated>2018-11-29T12:38:21.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Download the zip file LangtonAnts.zip. This is a JavaFX project that simulates the running of a popular cellular automata simulation called Langton’s Ant.</p><p>The program works mostly. What you will be doing is adding your own improvements to my program as listed below. This will give you some practice in working with an already written code as this a common task for software engineers.</p><h3 id="What-the-program-does"><a href="#What-the-program-does" class="headerlink" title="What the program does"></a>What the program does</h3><p>When you first run the program, you will see a grid of squares about 20 by 20. Each square is a ‘cell’ in the simulation. A cell has a ‘state’ which is shown as a different color. In the original Langton Ant simulation there were only 2 states but this program can handle from 2 to 10 states. It is currently set to 6 states.</p><p>If you left click on a square, an ‘ant’ will appear on it. The original Langton Ant simulation had one ant but this simulation can have as many ants as you want. But keep in mind the more ants, the slower the simulation will run as it needs to move every ant at each step.</p><p>When the simulation is running, an ant will move to an adjacent square (up, down, left or right). To determine which square to move to, the ant first turns 90 degrees to the left (L) or right (R) according to a rule based on the state the cell is in. For example, if the cell is in state 3, the program will look up state 3 in a list of rules. The list is stored as a string of ‘L’ or ‘R’ characters. The rule in the string is the index that matches the state number. If the character is ‘L’, then the ant turns 90 to the left (adds 90 to it’s angle). If a ‘R’, then the ant turns 90 to the right (subtracts 90 from it’s angle). It then moves to the adjacent cell in the direction the ant is heading.</p><h3 id="What-You-Need-To-Do"><a href="#What-You-Need-To-Do" class="headerlink" title="What You Need To Do"></a>What You Need To Do</h3><p>The following improvements are needed to be done on the program.</p><ol><li>Settings Dialog Pane: Right now the number of rows, the number of states and the rulestring (set of ‘L’ and ‘R’ commands as a string) are all fixed in the code. Write a dialog pane that allows the user to at least change the number of rows(from 2 to 100), number of states(from 2 to 10) and the rulestring. Make sure to check for user input being in the right ranges and print an error message to the window (not the console) if they are not valid. Also, make sure the rulestring has the same length as the number of states and that it only consists of ‘L’ and ‘R’ characters.<br>Then add the settings pane to the MainPane. You might need to make span more than one row or column so use the GridPane add method which allows you to input how many rows/columns to span.</li><li>Draw a more interesting ant Right now the ant is just a black Ellipse. Make it either more interesting or more artistic. An idea would be to use a ImageView instead of using an Ellipse (or a Polygon object that looks more like an ant). At least do this for a cell size of 10 pixels or larger. You can keep the Ellipse for smaller cell sizes as the images get a bit too small to even see at 10 pixels or less.</li><li>Add some more interesting animation Right now all that happens is the ants disappear from one cell and appear on another and cells change colors. Add some interesting animation to the ant’s movement (or possibly to the cell’s changing color). You can use maybe PathTransition to gradually move the ant or FadeTransition to fade out the ant from one cell and fade in the ant to the other. OR you can try some other idea for animation as long as it uses a subclass of Animation and makes sense for the program.</li><li>Add some text to the window to show the number of steps completed The step field is in the MainPane class. You can update this text in the run() method.</li><li>Buttons to speed up or slow down the simulation. Add these to the buttonPanel.</li><li>Add a button to turn off or on the extra animation you added This is to allow the simulation to run faster as animation tends to slow down the processing of each step.</li><li>A better action for the right click on a cell Note that I have created my own custom event called CellClickedEvent for the CellPane class’s use. I needed this to create or delete an ant in the Model class which resides in the MainPane class. So when a mouse clicks on a CellPane on the board, I fire an event (which goes to all panes) so that the MainPane can get the information needed to create or delete an ant.<br>Right now, the right mouse button will delete an ant but I don’t find this action very useful. So come up with something more useful to do with the right mouse button (like turning an ant on the cell 90 degrees or changing the state of the cell underneath).<br>You will need to change the CellPane’s mouse handler and maybe add some extra fields to the CellClickedEvent class that you can set by changing the constructor for this class. It doesn’t necessarily have to be the MainPane that picks up the CellClickedEvent event but it does have to be a class that subclasses a JavaFX Parent class (so Model and Ant wont work here).</li></ol>]]></content>
    
    <summary type="html">
    
      虽然是JavaFX的Project，但是由于start code已经实现了大部分逻辑功能，因此整体难度不大。整个Project采用MVC设计模式，只要遵循这个设计原则，就能完成大部分的code。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="JavaFX" scheme="https://tk1307993.coding.me/tags/JavaFX/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>UI代写：CS422-DevelopingUserInterfaces</title>
    <link href="https://tk1307993.coding.me/CS422-DevelopingUserInterfaces.html"/>
    <id>https://tk1307993.coding.me/CS422-DevelopingUserInterfaces.html</id>
    <published>2018-11-27T12:39:44.000Z</published>
    <updated>2018-11-27T12:43:25.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h2><p>The course project is an individual project that allows you to explore new ideas and new kinds of user interfaces. In essence, the project aims for you to produce work analogous to a conference paper in the domain of HCI, as might be submitted to an HCI-related conference such as ACM’s CHI conference.</p><p>The project thus involves implementation of a new user interface, writing up a description and results of the interface, and finally presenting the interface to the class during a “mini-conference”.</p><h2 id="Finding-an-Idea"><a href="#Finding-an-Idea" class="headerlink" title="Finding an Idea"></a>Finding an Idea</h2><p>First you will need to decide on a project idea. You will be working on this idea for the rest of the semester, so try to find something that is of interest to you! Here are some rough guidelines for your project idea:</p><ol><li>Because we are aiming for a conference-like paper as the final product of the project, you should aim to develop a novel idea / user interface for a particular purpose, and/or to address particular deficiencies of existing systems with your new system. In particular, you should avoid very common, general systems that people use often (e.g., contact manager, calendar system, chat messenger, photo manager, etc.) – instead, be as creative as possible and try something different, and you will get more out the project. You are especially encouraged to design a user interface for a population that you are not part of. Some of the most interesting ideas come from considering subsets of possible users – e.g., what applications might be good for a pharmacist? coach? fireman? artist? pilot? parent? person with low vision? etc. You also might consider applications for non-standard contexts or environments.</li><li>A possible inspiration could come for this year’s CHI conference Student Design Competition. Here is an excerpt from 2016’s competition.</li></ol><p>“The theme of CHI 2016 is ‘doing good.’ We want you to operationalize this theme by creating an Assistive Technology. You could adopt an inclusive design strategy that allows someone with a sensory impairment to more effectively use an existing technology. You could just as validly creat an all-new technology that offers opportunities for the disabled to participate in a domestic or public setting, for work or for play. You may want to be very specific (e.g., a non-vocal individual participating on a debate team or at a poetry slam) or more general (e.g., a blind person navigating an unfamiliar part of town (after having been dropped off by their self-driving car service)). You can apply what we know about social networks, gamification, the internet of things, wearables, or hacker spaces. You may investigate why specific groups of individuals face more challenges and then experiment with ways to overcome those challenges. You may address specific challenges in an occupational setting, or with mobility, or in learning, or with living independently, or in entertainment<br>Choose you own or do something that crosscuts all of those. You may come up with an inclusive design approach that makes existing technologies work for a broader set of users or you may find opportunity in emerging technologies (e.g., 3D printing, nanotechnology, modular robotics, drones, wearables, programmable matter, or whatever). Push the envelope expand the discussion and the possibilities empower people!”</p><p>Another way to find an idea is to look through the special topics in the rest of the course, see if any particular topics strike your interest, and try to develop an idea within the theme of the special topic.</p><ol><li>Most likely, your system will have both a significant, interesting user interface part and a significant, interesting computational infrastructure behind the interface. On the one hand, an application that focuses solely on interface components would likely not do anything interesting; on the other hand, an application that is primarily “computational” (e.g., neural-network training) with the most basic interface features would not be appropriate for this course. Thus, you should aim for a project in which you could imagine approximately half of the code being devoted to the interface and half devoted to doing something interesting based on the user’s interaction with the system.</li><li>The application can be implemented in Java/Swing, HTML/CSS/Javascript, and can be designed for a desktop, web, mobile or any other type of platform. However, keep in mind, we will mainly be covering Java and web UI technologies during the course. All code developed for the project must be new code – that is, you cannot build on or extend a system that you may have developed in another context. However, it is acceptable to import complex packages (e.g., a speech recognizer) to be utilized by your project code, as long as such packages are noted in your final paper.</li></ol><p>Once you make a final decision, you can focus on this project by following these steps below. This will help you organize your work agenda. Please be realistic with how much you can implement in the course of the term. You have only 2-3 weeks to actually implement the system; a great deal of time will be needed for doing background research, testing of the interface, and final writing – please keep this in mind</p><h2 id="Part-1-Project-Description-and-User-Analysis"><a href="#Part-1-Project-Description-and-User-Analysis" class="headerlink" title="Part 1: Project Description and User Analysis"></a>Part 1: Project Description and User Analysis</h2><p>In this stage, you will describe your idea and preliminary analysis. This will include a problem description, user analysis and system description. Please note that you will revise this description as the project progresses. But this first description will allow you to think creatively about the problem you’d like to solve and how you intend to approach this from the users’ point of view. It will also give the professor and your classmates a clear summary of the goals of your project.</p><h2 id="Part-2-Full-Design-Specification"><a href="#Part-2-Full-Design-Specification" class="headerlink" title="Part 2: Full Design Specification"></a>Part 2: Full Design Specification</h2><p>In this part, you will complete the design specification for your project idea. Refer to the lecture notes on Design Specification to complete this.</p><p>Conceptual Model: This consists of a description of the conceptual model in terms of objects, relations between objects, actions on objects, and attributes of objects. The conceptual design identifies the set of objects and actions the user needs to know about in order to use the system. The complete model should list all Objects, Object Attributes, Object Relationships, Actions on Objects, Actions on Object Attributes, Actions on Object Relationships that the user is expected to know about. See the lecture notes for more details.</p><p>Semantic Level Design: describes each function including its parameters, feedback, and potential error conditions.<br>Syntactic Level Design: describes the syntax of the system, using one or more state diagrams. (If your syntactic level specifications become too lengthy and repetitive, you can select a subset of your interface and specify just that.) You can also use sub-diagrams (like diagram subroutines) to keep the state diagrams from becoming cluttered. NOTE: It is recommended that you do this with pencil and paper and then scan it to be included in your online submission. If you do not have access to a scanner, you could instead take a photo of your sketches, and include the photos with your submission. If neither of these options work, please get in touch with the professor.</p><h2 id="Part-3-Interface-Prototype"><a href="#Part-3-Interface-Prototype" class="headerlink" title="Part 3: Interface Prototype"></a>Part 3: Interface Prototype</h2><p>The first step in planning your prototype is determining what single question do you want to answer with your prototype? Then, think about what elements in the design are relevant to that question. Remove or fake everything else in your prototype as you want to get feedback that will help you the most in your design.</p><h2 id="Part-4-Paper-Draft"><a href="#Part-4-Paper-Draft" class="headerlink" title="Part 4: Paper Draft"></a>Part 4: Paper Draft</h2><p>In this stage you will do the necessary background research for your project, and begin the writing of the paper.<br>The suggested structure of the paper is as follows (and as hinted at in the paper format template):<br>Abstract: short summary of your work</p><ol><li>Introduction: brief introduction of the context of the work. Describe the motivation and the problem/question addressed by your project (i.e why are you doing it). Include the contents of Part 1 of project.</li><li>Background: description of related work and how your work extends/generalizes previous work<br>System (or probably a more descriptive title): description of your particular work/system, including work done in Part 2.</li><li>Evaluation (or perhaps a more description title): description of how you tested/evaluated the system with users</li><li>Discussion: final points/issues about the work</li><li>References: list of references/citations noted in the paper</li></ol><h2 id="Part-5-Presentation-amp-Project-Demo"><a href="#Part-5-Presentation-amp-Project-Demo" class="headerlink" title="Part 5: Presentation &amp; Project Demo"></a>Part 5: Presentation &amp; Project Demo</h2><p>The main portion of this final stage involves the completion of your proposed system, a presentation and live demo. You should keep in mind that because you’ll demo the system to the class, you should focus on completing the system to the point where you can effectively run an interesting and fun demo. Project demos will be held during the last week of classes.</p><p>For the presentation, all students will present their projects in the “mini-conference” with a set of presentations and demos in class or online. In class, we will run the demos in shifts. In each shift, a group of approximately 5 students will do a brief slide presentation and then demo their running system.</p>]]></content>
    
    <summary type="html">
    
      虽然是做UI，但实际上一个交互作业，作品不限。偷懒的话只需要参考一下现有产品的交互，然后做一个类似的网页，满足作业中交互设计的基本需求即可。
    
    </summary>
    
      <category term="JavaScript" scheme="https://tk1307993.coding.me/categories/JavaScript/"/>
    
    
      <category term="Web" scheme="https://tk1307993.coding.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS104-Minesweeper</title>
    <link href="https://tk1307993.coding.me/CS104-Minesweeper.html"/>
    <id>https://tk1307993.coding.me/CS104-Minesweeper.html</id>
    <published>2018-11-24T01:44:35.000Z</published>
    <updated>2018-11-24T01:49:31.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>For your final project you will be implementing the computer game minesweeper. The game of minesweeper works as follows:</p><ol><li>There is a rectangular grid of tiles</li><li>Hidden under some of the tiles are mines</li><li>Your goal is to mark all the tiles that contain mines and uncover all the tiles that don’t contain mines</li><li>If you uncover a tile that contains a mine you lose the game</li><li>If you uncover a tile that doesn’t contain a mine, it tells you how many mines are hidden in the eight surrounding squares<br>Here are some example boards with all of their contents revealed so that you can get an idea as to what they look like.</li></ol><p>Example 1:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> * * <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> * <span class="number">3</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> * * <span class="number">2</span> <span class="number">0</span></span><br><span class="line">  <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> * <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">7</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">0</span> <span class="number">1</span> * <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> * <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> * <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> * <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> * <span class="number">2</span> * <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> * <span class="number">2</span> * *</span><br><span class="line">  <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure></p><h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><ol><li>Name your executable mine_sweeper.out</li><li>You must submit a makefile named Makefile, along with the necessary .c and .h files needed to compile your program<ol><li>a. You must have at least 2 .c files</li></ol></li><li>Your program should accept the following command line arguments<ol><li>a. The number of rows</li><li>b. The number of columns</li><li>c. The number of mines</li><li>d. Optionally a seed to the random number generator</li><li>e. If no seed is given then you should seed the random number generator with the current time</li><li>f. If not enough command line parameters are given your program should print a usage message and terminate.</li></ol></li><li>You MUST USE A STRUCT to store your board state<br>a. This includes but is not limited to: the size of your board, the number of mines on the board, and the status of each tile (revealed, concealed, marked, etc)<br>During each turn the user will be asked to select a row and column number to take an action on<br>a. You must validate that the tile they select is contained within the board<br>b. If the row and column are not valid, you should repeatedly ask the user for a new row and column until they enter a valid one.<br>After selecting a tile the user will be presented with a list of actions to take based on the tile they selected<ol><li>a. If the tile is concealed, they may reveal it, mark it as a mine, mark it as a possible mine, or cancel their move</li><li>b. If the tile is marked as a mine, they may remove their marker or cancel their move.</li><li>c. If the tile is marked as a possible mine, they may remove their marker or cancel their move</li><li>d. If the tile is already revealed tell the user that the tile is already revealed</li><li>e. If the user chooses to cancel their action or the tile is already revealed the user should be asked for a new tile and a new action to take on it</li></ol></li><li>We will be using the following symbols in your board<ol><li>a. #: a concealed tile</li><li>b. *: a mine</li><li>c. !: a tile marked as a mine</li><li>d. ?: a tile marked as potentially being a mine</li></ol></li><li>Since mines will be randomly distributed around the board it is important that you follow the same algorithm for placing mines as I did. The algorithm is<ol><li>a. For each mine that needs to be placed:</li></ol></li><li>randomly choose a row</li><li>randomly choose a column</li><li>If the board at the row and column does not contain a mine place it there<br>else repeat beginning at sub-step 1<br>b. You should also print out where you place your mines so that you can confirm that they are being placed in the same locations as my program<br>Each tile that does not contain a mine, once revealed, shows the number of mines contained in the 8 tiles surrounding it<br>a. If the user reveals a concealed tile that has 0 mines surrounding it, then not only that tile but all concealed tiles that do not contain mines next to it should also be revealed</li><li>If a new tile is encountered that has 0 mines surrounding it, the process repeats</li><li>Hint, this involves recursion</li><li>The user losers if they reveal a mine</li><li>The user wins if they reveal all non-mine tiles and have marked all tiles that contain a mine</li><li>After the game is over the entire board should be revealed whether the user won or not should be displayed.</li></ol><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">./mine_sweeper.out<span class="number"> 4 </span>5<span class="number"> 2 </span>2</span><br><span class="line">Placing mine at 2, 4</span><br><span class="line">Placing mine at 0, 0</span><br><span class="line">There are<span class="number"> 2 </span>mines left</span><br><span class="line">3 <span class="comment"># # # # #</span></span><br><span class="line">2 <span class="comment"># # # # #</span></span><br><span class="line">1 <span class="comment"># # # # #</span></span><br><span class="line">0 <span class="comment"># # # # #</span></span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 3 </span>0</span><br><span class="line">Enter Action</span><br><span class="line">0. Reveal</span><br><span class="line">1. Question</span><br><span class="line">2. Mark</span><br><span class="line">3. Cancel</span><br><span class="line">Action: 0</span><br><span class="line">There are<span class="number"> 2 </span>mines left</span><br><span class="line">3<span class="number"> 0 </span>0<span class="number"> 0 </span>1 <span class="comment">#</span></span><br><span class="line">2<span class="number"> 0 </span>0<span class="number"> 0 </span>1 <span class="comment">#</span></span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 0 </span>1 1</span><br><span class="line">0 <span class="comment"># 1 0 0 0</span></span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 0 </span>0</span><br><span class="line">Enter Action</span><br><span class="line">0. Reveal</span><br><span class="line">1. Question</span><br><span class="line">2. Mark</span><br><span class="line">3. Cancel</span><br><span class="line">Action: 2</span><br><span class="line">There are<span class="number"> 1 </span>mines left</span><br><span class="line">3<span class="number"> 0 </span>0<span class="number"> 0 </span>1 <span class="comment">#</span></span><br><span class="line">2<span class="number"> 0 </span>0<span class="number"> 0 </span>1 <span class="comment">#</span></span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 0 </span>1 1</span><br><span class="line">0 !<span class="number"> 1 </span>0<span class="number"> 0 </span>0</span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 2 </span>4</span><br><span class="line">Enter Action</span><br><span class="line">0. Reveal</span><br><span class="line">1. Question</span><br><span class="line">2. Mark</span><br><span class="line">3. Cancel</span><br><span class="line">Action: 1</span><br><span class="line">There are<span class="number"> 1 </span>mines left</span><br><span class="line">3<span class="number"> 0 </span>0<span class="number"> 0 </span>1 <span class="comment">#</span></span><br><span class="line">2<span class="number"> 0 </span>0<span class="number"> 0 </span>1 ?</span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 0 </span>1 1</span><br><span class="line">0 !<span class="number"> 1 </span>0<span class="number"> 0 </span>0</span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 3 </span>4</span><br><span class="line">Enter Action</span><br><span class="line">0. Reveal</span><br><span class="line">1. Question</span><br><span class="line">2. Mark</span><br><span class="line">3. Cancel</span><br><span class="line">Action: 0</span><br><span class="line">There are<span class="number"> 1 </span>mines left</span><br><span class="line">3<span class="number"> 0 </span>0<span class="number"> 0 </span>1 1</span><br><span class="line">2<span class="number"> 0 </span>0<span class="number"> 0 </span>1 ?</span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 0 </span>1 1</span><br><span class="line">0 !<span class="number"> 1 </span>0<span class="number"> 0 </span>0</span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 2 </span>4</span><br><span class="line">Enter Action</span><br><span class="line">0. UnQuestion</span><br><span class="line">1. Cancel</span><br><span class="line">Action: 0</span><br><span class="line">There are<span class="number"> 1 </span>mines left</span><br><span class="line">3<span class="number"> 0 </span>0<span class="number"> 0 </span>1 1</span><br><span class="line">2<span class="number"> 0 </span>0<span class="number"> 0 </span>1 <span class="comment">#</span></span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 0 </span>1 1</span><br><span class="line">0 !<span class="number"> 1 </span>0<span class="number"> 0 </span>0</span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 0 </span>0</span><br><span class="line">Enter Action</span><br><span class="line">0. UnMark</span><br><span class="line">1. Cancel</span><br><span class="line">Action: 0</span><br><span class="line">There are<span class="number"> 2 </span>mines left</span><br><span class="line">3<span class="number"> 0 </span>0<span class="number"> 0 </span>1 1</span><br><span class="line">2<span class="number"> 0 </span>0<span class="number"> 0 </span>1 <span class="comment">#</span></span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 0 </span>1 1</span><br><span class="line">0 <span class="comment"># 1 0 0 0</span></span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 0 </span>0</span><br><span class="line">Enter Action</span><br><span class="line">0. Reveal</span><br><span class="line">1. Question</span><br><span class="line">2. Mark</span><br><span class="line">3. Cancel</span><br><span class="line">Action: 2</span><br><span class="line">There are<span class="number"> 1 </span>mines left</span><br><span class="line">3<span class="number"> 0 </span>0<span class="number"> 0 </span>1 1</span><br><span class="line">2<span class="number"> 0 </span>0<span class="number"> 0 </span>1 <span class="comment">#</span></span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 0 </span>1 1</span><br><span class="line">0 !<span class="number"> 1 </span>0<span class="number"> 0 </span>0</span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 1 </span>1</span><br><span class="line">This tile is already revealed.</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 0 </span>2</span><br><span class="line">This tile is already revealed.</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 2 </span>99</span><br><span class="line">Enter row a row between 0-3 and a column between 0-4:<span class="number"> 2 </span>4</span><br><span class="line">Enter Action</span><br><span class="line">0. Reveal</span><br><span class="line">1. Question</span><br><span class="line">2. Mark</span><br><span class="line">3. Cancel</span><br><span class="line">Action: 0</span><br><span class="line">3<span class="number"> 0 </span>0<span class="number"> 0 </span>1 1</span><br><span class="line">2<span class="number"> 0 </span>0<span class="number"> 0 </span>1 *</span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 0 </span>1 1</span><br><span class="line">0 *<span class="number"> 1 </span>0<span class="number"> 0 </span>0</span><br><span class="line"> <span class="number"> 0 </span>1<span class="number"> 2 </span>3 4</span><br><span class="line">You Lost :(</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      实现一个Minesweeper，即扫雷游戏，跑过测试即可。这个作业比较坑的地方是测试集里面采用的随机数种子，只有Linux中能过，MacOS中不能过。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C代写：COMP2129-PageRank</title>
    <link href="https://tk1307993.coding.me/COMP2129-PageRank.html"/>
    <id>https://tk1307993.coding.me/COMP2129-PageRank.html</id>
    <published>2018-11-21T04:51:16.000Z</published>
    <updated>2018-11-21T12:03:34.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Task-Description"><a href="#Task-Description" class="headerlink" title="Task Description"></a>Task Description</h2><p>n this assignment your task is to implement the PageRank algorithm in C using the power method described below and then optimise and parallelise your code to ensure peak performance is achieved.</p><p>The PageRank algorithm was developed in 1996 by Larry Page and Sergey Brin when they were graduate students at Stanford University. Google and other search engines compare words in search phrases to words in web pages and use ranking algorithms to determine the most relevant results.</p><p>PageRank assigns a score to a set of web pages that indicates their importance. The underlying idea behind PageRank is to model a user who is clicking on web pages and following links from one page to another. In this framework, important pages are those which have incoming links from many other pages, or have incoming links from other pages with a high PageRank score, or both.</p><p>You are encouraged to ask questions on Ed using the assignments category. As with any assignment, make sure that your work is your own, and you do not share your code or solutions with other students.</p><h2 id="The-PageRank-algorithm"><a href="#The-PageRank-algorithm" class="headerlink" title="The PageRank algorithm"></a>The PageRank algorithm</h2><p>PageRank is an iterative algorithm that is repeated until a stopping criteria is met. The last iteration gives us the result of the search, which is a score per web page. A high score indicates a very relevant web page whereas a low score indicates a not so relevant web page for a search. Sorting the web pages by their scores in descending order gives us the order for the result list of a search query.</p><h2 id="Implementation-details"><a href="#Implementation-details" class="headerlink" title="Implementation details"></a>Implementation details</h2><p>Your program must implement the PageRank algorithm using the power method described above.</p><p>The header file pagerank.h contains an init function that processes the list of pages and edges from standard input and stores a linked list of pages and corresponding inlinks in the following structs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span>* name;       <span class="comment">// name of this page</span></span><br><span class="line">  <span class="keyword">size_t</span> index;     <span class="comment">// index of this page</span></span><br><span class="line">  <span class="keyword">size_t</span> noutlinks; <span class="comment">// number of outlinks from this page</span></span><br><span class="line">  node* inlinks;    <span class="comment">// linked list of pages with inlinks to this page</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  page* page; <span class="comment">// pointer to the page data structure</span></span><br><span class="line">  node* next; <span class="comment">// pointer to the next page in the list</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Your program must produce no errors when built on the lab machines and ed with the command:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -O1 <span class="attribute">-std</span>=gnu11 <span class="attribute">-march</span>=native -lm -pthread pagerank.c -o pagerank</span><br></pre></td></tr></table></figure></p><p>Your program output must match the exact output format shown by the prototype and on Ed. You are encouraged to submit your assignment while you are working on it, so you can obtain some feedback.</p><h2 id="Program-input"><a href="#Program-input" class="headerlink" title="Program input"></a>Program input</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dampening factor&gt;</span><br><span class="line">&lt;<span class="built_in">number</span> <span class="keyword">of</span> pages&gt;</span><br><span class="line">&lt;<span class="built_in">name</span> <span class="keyword">of</span> web page&gt;</span><br><span class="line">...</span><br><span class="line">&lt;<span class="built_in">number</span> <span class="keyword">of</span> edges&gt;</span><br><span class="line">&lt;source page&gt; &lt;destination page&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The first line specifies the dampening factor to be used by the program. The second line defines the number of pages to be declared, followed by a list of page names with one name per line. Then, the number of edges in the graph is specified, followed by a list of edges with one edge per line.</p><p>The init function reads the input and terminates outputting an error message if the input is invalid.</p><p>The input is considered invalid if a page name exceeds the maximum length, the dampening factor is not in the range 0 &lt; d &lt; 1, a page is declared twice, or an edge is defined to a nonexistent page.</p>]]></content>
    
    <summary type="html">
    
      用C实现PageRank算法，同时需要对大数据量节点的情况进行优化。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：ImageProcessing5</title>
    <link href="https://tk1307993.coding.me/Java-ImageProcessing5.html"/>
    <id>https://tk1307993.coding.me/Java-ImageProcessing5.html</id>
    <published>2018-11-21T04:51:16.000Z</published>
    <updated>2018-11-28T11:32:35.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Assignment-7"><a href="#Assignment-7" class="headerlink" title="Assignment 7"></a>Assignment 7</h1><p>In this assignment you will build one or more UI-based mini-applications that displays and manipulates ObservablePicture objects. These little mini-applications are simple enough that can be implemented failry easily as a single self-contained UI widget. In order to display ObservablePicture objects on to the screen, we need to make use of some built-in Java library classes for images. In order to shield you from the details of these classes, I have create a subclass of the Java Canvas class called PictureView that is capable of displaying an ObservablePicture object which you should use in your solutions. You don’t really need to understand how it works internally to use it, but in order to support this object, we need a few supporting functions. Peruse the code here make note in particular of the following:</p><ul><li><p>The Picture interface now includes a createObservable() method.</p><p>This method basically converts a Picture object into an ObservablePicture object. It is implemented as a default method in the Picture interface.</p></li><li><p>An overloaded version of registerROIObserver has been added to ObservablePicture that simply takes the observer and assumes that you are interested in the entire picture.</p></li><li><p>A helper class called A7Helper has been added.</p><p>This class contains three static methods that are needed to support our new PictureView class. Thes methods are:</p><ul><li><p>public static Picture readFromURL(String url)</p><p>This method takes a URL string (i.e., a web address) for a picture and , if successful, constructs a Picture object that represents the picture. It may throw an IOException if something goes wrong.</p></li><li><p>public static int pixelToRGB(Pixel p)</p><p>Java’s classes for dealing with images represent pixels as integers with different bits within the integer representing the red, green, and blue components. This function converts our Pixel objects into the appropriate corresponding packed integer.</p></li><li><p>public static Pixel rgbToPixel(int rgb)</p><p>This function does the conversion between a packed RGB integer color and our Pixel representation.</p></li></ul></li><li><p>A new class called PictureView has been added.</p><p>This class is a subclass of the Java Canvas user-interface component. It accepts an ObservablePicture object as a parameter to its constructor. A PictureView object simply paints the encapsulated ObservablePicture object on the screen. You can use the setPicture() method to change what ObservablePicture object it is painting. It implements ROIObserver and attaches itself to the ObservablePicture object that it encapsulates so that if the ObservablePicture object changes, it can repaint the picture automatically. You use it like any other user interface object (i.e., place this object into a UI container, attach listeners in order to respond to user interface events, etc.). As a subclass of Canvas, it supports all of the same event listeners that Canvas does. You will mostly just need to be able to add mouse listeners and key listeners for this assignment.</p></li><li><p>A UI widget called SimplePictureViewWidget has been provided.</p><p>This widget is provided a Picture object to its constructor. The widget creates a user-interface comprising of a PictureView object to display the Picture object and a JLabel object to display the picture’s caption. It also handles mouse click events on the PictureView object by printing the x and y coordinates to the console whenever a click occurs. You can use this object as a basic pattern for using PictureView in your own widgets.</p></li></ul><p>The class A7SetupTest is a simple test application that creates a Picture object from a URL using the A7Helper.readFromURL() method, creates a new top-level user interface window with a SimplePictureViewWidget to display the Picture object along with a title.</p><p>If your setup is working correctly, you should be able to run A7SetupTest and see me appear on the screen along with the caption “KMP in Namibia”. Mouse clicks on the image should print coordinates of the click to the console. If all is well, it will look like this:</p><p><img src="http://www.cs.unc.edu/~kmp/comp401fall18/assignments/a7/a7-setup.png" width="500"></p><p>Follow the pattern above to create one or more of the following mini-applications. You are free to use a different image than the one of me used in the test application, but please don’t use anything too large, copyrighted, or NSFW. Also, because we are loading these images by URL, they need to be web accessible. </p><p><strong>IMPORTANT: In the descriptions below, the name of the application should be the name of the main class (i.e., the one with main() to run).</strong></p><p>These are listed in the order of increasing complexity (and thus point value). For each, there may be many different ways to approach and architect your solution. We will be grading both for basic functionality as well as the design and readability of your code.</p><h2 id="PixelInspector"><a href="#PixelInspector" class="headerlink" title="PixelInspector"></a>PixelInspector</h2><p>(5 points)</p><p>This application should load an image and when clicked display information about the pixel where the click occurs. Here is what my solution for this application looks like:</p><p><img src="http://www.cs.unc.edu/~kmp/comp401fall18/assignments/a7/a7-pixel-inspector.png" width="500"></p><h2 id="ImageAdjuster"><a href="#ImageAdjuster" class="headerlink" title="ImageAdjuster"></a>ImageAdjuster</h2><p>(10 points)</p><p>This application should provide three sliders that adjust the image as follows:</p><ul><li><p>Blur</p><p>Replaces each pixel as the average of the pixels around it. You can think of the slider as controlling the size of a square area centered on each pixel to be averaged. So a blur size of 0 would mean no blurring. A blur size of 1 would mean averaging all adjacent pixels. A blur size of 2 would be averaging all pixels with x and y coordinates that were +/- 2 of each pixel, etc.</p></li><li><p>Brightness</p><p>Adjusts the pixels toward black or white according to a slider. In my solution, the slider runs from -100 representing black, 0 representing the original pixel value, and 100 representing white.</p></li><li><p>Saturation</p><p>Adjusts the pixels toward gray scale or oversaturation. In my solution, -100 means no color, 0 means the original image, and 100 means fully saturated. The formula for this is as follows:</p><p>Let <figure class="highlight plain"><figcaption><span>be the saturation factor defined by the slider (-100 to 100).</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Let ```b``` be the brightness (i.e. intensity) of the original pixel.</span><br><span class="line"></span><br><span class="line">There are two cases:</span><br><span class="line"></span><br><span class="line">  * For saturation factors from -100 to 0</span><br><span class="line">    </span><br><span class="line">    For each component of the pixel (i.e., red, green, blue), the new value is: </span><br><span class="line"></span><br><span class="line">    ``` new = old * (1.0 + (f / 100.0) ) - (b * f / 100.0)</span><br></pre></td></tr></table></figure></p><ul><li><p>For saturation factors from 0 to 100</p><p>First determine which component (i.e., red, green, or blue) of the pixel is largest. Call this value <figure class="highlight plain"><figcaption><span>for "largest component". Then calculate the new value of each component as:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```new = old * ((lc + ((1.0 - lc) * (f / 100.0))) / lc)</span><br></pre></td></tr></table></figure></p></li></ul></li></ul><pre><code>Note: you will need to catch the special case of black pixels where the largest component is or is very close to zero (use 0.01 as your zero threshold). These remain black no matter what the value of f is and the above formulas would cause a divide by zero exception in the formula above if the largest component was in fact 0.</code></pre><p>These adjustments should be cumulative. In other words, you should be able to move all three sliders and see an image that is blurred, brightness adjusted, and saturation adjusted simultaneously. My version of this mini-application looks like this:</p><p><img src="http://www.cs.unc.edu/~kmp/comp401fall18/assignments/a7/a7-image-adjuster.png" width="500"></p><h2 id="FramePuzzle"><a href="#FramePuzzle" class="headerlink" title="FramePuzzle"></a>FramePuzzle</h2><p>(15 points)</p><p>This application should create a 5x5 grid of PictureView objects that each display a portion of the original picture. The lower right corner should be replaced with a Picture filled with a solid color. Clicking on a row or column in line with the “blank” tile should move the portions over (i.e., slide over) to fill the blank space, resulting in the blank space now being where the click occured. Using the keyboard up, down, left, and right keys should swap the blank space with the adjacent portion in the appropriate direction. Getting the boundaries between the PictureView objects to line up seamlessly can be difficult (especially if the image dimensions are not a perfect multiple of 5) so don’t worry if you see discontinuities.</p><p>My version of this looks like this (it is shown after I’ve moved some of the pieces of the puzzle around already):</p><p><img src="http://www.cs.unc.edu/~kmp/comp401fall18/assignments/a7/a7-frame-puzzle.png" width="500"></p><h2 id="Turning-In-Your-Code"><a href="#Turning-In-Your-Code" class="headerlink" title="Turning In Your Code"></a>Turning In Your Code</h2><p>We’ll be grading these by hand, so there won’t be an autograder. As usual, we’ll be looking for a submit branch in your repo and that is what we’ll grade.</p>]]></content>
    
    <summary type="html">
    
      实现三个图像相关的程序。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Image Process" scheme="https://tk1307993.coding.me/tags/Image-Process/"/>
    
  </entry>
  
</feed>
