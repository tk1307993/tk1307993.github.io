<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生CS编程作业代写</title>
  
  <subtitle>专业 高效 原创 QQ：1926742804</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tk1307993.coding.me/"/>
  <updated>2021-08-03T02:59:07.218Z</updated>
  <id>https://tk1307993.coding.me/</id>
  
  <author>
    <name>CPlusPlus小砖家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++代写：INFO1156-Text-To-Html</title>
    <link href="https://tk1307993.coding.me/INFO1156-Text-To-Html.html"/>
    <id>https://tk1307993.coding.me/INFO1156-Text-To-Html.html</id>
    <published>2021-08-03T02:56:11.000Z</published>
    <updated>2021-08-03T02:59:07.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h3><p>Start with the following code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span> </span>&#123;</span><br><span class="line">  <span class="function">ifstream <span class="title">infile</span><span class="params">( argv[<span class="number">1</span>] )</span></span>;</span><br><span class="line">  <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( infile.get( ch ) ) &#123;</span><br><span class="line">    <span class="built_in">cout</span>.put( ch );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create a C++ application that converts an old-style text file into a format more appropriate for use in a computer, smart-phone, or e-book reader. Specially, this program converts an UTF-8 text file (for example, PlatoTest.txt) to an xhtml 1.0 file (for example, PlatoTest.html) containing the same textual content as the original UTF-8 text file.</p><p>Note: If the input file has three newlines in a row, the output file should have only two <br> tags replacing the three newlines. Overall, the number of break tags is always one less than the number of consecutiveor singlenewlines.</p><p>The executable file must be named: txt2html.exe</p><p>The program will operate as a command-line utility (not a console input program).</p><h3 id="An-Example-Convert-PlatoTest-txt-to-PlatoTest-html"><a href="#An-Example-Convert-PlatoTest-txt-to-PlatoTest-html" class="headerlink" title="An Example - Convert PlatoTest.txt to PlatoTest.html"></a>An Example - Convert PlatoTest.txt to PlatoTest.html</h3><p>Below is an UTF-8 text file named “PlatoTest.txt”. Note that represents an <enter> in the text.<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">The Project Gutenberg EBook <span class="keyword">of</span> The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">This eBook is <span class="keyword">for</span> <span class="keyword">the</span> use <span class="keyword">of</span> anyone anywhere <span class="keyword">at</span> no cost <span class="keyword">and</span> <span class="keyword">with</span> almost no restrictions whatsoever. You may copy <span class="keyword">it</span>, give <span class="keyword">it</span> away <span class="keyword">or</span> re-use <span class="keyword">it</span> under <span class="keyword">the</span> terms <span class="keyword">of</span> <span class="keyword">the</span> Project Gutenberg License included <span class="keyword">with</span> this eBook <span class="keyword">or</span> online <span class="keyword">at</span> www.gutenberg.org</span><br><span class="line">Title: The Republic</span><br><span class="line">Author: Plato</span><br></pre></td></tr></table></figure></enter></p><p>The UTF-8 text file should convert to the html file named “PlatoTest.html” with the following source code:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span> xml:lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta <span class="keyword">http</span>-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">&lt;title&gt;PlatoTest&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">The Project Gutenberg EBook <span class="keyword">of</span> The Republic, <span class="keyword">by</span> Plato</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">This eBook is <span class="keyword">for</span> <span class="keyword">the</span> use <span class="keyword">of</span> anyone anywhere <span class="keyword">at</span> no cost <span class="keyword">and</span> <span class="keyword">with</span> almost no restrictions whatsoever. You may copy <span class="keyword">it</span>, give <span class="keyword">it</span> away <span class="keyword">or</span> re-use <span class="keyword">it</span> under <span class="keyword">the</span> terms <span class="keyword">of</span> <span class="keyword">the</span> Project Gutenberg License included <span class="keyword">with</span> this eBook <span class="keyword">or</span> online <span class="keyword">at</span> www.gutenberg.org</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">Title: The Republic</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">Author: Plato</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>This example would be run from the command prompt by typing:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> PlatoTest<span class="selector-class">.txt</span> PlatoTest.html</span><br></pre></td></tr></table></figure></p><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p>If the user provides an optional command line parameter “-r”, print the report (described in the next section) to the console:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">txt2html</span><span class="selector-class">.exe</span> <span class="selector-tag">-r</span> <span class="selector-tag">PlatoTest</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> PlatoTest<span class="selector-class">.txt</span> PlatoTest<span class="selector-class">.html</span> -r</span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> PlatoTest<span class="selector-class">.txt</span> -r PlatoTest.html</span><br></pre></td></tr></table></figure></p><h3 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h3><p>Provided the “-r” switch your program will display to the console a report that displays:</p><ul><li>The number of complete lines read from the input file.</li><li>The number of paragraphs (indicated by <br> tags)</li></ul><h3 id="Additional-Examples"><a href="#Additional-Examples" class="headerlink" title="Additional Examples"></a>Additional Examples</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> -r <span class="string">"War and Peace.txt"</span></span><br></pre></td></tr></table></figure><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> <span class="string">"War and Peace.txt"</span> -r</span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> <span class="string">"War and Peace.txt"</span> W&amp;P<span class="selector-class">.html</span> -r</span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt2html<span class="selector-class">.exe</span> War&amp;Peace<span class="selector-class">.txt</span> -r War&amp;Peace.html</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      用C++代写一个文本转HTML的工具。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS134-Tutor-Scheduling</title>
    <link href="https://tk1307993.coding.me/CS134-Tutor-Scheduling-1.html"/>
    <id>https://tk1307993.coding.me/CS134-Tutor-Scheduling-1.html</id>
    <published>2021-07-06T23:58:59.000Z</published>
    <updated>2021-07-07T00:01:04.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>In this project you will help determine the best of times for tutoring services for a class based upon student availability. The input to the program will be the information provided by the student, including the student ID, days of the week, and hours the student can attend tutoring. The output is a list days and time periods that will maximize the numbers of students who can attend at least 1 hour of tutoring. Make sure you look at the examples to understand the goal. The goal is not to pick the days and times noted by the most students, but rather dates and times that serve the maximum number of different students.</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The goal of this programming project is for you to master (or at least get practice on) the following tasks:</p><ul><li>working with balanced expressions</li><li>reading data from input files</li><li>using the provided Stack class</li><li>writing classes</li><li>working with existing code</li></ul><h3 id="Input-Dataset"><a href="#Input-Dataset" class="headerlink" title="Input Dataset"></a>Input Dataset</h3><ul><li>( ) are the symbols surrounding student data</li><li>&lt; &gt; are the symbols surrounding day of the week data</li><li style="list-style: none"><input type="checkbox"> are the symbols surrounding the time period.</li></ul><p>For example:</p><p>(A Smith <m [0900][1000][1100]=""> <h [1400]=""> ) ( S Jones <t [2100][1800]="">) means A Smith can go to tutoring on Mondays from 9-11, and Thursday 2-3, and S Jones can go on Tuesday from 6-7 and 9-10. Note the period order is not significant. There are no implied ranges.</t></h></m></p><p>Assume the only tutoring days are M,T,W,H,F and the hours are from 0900 to 2100, hence the last hour is 2100 (9PM – 10 PM). Also assume there are no spaces or line breaks in the input, and that every student will have a unique name.</p><h3 id="Program-Logic"><a href="#Program-Logic" class="headerlink" title="Program Logic"></a>Program Logic</h3><p>This two-dimensional array can be used to store the various students who can come for tutoring in that time period.</p><p>The first part of your program should read the input ,data validate its format, and populate the array. You must use a Stack as to interpret the Expression. Your program should prompt the user for which test dataset to run. The user should enter 1 for test dataset 1, ..up to n (depending on the number you provide.</p><p>The second part should analyze the array to pick 3 time slots that covers the most different students.</p><p>For example, in the abbreviated schedule below,Thursday at 1200, Wednesday at 0900 and Friday at 1000 would cover the most (in this case all) students. Each cell represents the students who can attend tutoring at that time period.</p><p>Your program should do the following:</p><ol><li>Read the student data from one input file. There will be many records, each giving information about one or more students.</li><li>Throw Exceptions for ill formed expressions. However after reading an ill-formed expression, read the next record from the file.</li><li>Use a stack to interpret the data input</li><li>Store the student information in the 2 dimensional array</li><li>Interpret the array to find the best 3 slots to cover the most students.</li></ol><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>The zipped java project file, which contains all your source code, input files and Eclipse related projects, is to be submitted You may include more than one test file to indicate your program is working.</p><p>You are responsible for making sample test cases (at least 3) as well as running the sets provided.</p>]]></content>
    
    <summary type="html">
    
      代写日程表应用，练习Stack的用法。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS217-Union-Find</title>
    <link href="https://tk1307993.coding.me/CS217-Union-Find.html"/>
    <id>https://tk1307993.coding.me/CS217-Union-Find.html</id>
    <published>2021-06-27T04:11:07.000Z</published>
    <updated>2021-06-27T04:13:25.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Read-the-instructions-carefully-before-writing-any-code"><a href="#Read-the-instructions-carefully-before-writing-any-code" class="headerlink" title="Read the instructions carefully before writing any code!!"></a>Read the instructions carefully before writing any code!!</h3><p>In this phase of the assignment, you will:</p><ul><li>Implement your proposed solution to the problem</li><li>Implement a data structure designed specifically for this application (called a “union find” or “disjoint set”)</li><li>Show that both solutions solve this problem</li><li>Compare the running times of the two data structures on a pathological case</li></ul><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>Create an interface for the ADT described in phase 1. We’re not going to include listMembers, so don’t include it in your interface!</p><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>Write a class that implements that interface using the strategy you came up with in phase 1. It should be generic because we’ll be testing with Strings (the stated problem in phase 1), and Integers (for testing timings in the pathological case)</p><h3 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h3><p>Write a “union find” data structure that implements the same interface as your solution. The Union find works as follows:</p><p>The union find data structure is a “forest” data structure (a bunch of trees). A node stores a value, its “rank,” and its parent. The rank is essentially the height of the subtree rooted at that node.</p><p>Each element in your data structure (in our example problem, an element is a student’s name), will have an associated node. You’ll need to be able to efficiently retrieve an element’s node; think about how you might achieve this.</p><p>The ADT operations can be implemented via the following pseudocode:</p><p>MakeSet(T data): create a node containing data. It will be its own parent and will have rank 0.</p><p>CombineGroup(T a, T b): Compute repA = find(a), repB = find(b). If repA and repB are the same, then a and b are already in the same set and you don’t need to do anything. Otherwise, assume repA lower rank than repB. set repA’s parent to be repB (if repB has lower rank, do the opposite). If the ranks are equal, increase the rank of whichever node is the new parent. For example, if repA and repB both have rank 2, you could set repA’s parent to be repB, and repB’s new rank would be 3 (repA’s rank doesn’t change).</p><p>Find(T data): You probably want to implement this using a helper method that takes and returns a node:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="keyword">Node</span><span class="title">&lt;T</span>&gt; findNode(<span class="keyword">Node</span><span class="title">&lt;T</span>&gt; n):</span><br></pre></td></tr></table></figure></p><p>if n.parent == n, then n is the representative of its group, so return it<br>otherwise: set n.parent to findNode(n.parent) and then return n’s new parent.</p><p>This method “flattens” all the nodes in the tree on the path from n to the root (its representative), and make any subsequent find operations super fast. After calling find, n and all of its ancestors will be connected directly to the root!</p><p>GetGroup(T data): this method can be implemented using a traversal</p><h3 id="Part-3-1"><a href="#Part-3-1" class="headerlink" title="Part 3"></a>Part 3</h3><p>Write a function called groupStudents that takes the interface you defined as a parameter. This will allow you to call the function with either YOUR implementation OR the UnionFind data structure. This function should load the input file, use the data structure to compute and then print the list of students in each group. Note: there is no operation in the ADT that gives you the list of groups, so you’ll have to figure out how you can use the supported operations to do so.</p><p>Here is a sample input file: sampleInput.txt</p><h3 id="Part-4"><a href="#Part-4" class="headerlink" title="Part 4"></a>Part 4</h3><p>Compare the two implementations for the pathological case described below. In this example, all of the elements will be combined into a single group as slowly as possible.</p><p>The elements will be the integers from 0 to n.</p><p>Combine the groups as follows until there is a single group</p><p>First combine 0 and 1, 2 and 3, 4 and 5, etc, so you have n/2 groups with 2 elements each</p><p>Then combine 0 and 2, 4 and 6, 8 and 10, etc. You’ll have n/4 groups with 4 elements each repeat this process until everything is in a single group.</p><p>This test case will require lots and lots of unions with groups of equal size, which will be the worst case for either implementation for the ADT.</p><p>Time this testcase for various values of n, for both implementations and report your results.</p>]]></content>
    
    <summary type="html">
    
      代写数据结构作业，按要求实现各类ADT.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS134-Tutor-Scheduling</title>
    <link href="https://tk1307993.coding.me/CS134-Tutor-Scheduling.html"/>
    <id>https://tk1307993.coding.me/CS134-Tutor-Scheduling.html</id>
    <published>2021-02-25T06:41:14.000Z</published>
    <updated>2021-02-25T08:26:01.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>In this project you will help determine the best of times for tutoring services for a class based upon student availability. The input to the program will be the information provided by the student, including the student ID, days of the week, and hours the student can attend tutoring. The output is a list days and time periods that will maximize the numbers of students who can attend at least 1 hour of tutoring. Make sure you look at the examples to understand the goal. The goal is not to pick the days and times noted by the most students, but rather dates and times that serve the maximum number of different students.</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The goal of this programming project is for you to master (or at least get practice on) the following tasks:</p><ul><li>working with balanced expressions</li><li>reading data from input files</li><li>using the provided Stack class</li><li>writing classes</li><li>working with existing code</li></ul><h3 id="Input-Dataset"><a href="#Input-Dataset" class="headerlink" title="Input Dataset"></a>Input Dataset</h3><p>( ) are the symbols surrounding student data</p><p>&lt; &gt; are the symbols surrounding day of the week data</p><p>[ ] are the symbols surrounding the time period.</p><p>For example:</p><p>(A Smith <m [0900][1000][1100]=""> <h [1400]=""> ) ( S Jones <t [2100][1800]="">) means A Smith can go to tutoring on Mondays from 9-11, and Thursday 2-3, and S Jones can go on Tuesday from 6-7 and 9-10. Note the period order is not significant. There are no implied ranges.</t></h></m></p><p>Assume the only tutoring days are M,T,W,H,F and the hours are from 0900 to 2100, hence the last hour is 2100 (9PM – 10 PM). Also assume there are no spaces or line breaks in the input, and that every student will have a unique name.</p><h3 id="Program-Logic"><a href="#Program-Logic" class="headerlink" title="Program Logic"></a>Program Logic</h3><p>This two-dimensional array can be used to store the various students who can come for tutoring in that time period.</p><p>The first part of your program should read the input ,data validate its format, and populate the array. You must use a Stack as to interpret the Expression. Your program should prompt the user for which test dataset to run. The user should enter 1 for test dataset 1, ..up to n (depending on the number you provide.</p><p>The second part should analyze the array to pick 3 time slots that covers the most different students.</p><p>For example, in the abbreviated schedule below,Thursday at 1200, Wednesday at 0900 and Friday at 1000 would cover the most (in this case all) students. Each cell represents the students who can attend tutoring at that time period.</p><h3 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h3><p>The zipped java project file, which contains all your source code, input files and Eclipse related projects, is to be submitted You may include more than one test file to indicate your program is working.</p><p>You are responsible for making sample test cases (at least 3) as well as running the sets provided.</p>]]></content>
    
    <summary type="html">
    
      代写日程表应用，练习Stack的用法。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS142-Name-Sorter</title>
    <link href="https://tk1307993.coding.me/CS142-Name-Sorter.html"/>
    <id>https://tk1307993.coding.me/CS142-Name-Sorter.html</id>
    <published>2021-02-18T06:41:14.000Z</published>
    <updated>2021-02-18T03:12:12.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>If we have a list of names, it is sometimes nice to see them in sorted order by first (given) name, and other times by last (surname). So let’s write a program which will read in a text file of names, turning each line into Name objects, putting those into an array sorting the array by the selected field, and writing the reservations to the screen, and if desired, back out to a text file.</p><p>In order to do this, we will need to create three new classes:</p><h3 id="NameSort"><a href="#NameSort" class="headerlink" title="NameSort"></a>NameSort</h3><p>Contains main(). This should be a GUI based program. It can be created using Swing (possibly using the Mattisse builder built into NetBeans) or using JavaFX or JavaFXM with Scene Builder.</p><p>The program starts with no file selected, with a label listing the file as none. There should be a menu option to open a file. This should bring up a file chooser. If the file does not exist or is not readable, a message should pop up saying so. If the file can be, it should be opened, and the contents of the file should be added into an ArrayList<name>, one line per name. First, trim the String. If there are no spaces, treat everything as the last name. If there are any spaces, the token after the last space is the last name (with everything else as the first name). Trim both Strings. The program should immediately close the file, and create a new array of type Name whose size is the number of names from the file (minus any duplicates, if you are doing the extra credit). The ArrayList should be copied into the array.</name></p><p>The program should then sort the array using the Optimized quicksort version described in class, a method which you have defined in the Sorts class. It will sort by first or last name depending on which RadioButton is selected. The sorted names should be written out to the TextArea.</p><p>A File/save menu option should save the sorted array as a text file which has the same name as the text file read in, except that it has had any extension removed and ends in “_fn.txt” or “_ln.txt”, depending on which way it is sorted.</p><h4 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h4><p>Implements Serializable, Cloneable and Comparable</p><p>Should have the following private instance variables:</p><ul><li>a String to hold a first name</li><li><p>a String to hold a last name<br>Should have the following private static variable:</p></li><li><p>a static String to keep track of which field is the selected field for sorting and printing.<br>Should have at least the following methods:</p></li><li><p>a constructor with two String parameters (first and last name) have the last name be the default selected field.</p></li><li>A static mutator for the selected field.</li><li>the overriding methods:</li><li>toString – returns a String in the format “Last, First” if last is the selected field; “First Last” otherwise.<br>equals - first and last name must be equal in order to return a true</li><li>compareTo – compares first name, then last name if first is the selected field; last name, then first name otherwise. returns -1 if the current object comes before, 0 if equal, 1 if it comes after. Utilizes the compareToIgnoreCase method of the String properties. throws a ClassCastException if the two objects are not both Names.</li><li>Clone - returns a copy of the name.</li></ul><h4 id="Sorts"><a href="#Sorts" class="headerlink" title="Sorts"></a>Sorts</h4><p>Must contain at least the methods public static void</p><p>quickSort(Comparable[] array)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array which merely calls quickSort(array, 0, array.length - 1) (see below)</p><p>public static void quickSort(Comparable[] array, int from, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array which implements the Optimized quick sort algorithm as presented in class, utilizing the following methods:</p><p>public static void insertionSort(Comparable[] array, int from, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array</p><p>private static int partition(Comparable[] array, int from, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array which sets a midpoint, calls sortFirstMiddleLast, moves data around the pivot value, and returns the pivot index</p><p>private static void swap(Comparable[] array, int from, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array</p><p>private static void sortFirstMiddleLast(Comparable[] array, int from, int mid, int to)<br>throws a java.lang.ArrayIndexOutOfBoundsException if indices not in array</p><p>Points Possible: 100<br>A sample executable jar is located on Canvas</p>]]></content>
    
    <summary type="html">
    
      代写排序算法，需要用Swing或者JavaFX实现界面。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP9021-Polygons</title>
    <link href="https://tk1307993.coding.me/COMP9021-Polygons.html"/>
    <id>https://tk1307993.coding.me/COMP9021-Polygons.html</id>
    <published>2021-01-21T06:41:14.000Z</published>
    <updated>2021-01-21T06:44:59.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="General-presentation"><a href="#General-presentation" class="headerlink" title="General presentation"></a>General presentation</h3><p>You will design and implement a program that will</p><ul><li>extract and analyse the various characteristics of (simple) polygons, their contours being coded and stored in a file, and</li><li>either display those characteristics: perimeter, area, convexity, number of rotations that keep the polygon invariant, and depth (the length of the longest chain of enclosing polygons)</li><li>or output some Latex code, to be stored in a file, from which a pictorial representation of the polygons can be produced, coloured in a way which is proportional to their area.</li></ul><p>Call encoding any 2-dimensional grid of size between between 2 2 and 50 50 (both dimensions can be dierent) all of whose elements are either 0 or 1.</p><p>Call neighbour of a member m of an encoding any of the at most eight members of the grid whose value is 1 and each of both indexes diers from m’s corresponding index by at most 1. Given a particular encoding, we inductively define for all natural numbers d the set of polygons of depth d (for this encoding) as follows. Let a natural number d be given, and suppose that for all d0 &lt; d, the set of polygons of depth d0 has been defined. Change in the encoding all 1’s that determine those polygons to 0. Then the set of polygons of depth d is defined as the set of polygons which can be obtained from that encoding by connecting 1’s with some of their neighbours in such a way that we obtain a maximal polygon (that is, a polygon which is not included in any other polygon obtained from that encoding by connecting 1’s with some of their neighbours).</p><h3 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h3><p>The assignment is worth 10 marks. the automarking script will allocate 30 seconds to each run of your program.</p><p>Late assignments will be penalised: the mark for a late submission will be the minimum of the awarded mark and 10 minus the number of full and partial days that have elapsed from the due date.</p><p>The outputs of your programs should be exactly as indicated.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><h4 id="First-example"><a href="#First-example" class="headerlink" title="First example"></a>First example</h4><p>Given a file named polys_1.txt whose contents is<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br><span class="line"><span class="number">11111111111111111111111111111111111111111111111111</span></span><br></pre></td></tr></table></figure></p><p>your program when run as python3 polygons.py –file polys_1.txt should output<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Polygon</span> <span class="number">1</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">78.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">384.16</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">0</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">2</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">75.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">353.44</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">1</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">3</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">72.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">324.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">2</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">4</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">68.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">295.84</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">3</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">5</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">65.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">268.96</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">4</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">6</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">62.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">243.36</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">5</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">7</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">59.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">219.04</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">6</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">8</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">56.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">196.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">7</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">9</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">52.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">174.24</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">8</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">10</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">49.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">153.76</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">9</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">11</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">46.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">134.56</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">10</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">12</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">43.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">116.64</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">11</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">13</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">40.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">100.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">12</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">14</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">36.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">84.64</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">13</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">15</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">33.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">70.56</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">14</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">16</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">30.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">57.76</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">15</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">17</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">27.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">46.24</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">16</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">18</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">24.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">36.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">17</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">19</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">20.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">27.04</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">18</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">20</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">17.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">19.36</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">19</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">21</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">14.4</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">12.96</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">20</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">22</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">11.2</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">7.84</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">21</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">23</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">8.0</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">4.00</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">22</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">24</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">4.8</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">1.44</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">23</span></span><br><span class="line"><span class="string">Polygon</span> <span class="number">25</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Perimeter:</span> <span class="number">1.6</span></span><br><span class="line"><span class="attr">    Area:</span> <span class="number">0.16</span></span><br><span class="line"><span class="attr">    Convex:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="string">Nb</span> <span class="string">of</span> <span class="string">invariant</span> <span class="attr">rotations:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    Depth:</span> <span class="number">24</span></span><br></pre></td></tr></table></figure></p><p>and when run as python3 polygons.py -print –file polys_1.txt should produce some output saved in a file named polys_1.tex, which can be given as argument to pdflatex to produce a file named polys_1.pdf that views as follows.</p><h3 id="Detailed-description"><a href="#Detailed-description" class="headerlink" title="Detailed description"></a>Detailed description</h3><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>The input is expected to consist of ydim lines of xdim 0’s and 1’s, where xdim and ydim are at least equal to 2 and at most equal to 50, with possibly lines consisting of spaces only that will be ignored and with possibly spaces anywhere on the lines with digits. If n is the xth digit of the yth line with digits, with 0 &lt; x &lt; xdim and 0 &lt; y &lt; ydim, then n is to be associated with a point situated x <em> 0.4 cm to the right and y </em> 0.4 cm below an origin.</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>The program should be run as either<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> polygons.<span class="keyword">py</span> --<span class="keyword">file</span> filename.txt</span><br></pre></td></tr></table></figure></p><p>or as<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> polygons.<span class="keyword">py</span> -<span class="keyword">print</span> --<span class="keyword">file</span> filename.txt</span><br></pre></td></tr></table></figure></p><p>(where filename.txt is the name of a file that stores the input). You can study the program ascii_art.py from Lecture 7 to find out how this can be done.</p><p>If the input is incorrect, that is, does not satisfy the conditions spelled out in the previous section, then the program should print out a single line that reads<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Incorrect <span class="selector-tag">input</span>.</span><br></pre></td></tr></table></figure></p><p>and immediately exit.</p><h4 id="When-the-program-is-run-without-print-as-command-line-argument"><a href="#When-the-program-is-run-without-print-as-command-line-argument" class="headerlink" title="When the program is run without -print as command-line argument"></a>When the program is run without -print as command-line argument</h4><p>If the input is correct, then the program should output a first line that reads one of<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot <span class="keyword">get</span> polygons <span class="keyword">as</span> expected.</span><br></pre></td></tr></table></figure></p><p>in case it is not possible to use all 1’s in the input and make them the contours of polygons of depth d, for any natural number d, as defined in the general presentation.</p><p>Otherwise, the program should output a first line that reads<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Polygon</span> <span class="keyword">N</span>:</span><br></pre></td></tr></table></figure></p><p>with N an appropriate integer at least equal to 1 to refer to the N’th polygon listed in the order of polygons with highest point from smallest value of y to largest value of y, and for a given value of y, from smallest value of x to largest value of x, a second line that reads one of<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Perimeter: <span class="keyword">a</span> + b*<span class="built_in">sqrt</span>(<span class="number">.32</span>)</span><br><span class="line">Perimeter: <span class="keyword">a</span></span><br><span class="line">Perimeter: b*<span class="built_in">sqrt</span>(<span class="number">.32</span>)</span><br></pre></td></tr></table></figure></p><p>with a an appropriate strictly positive floating point number with 1 digit after the decimal point and b an appropriate strictly positive integer, a third line that reads<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Area:</span> a</span><br></pre></td></tr></table></figure></p><p>with a an appropriate floating point number with 2 digits after the decimal point, a fourth line that reads one of<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Convex:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">Convex:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      代写一个绘图程序，根据文本文件中的内容，根据算法生成对应的图形。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CS440-Decision-Making-Under-Uncertainty-and-Learning</title>
    <link href="https://tk1307993.coding.me/CS440-Decision-Making-Under-Uncertainty-and-Learning.html"/>
    <id>https://tk1307993.coding.me/CS440-Decision-Making-Under-Uncertainty-and-Learning.html</id>
    <published>2020-12-29T01:23:21.000Z</published>
    <updated>2020-12-29T00:46:45.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>Consider the specification of a Markov Decision Process according to the following figure. Code your own implementation of Value Iteration and compute the optimal policy as well as the optimum utilities for this challenge.</p><p>Indicate the original utilities you used in order to start the process. Provide at least 5 intermediate results (in terms of optimum utilities and policies) depending on the number of iterations needed for convergence as well as the final results. Describe your implementation and your convergence criterion. Report computation time and number of iterations.</p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><p>Consider the criteria for accepting graduate students at the hypothetical Univ. of Excellence. Each candidate is evaluated according to four attributes:</p><ol><li>the grade point average (GPA)</li><li>the quality of the undergraduate degree</li><li>the publication record</li><li>the strength of the recommendation letters</li></ol><p>To simplify our example, let us discretize and limit the possible values of each attribute: Possible GPA scores are 4.0, 3.6, and 3.3; universities are categorized as rank_1, rank_2, and rank_3; publication record is a binary attribute - either the applicant has published previously or not; and recommendation letters are similarly binary, they are either good or normal. Finally, the candidates are classified into two classes: accepted, or P (for ‘positive’) and rejected, or N (for ‘negative’). Figure 2 provides an example of one possible decision tree determining acceptance.</p><p>An applicant doesn’t know this decision tree, but does have the data regarding twelve of last year’s applicants as in Table 1.</p><ul><li>a) Does the provided tree correctly categorize the provided examples?</li><li>b) The applicant uses the decision tree algorithm shown in class (with the information gain computations for selecting split variables) to induce the decision tree employed by U. of E. officials. What tree will the algorithm come up with? Show the computations involved, in addition to the decision tree itself. [Hint: The information content of the examples before choosing any split variable is.<br>You have to find the attribute that has the highest information gain, where attribute A divides the examples into subsets, and p and n represent the number of positive and negative examples in subset.</li><li>c) Is the tree that you got in part b) equivalent to the tree provided here (i.e., do the two trees classify every application in the same way)? If the answer is yes, explain whether this is a coincidence or not. If the answer is no, give an example of a data case that will be classified differently by the two trees.</li></ul><h3 id="Question-3-Consider-building-an-SVM-for-the-following-two-class-training-data"><a href="#Question-3-Consider-building-an-SVM-for-the-following-two-class-training-data" class="headerlink" title="Question 3: Consider building an SVM for the following two-class training data:"></a>Question 3: Consider building an SVM for the following two-class training data:</h3><p>Positive class:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">3</span>]^T , [<span class="number">0</span> <span class="number">2</span>]^T , [<span class="number">0</span> <span class="number">1</span>]^T , [<span class="number">0</span> <span class="number">0</span>]^T</span><br></pre></td></tr></table></figure></p><p>Negative class:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">5</span>]^T , [<span class="number">1</span> <span class="number">6</span>]^T , [<span class="number">3</span> <span class="number">3</span>]^T</span><br></pre></td></tr></table></figure></p><h3 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h3><p>Consider the chart below:</p><p>(a) Notice that for the above graph there is a perfect linear separator for the two input classes.<br>Therefore, a single perceptron should be able to learn this classification task perfectly. Your task is to replicate the learning process, starting with a random perceptron with weights, where the weight 0 corresponds to the constant offset. For the inputs, just estimate their coordinates from the chart.<br>Start by adding the perceptron’s initial line of separation to the chart. Compute then how many samples are misclassified? Then, select an arbitrary misclassified sample and describe the computation of the weight update (you can choose = 1 or any other value; if you like you can experiment a bit to find a value that leads to efficient learning).<br>Illustrate the perceptron’s new line of division in the same chart or a different one, and give the number of misclassified samples. Repeat this process four more times so that you have a total of six lines (or fewer if your perceptron achieves perfect classification earlier).<br>You can generate the computations and/or graphs either by hand or by writing a simple computer program. If you write a program, please attach a printout, and let the program run until the perceptron achieves perfect classification (after how many steps?).</p><p>(b) If your perceptron did not reach perfect classification, determine a set of weights that would achieve perfect classification, and draw the separating line for those weights.</p><p>(c) Now assume that less information were available about the samples. For instance, consider we only know the value for 1 for each sample, which means that our perceptron has only two weights to classify the input as best as possible, i.e., it has weights 0 and 1 , where 0 is once again the weight for the constant offset 0 = 1. Draw a diagram that visualizes this one-dimensional classification task, and determine weights for a perceptron that does the task as best as possible (minimum error, i.e., minimum proportion of misclassified samples). Where does it separate the input space, and what is its error?</p><h3 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h3><p>Consider the more difficult classification problem shown in the chart below:</p><p>(a) As you certainly noticed, a single perceptron cannot do this classification task perfectly. Determine the minimum error that a single perceptron can reach, and show the dividing line in the input space for such a perceptron.</p><p>(b) Clearly, we need a multi-layer perceptron to do this task perfectly. Develop such a system of connected perceptrons and write it down, together with the required weights for each unit. Illustrate the dividing lines for these perceptrons in a copy of the chart above.</p>]]></content>
    
    <summary type="html">
    
      代写AI作业，完成五个关于决策的子问题。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Artificial Intelligence" scheme="https://tk1307993.coding.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>C代写：COMP20005-Path-Planning-1</title>
    <link href="https://tk1307993.coding.me/COMP20005-Path-Planning-1.html"/>
    <id>https://tk1307993.coding.me/COMP20005-Path-Planning-1.html</id>
    <published>2020-12-24T01:23:21.000Z</published>
    <updated>2020-12-24T01:26:08.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learning-Outcomes"><a href="#Learning-Outcomes" class="headerlink" title="Learning Outcomes"></a>Learning Outcomes</h3><p>In this project you will demonstrate your understanding of structures and arrays of structures, and will develop a computational solution for a non-trivial problem. You are also expected to make extensive use of functions; and to demonstrate that you have adopted a clear and elegant programming style. You will find it difficult to create a working solution unless you plan your program carefully in advance, and develop it incrementally.</p><h3 id="Path-Planning"><a href="#Path-Planning" class="headerlink" title="Path Planning"></a>Path Planning</h3><p>Path planning is required in many situations, including satnav software and autonomous robot control. As one specific example, the item “pickers” employed in Amazon’s warehouses (soon to be opened in Australia) follow instructions that specify their routing through the warehouse as they assemble each order, with the route determined in advance so as to minimize walking time (or riding time, the warehouses are big). The pickers might also be robotic devices, controlled by wireless network from a central routeplanner. Your task in this project is to develop a program that compares and evaluates such routings, based on a pool of incoming orders that must be picked, packaged, and despatched.</p><p>In particular, we will assume that the bins form a two-dimensional grid, and are laid out in a regular pattern of straight-line corridors to allow easy navigation. Each bin is labeled with coordinates; to keep it simple in this project, we will assume that each location is specified by a numeric bin number to indicate a row, and an alphabetic column number. For example, bin 3a is the third one in the first column (corridor). The bins on both sides of each corridor have the same address, and rows are counted from one (Amazon doesn’t like the number zero) and columns from the letter “a”.</p><p>Figure 1: Example warehouse layout in which there are eight rows of bins and eight corridors to access them. Pickers enter the warehouse at the marked entry location; then must follow the directions permitted by the arrows; and finally leave the warehouse via the marked exit location.</p><p>Figure 1 illustrates such an arrangement, with (in the example) eight rows of bins, and eight corridors to access them. Warehouses will always have the general rectangular “shape” that is depicted, including a single entry point and a single exit point in the top row; but might have different numbers of corridors, and different numbers of bins per row. In general you may assume that there will be at most 99 bins per corridor, and at most 26 corridors (that is, the maximum corridor label is “z”). You may also assume that the number of corridors will be even, so that the exit is opposite an “up” corridor, as shown. Finally, to avoid collisions between trolleys (remember, this might be automated, and the pickers might be robots), each pathway is one-way.</p><p>Note that a very large number of simplifying assumptions are being made in this layout: that there is no third dimension (height) associated with the bin addresses (clearly unlikely to be true); that pickers can always move without being blocked by other pickers accessing the same corridor (clearly unlikely to be true); and that there are no “shortcut” links between the long straight corridors (like there are at IKEA if you know where to look for them); and so on. Nor will we pay any attention to how items get in to the bins. That part of it is someone else’s problem, working the night shift.</p><h4 id="Stage-1-Designing-Structures-Reading-and-Printing-marks-up-to-6-20"><a href="#Stage-1-Designing-Structures-Reading-and-Printing-marks-up-to-6-20" class="headerlink" title="Stage 1 - Designing Structures, Reading and Printing (marks up to 6/20)"></a>Stage 1 - Designing Structures, Reading and Printing (marks up to 6/20)</h4><p>Orders to the warehouse are generated via a web e-store interface that captures a customer id and a list of items that make up that order; then another program (still not the one we are writing here) determines the location of the item(s) being purchased in terms of row number and corridor number and rewrites the order to a file in text format. That file is then the input to the program you must write. For example, the following describes an order for five items requested by a customer:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2010161</span> <span class="number">5</span></span><br><span class="line">    <span class="number">123</span> <span class="number">1</span>a  <span class="number">876</span> <span class="number">2</span>a  <span class="number">654</span> <span class="number">5</span>d  <span class="number">751</span> <span class="number">3</span>b  <span class="number">431</span> <span class="number">2</span>b</span><br></pre></td></tr></table></figure></p><p>In this example, customer 2010161 has ordered 5 items, with item 123 located in bin number 1a, and so on. Each input file contains multiple such customer orders.</p><p>Write a set of typedef and struct declarations to model the situation described; and write suitable functions to read an input file into these internal structures. For input file data1.txt, which covers a total of six customer’s orders and 26 items purchased, and includes as its first order the five-item purchase shown above, the required output (showing the first and last customer orders in full) is:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stage 1</span><br><span class="line">------</span><br><span class="line">  orders:   6</span><br><span class="line">  items :  26</span><br><span class="line"> <span class="built_in"> customer </span>2010161,  5 items, bins:  1a  2a  5d  3b  2b</span><br><span class="line"> <span class="built_in"> customer </span>1856512,  7 items, bins:  4f  3g  2f  8g  6h  2h  1g</span><br></pre></td></tr></table></figure></p><p>You are expected to use struct types for all data storage, including ones that contain arrays as components. To keep your program space requirements compact, you should assume that each input file contains orders from at most 100 customers, and that each customer purchases at most 10 items in any order. In a real e-store these limits would be much higher, of course.</p><h4 id="Stage-2-Sorting-Into-“Pick”-Order-marks-up-to-12-20"><a href="#Stage-2-Sorting-Into-“Pick”-Order-marks-up-to-12-20" class="headerlink" title="Stage 2 - Sorting Into “Pick” Order (marks up to 12/20)"></a>Stage 2 - Sorting Into “Pick” Order (marks up to 12/20)</h4><p>Given the corridor arrangements shown in Figure 1, pickers cannot backtrack - they can only visit each corridor once, and must pick the required items in the correct sequence. In particular, in the odd-lettered corridors “a” and “c” and so on, the bins must be visited in increasing numeric order, whereas in corridors “b” and “d” and so on, the bins must be visited in decreasing numeric order.</p><p>Add functionality to your program so that each of the customer orders is sorted into pick order. For example, the required additional output from this stage for file data1.txt also shows the first and last customer orders, after they have been sorted:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stage 2</span><br><span class="line">------</span><br><span class="line"> <span class="built_in"> customer </span>2010161,  5 items, bins:  1a  2a  3b  2b  5d</span><br><span class="line"> <span class="built_in"> customer </span>1856512,  7 items, bins:  4f  2f  1g  3g  8g  6h  2h</span><br></pre></td></tr></table></figure></p><h4 id="Stage-3-Calculating-Pick-Times-marks-up-to-16-20"><a href="#Stage-3-Calculating-Pick-Times-marks-up-to-16-20" class="headerlink" title="Stage 3 - Calculating Pick Times (marks up to 16/20)"></a>Stage 3 - Calculating Pick Times (marks up to 16/20)</h4><p>The efficiency of the warehouse is determined by the average time required to pick one order. Time, in turn, is proportional to the total travel distance involved. If we suppose that distance between corridor centers is 6.4 metres, then in the arrangement shown in Figure 1 the total horizontal distance traveled from entry point to exit point is always 7 * 6.4 = 44.8 metres, because backtracking is not possible.</p><p>To this must be added the vertical (both down and up) distances traveled. Suppose that the distance between bin centers is 3.8 metres, and that the paths at top and bottom of the warehouse are the same width as a single bin. Then, to pick an item from bin 1a requires a total vertical travel distance of (1 + 2 <em> 9) </em> 3.8 = 72.2 metres, because the whole of corridor “a” must be traversed “downward”, and then a whole “upward” corridor must also be traveled; because the top pathway is also one bin wide (and half of that top pathway is covered on entry, and half on exit); and because traveling a whole corridor is equivalent to moving past 9 bins. The four-item order 1a 2a 3b 1b has the same total distance of 44.8 + 72.2 = 117.0 metres.</p><h4 id="Stage-4-Reducing-the-Cost-marks-up-to-20-20"><a href="#Stage-4-Reducing-the-Cost-marks-up-to-20-20" class="headerlink" title="Stage 4 - Reducing the Cost (marks up to 20/20)"></a>Stage 4 - Reducing the Cost (marks up to 20/20)</h4><p>Having a picker working on only one order at a time is clearly inefficient, and the Amazon management is interested in modeling the possible cost savings that would arise if pickers were able to simultaneously pick for two orders, provided that they are never required to carry more than 10 items at any given time. For example, in data1.txt, the first two orders could be given to one picker, and the 3rd and 4th orders also assigned to a second picker. The last two orders in that input file are too big to be combined with each other, and so require a picker each. That is, one simple strategy to reduce costs is to check consecutive pairs of orders, and if their total item count is less than or equal to 10, hand both to the same picker:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stage 4</span><br><span class="line">------</span><br><span class="line"><span class="code">  pickers required: 4</span></span><br><span class="line"><span class="code">  average distance per order over  6 orders: 174.9 metres</span></span><br></pre></td></tr></table></figure></p><h3 id="The-boring-stuff…"><a href="#The-boring-stuff…" class="headerlink" title="The boring stuff…"></a>The boring stuff…</h3><p>This project is worth 20% of your final mark. A rubric explaining the marking expectations will be provided on the FAQ page.</p><p>You need to submit your program for assessment; detailed instructions on how to do that will be posted on the LMS once submissions are opened. Submission will not be done via the LMS; instead you will need to log in to a Unix server and submit your files to a software system known as submit. You can (and should) use submit both early and often - to get used to the way it works, and also to check that your program compiles correctly on our test system, which has some different characteristics to the lab machines. Failure to follow this simple advice is highly likely to result in tears. Only the last submission that you make before the deadline will be marked.</p>]]></content>
    
    <summary type="html">
    
      代写一个类似Amazon的仓库机器人寻址程序，需要最短距离取到货物。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CIS3490-Convex-Hull</title>
    <link href="https://tk1307993.coding.me/CIS3490-Convex-Hull.html"/>
    <id>https://tk1307993.coding.me/CIS3490-Convex-Hull.html</id>
    <published>2020-09-28T02:26:23.000Z</published>
    <updated>2020-09-28T02:29:16.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In the following questions, express the algorithms in the pseudocode we use in lectures (in the textbook), and implement your algorithms in the C programming language.</p><h3 id="Algorithm-1"><a href="#Algorithm-1" class="headerlink" title="Algorithm 1"></a>Algorithm 1</h3><p>A[0..n 1] is an array of n distinct numbers. A pair of array members (A[i], A[j]) is called an inversion if A[i] &gt; A[j] for i &lt; j.</p><ul><li>Design a brute force algorithm to count the number of inversions in an array, analyze the number of executions of the basic operation, and determine the efficiency class.</li><li>Design a divide-and-conquer algorithm of Θ(n log n) to count the number of inversions in an array, create a recurrence to analyze the number of executions of the basic operation, and determine the efficiency class. Use the Master Theorem to verify the efficiency class in your analysis result.</li><li>Implement the two algorithms, and test them by using data_1.txt, which includes 50,000 integers. Your programs are required to display execution time. Please compare the differences in execution time and theoretical analysis.</li></ul><h3 id="Algorithm-2"><a href="#Algorithm-2" class="headerlink" title="Algorithm 2"></a>Algorithm 2</h3><p>The convex hull of a set of S is the smallest convex set containing S. (You can find more about the convex hull problem on pages 109-113 in the textbook.) It is assumed that not all the points in S are on a straight line.</p><ul><li>Design a brute force algorithm to solve the convex-hull problem and analyze its efficiency.</li><li>Design a divide-and-conquer algorithm of Θ(n log n) to solve the convex-hull problem, create a recurrence to analyze the number of executions of the basic operation, and determine the efficiency class. Use the Master Theorem to verify the efficiency class in your analysis result.</li><li>Implement the two algorithms and test them using data_2.txt, which includes 30,000 points (pairs of x-y coordinates). Your programs are required to display execution time. Please compare the differences in execution time and theoretical analysis.</li></ul><h3 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h3><p>Please submit your design and analysis (i.e. 1.1, 1.2, 2.1, 2.2) in hard-copies to the instructor after the Monday class, and submit your code to Moodle.</p>]]></content>
    
    <summary type="html">
    
      用C语言实现下述的算法，并且需要提供对应的pseudocode.
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Programming Fundamentals" scheme="https://tk1307993.coding.me/tags/Programming-Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS246-Streaming-and-Memory-Management</title>
    <link href="https://tk1307993.coding.me/CS246-Streaming-and-Memory-Management.html"/>
    <id>https://tk1307993.coding.me/CS246-Streaming-and-Memory-Management.html</id>
    <published>2020-09-23T03:03:37.000Z</published>
    <updated>2020-09-23T11:14:50.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Note: You must use the C++ I/O streaming and memory management facilities on this assignment. Moreover, the only standard headers you may #include are iostream, fstream, sstream, iomanip, string, and utility. Marmoset will be programmed to reject submissions that violate these restrictions.</p><p>Note: Each question on this assignment asks you to write a C++ program, and the programs you write on this assignment each span multiple files. Moreover, each question asks you to submit a Makefile for building your program. For these reasons, we strongly recommend that you develop your solution for each question in a separate directory. Just remember that, for each question, you should be in that directory when you create your zip file, so that your zip file does not contain any extra directory structure.</p><p>Note: Questions on this assignment will be hand-marked to ensure that you are writing highquality code, and to ensure that your solutions employ the programming techniques mandated by each question.</p><p>Note: You are not permitted to ask any public questions on Piazza about what the programs that make up the assignment are supposed to do. A major part of this assignment involves designing test cases, and questions that ask what the programs should do in one case or another will give away potential test cases to the rest of the class. Instead, we will provide compiled executables, suitable for running on linux.student.cs, that you can use to check intended behaviour. Questions found in violation of this rule will be marked private or deleted; repeat offences could be subject to discipline.</p><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><p>In this exercise, you will write a C++ class (implemented as a struct) to control a simple robotic drone exploring some terrain. Your drone starts at coordinates (0,0), facing north.<br>Use the following structure definition for coordinates:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Position</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> ew, ns;</span><br><span class="line">  Position( <span class="keyword">int</span> ew = <span class="number">0</span>, <span class="keyword">int</span> ns = <span class="number">0</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>The east-west direction is the first component of a position, and the north-south direction is the second. Your Drone class must be properly initialized via a constructor, and must provide the following methods:<br>|  Method   | Description  |<br>|  —-  | —-  |<br>| void forward()  | Move the drone one unit forward. |<br>| void backward()  | Moves the drone one unit backward. |</p><p>For simplicity, you may assume that the drone will never visit more than 50 positions before running out of fuel or otherwise breaking down.</p><p>Implement the specified operations for the Drone. (Some starter code has been provided for you in the file drone.h, along with a sample executable.) You may not change the contents of drone.h other than by adding your instance variables and comments i.e. the interface must stay exactly the same.</p><p>The test harness a3q1.cc is provided with which you may interact with your drone for testing purposes. The test harness is not robust and you are not to devise tests for it, just for the Drone class. Do not change this file.</p><ul><li>(a) Due on Due Date 1: Design the test suite suiteq1.txt for this program and zip the suite into a3q1a.zip.</li><li>(b) Due on Due Date 2: Implement this in C++ and place the files Makefile, a3q1.cc, drone.h and drone.cc in the zip file, a3q1b.zip. Your Makefile must create an executable named drone. Note that the executable name is case-sensitive.</li></ul><h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2"></a>Exercise 2</h3><p>The standard Unix tool make is used to automate the separate compilation process. When you ask make to build a program, it only rebuilds those parts of the program whose source has changed, and any parts of the program that depend on those parts etc. In order to accomplish this, we tell make (via a Makefile) which parts of the program depend on which other parts of the program. Make then uses the Unix “last modified” timestamps of the files to decide when a file is older than a file it depends on, and thus needs to be rebuilt. In this problem, you will simulate the dependency-tracking functionality of make. We provide a test harness (main.cc) that accepts the following commands:</p><ul><li>target: source indicates that the file called target depends on the file called source</li><li>touch file indicates that the file called file has been updated. Your program will respond with file updated at time n where n is a number whose significance is explained below</li><li>make file indicates that the file called file should be rebuilt from the files it depends on. Your program will respond with the names of all targets that must be rebuilt in order to rebuild file.</li></ul><p>A target should be rebuilt whenever any target it depends on is newer than the target itself.</p><p>In order to track ages of files, you will maintain a virtual “clock” (just an int) that “ticks” every time you issue the touch command (successful or not). When a target is rebuilt, its lastmodified time should be set to the current clock time. Every target starts with a last-modified time of 0. For example:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>: b</span><br><span class="line">touch b</span><br><span class="line">touch b</span><br><span class="line">touch b</span><br></pre></td></tr></table></figure></p><p>will produce the output (on stdout)<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">b</span> updated at <span class="selector-tag">time</span> <span class="number">1</span></span><br><span class="line"><span class="selector-tag">b</span> updated at <span class="selector-tag">time</span> <span class="number">2</span></span><br><span class="line"><span class="selector-tag">b</span> updated at <span class="selector-tag">time</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>It is not valid to directly update a target that depends on other targets. If you do, your program should issue an error message on stdout, as illustrated below:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>: b</span><br><span class="line">touch a</span><br><span class="line">(Output:)</span><br><span class="line">Cannot update non-leaf object</span><br></pre></td></tr></table></figure></p><p>When you issue the make file (build) command, the program should rebuild any files within the dependency graph of file that are older than the files they depend on. For example:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>: b</span><br><span class="line"><span class="selector-tag">a</span>: c</span><br><span class="line"><span class="selector-tag">b</span>: d</span><br><span class="line">c: e</span><br><span class="line">touch e</span><br><span class="line">make a</span><br></pre></td></tr></table></figure></p><p>will produce the output<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e updated <span class="keyword">at</span> <span class="built_in">time</span> <span class="number">1</span></span><br><span class="line">Building c</span><br><span class="line">Building <span class="keyword">a</span></span><br></pre></td></tr></table></figure></p><p>because file c depends on e, and a depends on c. Note that b is not rebuilt. The order in which the Building messages appear is not important.</p><p>A file may depend on at most 10 other files. If you attempt to give a file an 11th dependency, issue the error message</p>]]></content>
    
    <summary type="html">
    
      代写C++基础练习题，练习内存分配、I/O处理等的使用方法，属于比较基础的C++作业。
    
    </summary>
    
      <category term="C++" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS350-System-Calls</title>
    <link href="https://tk1307993.coding.me/CS350-System-Calls.html"/>
    <id>https://tk1307993.coding.me/CS350-System-Calls.html</id>
    <published>2020-09-20T00:06:52.000Z</published>
    <updated>2020-09-20T00:48:49.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>In this assignment, you are asked to implement several OS/161 process-related system calls. Before you start implementing system calls, you should review and understand those parts of the OS/161 kernel that you will be modifying.</p><h3 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h3><p>This section gives a brief overview of some parts of the kernel that you should become familiar with.</p><h4 id="kern-syscall"><a href="#kern-syscall" class="headerlink" title="kern/syscall"></a>kern/syscall</h4><p>This directory contains the files that are responsible for loading and running user-level programs, as well as basic and stub implementations of a few system call handlers.</p><ol><li>proc syscalls.c: This file is intended to hold the handlers for process-related system calls, including the calls that you are implementing for this assignment. Currently, it contains a partial implementation of a handler for exit() and stub handlers for getpid() and waitpid().</li><li>runprogram.c: This file contains the implementation of the kernel’s runprogram command, which can be invoked from the kernel menu. The runprogram command is used to launch the first process run by the kernel. Typically, this process will be the ancestor of all other processes in the system.</li></ol><h4 id="kern-arch-mips"><a href="#kern-arch-mips" class="headerlink" title="kern/arch/mips/"></a>kern/arch/mips/</h4><p>This directory contains machine-specific code for basic kernel functions, such as handling system calls, exceptions and interrupts, context switches, and virtual memory.</p><ol><li>locore/trap.c: This file contains the function mips trap(), which is the first kernel C function that is called after an exception, system call, or interrupt returns control to the kernel. (mips trap() gets called by the assembly language exception handler.)</li><li>syscall/syscall.c: This file contains the system call dispatcher function, called syscall(). This function, which is invoked by mips trap() determines which kind of system call has occured, and calls the appropriate handler for that type of system call. As provided to you, syscall() will properly invoke the handlers for a few system calls. However, you will need to modify this function to invoke your handler for fork(). In this file, you will also find a stub function called enter forked process(). This is intended to be the function that is used to cause a newly-forked process to switch to user-mode for the first time. When you implement enter forked process(), you will want to call mips usermode() (from locore/trap.c) to actually cause the switch from kernel mode to user mode.</li></ol><h4 id="kern-include"><a href="#kern-include" class="headerlink" title="kern/include"></a>kern/include</h4><p>The kern/include directory contains the include files that the kernel needs. The kern subdirectory contains include files that are visible not only to the operating system itself, but also to user-level programs. (Think about why it’s named “kern” and where the files end up when installed.)</p><h4 id="kern-vm"><a href="#kern-vm" class="headerlink" title="kern/vm"></a>kern/vm</h4><p>The kern/vm directory contains the machine-independent part of the kernel’s virtual memory implementation. Although you do not need to modify the virtual memory implementation for this assignment, some functions implemented here are relevant to the assignment.</p><ol><li>copyinout.c: This file contains functions, such as copyin() and copyout for moving data between kernel space and user space. See the partial implementations of the handlers for the write() and waitpid() system calls for examples of how these functions can be used.</li></ol><h4 id="In-user"><a href="#In-user" class="headerlink" title="In user"></a>In user</h4><p>The user directory contains all of the user level applications, which can be used to test OS/161. Don’t forget that the user level applications are built and installed separately from the kernel. All of the user programs can be built by running bmake and then bmake install in the top-level diretory (os161-1.99).</p><h3 id="Implementation-Requirements"><a href="#Implementation-Requirements" class="headerlink" title="Implementation Requirements"></a>Implementation Requirements</h3><p>All code changes for this assignment should be enclosed in #if OPT A2 statements. For example:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OPT_A2</span></span><br><span class="line">  <span class="comment">// code you created or modified for ASST2 goes here</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="comment">// old (pre-A2) version of the code goes here,</span></span><br><span class="line">  <span class="comment">// and is ignored by the compiler when you compile ASST2</span></span><br><span class="line">  <span class="comment">// the ''else'' part is optional and can be left</span></span><br><span class="line">  <span class="comment">// out if you are just inserting new code for ASST2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* OPT_A2 */</span></span></span><br></pre></td></tr></table></figure></p><p>For this to work, you must add #include “opt-A2.h” at the top of any file for which you make changes for this assignment.<br>If in Assignment 1 you wrapped any new code with #if OPT A1, it will also be included in your build when you compile for Assignment 2.</p><p>For this assignment, you are expected to implement the following OS/161 system calls:</p><ul><li>fork</li><li>getpid</li><li>waitpid</li><li>exit</li></ul><p>fork enables multiprogramming and makes OS/161 much more useful. exit and waitpid are closely related to each other, since exit allows the terminating process to specify an exit status code, and waitpid allows another process to obtain that code. You are not required to implement the WAIT ANY, WAIT MYPGRP, WNOHANG, and WUNTRACED flags for waitpid() - see kern/include/kern/wait.h.</p><p>To help get you started, there is a partially-implemented handler for exit already in place, as well as stub implementatations of handlers for getpid and waitpid. You will need to complete the implementations of these handlers, and also create and implement a handler for fork. There is a man (manual) page for each OS/161 system call. These manual pages describe the expected behaviour of the system calls. The system call man pages are located in the OS/161 source tree under os161-1.99/man/syscall. They are also available on-line through the course web page.</p><p>Your system call implementations should correctly and gracefully handle error conditions, and properly return the error codes as described on the man pages. This is because application programs, including those used to test your kernel for this assignment, depend on the behaviour of the system calls as specified in the man pages. Under no circumstances should an incorrect system call parameter cause your kernel to crash.</p><p>Integer codes for system calls are listed in kern/include/kern/syscall.h. The file user/include/unistd.h contains the user-level function prototypes for OS/161 system calls. These describe how a system call is made from within a user-level application. The file kern/include/syscall.h contains the kernel’s prototypes for its internal system call handling functions. You will find prototypes for the handlers for waitpid, exit and getpid there. Don’t forget to add a prototype for your new fork() handler function to this file.</p><h3 id="Process-IDs"><a href="#Process-IDs" class="headerlink" title="Process IDs"></a>Process IDs</h3><p>A PID, or process ID, is a unique number that identifies a process. You should carefully review the manual pages for fork, exit, and waitpid to understand how PIDs are expected to work.</p><p>For the purposes of this assignment, you should ensure that a process can use waitpid to obtain the exit status of any of its children, and that a process may not use waitpid to obtain the exit status of any other processes. In the terminology used on the waitpid manual page, you should assume that a process is “interested” in its children, but is not interested in any other processes.</p><h3 id="Silence-is-Golden"><a href="#Silence-is-Golden" class="headerlink" title="Silence is Golden"></a>Silence is Golden</h3><p>Your final, submitted kernel should not produce any output other than the normal boot and shutdown messages and the kernel menu prompt. We enourage you to use the DEBUG mechanism to generate kernel debugging output while you are testing your work, but make sure that all such debugging messages are turned off in the version of the kernel that you submit.</p><p>If your kernel produces lots of spurious output, it is more difficult for us to review the output produced by the user-level programs that we test with. If your kernel produces output other than the normal boot and shutdown messages, your assignment may be penalized.</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>The kernel’s runprogram command, which was described in Section 1.1, will allow you launch a process to run a user-level application program. This is handy for testing that your system calls work. Without making any modifications to the base OS/161 code, you should be able to run the testbin/palin user program, which is a simple palindrome tester. testbin/palin uses only write to the console and exit, both of which are partially implemented in the OS/161 base code.</p><p>OS/161 includes a number of application programs that you can use. The user/bin and user/sbin directories contain a number of standard utility programs, such as a command shell. In addition, the user/testbin and user/uw-testbin directories contain a variety of programs that can be used to conduct some simple tests of your OS/161 kernel. The A2 hints (on-line) will identify some specific programs that we will be using to test your submission. Any of these programs can be launched directly from the kernel using the runprogram command.</p><h3 id="Configuring-and-Building"><a href="#Configuring-and-Building" class="headerlink" title="Configuring and Building"></a>Configuring and Building</h3><p>Before you do any coding for Assignment 2a, you will need to reconfigure your kernel for this assignment. Follow the same procedure that you used to configure for Assignment 1, but use the Assignment 2 configuration file instead.</p><p>Generally, you should not have to rebuild those applications every time you build a new kernel. However, there are certain header files, e.g, in kern/include/kern that are used by the kernel and by the user-level application programs. In the unlikely event that you make changes to these files, you must rebuild the user-level code.</p><p>It is always OK to rebuild the user-level applications. If you are getting any weird, unexpected behaviour from those applications, it is a good idea to rebuild them just to be on the safe side.</p><p>More importantly, make sure to completely recompile your kernel and user-level programs just before you submit the assignment. A common problem is not noticing that an erroneous change in header files that are shared between the kernel and user programs prevents the user programs from compiling. If we cannot compile the user-level applications, we cannot test your code!</p>]]></content>
    
    <summary type="html">
    
      完成提供的Kernel中System Call的实现。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C#代写：CS3160-Set</title>
    <link href="https://tk1307993.coding.me/CS3160-Set.html"/>
    <id>https://tk1307993.coding.me/CS3160-Set.html</id>
    <published>2020-09-16T00:06:52.000Z</published>
    <updated>2020-09-16T00:47:54.805Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>The purpose of this assignment is to create a C# class representing sets of integers in the range 0 to 50 inclusive.<br>You should work in your groups (2 members). If your partner is not present in class each will need to complete the assignment on your own by the due date/time.</p><h3 id="Always-bring-to-class"><a href="#Always-bring-to-class" class="headerlink" title="Always bring to class"></a>Always bring to class</h3><ol><li>Deitel’s book.</li><li>This assignment grade sheet for this lab already printed out.</li><li>USB Flash drive(s) or other storage media.</li><li>Your laptop with Microsoft Visual Studio 2015.</li></ol><h3 id="Mandatory-Instructions"><a href="#Mandatory-Instructions" class="headerlink" title="Mandatory Instructions"></a>Mandatory Instructions</h3><p>Begin by creating a solution folder on the ZIP disk, USB flash drive, or your laptop’s HD. The folder’s name should be one or two last names followed by Lab1 (e.g. Smith-Lab1 or Smith-Jones-Lab1) if both group members are working on the solution.</p><p>You will create a file IntegerSet.cs that will be compiled into IntegerSet.dll. Begin by creating a makefile that you will use for this assignment. The application created by the makefile should be called Lab1.exe. Also implement the “clean” target so that you can type “make clean” for the current directory. Use the command-line compiler csc for this assignment. Do not use Visual Studio GUI!</p><p>Define the IntegerSet class in the file IntegerSet.cs. Use the same namespace (Set) that is used for the main program. Remember to make your class public. Hint: Because the only integers allowed are those in the range 0 to 50 inclusive, you don’t really need the overhead of linked lists to implement the set. Use a bool array of length 51 to represent the set. If the value of position i is true, that means that i is in the set. (Example: If arr[5] is true, that means that 5 is in the set.) These are the public member functions of IntegerSet</p><p>You might find it convenient to define one or more private functions for use in your function implementations. Make sure to document your code and to use meaningful variable names.</p><p>When you have fully debugged your code, upload your compressed solution folder to Canvas (both group members should upload the solution). Your folder should contain only three files (App.cs, IntegerSet.cs, makefile) for this assignment.<br>Sample output for this program is provided below</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">A <span class="keyword">is</span>: <span class="comment">&#123; 3 4 11 21 29 &#125;</span></span><br><span class="line">B <span class="keyword">is</span>: <span class="comment">&#123; 1 2 3 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Union</span> <span class="keyword">of</span> A <span class="keyword">and</span> B <span class="keyword">is</span>: <span class="comment">&#123; 1 2 3 4 11 21 29 &#125;</span></span><br><span class="line"></span><br><span class="line">Intersection <span class="keyword">of</span> A <span class="keyword">and</span> B <span class="keyword">is</span>: <span class="comment">&#123; 3 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> A <span class="keyword">is</span> <span class="keyword">not</span> equal <span class="keyword">to</span> <span class="keyword">set</span> B</span><br><span class="line"></span><br><span class="line">Copying a <span class="keyword">to</span> b...</span><br><span class="line"><span class="keyword">Set</span> A <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="keyword">set</span> B</span><br><span class="line"></span><br><span class="line">Inserting <span class="number">33</span> <span class="keyword">into</span> <span class="keyword">set</span> A...</span><br><span class="line"><span class="keyword">Set</span> A <span class="keyword">is</span> now: <span class="comment">&#123; 3 4 11 21 29 33 &#125;</span></span><br><span class="line"></span><br><span class="line">Deleting <span class="number">33</span> <span class="keyword">from</span> <span class="keyword">set</span> A...</span><br><span class="line"><span class="keyword">Set</span> A <span class="keyword">is</span> now: <span class="comment">&#123; 3 4 11 21 29 &#125;</span></span><br><span class="line"></span><br><span class="line">Enter <span class="keyword">set</span> E: </span><br><span class="line">Enter an element (Enter <span class="keyword">to</span> <span class="keyword">end</span>): <span class="number">5</span></span><br><span class="line">Enter an element (Enter <span class="keyword">to</span> <span class="keyword">end</span>): <span class="number">6</span></span><br><span class="line">Enter an element (Enter <span class="keyword">to</span> <span class="keyword">end</span>): <span class="number">7</span></span><br><span class="line">Enter an element (Enter <span class="keyword">to</span> <span class="keyword">end</span>): <span class="number">6</span></span><br><span class="line">Enter an element (Enter <span class="keyword">to</span> <span class="keyword">end</span>): <span class="number">5</span></span><br><span class="line">Enter an element (Enter <span class="keyword">to</span> <span class="keyword">end</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> e <span class="keyword">is</span>: <span class="comment">&#123; 5 6 7 &#125;</span></span><br><span class="line">Emptying <span class="keyword">set</span> e...</span><br><span class="line"><span class="keyword">Set</span> e <span class="keyword">is</span>: <span class="comment">&#123; empty &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Code-Documentation"><a href="#Code-Documentation" class="headerlink" title="Code Documentation"></a>Code Documentation</h3><p>Each of your source files should contain a documentation header with description, author name, class information. Each function should have a documentation header with minimally function name, description, parameters, return value. Use proper program style at all times which means indentation, alignment, and whitespace. Utilize self-documenting code which means use mnemonic, i.e., meaningful variable/function/namespace/class names, etc.</p><h3 id="What-to-turn-in"><a href="#What-to-turn-in" class="headerlink" title="What to turn in?"></a>What to turn in?</h3><p>Submit compressed (.zip) solution folder via Canvas.<br>In your solution folder make sure that all necessary files to compile/link/execute your projects are provided.<br>Here are some files that may be required</p><ol><li>All required C# source files (.cs)</li><li>makefile (if the solution requires it)</li><li>The entire Visual Studio 2015 solution folder (if the solution requires it)</li></ol>]]></content>
    
    <summary type="html">
    
      练习C#的基本语法，实现关于Set的操作。
    
    </summary>
    
      <category term="C#" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CS162-Hashtag</title>
    <link href="https://tk1307993.coding.me/CS162-Hashtag.html"/>
    <id>https://tk1307993.coding.me/CS162-Hashtag.html</id>
    <published>2020-09-10T00:06:52.000Z</published>
    <updated>2020-09-10T00:11:34.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>In Lab 1 “Rock Climber”, you learned how to climb rocks (well, sort of). You got overly excited and couldn’t wait to tell your friends about your newly acquired skill on Twitter. Obviously, you needed an excellent hashtag for your tweet. No problem! We will find you one.</p><p>In this assignment, you will be exposed to several array searching and sorting concepts and implementations, and asymptotic analyses in general. Work individually. Follow the guidelines in the syllabus for any discussions with others. You may work in pairs on extra credit contests, but then the extra credit will be divided among the two of you. Extra credit entries must be bug free to be eligible and turned in on time (no late days).</p><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><p>After downloading the assignment tarball from the course website, extract the files by running:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xvf</span> <span class="selector-tag">lab2-handout</span><span class="selector-class">.tgz</span></span><br></pre></td></tr></table></figure></p><p>from a terminal window. Some of the files worth looking at are listed below.<br>Files you won’t modify:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Makefile</span><br><span class="line"><span class="class"><span class="keyword">lib</span>/*.<span class="title">h</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/*.<span class="title">c</span></span></span><br><span class="line"><span class="class"><span class="keyword">lib</span>/<span class="title">words</span></span></span><br></pre></td></tr></table></figure></p><p>Files you may modify (and the files denoted by * will be submitted for grading):<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* <span class="selector-tag">duplicates</span><span class="selector-class">.c</span></span><br><span class="line">* <span class="selector-tag">trending</span><span class="selector-class">.c</span></span><br><span class="line">* <span class="selector-tag">validity</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">duplicates_test</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">trending_test</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">validity_test</span><span class="selector-class">.c</span></span><br></pre></td></tr></table></figure></p><p>Additionally, you should create a file called:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">written</span><span class="selector-class">.pdf</span></span><br></pre></td></tr></table></figure></p><p>which contains the answers to the written parts of the assignment. For your convenience, we’ve provided a LATEX template (written.tex).</p><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><p>To submit your programming assignment, first generate a handin archive lab2-handin.tgz with the command<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span> <span class="keyword">package</span></span><br></pre></td></tr></table></figure></p><p>then submit your lab2-handin.tgz file to your Subversion repository (svn) for the class. Once you’ve completed all problems, you should also submit your written.pdf to Gradescope.</p><p>Note that your code will not be graded until after the due date. It is your responsibility to test your code and proofread your writeup thoroughly before submitting.</p><h3 id="Hashtag"><a href="#Hashtag" class="headerlink" title="Hashtag"></a>Hashtag</h3><p>What is a hashtag you ask? Well, it is “a word or phrase preceded by the symbol # that classifies or categorizes the accompanying text (such as a tweet)”. For the purpose of this lab, we will ignore the preceding “#” sign, because they appear in front of every hashtag. Furthermore, throughout the lab, we will assume that the hashtags are case-insensitive. For example, #OhWhatABeautifulMorning is represented as the string “ohwhatabeautifulmorning”, or more precisely, a char array in C, of course.</p><h3 id="WhatHashtagsHaveIUsed"><a href="#WhatHashtagsHaveIUsed" class="headerlink" title="WhatHashtagsHaveIUsed"></a>WhatHashtagsHaveIUsed</h3><p>In this part of the assignment, given a sorted array of hashtags (i.e. an array of strings sorted in alphabetical order) that you have used since your first tweet, you will return a new sorted array of distinct hashtags. In other words, the new array should contain the same strings as the original array, but all strings are now distinct.</p>]]></content>
    
    <summary type="html">
    
      使用三方库SFML作为GUI，代写Game of Life这个游戏。
    
    </summary>
    
      <category term="C代写" scheme="https://tk1307993.coding.me/categories/C%E4%BB%A3%E5%86%99/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CSCI1310-How-Do-You-Feel-On-Twitter</title>
    <link href="https://tk1307993.coding.me/CSCI1310-How-Do-You-Feel-On-Twitter.html"/>
    <id>https://tk1307993.coding.me/CSCI1310-How-Do-You-Feel-On-Twitter.html</id>
    <published>2020-09-05T03:32:12.000Z</published>
    <updated>2020-09-05T00:43:50.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Sentiment analysis is the process of computationally identifying a writer’s attitude towards a topic expressed in a piece of text. Some companies apply sentiment analysis to opinions expressed in social media about their products.</p><p>In this assignment, we are providing you with all tweets generated in the second week of November and you are going to use that data to generate a geographic visualization of the sentiment expressed about particular topics. As an example, consider the following map that shows how people feel about Justin Bieber using the sentiments expressed in their tweets. States that are red have the most positive view, while states that are dark blue have the most negative view; yellow represents a more neutral view, while states in gray have insufficient data.</p><p>To generate this image, thousands of tweets that included the word “bieber” were collected. Each tweet contained the latitude and longitude of the tweet’s location, which could be used to associate the tweet with a state. To determine if the tweet was overall positive or negative, the individual words in the tweet were analyzed.<br>Words were assigned a score between -1 and +1 using a pre-defined dictionary of word sentiments. For example, a few of the words in the dictionary and their scores include,<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'DEPLORABLE' = -<span class="number">1.0</span></span><br><span class="line">'BAD' = -<span class="number">0.625</span></span><br><span class="line">'GOOD' = <span class="number">0.875</span></span><br><span class="line">'EXCELLENT' = <span class="number">1.0</span></span><br></pre></td></tr></table></figure></p><p>If a word of the tweet is not found in the sentiment dictionary, it is ignored. The overall sentiment of the tweet is the average of the sentiment scores that are found. If no sentiment scores are found for any of the words of the tweet, this tweet is ignored. The overall sentiment of a state is computed as the average sentiment score for all tweets that are associated with that state (ignoring those tweets that did not have a sentiment score). The state’s sentiment score is then mapped to a color between blue (negative) and red (positive) using a prescribed color gradient.</p><h3 id="Data-provided"><a href="#Data-provided" class="headerlink" title="Data provided"></a>Data provided</h3><p>There is a file on Moodle called tweets.zip that includes nine json files of tweets collected using the Twitter API. Some of the files have a timestamp, while others do not have a timestamp. All of the files contain the text in the tweet and the latitude and longitude of the tweeter.</p><h3 id="Code-provided"><a href="#Code-provided" class="headerlink" title="Code provided"></a>Code provided</h3><p>There are several files provided in finalProjectFiles.zip that provide the functionality for calculating the sentiment from the tweet text and graphically rendering the sentiment for each state. The files include,</p><ul><li>geo.py contains a GeoPosition class to represent a geographic location in terms of latitude and longitude. Each tweet will have a latitude and longitude that can be used to get its location relative to the states. State descriptions also have a latitude and longitude. Also included in GeoPosition is a distance method that computes that properly computes the shortest distance between two geographic locations (based on the distance traveled on the great circle that connects them).</li><li>tweet.py contains the Tweet class. An instance of that class represents a single twitter message.</li><li>state.py defines a State class used to represent information about a state. Each state has a standard two-letter abbreviation (e.g., MO for Missouri), that is returned by the abbrev() method. The boundaries of each state are defined with a series of geographic positions. The relevant information about State for you is that the State class supports a method, centroid(), that returns a single GeoPosition for the centroid of the state. Informally, the centroid is an “average” of all positions in the state, which can be used as an approximation for the entire state for determining the closest state for a tweet.</li><li>us_states.py module contains the actual data needed for representing the United States. You will not need to examine this file; it will be used by other parts of the project.</li><li>country.py defines a Country class that handles the actual rendering of the states.</li><li>colors.py provides support for translating the numeric “sentiment” values into an appropriate color based on a fixed gradient suggested by Cynthia Brewer of Penn State University. In particular, the module defines a method: get_sentiment_color(sentimentValue) that returns an RGB triple of an appropriate color for the given numeric sentiment value. If None is sent as a parameter, it returns the color gray (which is different than the color indicated by a neutral sentiment of 0.0).</li><li>parse.py includes load_sentiments to load the sentiments dictionary.</li><li>The data folder contains the raw data for sentiment scores and tweets.</li><li>The samples folder contains four examples of complete images for the respective terms: bacon, bieber, cat, and dog. The bieber image is the one shown at the beginning of this page; others can be viewed for bacon, cat, and dog.</li></ul><h3 id="What-you-need-to-do"><a href="#What-you-need-to-do" class="headerlink" title="What you need to do"></a>What you need to do</h3><p>You need to use the data and code provided to generate a sentiment analysis on some topic. All of your code should go in the file trends.py. The file currently has a very basic class definition for a SentimentAnalysis class that loads the sentiments dictionary, the states list, and the Country instance.</p><p>Your code needs to read in the data files you are using: there are nine files provided, you can use either the files with the created date or the ones without the created date. You only want to include tweets that have a specified search term, hashtag, or keyword. For example, if you are analyzing the sentiment towards the recent election, you might want to include tweets only if they include Hillary or Trump in the text. You need to write the code to filter the data.</p><p>Your primary tasks in this assignment are to loop through the provided data, and for each tweet that you include, compute the average sentiment for that tweet. You can do that by breaking the tweet into a sequence of words and looking up each word in the sentiment dictionary. The sentiment for the tweet is the average of all word sentiments for the tweet.</p><p>Assuming the tweet has a sentiment score (that is, at least one word of the tweet was identified in the sentiments dictionary), assign this tweet’s sentiment score to the “closest” state. The rule that you should use is to assign the tweet to whichever state has its centroid closest to the location of the tweet. This is an imperfect rule (for example, because tweets from New York City will actually be closer to the centroid of Connecticut and New Jersey then to the centroid of New York state); but it is an easy rule to implement, and it will do for now.</p><p>Once you have scored all tweets and assigned those scores to the appropriate state, compute the cumulative sentiment for each state as the average of all sentiments that were assigned. Then use that sentiment to pick an appropriate color (using the get_sentiment_color function from our colors module), and set the state’s color in the visualization.<br>You should feel free to define any additional functions within the trends.py file that help you organize your code in a more clear and modular fashion.</p><h3 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h3><p>Write a short, 1-2 page report describing what you did and any interesting results you generated. Your report should include the following three sections:</p><p>Purpose: What is the purpose of the assignment</p><p>Procedure: What did you do? What code did you write? What functionality did you implement? What analysis did you do on the data?</p><p>Results: What were the results of the project? How did sentiments in different states compare to each other?</p>]]></content>
    
    <summary type="html">
    
      代写一个美国大选的小程序，根据Twitter数据绘制热力图。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>C代写：CMPSC101-Rock-Paper-Scissors-Game</title>
    <link href="https://tk1307993.coding.me/CMPSC101-Rock-Paper-Scissors-Game.html"/>
    <id>https://tk1307993.coding.me/CMPSC101-Rock-Paper-Scissors-Game.html</id>
    <published>2020-08-31T03:32:12.000Z</published>
    <updated>2020-08-31T03:50:19.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>For your final project, you will emulate the Rock, Paper, Scissors game.</p><p>You may choose one person to work with for this final project. Group member selection opens on Wednesday, November 30th at 6:00 PM and closes Thursday, December 1st at 6:00 PM. You must submit your group selection using the form in Angel.</p><p>If you choose, and are approved, to work as a group, you will submit ONE assignment for both members. (If both members submit an assignment, both will be disqualified and neither will receive credit for submission.)</p><h4 id="The-program-should-meet-the-following-requirements"><a href="#The-program-should-meet-the-following-requirements" class="headerlink" title="The program should meet the following requirements"></a>The program should meet the following requirements</h4><ol><li>The game starts with a menu. The user is presented with the opportunity to review the rules of the game, or to actually play the game. (It’s up to you if you want to display a menu separately, or integrate the “display instructions” option within the “Rock, Paper, Scissors” choice (see 3.a. below) ).</li><li>If the user requests to see the rules, the program displays the rules of the game.</li><li>If the user requests to actually play the game</li></ol><h4 id="The-winner-is-determined-according-to-the-following-rules"><a href="#The-winner-is-determined-according-to-the-following-rules" class="headerlink" title="The winner is determined according to the following rules"></a>The winner is determined according to the following rules</h4><ol><li>If one player chooses rock and the other player chooses scissors, then the rock wins. (Rock crushes scissors.)</li><li>If one player chooses paper and the other chooses rock, then paper wins. (Paper covers rock.)</li><li>If one player chooses scissors and the other player chooses paper, then scissors wins. (Scissors cuts paper).</li><li>If both players make the same choice, then the game is tie.</li></ol><h4 id="In-order-for-this-program-to-receive-full-credit"><a href="#In-order-for-this-program-to-receive-full-credit" class="headerlink" title="In order for this program to receive full credit"></a>In order for this program to receive full credit</h4><ol><li>The user MUST be able to type in his/her choice: ROCK, PAPER, SCISSORS.</li><li>At minimum, the following functions must be used (you can choose to add others, depending on the way you implement the program):<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInstructions</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getComputerGuess</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getUserGuess</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h3><ul><li>There is ONLY ONE submission for this project. If you plan on completing the extra credit option (below), DO NOT SUBMIT THE PROGRAM UNTIL IT IS COMPLETE, INCLUDING THE EXTRA CREDIT.</li><li>The code MUST be submitted using a CPP file. No copy-and-paste code into a text box, no Word files, no non-CPP files. If an invalid submission is made, the program will not be evaluated and credit will not be granted.</li><li>Final projects MUST be submitted by 5:55 PM on December 14th. NO EXCEPTIONS AND NO EXTENSIONS WILL BE MADE. This assignment is in lieu of a final exam, and will be treated as such. DO NOT WAIT UNTIL THE LAST MINUTE TO SUBMIT YOUR ASSIGNMENT. Angel being down is NOT a valid excuse for a late submission.</li><li>Before clicking the final submit button, be sure that the correct file was uploaded. Once the file is uploaded, it WILL NOT BE RELEASED. This assignment is in lieu of a final exam, and will be treated as such. ALL SUBMISSIONS ARE FINAL.</li><li>DO NOT cheat. All code will be run through a plagiarism and code-duplication program that evaluates the code for cheating. Cheating, copying, unauthorized collaboration, or any other form of academic dishonesty will be treated as a major offense, and a sanction recommendation of failure for the course will be sent to the Academic Integrity Office.</li></ul><h3 id="EXTRA-CREDIT-OPTIONS"><a href="#EXTRA-CREDIT-OPTIONS" class="headerlink" title="EXTRA CREDIT OPTIONS"></a>EXTRA CREDIT OPTIONS</h3><p>Up to 10 extra points for your overall class point total:</p><ol><li>Convert your program to play The Big Bang Theory’s Sheldon Cooper’s improved version of this game: “Rock, Paper, Scissors, Lizard, Spock”. The rules for this new and improved game are listed in the “RPSLS Rule Matrix” file. Watch this video for more information.</li><li>Allow the user to play the game until they decide to quit.</li></ol>]]></content>
    
    <summary type="html">
    
      代写C语言入门课，一个Rock, Paper, Scissors的游戏，也就是石头剪子布，比较简单。
    
    </summary>
    
      <category term="C" scheme="https://tk1307993.coding.me/categories/C/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：DE2-Software-Information-System</title>
    <link href="https://tk1307993.coding.me/DE2-Software-Information-System.html"/>
    <id>https://tk1307993.coding.me/DE2-Software-Information-System.html</id>
    <published>2020-08-26T03:32:12.000Z</published>
    <updated>2020-08-26T10:04:10.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Individual-assignment-brief"><a href="#Individual-assignment-brief" class="headerlink" title="Individual assignment brief"></a>Individual assignment brief</h3><h4 id="Individual-assignment-description"><a href="#Individual-assignment-description" class="headerlink" title="Individual assignment description"></a>Individual assignment description</h4><p>The individual assignment for Computing 2 is intended to test your ability to create a complete software solution from scratch based on an initial specification.</p><p>Your task is to design and implement a complete software information system, capable of storing and processing information about a particular topic (domain). The topic for each individual assignment will be chosen by each student and can be anything, such as: books in a library, movies in a cinema, products in a shop, etc. Each student must have a unique topic, i.e. there can be no duplicate topics!</p><p>Please read carefully the initial requirements specification given below for the software information system you need to build. You will need to expand and adapt these to the particular topic you have chosen. To be successful at this assignment, you need to follow the best practices in software systems design and software project management and to implement all necessary modules of the system.</p><h4 id="Requirements-specification"><a href="#Requirements-specification" class="headerlink" title="Requirements specification"></a>Requirements specification</h4><p>This is the initial requirements specification for the software information system:</p><ol><li>Provide a way to input new data in the system (e.g. register new books).</li><li>Provide a storage back-end using one or more of the data structures we studied in Computing 2 (e.g. binary search trees, hash tables, etc.).</li><li>Provide a way to save the data from memory into an external file.</li><li>Provide a way to load the data from an external file into memory.</li><li>Provide an interface for visualization of the data (could be just printed on the console).</li><li>Provide a way to search through the data by inputting a key.</li><li>Provide a way to sort the data by some key.</li><li>Provide a way to organize the data in a suitable way (e.g. group the data in categories, genres, etc.)</li><li>Provide a way to calculate statistics on the data, such as calculating mean values, finding min and max values, etc.</li><li>Provide data verification and user fool-proofing, e.g. by detecting wrong input and asking to re-enter the input, rather than crashing with an error.</li></ol><h4 id="Assessment"><a href="#Assessment" class="headerlink" title="Assessment"></a>Assessment</h4><p>This individual assignment accounts for 30% of the final grade for Computing 2.</p><p>It is due in Week 11;</p>]]></content>
    
    <summary type="html">
    
      代写一个信息系统，需要用到数据结构中的binary search tree, hash tables等等。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS1070-Game-of-Life</title>
    <link href="https://tk1307993.coding.me/CS1070-Game-of-Life.html"/>
    <id>https://tk1307993.coding.me/CS1070-Game-of-Life.html</id>
    <published>2020-08-23T03:32:12.000Z</published>
    <updated>2020-08-23T00:44:47.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h3><p>Design the Game of Life (Chapter 7, Programming Project13) using classes. You will look up the rules of the game from the textbook, but ALL implementation detail listed here MUST be followed.</p><p>Use SFML for your Graphical User Interface. const int MAX = 80; This is the size of the grid.</p><p>You will need a Grid class:</p><p>private member variable: A two dimensional array (MAX byMAX) of integers that will be used to store the live cells.</p><p>You will need at least the following functions:</p><ul><li>Grid() Constructor that will initialize your private member variable.</li><li>SetAlive(i, j) and Kill(i, j) that will be used as mutators for the class.</li><li>IsAlive(i, j) is a boolean function that will tell you if a cell is alive or dead.</li><li>CountNeighbors(i, j) is an integer function that will tell you the number of alive cells for a given cell.</li><li>PopulateRandom(r) is a function that will add r live cells to your grid in random locations.</li><li>Clear() Will clear the grid.</li><li>Save(char leName[]) will save the current conguration of the grid into a text le.</li><li>Load(char leName[]) will load the saved conguration from a text le.</li><li>Step() is a function that will generate the next generation on the grid.</li><li>Show() will print the grid on the screen.</li></ul><p>The user will be given the following options to control the program:</p><ul><li>Clear: To clear the grid</li><li>Random: to place 50 random live cells on the grid</li><li>Step: To generate the next generation.</li><li>Go: To generate generation after generation without stopping for input.</li><li>Save: To Save current conguration.</li><li>Load: To load a saved conguration.</li></ul><p>A text panel on the right side of the grid will give information about the number of live cells, the number of generations since the start of the program, name of the e the conguration is being saved, etc.</p><p>Once you have implemented these features, you might want to start working on giving the user the ability to turn individual cells on and off and other features like speed, user selectable le names, etc.</p><h3 id="You-will-submit"><a href="#You-will-submit" class="headerlink" title="You will submit"></a>You will submit</h3><ul><li>FULLY COMMENTED code.</li><li>a header le named notes.h that explains in detail the features of your program and how they were implemented. What things you had to consider. What math, physics you had to use. Everything a reviewer should know when they are looking at your program. This is not an easy task and is very time consuming. Do not rush this!</li><li>a video (screen capture) where you play your project. Talk about what it does. Once again, go over the challenges you had to overcome and how you did that. After a person listens to your video, they should have a feeling they understand your program.</li></ul><p>Upload the link to Youtube and paste the link in the assignment page. You can try to upload a copy to Canvas, but I don’t promise this will work.</p>]]></content>
    
    <summary type="html">
    
      使用三方库SFML作为GUI，代写Game of Life这个游戏。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Game" scheme="https://tk1307993.coding.me/tags/Game/"/>
    
      <category term="Third-party" scheme="https://tk1307993.coding.me/tags/Third-party/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CS112-Analytical-Problems</title>
    <link href="https://tk1307993.coding.me/CS112-Analytical-Problems.html"/>
    <id>https://tk1307993.coding.me/CS112-Analytical-Problems.html</id>
    <published>2020-08-21T03:32:12.000Z</published>
    <updated>2020-08-21T01:27:20.930Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This homework has two parts: in Part A you will write up answers to analytical problems related to the lectures in the past week, both to confirm and extend your understanding of the abstract principles discussed; in Part B you will write code to implement this understanding, and to practice your Java coding skills. I suggest you read this whole assignment carefully and for Part B, it is definitely worth thinking about your solution for a bit before launching Dr. Java and beginning to type. In addition to the requirements for the Java problems, you must observe the following requirements (for all homework submitted in this course):</p><ul><li>All programs should be literate, i.e., easily understandable by a human (say, your grader) and follow the Java Style Guidelines for CS112 posted on the class web site;</li><li>All files for this homework should be submitted using WebSubmit, following the instructions on the class web site;</li><li>You may not use data structure libraries such as ArrayList, since we are learning to write Java from the ground up and you must learn how these libraries are built; however, you are free to use (unless specifically directed otherwise) the basic libraries String, Character, Scanner, and Math;</li><li>You may freely use code from the class web site, the textbook, or lecture (unless specifically directed otherwise) as long as you cite the source in your comments; but you may NEVER use code from the web or other students’ programs—this will be considered plagiarism and penalized accordingly.</li></ul><h3 id="Part-A-Analytical-Problems"><a href="#Part-A-Analytical-Problems" class="headerlink" title="Part A: Analytical Problems"></a>Part A: Analytical Problems</h3><p>In these questions we will first explore the binary heap data structure, and then consider the general problem of hashing by considering the two basic paradigms, using a simple hash function. In the first one, involving separate chaining, we will make this realistic by stored (key, value) pairs; the hash function is applied to the key alone, but the entire pair is stored in the node. For the second, involving linear probing, we will simply store the key in the array slot.</p><p>Write your solutions in a file hw11.txt, hw11.pdf, hw11.rtf, etc. and submit by the due date and time.</p><ol><li><p>Insert the following sequence of keys into an intially empty 2-3 tree. You should write all the trees down as you do the transformations (this is what would be expected on an exam) but for the purposes of grading this exercise you can just draw the final tree that results.</p></li><li><p>Consider the following 2-3 tree:<br>Suppose we count ONLY comparisons between two keys, and NOT checks to see if the key exists, or checks to see if a pointer is null. (i) How many comparisons would necessary to find the key 10? (ii) How about 140? (iii) How about 60? (iv) Which key(s) occurring at leaf nodes would require a minimum number of comparisons? State which and how many comparisons. (v) Which key(s) would require a maximum number of comparisons? State which and how many comparisons. (vi) What is the average number of comparisons to find the keys in this tree (count for all and then divide by the size of the tree).</p></li><li><p>Insert the following keys into a binary heap, showing the structure of the tree (draw them sides as in the homeworks, or some other way) and the contents of the array A at the indicated points. At the end, give the values of the indicated variables.</p></li><li><p>Let us consider using a hash table for a symbol table storing (key, value) pairs, where the key is used as input to the hash function. Insert the following key-value pairs into a hash table implemented with the technique of separate chaining with an array H of size 7. For each insertion, use the hash function hash(x) = (3 * x % 7) on the key part and store the pair in the bucket at H[ hash(key )]. Assume nodes are defined as class Node{ int key; String value; Node next; }.</p></li></ol><ul><li>A. Show the hash table after all insertions are performed. What is the worst-case lookup time (in the number of comparisons), and what is the average-case lookup (average the number of comparisons over all keys in the table)?</li><li>B. Perform the following operations on the table from (a) and show the table that would result</li><li>C. What is the worst-case lookup and what is the average-case lookup for keys in the table that resulted from part (b)?</li><li>D. Give a sequence of keys (just the keys, not pairs) that would all hash to the same location for a table of size 7, creating a worst-case hash table (i.e., start with an empty table, and create a linked list worst-case table).</li><li>E. If we insert M keys into a hash table with N buckets, creating a worst-case table, what is the worst case time for looking up a key? Express in terms of N and M, using Theta(…) notation.</li><li>F. If we insert M keys into a hash table with N buckets, suppose the hash table arranges itself in the best possible way, what is the worst-case lookup? Express in terms of N and M, using Theta(…) notation.</li></ul><ol start="5"><li>Suppose now we have a hash table L using the strategy of linear probing, which just stores integer keys (not key-value pairs). The size of the array is N = 11 and the hash function is hash(k) = 3*k%11. Consider the following series of insertions.</li></ol><h3 id="Grading"><a href="#Grading" class="headerlink" title="Grading"></a>Grading</h3><p>We will be grading this using a grading client that builds an ArticleTable as in the main method of your MiniGoogle, and then calls phraseSearch(…) for various test cases.</p><p>You should develop your code as an interactive program which uses Minipedia as a basis to create the program MiniGoogle, and make sure that it performs as you expect.</p>]]></content>
    
    <summary type="html">
    
      代写Java数据结构作业，作业分为两部分，上半部分的理论知识以及下半部分的编程设计。
    
    </summary>
    
      <category term="Java" scheme="https://tk1307993.coding.me/categories/Java/"/>
    
    
      <category term="Data Structure" scheme="https://tk1307993.coding.me/tags/Data-Structure/"/>
    
      <category term="Fundamentals" scheme="https://tk1307993.coding.me/tags/Fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：COMP10001-Finding-Primes</title>
    <link href="https://tk1307993.coding.me/COMP10001-Finding-Primes.html"/>
    <id>https://tk1307993.coding.me/COMP10001-Finding-Primes.html</id>
    <published>2020-08-16T03:32:12.000Z</published>
    <updated>2020-08-16T02:16:36.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>In lectures we have discussed that the best way to learn computer programming and problem solving is to get hands on and solve problems. In the labs you have investigated creating user defined modules, data validation, and the list data structure. The following problems require you to apply the define, design, implement and test approach to problem solving.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><ol><li>This assignment is individual work. Groups and sharing are not permitted.</li><li>All source code submitted as part of this assignment must contain a statement of authorship or a grade of 0 will be awarded for the entire problem.</li><li>You will be submitting several source code files as well as an assignment report.</li><li>Your assignment report must contain a title page which includes the title of the assignment, your name, student number, your professor’s name, the date, and a statement of authorship.</li><li>Each problem requires evidence of the DDIT approach: an IPO chart, pseudocode or flow chart and testing traces. You may include pseudocode in your Python solutions as comments but you should make a copy of this in your report as well, do not use a screen shot.</li><li>Each implementation must use the style rules defined in labs 1-3.</li><li>For testing your code and for generating your debug traces from implementation testing you may find it convenient to use the command line technique demonstrated in Lab 01.</li></ol><h3 id="Problem-1-Finding-Primes"><a href="#Problem-1-Finding-Primes" class="headerlink" title="Problem 1: Finding Primes"></a>Problem 1: Finding Primes</h3><h4 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h4><p>An ancient algorithm for finding prime numbers is called the Sieve of Eratosthenes. You start with a list of numbers, pick the first and cross out all the multiples of that number in your list. If you start your list at 2 then your first step is to cross out 4, 6, 8, … Then you would pick 3 and cross out 9, 15, … Notice that 6 and 12 were already crossed out because they’re multiples of 2. You then pick 5 because 4 was already crossed out … the first number you cross out is 25! Everything else was already crossed out when you checked 2 or 3. Once you have gone over your entire list whatever numbers remain are prime numbers. After your program creates the list of prime numbers print it out.</p><p>Table 1 shows the values for all primes lower than 30. First we created a list of all numbers from 1-30. Then we eliminated all the ones divisible by 2, shown in green. Next we eliminated all the ones divisible by 3 shown in orange - notice that 12, 18, and 30 were previously eliminated. Next we eliminated anything left that was divisible by 5: only 25 was still in the list. The final list is [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29].</p><ol><li>Ask the user to input a number larger than 2. Validate the input according to the slides definition of data validation. Call this validated number n.</li><li>Create a list of consecutive integers from 2 through n: (2, 3, 4, …, n).</li><li>Create a variable called current that will initially be set to 2.</li><li>For each element in the list, go through the list you created one element at a time. If an element is a multiple of current remove it from the list.</li><li>After you have eliminated all the multiples of current from your list update current to the value of the next highest element of the list.</li><li>While current is less than n repeat steps 4 and 5.</li></ol><p>Note: This problem is difficult to work through if you try to work through it entirely in your head. If you use the techniques that have been presented in this course you can solve this problem. To successfully complete this task consider whether you should use 2 for loops nested inside one another. Take the basic algorithm and try writing out a trace. Simple solutions exist that are less than 20 lines long but it’s ok if yours is longer.</p><p>Your solution to this problem must be accompanied by an IPO chart, a flow chart, and trace information for a value other than 10. The trace must match YOUR flow chart.</p><h4 id="Grading-Scheme-and-Other-Requirements"><a href="#Grading-Scheme-and-Other-Requirements" class="headerlink" title="Grading Scheme and Other Requirements"></a>Grading Scheme and Other Requirements</h4><p>To be eligible for grading your solution must be named primes.py and must contain a statement of authorship.</p><h3 id="Problem-2-Ordering-at-McThoseguys"><a href="#Problem-2-Ordering-at-McThoseguys" class="headerlink" title="Problem 2: Ordering at McThoseguys"></a>Problem 2: Ordering at McThoseguys</h3><h4 id="Problem-Statement-1"><a href="#Problem-Statement-1" class="headerlink" title="Problem Statement"></a>Problem Statement</h4><p>For this problem you should create a definition, a design, testing evidence, and implementation for each module you are asked to create. If you attempt to solve this problem without first creating a flow chart then you should expect great difficulty.<br>The local fast food restaurant, McThoseguys, has started using a computerized order input system for food order taking. You have the job of creating the system which when run asks for the person’s name, greets them and then allows them to pick from several options. Before greeting the person by name the system needs to check if the name that was entered is on the “dirty name” list. If it is on the list then instead of greeting the person ask them to re-enter their name until they enter something that is not on the “dirty name” list. The “dirty name” list is defined below.</p><p>In order to build their meal the user has to make several choices. The choices should be presented as a menu in order to minimize the amount of typing the user has to do. See the sample output in section 4.2 for the formatting. First the user will pick their sandwich wrapper. Next they have a protein selection. After choosing a protein they can pick toppings. Finally they may pick a sandwich sauce. Note that they should be allowed to pick only 1 wrapper, 1 protein, [1-3] toppings which may include repeats, for example choosing cheese two times means double cheese and is allowed, and and 0 or 1 sauce.</p><ul><li>McThoseguys’ list of dirty names is: mud, dirt, dust, booger, diaper</li><li>Sneaky users will try to use capitalization to avoid matches, check the names case insensitively</li><li>Make sure that the dirty names do not appear within the given name; Muddy Mike is not allowed</li><li>The available wrappers are sesame seed bun or soft tortilla shell</li><li>The available protein choices are chicken, beef, or tofu</li><li>The available toppings are tomato, lettuce, pickles, cheese, and onions</li><li>The available sauces are ketchup, mayonaise, and McCalorie Secret Sauce</li></ul><p>Your solution must create a menu module which accepts a list of choices and the minimum and maximum number of choices allowed as parameters and returns a list to your main program. For example you might choose to create the module as def menuModule( choiceList, minimumChoices, maximumChoices) or in some other manner. Your module must not contain any logic or values from the rest of the problem, for example you may not code in questions that refer to toppings or sauces, the module must be completely generic and would work equally well if I started asking the user for car parts. The module should label each menu option with a single character, of your choice, and loop until the required number of acceptable choices has been input. You must validate that the choices input are correct and display an error message for any incorrect choices. After the user has completed their order you should confirm it by displaying the choices to the user along with a simple yes/no prompt, which you will test as a case insensitive string. You do NOT need to repeat the program if they choose “no”.</p><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>Name selection sample:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What <span class="keyword">is</span> your <span class="built_in">name</span>? Joe Dirt</span><br><span class="line">I'm sorry, <span class="keyword">that</span> <span class="built_in">name</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">at</span> McThoseguys.</span><br><span class="line">What <span class="keyword">is</span> your <span class="built_in">name</span>? Filthy McMuddy</span><br><span class="line">I'm sorry, <span class="keyword">that</span> <span class="built_in">name</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">at</span> McThoseguys.</span><br><span class="line">What <span class="keyword">is</span> your <span class="built_in">name</span>? There are those who call <span class="keyword">me</span> ... Tim</span><br><span class="line">Hello There are those who call <span class="keyword">me</span> ... Tim, welcome <span class="keyword">to</span> McThoseguys!</span><br></pre></td></tr></table></figure></p><p>Choosing a wrapper without error sample:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">What would you like <span class="keyword">as</span> your sandwich wrapper?</span><br><span class="line">[<span class="meta">1</span>]sesame seed bun</span><br><span class="line">[<span class="meta">2</span>]soft tortilla shell</span><br><span class="line"></span><br><span class="line">What <span class="keyword">is</span> your choice? <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>Choosing a protein with error sample:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">What would you like <span class="keyword">as</span> your protein choice?</span><br><span class="line">[<span class="meta">1</span>]chicken</span><br><span class="line">[<span class="meta">2</span>]beef</span><br><span class="line">[<span class="meta">3</span>]tofu</span><br><span class="line"></span><br><span class="line">What <span class="keyword">is</span> your choice? <span class="number">4</span></span><br><span class="line">I<span class="string">'m sorry, that isn'</span>t a valid choice, please <span class="keyword">try</span> again.</span><br><span class="line">[<span class="meta">1</span>]chicken</span><br><span class="line">[<span class="meta">2</span>]beef</span><br><span class="line">[<span class="meta">3</span>]tofu</span><br><span class="line"></span><br><span class="line">What <span class="keyword">is</span> your choice? <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>Choosing double onions as toppings sample:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">What would you like as your topping choice (pick <span class="number">1</span><span class="number">-3</span> items)?</span><br><span class="line">[<span class="number">1</span>]tomato</span><br><span class="line">[<span class="number">2</span>]lettuce</span><br><span class="line">[<span class="number">3</span>]pickles</span><br><span class="line">[<span class="number">4</span>]cheese</span><br><span class="line">[<span class="number">5</span>]onions</span><br><span class="line"></span><br><span class="line">What is your choice or enter q to quit? q</span><br><span class="line">I'm sorry, you must choose at least <span class="number">1</span> option(s).</span><br><span class="line">[<span class="number">1</span>]tomato</span><br><span class="line">[<span class="number">2</span>]lettuce</span><br><span class="line">[<span class="number">3</span>]pickles</span><br><span class="line">[<span class="number">4</span>]cheese</span><br><span class="line">[<span class="number">5</span>]onions</span><br><span class="line"></span><br><span class="line">What is your choice or enter q to quit? <span class="number">5</span></span><br><span class="line">[<span class="number">1</span>]tomato</span><br><span class="line">[<span class="number">2</span>]lettuce</span><br><span class="line">[<span class="number">3</span>]pickles</span><br><span class="line">[<span class="number">4</span>]cheese</span><br><span class="line">[<span class="number">5</span>]onions</span><br><span class="line"></span><br><span class="line">What is your choice or enter q to quit? <span class="number">5</span></span><br><span class="line">[<span class="number">1</span>]tomato</span><br><span class="line">[<span class="number">2</span>]lettuce</span><br><span class="line">[<span class="number">3</span>]pickles</span><br><span class="line">[<span class="number">4</span>]cheese</span><br><span class="line">[<span class="number">5</span>]onions</span><br><span class="line"></span><br><span class="line">What is your choice or enter q to quit? q</span><br></pre></td></tr></table></figure></p><p>Choosing “no sauce” sample:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What would you like as a sauce?</span><br><span class="line">[1]ketchup</span><br><span class="line">[2]mayonaise</span><br><span class="line">[3]McCalorie<span class="built_in"> Secret </span>Sauce</span><br><span class="line"></span><br><span class="line">What is your choice <span class="keyword">or</span> enter q <span class="keyword">to</span> quit? q</span><br></pre></td></tr></table></figure></p><p>Different user confirmation samples:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">There</span> <span class="string">are</span> <span class="string">those</span> <span class="string">who</span> <span class="string">call</span> <span class="string">me</span> <span class="string">...</span> <span class="string">Tim,</span> <span class="string">you</span> <span class="string">have</span> <span class="string">chosen</span> <span class="string">a</span> <span class="string">chicken</span> <span class="string">sandwich</span> <span class="string">on</span> <span class="string">a</span> <span class="string">soft</span> <span class="string">tortilla</span> <span class="string">shell,</span> <span class="string">with</span> <span class="string">onions,</span> <span class="string">onions,</span> <span class="string">and</span> <span class="literal">no</span> <span class="string">sauce.</span></span><br><span class="line"></span><br><span class="line"><span class="string">Is</span> <span class="string">this</span> <span class="string">correct,</span> <span class="literal">yes</span> <span class="string">or</span> <span class="literal">no</span><span class="string">?</span> <span class="literal">no</span></span><br><span class="line"><span class="string">Sorry,</span> <span class="string">let's</span> <span class="string">try</span> <span class="string">again</span> <span class="string">from</span> <span class="string">scratch.</span></span><br><span class="line"></span><br><span class="line"><span class="string">There</span> <span class="string">are</span> <span class="string">those</span> <span class="string">who</span> <span class="string">call</span> <span class="string">me</span> <span class="string">...</span> <span class="string">Tim,</span> <span class="string">you</span> <span class="string">have</span> <span class="string">chosen</span> <span class="string">a</span> <span class="string">chicken</span> <span class="string">sandwich</span> <span class="string">on</span> <span class="string">a</span> <span class="string">soft</span> <span class="string">tortilla</span> <span class="string">shell,</span> <span class="string">with</span> <span class="string">onions,</span> <span class="string">onions,</span> <span class="string">and</span> <span class="literal">no</span> <span class="string">sauce.</span></span><br><span class="line"></span><br><span class="line"><span class="string">Is</span> <span class="string">this</span> <span class="string">correct,</span> <span class="literal">yes</span> <span class="string">or</span> <span class="literal">no</span><span class="string">?</span> <span class="string">maybe</span></span><br><span class="line"><span class="string">Please</span> <span class="string">enter</span> <span class="literal">yes</span> <span class="string">or</span> <span class="literal">no</span>.</span><br><span class="line"></span><br><span class="line"><span class="string">There</span> <span class="string">are</span> <span class="string">those</span> <span class="string">who</span> <span class="string">call</span> <span class="string">me</span> <span class="string">...</span> <span class="string">Tim,</span> <span class="string">you</span> <span class="string">have</span> <span class="string">chosen</span> <span class="string">a</span> <span class="string">chicken</span> <span class="string">sandwich</span> <span class="string">on</span> <span class="string">a</span> <span class="string">soft</span> <span class="string">tortilla</span> <span class="string">shell,</span> <span class="string">with</span> <span class="string">onions,</span> <span class="string">onions,</span> <span class="string">and</span> <span class="literal">no</span> <span class="string">sauce.</span></span><br><span class="line"></span><br><span class="line"><span class="string">Is</span> <span class="string">this</span> <span class="string">correct,</span> <span class="literal">yes</span> <span class="string">or</span> <span class="literal">no</span><span class="string">?</span> <span class="literal">yEs</span></span><br><span class="line"><span class="string">Thank</span> <span class="string">you</span> <span class="string">for</span> <span class="string">shopping</span> <span class="string">at</span> <span class="string">McThoseguys!</span> <span class="string">Enjoy</span> <span class="string">your</span> <span class="string">food!</span></span><br></pre></td></tr></table></figure></p><h3 id="Grading-Scheme-and-Other-Requirements-1"><a href="#Grading-Scheme-and-Other-Requirements-1" class="headerlink" title="Grading Scheme and Other Requirements"></a>Grading Scheme and Other Requirements</h3><p>To be eligible for grading your solution must be named mcThoseguys.py and must contain a statement of authorship.</p>]]></content>
    
    <summary type="html">
    
      代写Python基础作业，写一个程序来对质数进行查找。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CEGEG082-Point-in-Polygon</title>
    <link href="https://tk1307993.coding.me/CEGEG082-Point-in-Polygon.html"/>
    <id>https://tk1307993.coding.me/CEGEG082-Point-in-Polygon.html</id>
    <published>2020-08-10T03:32:12.000Z</published>
    <updated>2020-08-10T02:42:17.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-Coursework-Point-in-Polygon"><a href="#Python-Coursework-Point-in-Polygon" class="headerlink" title="Python Coursework: Point in Polygon"></a>Python Coursework: Point in Polygon</h3><p>In this coursework you will apply your programming knowledge to the practical problem of determining whether a point lies inside or outside a polygon, which is a fundamental operation of a GISystem. Your work will build upon the point, polygon and geometry examples that were introduced in the practical sessions and assignments. The point in polygon (PIP) problem is illustrated in figure 1. In the picture, the green area represents a polygon. The red points lie outside the polygon and the blue points lie inside. Visually, this is easy to see, however, it is not so straightforward to determine this computationally.<br>The procedure for PIP that you will use involves two steps:</p><ol><li>Test if the point is inside the minimum bounding rectangle of the polygon.</li><li>If it is, use a PIP algorithm to test whether the point is inside the polygon.<br>These steps are introduced in turn in the following sections.</li></ol><h3 id="Minimum-bounding-rectangle"><a href="#Minimum-bounding-rectangle" class="headerlink" title="Minimum bounding rectangle"></a>Minimum bounding rectangle</h3><p>PIP is a computationally intensive operation. Therefore, it is common to first get the minimum bounding rectangle (MBR, alternatively minimum bounding box) of a polygon and test whether the point lies inside this rectangle. For the purposes of this assignment, the MBR can be found by simply taking the minimum and maximum x and y coordinates of a polygon (a smaller rectangle may be found by rotating the coordinate system). If a given point lies outside this rectangle, then it is definitely outside the polygon and there is no need to proceed to the full PIP algorithm. This is shown graphically in figure 2, where the red box is the MBR.</p><p>It can be seen that the MBR correctly identifies the red point as outside the polygon, but incorrectly identifies one of the blue points as inside. Therefore, it is necessary to use a more sophisticated algorithm to determine whether the blue points do indeed lie inside the polygon.</p><h3 id="The-point-in-polygon-algorithm"><a href="#The-point-in-polygon-algorithm" class="headerlink" title="The point in polygon algorithm"></a>The point in polygon algorithm</h3><p>There are two commonly used PIP algorithms; the ray casting algorithm and the winding number algorithm. The ray casting algorithm is introduced here as it is conceptually simpler, but you are free to use the winding number algorithm in your submission if you wish.</p><h3 id="The-ray-casting-algorithm"><a href="#The-ray-casting-algorithm" class="headerlink" title="The ray casting algorithm"></a>The ray casting algorithm</h3><p>The ray casting algorithm involves drawing a straight line in any direction from the test point, and counting how many times it crosses the boundary of the polygon. If the line crosses the boundary an odd number of times then the point lies inside the polygon. If the line crosses the boundary an even number of times then the point lies outside the polygon. This is depicted graphically in figure 3.</p><h3 id="Special-case"><a href="#Special-case" class="headerlink" title="Special case"></a>Special case</h3><p>There is a situation where the ray casting algorithm may produce inconsistent results. If the ray passes through a vertex (point) on the polygon boundary, it will count as crossing the boundary twice. The problem with this is shown graphically in figure 4.<br>The top ray passes through the vertex and two crosses are counted. However, the ray continues inside the polygon, and when it passes out again, the algorithm wrongly identifies the point as inside. The bottom ray, again, passes through the vertex and two crosses are counted, however, it continues outside the polygon and the point is correctly identified as outside.</p><h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>To complete this coursework, you will build on the point, polygon and geometry classes that you created in the fourth Python tutorial. Your task is to create a Python script that does the following:</p><ol><li>Reads in a list of x, y coordinates from a .csv file and creates a polygon object from them.</li><li>Creates a point object for testing.</li><li>Tests whether the point is inside the polygon and returns “Inside” or “Outside”.</li><li>Plots the point and polygon in a plot window.</li></ol><p>Your control flow for step three may be something like this (note that this is pseudocode and is not intended to be run in Python):<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> point is <span class="keyword">not</span> <span class="keyword">in</span> MBR:  # Test <span class="keyword">if</span> the point is inside the MBR</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"Outside"</span> # <span class="builtin-name">Print</span> outside <span class="keyword">if</span> <span class="literal">True</span></span><br><span class="line">elif point is <span class="keyword">in</span> polygon: # Test <span class="keyword">if</span> point is inside polygon using the ray casting algorithm</span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"Inside"</span> # <span class="builtin-name">Print</span> inside <span class="keyword">if</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="builtin-name">print</span> <span class="string">"Outside"</span> # <span class="builtin-name">Print</span> outside <span class="keyword">if</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>You will get additional marks if you make your code object oriented. As an example, you may notice from the pseudocode above that the PIP operation involves checking the MBR and then running the ray casting algorithm in separate steps. Although the MBR is used in the PIP operation, it may have other uses outside PIP, and therefore should be accessible without running the PIP operation directly. Similarly, there may be other uses for the ray casting algorithm other than PIP. You should try and implement this kind of thinking throughout your code as much as possible.</p><p>There is a wealth of information on how to implement the PIP algorithm online. You are free to adapt code from online sources to work with your data and classes. If you do, any code you use should be referenced in the comments of your code with a URL and author and date (if available). Do not simply copy and paste code verbatim.</p>]]></content>
    
    <summary type="html">
    
      代写Graphics相关算法，判断二维平面上的点，是否属于某个Polygon中。
    
    </summary>
    
      <category term="Python" scheme="https://tk1307993.coding.me/categories/Python/"/>
    
    
      <category term="Algorithm" scheme="https://tk1307993.coding.me/tags/Algorithm/"/>
    
  </entry>
  
</feed>
